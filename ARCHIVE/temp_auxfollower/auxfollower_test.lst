
auxfollower_test.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	e4 18 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	e4 18 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	e4 18 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	e4 18 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	e4 18 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	e4 18 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	e4 18 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	e4 18 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	e4 18 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	e4 18 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	e4 18 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	e4 18 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	e4 18 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	e4 18 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	e4 18 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	e4 18 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	e4 18 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	e4 18 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	e4 18 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	e4 18 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	e4 18 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	e4 18 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	e4 18 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	e4 18 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	e4 18 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	e4 18 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	e4 18 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	e4 18 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	e4 18 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	e4 18 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	e4 18 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	e4 18 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	e4 18 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	e4 18 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	e4 18 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	e4 18 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	e4 18 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	e4 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	e4 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	e4 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	e4 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	e4 18 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	e4 18 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	e4 18 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	e4 18 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	e4 18 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	e4 18 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	e4 18 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	e4 18 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	e4 18 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	e4 18 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	e4 18 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	e4 18 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	e4 18 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	e4 18 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	e4 18 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	e4 18 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	e4 18 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	e4 18 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	e4 18 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	e4 18 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	e4 18 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	e4 18 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	e4 18 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	e4 18 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	e4 18 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	e4 18 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	e4 18 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	e4 18 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	e4 18 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	4f 84 20    	mov.w     #0x844, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	77 00 07    	rcall     0x1214 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	00 8c 21    	mov.w     #0x18c0, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	3a 12 02    	call      0x123a <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	20 00 20    	mov.w     #0x2, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	10 00 20    	mov.w     #0x1, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <__crt_start_mode>:
    1214:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	68 18 04    	goto      0x1868 <__SI2C3Interrupt>
    10e6:	00 00 00 
    10e8:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	e4 18 04    	goto      0x18e4 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001216 <_ledoff>:
} STATE;

volatile STATE e_mystate = STATE_WAIT_FOR_ADDR;

void ledoff(void){ LED1 = 0; LED2 = 0; LED3 = 0;}
    1216:	00 00 fa    	lnk       #0x0
    1218:	dc e2 a9    	bclr.b    0x2dc, #0x7
    121a:	ec 02 a9    	bclr.b    0x2ec, #0x0
    121c:	ec 22 a9    	bclr.b    0x2ec, #0x1
    121e:	00 80 fa    	ulnk      
    1220:	00 00 06    	return    

00001222 <_setred>:
void setred(void){ RED_LED = 1; __asm__("nop"); GREEN_LED = 0;}
    1222:	00 00 fa    	lnk       #0x0
    1224:	da 82 a8    	bset.b    0x2da, #0x4
    1226:	00 00 00    	nop       
    1228:	da a2 a9    	bclr.b    0x2da, #0x5
    122a:	00 80 fa    	ulnk      
    122c:	00 00 06    	return    

0000122e <_setgrn>:
void setgrn(void){ RED_LED = 0; __asm__("nop"); GREEN_LED = 1;}
    122e:	00 00 fa    	lnk       #0x0
    1230:	da 82 a9    	bclr.b    0x2da, #0x4
    1232:	00 00 00    	nop       
    1234:	da a2 a8    	bset.b    0x2da, #0x5
    1236:	00 80 fa    	ulnk      
    1238:	00 00 06    	return    

0000123a <_main>:

void __attribute__((interrupt, auto_psv)) _SI2C3Interrupt(void) {
    uint8_t u8_c;
    _SI2C3IF = 0;

    switch (e_mystate) {

    case STATE_WAIT_FOR_ADDR:
        u8_c = I2C3RCV;     //clear RBF bit for address
        if (I2C3STATbits.R_W) {     // if data transfer is out from slave // check R/W bit of address byte for read or write transaction
            I2C3TRN = datasend;   //Set transmit register to first data byte to send back to master
            I2C3CONbits.SCLREL = 1;     //release clock line so MASTER can drive it// SCL released during slave read
            e_mystate = STATE_SEND_READ_LAST; //goes to read transaction
        }
        else e_mystate = STATE_WAIT_FOR_WRITE_DATA;     // goes to write transaction
        break;

    case STATE_WAIT_FOR_WRITE_DATA:     // write transaction state    //character arrived, place in buffer
        data_from_master = I2C3RCV;        //read the byte
        e_mystate = STATE_WAIT_FOR_ADDR;    // go to wait for next transaction
        break;

    case STATE_SEND_READ_LAST:  //interrupt for last character finished shifting out
        e_mystate = STATE_WAIT_FOR_ADDR;
        break;

    default:
        e_mystate = STATE_WAIT_FOR_ADDR;

    } // end of switch statements
}   // end of ISR

int16_t main(void) {
    123a:	02 00 fa    	lnk       #0x2

    setred();
    123c:	f2 ff 07    	rcall     0x1222 <_setred> <.LFB1> <.LFE0>
    delay_by_nop(300000);
    123e:	00 3e 29    	mov.w     #0x93e0, w0
    1240:	41 00 20    	mov.w     #0x4, w1
    1242:	87 01 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
    setgrn();
    1244:	f4 ff 07    	rcall     0x122e <_setgrn> <.LFB2> <.LFE1>
    delay_by_nop(300000);
    1246:	00 3e 29    	mov.w     #0x93e0, w0
    1248:	41 00 20    	mov.w     #0x4, w1
    124a:	83 01 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>

    ab = (b-a) >>1 ;
    124c:	31 41 80    	mov.w     0x826, w1
    124e:	20 41 80    	mov.w     0x824, w0
    1250:	00 80 50    	sub.w     w1, w0, w0
    1252:	00 80 d1    	asr.w     w0, w0
    1254:	10 40 88    	mov.w     w0, 0x802
    bc = (c-b) >>1  ;
    1256:	41 41 80    	mov.w     0x828, w1
    1258:	30 41 80    	mov.w     0x826, w0
    125a:	00 80 50    	sub.w     w1, w0, w0
    125c:	00 80 d1    	asr.w     w0, w0
    125e:	20 40 88    	mov.w     w0, 0x804
    cd = (d-c) >>1  ;
    1260:	51 41 80    	mov.w     0x82a, w1
    1262:	40 41 80    	mov.w     0x828, w0
    1264:	00 80 50    	sub.w     w1, w0, w0
    1266:	00 80 d1    	asr.w     w0, w0
    1268:	30 40 88    	mov.w     w0, 0x806
    de = (e-d) >>1  ;
    126a:	61 41 80    	mov.w     0x82c, w1
    126c:	50 41 80    	mov.w     0x82a, w0
    126e:	00 80 50    	sub.w     w1, w0, w0
    1270:	00 80 d1    	asr.w     w0, w0
    1272:	40 40 88    	mov.w     w0, 0x808
    ef = (f-e) >>1  ;
    1274:	71 41 80    	mov.w     0x82e, w1
    1276:	60 41 80    	mov.w     0x82c, w0
    1278:	00 80 50    	sub.w     w1, w0, w0
    127a:	00 80 d1    	asr.w     w0, w0
    127c:	50 40 88    	mov.w     w0, 0x80a
    fg = (g-f) >>1  ;
    127e:	81 41 80    	mov.w     0x830, w1
    1280:	70 41 80    	mov.w     0x82e, w0
    1282:	00 80 50    	sub.w     w1, w0, w0
    1284:	00 80 d1    	asr.w     w0, w0
    1286:	60 40 88    	mov.w     w0, 0x80c
    gh = (h-g) >>1  ;
    1288:	91 41 80    	mov.w     0x832, w1
    128a:	80 41 80    	mov.w     0x830, w0
    128c:	00 80 50    	sub.w     w1, w0, w0
    128e:	00 80 d1    	asr.w     w0, w0
    1290:	70 40 88    	mov.w     w0, 0x80e
    hi = (i-h) >>1  ;
    1292:	a1 41 80    	mov.w     0x834, w1
    1294:	90 41 80    	mov.w     0x832, w0
    1296:	00 80 50    	sub.w     w1, w0, w0
    1298:	00 80 d1    	asr.w     w0, w0
    129a:	80 40 88    	mov.w     w0, 0x810
    ij = (j-i) >>1  ;
    129c:	b1 41 80    	mov.w     0x836, w1
    129e:	a0 41 80    	mov.w     0x834, w0
    12a0:	00 80 50    	sub.w     w1, w0, w0
    12a2:	00 80 d1    	asr.w     w0, w0
    12a4:	90 40 88    	mov.w     w0, 0x812
    jk = (k-j) >>1  ;
    12a6:	c1 41 80    	mov.w     0x838, w1
    12a8:	b0 41 80    	mov.w     0x836, w0
    12aa:	00 80 50    	sub.w     w1, w0, w0
    12ac:	00 80 d1    	asr.w     w0, w0
    12ae:	a0 40 88    	mov.w     w0, 0x814
    kl = (l-k) >>1  ;
    12b0:	d1 41 80    	mov.w     0x83a, w1
    12b2:	c0 41 80    	mov.w     0x838, w0
    12b4:	00 80 50    	sub.w     w1, w0, w0
    12b6:	00 80 d1    	asr.w     w0, w0
    12b8:	b0 40 88    	mov.w     w0, 0x816
    lm = (m-l) >>1  ;
    12ba:	e1 41 80    	mov.w     0x83c, w1
    12bc:	d0 41 80    	mov.w     0x83a, w0
    12be:	00 80 50    	sub.w     w1, w0, w0
    12c0:	00 80 d1    	asr.w     w0, w0
    12c2:	c0 40 88    	mov.w     w0, 0x818
    mn = (n-m) >>1  ;
    12c4:	f1 41 80    	mov.w     0x83e, w1
    12c6:	e0 41 80    	mov.w     0x83c, w0
    12c8:	00 80 50    	sub.w     w1, w0, w0
    12ca:	00 80 d1    	asr.w     w0, w0
    12cc:	d0 40 88    	mov.w     w0, 0x81a
    no = (o-n) >>1  ;
    12ce:	01 42 80    	mov.w     0x840, w1
    12d0:	f0 41 80    	mov.w     0x83e, w0
    12d2:	00 80 50    	sub.w     w1, w0, w0
    12d4:	00 80 d1    	asr.w     w0, w0
    12d6:	e0 40 88    	mov.w     w0, 0x81c

    init_elecanisms();
    12d8:	8a 02 07    	rcall     0x17ee <_init_elecanisms> <.L0> <.LFB0> <.LFE12> <.Letext0> <.Ltext0>
    i2c_init(157);      // Initializes I2C on I2C3
    12da:	d0 09 20    	mov.w     #0x9d, w0
    12dc:	4d 01 07    	rcall     0x1578 <_i2c_init> <.LFB1> <.LFE0>

    I2C3ADD = SLAVE_ADDR>>1;   //initialize the address register
    12de:	00 03 20    	mov.w     #0x30, w0
    12e0:	d0 13 88    	mov.w     w0, 0x27a
    I2C3MSK = 0;
    12e2:	7c 22 ef    	clr.w     0x27c

    D1_DIR = OUT;
    12e4:	d8 82 a9    	bclr.b    0x2d8, #0x4
    D0_DIR = OUT;
    12e6:	d8 a2 a9    	bclr.b    0x2d8, #0x5

    setred();
    12e8:	9c ff 07    	rcall     0x1222 <_setred> <.LFB1> <.LFE0>
    // _SI2C1IP = 1;        // Maybe eventially fo this for interrupt priority

    _SI2C3IE = 1;       // these two are the same! The underscore is cool.
    12ea:	9e 80 a8    	bset.b    0x9e, #0x4
    12ec:	03 00 37    	bra       0x12f4 <.L52> <.LBB2>

000012ee <.L53>:

    while (1) {
        if (LED1 == 1){setgrn();}
        if (LED2 == 1){setred();}
        if (LED3 == 1){setred();}

        uint16_t val = read_analog(A0_AN);

        if( val < (a+ab) ) {state = s;}                       //b
        if( val > (b-ab) && val < (b+bc) ) {state = s8;}      //b
        if( val > (c-bc) && val < (c+cd) ) {state = s4;}      //c
        if( val > (d-cd) && val < (d+de) ) {state = s48;}     //d
        if( val > (e-de) && val < (e+ef) ) {state = s2;}      //e
        if( val > (f-ef) && val < (f+fg) ) {state = s28;}     //f
        if( val > (g-fg) && val < (g+gh) ) {state = s24;}     //g
        if( val > (h-gh) && val < (h+hi) ) {state = s248;}    //h
        if( val > (i-hi) && val < (i+ij) ) {state = s1;}      //i
        if( val > (j-ij) && val < (j+jk) ) {state = s18;}     //j
        if( val > (k-jk) && val < (k+kl) ) {state = s14;}     //k
        if( val > (l-kl) && val < (l+lm) ) {state = s12;}     //l
        if( val > (m-lm) && val < (m+mn) ) {state = s128;}    //m
        if( val > (n-mn) && val < (n+no) ) {state = s124;}    //n
        if( val > (o-no) ) {state = s1248;}                 //o

        switch(state){

            case s1:    ledoff(); LED1 = 1; datasend = 0x01; break;
            case s2:    ledoff(); LED1 = 1; datasend = 0x02; break;
            case s4:    ledoff(); LED1 = 1; datasend = 0x03; break;
            case s8:    ledoff(); LED1 = 1; datasend = 0x04; break;

            case s12:   ledoff(); LED2 = 1; datasend = 0x05; break;
            case s14:   ledoff(); LED2 = 1; datasend = 0x06; break;
            case s18:   ledoff(); LED2 = 1; datasend = 0x07; break;
            case s24:   ledoff(); LED2 = 1; datasend = 0x08; break;
            case s28:   ledoff(); LED2 = 1; datasend = 0x09; break;
            case s48:   ledoff(); LED2 = 1; datasend = 0x10; break;

            case s124:  ledoff(); LED3 = 1; datasend = 0x11; break;
            case s128:  ledoff(); LED3 = 1; datasend = 0x12; break;
            case s148:  ledoff(); LED3 = 1; datasend = 0x13; break;
            case s248:  ledoff(); LED3 = 1; datasend = 0x14; break;
            case s1248: ledoff(); LED3 = 1; datasend = 0x15; break;

            case s:     ledoff(); datasend = 0x16; break;
            case soops: ledoff(); datasend = 0x17; break;
            case sbig:  ledoff(); datasend = 0x18; break;

            // default:
            //     LED1 = 1;




        } // end of switch statement

        // delay_by_nop(30000);
        // LED3 = !LED3;
        // delay_by_nop(30000);
    }
    12ee:	00 00 00    	nop       
    12f0:	01 00 37    	bra       0x12f4 <.L52> <.LBB2>

000012f2 <.L54>:
    12f2:	00 00 00    	nop       

000012f4 <.L52>:
    12f4:	e1 16 80    	mov.w     0x2dc, w1
    12f6:	00 08 20    	mov.w     #0x80, w0
    12f8:	00 80 60    	and.w     w1, w0, w0
    12fa:	00 00 e0    	cp0.w     w0
    12fc:	01 00 32    	bra       Z, 0x1300 <.L14>
    12fe:	97 ff 07    	rcall     0x122e <_setgrn> <.LFB2> <.LFE1>

00001300 <.L14>:
    1300:	60 17 80    	mov.w     0x2ec, w0
    1302:	61 00 60    	and.w     w0, #0x1, w0
    1304:	00 00 e0    	cp0.w     w0
    1306:	01 00 32    	bra       Z, 0x130a <.L15>
    1308:	8c ff 07    	rcall     0x1222 <_setred> <.LFB1> <.LFE0>

0000130a <.L15>:
    130a:	60 17 80    	mov.w     0x2ec, w0
    130c:	62 00 60    	and.w     w0, #0x2, w0
    130e:	00 00 e0    	cp0.w     w0
    1310:	01 00 32    	bra       Z, 0x1314 <.L16>
    1312:	87 ff 07    	rcall     0x1222 <_setred> <.LFB1> <.LFE0>

00001314 <.L16>:
    1314:	50 00 20    	mov.w     #0x5, w0
    1316:	9b 02 07    	rcall     0x184e <_read_analog> <.LFB1> <.LFE0>
    1318:	00 0f 78    	mov.w     w0, [w14]
    131a:	21 41 80    	mov.w     0x824, w1
    131c:	10 40 80    	mov.w     0x802, w0
    131e:	00 80 40    	add.w     w1, w0, w0
    1320:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1322:	02 00 36    	bra       LEU, 0x1328 <.L17>
    1324:	f0 00 20    	mov.w     #0xf, w0
    1326:	00 40 88    	mov.w     w0, 0x800

00001328 <.L17>:
    1328:	31 41 80    	mov.w     0x826, w1
    132a:	10 40 80    	mov.w     0x802, w0
    132c:	00 80 50    	sub.w     w1, w0, w0
    132e:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1330:	07 00 31    	bra       C, 0x1340 <.L18>
    1332:	31 41 80    	mov.w     0x826, w1
    1334:	20 40 80    	mov.w     0x804, w0
    1336:	00 80 40    	add.w     w1, w0, w0
    1338:	9e 0f 50    	sub.w     w0, [w14], [w15]
    133a:	02 00 36    	bra       LEU, 0x1340 <.L18>
    133c:	e0 00 20    	mov.w     #0xe, w0
    133e:	00 40 88    	mov.w     w0, 0x800

00001340 <.L18>:
    1340:	41 41 80    	mov.w     0x828, w1
    1342:	20 40 80    	mov.w     0x804, w0
    1344:	00 80 50    	sub.w     w1, w0, w0
    1346:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1348:	07 00 31    	bra       C, 0x1358 <.L19>
    134a:	41 41 80    	mov.w     0x828, w1
    134c:	30 40 80    	mov.w     0x806, w0
    134e:	00 80 40    	add.w     w1, w0, w0
    1350:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1352:	02 00 36    	bra       LEU, 0x1358 <.L19>
    1354:	d0 00 20    	mov.w     #0xd, w0
    1356:	00 40 88    	mov.w     w0, 0x800

00001358 <.L19>:
    1358:	51 41 80    	mov.w     0x82a, w1
    135a:	30 40 80    	mov.w     0x806, w0
    135c:	00 80 50    	sub.w     w1, w0, w0
    135e:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1360:	07 00 31    	bra       C, 0x1370 <.L20>
    1362:	51 41 80    	mov.w     0x82a, w1
    1364:	40 40 80    	mov.w     0x808, w0
    1366:	00 80 40    	add.w     w1, w0, w0
    1368:	9e 0f 50    	sub.w     w0, [w14], [w15]
    136a:	02 00 36    	bra       LEU, 0x1370 <.L20>
    136c:	c0 00 20    	mov.w     #0xc, w0
    136e:	00 40 88    	mov.w     w0, 0x800

00001370 <.L20>:
    1370:	61 41 80    	mov.w     0x82c, w1
    1372:	40 40 80    	mov.w     0x808, w0
    1374:	00 80 50    	sub.w     w1, w0, w0
    1376:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1378:	07 00 31    	bra       C, 0x1388 <.L21>
    137a:	61 41 80    	mov.w     0x82c, w1
    137c:	50 40 80    	mov.w     0x80a, w0
    137e:	00 80 40    	add.w     w1, w0, w0
    1380:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1382:	02 00 36    	bra       LEU, 0x1388 <.L21>
    1384:	b0 00 20    	mov.w     #0xb, w0
    1386:	00 40 88    	mov.w     w0, 0x800

00001388 <.L21>:
    1388:	71 41 80    	mov.w     0x82e, w1
    138a:	50 40 80    	mov.w     0x80a, w0
    138c:	00 80 50    	sub.w     w1, w0, w0
    138e:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1390:	07 00 31    	bra       C, 0x13a0 <.L22>
    1392:	71 41 80    	mov.w     0x82e, w1
    1394:	60 40 80    	mov.w     0x80c, w0
    1396:	00 80 40    	add.w     w1, w0, w0
    1398:	9e 0f 50    	sub.w     w0, [w14], [w15]
    139a:	02 00 36    	bra       LEU, 0x13a0 <.L22>
    139c:	a0 00 20    	mov.w     #0xa, w0
    139e:	00 40 88    	mov.w     w0, 0x800

000013a0 <.L22>:
    13a0:	81 41 80    	mov.w     0x830, w1
    13a2:	60 40 80    	mov.w     0x80c, w0
    13a4:	00 80 50    	sub.w     w1, w0, w0
    13a6:	9e 0f 50    	sub.w     w0, [w14], [w15]
    13a8:	07 00 31    	bra       C, 0x13b8 <.L23>
    13aa:	81 41 80    	mov.w     0x830, w1
    13ac:	70 40 80    	mov.w     0x80e, w0
    13ae:	00 80 40    	add.w     w1, w0, w0
    13b0:	9e 0f 50    	sub.w     w0, [w14], [w15]
    13b2:	02 00 36    	bra       LEU, 0x13b8 <.L23>
    13b4:	90 00 20    	mov.w     #0x9, w0
    13b6:	00 40 88    	mov.w     w0, 0x800

000013b8 <.L23>:
    13b8:	91 41 80    	mov.w     0x832, w1
    13ba:	70 40 80    	mov.w     0x80e, w0
    13bc:	00 80 50    	sub.w     w1, w0, w0
    13be:	9e 0f 50    	sub.w     w0, [w14], [w15]
    13c0:	07 00 31    	bra       C, 0x13d0 <.L24>
    13c2:	91 41 80    	mov.w     0x832, w1
    13c4:	80 40 80    	mov.w     0x810, w0
    13c6:	00 80 40    	add.w     w1, w0, w0
    13c8:	9e 0f 50    	sub.w     w0, [w14], [w15]
    13ca:	02 00 36    	bra       LEU, 0x13d0 <.L24>
    13cc:	80 00 20    	mov.w     #0x8, w0
    13ce:	00 40 88    	mov.w     w0, 0x800

000013d0 <.L24>:
    13d0:	a1 41 80    	mov.w     0x834, w1
    13d2:	80 40 80    	mov.w     0x810, w0
    13d4:	00 80 50    	sub.w     w1, w0, w0
    13d6:	9e 0f 50    	sub.w     w0, [w14], [w15]
    13d8:	07 00 31    	bra       C, 0x13e8 <.L25>
    13da:	a1 41 80    	mov.w     0x834, w1
    13dc:	90 40 80    	mov.w     0x812, w0
    13de:	00 80 40    	add.w     w1, w0, w0
    13e0:	9e 0f 50    	sub.w     w0, [w14], [w15]
    13e2:	02 00 36    	bra       LEU, 0x13e8 <.L25>
    13e4:	70 00 20    	mov.w     #0x7, w0
    13e6:	00 40 88    	mov.w     w0, 0x800

000013e8 <.L25>:
    13e8:	b1 41 80    	mov.w     0x836, w1
    13ea:	90 40 80    	mov.w     0x812, w0
    13ec:	00 80 50    	sub.w     w1, w0, w0
    13ee:	9e 0f 50    	sub.w     w0, [w14], [w15]
    13f0:	07 00 31    	bra       C, 0x1400 <.L26>
    13f2:	b1 41 80    	mov.w     0x836, w1
    13f4:	a0 40 80    	mov.w     0x814, w0
    13f6:	00 80 40    	add.w     w1, w0, w0
    13f8:	9e 0f 50    	sub.w     w0, [w14], [w15]
    13fa:	02 00 36    	bra       LEU, 0x1400 <.L26>
    13fc:	60 00 20    	mov.w     #0x6, w0
    13fe:	00 40 88    	mov.w     w0, 0x800

00001400 <.L26>:
    1400:	c1 41 80    	mov.w     0x838, w1
    1402:	a0 40 80    	mov.w     0x814, w0
    1404:	00 80 50    	sub.w     w1, w0, w0
    1406:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1408:	07 00 31    	bra       C, 0x1418 <.L27>
    140a:	c1 41 80    	mov.w     0x838, w1
    140c:	b0 40 80    	mov.w     0x816, w0
    140e:	00 80 40    	add.w     w1, w0, w0
    1410:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1412:	02 00 36    	bra       LEU, 0x1418 <.L27>
    1414:	50 00 20    	mov.w     #0x5, w0
    1416:	00 40 88    	mov.w     w0, 0x800

00001418 <.L27>:
    1418:	d1 41 80    	mov.w     0x83a, w1
    141a:	b0 40 80    	mov.w     0x816, w0
    141c:	00 80 50    	sub.w     w1, w0, w0
    141e:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1420:	07 00 31    	bra       C, 0x1430 <.L28>
    1422:	d1 41 80    	mov.w     0x83a, w1
    1424:	c0 40 80    	mov.w     0x818, w0
    1426:	00 80 40    	add.w     w1, w0, w0
    1428:	9e 0f 50    	sub.w     w0, [w14], [w15]
    142a:	02 00 36    	bra       LEU, 0x1430 <.L28>
    142c:	30 00 20    	mov.w     #0x3, w0
    142e:	00 40 88    	mov.w     w0, 0x800

00001430 <.L28>:
    1430:	e1 41 80    	mov.w     0x83c, w1
    1432:	c0 40 80    	mov.w     0x818, w0
    1434:	00 80 50    	sub.w     w1, w0, w0
    1436:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1438:	07 00 31    	bra       C, 0x1448 <.L29>
    143a:	e1 41 80    	mov.w     0x83c, w1
    143c:	d0 40 80    	mov.w     0x81a, w0
    143e:	00 80 40    	add.w     w1, w0, w0
    1440:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1442:	02 00 36    	bra       LEU, 0x1448 <.L29>
    1444:	20 00 20    	mov.w     #0x2, w0
    1446:	00 40 88    	mov.w     w0, 0x800

00001448 <.L29>:
    1448:	f1 41 80    	mov.w     0x83e, w1
    144a:	d0 40 80    	mov.w     0x81a, w0
    144c:	00 80 50    	sub.w     w1, w0, w0
    144e:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1450:	07 00 31    	bra       C, 0x1460 <.L30>
    1452:	f1 41 80    	mov.w     0x83e, w1
    1454:	e0 40 80    	mov.w     0x81c, w0
    1456:	00 80 40    	add.w     w1, w0, w0
    1458:	9e 0f 50    	sub.w     w0, [w14], [w15]
    145a:	02 00 36    	bra       LEU, 0x1460 <.L30>
    145c:	10 00 20    	mov.w     #0x1, w0
    145e:	00 40 88    	mov.w     w0, 0x800

00001460 <.L30>:
    1460:	01 42 80    	mov.w     0x840, w1
    1462:	e0 40 80    	mov.w     0x81c, w0
    1464:	00 80 50    	sub.w     w1, w0, w0
    1466:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1468:	01 00 31    	bra       C, 0x146c <.L31>
    146a:	00 28 ef    	clr.w     0x800

0000146c <.L31>:
    146c:	00 40 80    	mov.w     0x800, w0
    146e:	80 00 eb    	clr.w     w1
    1470:	22 01 20    	mov.w     #0x12, w2
    1472:	03 00 20    	mov.w     #0x0, w3
    1474:	82 0f 50    	sub.w     w0, w2, [w15]
    1476:	83 8f 58    	subb.w    w1, w3, [w15]
    1478:	3a ff 3e    	bra       GTU, 0x12ee <.L53>
    147a:	00 60 01    	bra       w0
    147c:	58 00 37    	bra       0x152e <.L33>
    147e:	43 00 37    	bra       0x1506 <.L34>
    1480:	47 00 37    	bra       0x1510 <.L35>
    1482:	23 00 37    	bra       0x14ca <.L36>
    1484:	4a 00 37    	bra       0x151a <.L37>
    1486:	26 00 37    	bra       0x14d4 <.L38>
    1488:	2a 00 37    	bra       0x14de <.L39>
    148a:	0b 00 37    	bra       0x14a2 <.L40>
    148c:	4b 00 37    	bra       0x1524 <.L41>
    148e:	2c 00 37    	bra       0x14e8 <.L42>
    1490:	30 00 37    	bra       0x14f2 <.L43>
    1492:	0c 00 37    	bra       0x14ac <.L44>
    1494:	33 00 37    	bra       0x14fc <.L45>
    1496:	0f 00 37    	bra       0x14b6 <.L46>
    1498:	13 00 37    	bra       0x14c0 <.L47>
    149a:	4e 00 37    	bra       0x1538 <.L48>
    149c:	51 00 37    	bra       0x1540 <.L49>
    149e:	29 ff 37    	bra       0x12f2 <.L54>
    14a0:	53 00 37    	bra       0x1548 <.L50>

000014a2 <.L40>:
    14a2:	b9 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    14a4:	dc e2 a8    	bset.b    0x2dc, #0x7
    14a6:	10 00 20    	mov.w     #0x1, w0
    14a8:	10 42 88    	mov.w     w0, 0x842
    14aa:	52 00 37    	bra       0x1550 <.L32> <.LBE2>

000014ac <.L44>:
    14ac:	b4 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    14ae:	dc e2 a8    	bset.b    0x2dc, #0x7
    14b0:	20 00 20    	mov.w     #0x2, w0
    14b2:	10 42 88    	mov.w     w0, 0x842
    14b4:	4d 00 37    	bra       0x1550 <.L32> <.LBE2>

000014b6 <.L46>:
    14b6:	af fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    14b8:	dc e2 a8    	bset.b    0x2dc, #0x7
    14ba:	30 00 20    	mov.w     #0x3, w0
    14bc:	10 42 88    	mov.w     w0, 0x842
    14be:	48 00 37    	bra       0x1550 <.L32> <.LBE2>

000014c0 <.L47>:
    14c0:	aa fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    14c2:	dc e2 a8    	bset.b    0x2dc, #0x7
    14c4:	40 00 20    	mov.w     #0x4, w0
    14c6:	10 42 88    	mov.w     w0, 0x842
    14c8:	43 00 37    	bra       0x1550 <.L32> <.LBE2>

000014ca <.L36>:
    14ca:	a5 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    14cc:	ec 02 a8    	bset.b    0x2ec, #0x0
    14ce:	50 00 20    	mov.w     #0x5, w0
    14d0:	10 42 88    	mov.w     w0, 0x842
    14d2:	3e 00 37    	bra       0x1550 <.L32> <.LBE2>

000014d4 <.L38>:
    14d4:	a0 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    14d6:	ec 02 a8    	bset.b    0x2ec, #0x0
    14d8:	60 00 20    	mov.w     #0x6, w0
    14da:	10 42 88    	mov.w     w0, 0x842
    14dc:	39 00 37    	bra       0x1550 <.L32> <.LBE2>

000014de <.L39>:
    14de:	9b fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    14e0:	ec 02 a8    	bset.b    0x2ec, #0x0
    14e2:	70 00 20    	mov.w     #0x7, w0
    14e4:	10 42 88    	mov.w     w0, 0x842
    14e6:	34 00 37    	bra       0x1550 <.L32> <.LBE2>

000014e8 <.L42>:
    14e8:	96 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    14ea:	ec 02 a8    	bset.b    0x2ec, #0x0
    14ec:	80 00 20    	mov.w     #0x8, w0
    14ee:	10 42 88    	mov.w     w0, 0x842
    14f0:	2f 00 37    	bra       0x1550 <.L32> <.LBE2>

000014f2 <.L43>:
    14f2:	91 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    14f4:	ec 02 a8    	bset.b    0x2ec, #0x0
    14f6:	90 00 20    	mov.w     #0x9, w0
    14f8:	10 42 88    	mov.w     w0, 0x842
    14fa:	2a 00 37    	bra       0x1550 <.L32> <.LBE2>

000014fc <.L45>:
    14fc:	8c fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    14fe:	ec 02 a8    	bset.b    0x2ec, #0x0
    1500:	00 01 20    	mov.w     #0x10, w0
    1502:	10 42 88    	mov.w     w0, 0x842
    1504:	25 00 37    	bra       0x1550 <.L32> <.LBE2>

00001506 <.L34>:
    1506:	87 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    1508:	ec 22 a8    	bset.b    0x2ec, #0x1
    150a:	10 01 20    	mov.w     #0x11, w0
    150c:	10 42 88    	mov.w     w0, 0x842
    150e:	20 00 37    	bra       0x1550 <.L32> <.LBE2>

00001510 <.L35>:
    1510:	82 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    1512:	ec 22 a8    	bset.b    0x2ec, #0x1
    1514:	20 01 20    	mov.w     #0x12, w0
    1516:	10 42 88    	mov.w     w0, 0x842
    1518:	1b 00 37    	bra       0x1550 <.L32> <.LBE2>

0000151a <.L37>:
    151a:	7d fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    151c:	ec 22 a8    	bset.b    0x2ec, #0x1
    151e:	30 01 20    	mov.w     #0x13, w0
    1520:	10 42 88    	mov.w     w0, 0x842
    1522:	16 00 37    	bra       0x1550 <.L32> <.LBE2>

00001524 <.L41>:
    1524:	78 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    1526:	ec 22 a8    	bset.b    0x2ec, #0x1
    1528:	40 01 20    	mov.w     #0x14, w0
    152a:	10 42 88    	mov.w     w0, 0x842
    152c:	11 00 37    	bra       0x1550 <.L32> <.LBE2>

0000152e <.L33>:
    152e:	73 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    1530:	ec 22 a8    	bset.b    0x2ec, #0x1
    1532:	50 01 20    	mov.w     #0x15, w0
    1534:	10 42 88    	mov.w     w0, 0x842
    1536:	0c 00 37    	bra       0x1550 <.L32> <.LBE2>

00001538 <.L48>:
    1538:	6e fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    153a:	60 01 20    	mov.w     #0x16, w0
    153c:	10 42 88    	mov.w     w0, 0x842
    153e:	08 00 37    	bra       0x1550 <.L32> <.LBE2>

00001540 <.L49>:
    1540:	6a fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    1542:	70 01 20    	mov.w     #0x17, w0
    1544:	10 42 88    	mov.w     w0, 0x842
    1546:	04 00 37    	bra       0x1550 <.L32> <.LBE2>

00001548 <.L50>:
    1548:	66 fe 07    	rcall     0x1216 <_ledoff> <.L0> <.LFB0> <.Ltext0>
    154a:	80 01 20    	mov.w     #0x18, w0
    154c:	10 42 88    	mov.w     w0, 0x842
    154e:	00 00 00    	nop       

00001550 <.L32>:
    1550:	d1 fe 37    	bra       0x12f4 <.L52> <.LBB2>

00001552 <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    1552:	08 00 fa    	lnk       #0x8
    1554:	20 07 98    	mov.w     w0, [w14+4]
    1556:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    1558:	60 00 b8    	mul.uu    w0, #0x0, w0
    155a:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    155c:	05 00 37    	bra       0x1568 <.L2>

0000155e <.L3>:
        __asm__("nop");
    155e:	00 00 00    	nop       
        count +=1;
    1560:	12 00 20    	mov.w     #0x1, w2
    1562:	03 00 20    	mov.w     #0x0, w3
    1564:	1e 0f 41    	add.w     w2, [w14], [w14]
    1566:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00001568 <.L2>:
    1568:	2e 00 90    	mov.w     [w14+4], w0
    156a:	be 00 90    	mov.w     [w14+6], w1
    156c:	1e 01 be    	mov.d     [w14], w2
    156e:	80 0f 51    	sub.w     w2, w0, [w15]
    1570:	81 8f 59    	subb.w    w3, w1, [w15]
    1572:	f5 ff 39    	bra       NC, 0x155e <.L3>
    }
}
    1574:	00 80 fa    	ulnk      
    1576:	00 00 06    	return    

00001578 <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    1578:	04 00 fa    	lnk       #0x4
    157a:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    157c:	1e 00 90    	mov.w     [w14+2], w0
    157e:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    1580:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    1582:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    1584:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    1586:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    1588:	80 13 80    	mov.w     0x270, w0
    158a:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    158c:	36 00 07    	rcall     0x15fa <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    158e:	00 80 fa    	ulnk      
    1590:	00 00 06    	return    

00001592 <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    1592:	02 00 fa    	lnk       #0x2
   int x = 0;
    1594:	00 00 eb    	clr.w     w0
    1596:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    1598:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    159a:	a0 00 20    	mov.w     #0xa, w0
    159c:	01 00 20    	mov.w     #0x0, w1
    159e:	d9 ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    15a0:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    15a2:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    15a4:	07 00 37    	bra       0x15b4 <.L6>

000015a6 <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    15a6:	10 00 20    	mov.w     #0x1, w0
    15a8:	01 00 20    	mov.w     #0x0, w1
    15aa:	d3 ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
      x++;
    15ac:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    15ae:	1e 00 78    	mov.w     [w14], w0
    15b0:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    15b2:	05 00 3c    	bra       GT, 0x15be <.L9>

000015b4 <.L6>:
    15b4:	b0 13 80    	mov.w     0x276, w0
    15b6:	61 00 60    	and.w     w0, #0x1, w0
    15b8:	00 00 e0    	cp0.w     w0
    15ba:	f5 ff 3a    	bra       NZ, 0x15a6 <.L8>
    15bc:	01 00 37    	bra       0x15c0 <.L7>

000015be <.L9>:
      break;
    15be:	00 00 00    	nop       

000015c0 <.L7>:
   }
   delay_by_nop(2);
    15c0:	20 00 20    	mov.w     #0x2, w0
    15c2:	01 00 20    	mov.w     #0x0, w1
    15c4:	c6 ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
}
    15c6:	00 80 fa    	ulnk      
    15c8:	00 00 06    	return    

000015ca <_i2c_restart>:

void i2c_restart(void){
    15ca:	02 00 fa    	lnk       #0x2
   int x = 0;
    15cc:	00 00 eb    	clr.w     w0
    15ce:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    15d0:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    15d2:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    15d4:	07 00 37    	bra       0x15e4 <.L11>

000015d6 <.L13>:
      delay_by_nop(1);
    15d6:	10 00 20    	mov.w     #0x1, w0
    15d8:	01 00 20    	mov.w     #0x0, w1
    15da:	bb ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
      x++;
    15dc:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    15de:	1e 00 78    	mov.w     [w14], w0
    15e0:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    15e2:	05 00 3c    	bra       GT, 0x15ee <.L14>

000015e4 <.L11>:
    15e4:	b0 13 80    	mov.w     0x276, w0
    15e6:	62 00 60    	and.w     w0, #0x2, w0
    15e8:	00 00 e0    	cp0.w     w0
    15ea:	f5 ff 3a    	bra       NZ, 0x15d6 <.L13>
    15ec:	01 00 37    	bra       0x15f0 <.L12>

000015ee <.L14>:
    15ee:	00 00 00    	nop       

000015f0 <.L12>:
   }
   delay_by_nop(2);
    15f0:	20 00 20    	mov.w     #0x2, w0
    15f2:	01 00 20    	mov.w     #0x0, w1
    15f4:	ae ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
}
    15f6:	00 80 fa    	ulnk      
    15f8:	00 00 06    	return    

000015fa <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    15fa:	02 00 fa    	lnk       #0x2
   int x = 0;
    15fc:	00 00 eb    	clr.w     w0
    15fe:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    1600:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    1602:	07 00 37    	bra       0x1612 <.L16>

00001604 <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    1604:	10 00 20    	mov.w     #0x1, w0
    1606:	01 00 20    	mov.w     #0x0, w1
    1608:	a4 ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
      x ++;
    160a:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    160c:	1e 00 78    	mov.w     [w14], w0
    160e:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1610:	05 00 3c    	bra       GT, 0x161c <.L19>

00001612 <.L16>:
    1612:	b0 13 80    	mov.w     0x276, w0
    1614:	64 00 60    	and.w     w0, #0x4, w0
    1616:	00 00 e0    	cp0.w     w0
    1618:	f5 ff 3a    	bra       NZ, 0x1604 <.L18>
    161a:	01 00 37    	bra       0x161e <.L17>

0000161c <.L19>:
    161c:	00 00 00    	nop       

0000161e <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    161e:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    1620:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    1622:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    1624:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    1626:	40 01 20    	mov.w     #0x14, w0
    1628:	01 00 20    	mov.w     #0x0, w1
    162a:	93 ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
}
    162c:	00 80 fa    	ulnk      
    162e:	00 00 06    	return    

00001630 <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    1630:	04 00 fa    	lnk       #0x4
    1632:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    1634:	00 00 00    	nop       

00001636 <.L21>:
    1636:	c0 13 80    	mov.w     0x278, w0
    1638:	61 00 60    	and.w     w0, #0x1, w0
    163a:	00 00 e0    	cp0.w     w0
    163c:	fc ff 3a    	bra       NZ, 0x1636 <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    163e:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    1640:	1e 00 90    	mov.w     [w14+2], w0
    1642:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    1644:	00 00 eb    	clr.w     w0
    1646:	00 0f 78    	mov.w     w0, [w14]
    1648:	09 00 37    	bra       0x165c <.L22>

0000164a <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    164a:	c1 13 80    	mov.w     0x278, w1
    164c:	00 00 24    	mov.w     #0x4000, w0
    164e:	00 80 60    	and.w     w1, w0, w0
    1650:	00 00 e0    	cp0.w     w0
    1652:	09 00 32    	bra       Z, 0x1666 <.L29>
      delay_by_nop(1); }
    1654:	10 00 20    	mov.w     #0x1, w0
    1656:	01 00 20    	mov.w     #0x0, w1
    1658:	7c ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
    165a:	1e 0f e8    	inc.w     [w14], [w14]

0000165c <.L22>:
    165c:	30 1f 20    	mov.w     #0x1f3, w0
    165e:	9e 00 78    	mov.w     [w14], w1
    1660:	80 8f 50    	sub.w     w1, w0, [w15]
    1662:	f3 ff 34    	bra       LE, 0x164a <.L25>
    1664:	01 00 37    	bra       0x1668 <.L24>

00001666 <.L29>:
    1666:	00 00 00    	nop       

00001668 <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    1668:	40 1f 20    	mov.w     #0x1f4, w0
    166a:	9e 00 78    	mov.w     [w14], w1
    166c:	80 8f 50    	sub.w     w1, w0, [w15]
    166e:	02 00 3a    	bra       NZ, 0x1674 <.L26>
        return(1); }    // return 1 to indicate failure
    1670:	10 c0 b3    	mov.b     #0x1, w0
    1672:	0c 00 37    	bra       0x168c <.L27>

00001674 <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    1674:	c1 13 80    	mov.w     0x278, w1
    1676:	00 00 28    	mov.w     #0x8000, w0
    1678:	00 80 60    	and.w     w1, w0, w0
    167a:	00 00 e0    	cp0.w     w0
    167c:	03 00 32    	bra       Z, 0x1684 <.L28>
      reset_i2c_bus();
    167e:	bd ff 07    	rcall     0x15fa <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    1680:	10 c0 b3    	mov.b     #0x1, w0
    1682:	04 00 37    	bra       0x168c <.L27>

00001684 <.L28>:

   delay_by_nop(2);
    1684:	20 00 20    	mov.w     #0x2, w0
    1686:	01 00 20    	mov.w     #0x0, w1
    1688:	64 ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
   return(0);
    168a:	00 40 eb    	clr.b     w0

0000168c <.L27>:
}
    168c:	00 80 fa    	ulnk      
    168e:	00 00 06    	return    

00001690 <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    1690:	04 00 fa    	lnk       #0x4
   int i = 0;
    1692:	00 00 eb    	clr.w     w0
    1694:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1696:	00 40 eb    	clr.b     w0
    1698:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    169a:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    169c:	05 00 37    	bra       0x16a8 <.L31>

0000169e <.L33>:
      i ++;
    169e:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    16a0:	00 7d 20    	mov.w     #0x7d0, w0
    16a2:	9e 00 78    	mov.w     [w14], w1
    16a4:	80 8f 50    	sub.w     w1, w0, [w15]
    16a6:	05 00 3c    	bra       GT, 0x16b2 <.L34>

000016a8 <.L31>:
    16a8:	c0 13 80    	mov.w     0x278, w0
    16aa:	62 00 60    	and.w     w0, #0x2, w0
    16ac:	00 00 e0    	cp0.w     w0
    16ae:	f7 ff 32    	bra       Z, 0x169e <.L33>
    16b0:	01 00 37    	bra       0x16b4 <.L32>

000016b2 <.L34>:
    16b2:	00 00 00    	nop       

000016b4 <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    16b4:	80 13 80    	mov.w     0x270, w0
    16b6:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    16b8:	2e 40 90    	mov.b     [w14+2], w0
}
    16ba:	00 80 fa    	ulnk      
    16bc:	00 00 06    	return    

000016be <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    16be:	04 00 fa    	lnk       #0x4
   int i = 0;
    16c0:	00 00 eb    	clr.w     w0
    16c2:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    16c4:	00 40 eb    	clr.b     w0
    16c6:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    16c8:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    16ca:	05 00 37    	bra       0x16d6 <.L36>

000016cc <.L38>:
      i++;
    16cc:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    16ce:	00 7d 20    	mov.w     #0x7d0, w0
    16d0:	9e 00 78    	mov.w     [w14], w1
    16d2:	80 8f 50    	sub.w     w1, w0, [w15]
    16d4:	05 00 3c    	bra       GT, 0x16e0 <.L39>

000016d6 <.L36>:
    16d6:	c0 13 80    	mov.w     0x278, w0
    16d8:	62 00 60    	and.w     w0, #0x2, w0
    16da:	00 00 e0    	cp0.w     w0
    16dc:	f7 ff 32    	bra       Z, 0x16cc <.L38>
    16de:	01 00 37    	bra       0x16e2 <.L37>

000016e0 <.L39>:
    16e0:	00 00 00    	nop       

000016e2 <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    16e2:	80 13 80    	mov.w     0x270, w0
    16e4:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    16e6:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    16e8:	a0 00 20    	mov.w     #0xa, w0
    16ea:	01 00 20    	mov.w     #0x0, w1
    16ec:	32 ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
   return data;
    16ee:	2e 40 90    	mov.b     [w14+2], w0
}
    16f0:	00 80 fa    	ulnk      
    16f2:	00 00 06    	return    

000016f4 <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    16f4:	04 00 fa    	lnk       #0x4
   int i = 0;
    16f6:	00 00 eb    	clr.w     w0
    16f8:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    16fa:	00 40 eb    	clr.b     w0
    16fc:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    16fe:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    1700:	05 00 37    	bra       0x170c <.L41>

00001702 <.L43>:
      i++;
    1702:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1704:	00 7d 20    	mov.w     #0x7d0, w0
    1706:	9e 00 78    	mov.w     [w14], w1
    1708:	80 8f 50    	sub.w     w1, w0, [w15]
    170a:	05 00 3c    	bra       GT, 0x1716 <.L44>

0000170c <.L41>:
    170c:	c0 13 80    	mov.w     0x278, w0
    170e:	62 00 60    	and.w     w0, #0x2, w0
    1710:	00 00 e0    	cp0.w     w0
    1712:	f7 ff 32    	bra       Z, 0x1702 <.L43>
    1714:	01 00 37    	bra       0x1718 <.L42>

00001716 <.L44>:
    1716:	00 00 00    	nop       

00001718 <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    1718:	80 13 80    	mov.w     0x270, w0
    171a:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    171c:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    171e:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    1720:	a0 00 20    	mov.w     #0xa, w0
    1722:	01 00 20    	mov.w     #0x0, w1
    1724:	16 ff 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
   return data;
    1726:	2e 40 90    	mov.b     [w14+2], w0
}
    1728:	00 80 fa    	ulnk      
    172a:	00 00 06    	return    

0000172c <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    172c:	04 00 fa    	lnk       #0x4
    172e:	00 4f 78    	mov.b     w0, [w14]
    1730:	11 47 98    	mov.b     w1, [w14+1]
    1732:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    1734:	2e ff 07    	rcall     0x1592 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    1736:	1e 00 fb    	se        [w14], w0
    1738:	80 00 78    	mov.w     w0, w1
    173a:	e0 ff 2f    	mov.w     #0xfffe, w0
    173c:	00 80 60    	and.w     w1, w0, w0
    173e:	78 ff 07    	rcall     0x1630 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1740:	1e 40 90    	mov.b     [w14+1], w0
    1742:	00 00 fb    	se        w0, w0
    1744:	75 ff 07    	rcall     0x1630 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    1746:	2e 40 90    	mov.b     [w14+2], w0
    1748:	00 00 fb    	se        w0, w0
    174a:	72 ff 07    	rcall     0x1630 <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    174c:	56 ff 07    	rcall     0x15fa <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    174e:	00 80 fa    	ulnk      
    1750:	00 00 06    	return    

00001752 <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    1752:	04 00 fa    	lnk       #0x4
    1754:	20 47 98    	mov.b     w0, [w14+2]
    1756:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    1758:	1c ff 07    	rcall     0x1592 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    175a:	2e 40 90    	mov.b     [w14+2], w0
    175c:	00 00 fb    	se        w0, w0
    175e:	68 ff 07    	rcall     0x1630 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1760:	3e 40 90    	mov.b     [w14+3], w0
    1762:	00 00 fb    	se        w0, w0
    1764:	65 ff 07    	rcall     0x1630 <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    1766:	a0 00 20    	mov.w     #0xa, w0
    1768:	01 00 20    	mov.w     #0x0, w1
    176a:	f3 fe 07    	rcall     0x1552 <_delay_by_nop> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
   i2c_restart();
    176c:	2e ff 07    	rcall     0x15ca <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    176e:	2e 40 90    	mov.b     [w14+2], w0
    1770:	00 04 a0    	bset.b    w0, #0x0
    1772:	00 00 fb    	se        w0, w0
    1774:	5d ff 07    	rcall     0x1630 <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    1776:	8c ff 07    	rcall     0x1690 <_i2c_read> <.LFB6> <.LFE5>
    1778:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    177a:	3f ff 07    	rcall     0x15fa <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    177c:	1e 40 78    	mov.b     [w14], w0
}
    177e:	00 80 fa    	ulnk      
    1780:	00 00 06    	return    

00001782 <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is not there, 0 means it is there
unsigned char I2Cpoll(char addr){
    1782:	04 00 fa    	lnk       #0x4
    1784:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    1786:	00 40 eb    	clr.b     w0
    1788:	00 4f 78    	mov.b     w0, [w14]
   i2c_start();
    178a:	03 ff 07    	rcall     0x1592 <_i2c_start> <.LFB2> <.LFE1>
   temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    178c:	2e 40 90    	mov.b     [w14+2], w0
    178e:	00 00 fb    	se        w0, w0
    1790:	80 00 78    	mov.w     w0, w1
    1792:	e0 ff 2f    	mov.w     #0xfffe, w0
    1794:	00 80 60    	and.w     w1, w0, w0
    1796:	4c ff 07    	rcall     0x1630 <_send_i2c_byte> <.LFB5> <.LFE4>
    1798:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c_bus();
    179a:	2f ff 07    	rcall     0x15fa <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    179c:	1e 40 78    	mov.b     [w14], w0
}
    179e:	00 80 fa    	ulnk      
    17a0:	00 00 06    	return    

000017a2 <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    17a2:	08 00 fa    	lnk       #0x8
    17a4:	20 47 98    	mov.b     w0, [w14+2]
    17a6:	21 07 98    	mov.w     w1, [w14+4]
    17a8:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    17aa:	00 40 eb    	clr.b     w0
    17ac:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    17ae:	f1 fe 07    	rcall     0x1592 <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    17b0:	2e 40 90    	mov.b     [w14+2], w0
    17b2:	00 00 fb    	se        w0, w0
    17b4:	80 00 78    	mov.w     w0, w1
    17b6:	e0 ff 2f    	mov.w     #0xfffe, w0
    17b8:	00 80 60    	and.w     w1, w0, w0
    17ba:	3a ff 07    	rcall     0x1630 <_send_i2c_byte> <.LFB5> <.LFE4>
    17bc:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    17be:	00 40 eb    	clr.b     w0
    17c0:	10 47 98    	mov.b     w0, [w14+1]
    17c2:	0d 00 37    	bra       0x17de <.L49>

000017c4 <.L50>:
    err |= send_i2c_byte(dat[j]);
    17c4:	1e 40 90    	mov.b     [w14+1], w0
    17c6:	00 80 fb    	ze        w0, w0
    17c8:	ae 00 90    	mov.w     [w14+4], w1
    17ca:	00 80 40    	add.w     w1, w0, w0
    17cc:	10 40 78    	mov.b     [w0], w0
    17ce:	00 00 fb    	se        w0, w0
    17d0:	2f ff 07    	rcall     0x1630 <_send_i2c_byte> <.LFB5> <.LFE4>
    17d2:	9e 40 78    	mov.b     [w14], w1
    17d4:	01 40 70    	ior.b     w0, w1, w0
    17d6:	00 4f 78    	mov.b     w0, [w14]
    17d8:	1e 40 90    	mov.b     [w14+1], w0
    17da:	00 40 e8    	inc.b     w0, w0
    17dc:	10 47 98    	mov.b     w0, [w14+1]

000017de <.L49>:
    17de:	9e 40 90    	mov.b     [w14+1], w1
    17e0:	6e 40 90    	mov.b     [w14+6], w0
    17e2:	80 cf 50    	sub.b     w1, w0, [w15]
    17e4:	ef ff 39    	bra       NC, 0x17c4 <.L50>
  }
  reset_i2c_bus();
    17e6:	09 ff 07    	rcall     0x15fa <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    17e8:	1e 40 78    	mov.b     [w14], w0
}
    17ea:	00 80 fa    	ulnk      
    17ec:	00 00 06    	return    

000017ee <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    17ee:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    17f0:	00 10 20    	mov.w     #0x100, w0
    17f2:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    17f4:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    17f6:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    17f8:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    17fa:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    17fc:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    17fe:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    1800:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    1802:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    1804:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    1806:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    1808:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    180a:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    180c:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    180e:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    1810:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    1812:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    1814:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    1816:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    1818:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    181a:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    181c:	f0 03 20    	mov.w     #0x3f, w0
    181e:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    1820:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    1822:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    1824:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    1826:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    1828:	00 0e 20    	mov.w     #0xe0, w0
    182a:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    182c:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    182e:	00 c4 20    	mov.w     #0xc40, w0
    1830:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    1832:	50 00 20    	mov.w     #0x5, w0
    1834:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    1836:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    1838:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    183a:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    183c:	e8 02 a9    	bclr.b    0x2e8, #0x0
    183e:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    1840:	e8 22 a9    	bclr.b    0x2e8, #0x1
    1842:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    1844:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    1846:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    1848:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    184a:	00 80 fa    	ulnk      
    184c:	00 00 06    	return    

0000184e <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    184e:	02 00 fa    	lnk       #0x2
    1850:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    1852:	9e 00 78    	mov.w     [w14], w1
    1854:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    1856:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    1858:	00 00 00    	nop       

0000185a <.L3>:
    185a:	00 19 80    	mov.w     0x320, w0
    185c:	61 00 60    	and.w     w0, #0x1, w0
    185e:	00 00 e0    	cp0.w     w0
    1860:	fc ff 32    	bra       Z, 0x185a <.L3>
    return ADC1BUF0;
    1862:	00 18 80    	mov.w     0x300, w0
}
    1864:	00 80 fa    	ulnk      
    1866:	00 00 06    	return    
Disassembly of section .isr.text:

00001868 <__SI2C3Interrupt>:
    1868:	80 1f 78    	mov.w     w0, [w15++]
    186a:	32 00 f8    	push      0x32
    186c:	34 00 f8    	push      0x34
    186e:	10 00 20    	mov.w     #0x1, w0
    1870:	a0 01 88    	mov.w     w0, 0x34
    1872:	10 00 20    	mov.w     #0x1, w0
    1874:	90 01 88    	mov.w     w0, 0x32
    1876:	02 00 fa    	lnk       #0x2
    1878:	8e 80 a9    	bclr.b    0x8e, #0x4
    187a:	10 41 80    	mov.w     0x822, w0
    187c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    187e:	14 00 32    	bra       Z, 0x18a8 <.L7>
    1880:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1882:	03 00 39    	bra       NC, 0x188a <.L6>
    1884:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1886:	14 00 32    	bra       Z, 0x18b0 <.L8>
    1888:	15 00 37    	bra       0x18b4 <.L12>

0000188a <.L6>:
    188a:	80 13 80    	mov.w     0x270, w0
    188c:	00 4f 78    	mov.b     w0, [w14]
    188e:	c0 13 80    	mov.w     0x278, w0
    1890:	64 00 60    	and.w     w0, #0x4, w0
    1892:	00 00 e0    	cp0.w     w0
    1894:	06 00 32    	bra       Z, 0x18a2 <.L9>
    1896:	10 42 80    	mov.w     0x842, w0
    1898:	90 13 88    	mov.w     w0, 0x272
    189a:	77 82 a8    	bset.b    0x277, #0x4
    189c:	30 00 20    	mov.w     #0x3, w0
    189e:	10 41 88    	mov.w     w0, 0x822
    18a0:	0a 00 37    	bra       0x18b6 <.L4>

000018a2 <.L9>:
    18a2:	10 00 20    	mov.w     #0x1, w0
    18a4:	10 41 88    	mov.w     w0, 0x822
    18a6:	07 00 37    	bra       0x18b6 <.L4>

000018a8 <.L7>:
    18a8:	80 13 80    	mov.w     0x270, w0
    18aa:	f0 40 88    	mov.w     w0, 0x81e
    18ac:	22 28 ef    	clr.w     0x822
    18ae:	03 00 37    	bra       0x18b6 <.L4>

000018b0 <.L8>:
    18b0:	22 28 ef    	clr.w     0x822
    18b2:	01 00 37    	bra       0x18b6 <.L4>

000018b4 <.L12>:
    18b4:	22 28 ef    	clr.w     0x822

000018b6 <.L4>:
    18b6:	00 80 fa    	ulnk      
    18b8:	34 00 f9    	pop       0x34
    18ba:	32 00 f9    	pop       0x32
    18bc:	4f 00 78    	mov.w     [--w15], w0
    18be:	00 40 06    	retfie    
Disassembly of section .dinit:

000018c0 <.dinit>:
    18c0:	00 08 00    	nop       
    18c2:	24 00 00    	nop       
    18c4:	80 00 00    	nop       
    18c6:	24 08 00    	nop       
    18c8:	20 00 00    	nop       
    18ca:	82 00 00    	nop       
    18cc:	a9 00 dd    	.pword 0xdd00a9
    18ce:	00 13 01    	.pword 0x011300
    18d0:	47 01 7f    	mov.w     [--w7], w2
    18d2:	01 b2 01    	.pword 0x01b201
    18d4:	e8 01 1c    	subbr.w   w8, #0x8, w3
    18d6:	02 2b 02    	call      0x25e2b02 <__DefaultInterrupt+0x25e121e>
    18d8:	5e 02 91 
    18da:	02 f5 02    	call      0x322f502 <__DefaultInterrupt+0x322dc1e>
    18dc:	22 03 4d 
    18de:	03 73 03    	.pword 0x037303
    18e0:	05 00 00    	nop       
    18e2:	00 00 00    	nop       
Disassembly of section .isr:

000018e4 <__DefaultInterrupt>:
    18e4:	00 40 da    	break     
    18e6:	00 00 fe    	reset     
