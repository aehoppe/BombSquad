
follower_template.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	40 18 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	40 18 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	40 18 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	40 18 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	40 18 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	40 18 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	40 18 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	40 18 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	40 18 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	40 18 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	40 18 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	40 18 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	40 18 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	40 18 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	40 18 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	40 18 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	40 18 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	40 18 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	40 18 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	40 18 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	40 18 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	40 18 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	40 18 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	40 18 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	40 18 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	40 18 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	40 18 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	40 18 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	40 18 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	40 18 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	40 18 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	40 18 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	40 18 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	40 18 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	40 18 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	40 18 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	40 18 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	40 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	40 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	40 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	40 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	40 18 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	40 18 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	40 18 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	40 18 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	40 18 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	40 18 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	40 18 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	40 18 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	40 18 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	40 18 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	40 18 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	40 18 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	40 18 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	40 18 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	40 18 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	40 18 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	40 18 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	40 18 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	40 18 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	40 18 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	40 18 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	40 18 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	40 18 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	40 18 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	40 18 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	40 18 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	40 18 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	40 18 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	40 18 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	ef 80 20    	mov.w     #0x80e, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	77 00 07    	rcall     0x1214 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	20 83 21    	mov.w     #0x1832, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	d2 17 02    	call      0x17d2 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	20 00 20    	mov.w     #0x2, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	10 00 20    	mov.w     #0x1, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <__crt_start_mode>:
    1214:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	86 16 04    	goto      0x1686 <__SI2C2Interrupt>
    10b2:	00 00 00 
    10b4:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	40 18 04    	goto      0x1840 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001216 <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    1216:	08 00 fa    	lnk       #0x8
    1218:	20 07 98    	mov.w     w0, [w14+4]
    121a:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    121c:	60 00 b8    	mul.uu    w0, #0x0, w0
    121e:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    1220:	05 00 37    	bra       0x122c <.L2>

00001222 <.L3>:
        __asm__("nop");
    1222:	00 00 00    	nop       
        count +=1;
    1224:	12 00 20    	mov.w     #0x1, w2
    1226:	03 00 20    	mov.w     #0x0, w3
    1228:	1e 0f 41    	add.w     w2, [w14], [w14]
    122a:	5e 97 49    	addc.w    w3, [++w14], [w14--]

0000122c <.L2>:
    122c:	2e 00 90    	mov.w     [w14+4], w0
    122e:	be 00 90    	mov.w     [w14+6], w1
    1230:	1e 01 be    	mov.d     [w14], w2
    1232:	80 0f 51    	sub.w     w2, w0, [w15]
    1234:	81 8f 59    	subb.w    w3, w1, [w15]
    1236:	f5 ff 39    	bra       NC, 0x1222 <.L3>
    }
}
    1238:	00 80 fa    	ulnk      
    123a:	00 00 06    	return    

0000123c <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    123c:	04 00 fa    	lnk       #0x4
    123e:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    1240:	1e 00 90    	mov.w     [w14+2], w0
    1242:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    1244:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    1246:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    1248:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    124a:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    124c:	80 13 80    	mov.w     0x270, w0
    124e:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    1250:	36 00 07    	rcall     0x12be <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1252:	00 80 fa    	ulnk      
    1254:	00 00 06    	return    

00001256 <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    1256:	02 00 fa    	lnk       #0x2
   int x = 0;
    1258:	00 00 eb    	clr.w     w0
    125a:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    125c:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    125e:	a0 00 20    	mov.w     #0xa, w0
    1260:	01 00 20    	mov.w     #0x0, w1
    1262:	d9 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    1264:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    1266:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    1268:	07 00 37    	bra       0x1278 <.L6>

0000126a <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    126a:	10 00 20    	mov.w     #0x1, w0
    126c:	01 00 20    	mov.w     #0x0, w1
    126e:	d3 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
      x++;
    1270:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    1272:	1e 00 78    	mov.w     [w14], w0
    1274:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1276:	05 00 3c    	bra       GT, 0x1282 <.L9>

00001278 <.L6>:
    1278:	b0 13 80    	mov.w     0x276, w0
    127a:	61 00 60    	and.w     w0, #0x1, w0
    127c:	00 00 e0    	cp0.w     w0
    127e:	f5 ff 3a    	bra       NZ, 0x126a <.L8>
    1280:	01 00 37    	bra       0x1284 <.L7>

00001282 <.L9>:
      break;
    1282:	00 00 00    	nop       

00001284 <.L7>:
   }
   delay_by_nop(2);
    1284:	20 00 20    	mov.w     #0x2, w0
    1286:	01 00 20    	mov.w     #0x0, w1
    1288:	c6 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
}
    128a:	00 80 fa    	ulnk      
    128c:	00 00 06    	return    

0000128e <_i2c_restart>:

void i2c_restart(void){
    128e:	02 00 fa    	lnk       #0x2
   int x = 0;
    1290:	00 00 eb    	clr.w     w0
    1292:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    1294:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    1296:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    1298:	07 00 37    	bra       0x12a8 <.L11>

0000129a <.L13>:
      delay_by_nop(1);
    129a:	10 00 20    	mov.w     #0x1, w0
    129c:	01 00 20    	mov.w     #0x0, w1
    129e:	bb ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
      x++;
    12a0:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    12a2:	1e 00 78    	mov.w     [w14], w0
    12a4:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    12a6:	05 00 3c    	bra       GT, 0x12b2 <.L14>

000012a8 <.L11>:
    12a8:	b0 13 80    	mov.w     0x276, w0
    12aa:	62 00 60    	and.w     w0, #0x2, w0
    12ac:	00 00 e0    	cp0.w     w0
    12ae:	f5 ff 3a    	bra       NZ, 0x129a <.L13>
    12b0:	01 00 37    	bra       0x12b4 <.L12>

000012b2 <.L14>:
    12b2:	00 00 00    	nop       

000012b4 <.L12>:
   }
   delay_by_nop(2);
    12b4:	20 00 20    	mov.w     #0x2, w0
    12b6:	01 00 20    	mov.w     #0x0, w1
    12b8:	ae ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
}
    12ba:	00 80 fa    	ulnk      
    12bc:	00 00 06    	return    

000012be <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    12be:	02 00 fa    	lnk       #0x2
   int x = 0;
    12c0:	00 00 eb    	clr.w     w0
    12c2:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    12c4:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    12c6:	07 00 37    	bra       0x12d6 <.L16>

000012c8 <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    12c8:	10 00 20    	mov.w     #0x1, w0
    12ca:	01 00 20    	mov.w     #0x0, w1
    12cc:	a4 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
      x ++;
    12ce:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    12d0:	1e 00 78    	mov.w     [w14], w0
    12d2:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    12d4:	05 00 3c    	bra       GT, 0x12e0 <.L19>

000012d6 <.L16>:
    12d6:	b0 13 80    	mov.w     0x276, w0
    12d8:	64 00 60    	and.w     w0, #0x4, w0
    12da:	00 00 e0    	cp0.w     w0
    12dc:	f5 ff 3a    	bra       NZ, 0x12c8 <.L18>
    12de:	01 00 37    	bra       0x12e2 <.L17>

000012e0 <.L19>:
    12e0:	00 00 00    	nop       

000012e2 <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    12e2:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    12e4:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    12e6:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    12e8:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    12ea:	40 01 20    	mov.w     #0x14, w0
    12ec:	01 00 20    	mov.w     #0x0, w1
    12ee:	93 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
}
    12f0:	00 80 fa    	ulnk      
    12f2:	00 00 06    	return    

000012f4 <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    12f4:	04 00 fa    	lnk       #0x4
    12f6:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    12f8:	00 00 00    	nop       

000012fa <.L21>:
    12fa:	c0 13 80    	mov.w     0x278, w0
    12fc:	61 00 60    	and.w     w0, #0x1, w0
    12fe:	00 00 e0    	cp0.w     w0
    1300:	fc ff 3a    	bra       NZ, 0x12fa <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    1302:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    1304:	1e 00 90    	mov.w     [w14+2], w0
    1306:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    1308:	00 00 eb    	clr.w     w0
    130a:	00 0f 78    	mov.w     w0, [w14]
    130c:	09 00 37    	bra       0x1320 <.L22>

0000130e <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    130e:	c1 13 80    	mov.w     0x278, w1
    1310:	00 00 24    	mov.w     #0x4000, w0
    1312:	00 80 60    	and.w     w1, w0, w0
    1314:	00 00 e0    	cp0.w     w0
    1316:	09 00 32    	bra       Z, 0x132a <.L29>
      delay_by_nop(1); }
    1318:	10 00 20    	mov.w     #0x1, w0
    131a:	01 00 20    	mov.w     #0x0, w1
    131c:	7c ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
    131e:	1e 0f e8    	inc.w     [w14], [w14]

00001320 <.L22>:
    1320:	30 1f 20    	mov.w     #0x1f3, w0
    1322:	9e 00 78    	mov.w     [w14], w1
    1324:	80 8f 50    	sub.w     w1, w0, [w15]
    1326:	f3 ff 34    	bra       LE, 0x130e <.L25>
    1328:	01 00 37    	bra       0x132c <.L24>

0000132a <.L29>:
    132a:	00 00 00    	nop       

0000132c <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    132c:	40 1f 20    	mov.w     #0x1f4, w0
    132e:	9e 00 78    	mov.w     [w14], w1
    1330:	80 8f 50    	sub.w     w1, w0, [w15]
    1332:	02 00 3a    	bra       NZ, 0x1338 <.L26>
        return(1); }    // return 1 to indicate failure
    1334:	10 c0 b3    	mov.b     #0x1, w0
    1336:	0c 00 37    	bra       0x1350 <.L27>

00001338 <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    1338:	c1 13 80    	mov.w     0x278, w1
    133a:	00 00 28    	mov.w     #0x8000, w0
    133c:	00 80 60    	and.w     w1, w0, w0
    133e:	00 00 e0    	cp0.w     w0
    1340:	03 00 32    	bra       Z, 0x1348 <.L28>
      reset_i2c_bus();
    1342:	bd ff 07    	rcall     0x12be <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    1344:	10 c0 b3    	mov.b     #0x1, w0
    1346:	04 00 37    	bra       0x1350 <.L27>

00001348 <.L28>:

   delay_by_nop(2);
    1348:	20 00 20    	mov.w     #0x2, w0
    134a:	01 00 20    	mov.w     #0x0, w1
    134c:	64 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   return(0);
    134e:	00 40 eb    	clr.b     w0

00001350 <.L27>:
}
    1350:	00 80 fa    	ulnk      
    1352:	00 00 06    	return    

00001354 <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    1354:	04 00 fa    	lnk       #0x4
   int i = 0;
    1356:	00 00 eb    	clr.w     w0
    1358:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    135a:	00 40 eb    	clr.b     w0
    135c:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    135e:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    1360:	05 00 37    	bra       0x136c <.L31>

00001362 <.L33>:
      i ++;
    1362:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    1364:	00 7d 20    	mov.w     #0x7d0, w0
    1366:	9e 00 78    	mov.w     [w14], w1
    1368:	80 8f 50    	sub.w     w1, w0, [w15]
    136a:	05 00 3c    	bra       GT, 0x1376 <.L34>

0000136c <.L31>:
    136c:	c0 13 80    	mov.w     0x278, w0
    136e:	62 00 60    	and.w     w0, #0x2, w0
    1370:	00 00 e0    	cp0.w     w0
    1372:	f7 ff 32    	bra       Z, 0x1362 <.L33>
    1374:	01 00 37    	bra       0x1378 <.L32>

00001376 <.L34>:
    1376:	00 00 00    	nop       

00001378 <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    1378:	80 13 80    	mov.w     0x270, w0
    137a:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    137c:	2e 40 90    	mov.b     [w14+2], w0
}
    137e:	00 80 fa    	ulnk      
    1380:	00 00 06    	return    

00001382 <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    1382:	04 00 fa    	lnk       #0x4
   int i = 0;
    1384:	00 00 eb    	clr.w     w0
    1386:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1388:	00 40 eb    	clr.b     w0
    138a:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    138c:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    138e:	05 00 37    	bra       0x139a <.L36>

00001390 <.L38>:
      i++;
    1390:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1392:	00 7d 20    	mov.w     #0x7d0, w0
    1394:	9e 00 78    	mov.w     [w14], w1
    1396:	80 8f 50    	sub.w     w1, w0, [w15]
    1398:	05 00 3c    	bra       GT, 0x13a4 <.L39>

0000139a <.L36>:
    139a:	c0 13 80    	mov.w     0x278, w0
    139c:	62 00 60    	and.w     w0, #0x2, w0
    139e:	00 00 e0    	cp0.w     w0
    13a0:	f7 ff 32    	bra       Z, 0x1390 <.L38>
    13a2:	01 00 37    	bra       0x13a6 <.L37>

000013a4 <.L39>:
    13a4:	00 00 00    	nop       

000013a6 <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    13a6:	80 13 80    	mov.w     0x270, w0
    13a8:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    13aa:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    13ac:	a0 00 20    	mov.w     #0xa, w0
    13ae:	01 00 20    	mov.w     #0x0, w1
    13b0:	32 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   return data;
    13b2:	2e 40 90    	mov.b     [w14+2], w0
}
    13b4:	00 80 fa    	ulnk      
    13b6:	00 00 06    	return    

000013b8 <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    13b8:	04 00 fa    	lnk       #0x4
   int i = 0;
    13ba:	00 00 eb    	clr.w     w0
    13bc:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    13be:	00 40 eb    	clr.b     w0
    13c0:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    13c2:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    13c4:	05 00 37    	bra       0x13d0 <.L41>

000013c6 <.L43>:
      i++;
    13c6:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    13c8:	00 7d 20    	mov.w     #0x7d0, w0
    13ca:	9e 00 78    	mov.w     [w14], w1
    13cc:	80 8f 50    	sub.w     w1, w0, [w15]
    13ce:	05 00 3c    	bra       GT, 0x13da <.L44>

000013d0 <.L41>:
    13d0:	c0 13 80    	mov.w     0x278, w0
    13d2:	62 00 60    	and.w     w0, #0x2, w0
    13d4:	00 00 e0    	cp0.w     w0
    13d6:	f7 ff 32    	bra       Z, 0x13c6 <.L43>
    13d8:	01 00 37    	bra       0x13dc <.L42>

000013da <.L44>:
    13da:	00 00 00    	nop       

000013dc <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    13dc:	80 13 80    	mov.w     0x270, w0
    13de:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    13e0:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    13e2:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    13e4:	a0 00 20    	mov.w     #0xa, w0
    13e6:	01 00 20    	mov.w     #0x0, w1
    13e8:	16 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   return data;
    13ea:	2e 40 90    	mov.b     [w14+2], w0
}
    13ec:	00 80 fa    	ulnk      
    13ee:	00 00 06    	return    

000013f0 <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    13f0:	04 00 fa    	lnk       #0x4
    13f2:	00 4f 78    	mov.b     w0, [w14]
    13f4:	11 47 98    	mov.b     w1, [w14+1]
    13f6:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    13f8:	2e ff 07    	rcall     0x1256 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    13fa:	1e 00 fb    	se        [w14], w0
    13fc:	80 00 78    	mov.w     w0, w1
    13fe:	e0 ff 2f    	mov.w     #0xfffe, w0
    1400:	00 80 60    	and.w     w1, w0, w0
    1402:	78 ff 07    	rcall     0x12f4 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1404:	1e 40 90    	mov.b     [w14+1], w0
    1406:	00 00 fb    	se        w0, w0
    1408:	75 ff 07    	rcall     0x12f4 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    140a:	2e 40 90    	mov.b     [w14+2], w0
    140c:	00 00 fb    	se        w0, w0
    140e:	72 ff 07    	rcall     0x12f4 <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    1410:	56 ff 07    	rcall     0x12be <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1412:	00 80 fa    	ulnk      
    1414:	00 00 06    	return    

00001416 <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    1416:	04 00 fa    	lnk       #0x4
    1418:	20 47 98    	mov.b     w0, [w14+2]
    141a:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    141c:	1c ff 07    	rcall     0x1256 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    141e:	2e 40 90    	mov.b     [w14+2], w0
    1420:	00 00 fb    	se        w0, w0
    1422:	68 ff 07    	rcall     0x12f4 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1424:	3e 40 90    	mov.b     [w14+3], w0
    1426:	00 00 fb    	se        w0, w0
    1428:	65 ff 07    	rcall     0x12f4 <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    142a:	a0 00 20    	mov.w     #0xa, w0
    142c:	01 00 20    	mov.w     #0x0, w1
    142e:	f3 fe 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   i2c_restart();
    1430:	2e ff 07    	rcall     0x128e <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    1432:	2e 40 90    	mov.b     [w14+2], w0
    1434:	00 04 a0    	bset.b    w0, #0x0
    1436:	00 00 fb    	se        w0, w0
    1438:	5d ff 07    	rcall     0x12f4 <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    143a:	8c ff 07    	rcall     0x1354 <_i2c_read> <.LFB6> <.LFE5>
    143c:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    143e:	3f ff 07    	rcall     0x12be <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    1440:	1e 40 78    	mov.b     [w14], w0
}
    1442:	00 80 fa    	ulnk      
    1444:	00 00 06    	return    

00001446 <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is not there, 0 means it is there
unsigned char I2Cpoll(char addr){
    1446:	04 00 fa    	lnk       #0x4
    1448:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    144a:	00 40 eb    	clr.b     w0
    144c:	00 4f 78    	mov.b     w0, [w14]
   i2c_start();
    144e:	03 ff 07    	rcall     0x1256 <_i2c_start> <.LFB2> <.LFE1>
   temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    1450:	2e 40 90    	mov.b     [w14+2], w0
    1452:	00 00 fb    	se        w0, w0
    1454:	80 00 78    	mov.w     w0, w1
    1456:	e0 ff 2f    	mov.w     #0xfffe, w0
    1458:	00 80 60    	and.w     w1, w0, w0
    145a:	4c ff 07    	rcall     0x12f4 <_send_i2c_byte> <.LFB5> <.LFE4>
    145c:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c_bus();
    145e:	2f ff 07    	rcall     0x12be <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    1460:	1e 40 78    	mov.b     [w14], w0
}
    1462:	00 80 fa    	ulnk      
    1464:	00 00 06    	return    

00001466 <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    1466:	08 00 fa    	lnk       #0x8
    1468:	20 47 98    	mov.b     w0, [w14+2]
    146a:	21 07 98    	mov.w     w1, [w14+4]
    146c:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    146e:	00 40 eb    	clr.b     w0
    1470:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    1472:	f1 fe 07    	rcall     0x1256 <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    1474:	2e 40 90    	mov.b     [w14+2], w0
    1476:	00 00 fb    	se        w0, w0
    1478:	80 00 78    	mov.w     w0, w1
    147a:	e0 ff 2f    	mov.w     #0xfffe, w0
    147c:	00 80 60    	and.w     w1, w0, w0
    147e:	3a ff 07    	rcall     0x12f4 <_send_i2c_byte> <.LFB5> <.LFE4>
    1480:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    1482:	00 40 eb    	clr.b     w0
    1484:	10 47 98    	mov.b     w0, [w14+1]
    1486:	0d 00 37    	bra       0x14a2 <.L49>

00001488 <.L50>:
    err |= send_i2c_byte(dat[j]);
    1488:	1e 40 90    	mov.b     [w14+1], w0
    148a:	00 80 fb    	ze        w0, w0
    148c:	ae 00 90    	mov.w     [w14+4], w1
    148e:	00 80 40    	add.w     w1, w0, w0
    1490:	10 40 78    	mov.b     [w0], w0
    1492:	00 00 fb    	se        w0, w0
    1494:	2f ff 07    	rcall     0x12f4 <_send_i2c_byte> <.LFB5> <.LFE4>
    1496:	9e 40 78    	mov.b     [w14], w1
    1498:	01 40 70    	ior.b     w0, w1, w0
    149a:	00 4f 78    	mov.b     w0, [w14]
    149c:	1e 40 90    	mov.b     [w14+1], w0
    149e:	00 40 e8    	inc.b     w0, w0
    14a0:	10 47 98    	mov.b     w0, [w14+1]

000014a2 <.L49>:
    14a2:	9e 40 90    	mov.b     [w14+1], w1
    14a4:	6e 40 90    	mov.b     [w14+6], w0
    14a6:	80 cf 50    	sub.b     w1, w0, [w15]
    14a8:	ef ff 39    	bra       NC, 0x1488 <.L50>
  }
  reset_i2c_bus();
    14aa:	09 ff 07    	rcall     0x12be <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    14ac:	1e 40 78    	mov.b     [w14], w0
}
    14ae:	00 80 fa    	ulnk      
    14b0:	00 00 06    	return    

000014b2 <_i2c2_init>:

////////////////////////////////////////////////////////////////////////////////
// I2C2 ////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// initiates I2C3 module to baud rate BRG
void i2c2_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    14b2:	04 00 fa    	lnk       #0x4
    14b4:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C2BRG = BRG;           // Sets freq to 100kHz
    14b6:	1e 00 90    	mov.w     [w14+2], w0
    14b8:	a0 10 88    	mov.w     w0, 0x214
   I2C2CONbits.I2CEN = 0;	// Disable I2C Mode
    14ba:	17 e2 a9    	bclr.b    0x217, #0x7
   I2C2CONbits.DISSLW = 1;	// Disable slew rate control
    14bc:	17 22 a8    	bset.b    0x217, #0x1
   IFS3bits.MI2C2IF = 0;	 // Clear Interrupt
    14be:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2CONbits.I2CEN = 1;	// Enable I2C Mode
    14c0:	17 e2 a8    	bset.b    0x217, #0x7
   temp = I2C2RCV;	 // read buffer to clear buffer full
    14c2:	80 10 80    	mov.w     0x210, w0
    14c4:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    14c6:	fb fe 07    	rcall     0x12be <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    14c8:	00 80 fa    	ulnk      
    14ca:	00 00 06    	return    

000014cc <_i2c2_start>:

//function iniates a start condition on bus
void i2c2_start(void){
    14cc:	02 00 fa    	lnk       #0x2
   int x = 0;
    14ce:	00 00 eb    	clr.w     w0
    14d0:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.ACKDT = 0;	//Reset any previous Ack
    14d2:	16 a2 a9    	bclr.b    0x216, #0x5
   delay_by_nop(10);
    14d4:	a0 00 20    	mov.w     #0xa, w0
    14d6:	01 00 20    	mov.w     #0x0, w1
    14d8:	9e fe 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   I2C2CONbits.SEN = 1;	//Initiate Start condition
    14da:	16 02 a8    	bset.b    0x216, #0x0
   __asm__("nop");
    14dc:	00 00 00    	nop       

   while (I2C2CONbits.SEN){    //the hardware will automatically clear Start Bit
    14de:	07 00 37    	bra       0x14ee <.L53>

000014e0 <.L55>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    14e0:	10 00 20    	mov.w     #0x1, w0
    14e2:	01 00 20    	mov.w     #0x0, w1
    14e4:	98 fe 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
      x++;
    14e6:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    14e8:	1e 00 78    	mov.w     [w14], w0
    14ea:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    14ec:	05 00 3c    	bra       GT, 0x14f8 <.L56>

000014ee <.L53>:
    14ee:	b0 10 80    	mov.w     0x216, w0
    14f0:	61 00 60    	and.w     w0, #0x1, w0
    14f2:	00 00 e0    	cp0.w     w0
    14f4:	f5 ff 3a    	bra       NZ, 0x14e0 <.L55>
    14f6:	01 00 37    	bra       0x14fa <.L54>

000014f8 <.L56>:
      break;
    14f8:	00 00 00    	nop       

000014fa <.L54>:
   }
   delay_by_nop(2);
    14fa:	20 00 20    	mov.w     #0x2, w0
    14fc:	01 00 20    	mov.w     #0x0, w1
    14fe:	8b fe 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
}
    1500:	00 80 fa    	ulnk      
    1502:	00 00 06    	return    

00001504 <_i2c2_restart>:

void i2c2_restart(void){
    1504:	02 00 fa    	lnk       #0x2
   int x = 0;
    1506:	00 00 eb    	clr.w     w0
    1508:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.RSEN = 1;	//Initiate restart condition
    150a:	16 22 a8    	bset.b    0x216, #0x1
   __asm__("nop");
    150c:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C2CONbits.RSEN){
    150e:	07 00 37    	bra       0x151e <.L58>

00001510 <.L60>:
      delay_by_nop(1);
    1510:	10 00 20    	mov.w     #0x1, w0
    1512:	01 00 20    	mov.w     #0x0, w1
    1514:	80 fe 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
      x++;
    1516:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    1518:	1e 00 78    	mov.w     [w14], w0
    151a:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    151c:	05 00 3c    	bra       GT, 0x1528 <.L61>

0000151e <.L58>:
    151e:	b0 10 80    	mov.w     0x216, w0
    1520:	62 00 60    	and.w     w0, #0x2, w0
    1522:	00 00 e0    	cp0.w     w0
    1524:	f5 ff 3a    	bra       NZ, 0x1510 <.L60>
    1526:	01 00 37    	bra       0x152a <.L59>

00001528 <.L61>:
    1528:	00 00 00    	nop       

0000152a <.L59>:
   }
   delay_by_nop(2);
    152a:	20 00 20    	mov.w     #0x2, w0
    152c:	01 00 20    	mov.w     #0x0, w1
    152e:	73 fe 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
}
    1530:	00 80 fa    	ulnk      
    1532:	00 00 06    	return    

00001534 <_reset_i2c2_bus>:


//Resets the I2C bus to Idle
void reset_i2c2_bus(void){
    1534:	02 00 fa    	lnk       #0x2
   int x = 0;
    1536:	00 00 eb    	clr.w     w0
    1538:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.PEN = 1;     //initiate stop bit
    153a:	16 42 a8    	bset.b    0x216, #0x2
   while (I2C2CONbits.PEN) {     //wait for hardware clear of stop bit
    153c:	07 00 37    	bra       0x154c <.L63>

0000153e <.L65>:
      // delay_by_nop(1);
      delay_by_nop(1);
    153e:	10 00 20    	mov.w     #0x1, w0
    1540:	01 00 20    	mov.w     #0x0, w1
    1542:	69 fe 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
      x ++;
    1544:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    1546:	1e 00 78    	mov.w     [w14], w0
    1548:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    154a:	05 00 3c    	bra       GT, 0x1556 <.L66>

0000154c <.L63>:
    154c:	b0 10 80    	mov.w     0x216, w0
    154e:	64 00 60    	and.w     w0, #0x4, w0
    1550:	00 00 e0    	cp0.w     w0
    1552:	f5 ff 3a    	bra       NZ, 0x153e <.L65>
    1554:	01 00 37    	bra       0x1558 <.L64>

00001556 <.L66>:
    1556:	00 00 00    	nop       

00001558 <.L64>:
   }

   I2C2CONbits.RCEN = 0;
    1558:	16 62 a9    	bclr.b    0x216, #0x3
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    155a:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2STATbits.IWCOL = 0;
    155c:	18 e2 a9    	bclr.b    0x218, #0x7
   I2C2STATbits.BCL = 0;
    155e:	19 42 a9    	bclr.b    0x219, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    1560:	40 01 20    	mov.w     #0x14, w0
    1562:	01 00 20    	mov.w     #0x0, w1
    1564:	58 fe 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
}
    1566:	00 80 fa    	ulnk      
    1568:	00 00 06    	return    

0000156a <_send_i2c2_byte>:


//basic I2C byte send
char send_i2c2_byte(int data){
    156a:	04 00 fa    	lnk       #0x4
    156c:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C2STATbits.TBF) { }
    156e:	00 00 00    	nop       

00001570 <.L68>:
    1570:	c0 10 80    	mov.w     0x218, w0
    1572:	61 00 60    	and.w     w0, #0x1, w0
    1574:	00 00 e0    	cp0.w     w0
    1576:	fc ff 3a    	bra       NZ, 0x1570 <.L68>
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    1578:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2TRN = data; // load the outgoing data byte
    157a:	1e 00 90    	mov.w     [w14+2], w0
    157c:	90 10 88    	mov.w     w0, 0x212

   for (i=0; i<500; i++){           // wait for transmission
    157e:	00 00 eb    	clr.w     w0
    1580:	00 0f 78    	mov.w     w0, [w14]
    1582:	09 00 37    	bra       0x1596 <.L69>

00001584 <.L72>:
      if (!I2C2STATbits.TRSTAT) break; // if master transmit not in progress break
    1584:	c1 10 80    	mov.w     0x218, w1
    1586:	00 00 24    	mov.w     #0x4000, w0
    1588:	00 80 60    	and.w     w1, w0, w0
    158a:	00 00 e0    	cp0.w     w0
    158c:	09 00 32    	bra       Z, 0x15a0 <.L76>
      delay_by_nop(1); }
    158e:	10 00 20    	mov.w     #0x1, w0
    1590:	01 00 20    	mov.w     #0x0, w1
    1592:	41 fe 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
    1594:	1e 0f e8    	inc.w     [w14], [w14]

00001596 <.L69>:
    1596:	30 1f 20    	mov.w     #0x1f3, w0
    1598:	9e 00 78    	mov.w     [w14], w1
    159a:	80 8f 50    	sub.w     w1, w0, [w15]
    159c:	f3 ff 34    	bra       LE, 0x1584 <.L72>
    159e:	01 00 37    	bra       0x15a2 <.L71>

000015a0 <.L76>:
    15a0:	00 00 00    	nop       

000015a2 <.L71>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    15a2:	40 1f 20    	mov.w     #0x1f4, w0
    15a4:	9e 00 78    	mov.w     [w14], w1
    15a6:	80 8f 50    	sub.w     w1, w0, [w15]
    15a8:	02 00 3a    	bra       NZ, 0x15ae <.L73>
        return(1); }    // return 1 to indicate failure
    15aa:	10 c0 b3    	mov.b     #0x1, w0
    15ac:	0c 00 37    	bra       0x15c6 <.L74>

000015ae <.L73>:

   if (I2C2STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    15ae:	c1 10 80    	mov.w     0x218, w1
    15b0:	00 00 28    	mov.w     #0x8000, w0
    15b2:	00 80 60    	and.w     w1, w0, w0
    15b4:	00 00 e0    	cp0.w     w0
    15b6:	03 00 32    	bra       Z, 0x15be <.L75>
      reset_i2c2_bus();
    15b8:	bd ff 07    	rcall     0x1534 <_reset_i2c2_bus> <.LFB16> <.LFE15>
      return(1); }            // abort if not found
    15ba:	10 c0 b3    	mov.b     #0x1, w0
    15bc:	04 00 37    	bra       0x15c6 <.L74>

000015be <.L75>:

   delay_by_nop(2);
    15be:	20 00 20    	mov.w     #0x2, w0
    15c0:	01 00 20    	mov.w     #0x0, w1
    15c2:	29 fe 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   return(0);
    15c4:	00 40 eb    	clr.b     w0

000015c6 <.L74>:
}
    15c6:	00 80 fa    	ulnk      
    15c8:	00 00 06    	return    

000015ca <_i2c2_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c2_read(void){
    15ca:	04 00 fa    	lnk       #0x4
   int i = 0;
    15cc:	00 00 eb    	clr.w     w0
    15ce:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    15d0:	00 40 eb    	clr.b     w0
    15d2:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    15d4:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {           //if no response, break
    15d6:	05 00 37    	bra       0x15e2 <.L78>

000015d8 <.L80>:
      i ++;
    15d8:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    15da:	00 7d 20    	mov.w     #0x7d0, w0
    15dc:	9e 00 78    	mov.w     [w14], w1
    15de:	80 8f 50    	sub.w     w1, w0, [w15]
    15e0:	05 00 3c    	bra       GT, 0x15ec <.L81>

000015e2 <.L78>:
    15e2:	c0 10 80    	mov.w     0x218, w0
    15e4:	62 00 60    	and.w     w0, #0x2, w0
    15e6:	00 00 e0    	cp0.w     w0
    15e8:	f7 ff 32    	bra       Z, 0x15d8 <.L80>
    15ea:	01 00 37    	bra       0x15ee <.L79>

000015ec <.L81>:
    15ec:	00 00 00    	nop       

000015ee <.L79>:

   data = I2C2RCV;       //get data from I2C2RCV register
    15ee:	80 10 80    	mov.w     0x210, w0
    15f0:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    15f2:	2e 40 90    	mov.b     [w14+2], w0
}
    15f4:	00 80 fa    	ulnk      
    15f6:	00 00 06    	return    

000015f8 <_i2c2_read_ack>:


//function reads data, returns the read data, with ack
char i2c2_read_ack(void){	//does not reset bus!!!
    15f8:	04 00 fa    	lnk       #0x4
   int i = 0;
    15fa:	00 00 eb    	clr.w     w0
    15fc:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    15fe:	00 40 eb    	clr.b     w0
    1600:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    1602:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    1604:	05 00 37    	bra       0x1610 <.L83>

00001606 <.L85>:
      i++;
    1606:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1608:	00 7d 20    	mov.w     #0x7d0, w0
    160a:	9e 00 78    	mov.w     [w14], w1
    160c:	80 8f 50    	sub.w     w1, w0, [w15]
    160e:	05 00 3c    	bra       GT, 0x161a <.L86>

00001610 <.L83>:
    1610:	c0 10 80    	mov.w     0x218, w0
    1612:	62 00 60    	and.w     w0, #0x2, w0
    1614:	00 00 e0    	cp0.w     w0
    1616:	f7 ff 32    	bra       Z, 0x1606 <.L85>
    1618:	01 00 37    	bra       0x161c <.L84>

0000161a <.L86>:
    161a:	00 00 00    	nop       

0000161c <.L84>:

   data = I2C2RCV;               //get data from I2C2RCV register
    161c:	80 10 80    	mov.w     0x210, w0
    161e:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKEN = 1;        //start ACK generation
    1620:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    1622:	a0 00 20    	mov.w     #0xa, w0
    1624:	01 00 20    	mov.w     #0x0, w1
    1626:	f7 fd 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   return data;
    1628:	2e 40 90    	mov.b     [w14+2], w0
}
    162a:	00 80 fa    	ulnk      
    162c:	00 00 06    	return    

0000162e <_i2c2_read_nack>:

char i2c2_read_nack(void){	//does not reset bus!!!
    162e:	04 00 fa    	lnk       #0x4
   int i = 0;
    1630:	00 00 eb    	clr.w     w0
    1632:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1634:	00 40 eb    	clr.b     w0
    1636:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    1638:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    163a:	05 00 37    	bra       0x1646 <.L88>

0000163c <.L90>:
      i++;
    163c:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    163e:	00 7d 20    	mov.w     #0x7d0, w0
    1640:	9e 00 78    	mov.w     [w14], w1
    1642:	80 8f 50    	sub.w     w1, w0, [w15]
    1644:	05 00 3c    	bra       GT, 0x1650 <.L91>

00001646 <.L88>:
    1646:	c0 10 80    	mov.w     0x218, w0
    1648:	62 00 60    	and.w     w0, #0x2, w0
    164a:	00 00 e0    	cp0.w     w0
    164c:	f7 ff 32    	bra       Z, 0x163c <.L90>
    164e:	01 00 37    	bra       0x1652 <.L89>

00001650 <.L91>:
    1650:	00 00 00    	nop       

00001652 <.L89>:

   data = I2C2RCV;               //get data from I2C2RCV register
    1652:	80 10 80    	mov.w     0x210, w0
    1654:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    1656:	16 a2 a8    	bset.b    0x216, #0x5
   I2C2CONbits.ACKEN = 1;        //start ack generation
    1658:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    165a:	a0 00 20    	mov.w     #0xa, w0
    165c:	01 00 20    	mov.w     #0x0, w1
    165e:	db fd 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   return data;
    1660:	2e 40 90    	mov.b     [w14+2], w0
}
    1662:	00 80 fa    	ulnk      
    1664:	00 00 06    	return    

00001666 <_I2C2poll>:

// function checks if device at addr is on bus
// 1 means it is not there, 0 means it is there
unsigned char I2C2poll(char addr){
    1666:	04 00 fa    	lnk       #0x4
    1668:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    166a:	00 40 eb    	clr.b     w0
    166c:	00 4f 78    	mov.b     w0, [w14]
   i2c2_start();
    166e:	2e ff 07    	rcall     0x14cc <_i2c2_start> <.LFB14> <.LFE13>
   temp = send_i2c2_byte((addr) & (0xfffe)); // set /W bit
    1670:	2e 40 90    	mov.b     [w14+2], w0
    1672:	00 00 fb    	se        w0, w0
    1674:	80 00 78    	mov.w     w0, w1
    1676:	e0 ff 2f    	mov.w     #0xfffe, w0
    1678:	00 80 60    	and.w     w1, w0, w0
    167a:	77 ff 07    	rcall     0x156a <_send_i2c2_byte> <.LFB17> <.LFE16>
    167c:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c2_bus();
    167e:	5a ff 07    	rcall     0x1534 <_reset_i2c2_bus> <.LFB16> <.LFE15>
   return temp;
    1680:	1e 40 78    	mov.b     [w14], w0
}
    1682:	00 80 fa    	ulnk      
    1684:	00 00 06    	return    
Disassembly of section .isr.text:

00001686 <__SI2C2Interrupt>:
uint8_t lose_flag = 0;

volatile I2CSTATE i2c2_state = STATE_WAIT_FOR_ADDR;

void __attribute__((interrupt, auto_psv)) _SI2C2Interrupt(void) {
    1686:	80 9f be    	mov.d     w0, [w15++]
    1688:	32 00 f8    	push      0x32
    168a:	34 00 f8    	push      0x34
    168c:	10 00 20    	mov.w     #0x1, w0
    168e:	a0 01 88    	mov.w     w0, 0x34
    1690:	10 00 20    	mov.w     #0x1, w0
    1692:	90 01 88    	mov.w     w0, 0x32
    1694:	02 00 fa    	lnk       #0x2
    uint8_t u8_c;
    _SI2C2IF = 0;
    1696:	8a 20 a9    	bclr.b    0x8a, #0x1

    switch (i2c2_state) {
    1698:	50 40 80    	mov.w     0x80a, w0
    169a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    169c:	23 00 32    	bra       Z, 0x16e4 <.L4>
    169e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    16a0:	03 00 39    	bra       NC, 0x16a8 <.L3>
    16a2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    16a4:	4b 00 32    	bra       Z, 0x173c <.L5>
    16a6:	4c 00 37    	bra       0x1740 <.L17>

000016a8 <.L3>:

    case STATE_WAIT_FOR_ADDR:
        u8_c = I2C2RCV;     //clear RBF bit for address
    16a8:	80 10 80    	mov.w     0x210, w0
    16aa:	00 4f 78    	mov.b     w0, [w14]
        if (I2C2STATbits.R_W) {   // if data transfer is out from slave // check R/W bit of address byte
    16ac:	c0 10 80    	mov.w     0x218, w0
    16ae:	64 00 60    	and.w     w0, #0x4, w0
    16b0:	00 00 e0    	cp0.w     w0
    16b2:	15 00 32    	bra       Z, 0x16de <.L6>
            _byte_to_master = (complete_flag << 7) | ((num_strikes & 0b111) << 4) | (error_code & 0b1111) ; // assemble
    16b4:	03 c8 bf    	mov.b     0x803, WREG
    16b6:	00 80 fb    	ze        w0, w0
    16b8:	47 00 dd    	sl.w      w0, #0x7, w0
    16ba:	80 40 78    	mov.b     w0, w1
    16bc:	04 c8 bf    	mov.b     0x804, WREG
    16be:	00 80 fb    	ze        w0, w0
    16c0:	67 00 60    	and.w     w0, #0x7, w0
    16c2:	44 00 dd    	sl.w      w0, #0x4, w0
    16c4:	00 40 78    	mov.b     w0, w0
    16c6:	80 c0 70    	ior.b     w1, w0, w1
    16c8:	05 c8 bf    	mov.b     0x805, WREG
    16ca:	6f 40 60    	and.b     w0, #0xf, w0
    16cc:	00 c0 70    	ior.b     w1, w0, w0
    16ce:	00 e8 b7    	mov.b     WREG, 0x800
            I2C2TRN = _byte_to_master;   //Set transmit register to first data byte to send back to master
    16d0:	00 c8 bf    	mov.b     0x800, WREG
    16d2:	00 80 fb    	ze        w0, w0
    16d4:	90 10 88    	mov.w     w0, 0x212
            I2C2CONbits.SCLREL = 1;    //  SCL released during slave read so master can drive it
    16d6:	17 82 a8    	bset.b    0x217, #0x4
            i2c2_state = STATE_END_TRANSACTION; //goes to read transaction
    16d8:	20 00 20    	mov.w     #0x2, w0
    16da:	50 40 88    	mov.w     w0, 0x80a
        }
        else i2c2_state = STATE_RECEIVE_FROM_MASTER;     // goes to write transaction
        break;
    16dc:	32 00 37    	bra       0x1742 <.L1>

000016de <.L6>:
    16de:	10 00 20    	mov.w     #0x1, w0
    16e0:	50 40 88    	mov.w     w0, 0x80a
    16e2:	2f 00 37    	bra       0x1742 <.L1>

000016e4 <.L4>:

    case STATE_RECEIVE_FROM_MASTER:     // write transaction state, character arrived, place in buffer
        _data_from_master = I2C2RCV;        //read the byte
    16e4:	80 10 80    	mov.w     0x210, w0
    16e6:	00 40 78    	mov.b     w0, w0
    16e8:	01 e8 b7    	mov.b     WREG, 0x801
        switch (_data_from_master >> 5){
    16ea:	01 c8 bf    	mov.b     0x801, WREG
    16ec:	00 80 fb    	ze        w0, w0
    16ee:	45 00 de    	lsr.w     w0, #0x5, w0
    16f0:	00 40 78    	mov.b     w0, w0
    16f2:	00 80 fb    	ze        w0, w0
    16f4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    16f6:	1a 00 32    	bra       Z, 0x172c <.L12>
    16f8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    16fa:	05 00 3c    	bra       GT, 0x1706 <.L15>
    16fc:	00 00 e0    	cp0.w     w0
    16fe:	10 00 32    	bra       Z, 0x1720 <.L10>
    1700:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1702:	11 00 32    	bra       Z, 0x1726 <.L11>
    1704:	16 00 37    	bra       0x1732 <.L9>

00001706 <.L15>:
    1706:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    1708:	03 00 32    	bra       Z, 0x1710 <.L13>
    170a:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    170c:	05 00 32    	bra       Z, 0x1718 <.L14>
    170e:	11 00 37    	bra       0x1732 <.L9>

00001710 <.L13>:
            case HEADER_SERIAL_NUMBER: // 100
                serial_number = _data_from_master & 0b00011111 ;
    1710:	01 c8 bf    	mov.b     0x801, WREG
    1712:	7f 40 60    	and.b     w0, #0x1f, w0
    1714:	02 e8 b7    	mov.b     WREG, 0x802
            break;
    1716:	10 00 37    	bra       0x1738 <.L16>

00001718 <.L14>:
            case HEADER_NUM_STRIKES:    // 111
                num_strikes = _data_from_master & 0b00011111 ;
    1718:	01 c8 bf    	mov.b     0x801, WREG
    171a:	7f 40 60    	and.b     w0, #0x1f, w0
    171c:	04 e8 b7    	mov.b     WREG, 0x804
            break;
    171e:	0c 00 37    	bra       0x1738 <.L16>

00001720 <.L10>:
            case HEADER_START_GAME:    // 000
                start_flag = 1 ;
    1720:	10 c0 b3    	mov.b     #0x1, w0
    1722:	06 e8 b7    	mov.b     WREG, 0x806
            break;
    1724:	09 00 37    	bra       0x1738 <.L16>

00001726 <.L11>:
            case HEADER_END_WIN:    // 001
                win_flag = 1 ;
    1726:	10 c0 b3    	mov.b     #0x1, w0
    1728:	07 e8 b7    	mov.b     WREG, 0x807
            break;
    172a:	06 00 37    	bra       0x1738 <.L16>

0000172c <.L12>:
            case HEADER_END_LOSE:    // 010
                lose_flag = 1 ;
    172c:	10 c0 b3    	mov.b     #0x1, w0
    172e:	08 e8 b7    	mov.b     WREG, 0x808
            break;
    1730:	03 00 37    	bra       0x1738 <.L16>

00001732 <.L9>:

            default: error_code ++ ;
    1732:	05 c8 bf    	mov.b     0x805, WREG
    1734:	00 40 e8    	inc.b     w0, w0
    1736:	05 e8 b7    	mov.b     WREG, 0x805

00001738 <.L16>:

        }
        i2c2_state = STATE_WAIT_FOR_ADDR;    // go to wait for next transaction
    1738:	0a 28 ef    	clr.w     0x80a
        break;
    173a:	03 00 37    	bra       0x1742 <.L1>

0000173c <.L5>:

    case STATE_END_TRANSACTION:  //interrupt for last character finished shifting out to master
        i2c2_state = STATE_WAIT_FOR_ADDR;
    173c:	0a 28 ef    	clr.w     0x80a
        break;
    173e:	01 00 37    	bra       0x1742 <.L1>

00001740 <.L17>:

    default:
        i2c2_state = STATE_WAIT_FOR_ADDR;
    1740:	0a 28 ef    	clr.w     0x80a

00001742 <.L1>:

    } // end of switch statements
}   // end of ISR
    1742:	00 80 fa    	ulnk      
    1744:	34 00 f9    	pop       0x34
    1746:	32 00 f9    	pop       0x32
    1748:	4f 00 be    	mov.d     [--w15], w0
    174a:	00 40 06    	retfie    
Disassembly of section .text:

0000174c <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    174c:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    174e:	00 10 20    	mov.w     #0x100, w0
    1750:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    1752:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    1754:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    1756:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    1758:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    175a:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    175c:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    175e:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    1760:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    1762:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    1764:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    1766:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    1768:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    176a:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    176c:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    176e:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    1770:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    1772:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    1774:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    1776:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    1778:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    177a:	f0 03 20    	mov.w     #0x3f, w0
    177c:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    177e:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    1780:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    1782:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    1784:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    1786:	00 0e 20    	mov.w     #0xe0, w0
    1788:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    178a:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    178c:	00 c4 20    	mov.w     #0xc40, w0
    178e:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    1790:	50 00 20    	mov.w     #0x5, w0
    1792:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    1794:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    1796:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    1798:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    179a:	e8 02 a9    	bclr.b    0x2e8, #0x0
    179c:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    179e:	e8 22 a9    	bclr.b    0x2e8, #0x1
    17a0:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    17a2:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    17a4:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    17a6:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    17a8:	00 80 fa    	ulnk      
    17aa:	00 00 06    	return    

000017ac <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    17ac:	02 00 fa    	lnk       #0x2
    17ae:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    17b0:	9e 00 78    	mov.w     [w14], w1
    17b2:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    17b4:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    17b6:	00 00 00    	nop       

000017b8 <.L3>:
    17b8:	00 19 80    	mov.w     0x320, w0
    17ba:	61 00 60    	and.w     w0, #0x1, w0
    17bc:	00 00 e0    	cp0.w     w0
    17be:	fc ff 32    	bra       Z, 0x17b8 <.L3>
    return ADC1BUF0;
    17c0:	00 18 80    	mov.w     0x300, w0
}
    17c2:	00 80 fa    	ulnk      
    17c4:	00 00 06    	return    

000017c6 <_ledoff>:
    17c6:	00 00 fa    	lnk       #0x0
    17c8:	dc e2 a9    	bclr.b    0x2dc, #0x7
    17ca:	ec 02 a9    	bclr.b    0x2ec, #0x0
    17cc:	ec 22 a9    	bclr.b    0x2ec, #0x1
    17ce:	00 80 fa    	ulnk      
    17d0:	00 00 06    	return    

000017d2 <_main>:
    17d2:	02 00 fa    	lnk       #0x2
    17d4:	bb ff 07    	rcall     0x174c <.LFE0> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    17d6:	d0 09 20    	mov.w     #0x9d, w0
    17d8:	6c fe 07    	rcall     0x14b2 <_i2c2_init> <.LFB13> <.LFE12>
    17da:	00 03 20    	mov.w     #0x30, w0
    17dc:	d0 10 88    	mov.w     w0, 0x21a
    17de:	1c 22 ef    	clr.w     0x21c
    17e0:	9a 20 a8    	bset.b    0x9a, #0x1
    17e2:	01 00 37    	bra       0x17e6 <.L8> <.LBB2>

000017e4 <.L9>:
    17e4:	00 00 00    	nop       

000017e6 <.L8>:
    17e6:	00 53 27    	mov.w     #0x7530, w0
    17e8:	01 00 20    	mov.w     #0x0, w1
    17ea:	15 fd 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
    17ec:	50 00 20    	mov.w     #0x5, w0
    17ee:	de ff 07    	rcall     0x17ac <_read_analog> <.LFB1> <.LFE0>
    17f0:	00 0f 78    	mov.w     w0, [w14]
    17f2:	40 1f 20    	mov.w     #0x1f4, w0
    17f4:	9e 00 78    	mov.w     [w14], w1
    17f6:	80 8f 50    	sub.w     w1, w0, [w15]
    17f8:	02 00 36    	bra       LEU, 0x17fe <.L3>
    17fa:	10 00 20    	mov.w     #0x1, w0
    17fc:	60 40 88    	mov.w     w0, 0x80c

000017fe <.L3>:
    17fe:	30 1f 20    	mov.w     #0x1f3, w0
    1800:	9e 00 78    	mov.w     [w14], w1
    1802:	80 8f 50    	sub.w     w1, w0, [w15]
    1804:	01 00 3e    	bra       GTU, 0x1808 <.L4>
    1806:	0c 28 ef    	clr.w     0x80c

00001808 <.L4>:
    1808:	60 40 80    	mov.w     0x80c, w0
    180a:	00 00 e0    	cp0.w     w0
    180c:	0a 00 32    	bra       Z, 0x1822 <.L6>
    180e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1810:	e9 ff 3a    	bra       NZ, 0x17e4 <.L9>
    1812:	10 c0 b3    	mov.b     #0x1, w0
    1814:	03 e8 b7    	mov.b     WREG, 0x803
    1816:	dc e2 a8    	bset.b    0x2dc, #0x7
    1818:	10 00 20    	mov.w     #0x1, w0
    181a:	01 00 20    	mov.w     #0x0, w1
    181c:	fc fc 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
    181e:	ec 02 a9    	bclr.b    0x2ec, #0x0
    1820:	07 00 37    	bra       0x1830 <.L5> <.LBE2>

00001822 <.L6>:
    1822:	03 68 ef    	clr.b     0x803
    1824:	dc e2 a9    	bclr.b    0x2dc, #0x7
    1826:	10 00 20    	mov.w     #0x1, w0
    1828:	01 00 20    	mov.w     #0x0, w1
    182a:	f5 fc 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
    182c:	ec 02 a8    	bset.b    0x2ec, #0x0
    182e:	00 00 00    	nop       

00001830 <.L5>:
    1830:	da ff 37    	bra       0x17e6 <.L8> <.LBB2>
Disassembly of section .dinit:

00001832 <.dinit>:
    1832:	0c 08 00    	nop       
    1834:	02 00 00    	nop       
    1836:	80 00 00    	nop       
    1838:	00 08 00    	nop       
    183a:	0c 00 00    	nop       
    183c:	80 00 00    	nop       
    183e:	00 00 00    	nop       
Disassembly of section .isr:

00001840 <__DefaultInterrupt>:
    1840:	00 40 da    	break     
    1842:	00 00 fe    	reset     
