
i2ctest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	e8 1d 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	e8 1d 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	e8 1d 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	e8 1d 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	e8 1d 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	e8 1d 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	e8 1d 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	e8 1d 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	e8 1d 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	e8 1d 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	e8 1d 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	e8 1d 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	e8 1d 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	e8 1d 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	e8 1d 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	e8 1d 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	e8 1d 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	e8 1d 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	e8 1d 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	e8 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	e8 1d 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	e8 1d 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	e8 1d 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	e8 1d 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	e8 1d 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	e8 1d 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	e8 1d 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	e8 1d 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	e8 1d 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	e8 1d 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	e8 1d 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	e8 1d 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	e8 1d 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	e8 1d 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	e8 1d 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	e8 1d 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	e8 1d 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	e8 1d 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	e8 1d 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	e8 1d 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	e8 1d 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	e8 1d 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	e8 1d 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	e8 1d 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	e8 1d 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	e8 1d 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	e8 1d 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	e8 1d 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	e8 1d 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	e8 1d 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	e8 1d 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	e8 1d 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	e8 1d 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	e8 1d 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	e8 1d 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	e8 1d 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	e8 1d 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	e8 1d 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	e8 1d 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	8f 0a 21    	mov.w     #0x10a8, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	ae 00 07    	rcall     0x1282 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	80 c9 21    	mov.w     #0x1c98, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	9c 1d 02    	call      0x1d9c <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	60 02 20    	mov.w     #0x26, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	4e 15 04    	goto      0x154e <_closeall>
    1216:	00 00 00 
    1218:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    121a:	00 00 00 

0000121c <_close>:
    121c:	0a 00 fa    	lnk       #0xa
    121e:	11 00 20    	mov.w     #0x1, w1
    1220:	b1 bf 9f    	mov.w     w1, [w15-10]
    1222:	c0 bf 9f    	mov.w     w0, [w15-8]
    1224:	6a 80 57    	sub.w     w15, #0xa, w0
    1226:	48 02 07    	rcall     0x16b8 <_doclose>
    1228:	4f b8 97    	mov.w     [w15-8], w0
    122a:	00 80 fa    	ulnk      
    122c:	00 00 06    	return    

0000122e <_remove>:
    122e:	0a 00 fa    	lnk       #0xa
    1230:	51 00 20    	mov.w     #0x5, w1
    1232:	b1 bf 9f    	mov.w     w1, [w15-10]
    1234:	c0 bf 9f    	mov.w     w0, [w15-8]
    1236:	6a 80 57    	sub.w     w15, #0xa, w0
    1238:	41 02 07    	rcall     0x16bc <_doremove>
    123a:	5f b8 97    	mov.w     [w15-6], w0
    123c:	00 80 fa    	ulnk      
    123e:	00 00 06    	return    

00001240 <_sbrk>:
    1240:	88 9f be    	mov.d     w8, [w15++]
    1242:	80 04 78    	mov.w     w0, w9
    1244:	30 85 80    	mov.w     0x10a6, w0
    1246:	00 00 e0    	cp0.w     w0
    1248:	04 00 3a    	bra       NZ, 0x1252 <.L2>
    124a:	0e 00 07    	rcall     0x1268 <_brk>
    124c:	00 84 eb    	setm.w    w8
    124e:	00 00 e0    	cp0.w     w0
    1250:	08 00 35    	bra       LT, 0x1262 <.L3>

00001252 <.L2>:
    1252:	38 85 80    	mov.w     0x10a6, w8
    1254:	09 00 e0    	cp0.w     w9
    1256:	05 00 32    	bra       Z, 0x1262 <.L3>
    1258:	09 00 44    	add.w     w8, w9, w0
    125a:	06 00 07    	rcall     0x1268 <_brk>
    125c:	00 00 e0    	cp0.w     w0
    125e:	01 00 3d    	bra       GE, 0x1262 <.L3>
    1260:	00 84 eb    	setm.w    w8

00001262 <.L3>:
    1262:	08 00 78    	mov.w     w8, w0
    1264:	4f 04 be    	mov.d     [--w15], w8
    1266:	00 00 06    	return    

00001268 <_brk>:
    1268:	80 00 78    	mov.w     w0, w1
    126a:	01 00 e0    	cp0.w     w1
    126c:	03 00 3a    	bra       NZ, 0x1274 <.L2>
    126e:	00 00 20    	mov.w     #0x0, w0
    1270:	30 85 88    	mov.w     w0, 0x10a6
    1272:	00 00 05    	retlw.w   #0x0, w0

00001274 <.L2>:
    1274:	00 80 eb    	setm.w    w0
    1276:	02 00 20    	mov.w     #0x0, w2
    1278:	82 8f 50    	sub.w     w1, w2, [w15]
    127a:	02 00 3e    	bra       GTU, 0x1280 <.L3>
    127c:	31 85 88    	mov.w     w1, 0x10a6
    127e:	00 00 eb    	clr.w     w0

00001280 <.L3>:
    1280:	00 00 06    	return    

00001282 <__crt_start_mode>:
    1282:	00 00 05    	retlw.w   #0x0, w0

00001284 <_puts>:
    1284:	e1 03 21    	mov.w     #0x103e, w1
    1286:	6a 00 07    	rcall     0x135c <_fputs>
    1288:	80 00 78    	mov.w     w0, w1
    128a:	00 80 eb    	setm.w    w0
    128c:	01 00 e0    	cp0.w     w1
    128e:	04 00 35    	bra       LT, 0x1298 <.L2>
    1290:	e1 03 21    	mov.w     #0x103e, w1
    1292:	a0 00 20    	mov.w     #0xa, w0
    1294:	02 00 07    	rcall     0x129a <_fputc>
    1296:	4f 80 de    	asr.w     w0, #0xf, w0

00001298 <.L2>:
    1298:	00 00 06    	return    

0000129a <_fputc>:
    129a:	88 9f be    	mov.d     w8, [w15++]
    129c:	8a 1f 78    	mov.w     w10, [w15++]
    129e:	00 04 be    	mov.d     w0, w8
    12a0:	c9 00 90    	mov.w     [w9+8], w1
    12a2:	69 00 90    	mov.w     [w9+12], w0
    12a4:	80 8f 50    	sub.w     w1, w0, [w15]
    12a6:	05 00 39    	bra       NC, 0x12b2 <.L2>
    12a8:	09 00 78    	mov.w     w9, w0
    12aa:	b7 00 07    	rcall     0x141a <__Fwprep>
    12ac:	80 80 eb    	setm.w    w1
    12ae:	00 00 e0    	cp0.w     w0
    12b0:	16 00 35    	bra       LT, 0x12de <.L3>

000012b2 <.L2>:
    12b2:	08 45 78    	mov.b     w8, w10
    12b4:	49 00 90    	mov.w     [w9+8], w0
    12b6:	08 58 78    	mov.b     w8, [w0++]
    12b8:	c0 04 98    	mov.w     w0, [w9+8]
    12ba:	19 00 78    	mov.w     [w9], w0
    12bc:	00 b8 a3    	btst.z    w0, #0xb
    12be:	04 00 3a    	bra       NZ, 0x12c8 <.L4>
    12c0:	00 a8 a3    	btst.z    w0, #0xa
    12c2:	07 00 32    	bra       Z, 0x12d2 <.L5>
    12c4:	ea 4f 54    	sub.b     w8, #0xa, [w15]
    12c6:	05 00 3a    	bra       NZ, 0x12d2 <.L5>

000012c8 <.L4>:
    12c8:	09 00 78    	mov.w     w9, w0
    12ca:	0d 00 07    	rcall     0x12e6 <__DNKfflush>
    12cc:	80 80 eb    	setm.w    w1
    12ce:	00 00 e0    	cp0.w     w0
    12d0:	06 00 3a    	bra       NZ, 0x12de <.L3>

000012d2 <.L5>:
    12d2:	00 c0 20    	mov.w     #0xc00, w0
    12d4:	19 00 60    	and.w     w0, [w9], w0
    12d6:	02 00 32    	bra       Z, 0x12dc <.L6>
    12d8:	49 00 90    	mov.w     [w9+8], w0
    12da:	e0 04 98    	mov.w     w0, [w9+12]

000012dc <.L6>:
    12dc:	8a 80 fb    	ze        w10, w1

000012de <.L3>:
    12de:	01 00 78    	mov.w     w1, w0
    12e0:	4f 05 78    	mov.w     [--w15], w10
    12e2:	4f 04 be    	mov.d     [--w15], w8
    12e4:	00 00 06    	return    

000012e6 <__DNKfflush>:
    12e6:	88 9f be    	mov.d     w8, [w15++]
    12e8:	8a 1f 78    	mov.w     w10, [w15++]
    12ea:	00 04 78    	mov.w     w0, w8
    12ec:	08 00 e0    	cp0.w     w8
    12ee:	0d 00 3a    	bra       NZ, 0x130a <.L2>
    12f0:	c8 08 21    	mov.w     #0x108c, w8
    12f2:	70 05 44    	add.w     w8, #0x10, w10
    12f4:	80 04 eb    	clr.w     w9

000012f6 <.L4>:
    12f6:	58 00 78    	mov.w     [++w8], w0
    12f8:	00 00 e0    	cp0.w     w0
    12fa:	04 00 32    	bra       Z, 0x1304 <.L3>
    12fc:	f4 ff 07    	rcall     0x12e6 <__DNKfflush>
    12fe:	00 00 e0    	cp0.w     w0
    1300:	01 00 3d    	bra       GE, 0x1304 <.L3>
    1302:	80 84 eb    	setm.w    w9

00001304 <.L3>:
    1304:	8a 0f 54    	sub.w     w8, w10, [w15]
    1306:	f7 ff 3a    	bra       NZ, 0x12f6 <.L4>
    1308:	25 00 37    	bra       0x1354 <.L5>

0000130a <.L2>:
    130a:	00 00 22    	mov.w     #0x2000, w0
    130c:	18 00 60    	and.w     w0, [w8], w0
    130e:	80 04 eb    	clr.w     w9
    1310:	21 00 32    	bra       Z, 0x1354 <.L5>
    1312:	a8 04 90    	mov.w     [w8+4], w9
    1314:	0f 00 37    	bra       0x1334 <.L6>

00001316 <.L8>:
    1316:	09 01 51    	sub.w     w2, w9, w2
    1318:	38 40 90    	mov.b     [w8+3], w0
    131a:	00 00 fb    	se        w0, w0
    131c:	89 00 78    	mov.w     w9, w1
    131e:	1f 03 07    	rcall     0x195e <_write> <.LFB10> <.LFE9>
    1320:	00 00 e0    	cp0.w     w0
    1322:	07 00 3c    	bra       GT, 0x1332 <.L7>
    1324:	28 00 90    	mov.w     [w8+4], w0
    1326:	40 04 98    	mov.w     w0, [w8+8]
    1328:	60 04 98    	mov.w     w0, [w8+12]
    132a:	50 0c 98    	mov.w     w0, [w8+26]
    132c:	18 90 a0    	bset.w    [w8], #0x9
    132e:	80 84 eb    	setm.w    w9
    1330:	11 00 37    	bra       0x1354 <.L5>

00001332 <.L7>:
    1332:	80 84 44    	add.w     w9, w0, w9

00001334 <.L6>:
    1334:	48 01 90    	mov.w     [w8+8], w2
    1336:	82 8f 54    	sub.w     w9, w2, [w15]
    1338:	ee ff 39    	bra       NC, 0x1316 <.L8>
    133a:	28 00 90    	mov.w     [w8+4], w0
    133c:	40 04 98    	mov.w     w0, [w8+8]
    133e:	98 00 78    	mov.w     [w8], w1
    1340:	02 c0 20    	mov.w     #0xc00, w2
    1342:	02 81 60    	and.w     w1, w2, w2
    1344:	01 00 3a    	bra       NZ, 0x1348 <.L9>
    1346:	38 00 90    	mov.w     [w8+6], w0

00001348 <.L9>:
    1348:	01 e8 a3    	btst.z    w1, #0xe
    134a:	02 00 32    	bra       Z, 0x1350 <.L10>
    134c:	60 04 98    	mov.w     w0, [w8+12]
    134e:	01 00 37    	bra       0x1352 <.L13>

00001350 <.L10>:
    1350:	50 0c 98    	mov.w     w0, [w8+26]

00001352 <.L13>:
    1352:	80 04 eb    	clr.w     w9

00001354 <.L5>:
    1354:	09 00 78    	mov.w     w9, w0
    1356:	4f 05 78    	mov.w     [--w15], w10
    1358:	4f 04 be    	mov.d     [--w15], w8
    135a:	00 00 06    	return    

0000135c <_fputs>:
    135c:	88 9f be    	mov.d     w8, [w15++]
    135e:	8a 9f be    	mov.d     w10, [w15++]
    1360:	80 04 78    	mov.w     w0, w9
    1362:	01 04 78    	mov.w     w1, w8
    1364:	2c 00 37    	bra       0x13be <.L2>

00001366 <.L9>:
    1366:	c8 00 90    	mov.w     [w8+8], w1
    1368:	68 00 90    	mov.w     [w8+12], w0
    136a:	80 8f 50    	sub.w     w1, w0, [w15]
    136c:	04 00 39    	bra       NC, 0x1376 <.L3>
    136e:	08 00 78    	mov.w     w8, w0
    1370:	54 00 07    	rcall     0x141a <__Fwprep>
    1372:	00 00 e0    	cp0.w     w0
    1374:	37 00 35    	bra       LT, 0x13e4 <.L13>

00001376 <.L3>:
    1376:	00 40 20    	mov.w     #0x400, w0
    1378:	18 00 60    	and.w     w0, [w8], w0
    137a:	09 00 32    	bra       Z, 0x138e <.L5>
    137c:	a1 00 20    	mov.w     #0xa, w1
    137e:	09 00 78    	mov.w     w9, w0
    1380:	42 00 07    	rcall     0x1406 <_strrchr>
    1382:	80 05 78    	mov.w     w0, w11
    1384:	0b 00 e0    	cp0.w     w11
    1386:	03 00 32    	bra       Z, 0x138e <.L5>
    1388:	61 85 14    	subr.w    w9, #0x1, w10
    138a:	0a 85 45    	add.w     w11, w10, w10
    138c:	04 00 37    	bra       0x1396 <.L6>

0000138e <.L5>:
    138e:	09 00 78    	mov.w     w9, w0
    1390:	34 00 07    	rcall     0x13fa <_strlen>
    1392:	00 05 78    	mov.w     w0, w10
    1394:	80 05 eb    	clr.w     w11

00001396 <.L6>:
    1396:	48 00 90    	mov.w     [w8+8], w0
    1398:	e8 00 90    	mov.w     [w8+12], w1
    139a:	80 80 50    	sub.w     w1, w0, w1
    139c:	8a 8f 50    	sub.w     w1, w10, [w15]
    139e:	02 00 31    	bra       C, 0x13a4 <.L7>
    13a0:	01 05 78    	mov.w     w1, w10
    13a2:	80 05 eb    	clr.w     w11

000013a4 <.L7>:
    13a4:	0a 01 78    	mov.w     w10, w2
    13a6:	89 00 78    	mov.w     w9, w1
    13a8:	21 00 07    	rcall     0x13ec <_memcpy>
    13aa:	48 00 90    	mov.w     [w8+8], w0
    13ac:	0a 00 40    	add.w     w0, w10, w0
    13ae:	40 04 98    	mov.w     w0, [w8+8]
    13b0:	0b 00 e0    	cp0.w     w11
    13b2:	04 00 32    	bra       Z, 0x13bc <.L8>
    13b4:	08 00 78    	mov.w     w8, w0
    13b6:	97 ff 07    	rcall     0x12e6 <__DNKfflush>
    13b8:	00 00 e0    	cp0.w     w0
    13ba:	14 00 3a    	bra       NZ, 0x13e4 <.L13>

000013bc <.L8>:
    13bc:	8a 84 44    	add.w     w9, w10, w9

000013be <.L2>:
    13be:	19 04 e0    	cp0.b     [w9]
    13c0:	d2 ff 3a    	bra       NZ, 0x1366 <.L9>
    13c2:	00 80 20    	mov.w     #0x800, w0
    13c4:	18 00 60    	and.w     w0, [w8], w0
    13c6:	06 00 32    	bra       Z, 0x13d4 <.L10>
    13c8:	08 00 78    	mov.w     w8, w0
    13ca:	8d ff 07    	rcall     0x12e6 <__DNKfflush>
    13cc:	80 00 78    	mov.w     w0, w1
    13ce:	00 80 eb    	setm.w    w0
    13d0:	01 00 e0    	cp0.w     w1
    13d2:	09 00 3a    	bra       NZ, 0x13e6 <.L4>

000013d4 <.L10>:
    13d4:	01 c0 20    	mov.w     #0xc00, w1
    13d6:	98 80 60    	and.w     w1, [w8], w1
    13d8:	00 00 eb    	clr.w     w0
    13da:	05 00 32    	bra       Z, 0x13e6 <.L4>
    13dc:	48 00 90    	mov.w     [w8+8], w0
    13de:	60 04 98    	mov.w     w0, [w8+12]
    13e0:	00 00 eb    	clr.w     w0
    13e2:	01 00 37    	bra       0x13e6 <.L4>

000013e4 <.L13>:
    13e4:	00 80 eb    	setm.w    w0

000013e6 <.L4>:
    13e6:	4f 05 be    	mov.d     [--w15], w10
    13e8:	4f 04 be    	mov.d     [--w15], w8
    13ea:	00 00 06    	return    

000013ec <_memcpy>:
    13ec:	80 01 78    	mov.w     w0, w3
    13ee:	02 00 37    	bra       0x13f4 <.L2>

000013f0 <.L3>:
    13f0:	b1 59 78    	mov.b     [w1++], [w3++]
    13f2:	02 01 e9    	dec.w     w2, w2

000013f4 <.L2>:
    13f4:	02 00 e0    	cp0.w     w2
    13f6:	fc ff 3a    	bra       NZ, 0x13f0 <.L3>
    13f8:	00 00 06    	return    

000013fa <_strlen>:
    13fa:	80 00 78    	mov.w     w0, w1

000013fc <.L2>:
    13fc:	01 01 78    	mov.w     w1, w2
    13fe:	31 04 e0    	cp0.b     [w1++]
    1400:	fd ff 3a    	bra       NZ, 0x13fc <.L2>
    1402:	00 00 51    	sub.w     w2, w0, w0
    1404:	00 00 06    	return    

00001406 <_strrchr>:
    1406:	00 01 eb    	clr.w     w2

00001408 <.L3>:
    1408:	00 02 78    	mov.w     w0, w4
    140a:	b0 41 78    	mov.b     [w0++], w3
    140c:	81 cf 51    	sub.b     w3, w1, [w15]
    140e:	01 00 3a    	bra       NZ, 0x1412 <.L2>
    1410:	04 01 78    	mov.w     w4, w2

00001412 <.L2>:
    1412:	03 04 e0    	cp0.b     w3
    1414:	f9 ff 3a    	bra       NZ, 0x1408 <.L3>
    1416:	02 00 78    	mov.w     w2, w0
    1418:	00 00 06    	return    

0000141a <__Fwprep>:
    141a:	88 9f be    	mov.d     w8, [w15++]
    141c:	8a 1f 78    	mov.w     w10, [w15++]
    141e:	00 04 78    	mov.w     w0, w8
    1420:	c8 00 90    	mov.w     [w8+8], w1
    1422:	68 01 90    	mov.w     [w8+12], w2
    1424:	00 00 eb    	clr.w     w0
    1426:	82 8f 50    	sub.w     w1, w2, [w15]
    1428:	3c 00 39    	bra       NC, 0x14a2 <.L2>
    142a:	18 00 78    	mov.w     [w8], w0
    142c:	22 00 29    	mov.w     #0x9002, w2
    142e:	02 01 60    	and.w     w0, w2, w2
    1430:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    1432:	07 00 32    	bra       Z, 0x1442 <.L3>
    1434:	01 20 24    	mov.w     #0x4200, w1
    1436:	00 00 e0    	cp0.w     w0
    1438:	01 00 3d    	bra       GE, 0x143c <.L4>
    143a:	01 20 20    	mov.w     #0x200, w1

0000143c <.L4>:
    143c:	00 8c 70    	ior.w     w1, w0, [w8]
    143e:	00 80 eb    	setm.w    w0
    1440:	30 00 37    	bra       0x14a2 <.L2>

00001442 <.L3>:
    1442:	02 00 26    	mov.w     #0x6000, w2
    1444:	02 00 60    	and.w     w0, w2, w0
    1446:	82 0f 50    	sub.w     w0, w2, [w15]
    1448:	09 00 3a    	bra       NZ, 0x145c <.L5>
    144a:	38 00 90    	mov.w     [w8+6], w0
    144c:	80 8f 50    	sub.w     w1, w0, [w15]
    144e:	06 00 39    	bra       NC, 0x145c <.L5>
    1450:	08 00 78    	mov.w     w8, w0
    1452:	49 ff 07    	rcall     0x12e6 <__DNKfflush>
    1454:	80 00 78    	mov.w     w0, w1
    1456:	00 80 eb    	setm.w    w0
    1458:	01 00 e0    	cp0.w     w1
    145a:	23 00 3a    	bra       NZ, 0x14a2 <.L2>

0000145c <.L5>:
    145c:	18 05 78    	mov.w     [w8], w10
    145e:	00 c0 20    	mov.w     #0xc00, w0
    1460:	00 00 65    	and.w     w10, w0, w0
    1462:	18 00 3a    	bra       NZ, 0x1494 <.L6>
    1464:	a8 04 90    	mov.w     [w8+4], w9
    1466:	60 02 20    	mov.w     #0x26, w0
    1468:	08 00 40    	add.w     w0, w8, w0
    146a:	80 8f 54    	sub.w     w9, w0, [w15]
    146c:	13 00 3a    	bra       NZ, 0x1494 <.L6>
    146e:	00 20 20    	mov.w     #0x200, w0
    1470:	ef 00 07    	rcall     0x1650 <_malloc>
    1472:	20 04 98    	mov.w     w0, [w8+4]
    1474:	00 00 e0    	cp0.w     w0
    1476:	05 00 3a    	bra       NZ, 0x1482 <.L7>
    1478:	29 04 98    	mov.w     w9, [w8+4]
    147a:	49 04 98    	mov.w     w9, [w8+8]
    147c:	89 04 e8    	inc.w     w9, w9
    147e:	39 04 98    	mov.w     w9, [w8+6]
    1480:	08 00 37    	bra       0x1492 <.L11>

00001482 <.L7>:
    1482:	0a 60 a0    	bset.w    w10, #0x6
    1484:	0a 0c 78    	mov.w     w10, [w8]
    1486:	40 04 98    	mov.w     w0, [w8+8]
    1488:	01 20 20    	mov.w     #0x200, w1
    148a:	80 80 40    	add.w     w1, w0, w1
    148c:	31 04 98    	mov.w     w1, [w8+6]
    148e:	40 0c 98    	mov.w     w0, [w8+24]
    1490:	50 0c 98    	mov.w     w0, [w8+26]

00001492 <.L11>:
    1492:	0c 00 07    	rcall     0x14ac <__Closreg>

00001494 <.L6>:
    1494:	28 00 90    	mov.w     [w8+4], w0
    1496:	50 04 98    	mov.w     w0, [w8+10]
    1498:	38 00 90    	mov.w     [w8+6], w0
    149a:	60 04 98    	mov.w     w0, [w8+12]
    149c:	00 00 26    	mov.w     #0x6000, w0
    149e:	18 0c 70    	ior.w     w0, [w8], [w8]
    14a0:	00 00 eb    	clr.w     w0

000014a2 <.L2>:
    14a2:	4f 05 78    	mov.w     [--w15], w10
    14a4:	4f 04 be    	mov.d     [--w15], w8
    14a6:	00 00 06    	return    

000014a8 <_closeallreg>:
    14a8:	e0 54 21    	mov.w     #0x154e, w0
    14aa:	61 00 37    	bra       0x156e <__Atexit>

000014ac <__Closreg>:
    14ac:	88 1f 78    	mov.w     w8, [w15++]
    14ae:	28 0a 21    	mov.w     #0x10a2, w8
    14b0:	18 04 e0    	cp0.b     [w8]
    14b2:	03 00 3a    	bra       NZ, 0x14ba <.L2>
    14b4:	f9 ff 07    	rcall     0x14a8 <_closeallreg>
    14b6:	20 c0 b3    	mov.b     #0x2, w0
    14b8:	00 4c 78    	mov.b     w0, [w8]

000014ba <.L2>:
    14ba:	4f 04 78    	mov.w     [--w15], w8
    14bc:	00 00 06    	return    

000014be <_fclose>:
    14be:	88 9f be    	mov.d     w8, [w15++]
    14c0:	00 04 78    	mov.w     w0, w8
    14c2:	08 00 78    	mov.w     w8, w0
    14c4:	10 ff 07    	rcall     0x12e6 <__DNKfflush>
    14c6:	80 04 78    	mov.w     w0, w9
    14c8:	00 04 20    	mov.w     #0x40, w0
    14ca:	18 00 60    	and.w     w0, [w8], w0
    14cc:	02 00 32    	bra       Z, 0x14d2 <.L5>
    14ce:	28 00 90    	mov.w     [w8+4], w0
    14d0:	5a 00 07    	rcall     0x1586 <_free>

000014d2 <.L5>:
    14d2:	00 00 eb    	clr.w     w0
    14d4:	20 04 98    	mov.w     w0, [w8+4]
    14d6:	38 40 90    	mov.b     [w8+3], w0
    14d8:	00 04 e0    	cp0.b     w0
    14da:	05 00 35    	bra       LT, 0x14e6 <.L6>
    14dc:	00 00 fb    	se        w0, w0
    14de:	9e fe 07    	rcall     0x121c <_close>
    14e0:	00 00 e0    	cp0.w     w0
    14e2:	01 00 32    	bra       Z, 0x14e6 <.L6>
    14e4:	80 84 eb    	setm.w    w9

000014e6 <.L6>:
    14e6:	18 10 90    	mov.w     [w8+34], w0
    14e8:	00 00 e0    	cp0.w     w0
    14ea:	08 00 32    	bra       Z, 0x14fc <.L7>
    14ec:	a0 fe 07    	rcall     0x122e <_remove>
    14ee:	00 00 e0    	cp0.w     w0
    14f0:	01 00 32    	bra       Z, 0x14f4 <.L8>
    14f2:	80 84 eb    	setm.w    w9

000014f4 <.L8>:
    14f4:	18 10 90    	mov.w     [w8+34], w0
    14f6:	47 00 07    	rcall     0x1586 <_free>
    14f8:	00 00 eb    	clr.w     w0
    14fa:	10 14 98    	mov.w     w0, [w8+34]

000014fc <.L7>:
    14fc:	00 08 20    	mov.w     #0x80, w0
    14fe:	18 00 60    	and.w     w0, [w8], w0
    1500:	15 00 32    	bra       Z, 0x152c <.L9>
    1502:	00 01 eb    	clr.w     w2
    1504:	60 00 b8    	mul.uu    w0, #0x0, w0

00001506 <.L12>:
    1506:	e3 08 21    	mov.w     #0x108e, w3
    1508:	02 02 d0    	sl.w      w2, w4
    150a:	63 02 7a    	mov.w     [w3+w4], w4
    150c:	88 0f 52    	sub.w     w4, w8, [w15]
    150e:	05 00 3a    	bra       NZ, 0x151a <.L10>
    1510:	00 00 40    	add.w     w0, w0, w0
    1512:	81 80 48    	addc.w    w1, w1, w1
    1514:	00 80 41    	add.w     w3, w0, w0
    1516:	00 08 eb    	clr.w     [w0]
    1518:	06 00 37    	bra       0x1526 <.L11>

0000151a <.L10>:
    151a:	61 00 40    	add.w     w0, #0x1, w0
    151c:	e0 80 48    	addc.w    w1, #0x0, w1
    151e:	02 01 e8    	inc.w     w2, w2
    1520:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1522:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1524:	f0 ff 3a    	bra       NZ, 0x1506 <.L12>

00001526 <.L11>:
    1526:	08 00 78    	mov.w     w8, w0
    1528:	2e 00 07    	rcall     0x1586 <_free>
    152a:	0e 00 37    	bra       0x1548 <.L13>

0000152c <.L9>:
    152c:	00 0c 78    	mov.w     w0, [w8]
    152e:	00 c0 eb    	setm.b    w0
    1530:	30 44 98    	mov.b     w0, [w8+3]
    1532:	60 02 20    	mov.w     #0x26, w0
    1534:	08 00 40    	add.w     w0, w8, w0
    1536:	20 04 98    	mov.w     w0, [w8+4]
    1538:	40 04 98    	mov.w     w0, [w8+8]
    153a:	50 04 98    	mov.w     w0, [w8+10]
    153c:	40 0c 98    	mov.w     w0, [w8+24]
    153e:	60 04 98    	mov.w     w0, [w8+12]
    1540:	50 0c 98    	mov.w     w0, [w8+26]
    1542:	70 04 98    	mov.w     w0, [w8+14]
    1544:	76 00 44    	add.w     w8, #0x16, w0
    1546:	00 0c 98    	mov.w     w0, [w8+16]

00001548 <.L13>:
    1548:	09 00 78    	mov.w     w9, w0
    154a:	4f 04 be    	mov.d     [--w15], w8
    154c:	00 00 06    	return    

0000154e <_closeall>:
    154e:	88 1f 78    	mov.w     w8, [w15++]
    1550:	00 04 eb    	clr.w     w8

00001552 <.L18>:
    1552:	61 40 b8    	mul.uu    w8, #0x1, w0
    1554:	e2 ff 2f    	mov.w     #0xfffe, w2
    1556:	f3 ff 2f    	mov.w     #0xffff, w3
    1558:	b3 00 07    	rcall     0x16c0 <___mulp32eds3> <___mulp32peds3> <___mulsi3>
    155a:	c2 09 21    	mov.w     #0x109c, w2
    155c:	62 00 78    	mov.w     [w2+w0], w0
    155e:	00 00 e0    	cp0.w     w0
    1560:	01 00 32    	bra       Z, 0x1564 <.L17>
    1562:	ad ff 07    	rcall     0x14be <_fclose>

00001564 <.L17>:
    1564:	08 04 e8    	inc.w     w8, w8
    1566:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    1568:	f4 ff 3a    	bra       NZ, 0x1552 <.L18>
    156a:	4f 04 78    	mov.w     [--w15], w8
    156c:	00 00 06    	return    

0000156e <__Atexit>:
    156e:	01 00 20    	mov.w     #0x0, w1
    1570:	01 00 e0    	cp0.w     w1
    1572:	08 00 32    	bra       Z, 0x1584 <.L1>
    1574:	01 00 80    	mov.w     0x0, w1
    1576:	01 00 e0    	cp0.w     w1
    1578:	05 00 32    	bra       Z, 0x1584 <.L1>
    157a:	81 00 e9    	dec.w     w1, w1
    157c:	01 00 88    	mov.w     w1, 0x0
    157e:	81 00 d0    	sl.w      w1, w1
    1580:	02 00 80    	mov.w     0x0, w2
    1582:	00 b1 78    	mov.w     w0, [w2+w1]

00001584 <.L1>:
    1584:	00 00 06    	return    

00001586 <_free>:
    1586:	00 00 e0    	cp0.w     w0
    1588:	2f 00 32    	bra       Z, 0x15e8 <.L1>
    158a:	c0 01 78    	mov.w     [--w0], w3
    158c:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    158e:	2c 00 36    	bra       LEU, 0x15e8 <.L1>
    1590:	03 08 a3    	btst.z    w3, #0x0
    1592:	2a 00 3a    	bra       NZ, 0x15e8 <.L1>
    1594:	01 85 80    	mov.w     0x10a0, w1
    1596:	01 00 e0    	cp0.w     w1
    1598:	02 00 32    	bra       Z, 0x159e <.L3>
    159a:	81 0f 50    	sub.w     w0, w1, [w15]
    159c:	04 00 31    	bra       C, 0x15a6 <.L7>

0000159e <.L3>:
    159e:	11 00 98    	mov.w     w1, [w0+2]
    15a0:	00 85 88    	mov.w     w0, 0x10a0
    15a2:	16 00 37    	bra       0x15d0 <.L5>

000015a4 <.L11>:
    15a4:	82 00 78    	mov.w     w2, w1

000015a6 <.L7>:
    15a6:	11 01 90    	mov.w     [w1+2], w2
    15a8:	02 00 e0    	cp0.w     w2
    15aa:	02 00 32    	bra       Z, 0x15b0 <.L6>
    15ac:	80 0f 51    	sub.w     w2, w0, [w15]
    15ae:	fa ff 39    	bra       NC, 0x15a4 <.L11>

000015b0 <.L6>:
    15b0:	11 02 78    	mov.w     [w1], w4
    15b2:	84 82 40    	add.w     w1, w4, w5
    15b4:	85 0f 50    	sub.w     w0, w5, [w15]
    15b6:	18 00 39    	bra       NC, 0x15e8 <.L1>
    15b8:	80 8f 52    	sub.w     w5, w0, [w15]
    15ba:	03 00 3a    	bra       NZ, 0x15c2 <.L8>
    15bc:	83 08 42    	add.w     w4, w3, [w1]
    15be:	01 00 78    	mov.w     w1, w0
    15c0:	07 00 37    	bra       0x15d0 <.L5>

000015c2 <.L8>:
    15c2:	02 00 e0    	cp0.w     w2
    15c4:	03 00 32    	bra       Z, 0x15cc <.L9>
    15c6:	83 01 40    	add.w     w0, w3, w3
    15c8:	83 0f 51    	sub.w     w2, w3, [w15]
    15ca:	0e 00 39    	bra       NC, 0x15e8 <.L1>

000015cc <.L9>:
    15cc:	12 00 98    	mov.w     w2, [w0+2]
    15ce:	90 00 98    	mov.w     w0, [w1+2]

000015d0 <.L5>:
    15d0:	90 00 90    	mov.w     [w0+2], w1
    15d2:	01 00 e0    	cp0.w     w1
    15d4:	09 00 32    	bra       Z, 0x15e8 <.L1>
    15d6:	10 01 40    	add.w     w0, [w0], w2
    15d8:	82 8f 50    	sub.w     w1, w2, [w15]
    15da:	06 00 3a    	bra       NZ, 0x15e8 <.L1>
    15dc:	e2 09 21    	mov.w     #0x109e, w2
    15de:	00 09 eb    	clr.w     [w2]
    15e0:	10 01 78    	mov.w     [w0], w2
    15e2:	11 08 41    	add.w     w2, [w1], [w0]
    15e4:	91 00 90    	mov.w     [w1+2], w1
    15e6:	11 00 98    	mov.w     w1, [w0+2]

000015e8 <.L1>:
    15e8:	00 00 06    	return    

000015ea <_findmem>:
    15ea:	88 9f be    	mov.d     w8, [w15++]
    15ec:	00 04 78    	mov.w     w0, w8

000015ee <.L14>:
    15ee:	f1 84 80    	mov.w     0x109e, w1
    15f0:	01 00 e0    	cp0.w     w1
    15f2:	02 00 32    	bra       Z, 0x15f8 <.L2>
    15f4:	01 00 78    	mov.w     w1, w0
    15f6:	0d 00 37    	bra       0x1612 <.L3>

000015f8 <.L2>:
    15f8:	01 85 80    	mov.w     0x10a0, w1
    15fa:	00 0a 21    	mov.w     #0x10a0, w0
    15fc:	04 00 37    	bra       0x1606 <.L4>

000015fe <.L6>:
    15fe:	91 0f 54    	sub.w     w8, [w1], [w15]
    1600:	25 00 36    	bra       LEU, 0x164c <.L5>
    1602:	01 80 e8    	inc2.w    w1, w0
    1604:	91 00 90    	mov.w     [w1+2], w1

00001606 <.L4>:
    1606:	01 00 e0    	cp0.w     w1
    1608:	fa ff 3a    	bra       NZ, 0x15fe <.L6>
    160a:	10 00 37    	bra       0x162c <.L7>

0000160c <.L8>:
    160c:	92 0f 54    	sub.w     w8, [w2], [w15]
    160e:	1e 00 36    	bra       LEU, 0x164c <.L5>
    1610:	02 80 e8    	inc2.w    w2, w0

00001612 <.L3>:
    1612:	10 01 78    	mov.w     [w0], w2
    1614:	02 00 e0    	cp0.w     w2
    1616:	fa ff 3a    	bra       NZ, 0x160c <.L8>
    1618:	11 01 78    	mov.w     [w1], w2
    161a:	01 85 80    	mov.w     0x10a0, w1
    161c:	00 0a 21    	mov.w     #0x10a0, w0
    161e:	04 00 37    	bra       0x1628 <.L9>

00001620 <.L10>:
    1620:	91 0f 54    	sub.w     w8, [w1], [w15]
    1622:	14 00 36    	bra       LEU, 0x164c <.L5>
    1624:	01 80 e8    	inc2.w    w1, w0
    1626:	91 00 90    	mov.w     [w1+2], w1

00001628 <.L9>:
    1628:	82 8f 50    	sub.w     w1, w2, [w15]
    162a:	fa ff 3a    	bra       NZ, 0x1620 <.L10>

0000162c <.L7>:
    162c:	29 85 80    	mov.w     0x10a4, w9

0000162e <.L13>:
    162e:	88 8f 54    	sub.w     w9, w8, [w15]
    1630:	01 00 31    	bra       C, 0x1634 <.L11>
    1632:	88 04 78    	mov.w     w8, w9

00001634 <.L11>:
    1634:	09 00 78    	mov.w     w9, w0
    1636:	36 00 07    	rcall     0x16a4 <__Getmem>
    1638:	00 00 e0    	cp0.w     w0
    163a:	04 00 3a    	bra       NZ, 0x1644 <.L12>
    163c:	88 8f 54    	sub.w     w9, w8, [w15]
    163e:	05 00 32    	bra       Z, 0x164a <.L15>
    1640:	89 04 d1    	lsr.w     w9, w9
    1642:	f5 ff 37    	bra       0x162e <.L13>

00001644 <.L12>:
    1644:	09 18 78    	mov.w     w9, [w0++]
    1646:	9f ff 07    	rcall     0x1586 <_free>
    1648:	d2 ff 37    	bra       0x15ee <.L14>

0000164a <.L15>:
    164a:	00 00 eb    	clr.w     w0

0000164c <.L5>:
    164c:	4f 04 be    	mov.d     [--w15], w8
    164e:	00 00 06    	return    

00001650 <_malloc>:
    1650:	88 1f 78    	mov.w     w8, [w15++]
    1652:	63 04 40    	add.w     w0, #0x3, w8
    1654:	08 00 a1    	bclr.w    w8, #0x0
    1656:	80 00 eb    	clr.w     w1
    1658:	80 0f 54    	sub.w     w8, w0, [w15]
    165a:	21 00 36    	bra       LEU, 0x169e <.L17>
    165c:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    165e:	01 00 3e    	bra       GTU, 0x1662 <.L18>
    1660:	48 00 20    	mov.w     #0x4, w8

00001662 <.L18>:
    1662:	08 00 78    	mov.w     w8, w0
    1664:	c2 ff 07    	rcall     0x15ea <_findmem>
    1666:	80 00 eb    	clr.w     w1
    1668:	00 00 e0    	cp0.w     w0
    166a:	19 00 32    	bra       Z, 0x169e <.L17>
    166c:	90 00 78    	mov.w     [w0], w1
    166e:	91 01 78    	mov.w     [w1], w3
    1670:	64 81 51    	sub.w     w3, #0x4, w2
    1672:	88 0f 51    	sub.w     w2, w8, [w15]
    1674:	03 00 31    	bra       C, 0x167c <.L19>
    1676:	11 01 90    	mov.w     [w1+2], w2
    1678:	02 08 78    	mov.w     w2, [w0]
    167a:	07 00 37    	bra       0x168a <.L20>

0000167c <.L19>:
    167c:	08 81 40    	add.w     w1, w8, w2
    167e:	02 08 78    	mov.w     w2, [w0]
    1680:	91 01 90    	mov.w     [w1+2], w3
    1682:	13 01 98    	mov.w     w3, [w2+2]
    1684:	10 01 78    	mov.w     [w0], w2
    1686:	11 09 14    	subr.w    w8, [w1], [w2]
    1688:	88 08 78    	mov.w     w8, [w1]

0000168a <.L20>:
    168a:	10 01 78    	mov.w     [w0], w2
    168c:	00 00 eb    	clr.w     w0
    168e:	02 00 e0    	cp0.w     w2
    1690:	04 00 32    	bra       Z, 0x169a <.L21>
    1692:	92 01 90    	mov.w     [w2+2], w3
    1694:	03 00 e0    	cp0.w     w3
    1696:	01 00 32    	bra       Z, 0x169a <.L21>
    1698:	02 80 e8    	inc2.w    w2, w0

0000169a <.L21>:
    169a:	f0 84 88    	mov.w     w0, 0x109e
    169c:	81 80 e8    	inc2.w    w1, w1

0000169e <.L17>:
    169e:	01 00 78    	mov.w     w1, w0
    16a0:	4f 04 78    	mov.w     [--w15], w8
    16a2:	00 00 06    	return    

000016a4 <__Getmem>:
    16a4:	80 00 78    	mov.w     w0, w1
    16a6:	00 00 eb    	clr.w     w0
    16a8:	01 00 e0    	cp0.w     w1
    16aa:	05 00 34    	bra       LE, 0x16b6 <.L2>
    16ac:	01 00 78    	mov.w     w1, w0
    16ae:	c8 fd 07    	rcall     0x1240 <_sbrk>
    16b0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    16b2:	01 00 3a    	bra       NZ, 0x16b6 <.L2>
    16b4:	00 00 eb    	clr.w     w0

000016b6 <.L2>:
    16b6:	00 00 06    	return    

000016b8 <_doclose>:
    16b8:	00 c0 da    	.pword 0xdac000
    16ba:	00 00 06    	return    

000016bc <_doremove>:
    16bc:	00 c0 da    	.pword 0xdac000
    16be:	00 00 06    	return    

000016c0 <___mulp32eds3>:
    16c0:	02 0a b9    	mul.su    w1, w2, w4
    16c2:	00 1b b9    	mul.su    w3, w0, w6
    16c4:	02 00 b8    	mul.uu    w0, w2, w0
    16c6:	81 00 42    	add.w     w4, w1, w1
    16c8:	81 00 43    	add.w     w6, w1, w1
    16ca:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	42 1c 04    	goto      0x1c42 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	e0 1b 04    	goto      0x1be0 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	e8 1d 04    	goto      0x1de8 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

000096cc <.LC1>:
    96cc:	49 20       	.word 0x2049
    96ce:	74 72       	.word 0x7274
    96d0:	69 65       	.word 0x6569
    96d2:	64 20       	.word 0x2064
    96d4:	74 68       	.word 0x6874
    96d6:	65 20       	.word 0x2065
    96d8:	77 68       	.word 0x6877
    96da:	69 6c       	.word 0x6c69
    96dc:	65 20       	.word 0x2065
    96de:	6c 6f       	.word 0x6f6c
    96e0:	6f 70       	.word 0x706f
    96e2:	20 00       	.word 0x20

000096e4 <.LC0>:
    96e4:	48 65       	.word 0x6548
    96e6:	6c 6c       	.word 0x6c6c
    96e8:	6f 20       	.word 0x206f
    96ea:	57 6f       	.word 0x6f57
    96ec:	72 6c       	.word 0x6c72
    96ee:	64 21       	.word 0x2164
    96f0:	00 00       	.word 0
Disassembly of section .text:

000016f2 <_init_ajuart>:
uint8_t U1TXbuffer[U1_TX_BUFFER_LENGTH];
uint8_t U1RXbuffer[U1_RX_BUFFER_LENGTH];
uint16_t U1_tx_threshold;

void init_ajuart(void) {
    16f2:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure audio jack UART pins and connect them to UART1
    AJ_TX_DIR = OUT; AJ_TX = 1;
    16f4:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    16f6:	f2 c2 a8    	bset.b    0x2f2, #0x6
    AJ_RX_DIR = IN;
    16f8:	f0 e2 a8    	bset.b    0x2f0, #0x7

    RPOR = (uint8_t *)&RPOR0;
    16fa:	00 6c 20    	mov.w     #0x6c0, w0
    16fc:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    16fe:	00 68 20    	mov.w     #0x680, w0
    1700:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    1702:	11 3a 80    	mov.w     0x742, w1
    1704:	f0 0b 20    	mov.w     #0xbf, w0
    1706:	00 81 60    	and.w     w1, w0, w2
    1708:	60 04 20    	mov.w     #0x46, w0
    170a:	71 05 20    	mov.w     #0x57, w1
    170c:	23 74 20    	mov.w     #0x742, w3
    170e:	80 49 78    	mov.b     w0, [w3]
    1710:	81 49 78    	mov.b     w1, [w3]
    1712:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = AJ_RX_RP;
    1714:	1e 00 90    	mov.w     [w14+2], w0
    1716:	40 02 b0    	add.w     #0x24, w0
    1718:	a1 c1 b3    	mov.b     #0x1a, w1
    171a:	01 48 78    	mov.b     w1, [w0]
    RPOR[AJ_TX_RP] = U1TX_RP;
    171c:	9e 00 78    	mov.w     [w14], w1
    171e:	75 80 40    	add.w     w1, #0x15, w0
    1720:	31 c0 b3    	mov.b     #0x3, w1
    1722:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    1724:	10 3a 80    	mov.w     0x742, w0
    1726:	00 01 78    	mov.w     w0, w2
    1728:	02 60 a0    	bset.w    w2, #0x6
    172a:	60 04 20    	mov.w     #0x46, w0
    172c:	71 05 20    	mov.w     #0x57, w1
    172e:	23 74 20    	mov.w     #0x742, w3
    1730:	80 49 78    	mov.b     w0, [w3]
    1732:	81 49 78    	mov.b     w1, [w3]
    1734:	82 49 78    	mov.b     w2, [w3]

    U1MODE = 0x0008;                // configure UART1 for transmission at
    1736:	80 00 20    	mov.w     #0x8, w0
    1738:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;                 //   115,200 baud, no parity, 1 stop bit
    173a:	20 02 20    	mov.w     #0x22, w0
    173c:	40 11 88    	mov.w     w0, 0x228

    U1_tx_buffer.data = U1TXbuffer;
    173e:	60 81 20    	mov.w     #0x816, w0
    1740:	10 40 88    	mov.w     w0, 0x802
    U1_tx_buffer.length = U1_TX_BUFFER_LENGTH;
    1742:	00 40 20    	mov.w     #0x400, w0
    1744:	20 40 88    	mov.w     w0, 0x804
    U1_tx_buffer.head = 0;
    1746:	00 00 eb    	clr.w     w0
    1748:	30 40 88    	mov.w     w0, 0x806
    U1_tx_buffer.tail = 0;
    174a:	00 00 eb    	clr.w     w0
    174c:	40 40 88    	mov.w     w0, 0x808
    U1_tx_buffer.count = 0;
    174e:	00 00 eb    	clr.w     w0
    1750:	50 40 88    	mov.w     w0, 0x80a
    U1_tx_threshold = 3 * U1_TX_BUFFER_LENGTH / 4;
    1752:	00 30 20    	mov.w     #0x300, w0
    1754:	00 40 88    	mov.w     w0, 0x800

    U1_rx_buffer.data = U1RXbuffer;
    1756:	60 c1 20    	mov.w     #0xc16, w0
    1758:	60 40 88    	mov.w     w0, 0x80c
    U1_rx_buffer.length = U1_RX_BUFFER_LENGTH;
    175a:	00 40 20    	mov.w     #0x400, w0
    175c:	70 40 88    	mov.w     w0, 0x80e
    U1_rx_buffer.head = 0;
    175e:	00 00 eb    	clr.w     w0
    1760:	80 40 88    	mov.w     w0, 0x810
    U1_rx_buffer.tail = 0;
    1762:	00 00 eb    	clr.w     w0
    1764:	90 40 88    	mov.w     w0, 0x812
    U1_rx_buffer.count = 0;
    1766:	00 00 eb    	clr.w     w0
    1768:	a0 40 88    	mov.w     w0, 0x814

    U1STAbits.UTXISEL1 = 0;         // set UART1 UTXISEL<1:0> = 01, TX interrupt
    176a:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;         //   when all transmit operations are done
    176c:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    176e:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;            // enable UART1 TX interrupt
    1770:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    1772:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;            // enable UART1 RX interrupt
    1774:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;          // enable UART1 module
    1776:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
    1778:	23 42 a8    	bset.b    0x223, #0x2
}
    177a:	00 80 fa    	ulnk      
    177c:	00 00 06    	return    

0000177e <_U1_in_waiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
        disable_interrupts();
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
        U1_tx_buffer.head++;
        if (U1_tx_buffer.head == U1_tx_buffer.length)
            U1_tx_buffer.head = 0;
        U1_tx_buffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    177e:	00 00 fa    	lnk       #0x0
    return U1_rx_buffer.count;
    1780:	a0 40 80    	mov.w     0x814, w0
}
    1782:	00 80 fa    	ulnk      
    1784:	00 00 06    	return    

00001786 <_U1_flush_tx_buffer>:

void U1_flush_tx_buffer(void) {
    1786:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    1788:	11 11 80    	mov.w     0x222, w1
    178a:	00 40 20    	mov.w     #0x400, w0
    178c:	00 80 60    	and.w     w1, w0, w0
    178e:	00 00 e0    	cp0.w     w0
    1790:	01 00 3a    	bra       NZ, 0x1794 <.L15>
        U1STAbits.UTXEN = 1;        //   enable it
    1792:	23 42 a8    	bset.b    0x223, #0x2

00001794 <.L15>:
}
    1794:	00 80 fa    	ulnk      
    1796:	00 00 06    	return    

00001798 <_U1_putc>:

void U1_putc(uint8_t ch) {
    1798:	02 00 fa    	lnk       #0x2
    179a:	00 4f 78    	mov.b     w0, [w14]
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}
    179c:	00 00 00    	nop       

0000179e <.L18>:
    179e:	51 40 80    	mov.w     0x80a, w1
    17a0:	20 40 80    	mov.w     0x804, w0
    17a2:	80 8f 50    	sub.w     w1, w0, [w15]
    17a4:	fc ff 32    	bra       Z, 0x179e <.L18>

    disable_interrupts();
    17a6:	ff 3f fc    	disi      #0x3fff
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    17a8:	11 40 80    	mov.w     0x802, w1
    17aa:	40 40 80    	mov.w     0x808, w0
    17ac:	00 80 40    	add.w     w1, w0, w0
    17ae:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    17b0:	40 40 80    	mov.w     0x808, w0
    17b2:	00 00 e8    	inc.w     w0, w0
    17b4:	40 40 88    	mov.w     w0, 0x808
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    17b6:	41 40 80    	mov.w     0x808, w1
    17b8:	20 40 80    	mov.w     0x804, w0
    17ba:	80 8f 50    	sub.w     w1, w0, [w15]
    17bc:	02 00 3a    	bra       NZ, 0x17c2 <.L19>
        U1_tx_buffer.tail = 0;
    17be:	00 00 eb    	clr.w     w0
    17c0:	40 40 88    	mov.w     w0, 0x808

000017c2 <.L19>:
    U1_tx_buffer.count++;
    17c2:	50 40 80    	mov.w     0x80a, w0
    17c4:	00 00 e8    	inc.w     w0, w0
    17c6:	50 40 88    	mov.w     w0, 0x80a
    enable_interrupts();
    17c8:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    17ca:	51 40 80    	mov.w     0x80a, w1
    17cc:	00 40 80    	mov.w     0x800, w0
    17ce:	80 8f 50    	sub.w     w1, w0, [w15]
    17d0:	01 00 39    	bra       NC, 0x17d4 <.L17>
        U1STAbits.UTXEN = 1;
    17d2:	23 42 a8    	bset.b    0x223, #0x2

000017d4 <.L17>:
}
    17d4:	00 80 fa    	ulnk      
    17d6:	00 00 06    	return    

000017d8 <_U1_getc>:

uint8_t U1_getc(void) {
    17d8:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    17da:	00 00 00    	nop       

000017dc <.L22>:
    17dc:	a0 40 80    	mov.w     0x814, w0
    17de:	00 00 e0    	cp0.w     w0
    17e0:	fd ff 32    	bra       Z, 0x17dc <.L22>

    disable_interrupts();
    17e2:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    17e4:	61 40 80    	mov.w     0x80c, w1
    17e6:	80 40 80    	mov.w     0x810, w0
    17e8:	00 80 40    	add.w     w1, w0, w0
    17ea:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    17ec:	80 40 80    	mov.w     0x810, w0
    17ee:	00 00 e8    	inc.w     w0, w0
    17f0:	80 40 88    	mov.w     w0, 0x810
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    17f2:	81 40 80    	mov.w     0x810, w1
    17f4:	70 40 80    	mov.w     0x80e, w0
    17f6:	80 8f 50    	sub.w     w1, w0, [w15]
    17f8:	02 00 3a    	bra       NZ, 0x17fe <.L23>
        U1_rx_buffer.head = 0;
    17fa:	00 00 eb    	clr.w     w0
    17fc:	80 40 88    	mov.w     w0, 0x810

000017fe <.L23>:
    U1_rx_buffer.count--;
    17fe:	a0 40 80    	mov.w     0x814, w0
    1800:	00 00 e9    	dec.w     w0, w0
    1802:	a0 40 88    	mov.w     w0, 0x814
    enable_interrupts();
    1804:	52 20 ef    	clr.w     0x52

    return ch;
    1806:	1e 40 78    	mov.b     [w14], w0
}
    1808:	00 80 fa    	ulnk      
    180a:	00 00 06    	return    

0000180c <_U1_puts>:

void U1_puts(uint8_t *str) {
    180c:	02 00 fa    	lnk       #0x2
    180e:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    1810:	04 00 37    	bra       0x181a <.L25>

00001812 <.L26>:
        U1_putc(*str++);
    1812:	1e 00 78    	mov.w     [w14], w0
    1814:	10 40 78    	mov.b     [w0], w0
    1816:	1e 0f e8    	inc.w     [w14], [w14]
    1818:	bf ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>

0000181a <.L25>:
    181a:	1e 00 78    	mov.w     [w14], w0
    181c:	10 40 78    	mov.b     [w0], w0
    181e:	00 04 e0    	cp0.b     w0
    1820:	f8 ff 3a    	bra       NZ, 0x1812 <.L26>
    U1_flush_tx_buffer();
    1822:	b1 ff 07    	rcall     0x1786 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    1824:	00 80 fa    	ulnk      
    1826:	00 00 06    	return    

00001828 <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    1828:	04 00 fa    	lnk       #0x4
    182a:	00 0f 78    	mov.w     w0, [w14]
    182c:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    182e:	1e 00 90    	mov.w     [w14+2], w0
    1830:	00 00 e0    	cp0.w     w0
    1832:	1a 00 32    	bra       Z, 0x1868 <.L32>
        return;

    if (len == 1) {
    1834:	1e 00 90    	mov.w     [w14+2], w0
    1836:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1838:	04 00 3a    	bra       NZ, 0x1842 <.L30>
        *str = '\0';
    183a:	1e 00 78    	mov.w     [w14], w0
    183c:	80 40 eb    	clr.b     w1
    183e:	01 48 78    	mov.b     w1, [w0]
        return;
    1840:	14 00 37    	bra       0x186a <.L27>

00001842 <.L30>:
    }

    while (1) {
        *str = U1_getc();
    1842:	ca ff 07    	rcall     0x17d8 <_U1_getc> <.LFB6> <.LFE5>
    1844:	9e 00 78    	mov.w     [w14], w1
    1846:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    1848:	1e 00 78    	mov.w     [w14], w0
    184a:	10 40 78    	mov.b     [w0], w0
    184c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    184e:	08 00 32    	bra       Z, 0x1860 <.L31>
    1850:	1e 00 90    	mov.w     [w14+2], w0
    1852:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1854:	05 00 32    	bra       Z, 0x1860 <.L31>
            break;
        str++;
    1856:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    1858:	1e 00 90    	mov.w     [w14+2], w0
    185a:	00 00 e9    	dec.w     w0, w0
    185c:	10 07 98    	mov.w     w0, [w14+2]
    }
    185e:	f1 ff 37    	bra       0x1842 <.L30>

00001860 <.L31>:
    *str = '\0';
    1860:	1e 00 78    	mov.w     [w14], w0
    1862:	80 40 eb    	clr.b     w1
    1864:	01 48 78    	mov.b     w1, [w0]
    1866:	01 00 37    	bra       0x186a <.L27>

00001868 <.L32>:
    1868:	00 00 00    	nop       

0000186a <.L27>:
}
    186a:	00 80 fa    	ulnk      
    186c:	00 00 06    	return    

0000186e <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    186e:	08 00 fa    	lnk       #0x8
    1870:	20 07 98    	mov.w     w0, [w14+4]
    1872:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    1874:	3e 00 90    	mov.w     [w14+6], w0
    1876:	00 00 e0    	cp0.w     w0
    1878:	6f 00 32    	bra       Z, 0x1958 <.L46>
        return;

    if (len == 1) {
    187a:	3e 00 90    	mov.w     [w14+6], w0
    187c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    187e:	04 00 3a    	bra       NZ, 0x1888 <.L36>
        *str = '\0';
    1880:	2e 00 90    	mov.w     [w14+4], w0
    1882:	80 40 eb    	clr.b     w1
    1884:	01 48 78    	mov.b     w1, [w0]
        return;
    1886:	69 00 37    	bra       0x195a <.L33>

00001888 <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    1888:	b0 c1 b3    	mov.b     #0x1b, w0
    188a:	86 ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    188c:	70 c3 b3    	mov.b     #0x37, w0
    188e:	84 ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    1890:	7a ff 07    	rcall     0x1786 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    1892:	ae 00 90    	mov.w     [w14+4], w1
    1894:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    1896:	be 00 90    	mov.w     [w14+6], w1
    1898:	01 0f 78    	mov.w     w1, [w14]
    189a:	03 00 37    	bra       0x18a2 <.L45>

0000189c <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    189c:	00 00 00    	nop       
    189e:	01 00 37    	bra       0x18a2 <.L45>

000018a0 <.L48>:
    18a0:	00 00 00    	nop       

000018a2 <.L45>:
    18a2:	9a ff 07    	rcall     0x17d8 <_U1_getc> <.LFB6> <.LFE5>
    18a4:	ae 00 90    	mov.w     [w14+4], w1
    18a6:	80 48 78    	mov.b     w0, [w1]
    18a8:	2e 00 90    	mov.w     [w14+4], w0
    18aa:	10 40 78    	mov.b     [w0], w0
    18ac:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    18ae:	09 00 3a    	bra       NZ, 0x18c2 <.L37>
    *str = '\0';                            // terminarte the string with null
    18b0:	2e 00 90    	mov.w     [w14+4], w0
    18b2:	80 40 eb    	clr.b     w1
    18b4:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    18b6:	a0 c0 b3    	mov.b     #0xa, w0
    18b8:	6f ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    18ba:	d0 c0 b3    	mov.b     #0xd, w0
    18bc:	6d ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    18be:	63 ff 07    	rcall     0x1786 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    18c0:	4c 00 37    	bra       0x195a <.L33>

000018c2 <.L37>:
    18c2:	2e 00 90    	mov.w     [w14+4], w0
    18c4:	10 40 78    	mov.b     [w0], w0
    18c6:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    18c8:	10 00 3a    	bra       NZ, 0x18ea <.L38>
    18ca:	b0 c1 b3    	mov.b     #0x1b, w0
    18cc:	65 ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    18ce:	80 c3 b3    	mov.b     #0x38, w0
    18d0:	63 ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    18d2:	b0 c1 b3    	mov.b     #0x1b, w0
    18d4:	61 ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    18d6:	b0 c5 b3    	mov.b     #0x5b, w0
    18d8:	5f ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    18da:	b0 c4 b3    	mov.b     #0x4b, w0
    18dc:	5d ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    18de:	53 ff 07    	rcall     0x1786 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    18e0:	9e 00 90    	mov.w     [w14+2], w1
    18e2:	21 07 98    	mov.w     w1, [w14+4]
    18e4:	be 00 90    	mov.w     [w14+6], w1
    18e6:	01 0f 78    	mov.w     w1, [w14]
    18e8:	36 00 37    	bra       0x1956 <.L39>

000018ea <.L38>:
    18ea:	2e 00 90    	mov.w     [w14+4], w0
    18ec:	10 40 78    	mov.b     [w0], w0
    18ee:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    18f0:	05 00 32    	bra       Z, 0x18fc <.L40>
    18f2:	2e 00 90    	mov.w     [w14+4], w0
    18f4:	90 40 78    	mov.b     [w0], w1
    18f6:	f0 c7 b3    	mov.b     #0x7f, w0
    18f8:	80 cf 50    	sub.b     w1, w0, [w15]
    18fa:	14 00 3a    	bra       NZ, 0x1924 <.L41>

000018fc <.L40>:
    18fc:	ae 00 90    	mov.w     [w14+4], w1
    18fe:	1e 00 90    	mov.w     [w14+2], w0
    1900:	80 8f 50    	sub.w     w1, w0, [w15]
    1902:	0c 00 36    	bra       LEU, 0x191c <.L42>
    1904:	80 c0 b3    	mov.b     #0x8, w0
    1906:	48 ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    1908:	00 c2 b3    	mov.b     #0x20, w0
    190a:	46 ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    190c:	80 c0 b3    	mov.b     #0x8, w0
    190e:	44 ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    1910:	3a ff 07    	rcall     0x1786 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1912:	2e 00 90    	mov.w     [w14+4], w0
    1914:	00 00 e9    	dec.w     w0, w0
    1916:	20 07 98    	mov.w     w0, [w14+4]
    1918:	1e 0f e8    	inc.w     [w14], [w14]
    191a:	03 00 37    	bra       0x1922 <.L43>

0000191c <.L42>:
    191c:	70 c0 b3    	mov.b     #0x7, w0
    191e:	3c ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    1920:	32 ff 07    	rcall     0x1786 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

00001922 <.L43>:
    1922:	19 00 37    	bra       0x1956 <.L39>

00001924 <.L41>:
    1924:	1e 00 78    	mov.w     [w14], w0
    1926:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1928:	04 00 3a    	bra       NZ, 0x1932 <.L44>
    192a:	70 c0 b3    	mov.b     #0x7, w0
    192c:	35 ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    192e:	2b ff 07    	rcall     0x1786 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1930:	12 00 37    	bra       0x1956 <.L39>

00001932 <.L44>:
    1932:	2e 00 90    	mov.w     [w14+4], w0
    1934:	10 40 78    	mov.b     [w0], w0
    1936:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    1938:	b1 ff 36    	bra       LEU, 0x189c <.L47>
    193a:	2e 00 90    	mov.w     [w14+4], w0
    193c:	90 40 78    	mov.b     [w0], w1
    193e:	e0 c7 b3    	mov.b     #0x7e, w0
    1940:	80 cf 50    	sub.b     w1, w0, [w15]
    1942:	ae ff 3e    	bra       GTU, 0x18a0 <.L48>
    1944:	2e 00 90    	mov.w     [w14+4], w0
    1946:	10 40 78    	mov.b     [w0], w0
    1948:	27 ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    194a:	1d ff 07    	rcall     0x1786 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    194c:	2e 00 90    	mov.w     [w14+4], w0
    194e:	00 00 e8    	inc.w     w0, w0
    1950:	20 07 98    	mov.w     w0, [w14+4]
    1952:	1e 0f e9    	dec.w     [w14], [w14]
    1954:	a6 ff 37    	bra       0x18a2 <.L45>

00001956 <.L39>:
    1956:	a5 ff 37    	bra       0x18a2 <.L45>

00001958 <.L46>:
    1958:	00 00 00    	nop       

0000195a <.L33>:
}
    195a:	00 80 fa    	ulnk      
    195c:	00 00 06    	return    

0000195e <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    195e:	08 00 fa    	lnk       #0x8
    1960:	10 07 98    	mov.w     w0, [w14+2]
    1962:	21 07 98    	mov.w     w1, [w14+4]
    1964:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    1966:	1e 00 90    	mov.w     [w14+2], w0
    1968:	60 00 40    	add.w     w0, #0x0, w0
    196a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    196c:	10 00 3e    	bra       GTU, 0x198e <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    196e:	00 00 eb    	clr.w     w0
    1970:	00 0f 78    	mov.w     w0, [w14]
    1972:	07 00 37    	bra       0x1982 <.L52>

00001974 <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    1974:	2e 00 90    	mov.w     [w14+4], w0
    1976:	10 40 78    	mov.b     [w0], w0
    1978:	ae 00 90    	mov.w     [w14+4], w1
    197a:	81 00 e8    	inc.w     w1, w1
    197c:	21 07 98    	mov.w     w1, [w14+4]
    197e:	0c ff 07    	rcall     0x1798 <_U1_putc> <.LFB5> <.LFE4>
    1980:	1e 0f e8    	inc.w     [w14], [w14]

00001982 <.L52>:
    1982:	9e 00 78    	mov.w     [w14], w1
    1984:	3e 00 90    	mov.w     [w14+6], w0
    1986:	80 8f 50    	sub.w     w1, w0, [w15]
    1988:	f5 ff 39    	bra       NC, 0x1974 <.L53>
            U1_flush_tx_buffer();
    198a:	fd fe 07    	rcall     0x1786 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    198c:	01 00 37    	bra       0x1990 <.L54>

0000198e <.L55>:
        default:
            break;
    198e:	00 00 00    	nop       

00001990 <.L54>:
    }
    return len;
    1990:	3e 00 90    	mov.w     [w14+6], w0
}
    1992:	00 80 fa    	ulnk      
    1994:	00 00 06    	return    

00001996 <_blocking_delay_us>:
    1996:	04 00 fa    	lnk       #0x4
    1998:	10 07 98    	mov.w     w0, [w14+2]
    199a:	09 00 37    	bra       0x19ae <.L2>

0000199c <.L5>:
    199c:	00 00 eb    	clr.w     w0
    199e:	00 0f 78    	mov.w     w0, [w14]
    19a0:	01 00 37    	bra       0x19a4 <.L3>

000019a2 <.L4>:
    19a2:	1e 0f e8    	inc.w     [w14], [w14]

000019a4 <.L3>:
    19a4:	f0 e7 23    	mov.w     #0x3e7f, w0
    19a6:	9e 00 78    	mov.w     [w14], w1
    19a8:	80 8f 50    	sub.w     w1, w0, [w15]
    19aa:	fb ff 36    	bra       LEU, 0x19a2 <.L4>
    19ac:	00 00 00    	nop       

000019ae <.L2>:
    19ae:	1e 00 90    	mov.w     [w14+2], w0
    19b0:	00 00 e0    	cp0.w     w0
    19b2:	f4 ff 3a    	bra       NZ, 0x199c <.L5>
    19b4:	00 80 fa    	ulnk      
    19b6:	00 00 06    	return    

000019b8 <_i2c_init>:
    19b8:	04 00 fa    	lnk       #0x4
    19ba:	10 07 98    	mov.w     w0, [w14+2]
    19bc:	1e 00 90    	mov.w     [w14+2], w0
    19be:	a0 13 88    	mov.w     w0, 0x274
    19c0:	77 e2 a9    	bclr.b    0x277, #0x7
    19c2:	77 22 a8    	bset.b    0x277, #0x1
    19c4:	8e a0 a9    	bclr.b    0x8e, #0x5
    19c6:	77 e2 a8    	bset.b    0x277, #0x7
    19c8:	80 13 80    	mov.w     0x270, w0
    19ca:	00 0f 78    	mov.w     w0, [w14]
    19cc:	31 00 07    	rcall     0x1a30 <_reset_i2c_bus> <.LFB4> <.LFE3>
    19ce:	00 80 fa    	ulnk      
    19d0:	00 00 06    	return    

000019d2 <_i2c_start>:
    19d2:	02 00 fa    	lnk       #0x2
    19d4:	00 00 eb    	clr.w     w0
    19d6:	00 0f 78    	mov.w     w0, [w14]
    19d8:	76 a2 a9    	bclr.b    0x276, #0x5
    19da:	a0 00 20    	mov.w     #0xa, w0
    19dc:	dc ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    19de:	76 02 a8    	bset.b    0x276, #0x0
    19e0:	00 00 00    	nop       
    19e2:	06 00 37    	bra       0x19f0 <.L8>

000019e4 <.L10>:
    19e4:	10 00 20    	mov.w     #0x1, w0
    19e6:	d7 ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    19e8:	1e 0f e8    	inc.w     [w14], [w14]
    19ea:	1e 00 78    	mov.w     [w14], w0
    19ec:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    19ee:	05 00 3c    	bra       GT, 0x19fa <.L11>

000019f0 <.L8>:
    19f0:	b0 13 80    	mov.w     0x276, w0
    19f2:	61 00 60    	and.w     w0, #0x1, w0
    19f4:	00 00 e0    	cp0.w     w0
    19f6:	f6 ff 3a    	bra       NZ, 0x19e4 <.L10>
    19f8:	01 00 37    	bra       0x19fc <.L9>

000019fa <.L11>:
    19fa:	00 00 00    	nop       

000019fc <.L9>:
    19fc:	20 00 20    	mov.w     #0x2, w0
    19fe:	cb ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1a00:	00 80 fa    	ulnk      
    1a02:	00 00 06    	return    

00001a04 <_i2c_restart>:
    1a04:	02 00 fa    	lnk       #0x2
    1a06:	00 00 eb    	clr.w     w0
    1a08:	00 0f 78    	mov.w     w0, [w14]
    1a0a:	76 22 a8    	bset.b    0x276, #0x1
    1a0c:	00 00 00    	nop       
    1a0e:	06 00 37    	bra       0x1a1c <.L13>

00001a10 <.L15>:
    1a10:	10 00 20    	mov.w     #0x1, w0
    1a12:	c1 ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1a14:	1e 0f e8    	inc.w     [w14], [w14]
    1a16:	1e 00 78    	mov.w     [w14], w0
    1a18:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1a1a:	05 00 3c    	bra       GT, 0x1a26 <.L16>

00001a1c <.L13>:
    1a1c:	b0 13 80    	mov.w     0x276, w0
    1a1e:	62 00 60    	and.w     w0, #0x2, w0
    1a20:	00 00 e0    	cp0.w     w0
    1a22:	f6 ff 3a    	bra       NZ, 0x1a10 <.L15>
    1a24:	01 00 37    	bra       0x1a28 <.L14>

00001a26 <.L16>:
    1a26:	00 00 00    	nop       

00001a28 <.L14>:
    1a28:	20 00 20    	mov.w     #0x2, w0
    1a2a:	b5 ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1a2c:	00 80 fa    	ulnk      
    1a2e:	00 00 06    	return    

00001a30 <_reset_i2c_bus>:
    1a30:	02 00 fa    	lnk       #0x2
    1a32:	00 00 eb    	clr.w     w0
    1a34:	00 0f 78    	mov.w     w0, [w14]
    1a36:	76 42 a8    	bset.b    0x276, #0x2
    1a38:	06 00 37    	bra       0x1a46 <.L18>

00001a3a <.L20>:
    1a3a:	10 00 20    	mov.w     #0x1, w0
    1a3c:	ac ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1a3e:	1e 0f e8    	inc.w     [w14], [w14]
    1a40:	1e 00 78    	mov.w     [w14], w0
    1a42:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1a44:	05 00 3c    	bra       GT, 0x1a50 <.L21>

00001a46 <.L18>:
    1a46:	b0 13 80    	mov.w     0x276, w0
    1a48:	64 00 60    	and.w     w0, #0x4, w0
    1a4a:	00 00 e0    	cp0.w     w0
    1a4c:	f6 ff 3a    	bra       NZ, 0x1a3a <.L20>
    1a4e:	01 00 37    	bra       0x1a52 <.L19>

00001a50 <.L21>:
    1a50:	00 00 00    	nop       

00001a52 <.L19>:
    1a52:	76 62 a9    	bclr.b    0x276, #0x3
    1a54:	8e a0 a9    	bclr.b    0x8e, #0x5
    1a56:	78 e2 a9    	bclr.b    0x278, #0x7
    1a58:	79 42 a9    	bclr.b    0x279, #0x2
    1a5a:	a0 00 20    	mov.w     #0xa, w0
    1a5c:	9c ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1a5e:	00 80 fa    	ulnk      
    1a60:	00 00 06    	return    

00001a62 <_send_i2c_byte>:
    1a62:	04 00 fa    	lnk       #0x4
    1a64:	10 07 98    	mov.w     w0, [w14+2]
    1a66:	00 00 00    	nop       

00001a68 <.L23>:
    1a68:	c0 13 80    	mov.w     0x278, w0
    1a6a:	61 00 60    	and.w     w0, #0x1, w0
    1a6c:	00 00 e0    	cp0.w     w0
    1a6e:	fc ff 3a    	bra       NZ, 0x1a68 <.L23>
    1a70:	8e a0 a9    	bclr.b    0x8e, #0x5
    1a72:	1e 00 90    	mov.w     [w14+2], w0
    1a74:	90 13 88    	mov.w     w0, 0x272
    1a76:	00 00 eb    	clr.w     w0
    1a78:	00 0f 78    	mov.w     w0, [w14]
    1a7a:	08 00 37    	bra       0x1a8c <.L24>

00001a7c <.L27>:
    1a7c:	c1 13 80    	mov.w     0x278, w1
    1a7e:	00 00 24    	mov.w     #0x4000, w0
    1a80:	00 80 60    	and.w     w1, w0, w0
    1a82:	00 00 e0    	cp0.w     w0
    1a84:	08 00 32    	bra       Z, 0x1a96 <.L31>
    1a86:	10 00 20    	mov.w     #0x1, w0
    1a88:	86 ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1a8a:	1e 0f e8    	inc.w     [w14], [w14]

00001a8c <.L24>:
    1a8c:	30 1f 20    	mov.w     #0x1f3, w0
    1a8e:	9e 00 78    	mov.w     [w14], w1
    1a90:	80 8f 50    	sub.w     w1, w0, [w15]
    1a92:	f4 ff 34    	bra       LE, 0x1a7c <.L27>
    1a94:	01 00 37    	bra       0x1a98 <.L26>

00001a96 <.L31>:
    1a96:	00 00 00    	nop       

00001a98 <.L26>:
    1a98:	40 1f 20    	mov.w     #0x1f4, w0
    1a9a:	9e 00 78    	mov.w     [w14], w1
    1a9c:	80 8f 50    	sub.w     w1, w0, [w15]
    1a9e:	02 00 3a    	bra       NZ, 0x1aa4 <.L28>
    1aa0:	10 c0 b3    	mov.b     #0x1, w0
    1aa2:	0b 00 37    	bra       0x1aba <.L29>

00001aa4 <.L28>:
    1aa4:	c1 13 80    	mov.w     0x278, w1
    1aa6:	00 00 28    	mov.w     #0x8000, w0
    1aa8:	00 80 60    	and.w     w1, w0, w0
    1aaa:	00 00 e0    	cp0.w     w0
    1aac:	03 00 32    	bra       Z, 0x1ab4 <.L30>
    1aae:	c0 ff 07    	rcall     0x1a30 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1ab0:	10 c0 b3    	mov.b     #0x1, w0
    1ab2:	03 00 37    	bra       0x1aba <.L29>

00001ab4 <.L30>:
    1ab4:	20 00 20    	mov.w     #0x2, w0
    1ab6:	6f ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1ab8:	00 40 eb    	clr.b     w0

00001aba <.L29>:
    1aba:	00 80 fa    	ulnk      
    1abc:	00 00 06    	return    

00001abe <_i2c_read>:
    1abe:	04 00 fa    	lnk       #0x4
    1ac0:	00 00 eb    	clr.w     w0
    1ac2:	00 0f 78    	mov.w     w0, [w14]
    1ac4:	00 40 eb    	clr.b     w0
    1ac6:	20 47 98    	mov.b     w0, [w14+2]
    1ac8:	76 62 a8    	bset.b    0x276, #0x3
    1aca:	05 00 37    	bra       0x1ad6 <.L33>

00001acc <.L35>:
    1acc:	1e 0f e8    	inc.w     [w14], [w14]
    1ace:	00 7d 20    	mov.w     #0x7d0, w0
    1ad0:	9e 00 78    	mov.w     [w14], w1
    1ad2:	80 8f 50    	sub.w     w1, w0, [w15]
    1ad4:	05 00 3c    	bra       GT, 0x1ae0 <.L36>

00001ad6 <.L33>:
    1ad6:	c0 13 80    	mov.w     0x278, w0
    1ad8:	62 00 60    	and.w     w0, #0x2, w0
    1ada:	00 00 e0    	cp0.w     w0
    1adc:	f7 ff 32    	bra       Z, 0x1acc <.L35>
    1ade:	01 00 37    	bra       0x1ae2 <.L34>

00001ae0 <.L36>:
    1ae0:	00 00 00    	nop       

00001ae2 <.L34>:
    1ae2:	80 13 80    	mov.w     0x270, w0
    1ae4:	20 47 98    	mov.b     w0, [w14+2]
    1ae6:	2e 40 90    	mov.b     [w14+2], w0
    1ae8:	00 80 fa    	ulnk      
    1aea:	00 00 06    	return    

00001aec <_i2c_read_ack>:
    1aec:	04 00 fa    	lnk       #0x4
    1aee:	00 00 eb    	clr.w     w0
    1af0:	00 0f 78    	mov.w     w0, [w14]
    1af2:	00 40 eb    	clr.b     w0
    1af4:	20 47 98    	mov.b     w0, [w14+2]
    1af6:	76 62 a8    	bset.b    0x276, #0x3
    1af8:	05 00 37    	bra       0x1b04 <.L38>

00001afa <.L40>:
    1afa:	1e 0f e8    	inc.w     [w14], [w14]
    1afc:	00 7d 20    	mov.w     #0x7d0, w0
    1afe:	9e 00 78    	mov.w     [w14], w1
    1b00:	80 8f 50    	sub.w     w1, w0, [w15]
    1b02:	05 00 3c    	bra       GT, 0x1b0e <.L41>

00001b04 <.L38>:
    1b04:	c0 13 80    	mov.w     0x278, w0
    1b06:	62 00 60    	and.w     w0, #0x2, w0
    1b08:	00 00 e0    	cp0.w     w0
    1b0a:	f7 ff 32    	bra       Z, 0x1afa <.L40>
    1b0c:	01 00 37    	bra       0x1b10 <.L39>

00001b0e <.L41>:
    1b0e:	00 00 00    	nop       

00001b10 <.L39>:
    1b10:	80 13 80    	mov.w     0x270, w0
    1b12:	20 47 98    	mov.b     w0, [w14+2]
    1b14:	76 82 a8    	bset.b    0x276, #0x4
    1b16:	a0 00 20    	mov.w     #0xa, w0
    1b18:	3e ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1b1a:	2e 40 90    	mov.b     [w14+2], w0
    1b1c:	00 80 fa    	ulnk      
    1b1e:	00 00 06    	return    

00001b20 <_I2Cwrite>:
    1b20:	04 00 fa    	lnk       #0x4
    1b22:	00 4f 78    	mov.b     w0, [w14]
    1b24:	11 47 98    	mov.b     w1, [w14+1]
    1b26:	22 47 98    	mov.b     w2, [w14+2]
    1b28:	54 ff 07    	rcall     0x19d2 <_i2c_start> <.LFB2> <.LFE1>
    1b2a:	1e 00 fb    	se        [w14], w0
    1b2c:	80 00 78    	mov.w     w0, w1
    1b2e:	e0 ff 2f    	mov.w     #0xfffe, w0
    1b30:	00 80 60    	and.w     w1, w0, w0
    1b32:	97 ff 07    	rcall     0x1a62 <_send_i2c_byte> <.LFB5> <.LFE4>
    1b34:	1e 40 90    	mov.b     [w14+1], w0
    1b36:	00 00 fb    	se        w0, w0
    1b38:	94 ff 07    	rcall     0x1a62 <_send_i2c_byte> <.LFB5> <.LFE4>
    1b3a:	2e 40 90    	mov.b     [w14+2], w0
    1b3c:	00 00 fb    	se        w0, w0
    1b3e:	91 ff 07    	rcall     0x1a62 <_send_i2c_byte> <.LFB5> <.LFE4>
    1b40:	77 ff 07    	rcall     0x1a30 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1b42:	00 80 fa    	ulnk      
    1b44:	00 00 06    	return    

00001b46 <_I2Cread>:
    1b46:	04 00 fa    	lnk       #0x4
    1b48:	20 47 98    	mov.b     w0, [w14+2]
    1b4a:	31 47 98    	mov.b     w1, [w14+3]
    1b4c:	42 ff 07    	rcall     0x19d2 <_i2c_start> <.LFB2> <.LFE1>
    1b4e:	2e 40 90    	mov.b     [w14+2], w0
    1b50:	00 00 fb    	se        w0, w0
    1b52:	87 ff 07    	rcall     0x1a62 <_send_i2c_byte> <.LFB5> <.LFE4>
    1b54:	3e 40 90    	mov.b     [w14+3], w0
    1b56:	00 00 fb    	se        w0, w0
    1b58:	84 ff 07    	rcall     0x1a62 <_send_i2c_byte> <.LFB5> <.LFE4>
    1b5a:	a0 00 20    	mov.w     #0xa, w0
    1b5c:	1c ff 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1b5e:	52 ff 07    	rcall     0x1a04 <_i2c_restart> <.LFB3> <.LFE2>
    1b60:	2e 40 90    	mov.b     [w14+2], w0
    1b62:	00 04 a0    	bset.b    w0, #0x0
    1b64:	00 00 fb    	se        w0, w0
    1b66:	7d ff 07    	rcall     0x1a62 <_send_i2c_byte> <.LFB5> <.LFE4>
    1b68:	aa ff 07    	rcall     0x1abe <_i2c_read> <.LFB6> <.LFE5>
    1b6a:	00 4f 78    	mov.b     w0, [w14]
    1b6c:	61 ff 07    	rcall     0x1a30 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1b6e:	1e 40 78    	mov.b     [w14], w0
    1b70:	00 80 fa    	ulnk      
    1b72:	00 00 06    	return    

00001b74 <_I2Cpoll>:
    1b74:	04 00 fa    	lnk       #0x4
    1b76:	20 47 98    	mov.b     w0, [w14+2]
    1b78:	00 40 eb    	clr.b     w0
    1b7a:	00 4f 78    	mov.b     w0, [w14]
    1b7c:	2a ff 07    	rcall     0x19d2 <_i2c_start> <.LFB2> <.LFE1>
    1b7e:	2e 40 90    	mov.b     [w14+2], w0
    1b80:	00 00 fb    	se        w0, w0
    1b82:	80 00 78    	mov.w     w0, w1
    1b84:	e0 ff 2f    	mov.w     #0xfffe, w0
    1b86:	00 80 60    	and.w     w1, w0, w0
    1b88:	6c ff 07    	rcall     0x1a62 <_send_i2c_byte> <.LFB5> <.LFE4>
    1b8a:	00 4f 78    	mov.b     w0, [w14]
    1b8c:	51 ff 07    	rcall     0x1a30 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1b8e:	1e 40 78    	mov.b     [w14], w0
    1b90:	00 80 fa    	ulnk      
    1b92:	00 00 06    	return    

00001b94 <_I2Cwritearray>:
    1b94:	08 00 fa    	lnk       #0x8
    1b96:	20 47 98    	mov.b     w0, [w14+2]
    1b98:	21 07 98    	mov.w     w1, [w14+4]
    1b9a:	62 47 98    	mov.b     w2, [w14+6]
    1b9c:	00 40 eb    	clr.b     w0
    1b9e:	00 4f 78    	mov.b     w0, [w14]
    1ba0:	18 ff 07    	rcall     0x19d2 <_i2c_start> <.LFB2> <.LFE1>
    1ba2:	2e 40 90    	mov.b     [w14+2], w0
    1ba4:	00 00 fb    	se        w0, w0
    1ba6:	80 00 78    	mov.w     w0, w1
    1ba8:	e0 ff 2f    	mov.w     #0xfffe, w0
    1baa:	00 80 60    	and.w     w1, w0, w0
    1bac:	5a ff 07    	rcall     0x1a62 <_send_i2c_byte> <.LFB5> <.LFE4>
    1bae:	00 4f 78    	mov.b     w0, [w14]
    1bb0:	00 40 eb    	clr.b     w0
    1bb2:	10 47 98    	mov.b     w0, [w14+1]
    1bb4:	0d 00 37    	bra       0x1bd0 <.L46>

00001bb6 <.L47>:
    1bb6:	1e 40 90    	mov.b     [w14+1], w0
    1bb8:	00 80 fb    	ze        w0, w0
    1bba:	ae 00 90    	mov.w     [w14+4], w1
    1bbc:	00 80 40    	add.w     w1, w0, w0
    1bbe:	10 40 78    	mov.b     [w0], w0
    1bc0:	00 00 fb    	se        w0, w0
    1bc2:	4f ff 07    	rcall     0x1a62 <_send_i2c_byte> <.LFB5> <.LFE4>
    1bc4:	9e 40 78    	mov.b     [w14], w1
    1bc6:	01 40 70    	ior.b     w0, w1, w0
    1bc8:	00 4f 78    	mov.b     w0, [w14]
    1bca:	1e 40 90    	mov.b     [w14+1], w0
    1bcc:	00 40 e8    	inc.b     w0, w0
    1bce:	10 47 98    	mov.b     w0, [w14+1]

00001bd0 <.L46>:
    1bd0:	9e 40 90    	mov.b     [w14+1], w1
    1bd2:	6e 40 90    	mov.b     [w14+6], w0
    1bd4:	80 cf 50    	sub.b     w1, w0, [w15]
    1bd6:	ef ff 39    	bra       NC, 0x1bb6 <.L47>
    1bd8:	2b ff 07    	rcall     0x1a30 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1bda:	1e 40 78    	mov.b     [w14], w0
    1bdc:	00 80 fa    	ulnk      
    1bde:	00 00 06    	return    
Disassembly of section .isr.text:

00001be0 <__U1TXInterrupt>:
    U1MODEbits.UARTEN = 1;          // enable UART1 module
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
}

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    1be0:	80 9f be    	mov.d     w0, [w15++]
    1be2:	32 00 f8    	push      0x32
    1be4:	34 00 f8    	push      0x34
    1be6:	10 00 20    	mov.w     #0x1, w0
    1be8:	a0 01 88    	mov.w     w0, 0x34
    1bea:	00 20 20    	mov.w     #0x200, w0
    1bec:	90 01 88    	mov.w     w0, 0x32
    1bee:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    1bf0:	85 80 a9    	bclr.b    0x85, #0x4

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
    1bf2:	50 40 80    	mov.w     0x80a, w0
    1bf4:	00 00 e0    	cp0.w     w0
    1bf6:	17 00 3a    	bra       NZ, 0x1c26 <.L8>
        U1STAbits.UTXEN = 0;        //   disable data transmission
    1bf8:	23 42 a9    	bclr.b    0x223, #0x2

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
    1bfa:	16 00 37    	bra       0x1c28 <.L4>

00001bfc <.L7>:
        disable_interrupts();
    1bfc:	ff 3f fc    	disi      #0x3fff
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
    1bfe:	11 40 80    	mov.w     0x802, w1
    1c00:	30 40 80    	mov.w     0x806, w0
    1c02:	00 80 40    	add.w     w1, w0, w0
    1c04:	10 4f 78    	mov.b     [w0], [w14]
        U1_tx_buffer.head++;
    1c06:	30 40 80    	mov.w     0x806, w0
    1c08:	00 00 e8    	inc.w     w0, w0
    1c0a:	30 40 88    	mov.w     w0, 0x806
        if (U1_tx_buffer.head == U1_tx_buffer.length)
    1c0c:	31 40 80    	mov.w     0x806, w1
    1c0e:	20 40 80    	mov.w     0x804, w0
    1c10:	80 8f 50    	sub.w     w1, w0, [w15]
    1c12:	02 00 3a    	bra       NZ, 0x1c18 <.L5>
            U1_tx_buffer.head = 0;
    1c14:	00 00 eb    	clr.w     w0
    1c16:	30 40 88    	mov.w     w0, 0x806

00001c18 <.L5>:
        U1_tx_buffer.count--;
    1c18:	50 40 80    	mov.w     0x80a, w0
    1c1a:	00 00 e9    	dec.w     w0, w0
    1c1c:	50 40 88    	mov.w     w0, 0x80a
        enable_interrupts();
    1c1e:	52 20 ef    	clr.w     0x52
        U1TXREG = (uint16_t)ch;
    1c20:	1e 80 fb    	ze        [w14], w0
    1c22:	20 11 88    	mov.w     w0, 0x224
    1c24:	01 00 37    	bra       0x1c28 <.L4>

00001c26 <.L8>:
    1c26:	00 00 00    	nop       

00001c28 <.L4>:
    1c28:	11 11 80    	mov.w     0x222, w1
    1c2a:	00 20 20    	mov.w     #0x200, w0
    1c2c:	00 80 60    	and.w     w1, w0, w0
    1c2e:	00 00 e0    	cp0.w     w0
    1c30:	03 00 3a    	bra       NZ, 0x1c38 <.L2>
    1c32:	50 40 80    	mov.w     0x80a, w0
    1c34:	00 00 e0    	cp0.w     w0
    1c36:	e2 ff 3a    	bra       NZ, 0x1bfc <.L7>

00001c38 <.L2>:
    }
}
    1c38:	00 80 fa    	ulnk      
    1c3a:	34 00 f9    	pop       0x34

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    return U1_rx_buffer.count;
}

void U1_flush_tx_buffer(void) {
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
        U1STAbits.UTXEN = 1;        //   enable it
}

void U1_putc(uint8_t ch) {
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}

    disable_interrupts();
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    U1_tx_buffer.tail++;
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
        U1_tx_buffer.tail = 0;
    U1_tx_buffer.count++;
    enable_interrupts();

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
        U1STAbits.UTXEN = 1;
}

uint8_t U1_getc(void) {
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}

    disable_interrupts();
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    U1_rx_buffer.head++;
    if (U1_rx_buffer.head == U1_rx_buffer.length)
        U1_rx_buffer.head = 0;
    U1_rx_buffer.count--;
    enable_interrupts();

    return ch;
}

void U1_puts(uint8_t *str) {
    while (*str)
        U1_putc(*str++);
    U1_flush_tx_buffer();
}

void U1_gets(uint8_t *str, uint16_t len) {
    if (len == 0)
        return;

    if (len == 1) {
        *str = '\0';
        return;
    }

    while (1) {
        *str = U1_getc();
        if ((*str == '\r') || (len == 1))
            break;
        str++;
        len--;
    }
    *str = '\0';
}

void U1_gets_term(uint8_t *str, uint16_t len) {
    uint8_t *start;
    uint16_t left;

    if (len == 0)
        return;

    if (len == 1) {
        *str = '\0';
        return;
    }

    U1_putc(0x1B);                          // save current cursor position
    U1_putc('7');
    U1_flush_tx_buffer();
    start = str;
    left = len;
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    *str = '\0';                            // terminarte the string with null
    U1_putc('\n');                          // send newline and
    U1_putc('\r');                          //   carriage return
    U1_flush_tx_buffer();
}

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    int16_t i;

    switch (handle) {
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
                U1_putc(*(uint8_t *)buffer++);
            U1_flush_tx_buffer();
            break;
        default:
            break;
    }
    return len;
}
    1c3c:	32 00 f9    	pop       0x32
    1c3e:	4f 00 be    	mov.d     [--w15], w0
    1c40:	00 40 06    	retfie    

00001c42 <__U1RXInterrupt>:
    1c42:	80 9f be    	mov.d     w0, [w15++]
    1c44:	32 00 f8    	push      0x32
    1c46:	34 00 f8    	push      0x34
    1c48:	10 00 20    	mov.w     #0x1, w0
    1c4a:	a0 01 88    	mov.w     w0, 0x34
    1c4c:	00 20 20    	mov.w     #0x200, w0
    1c4e:	90 01 88    	mov.w     w0, 0x32
    1c50:	00 00 fa    	lnk       #0x0
    1c52:	85 60 a9    	bclr.b    0x85, #0x3
    1c54:	14 00 37    	bra       0x1c7e <.L10>

00001c56 <.L13>:
    1c56:	ff 3f fc    	disi      #0x3fff
    1c58:	61 40 80    	mov.w     0x80c, w1
    1c5a:	90 40 80    	mov.w     0x812, w0
    1c5c:	00 80 40    	add.w     w1, w0, w0
    1c5e:	31 11 80    	mov.w     0x226, w1
    1c60:	81 40 78    	mov.b     w1, w1
    1c62:	01 48 78    	mov.b     w1, [w0]
    1c64:	90 40 80    	mov.w     0x812, w0
    1c66:	00 00 e8    	inc.w     w0, w0
    1c68:	90 40 88    	mov.w     w0, 0x812
    1c6a:	91 40 80    	mov.w     0x812, w1
    1c6c:	70 40 80    	mov.w     0x80e, w0
    1c6e:	80 8f 50    	sub.w     w1, w0, [w15]
    1c70:	02 00 3a    	bra       NZ, 0x1c76 <.L11>
    1c72:	00 00 eb    	clr.w     w0
    1c74:	90 40 88    	mov.w     w0, 0x812

00001c76 <.L11>:
    1c76:	a0 40 80    	mov.w     0x814, w0
    1c78:	00 00 e8    	inc.w     w0, w0
    1c7a:	a0 40 88    	mov.w     w0, 0x814
    1c7c:	52 20 ef    	clr.w     0x52

00001c7e <.L10>:
    1c7e:	10 11 80    	mov.w     0x222, w0
    1c80:	61 00 60    	and.w     w0, #0x1, w0
    1c82:	00 00 e0    	cp0.w     w0
    1c84:	04 00 32    	bra       Z, 0x1c8e <.L9>
    1c86:	a1 40 80    	mov.w     0x814, w1
    1c88:	70 40 80    	mov.w     0x80e, w0
    1c8a:	80 8f 50    	sub.w     w1, w0, [w15]
    1c8c:	e4 ff 3a    	bra       NZ, 0x1c56 <.L13>

00001c8e <.L9>:
    1c8e:	00 80 fa    	ulnk      
    1c90:	34 00 f9    	pop       0x34
    1c92:	32 00 f9    	pop       0x32
    1c94:	4f 00 be    	mov.d     [--w15], w0
    1c96:	00 40 06    	retfie    
Disassembly of section .dinit:

00001c98 <.dinit>:
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}
    1c98:	02 08 00    	nop       
    1c9a:	14 08 00    	nop       
    1c9c:	80 00 00    	nop       
    1c9e:	00 08 00    	nop       
    1ca0:	02 00 00    	nop       
    1ca2:	80 00 00    	nop       
    1ca4:	16 10 00    	nop       
    1ca6:	88 00 00    	nop       
    1ca8:	82 00 00    	nop       
    1caa:	01 00 00    	nop       
    1cac:	00 3c 10    	.pword 0x103c00
    1cae:	3d 10 3c    	bra       GT, 0x3d2a
    1cb0:	10 3c 10    	.pword 0x103c10
    1cb2:	3c 10 3c    	bra       GT, 0x3d2c
    1cb4:	10 2c 10    	subr.w    w0, [w0], [++w8]
	...
    1cc4:	00 02 08    	do        #0x200, 0x1eca
    1cc6:	01 01 64 
    1cc8:	10 65 10    	subr.b    w0, [w0], [--w10]
    1cca:	64 10 64    	and.w     w8, #0x4, [w0--]
    1ccc:	10 64 10    	subr.b    w0, [w0], [--w8]
    1cce:	64 10 54    	sub.w     w8, #0x4, [w0--]
    1cd0:	10 00 00    	nop       
	...
    1cde:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207e218>
    1ce0:	08 02 02 
    1ce2:	8c 10 8d    	mov.w     w12, 0xa210
    1ce4:	10 8c 10    	subr.w    w1, [w0], [w8]
    1ce6:	8c 10 8c    	mov.w     w12, 0x8210
    1ce8:	10 8c 10    	subr.w    w1, [w0], [w8]
    1cea:	7c 10 00    	nop       
	...
    1cfa:	16 10 3e    	bra       GTU, 0x3d28
    1cfc:	10 66 10    	subr.b    w0, [w0], [--w12]
	...
    1d06:	a2 10 00    	nop       
    1d08:	02 00 00    	nop       
    1d0a:	80 00 00    	nop       
    1d0c:	a4 10 00    	nop       
    1d0e:	02 00 00    	nop       
    1d10:	82 00 00    	nop       
    1d12:	04 00 00    	nop       
    1d14:	9e 10 00    	nop       
    1d16:	04 00 00    	nop       
    1d18:	80 00 00    	nop       
    1d1a:	a6 10 00    	nop       
    1d1c:	02 00 00    	nop       
    1d1e:	80 00 00    	nop       
    1d20:	00 00 00    	nop       
Disassembly of section .text:

00001d22 <_init_elecanisms>:
    1d22:	00 00 fa    	lnk       #0x0
    1d24:	00 10 20    	mov.w     #0x100, w0
    1d26:	20 3a 88    	mov.w     w0, 0x744
    1d28:	d8 a2 a8    	bset.b    0x2d8, #0x5
    1d2a:	d8 82 a8    	bset.b    0x2d8, #0x4
    1d2c:	e8 82 a8    	bset.b    0x2e8, #0x4
    1d2e:	e8 a2 a8    	bset.b    0x2e8, #0x5
    1d30:	c9 e2 a8    	bset.b    0x2c9, #0x7
    1d32:	e8 62 a8    	bset.b    0x2e8, #0x3
    1d34:	d9 02 a8    	bset.b    0x2d9, #0x0
    1d36:	d9 62 a8    	bset.b    0x2d9, #0x3
    1d38:	d9 22 a8    	bset.b    0x2d9, #0x1
    1d3a:	d9 42 a8    	bset.b    0x2d9, #0x2
    1d3c:	d8 02 a8    	bset.b    0x2d8, #0x0
    1d3e:	d8 22 a8    	bset.b    0x2d8, #0x1
    1d40:	d8 42 a8    	bset.b    0x2d8, #0x2
    1d42:	d8 62 a8    	bset.b    0x2d8, #0x3
    1d44:	c8 a2 a8    	bset.b    0x2c8, #0x5
    1d46:	c8 82 a8    	bset.b    0x2c8, #0x4
    1d48:	c8 62 a8    	bset.b    0x2c8, #0x3
    1d4a:	c8 42 a8    	bset.b    0x2c8, #0x2
    1d4c:	c8 22 a8    	bset.b    0x2c8, #0x1
    1d4e:	c8 02 a8    	bset.b    0x2c8, #0x0
    A4_DIR = IN;
    A5_DIR = IN;

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    1d50:	f0 03 20    	mov.w     #0x3f, w0
    1d52:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    1d54:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    1d56:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    1d58:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    1d5a:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    1d5c:	00 0e 20    	mov.w     #0xe0, w0
    1d5e:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    1d60:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    1d62:	00 c4 20    	mov.w     #0xc40, w0
    1d64:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    1d66:	50 00 20    	mov.w     #0x5, w0
    1d68:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    1d6a:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    1d6c:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    1d6e:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    1d70:	e8 02 a9    	bclr.b    0x2e8, #0x0
    1d72:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    1d74:	e8 22 a9    	bclr.b    0x2e8, #0x1
    1d76:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    1d78:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    1d7a:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    1d7c:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    1d7e:	00 80 fa    	ulnk      
    1d80:	00 00 06    	return    

00001d82 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    1d82:	02 00 fa    	lnk       #0x2
    1d84:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    1d86:	9e 00 78    	mov.w     [w14], w1
    1d88:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    1d8a:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    1d8c:	00 00 00    	nop       

00001d8e <.L3>:
    1d8e:	00 19 80    	mov.w     0x320, w0
    1d90:	61 00 60    	and.w     w0, #0x1, w0
    1d92:	00 00 e0    	cp0.w     w0
    1d94:	fc ff 32    	bra       Z, 0x1d8e <.L3>
    return ADC1BUF0;
    1d96:	00 18 80    	mov.w     0x300, w0
}
    1d98:	00 80 fa    	ulnk      
    1d9a:	00 00 06    	return    

00001d9c <_main>:
    1d9c:	0e 00 fa    	lnk       #0xe
    1d9e:	c1 ff 07    	rcall     0x1d22 <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    1da0:	d0 09 20    	mov.w     #0x9d, w0
    1da2:	0a fe 07    	rcall     0x19b8 <_i2c_init> <.LFB1> <.LFE0>
    1da4:	40 6e 29    	mov.w     #0x96e4, w0
    1da6:	e1 00 47    	add.w     w14, #0x1, w1
    1da8:	0c 00 09    	repeat    #0xc
    1daa:	b0 58 78    	mov.b     [w0++], [w1++]
    1dac:	d0 00 b1    	sub.w     #0xd, w0
    1dae:	d0 c0 b3    	mov.b     #0xd, w0
    1db0:	00 4f 78    	mov.b     w0, [w14]
    1db2:	ec 22 a8    	bset.b    0x2ec, #0x1

00001db4 <.L2>:
    1db4:	c0 6c 29    	mov.w     #0x96cc, w0
    1db6:	66 fa 07    	rcall     0x1284 <_puts>
    1db8:	e1 16 80    	mov.w     0x2dc, w1
    1dba:	00 08 20    	mov.w     #0x80, w0
    1dbc:	00 80 60    	and.w     w1, w0, w0
    1dbe:	00 f0 a7    	btsc.w    w0, #0xf
    1dc0:	00 00 ea    	neg.w     w0, w0
    1dc2:	00 00 e9    	dec.w     w0, w0
    1dc4:	4f 00 de    	lsr.w     w0, #0xf, w0
    1dc6:	00 40 78    	mov.b     w0, w0
    1dc8:	00 80 fb    	ze        w0, w0
    1dca:	61 00 60    	and.w     w0, #0x1, w0
    1dcc:	47 00 dd    	sl.w      w0, #0x7, w0
    1dce:	e2 16 80    	mov.w     0x2dc, w2
    1dd0:	f1 f7 2f    	mov.w     #0xff7f, w1
    1dd2:	81 00 61    	and.w     w2, w1, w1
    1dd4:	01 00 70    	ior.w     w0, w1, w0
    1dd6:	e0 16 88    	mov.w     w0, 0x2dc
    1dd8:	0e 00 e8    	inc.w     w14, w0
    1dda:	1e 41 78    	mov.b     [w14], w2
    1ddc:	80 00 78    	mov.w     w0, w1
    1dde:	00 c7 b3    	mov.b     #0x70, w0
    1de0:	d9 fe 07    	rcall     0x1b94 <_I2Cwritearray> <.LFB11> <.LFE10>
    1de2:	00 71 22    	mov.w     #0x2710, w0
    1de4:	d8 fd 07    	rcall     0x1996 <_blocking_delay_us> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1de6:	e6 ff 37    	bra       0x1db4 <.L2>
Disassembly of section .isr:

00001de8 <__DefaultInterrupt>:
    1de8:	00 40 da    	break     
    1dea:	00 00 fe    	reset     
