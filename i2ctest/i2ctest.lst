
i2ctest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	90 18 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	90 18 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	90 18 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	90 18 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	90 18 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	90 18 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	90 18 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	90 18 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	90 18 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	90 18 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	90 18 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	90 18 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	90 18 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	90 18 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	90 18 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	90 18 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	90 18 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	90 18 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	90 18 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	90 18 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	90 18 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	90 18 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	90 18 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	90 18 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	90 18 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	90 18 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	90 18 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	90 18 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	90 18 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	90 18 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	90 18 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	90 18 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	90 18 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	90 18 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	90 18 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	90 18 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	90 18 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	90 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	90 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	90 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	90 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	90 18 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	90 18 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	90 18 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	90 18 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	90 18 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	90 18 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	90 18 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	90 18 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	90 18 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	90 18 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	90 18 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	90 18 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	90 18 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	90 18 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	90 18 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	90 18 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	90 18 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	90 18 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	90 18 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	90 18 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	90 18 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	90 18 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	90 18 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	90 18 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	90 18 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	90 18 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	90 18 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	90 18 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	90 18 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	6f 01 21    	mov.w     #0x1016, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	77 00 07    	rcall     0x1214 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	20 88 21    	mov.w     #0x1882, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	56 18 02    	call      0x1856 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	80 00 20    	mov.w     #0x8, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <__crt_start_mode>:
    1214:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	6e 17 04    	goto      0x176e <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	0c 17 04    	goto      0x170c <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	90 18 04    	goto      0x1890 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009216 <.LC0>:
    9216:	69 6d       	.word 0x6d69
    9218:	69 79       	.word 0x7969
    921a:	7d 79       	.word 0x797d
    921c:	00 00       	.word 0
Disassembly of section .text:

0000121e <_init_ajuart>:
uint8_t U1TXbuffer[U1_TX_BUFFER_LENGTH];
uint8_t U1RXbuffer[U1_RX_BUFFER_LENGTH];
uint16_t U1_tx_threshold;

void init_ajuart(void) {
    121e:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure audio jack UART pins and connect them to UART1
    AJ_TX_DIR = OUT; AJ_TX = 1;
    1220:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    1222:	f2 c2 a8    	bset.b    0x2f2, #0x6
    AJ_RX_DIR = IN;
    1224:	f0 e2 a8    	bset.b    0x2f0, #0x7

    RPOR = (uint8_t *)&RPOR0;
    1226:	00 6c 20    	mov.w     #0x6c0, w0
    1228:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    122a:	00 68 20    	mov.w     #0x680, w0
    122c:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    122e:	11 3a 80    	mov.w     0x742, w1
    1230:	f0 0b 20    	mov.w     #0xbf, w0
    1232:	00 81 60    	and.w     w1, w0, w2
    1234:	60 04 20    	mov.w     #0x46, w0
    1236:	71 05 20    	mov.w     #0x57, w1
    1238:	23 74 20    	mov.w     #0x742, w3
    123a:	80 49 78    	mov.b     w0, [w3]
    123c:	81 49 78    	mov.b     w1, [w3]
    123e:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = AJ_RX_RP;
    1240:	1e 00 90    	mov.w     [w14+2], w0
    1242:	40 02 b0    	add.w     #0x24, w0
    1244:	a1 c1 b3    	mov.b     #0x1a, w1
    1246:	01 48 78    	mov.b     w1, [w0]
    RPOR[AJ_TX_RP] = U1TX_RP;
    1248:	9e 00 78    	mov.w     [w14], w1
    124a:	75 80 40    	add.w     w1, #0x15, w0
    124c:	31 c0 b3    	mov.b     #0x3, w1
    124e:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    1250:	10 3a 80    	mov.w     0x742, w0
    1252:	00 01 78    	mov.w     w0, w2
    1254:	02 60 a0    	bset.w    w2, #0x6
    1256:	60 04 20    	mov.w     #0x46, w0
    1258:	71 05 20    	mov.w     #0x57, w1
    125a:	23 74 20    	mov.w     #0x742, w3
    125c:	80 49 78    	mov.b     w0, [w3]
    125e:	81 49 78    	mov.b     w1, [w3]
    1260:	82 49 78    	mov.b     w2, [w3]

    U1MODE = 0x0008;                // configure UART1 for transmission at
    1262:	80 00 20    	mov.w     #0x8, w0
    1264:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;                 //   115,200 baud, no parity, 1 stop bit
    1266:	20 02 20    	mov.w     #0x22, w0
    1268:	40 11 88    	mov.w     w0, 0x228

    U1_tx_buffer.data = U1TXbuffer;
    126a:	60 81 20    	mov.w     #0x816, w0
    126c:	10 40 88    	mov.w     w0, 0x802
    U1_tx_buffer.length = U1_TX_BUFFER_LENGTH;
    126e:	00 40 20    	mov.w     #0x400, w0
    1270:	20 40 88    	mov.w     w0, 0x804
    U1_tx_buffer.head = 0;
    1272:	00 00 eb    	clr.w     w0
    1274:	30 40 88    	mov.w     w0, 0x806
    U1_tx_buffer.tail = 0;
    1276:	00 00 eb    	clr.w     w0
    1278:	40 40 88    	mov.w     w0, 0x808
    U1_tx_buffer.count = 0;
    127a:	00 00 eb    	clr.w     w0
    127c:	50 40 88    	mov.w     w0, 0x80a
    U1_tx_threshold = 3 * U1_TX_BUFFER_LENGTH / 4;
    127e:	00 30 20    	mov.w     #0x300, w0
    1280:	00 40 88    	mov.w     w0, 0x800

    U1_rx_buffer.data = U1RXbuffer;
    1282:	60 c1 20    	mov.w     #0xc16, w0
    1284:	60 40 88    	mov.w     w0, 0x80c
    U1_rx_buffer.length = U1_RX_BUFFER_LENGTH;
    1286:	00 40 20    	mov.w     #0x400, w0
    1288:	70 40 88    	mov.w     w0, 0x80e
    U1_rx_buffer.head = 0;
    128a:	00 00 eb    	clr.w     w0
    128c:	80 40 88    	mov.w     w0, 0x810
    U1_rx_buffer.tail = 0;
    128e:	00 00 eb    	clr.w     w0
    1290:	90 40 88    	mov.w     w0, 0x812
    U1_rx_buffer.count = 0;
    1292:	00 00 eb    	clr.w     w0
    1294:	a0 40 88    	mov.w     w0, 0x814

    U1STAbits.UTXISEL1 = 0;         // set UART1 UTXISEL<1:0> = 01, TX interrupt
    1296:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;         //   when all transmit operations are done
    1298:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    129a:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;            // enable UART1 TX interrupt
    129c:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    129e:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;            // enable UART1 RX interrupt
    12a0:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;          // enable UART1 module
    12a2:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
    12a4:	23 42 a8    	bset.b    0x223, #0x2
}
    12a6:	00 80 fa    	ulnk      
    12a8:	00 00 06    	return    

000012aa <_U1_in_waiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
        disable_interrupts();
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
        U1_tx_buffer.head++;
        if (U1_tx_buffer.head == U1_tx_buffer.length)
            U1_tx_buffer.head = 0;
        U1_tx_buffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    12aa:	00 00 fa    	lnk       #0x0
    return U1_rx_buffer.count;
    12ac:	a0 40 80    	mov.w     0x814, w0
}
    12ae:	00 80 fa    	ulnk      
    12b0:	00 00 06    	return    

000012b2 <_U1_flush_tx_buffer>:

void U1_flush_tx_buffer(void) {
    12b2:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    12b4:	11 11 80    	mov.w     0x222, w1
    12b6:	00 40 20    	mov.w     #0x400, w0
    12b8:	00 80 60    	and.w     w1, w0, w0
    12ba:	00 00 e0    	cp0.w     w0
    12bc:	01 00 3a    	bra       NZ, 0x12c0 <.L15>
        U1STAbits.UTXEN = 1;        //   enable it
    12be:	23 42 a8    	bset.b    0x223, #0x2

000012c0 <.L15>:
}
    12c0:	00 80 fa    	ulnk      
    12c2:	00 00 06    	return    

000012c4 <_U1_putc>:

void U1_putc(uint8_t ch) {
    12c4:	02 00 fa    	lnk       #0x2
    12c6:	00 4f 78    	mov.b     w0, [w14]
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}
    12c8:	00 00 00    	nop       

000012ca <.L18>:
    12ca:	51 40 80    	mov.w     0x80a, w1
    12cc:	20 40 80    	mov.w     0x804, w0
    12ce:	80 8f 50    	sub.w     w1, w0, [w15]
    12d0:	fc ff 32    	bra       Z, 0x12ca <.L18>

    disable_interrupts();
    12d2:	ff 3f fc    	disi      #0x3fff
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    12d4:	11 40 80    	mov.w     0x802, w1
    12d6:	40 40 80    	mov.w     0x808, w0
    12d8:	00 80 40    	add.w     w1, w0, w0
    12da:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    12dc:	40 40 80    	mov.w     0x808, w0
    12de:	00 00 e8    	inc.w     w0, w0
    12e0:	40 40 88    	mov.w     w0, 0x808
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    12e2:	41 40 80    	mov.w     0x808, w1
    12e4:	20 40 80    	mov.w     0x804, w0
    12e6:	80 8f 50    	sub.w     w1, w0, [w15]
    12e8:	02 00 3a    	bra       NZ, 0x12ee <.L19>
        U1_tx_buffer.tail = 0;
    12ea:	00 00 eb    	clr.w     w0
    12ec:	40 40 88    	mov.w     w0, 0x808

000012ee <.L19>:
    U1_tx_buffer.count++;
    12ee:	50 40 80    	mov.w     0x80a, w0
    12f0:	00 00 e8    	inc.w     w0, w0
    12f2:	50 40 88    	mov.w     w0, 0x80a
    enable_interrupts();
    12f4:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    12f6:	51 40 80    	mov.w     0x80a, w1
    12f8:	00 40 80    	mov.w     0x800, w0
    12fa:	80 8f 50    	sub.w     w1, w0, [w15]
    12fc:	01 00 39    	bra       NC, 0x1300 <.L17>
        U1STAbits.UTXEN = 1;
    12fe:	23 42 a8    	bset.b    0x223, #0x2

00001300 <.L17>:
}
    1300:	00 80 fa    	ulnk      
    1302:	00 00 06    	return    

00001304 <_U1_getc>:

uint8_t U1_getc(void) {
    1304:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    1306:	00 00 00    	nop       

00001308 <.L22>:
    1308:	a0 40 80    	mov.w     0x814, w0
    130a:	00 00 e0    	cp0.w     w0
    130c:	fd ff 32    	bra       Z, 0x1308 <.L22>

    disable_interrupts();
    130e:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    1310:	61 40 80    	mov.w     0x80c, w1
    1312:	80 40 80    	mov.w     0x810, w0
    1314:	00 80 40    	add.w     w1, w0, w0
    1316:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    1318:	80 40 80    	mov.w     0x810, w0
    131a:	00 00 e8    	inc.w     w0, w0
    131c:	80 40 88    	mov.w     w0, 0x810
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    131e:	81 40 80    	mov.w     0x810, w1
    1320:	70 40 80    	mov.w     0x80e, w0
    1322:	80 8f 50    	sub.w     w1, w0, [w15]
    1324:	02 00 3a    	bra       NZ, 0x132a <.L23>
        U1_rx_buffer.head = 0;
    1326:	00 00 eb    	clr.w     w0
    1328:	80 40 88    	mov.w     w0, 0x810

0000132a <.L23>:
    U1_rx_buffer.count--;
    132a:	a0 40 80    	mov.w     0x814, w0
    132c:	00 00 e9    	dec.w     w0, w0
    132e:	a0 40 88    	mov.w     w0, 0x814
    enable_interrupts();
    1330:	52 20 ef    	clr.w     0x52

    return ch;
    1332:	1e 40 78    	mov.b     [w14], w0
}
    1334:	00 80 fa    	ulnk      
    1336:	00 00 06    	return    

00001338 <_U1_puts>:

void U1_puts(uint8_t *str) {
    1338:	02 00 fa    	lnk       #0x2
    133a:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    133c:	04 00 37    	bra       0x1346 <.L25>

0000133e <.L26>:
        U1_putc(*str++);
    133e:	1e 00 78    	mov.w     [w14], w0
    1340:	10 40 78    	mov.b     [w0], w0
    1342:	1e 0f e8    	inc.w     [w14], [w14]
    1344:	bf ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>

00001346 <.L25>:
    1346:	1e 00 78    	mov.w     [w14], w0
    1348:	10 40 78    	mov.b     [w0], w0
    134a:	00 04 e0    	cp0.b     w0
    134c:	f8 ff 3a    	bra       NZ, 0x133e <.L26>
    U1_flush_tx_buffer();
    134e:	b1 ff 07    	rcall     0x12b2 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    1350:	00 80 fa    	ulnk      
    1352:	00 00 06    	return    

00001354 <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    1354:	04 00 fa    	lnk       #0x4
    1356:	00 0f 78    	mov.w     w0, [w14]
    1358:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    135a:	1e 00 90    	mov.w     [w14+2], w0
    135c:	00 00 e0    	cp0.w     w0
    135e:	1a 00 32    	bra       Z, 0x1394 <.L32>
        return;

    if (len == 1) {
    1360:	1e 00 90    	mov.w     [w14+2], w0
    1362:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1364:	04 00 3a    	bra       NZ, 0x136e <.L30>
        *str = '\0';
    1366:	1e 00 78    	mov.w     [w14], w0
    1368:	80 40 eb    	clr.b     w1
    136a:	01 48 78    	mov.b     w1, [w0]
        return;
    136c:	14 00 37    	bra       0x1396 <.L27>

0000136e <.L30>:
    }

    while (1) {
        *str = U1_getc();
    136e:	ca ff 07    	rcall     0x1304 <_U1_getc> <.LFB6> <.LFE5>
    1370:	9e 00 78    	mov.w     [w14], w1
    1372:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    1374:	1e 00 78    	mov.w     [w14], w0
    1376:	10 40 78    	mov.b     [w0], w0
    1378:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    137a:	08 00 32    	bra       Z, 0x138c <.L31>
    137c:	1e 00 90    	mov.w     [w14+2], w0
    137e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1380:	05 00 32    	bra       Z, 0x138c <.L31>
            break;
        str++;
    1382:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    1384:	1e 00 90    	mov.w     [w14+2], w0
    1386:	00 00 e9    	dec.w     w0, w0
    1388:	10 07 98    	mov.w     w0, [w14+2]
    }
    138a:	f1 ff 37    	bra       0x136e <.L30>

0000138c <.L31>:
    *str = '\0';
    138c:	1e 00 78    	mov.w     [w14], w0
    138e:	80 40 eb    	clr.b     w1
    1390:	01 48 78    	mov.b     w1, [w0]
    1392:	01 00 37    	bra       0x1396 <.L27>

00001394 <.L32>:
    1394:	00 00 00    	nop       

00001396 <.L27>:
}
    1396:	00 80 fa    	ulnk      
    1398:	00 00 06    	return    

0000139a <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    139a:	08 00 fa    	lnk       #0x8
    139c:	20 07 98    	mov.w     w0, [w14+4]
    139e:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    13a0:	3e 00 90    	mov.w     [w14+6], w0
    13a2:	00 00 e0    	cp0.w     w0
    13a4:	6f 00 32    	bra       Z, 0x1484 <.L46>
        return;

    if (len == 1) {
    13a6:	3e 00 90    	mov.w     [w14+6], w0
    13a8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    13aa:	04 00 3a    	bra       NZ, 0x13b4 <.L36>
        *str = '\0';
    13ac:	2e 00 90    	mov.w     [w14+4], w0
    13ae:	80 40 eb    	clr.b     w1
    13b0:	01 48 78    	mov.b     w1, [w0]
        return;
    13b2:	69 00 37    	bra       0x1486 <.L33>

000013b4 <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    13b4:	b0 c1 b3    	mov.b     #0x1b, w0
    13b6:	86 ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    13b8:	70 c3 b3    	mov.b     #0x37, w0
    13ba:	84 ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    13bc:	7a ff 07    	rcall     0x12b2 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    13be:	ae 00 90    	mov.w     [w14+4], w1
    13c0:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    13c2:	be 00 90    	mov.w     [w14+6], w1
    13c4:	01 0f 78    	mov.w     w1, [w14]
    13c6:	03 00 37    	bra       0x13ce <.L45>

000013c8 <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    13c8:	00 00 00    	nop       
    13ca:	01 00 37    	bra       0x13ce <.L45>

000013cc <.L48>:
    13cc:	00 00 00    	nop       

000013ce <.L45>:
    13ce:	9a ff 07    	rcall     0x1304 <_U1_getc> <.LFB6> <.LFE5>
    13d0:	ae 00 90    	mov.w     [w14+4], w1
    13d2:	80 48 78    	mov.b     w0, [w1]
    13d4:	2e 00 90    	mov.w     [w14+4], w0
    13d6:	10 40 78    	mov.b     [w0], w0
    13d8:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    13da:	09 00 3a    	bra       NZ, 0x13ee <.L37>
    *str = '\0';                            // terminarte the string with null
    13dc:	2e 00 90    	mov.w     [w14+4], w0
    13de:	80 40 eb    	clr.b     w1
    13e0:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    13e2:	a0 c0 b3    	mov.b     #0xa, w0
    13e4:	6f ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    13e6:	d0 c0 b3    	mov.b     #0xd, w0
    13e8:	6d ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    13ea:	63 ff 07    	rcall     0x12b2 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    13ec:	4c 00 37    	bra       0x1486 <.L33>

000013ee <.L37>:
    13ee:	2e 00 90    	mov.w     [w14+4], w0
    13f0:	10 40 78    	mov.b     [w0], w0
    13f2:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    13f4:	10 00 3a    	bra       NZ, 0x1416 <.L38>
    13f6:	b0 c1 b3    	mov.b     #0x1b, w0
    13f8:	65 ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    13fa:	80 c3 b3    	mov.b     #0x38, w0
    13fc:	63 ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    13fe:	b0 c1 b3    	mov.b     #0x1b, w0
    1400:	61 ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    1402:	b0 c5 b3    	mov.b     #0x5b, w0
    1404:	5f ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    1406:	b0 c4 b3    	mov.b     #0x4b, w0
    1408:	5d ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    140a:	53 ff 07    	rcall     0x12b2 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    140c:	9e 00 90    	mov.w     [w14+2], w1
    140e:	21 07 98    	mov.w     w1, [w14+4]
    1410:	be 00 90    	mov.w     [w14+6], w1
    1412:	01 0f 78    	mov.w     w1, [w14]
    1414:	36 00 37    	bra       0x1482 <.L39>

00001416 <.L38>:
    1416:	2e 00 90    	mov.w     [w14+4], w0
    1418:	10 40 78    	mov.b     [w0], w0
    141a:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    141c:	05 00 32    	bra       Z, 0x1428 <.L40>
    141e:	2e 00 90    	mov.w     [w14+4], w0
    1420:	90 40 78    	mov.b     [w0], w1
    1422:	f0 c7 b3    	mov.b     #0x7f, w0
    1424:	80 cf 50    	sub.b     w1, w0, [w15]
    1426:	14 00 3a    	bra       NZ, 0x1450 <.L41>

00001428 <.L40>:
    1428:	ae 00 90    	mov.w     [w14+4], w1
    142a:	1e 00 90    	mov.w     [w14+2], w0
    142c:	80 8f 50    	sub.w     w1, w0, [w15]
    142e:	0c 00 36    	bra       LEU, 0x1448 <.L42>
    1430:	80 c0 b3    	mov.b     #0x8, w0
    1432:	48 ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    1434:	00 c2 b3    	mov.b     #0x20, w0
    1436:	46 ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    1438:	80 c0 b3    	mov.b     #0x8, w0
    143a:	44 ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    143c:	3a ff 07    	rcall     0x12b2 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    143e:	2e 00 90    	mov.w     [w14+4], w0
    1440:	00 00 e9    	dec.w     w0, w0
    1442:	20 07 98    	mov.w     w0, [w14+4]
    1444:	1e 0f e8    	inc.w     [w14], [w14]
    1446:	03 00 37    	bra       0x144e <.L43>

00001448 <.L42>:
    1448:	70 c0 b3    	mov.b     #0x7, w0
    144a:	3c ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    144c:	32 ff 07    	rcall     0x12b2 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

0000144e <.L43>:
    144e:	19 00 37    	bra       0x1482 <.L39>

00001450 <.L41>:
    1450:	1e 00 78    	mov.w     [w14], w0
    1452:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1454:	04 00 3a    	bra       NZ, 0x145e <.L44>
    1456:	70 c0 b3    	mov.b     #0x7, w0
    1458:	35 ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    145a:	2b ff 07    	rcall     0x12b2 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    145c:	12 00 37    	bra       0x1482 <.L39>

0000145e <.L44>:
    145e:	2e 00 90    	mov.w     [w14+4], w0
    1460:	10 40 78    	mov.b     [w0], w0
    1462:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    1464:	b1 ff 36    	bra       LEU, 0x13c8 <.L47>
    1466:	2e 00 90    	mov.w     [w14+4], w0
    1468:	90 40 78    	mov.b     [w0], w1
    146a:	e0 c7 b3    	mov.b     #0x7e, w0
    146c:	80 cf 50    	sub.b     w1, w0, [w15]
    146e:	ae ff 3e    	bra       GTU, 0x13cc <.L48>
    1470:	2e 00 90    	mov.w     [w14+4], w0
    1472:	10 40 78    	mov.b     [w0], w0
    1474:	27 ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    1476:	1d ff 07    	rcall     0x12b2 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1478:	2e 00 90    	mov.w     [w14+4], w0
    147a:	00 00 e8    	inc.w     w0, w0
    147c:	20 07 98    	mov.w     w0, [w14+4]
    147e:	1e 0f e9    	dec.w     [w14], [w14]
    1480:	a6 ff 37    	bra       0x13ce <.L45>

00001482 <.L39>:
    1482:	a5 ff 37    	bra       0x13ce <.L45>

00001484 <.L46>:
    1484:	00 00 00    	nop       

00001486 <.L33>:
}
    1486:	00 80 fa    	ulnk      
    1488:	00 00 06    	return    

0000148a <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    148a:	08 00 fa    	lnk       #0x8
    148c:	10 07 98    	mov.w     w0, [w14+2]
    148e:	21 07 98    	mov.w     w1, [w14+4]
    1490:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    1492:	1e 00 90    	mov.w     [w14+2], w0
    1494:	60 00 40    	add.w     w0, #0x0, w0
    1496:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1498:	10 00 3e    	bra       GTU, 0x14ba <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    149a:	00 00 eb    	clr.w     w0
    149c:	00 0f 78    	mov.w     w0, [w14]
    149e:	07 00 37    	bra       0x14ae <.L52>

000014a0 <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    14a0:	2e 00 90    	mov.w     [w14+4], w0
    14a2:	10 40 78    	mov.b     [w0], w0
    14a4:	ae 00 90    	mov.w     [w14+4], w1
    14a6:	81 00 e8    	inc.w     w1, w1
    14a8:	21 07 98    	mov.w     w1, [w14+4]
    14aa:	0c ff 07    	rcall     0x12c4 <_U1_putc> <.LFB5> <.LFE4>
    14ac:	1e 0f e8    	inc.w     [w14], [w14]

000014ae <.L52>:
    14ae:	9e 00 78    	mov.w     [w14], w1
    14b0:	3e 00 90    	mov.w     [w14+6], w0
    14b2:	80 8f 50    	sub.w     w1, w0, [w15]
    14b4:	f5 ff 39    	bra       NC, 0x14a0 <.L53>
            U1_flush_tx_buffer();
    14b6:	fd fe 07    	rcall     0x12b2 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    14b8:	01 00 37    	bra       0x14bc <.L54>

000014ba <.L55>:
        default:
            break;
    14ba:	00 00 00    	nop       

000014bc <.L54>:
    }
    return len;
    14bc:	3e 00 90    	mov.w     [w14+6], w0
}
    14be:	00 80 fa    	ulnk      
    14c0:	00 00 06    	return    

000014c2 <_blocking_delay_us>:
    14c2:	04 00 fa    	lnk       #0x4
    14c4:	10 07 98    	mov.w     w0, [w14+2]
    14c6:	09 00 37    	bra       0x14da <.L2>

000014c8 <.L5>:
    14c8:	00 00 eb    	clr.w     w0
    14ca:	00 0f 78    	mov.w     w0, [w14]
    14cc:	01 00 37    	bra       0x14d0 <.L3>

000014ce <.L4>:
    14ce:	1e 0f e8    	inc.w     [w14], [w14]

000014d0 <.L3>:
    14d0:	f0 e7 23    	mov.w     #0x3e7f, w0
    14d2:	9e 00 78    	mov.w     [w14], w1
    14d4:	80 8f 50    	sub.w     w1, w0, [w15]
    14d6:	fb ff 36    	bra       LEU, 0x14ce <.L4>
    14d8:	00 00 00    	nop       

000014da <.L2>:
    14da:	1e 00 90    	mov.w     [w14+2], w0
    14dc:	00 00 e0    	cp0.w     w0
    14de:	f4 ff 3a    	bra       NZ, 0x14c8 <.L5>
    14e0:	00 80 fa    	ulnk      
    14e2:	00 00 06    	return    

000014e4 <_i2c_init>:
    14e4:	04 00 fa    	lnk       #0x4
    14e6:	10 07 98    	mov.w     w0, [w14+2]
    14e8:	1e 00 90    	mov.w     [w14+2], w0
    14ea:	a0 13 88    	mov.w     w0, 0x274
    14ec:	77 e2 a9    	bclr.b    0x277, #0x7
    14ee:	77 22 a8    	bset.b    0x277, #0x1
    14f0:	8e a0 a9    	bclr.b    0x8e, #0x5
    14f2:	77 e2 a8    	bset.b    0x277, #0x7
    14f4:	80 13 80    	mov.w     0x270, w0
    14f6:	00 0f 78    	mov.w     w0, [w14]
    14f8:	31 00 07    	rcall     0x155c <_reset_i2c_bus> <.LFB4> <.LFE3>
    14fa:	00 80 fa    	ulnk      
    14fc:	00 00 06    	return    

000014fe <_i2c_start>:
    14fe:	02 00 fa    	lnk       #0x2
    1500:	00 00 eb    	clr.w     w0
    1502:	00 0f 78    	mov.w     w0, [w14]
    1504:	76 a2 a9    	bclr.b    0x276, #0x5
    1506:	a0 00 20    	mov.w     #0xa, w0
    1508:	9a 01 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    150a:	76 02 a8    	bset.b    0x276, #0x0
    150c:	00 00 00    	nop       
    150e:	06 00 37    	bra       0x151c <.L8>

00001510 <.L10>:
    1510:	10 00 20    	mov.w     #0x1, w0
    1512:	95 01 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    1514:	1e 0f e8    	inc.w     [w14], [w14]
    1516:	1e 00 78    	mov.w     [w14], w0
    1518:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    151a:	05 00 3c    	bra       GT, 0x1526 <.L11>

0000151c <.L8>:
    151c:	b0 13 80    	mov.w     0x276, w0
    151e:	61 00 60    	and.w     w0, #0x1, w0
    1520:	00 00 e0    	cp0.w     w0
    1522:	f6 ff 3a    	bra       NZ, 0x1510 <.L10>
    1524:	01 00 37    	bra       0x1528 <.L9>

00001526 <.L11>:
    1526:	00 00 00    	nop       

00001528 <.L9>:
    1528:	20 00 20    	mov.w     #0x2, w0
    152a:	89 01 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    152c:	00 80 fa    	ulnk      
    152e:	00 00 06    	return    

00001530 <_i2c_restart>:
    1530:	02 00 fa    	lnk       #0x2
    1532:	00 00 eb    	clr.w     w0
    1534:	00 0f 78    	mov.w     w0, [w14]
    1536:	76 22 a8    	bset.b    0x276, #0x1
    1538:	00 00 00    	nop       
    153a:	06 00 37    	bra       0x1548 <.L13> <.LBE2>

0000153c <.L15>:
    153c:	10 00 20    	mov.w     #0x1, w0
    153e:	7f 01 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    1540:	1e 0f e8    	inc.w     [w14], [w14]
    1542:	1e 00 78    	mov.w     [w14], w0
    1544:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1546:	05 00 3c    	bra       GT, 0x1552 <.L16>

00001548 <.L13>:
    1548:	b0 13 80    	mov.w     0x276, w0
    154a:	62 00 60    	and.w     w0, #0x2, w0
    154c:	00 00 e0    	cp0.w     w0
    154e:	f6 ff 3a    	bra       NZ, 0x153c <.L15> <.LBB2>
    1550:	01 00 37    	bra       0x1554 <.L14>

00001552 <.L16>:
    1552:	00 00 00    	nop       

00001554 <.L14>:
    1554:	20 00 20    	mov.w     #0x2, w0
    1556:	73 01 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    1558:	00 80 fa    	ulnk      
    155a:	00 00 06    	return    

0000155c <_reset_i2c_bus>:
    155c:	02 00 fa    	lnk       #0x2
    155e:	00 00 eb    	clr.w     w0
    1560:	00 0f 78    	mov.w     w0, [w14]
    1562:	76 42 a8    	bset.b    0x276, #0x2
    1564:	06 00 37    	bra       0x1572 <.L18> <.LBE4>

00001566 <.L20>:
    1566:	10 00 20    	mov.w     #0x1, w0
    1568:	6a 01 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    156a:	1e 0f e8    	inc.w     [w14], [w14]
    156c:	1e 00 78    	mov.w     [w14], w0
    156e:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1570:	05 00 3c    	bra       GT, 0x157c <.L21>

00001572 <.L18>:
    1572:	b0 13 80    	mov.w     0x276, w0
    1574:	64 00 60    	and.w     w0, #0x4, w0
    1576:	00 00 e0    	cp0.w     w0
    1578:	f6 ff 3a    	bra       NZ, 0x1566 <.L20> <.LBB4>
    157a:	01 00 37    	bra       0x157e <.L19>

0000157c <.L21>:
    157c:	00 00 00    	nop       

0000157e <.L19>:
    157e:	76 62 a9    	bclr.b    0x276, #0x3
    1580:	8e a0 a9    	bclr.b    0x8e, #0x5
    1582:	78 e2 a9    	bclr.b    0x278, #0x7
    1584:	79 42 a9    	bclr.b    0x279, #0x2
    1586:	a0 00 20    	mov.w     #0xa, w0
    1588:	5a 01 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    158a:	00 80 fa    	ulnk      
    158c:	00 00 06    	return    

0000158e <_send_i2c_byte>:
    158e:	04 00 fa    	lnk       #0x4
    1590:	10 07 98    	mov.w     w0, [w14+2]
    1592:	00 00 00    	nop       

00001594 <.L23>:
    1594:	c0 13 80    	mov.w     0x278, w0
    1596:	61 00 60    	and.w     w0, #0x1, w0
    1598:	00 00 e0    	cp0.w     w0
    159a:	fc ff 3a    	bra       NZ, 0x1594 <.L23>
    159c:	8e a0 a9    	bclr.b    0x8e, #0x5
    159e:	1e 00 90    	mov.w     [w14+2], w0
    15a0:	90 13 88    	mov.w     w0, 0x272
    15a2:	00 00 eb    	clr.w     w0
    15a4:	00 0f 78    	mov.w     w0, [w14]
    15a6:	08 00 37    	bra       0x15b8 <.L24>

000015a8 <.L27>:
    15a8:	c1 13 80    	mov.w     0x278, w1
    15aa:	00 00 24    	mov.w     #0x4000, w0
    15ac:	00 80 60    	and.w     w1, w0, w0
    15ae:	00 00 e0    	cp0.w     w0
    15b0:	08 00 32    	bra       Z, 0x15c2 <.L31>
    15b2:	10 00 20    	mov.w     #0x1, w0
    15b4:	44 01 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>

000015b6 <.LBE6>:
    15b6:	1e 0f e8    	inc.w     [w14], [w14]

000015b8 <.L24>:
    15b8:	30 1f 20    	mov.w     #0x1f3, w0
    15ba:	9e 00 78    	mov.w     [w14], w1
    15bc:	80 8f 50    	sub.w     w1, w0, [w15]
    15be:	f4 ff 34    	bra       LE, 0x15a8 <.L27> <.LBB6>
    15c0:	01 00 37    	bra       0x15c4 <.L26>

000015c2 <.L31>:
    15c2:	00 00 00    	nop       

000015c4 <.L26>:
    15c4:	40 1f 20    	mov.w     #0x1f4, w0
    15c6:	9e 00 78    	mov.w     [w14], w1
    15c8:	80 8f 50    	sub.w     w1, w0, [w15]
    15ca:	02 00 3a    	bra       NZ, 0x15d0 <.L28>
    15cc:	10 c0 b3    	mov.b     #0x1, w0
    15ce:	0b 00 37    	bra       0x15e6 <.L29>

000015d0 <.L28>:
    15d0:	c1 13 80    	mov.w     0x278, w1
    15d2:	00 00 28    	mov.w     #0x8000, w0
    15d4:	00 80 60    	and.w     w1, w0, w0
    15d6:	00 00 e0    	cp0.w     w0
    15d8:	03 00 32    	bra       Z, 0x15e0 <.L30>
    15da:	c0 ff 07    	rcall     0x155c <_reset_i2c_bus> <.LFB4> <.LFE3>
    15dc:	10 c0 b3    	mov.b     #0x1, w0
    15de:	03 00 37    	bra       0x15e6 <.L29>

000015e0 <.L30>:
    15e0:	20 00 20    	mov.w     #0x2, w0
    15e2:	2d 01 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    15e4:	00 40 eb    	clr.b     w0

000015e6 <.L29>:
    15e6:	00 80 fa    	ulnk      
    15e8:	00 00 06    	return    

000015ea <_i2c_read>:
    15ea:	04 00 fa    	lnk       #0x4
    15ec:	00 00 eb    	clr.w     w0
    15ee:	00 0f 78    	mov.w     w0, [w14]
    15f0:	00 40 eb    	clr.b     w0
    15f2:	20 47 98    	mov.b     w0, [w14+2]
    15f4:	76 62 a8    	bset.b    0x276, #0x3
    15f6:	05 00 37    	bra       0x1602 <.L33>

000015f8 <.L35>:
    15f8:	1e 0f e8    	inc.w     [w14], [w14]
    15fa:	00 7d 20    	mov.w     #0x7d0, w0
    15fc:	9e 00 78    	mov.w     [w14], w1
    15fe:	80 8f 50    	sub.w     w1, w0, [w15]
    1600:	05 00 3c    	bra       GT, 0x160c <.L36>

00001602 <.L33>:
    1602:	c0 13 80    	mov.w     0x278, w0
    1604:	62 00 60    	and.w     w0, #0x2, w0
    1606:	00 00 e0    	cp0.w     w0
    1608:	f7 ff 32    	bra       Z, 0x15f8 <.L35>
    160a:	01 00 37    	bra       0x160e <.L34>

0000160c <.L36>:
    160c:	00 00 00    	nop       

0000160e <.L34>:
    160e:	80 13 80    	mov.w     0x270, w0
    1610:	20 47 98    	mov.b     w0, [w14+2]
    1612:	2e 40 90    	mov.b     [w14+2], w0
    1614:	00 80 fa    	ulnk      
    1616:	00 00 06    	return    

00001618 <_i2c_read_ack>:
    1618:	04 00 fa    	lnk       #0x4
    161a:	00 00 eb    	clr.w     w0
    161c:	00 0f 78    	mov.w     w0, [w14]
    161e:	00 40 eb    	clr.b     w0
    1620:	20 47 98    	mov.b     w0, [w14+2]
    1622:	76 62 a8    	bset.b    0x276, #0x3
    1624:	05 00 37    	bra       0x1630 <.L38>

00001626 <.L40>:
    1626:	1e 0f e8    	inc.w     [w14], [w14]
    1628:	00 7d 20    	mov.w     #0x7d0, w0
    162a:	9e 00 78    	mov.w     [w14], w1
    162c:	80 8f 50    	sub.w     w1, w0, [w15]
    162e:	05 00 3c    	bra       GT, 0x163a <.L41>

00001630 <.L38>:
    1630:	c0 13 80    	mov.w     0x278, w0
    1632:	62 00 60    	and.w     w0, #0x2, w0
    1634:	00 00 e0    	cp0.w     w0
    1636:	f7 ff 32    	bra       Z, 0x1626 <.L40>
    1638:	01 00 37    	bra       0x163c <.L39>

0000163a <.L41>:
    163a:	00 00 00    	nop       

0000163c <.L39>:
    163c:	80 13 80    	mov.w     0x270, w0
    163e:	20 47 98    	mov.b     w0, [w14+2]
    1640:	76 82 a8    	bset.b    0x276, #0x4
    1642:	a0 00 20    	mov.w     #0xa, w0
    1644:	fc 00 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    1646:	2e 40 90    	mov.b     [w14+2], w0
    1648:	00 80 fa    	ulnk      
    164a:	00 00 06    	return    

0000164c <_I2Cwrite>:
    164c:	04 00 fa    	lnk       #0x4
    164e:	00 4f 78    	mov.b     w0, [w14]
    1650:	11 47 98    	mov.b     w1, [w14+1]
    1652:	22 47 98    	mov.b     w2, [w14+2]
    1654:	54 ff 07    	rcall     0x14fe <_i2c_start> <.LFB2> <.LFE1>
    1656:	1e 00 fb    	se        [w14], w0
    1658:	80 00 78    	mov.w     w0, w1
    165a:	e0 ff 2f    	mov.w     #0xfffe, w0
    165c:	00 80 60    	and.w     w1, w0, w0
    165e:	97 ff 07    	rcall     0x158e <_send_i2c_byte> <.LFB5> <.LFE4>
    1660:	1e 40 90    	mov.b     [w14+1], w0
    1662:	00 00 fb    	se        w0, w0
    1664:	94 ff 07    	rcall     0x158e <_send_i2c_byte> <.LFB5> <.LFE4>
    1666:	2e 40 90    	mov.b     [w14+2], w0
    1668:	00 00 fb    	se        w0, w0
    166a:	91 ff 07    	rcall     0x158e <_send_i2c_byte> <.LFB5> <.LFE4>
    166c:	77 ff 07    	rcall     0x155c <_reset_i2c_bus> <.LFB4> <.LFE3>
    166e:	00 80 fa    	ulnk      
    1670:	00 00 06    	return    

00001672 <_I2Cread>:
    1672:	04 00 fa    	lnk       #0x4
    1674:	20 47 98    	mov.b     w0, [w14+2]
    1676:	31 47 98    	mov.b     w1, [w14+3]
    1678:	42 ff 07    	rcall     0x14fe <_i2c_start> <.LFB2> <.LFE1>
    167a:	2e 40 90    	mov.b     [w14+2], w0
    167c:	00 00 fb    	se        w0, w0
    167e:	87 ff 07    	rcall     0x158e <_send_i2c_byte> <.LFB5> <.LFE4>
    1680:	3e 40 90    	mov.b     [w14+3], w0
    1682:	00 00 fb    	se        w0, w0
    1684:	84 ff 07    	rcall     0x158e <_send_i2c_byte> <.LFB5> <.LFE4>
    1686:	a0 00 20    	mov.w     #0xa, w0
    1688:	da 00 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    168a:	52 ff 07    	rcall     0x1530 <_i2c_restart> <.LFB3> <.LFE2>
    168c:	2e 40 90    	mov.b     [w14+2], w0
    168e:	00 04 a0    	bset.b    w0, #0x0
    1690:	00 00 fb    	se        w0, w0
    1692:	7d ff 07    	rcall     0x158e <_send_i2c_byte> <.LFB5> <.LFE4>
    1694:	aa ff 07    	rcall     0x15ea <_i2c_read> <.LFB6> <.LFE5>
    1696:	00 4f 78    	mov.b     w0, [w14]
    1698:	61 ff 07    	rcall     0x155c <_reset_i2c_bus> <.LFB4> <.LFE3>
    169a:	1e 40 78    	mov.b     [w14], w0
    169c:	00 80 fa    	ulnk      
    169e:	00 00 06    	return    

000016a0 <_I2Cpoll>:
    16a0:	04 00 fa    	lnk       #0x4
    16a2:	20 47 98    	mov.b     w0, [w14+2]
    16a4:	00 40 eb    	clr.b     w0
    16a6:	00 4f 78    	mov.b     w0, [w14]
    16a8:	2a ff 07    	rcall     0x14fe <_i2c_start> <.LFB2> <.LFE1>
    16aa:	2e 40 90    	mov.b     [w14+2], w0
    16ac:	00 00 fb    	se        w0, w0
    16ae:	80 00 78    	mov.w     w0, w1
    16b0:	e0 ff 2f    	mov.w     #0xfffe, w0
    16b2:	00 80 60    	and.w     w1, w0, w0
    16b4:	6c ff 07    	rcall     0x158e <_send_i2c_byte> <.LFB5> <.LFE4>
    16b6:	00 4f 78    	mov.b     w0, [w14]
    16b8:	51 ff 07    	rcall     0x155c <_reset_i2c_bus> <.LFB4> <.LFE3>
    16ba:	1e 40 78    	mov.b     [w14], w0
    16bc:	00 80 fa    	ulnk      
    16be:	00 00 06    	return    

000016c0 <_I2Cwritearray>:
    16c0:	08 00 fa    	lnk       #0x8
    16c2:	20 47 98    	mov.b     w0, [w14+2]
    16c4:	21 07 98    	mov.w     w1, [w14+4]
    16c6:	62 47 98    	mov.b     w2, [w14+6]
    16c8:	00 40 eb    	clr.b     w0
    16ca:	00 4f 78    	mov.b     w0, [w14]
    16cc:	18 ff 07    	rcall     0x14fe <_i2c_start> <.LFB2> <.LFE1>
    16ce:	2e 40 90    	mov.b     [w14+2], w0
    16d0:	00 00 fb    	se        w0, w0
    16d2:	80 00 78    	mov.w     w0, w1
    16d4:	e0 ff 2f    	mov.w     #0xfffe, w0
    16d6:	00 80 60    	and.w     w1, w0, w0
    16d8:	5a ff 07    	rcall     0x158e <_send_i2c_byte> <.LFB5> <.LFE4>
    16da:	00 4f 78    	mov.b     w0, [w14]
    16dc:	00 40 eb    	clr.b     w0
    16de:	10 47 98    	mov.b     w0, [w14+1]
    16e0:	0d 00 37    	bra       0x16fc <.L46>

000016e2 <.L47>:
    16e2:	1e 40 90    	mov.b     [w14+1], w0
    16e4:	00 80 fb    	ze        w0, w0
    16e6:	ae 00 90    	mov.w     [w14+4], w1
    16e8:	00 80 40    	add.w     w1, w0, w0
    16ea:	10 40 78    	mov.b     [w0], w0
    16ec:	00 00 fb    	se        w0, w0
    16ee:	4f ff 07    	rcall     0x158e <_send_i2c_byte> <.LFB5> <.LFE4>
    16f0:	9e 40 78    	mov.b     [w14], w1
    16f2:	01 40 70    	ior.b     w0, w1, w0
    16f4:	00 4f 78    	mov.b     w0, [w14]
    16f6:	1e 40 90    	mov.b     [w14+1], w0
    16f8:	00 40 e8    	inc.b     w0, w0
    16fa:	10 47 98    	mov.b     w0, [w14+1]

000016fc <.L46>:
    16fc:	9e 40 90    	mov.b     [w14+1], w1
    16fe:	6e 40 90    	mov.b     [w14+6], w0
    1700:	80 cf 50    	sub.b     w1, w0, [w15]
    1702:	ef ff 39    	bra       NC, 0x16e2 <.L47>
    1704:	2b ff 07    	rcall     0x155c <_reset_i2c_bus> <.LFB4> <.LFE3>
    1706:	1e 40 78    	mov.b     [w14], w0
    1708:	00 80 fa    	ulnk      
    170a:	00 00 06    	return    
Disassembly of section .isr.text:

0000170c <__U1TXInterrupt>:
    U1MODEbits.UARTEN = 1;          // enable UART1 module
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
}

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    170c:	80 9f be    	mov.d     w0, [w15++]
    170e:	32 00 f8    	push      0x32
    1710:	34 00 f8    	push      0x34
    1712:	10 00 20    	mov.w     #0x1, w0
    1714:	a0 01 88    	mov.w     w0, 0x34
    1716:	00 20 20    	mov.w     #0x200, w0
    1718:	90 01 88    	mov.w     w0, 0x32
    171a:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    171c:	85 80 a9    	bclr.b    0x85, #0x4

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
    171e:	50 40 80    	mov.w     0x80a, w0
    1720:	00 00 e0    	cp0.w     w0
    1722:	17 00 3a    	bra       NZ, 0x1752 <.L8>
        U1STAbits.UTXEN = 0;        //   disable data transmission
    1724:	23 42 a9    	bclr.b    0x223, #0x2

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
    1726:	16 00 37    	bra       0x1754 <.L4>

00001728 <.L7>:
        disable_interrupts();
    1728:	ff 3f fc    	disi      #0x3fff
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
    172a:	11 40 80    	mov.w     0x802, w1
    172c:	30 40 80    	mov.w     0x806, w0
    172e:	00 80 40    	add.w     w1, w0, w0
    1730:	10 4f 78    	mov.b     [w0], [w14]
        U1_tx_buffer.head++;
    1732:	30 40 80    	mov.w     0x806, w0
    1734:	00 00 e8    	inc.w     w0, w0
    1736:	30 40 88    	mov.w     w0, 0x806
        if (U1_tx_buffer.head == U1_tx_buffer.length)
    1738:	31 40 80    	mov.w     0x806, w1
    173a:	20 40 80    	mov.w     0x804, w0
    173c:	80 8f 50    	sub.w     w1, w0, [w15]
    173e:	02 00 3a    	bra       NZ, 0x1744 <.L5>
            U1_tx_buffer.head = 0;
    1740:	00 00 eb    	clr.w     w0
    1742:	30 40 88    	mov.w     w0, 0x806

00001744 <.L5>:
        U1_tx_buffer.count--;
    1744:	50 40 80    	mov.w     0x80a, w0
    1746:	00 00 e9    	dec.w     w0, w0
    1748:	50 40 88    	mov.w     w0, 0x80a
        enable_interrupts();
    174a:	52 20 ef    	clr.w     0x52
        U1TXREG = (uint16_t)ch;
    174c:	1e 80 fb    	ze        [w14], w0
    174e:	20 11 88    	mov.w     w0, 0x224
    1750:	01 00 37    	bra       0x1754 <.L4>

00001752 <.L8>:
    1752:	00 00 00    	nop       

00001754 <.L4>:
    1754:	11 11 80    	mov.w     0x222, w1
    1756:	00 20 20    	mov.w     #0x200, w0
    1758:	00 80 60    	and.w     w1, w0, w0
    175a:	00 00 e0    	cp0.w     w0
    175c:	03 00 3a    	bra       NZ, 0x1764 <.L2>
    175e:	50 40 80    	mov.w     0x80a, w0
    1760:	00 00 e0    	cp0.w     w0
    1762:	e2 ff 3a    	bra       NZ, 0x1728 <.L7>

00001764 <.L2>:
    }
}
    1764:	00 80 fa    	ulnk      
    1766:	34 00 f9    	pop       0x34

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    return U1_rx_buffer.count;
}

void U1_flush_tx_buffer(void) {
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
        U1STAbits.UTXEN = 1;        //   enable it
}

void U1_putc(uint8_t ch) {
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}

    disable_interrupts();
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    U1_tx_buffer.tail++;
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
        U1_tx_buffer.tail = 0;
    U1_tx_buffer.count++;
    enable_interrupts();

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
        U1STAbits.UTXEN = 1;
}

uint8_t U1_getc(void) {
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}

    disable_interrupts();
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    U1_rx_buffer.head++;
    if (U1_rx_buffer.head == U1_rx_buffer.length)
        U1_rx_buffer.head = 0;
    U1_rx_buffer.count--;
    enable_interrupts();

    return ch;
}

void U1_puts(uint8_t *str) {
    while (*str)
        U1_putc(*str++);
    U1_flush_tx_buffer();
}

void U1_gets(uint8_t *str, uint16_t len) {
    if (len == 0)
        return;

    if (len == 1) {
        *str = '\0';
        return;
    }

    while (1) {
        *str = U1_getc();
        if ((*str == '\r') || (len == 1))
            break;
        str++;
        len--;
    }
    *str = '\0';
}

void U1_gets_term(uint8_t *str, uint16_t len) {
    uint8_t *start;
    uint16_t left;

    if (len == 0)
        return;

    if (len == 1) {
        *str = '\0';
        return;
    }

    U1_putc(0x1B);                          // save current cursor position
    U1_putc('7');
    U1_flush_tx_buffer();
    start = str;
    left = len;
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    *str = '\0';                            // terminarte the string with null
    U1_putc('\n');                          // send newline and
    U1_putc('\r');                          //   carriage return
    U1_flush_tx_buffer();
}

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    int16_t i;

    switch (handle) {
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
                U1_putc(*(uint8_t *)buffer++);
            U1_flush_tx_buffer();
            break;
        default:
            break;
    }
    return len;
}
    1768:	32 00 f9    	pop       0x32
    176a:	4f 00 be    	mov.d     [--w15], w0
    176c:	00 40 06    	retfie    

0000176e <__U1RXInterrupt>:
    176e:	80 9f be    	mov.d     w0, [w15++]
    1770:	32 00 f8    	push      0x32
    1772:	34 00 f8    	push      0x34
    1774:	10 00 20    	mov.w     #0x1, w0
    1776:	a0 01 88    	mov.w     w0, 0x34
    1778:	00 20 20    	mov.w     #0x200, w0
    177a:	90 01 88    	mov.w     w0, 0x32
    177c:	00 00 fa    	lnk       #0x0
    177e:	85 60 a9    	bclr.b    0x85, #0x3
    1780:	14 00 37    	bra       0x17aa <.L10>

00001782 <.L13>:
    1782:	ff 3f fc    	disi      #0x3fff
    1784:	61 40 80    	mov.w     0x80c, w1
    1786:	90 40 80    	mov.w     0x812, w0
    1788:	00 80 40    	add.w     w1, w0, w0
    178a:	31 11 80    	mov.w     0x226, w1
    178c:	81 40 78    	mov.b     w1, w1
    178e:	01 48 78    	mov.b     w1, [w0]
    1790:	90 40 80    	mov.w     0x812, w0
    1792:	00 00 e8    	inc.w     w0, w0
    1794:	90 40 88    	mov.w     w0, 0x812
    1796:	91 40 80    	mov.w     0x812, w1
    1798:	70 40 80    	mov.w     0x80e, w0
    179a:	80 8f 50    	sub.w     w1, w0, [w15]
    179c:	02 00 3a    	bra       NZ, 0x17a2 <.L11>
    179e:	00 00 eb    	clr.w     w0
    17a0:	90 40 88    	mov.w     w0, 0x812

000017a2 <.L11>:
    17a2:	a0 40 80    	mov.w     0x814, w0
    17a4:	00 00 e8    	inc.w     w0, w0
    17a6:	a0 40 88    	mov.w     w0, 0x814
    17a8:	52 20 ef    	clr.w     0x52

000017aa <.L10>:
    17aa:	10 11 80    	mov.w     0x222, w0
    17ac:	61 00 60    	and.w     w0, #0x1, w0
    17ae:	00 00 e0    	cp0.w     w0
    17b0:	04 00 32    	bra       Z, 0x17ba <.L9>
    17b2:	a1 40 80    	mov.w     0x814, w1
    17b4:	70 40 80    	mov.w     0x80e, w0
    17b6:	80 8f 50    	sub.w     w1, w0, [w15]
    17b8:	e4 ff 3a    	bra       NZ, 0x1782 <.L13>

000017ba <.L9>:
    17ba:	00 80 fa    	ulnk      
    17bc:	34 00 f9    	pop       0x34
    17be:	32 00 f9    	pop       0x32
    17c0:	4f 00 be    	mov.d     [--w15], w0
    17c2:	00 40 06    	retfie    
Disassembly of section .text:

000017c4 <_init_elecanisms>:
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}
    17c4:	00 00 fa    	lnk       #0x0
    17c6:	00 10 20    	mov.w     #0x100, w0
    17c8:	20 3a 88    	mov.w     w0, 0x744
    17ca:	d8 a2 a8    	bset.b    0x2d8, #0x5
    17cc:	d8 82 a8    	bset.b    0x2d8, #0x4
    17ce:	e8 82 a8    	bset.b    0x2e8, #0x4
    17d0:	e8 a2 a8    	bset.b    0x2e8, #0x5
    17d2:	c9 e2 a8    	bset.b    0x2c9, #0x7
    17d4:	e8 62 a8    	bset.b    0x2e8, #0x3
    17d6:	d9 02 a8    	bset.b    0x2d9, #0x0
    17d8:	d9 62 a8    	bset.b    0x2d9, #0x3
    17da:	d9 22 a8    	bset.b    0x2d9, #0x1
    17dc:	d9 42 a8    	bset.b    0x2d9, #0x2
    17de:	d8 02 a8    	bset.b    0x2d8, #0x0
    17e0:	d8 22 a8    	bset.b    0x2d8, #0x1
    17e2:	d8 42 a8    	bset.b    0x2d8, #0x2
    17e4:	d8 62 a8    	bset.b    0x2d8, #0x3
    17e6:	c8 a2 a8    	bset.b    0x2c8, #0x5
    17e8:	c8 82 a8    	bset.b    0x2c8, #0x4
    17ea:	c8 62 a8    	bset.b    0x2c8, #0x3
    17ec:	c8 42 a8    	bset.b    0x2c8, #0x2
    17ee:	c8 22 a8    	bset.b    0x2c8, #0x1
    17f0:	c8 02 a8    	bset.b    0x2c8, #0x0
    17f2:	f0 03 20    	mov.w     #0x3f, w0
    17f4:	10 27 88    	mov.w     w0, 0x4e2
    17f6:	e4 24 ef    	clr.w     0x4e4
    17f8:	e6 24 ef    	clr.w     0x4e6
    17fa:	ea 24 ef    	clr.w     0x4ea
    17fc:	ec 24 ef    	clr.w     0x4ec
    17fe:	00 0e 20    	mov.w     #0xe0, w0
    1800:	00 19 88    	mov.w     w0, 0x320
    1802:	22 23 ef    	clr.w     0x322
    1804:	00 c4 20    	mov.w     #0xc40, w0
    1806:	20 19 88    	mov.w     w0, 0x324
    1808:	50 00 20    	mov.w     #0x5, w0
    180a:	40 19 88    	mov.w     w0, 0x328
    180c:	21 e3 a8    	bset.b    0x321, #0x7
    180e:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    1810:	dc e2 a9    	bclr.b    0x2dc, #0x7
    1812:	e8 02 a9    	bclr.b    0x2e8, #0x0
    1814:	ec 02 a9    	bclr.b    0x2ec, #0x0
    1816:	e8 22 a9    	bclr.b    0x2e8, #0x1
    1818:	ec 22 a9    	bclr.b    0x2ec, #0x1
    181a:	d1 e2 a8    	bset.b    0x2d1, #0x7
    181c:	d1 82 a8    	bset.b    0x2d1, #0x4
    181e:	c9 82 a8    	bset.b    0x2c9, #0x4
    1820:	00 80 fa    	ulnk      
    1822:	00 00 06    	return    

00001824 <_read_analog>:
    1824:	02 00 fa    	lnk       #0x2
    1826:	00 0f 78    	mov.w     w0, [w14]
    1828:	9e 00 78    	mov.w     [w14], w1
    182a:	41 19 88    	mov.w     w1, 0x328
    182c:	20 23 a8    	bset.b    0x320, #0x1
    182e:	00 00 00    	nop       

00001830 <.L3>:
    1830:	00 19 80    	mov.w     0x320, w0
    1832:	61 00 60    	and.w     w0, #0x1, w0
    1834:	00 00 e0    	cp0.w     w0
    1836:	fc ff 32    	bra       Z, 0x1830 <.L3>
    1838:	00 18 80    	mov.w     0x300, w0
    183a:	00 80 fa    	ulnk      
    183c:	00 00 06    	return    

0000183e <_delay_by_nop>:
    183e:	04 00 fa    	lnk       #0x4
    1840:	10 07 98    	mov.w     w0, [w14+2]
    1842:	00 00 eb    	clr.w     w0
    1844:	00 0f 78    	mov.w     w0, [w14]
    1846:	02 00 37    	bra       0x184c <.L2>

00001848 <.L3>:
    1848:	00 00 00    	nop       
    184a:	1e 0f e8    	inc.w     [w14], [w14]

0000184c <.L2>:
    184c:	1e 00 90    	mov.w     [w14+2], w0
    184e:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1850:	fb ff 3e    	bra       GTU, 0x1848 <.L3>
    1852:	00 80 fa    	ulnk      
    1854:	00 00 06    	return    

00001856 <_main>:
    1856:	08 00 fa    	lnk       #0x8
    1858:	b5 ff 07    	rcall     0x17c4 <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    185a:	dc e2 a8    	bset.b    0x2dc, #0x7
    185c:	20 03 20    	mov.w     #0x32, w0
    185e:	ef ff 07    	rcall     0x183e <_delay_by_nop> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    1860:	d0 09 20    	mov.w     #0x9d, w0
    1862:	40 fe 07    	rcall     0x14e4 <_i2c_init> <.LFB1> <.LFE0>
    1864:	ec 22 a8    	bset.b    0x2ec, #0x1
    1866:	60 21 29    	mov.w     #0x9216, w0
    1868:	e1 00 47    	add.w     w14, #0x1, w1
    186a:	06 00 09    	repeat    #0x6
    186c:	b0 58 78    	mov.b     [w0++], [w1++]
    186e:	70 00 b1    	sub.w     #0x7, w0
    1870:	60 c0 b3    	mov.b     #0x6, w0
    1872:	00 4f 78    	mov.b     w0, [w14]

00001874 <.L5>:
    1874:	73 fe 07    	rcall     0x155c <_reset_i2c_bus> <.LFB4> <.LFE3>
    1876:	0e 00 e8    	inc.w     w14, w0
    1878:	1e 41 78    	mov.b     [w14], w2
    187a:	80 00 78    	mov.w     w0, w1

    while (1) {
        reset_i2c_bus();

      I2Cwritearray(0x7C, msg, len);
    187c:	c0 c7 b3    	mov.b     #0x7c, w0
    187e:	20 ff 07    	rcall     0x16c0 <_I2Cwritearray> <.LFB11> <.LFE10>
    }
    1880:	f9 ff 37    	bra       0x1874 <.L5>
Disassembly of section .dinit:

00001882 <.dinit>:
    1882:	02 08 00    	nop       
    1884:	14 08 00    	nop       
    1886:	80 00 00    	nop       
    1888:	00 08 00    	nop       
    188a:	02 00 00    	nop       
    188c:	80 00 00    	nop       
    188e:	00 00 00    	nop       
Disassembly of section .isr:

00001890 <__DefaultInterrupt>:
    1890:	00 40 da    	break     
    1892:	00 00 fe    	reset     
