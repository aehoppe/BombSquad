
codeword.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	7a 1f 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	7a 1f 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	7a 1f 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	7a 1f 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	7a 1f 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	7a 1f 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	7a 1f 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	7a 1f 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	7a 1f 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	7a 1f 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	7a 1f 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	7a 1f 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	7a 1f 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	7a 1f 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	7a 1f 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	7a 1f 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	7a 1f 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	7a 1f 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	7a 1f 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	7a 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	7a 1f 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	7a 1f 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	7a 1f 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	7a 1f 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	7a 1f 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	7a 1f 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	7a 1f 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	7a 1f 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	7a 1f 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	7a 1f 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	7a 1f 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	7a 1f 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	7a 1f 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	7a 1f 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	7a 1f 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	7a 1f 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	7a 1f 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	7a 1f 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	7a 1f 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	7a 1f 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	7a 1f 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	7a 1f 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	7a 1f 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	7a 1f 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	7a 1f 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	7a 1f 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	7a 1f 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	7a 1f 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	7a 1f 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	7a 1f 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	7a 1f 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	7a 1f 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	7a 1f 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	7a 1f 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	7a 1f 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	7a 1f 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	7a 1f 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	7a 1f 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	7a 1f 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	ef 81 20    	mov.w     #0x81e, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	77 00 07    	rcall     0x1214 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	c0 f6 21    	mov.w     #0x1f6c, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	22 1b 02    	call      0x1b22 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	60 18 20    	mov.w     #0x186, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <__crt_start_mode>:
    1214:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	b0 1d 04    	goto      0x1db0 <__T2Interrupt>
    1032:	00 00 00 
    1034:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	8c 1d 04    	goto      0x1d8c <__CNInterrupt>
    105a:	00 00 00 
    105c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	7a 1f 04    	goto      0x1f7a <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009216 <.LC1-0xd2>:
    9216:	61 62       	.word 0x6261
    9218:	6f 75       	.word 0x756f
    921a:	74 00       	.word 0x74
    921c:	65 76       	.word 0x7665
    921e:	65 72       	.word 0x7265
    9220:	79 00       	.word 0x79
    9222:	6c 61       	.word 0x616c
    9224:	72 67       	.word 0x6772
    9226:	65 00       	.word 0x65
    9228:	70 6c       	.word 0x6c70
    922a:	61 6e       	.word 0x6e61
    922c:	74 00       	.word 0x74
    922e:	73 70       	.word 0x7073
    9230:	65 6c       	.word 0x6c65
    9232:	6c 00       	.word 0x6c
    9234:	74 68       	.word 0x6874
    9236:	65 73       	.word 0x7365
    9238:	65 00       	.word 0x65
    923a:	77 68       	.word 0x6877
    923c:	65 72       	.word 0x7265
    923e:	65 00       	.word 0x65
    9240:	61 66       	.word 0x6661
    9242:	74 65       	.word 0x6574
    9244:	72 00       	.word 0x72
    9246:	66 69       	.word 0x6966
    9248:	72 73       	.word 0x7372
    924a:	74 00       	.word 0x74
    924c:	6c 65       	.word 0x656c
    924e:	61 72       	.word 0x7261
    9250:	6e 00       	.word 0x6e
    9252:	70 6f       	.word 0x6f70
    9254:	69 6e       	.word 0x6e69
    9256:	74 00       	.word 0x74
    9258:	73 74       	.word 0x7473
    925a:	69 6c       	.word 0x6c69
    925c:	6c 00       	.word 0x6c
    925e:	74 68       	.word 0x6874
    9260:	69 6e       	.word 0x6e69
    9262:	67 00       	.word 0x67
    9264:	77 68       	.word 0x6877
    9266:	69 63       	.word 0x6369
    9268:	68 00       	.word 0x68
    926a:	61 67       	.word 0x6761
    926c:	61 69       	.word 0x6961
    926e:	6e 00       	.word 0x6e
    9270:	66 6f       	.word 0x6f66
    9272:	75 6e       	.word 0x6e75
    9274:	64 00       	.word 0x64
    9276:	6e 65       	.word 0x656e
    9278:	76 65       	.word 0x6576
    927a:	72 00       	.word 0x72
    927c:	72 69       	.word 0x6972
    927e:	67 68       	.word 0x6867
    9280:	74 00       	.word 0x74
    9282:	73 74       	.word 0x7473
    9284:	75 64       	.word 0x6475
    9286:	79 00       	.word 0x79
    9288:	74 68       	.word 0x6874
    928a:	69 6e       	.word 0x6e69
    928c:	6b 00       	.word 0x6b
    928e:	77 6f       	.word 0x6f77
    9290:	72 6c       	.word 0x6c72
    9292:	64 00       	.word 0x64
    9294:	62 65       	.word 0x6562
    9296:	6c 6f       	.word 0x6f6c
    9298:	77 00       	.word 0x77
    929a:	67 72       	.word 0x7267
    929c:	65 61       	.word 0x6165
    929e:	74 00       	.word 0x74
    92a0:	6f 74       	.word 0x746f
    92a2:	68 65       	.word 0x6568
    92a4:	72 00       	.word 0x72
    92a6:	73 6d       	.word 0x6d73
    92a8:	61 6c       	.word 0x6c61
    92aa:	6c 00       	.word 0x6c
    92ac:	74 68       	.word 0x6874
    92ae:	65 69       	.word 0x6965
    92b0:	72 00       	.word 0x72
    92b2:	74 68       	.word 0x6874
    92b4:	72 65       	.word 0x6572
    92b6:	65 00       	.word 0x65
    92b8:	77 6f       	.word 0x6f77
    92ba:	75 6c       	.word 0x6c75
    92bc:	64 00       	.word 0x64
    92be:	63 6f       	.word 0x6f63
    92c0:	75 6c       	.word 0x6c75
    92c2:	64 00       	.word 0x64
    92c4:	68 6f       	.word 0x6f68
    92c6:	75 73       	.word 0x7375
    92c8:	65 00       	.word 0x65
    92ca:	70 6c       	.word 0x6c70
    92cc:	61 63       	.word 0x6361
    92ce:	65 00       	.word 0x65
    92d0:	73 6f       	.word 0x6f73
    92d2:	75 6e       	.word 0x6e75
    92d4:	64 00       	.word 0x64
    92d6:	74 68       	.word 0x6874
    92d8:	65 72       	.word 0x7265
    92da:	65 00       	.word 0x65
    92dc:	77 61       	.word 0x6177
    92de:	74 65       	.word 0x6574
    92e0:	72 00       	.word 0x72
    92e2:	77 72       	.word 0x7277
    92e4:	69 74       	.word 0x7469
    92e6:	65 00       	.word 0x65

000092e8 <.LC1>:
    92e8:	00 20       	.word 0x2000

000092e9 <.LC2>:
    92e9:	00 00       	.word 0
    92eb:	00 00       	.word 0
    92ed:	00 00       	.word 0
    92ef:	00 00       	.word 0
    92f1:	00 00       	.word 0
    92f3:	00 00       	.word 0
    92f5:	00 00       	.word 0
    92f7:	00 00       	.word 0

000092f9 <.LC0>:
    92f9:	00 00       	.word 0
    92fb:	00 00       	.word 0
    92fd:	00 00       	.word 0
    92ff:	00 00       	.word 0
    9301:	00 00       	.word 0
    9303:	00 00       	.word 0
    9305:	00 00       	.word 0
    9307:	00 00       	.word 0
	...

0000930a <.LC0>:
    930a:	20 20       	.word 0x2020
    930c:	20 20       	.word 0x2020
    930e:	20 20       	.word 0x2020
    9310:	20 20       	.word 0x2020
    9312:	20 20       	.word 0x2020
    9314:	20 20       	.word 0x2020
    9316:	20 20       	.word 0x2020
    9318:	20 20       	.word 0x2020
    931a:	20 20       	.word 0x2020
    931c:	20 20       	.word 0x2020
    931e:	20 20       	.word 0x2020
    9320:	20 20       	.word 0x2020
    9322:	20 20       	.word 0x2020
    9324:	20 20       	.word 0x2020
    9326:	20 20       	.word 0x2020
    9328:	20 20       	.word 0x2020
    932a:	20 20       	.word 0x2020
    932c:	20 20       	.word 0x2020
    932e:	20 20       	.word 0x2020
    9330:	20 20       	.word 0x2020
    9332:	20 20       	.word 0x2020
    9334:	20 20       	.word 0x2020
    9336:	20 20       	.word 0x2020
    9338:	20 20       	.word 0x2020
    933a:	20 20       	.word 0x2020
    933c:	20 20       	.word 0x2020
    933e:	20 20       	.word 0x2020
    9340:	20 20       	.word 0x2020
    9342:	00 20       	.word 0x2000

00009343 <.LC1>:
    9343:	00 00       	.word 0
    9345:	00 00       	.word 0
    9347:	00 00       	.word 0
    9349:	00 00       	.word 0
    934b:	00 00       	.word 0
    934d:	00 00       	.word 0
    934f:	00 00       	.word 0
    9351:	00 00       	.word 0
	...

00009354 <.LC2>:
    9354:	7a 79       	.word 0x797a
    9356:	78 77       	.word 0x7778
    9358:	76 75       	.word 0x7576
    935a:	74 73       	.word 0x7374
    935c:	72 71       	.word 0x7172
    935e:	70 6f       	.word 0x6f70
    9360:	6e 6d       	.word 0x6d6e
    9362:	6c 6b       	.word 0x6b6c
    9364:	6a 69       	.word 0x696a
    9366:	68 67       	.word 0x6768
    9368:	66 65       	.word 0x6566
    936a:	64 63       	.word 0x6364
    936c:	62 61       	.word 0x6162
    936e:	39 38       	.word 0x3839
    9370:	37 36       	.word 0x3637
    9372:	35 34       	.word 0x3435
    9374:	33 32       	.word 0x3233
    9376:	31 30       	.word 0x3031
    9378:	31 32       	.word 0x3231
    937a:	33 34       	.word 0x3433
    937c:	35 36       	.word 0x3635
    937e:	37 38       	.word 0x3837
    9380:	39 61       	.word 0x6139
    9382:	62 63       	.word 0x6362
    9384:	64 65       	.word 0x6564
    9386:	66 67       	.word 0x6766
    9388:	68 69       	.word 0x6968
    938a:	6a 6b       	.word 0x6b6a
    938c:	6c 6d       	.word 0x6d6c
    938e:	6e 6f       	.word 0x6f6e
    9390:	70 71       	.word 0x7170
    9392:	72 73       	.word 0x7372
    9394:	74 75       	.word 0x7574
    9396:	76 77       	.word 0x7776
    9398:	78 79       	.word 0x7978
    939a:	7a 00       	.word 0x7a
Disassembly of section .text:

0000139c <___lcd_i2c_write>:
#define DR_READ 0x0B

_LCD lcd[3];

void __lcd_i2c_write(_LCD *self, uint8_t ch) {
    139c:	04 00 fa    	lnk       #0x4
    139e:	00 0f 78    	mov.w     w0, [w14]
    13a0:	21 47 98    	mov.b     w1, [w14+2]
    i2c_start();
    13a2:	91 02 07    	rcall     0x18c6 <_i2c_start> <.LFB2> <.LFE1>
    send_i2c_byte(self->addr_write);
    13a4:	1e 00 78    	mov.w     [w14], w0
    13a6:	10 40 78    	mov.b     [w0], w0
    13a8:	00 80 fb    	ze        w0, w0
    13aa:	dc 02 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ch);
    13ac:	2e 40 90    	mov.b     [w14+2], w0
    13ae:	00 80 fb    	ze        w0, w0
    13b0:	d9 02 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
    reset_i2c_bus();
    13b2:	bd 02 07    	rcall     0x192e <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    13b4:	00 80 fa    	ulnk      
    13b6:	00 00 06    	return    

000013b8 <___lcd_enablePulse>:

// Pulse enable pin high and then low to shift in 4 bits of data
void __lcd_enablePulse(_LCD *self) {
    13b8:	02 00 fa    	lnk       #0x2
    13ba:	00 0f 78    	mov.w     w0, [w14]
    self->io_write_val ^= ENABLE_TOGGLE;
    13bc:	1e 00 78    	mov.w     [w14], w0
    13be:	20 40 90    	mov.b     [w0+2], w0
    13c0:	80 40 78    	mov.b     w0, w1
    13c2:	01 24 a2    	btg.b     w1, #0x2
    13c4:	1e 00 78    	mov.w     [w14], w0
    13c6:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    13c8:	1e 00 78    	mov.w     [w14], w0
    13ca:	20 40 90    	mov.b     [w0+2], w0
    13cc:	80 40 78    	mov.b     w0, w1
    13ce:	1e 00 78    	mov.w     [w14], w0
    13d0:	e5 ff 07    	rcall     0x139c <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    delay_by_nop(100);
    13d2:	40 06 20    	mov.w     #0x64, w0
    13d4:	01 00 20    	mov.w     #0x0, w1
    13d6:	57 02 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    self->io_write_val ^= ENABLE_TOGGLE;
    13d8:	1e 00 78    	mov.w     [w14], w0
    13da:	20 40 90    	mov.b     [w0+2], w0
    13dc:	80 40 78    	mov.b     w0, w1
    13de:	01 24 a2    	btg.b     w1, #0x2
    13e0:	1e 00 78    	mov.w     [w14], w0
    13e2:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    13e4:	1e 00 78    	mov.w     [w14], w0
    13e6:	20 40 90    	mov.b     [w0+2], w0
    13e8:	80 40 78    	mov.b     w0, w1
    13ea:	1e 00 78    	mov.w     [w14], w0
    13ec:	d7 ff 07    	rcall     0x139c <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    // delay_by_nop(1000);
}
    13ee:	00 80 fa    	ulnk      
    13f0:	00 00 06    	return    

000013f2 <___lcd_send>:

/* Send 8 bits of data as one 4-bit nibble, shifting in, second 4-bit nibble, and
shifting in */
void __lcd_send(_LCD *self, uint8_t value, uint8_t command) {
    13f2:	06 00 fa    	lnk       #0x6
    13f4:	10 07 98    	mov.w     w0, [w14+2]
    13f6:	41 47 98    	mov.b     w1, [w14+4]
    13f8:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t MS = value & 0x78;
    13fa:	4e 40 90    	mov.b     [w14+4], w0
    13fc:	81 c7 b3    	mov.b     #0x78, w1
    13fe:	01 4f 60    	and.b     w0, w1, [w14]
    uint8_t LS = value << 4;
    1400:	ce 40 90    	mov.b     [w14+4], w1
    1402:	40 00 20    	mov.w     #0x4, w0
    1404:	00 08 dd    	sl.w      w1, w0, w0
    1406:	10 47 98    	mov.b     w0, [w14+1]
    self->io_write_val = command | MS;
    1408:	5e 40 90    	mov.b     [w14+5], w0
    140a:	9e 40 70    	ior.b     w0, [w14], w1
    140c:	1e 00 90    	mov.w     [w14+2], w0
    140e:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1410:	1e 00 90    	mov.w     [w14+2], w0
    1412:	20 40 90    	mov.b     [w0+2], w0
    1414:	80 40 78    	mov.b     w0, w1
    1416:	1e 00 90    	mov.w     [w14+2], w0
    1418:	c1 ff 07    	rcall     0x139c <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    141a:	1e 00 90    	mov.w     [w14+2], w0
    141c:	cd ff 07    	rcall     0x13b8 <___lcd_enablePulse> <.LFB1> <.LFE0>
    self->io_write_val= command | LS;
    141e:	de 40 90    	mov.b     [w14+5], w1
    1420:	1e 40 90    	mov.b     [w14+1], w0
    1422:	80 c0 70    	ior.b     w1, w0, w1
    1424:	1e 00 90    	mov.w     [w14+2], w0
    1426:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1428:	1e 00 90    	mov.w     [w14+2], w0
    142a:	20 40 90    	mov.b     [w0+2], w0
    142c:	80 40 78    	mov.b     w0, w1
    142e:	1e 00 90    	mov.w     [w14+2], w0
    1430:	b5 ff 07    	rcall     0x139c <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    1432:	1e 00 90    	mov.w     [w14+2], w0
    1434:	c1 ff 07    	rcall     0x13b8 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    1436:	00 80 fa    	ulnk      
    1438:	00 00 06    	return    

0000143a <___lcd_send8>:

void __lcd_send8(_LCD *self, uint8_t value, uint8_t command) {
    143a:	04 00 fa    	lnk       #0x4
    143c:	00 0f 78    	mov.w     w0, [w14]
    143e:	21 47 98    	mov.b     w1, [w14+2]
    1440:	32 47 98    	mov.b     w2, [w14+3]
    value = value << 4;
    1442:	ae 40 90    	mov.b     [w14+2], w1
    1444:	40 00 20    	mov.w     #0x4, w0
    1446:	00 08 dd    	sl.w      w1, w0, w0
    1448:	20 47 98    	mov.b     w0, [w14+2]
    self->io_write_val = command | value;
    144a:	be 40 90    	mov.b     [w14+3], w1
    144c:	2e 40 90    	mov.b     [w14+2], w0
    144e:	80 c0 70    	ior.b     w1, w0, w1
    1450:	1e 00 78    	mov.w     [w14], w0
    1452:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1454:	1e 00 78    	mov.w     [w14], w0
    1456:	20 40 90    	mov.b     [w0+2], w0
    1458:	80 40 78    	mov.b     w0, w1
    145a:	1e 00 78    	mov.w     [w14], w0
    145c:	9f ff 07    	rcall     0x139c <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    145e:	1e 00 78    	mov.w     [w14], w0
    1460:	ab ff 07    	rcall     0x13b8 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    1462:	00 80 fa    	ulnk      
    1464:	00 00 06    	return    

00001466 <_init_lcd>:

/* Some code from last year's Spaceteam project that sets up three LCD screens on
 one bus with corresponding IO extender types and hard-wired addresses */
void init_lcd(uint8_t initiator) {
    1466:	02 00 fa    	lnk       #0x2
    1468:	00 4f 78    	mov.b     w0, [w14]

    i2c_init(1e3);
    146a:	80 3e 20    	mov.w     #0x3e8, w0
    146c:	1f 02 07    	rcall     0x18ac <_i2c_init> <.LFB1> <.LFE0>

    switch (initiator) {
    146e:	1e 80 fb    	ze        [w14], w0
    1470:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1472:	17 00 32    	bra       Z, 0x14a2 <.L8>
    1474:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1476:	03 00 3c    	bra       GT, 0x147e <.L11>
    1478:	00 00 e0    	cp0.w     w0
    147a:	06 00 32    	bra       Z, 0x1488 <.L7>
    147c:	39 00 37    	bra       0x14f0 <.L5>

0000147e <.L11>:
    147e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1480:	1d 00 32    	bra       Z, 0x14bc <.L9>
    1482:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1484:	28 00 32    	bra       Z, 0x14d6 <.L10>
    1486:	34 00 37    	bra       0x14f0 <.L5>

00001488 <.L7>:
        case 0: // Central
            lcd_init(&lcd[0], 0x05,'A');
    1488:	12 c4 b3    	mov.b     #0x41, w2
    148a:	51 c0 b3    	mov.b     #0x5, w1
    148c:	e0 80 20    	mov.w     #0x80e, w0
    148e:	32 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x07,'A');
    1490:	12 c4 b3    	mov.b     #0x41, w2
    1492:	71 c0 b3    	mov.b     #0x7, w1
    1494:	30 81 20    	mov.w     #0x813, w0
    1496:	2e 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'T');
    1498:	42 c5 b3    	mov.b     #0x54, w2
    149a:	61 c0 b3    	mov.b     #0x6, w1
    149c:	80 81 20    	mov.w     #0x818, w0
    149e:	2a 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            break;
    14a0:	27 00 37    	bra       0x14f0 <.L5>

000014a2 <.L8>:
        case 1:
            lcd_init(&lcd[0], 0x07,'A');
    14a2:	12 c4 b3    	mov.b     #0x41, w2
    14a4:	71 c0 b3    	mov.b     #0x7, w1
    14a6:	e0 80 20    	mov.w     #0x80e, w0
    14a8:	25 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'A');
    14aa:	12 c4 b3    	mov.b     #0x41, w2
    14ac:	61 c0 b3    	mov.b     #0x6, w1
    14ae:	80 81 20    	mov.w     #0x818, w0
    14b0:	21 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x05,'A');
    14b2:	12 c4 b3    	mov.b     #0x41, w2
    14b4:	51 c0 b3    	mov.b     #0x5, w1
    14b6:	30 81 20    	mov.w     #0x813, w0
    14b8:	1d 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            break;
    14ba:	1a 00 37    	bra       0x14f0 <.L5>

000014bc <.L9>:
        case 2:
            lcd_init(&lcd[0], 0x07,'T');
    14bc:	42 c5 b3    	mov.b     #0x54, w2
    14be:	71 c0 b3    	mov.b     #0x7, w1
    14c0:	e0 80 20    	mov.w     #0x80e, w0
    14c2:	18 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    14c4:	12 c4 b3    	mov.b     #0x41, w2
    14c6:	61 c0 b3    	mov.b     #0x6, w1
    14c8:	30 81 20    	mov.w     #0x813, w0
    14ca:	14 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    14cc:	12 c4 b3    	mov.b     #0x41, w2
    14ce:	51 c0 b3    	mov.b     #0x5, w1
    14d0:	80 81 20    	mov.w     #0x818, w0
    14d2:	10 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            break;
    14d4:	0d 00 37    	bra       0x14f0 <.L5>

000014d6 <.L10>:
        case 3:
            lcd_init(&lcd[0], 0x07,'A');
    14d6:	12 c4 b3    	mov.b     #0x41, w2
    14d8:	71 c0 b3    	mov.b     #0x7, w1
    14da:	e0 80 20    	mov.w     #0x80e, w0
    14dc:	0b 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    14de:	12 c4 b3    	mov.b     #0x41, w2
    14e0:	61 c0 b3    	mov.b     #0x6, w1
    14e2:	30 81 20    	mov.w     #0x813, w0
    14e4:	07 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    14e6:	12 c4 b3    	mov.b     #0x41, w2
    14e8:	51 c0 b3    	mov.b     #0x5, w1
    14ea:	80 81 20    	mov.w     #0x818, w0
    14ec:	03 00 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
            break;
    14ee:	00 00 00    	nop       

000014f0 <.L5>:
    }
}
    14f0:	00 80 fa    	ulnk      
    14f2:	00 00 06    	return    

000014f4 <_lcd_init>:

// Initializes the LCD screen hardware as per pg. 46 of the datasheet
void lcd_init(_LCD *self, uint8_t addr, char vendor) {
    14f4:	04 00 fa    	lnk       #0x4
    14f6:	00 0f 78    	mov.w     w0, [w14]
    14f8:	21 47 98    	mov.b     w1, [w14+2]
    14fa:	32 47 98    	mov.b     w2, [w14+3]
    switch(vendor){
    14fc:	3e 40 90    	mov.b     [w14+3], w0
    14fe:	00 00 fb    	se        w0, w0
    1500:	11 04 20    	mov.w     #0x41, w1
    1502:	81 0f 50    	sub.w     w0, w1, [w15]
    1504:	10 00 32    	bra       Z, 0x1526 <.L14>
    1506:	41 05 20    	mov.w     #0x54, w1
    1508:	81 0f 50    	sub.w     w0, w1, [w15]
    150a:	1a 00 3a    	bra       NZ, 0x1540 <.L13>
        case 'T':// 0x40 == vendor prefix for PCF8574T
            self->addr_write = 0x40 + (addr << 1);
    150c:	2e 40 90    	mov.b     [w14+2], w0
    150e:	00 40 40    	add.b     w0, w0, w0
    1510:	02 c4 b3    	mov.b     #0x40, w2
    1512:	82 40 40    	add.b     w0, w2, w1
    1514:	1e 00 78    	mov.w     [w14], w0
    1516:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x40 + (addr << 1)+1;
    1518:	2e 40 90    	mov.b     [w14+2], w0
    151a:	00 40 40    	add.b     w0, w0, w0
    151c:	12 c4 b3    	mov.b     #0x41, w2
    151e:	82 40 40    	add.b     w0, w2, w1
    1520:	1e 00 78    	mov.w     [w14], w0
    1522:	11 40 98    	mov.b     w1, [w0+1]
            break;
    1524:	0d 00 37    	bra       0x1540 <.L13>

00001526 <.L14>:
        case 'A':// 0x70 == vendor prefix PCF8574AT
            self->addr_write = 0x70 + (addr << 1);
    1526:	2e 40 90    	mov.b     [w14+2], w0
    1528:	00 40 40    	add.b     w0, w0, w0
    152a:	02 c7 b3    	mov.b     #0x70, w2
    152c:	82 40 40    	add.b     w0, w2, w1
    152e:	1e 00 78    	mov.w     [w14], w0
    1530:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x70 + (addr << 1)+1;
    1532:	2e 40 90    	mov.b     [w14+2], w0
    1534:	00 40 40    	add.b     w0, w0, w0
    1536:	12 c7 b3    	mov.b     #0x71, w2
    1538:	82 40 40    	add.b     w0, w2, w1
    153a:	1e 00 78    	mov.w     [w14], w0
    153c:	11 40 98    	mov.b     w1, [w0+1]
            break;
    153e:	00 00 00    	nop       

00001540 <.L13>:
    }

    self->display_control = 0x00;
    1540:	1e 00 78    	mov.w     [w14], w0
    1542:	80 40 eb    	clr.b     w1
    1544:	31 40 98    	mov.b     w1, [w0+3]
    self->display_mode = 0x00;
    1546:	1e 00 78    	mov.w     [w14], w0
    1548:	80 40 eb    	clr.b     w1
    154a:	41 40 98    	mov.b     w1, [w0+4]

    self->io_write_val = 0x00;
    154c:	1e 00 78    	mov.w     [w14], w0
    154e:	80 40 eb    	clr.b     w1
    1550:	21 40 98    	mov.b     w1, [w0+2]

    __lcd_i2c_write(self, 0x00);
    1552:	80 40 eb    	clr.b     w1
    1554:	1e 00 78    	mov.w     [w14], w0
    1556:	22 ff 07    	rcall     0x139c <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>

    delay_by_nop(15000);
    1558:	80 a9 23    	mov.w     #0x3a98, w0
    155a:	01 00 20    	mov.w     #0x0, w1
    155c:	94 01 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Some bullshit according to pg 46
    __lcd_send8(self, 0x03, INTERNAL_WRITE);
    155e:	82 c0 b3    	mov.b     #0x8, w2
    1560:	31 c0 b3    	mov.b     #0x3, w1
    1562:	1e 00 78    	mov.w     [w14], w0
    1564:	6a ff 07    	rcall     0x143a <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    1566:	80 38 21    	mov.w     #0x1388, w0
    1568:	01 00 20    	mov.w     #0x0, w1
    156a:	8d 01 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    156c:	82 c0 b3    	mov.b     #0x8, w2
    156e:	31 c0 b3    	mov.b     #0x3, w1
    1570:	1e 00 78    	mov.w     [w14], w0
    1572:	63 ff 07    	rcall     0x143a <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    1574:	80 38 21    	mov.w     #0x1388, w0
    1576:	01 00 20    	mov.w     #0x0, w1
    1578:	86 01 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    157a:	82 c0 b3    	mov.b     #0x8, w2
    157c:	31 c0 b3    	mov.b     #0x3, w1
    157e:	1e 00 78    	mov.w     [w14], w0
    1580:	5c ff 07    	rcall     0x143a <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    1582:	80 38 21    	mov.w     #0x1388, w0
    1584:	01 00 20    	mov.w     #0x0, w1
    1586:	7f 01 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Put it in 4 bit mode
    __lcd_send8(self, 0x02, INTERNAL_WRITE);//0b00110000
    1588:	82 c0 b3    	mov.b     #0x8, w2
    158a:	21 c0 b3    	mov.b     #0x2, w1
    158c:	1e 00 78    	mov.w     [w14], w0
    158e:	55 ff 07    	rcall     0x143a <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    1590:	80 38 21    	mov.w     #0x1388, w0
    1592:	01 00 20    	mov.w     #0x0, w1
    1594:	78 01 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x28, INTERNAL_WRITE); // Set rows and direction
    1596:	82 c0 b3    	mov.b     #0x8, w2
    1598:	81 c2 b3    	mov.b     #0x28, w1
    159a:	1e 00 78    	mov.w     [w14], w0
    159c:	2a ff 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    159e:	20 03 20    	mov.w     #0x32, w0
    15a0:	01 00 20    	mov.w     #0x0, w1
    15a2:	71 01 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x80, INTERNAL_WRITE); // Display off, cursor off
    15a4:	82 c0 b3    	mov.b     #0x8, w2
    15a6:	01 c8 b3    	mov.b     #0x80, w1
    15a8:	1e 00 78    	mov.w     [w14], w0
    15aa:	23 ff 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    15ac:	20 03 20    	mov.w     #0x32, w0
    15ae:	01 00 20    	mov.w     #0x0, w1
    15b0:	6a 01 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x01, INTERNAL_WRITE); // Go to home position
    15b2:	82 c0 b3    	mov.b     #0x8, w2
    15b4:	11 c0 b3    	mov.b     #0x1, w1
    15b6:	1e 00 78    	mov.w     [w14], w0
    15b8:	1c ff 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    15ba:	00 7d 20    	mov.w     #0x7d0, w0
    15bc:	01 00 20    	mov.w     #0x0, w1
    15be:	63 01 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x06, INTERNAL_WRITE); // Set curson direction
    15c0:	82 c0 b3    	mov.b     #0x8, w2
    15c2:	61 c0 b3    	mov.b     #0x6, w1
    15c4:	1e 00 78    	mov.w     [w14], w0
    15c6:	15 ff 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(5000);
    15c8:	80 38 21    	mov.w     #0x1388, w0
    15ca:	01 00 20    	mov.w     #0x0, w1
    15cc:	5c 01 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x0C, INTERNAL_WRITE); // Display on, cursor off
    15ce:	82 c0 b3    	mov.b     #0x8, w2
    15d0:	c1 c0 b3    	mov.b     #0xc, w1
    15d2:	1e 00 78    	mov.w     [w14], w0
    15d4:	0e ff 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
}
    15d6:	00 80 fa    	ulnk      
    15d8:	00 00 06    	return    

000015da <_lcd_stop>:

// Stops lcd I2C transfer
void lcd_stop(_LCD *self) {
    15da:	02 00 fa    	lnk       #0x2
    15dc:	00 0f 78    	mov.w     w0, [w14]
    reset_i2c_bus();
    15de:	a7 01 07    	rcall     0x192e <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    15e0:	00 80 fa    	ulnk      
    15e2:	00 00 06    	return    

000015e4 <_lcd_display>:

// Sends show display command to LCD
void lcd_display(_LCD *self, uint8_t on) {
    15e4:	04 00 fa    	lnk       #0x4
    15e6:	00 0f 78    	mov.w     w0, [w14]
    15e8:	21 47 98    	mov.b     w1, [w14+2]
    if (on) {
    15ea:	2e 40 90    	mov.b     [w14+2], w0
    15ec:	00 04 e0    	cp0.b     w0
    15ee:	07 00 32    	bra       Z, 0x15fe <.L18>
        self->display_control |= LCD_DISPLAYON;
    15f0:	1e 00 78    	mov.w     [w14], w0
    15f2:	30 40 90    	mov.b     [w0+3], w0
    15f4:	80 40 78    	mov.b     w0, w1
    15f6:	01 24 a0    	bset.b    w1, #0x2
    15f8:	1e 00 78    	mov.w     [w14], w0
    15fa:	31 40 98    	mov.b     w1, [w0+3]
    15fc:	06 00 37    	bra       0x160a <.L19>

000015fe <.L18>:
    } else {
        self->display_control &= ~LCD_DISPLAYON;
    15fe:	1e 00 78    	mov.w     [w14], w0
    1600:	b0 40 90    	mov.b     [w0+3], w1
    1602:	b0 cf b3    	mov.b     #0xfb, w0
    1604:	80 c0 60    	and.b     w1, w0, w1
    1606:	1e 00 78    	mov.w     [w14], w0
    1608:	31 40 98    	mov.b     w1, [w0+3]

0000160a <.L19>:
    }
    __lcd_send(self, self->display_control | LCD_DISPLAYCONTROL, INTERNAL_WRITE);
    160a:	1e 00 78    	mov.w     [w14], w0
    160c:	30 40 90    	mov.b     [w0+3], w0
    160e:	00 34 a0    	bset.b    w0, #0x3
    1610:	82 c0 b3    	mov.b     #0x8, w2
    1612:	80 40 78    	mov.b     w0, w1
    1614:	1e 00 78    	mov.w     [w14], w0
    1616:	ed fe 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
}
    1618:	00 80 fa    	ulnk      
    161a:	00 00 06    	return    

0000161c <_lcd_clear>:

// Sends clear display command to LCD
void lcd_clear(_LCD *self) {
    161c:	02 00 fa    	lnk       #0x2
    161e:	00 0f 78    	mov.w     w0, [w14]
    __lcd_send(self, LCD_CLEARDISPLAY, INTERNAL_WRITE);
    1620:	82 c0 b3    	mov.b     #0x8, w2
    1622:	11 c0 b3    	mov.b     #0x1, w1
    1624:	1e 00 78    	mov.w     [w14], w0
    1626:	e5 fe 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    1628:	00 7d 20    	mov.w     #0x7d0, w0
    162a:	01 00 20    	mov.w     #0x0, w1
    162c:	2c 01 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    162e:	00 80 fa    	ulnk      
    1630:	00 00 06    	return    

00001632 <_lcd_putc>:

// Sends single character to LCD display
void lcd_putc(_LCD *self, char c) {
    1632:	04 00 fa    	lnk       #0x4
    1634:	00 0f 78    	mov.w     w0, [w14]
    1636:	21 47 98    	mov.b     w1, [w14+2]
    __lcd_send(self, c, DR_WRITE);
    1638:	2e 40 90    	mov.b     [w14+2], w0
    163a:	92 c0 b3    	mov.b     #0x9, w2
    163c:	80 40 78    	mov.b     w0, w1
    163e:	1e 00 78    	mov.w     [w14], w0
    1640:	d8 fe 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
    // delay_by_nop(1000);
}
    1642:	00 80 fa    	ulnk      
    1644:	00 00 06    	return    

00001646 <_lcd_goto>:

// Sends commands to move LCD cursor to specified location
void lcd_goto(_LCD *self, uint8_t line, uint8_t col) { //x=col, y=row
    1646:	06 00 fa    	lnk       #0x6
    1648:	10 07 98    	mov.w     w0, [w14+2]
    164a:	41 47 98    	mov.b     w1, [w14+4]
    164c:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t address;
    switch(line) {
    164e:	4e 40 90    	mov.b     [w14+4], w0
    1650:	00 80 fb    	ze        w0, w0
    1652:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1654:	03 00 32    	bra       Z, 0x165c <.L24>
    1656:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1658:	04 00 32    	bra       Z, 0x1662 <.L25>
    165a:	06 00 37    	bra       0x1668 <.L27>

0000165c <.L24>:
        case 1:
            address = 0x00;
    165c:	00 40 eb    	clr.b     w0
    165e:	00 4f 78    	mov.b     w0, [w14]
            break;
    1660:	06 00 37    	bra       0x166e <.L26>

00001662 <.L25>:
        case 2:
            address = 0x40;
    1662:	00 c4 b3    	mov.b     #0x40, w0
    1664:	00 4f 78    	mov.b     w0, [w14]
            break;
    1666:	03 00 37    	bra       0x166e <.L26>

00001668 <.L27>:
        default:
            address = 0x00;
    1668:	00 40 eb    	clr.b     w0
    166a:	00 4f 78    	mov.b     w0, [w14]
            break;
    166c:	00 00 00    	nop       

0000166e <.L26>:
    }

    address = address+col;
    166e:	5e 40 90    	mov.b     [w14+5], w0
    1670:	1e 4f 40    	add.b     w0, [w14], [w14]
    __lcd_send(self, LCD_SETDDRAMADDR | address, INTERNAL_WRITE);
    1672:	1e 40 78    	mov.b     [w14], w0
    1674:	00 74 a0    	bset.b    w0, #0x7
    1676:	82 c0 b3    	mov.b     #0x8, w2
    1678:	80 40 78    	mov.b     w0, w1
    167a:	1e 00 90    	mov.w     [w14+2], w0
    167c:	ba fe 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
}
    167e:	00 80 fa    	ulnk      
    1680:	00 00 06    	return    

00001682 <_lcd_cursor>:


void lcd_cursor(_LCD *self, uint8_t cur) {
    1682:	04 00 fa    	lnk       #0x4
    1684:	00 0f 78    	mov.w     w0, [w14]
    1686:	21 47 98    	mov.b     w1, [w14+2]
    switch(cur) {
    1688:	2e 40 90    	mov.b     [w14+2], w0
    168a:	00 80 fb    	ze        w0, w0
    168c:	00 00 e0    	cp0.w     w0
    168e:	03 00 32    	bra       Z, 0x1696 <.L30>
    1690:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1692:	06 00 32    	bra       Z, 0x16a0 <.L31>
        case 0:
            __lcd_send(self, 0x0C, INTERNAL_WRITE);
            break;
        case 1:
            __lcd_send(self, 0x0E, INTERNAL_WRITE);
            break;
        default:
            break;
    1694:	0a 00 37    	bra       0x16aa <.L28>

00001696 <.L30>:
    1696:	82 c0 b3    	mov.b     #0x8, w2
    1698:	c1 c0 b3    	mov.b     #0xc, w1
    169a:	1e 00 78    	mov.w     [w14], w0
    169c:	aa fe 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
    169e:	05 00 37    	bra       0x16aa <.L28>

000016a0 <.L31>:
    16a0:	82 c0 b3    	mov.b     #0x8, w2
    16a2:	e1 c0 b3    	mov.b     #0xe, w1
    16a4:	1e 00 78    	mov.w     [w14], w0
    16a6:	a5 fe 07    	rcall     0x13f2 <___lcd_send> <.LFB2> <.LFE1>
    16a8:	00 00 00    	nop       

000016aa <.L28>:
    }
}
    16aa:	00 80 fa    	ulnk      
    16ac:	00 00 06    	return    

000016ae <_lcd_print1>:

void lcd_print1(_LCD *self, char *str) {
    16ae:	04 00 fa    	lnk       #0x4
    16b0:	00 0f 78    	mov.w     w0, [w14]
    16b2:	11 07 98    	mov.w     w1, [w14+2]
    lcd_clear(self);
    16b4:	1e 00 78    	mov.w     [w14], w0
    16b6:	b2 ff 07    	rcall     0x161c <_lcd_clear> <.LFB8> <.LFE7>
    while (*str) {
    16b8:	08 00 37    	bra       0x16ca <.L34>

000016ba <.L35>:
        lcd_putc(self, *str);
    16ba:	1e 00 90    	mov.w     [w14+2], w0
    16bc:	10 40 78    	mov.b     [w0], w0
    16be:	80 40 78    	mov.b     w0, w1
    16c0:	1e 00 78    	mov.w     [w14], w0
    16c2:	b7 ff 07    	rcall     0x1632 <_lcd_putc> <.LFB9> <.LFE8>
        str++;
    16c4:	1e 00 90    	mov.w     [w14+2], w0
    16c6:	00 00 e8    	inc.w     w0, w0
    16c8:	10 07 98    	mov.w     w0, [w14+2]

000016ca <.L34>:
    16ca:	1e 00 90    	mov.w     [w14+2], w0
    16cc:	10 40 78    	mov.b     [w0], w0
    16ce:	00 04 e0    	cp0.b     w0
    16d0:	f4 ff 3a    	bra       NZ, 0x16ba <.L35>
    }
}
    16d2:	00 80 fa    	ulnk      
    16d4:	00 00 06    	return    

000016d6 <_lcd_print2>:

void lcd_print2(_LCD *self, char* line1, char* line2){
    16d6:	42 00 fa    	lnk       #0x42
    16d8:	60 1f 98    	mov.w     w0, [w14+60]
    16da:	71 1f 98    	mov.w     w1, [w14+62]
    16dc:	02 27 98    	mov.w     w2, [w14+64]
    lcd_clear(self);
    16de:	6e 18 90    	mov.w     [w14+60], w0
    16e0:	9d ff 07    	rcall     0x161c <_lcd_clear> <.LFB8> <.LFE7>
    char str[56] ="                                                        ";
    16e2:	a0 30 29    	mov.w     #0x930a, w0
    16e4:	e4 00 47    	add.w     w14, #0x4, w1
    16e6:	37 00 09    	repeat    #0x37
    16e8:	b0 58 78    	mov.b     [w0++], [w1++]
    16ea:	80 03 b1    	sub.w     #0x38, w0
    int i =0;
    16ec:	00 00 eb    	clr.w     w0
    16ee:	00 0f 78    	mov.w     w0, [w14]
    while (*line1){
    16f0:	09 00 37    	bra       0x1704 <.L37>

000016f2 <.L38>:
        str[i]=*line1;
    16f2:	7e 18 90    	mov.w     [w14+62], w0
    16f4:	90 40 78    	mov.b     [w0], w1
    16f6:	64 00 47    	add.w     w14, #0x4, w0
    16f8:	1e 00 40    	add.w     w0, [w14], w0
    16fa:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    16fc:	1e 0f e8    	inc.w     [w14], [w14]
        line1++;
    16fe:	7e 18 90    	mov.w     [w14+62], w0
    1700:	00 00 e8    	inc.w     w0, w0
    1702:	70 1f 98    	mov.w     w0, [w14+62]

00001704 <.L37>:
    1704:	7e 18 90    	mov.w     [w14+62], w0
    1706:	10 40 78    	mov.b     [w0], w0
    1708:	00 04 e0    	cp0.b     w0
    170a:	f3 ff 3a    	bra       NZ, 0x16f2 <.L38>
    }
    i =40;
    170c:	80 02 20    	mov.w     #0x28, w0
    170e:	00 0f 78    	mov.w     w0, [w14]
    while (*line2){
    1710:	09 00 37    	bra       0x1724 <.L39>

00001712 <.L40>:
        str[i]=*line2;
    1712:	0e 20 90    	mov.w     [w14+64], w0
    1714:	90 40 78    	mov.b     [w0], w1
    1716:	64 00 47    	add.w     w14, #0x4, w0
    1718:	1e 00 40    	add.w     w0, [w14], w0
    171a:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    171c:	1e 0f e8    	inc.w     [w14], [w14]
        line2++;
    171e:	0e 20 90    	mov.w     [w14+64], w0
    1720:	00 00 e8    	inc.w     w0, w0
    1722:	00 27 98    	mov.w     w0, [w14+64]

00001724 <.L39>:
    1724:	0e 20 90    	mov.w     [w14+64], w0
    1726:	10 40 78    	mov.b     [w0], w0
    1728:	00 04 e0    	cp0.b     w0
    172a:	f3 ff 3a    	bra       NZ, 0x1712 <.L40>
    }
    char* strptr=str;
    172c:	64 00 47    	add.w     w14, #0x4, w0
    172e:	10 07 98    	mov.w     w0, [w14+2]
    lcd_print1(self,strptr);
    1730:	9e 00 90    	mov.w     [w14+2], w1
    1732:	6e 18 90    	mov.w     [w14+60], w0
    1734:	bc ff 07    	rcall     0x16ae <_lcd_print1> <.LFB12> <.LFE11>
}
    1736:	00 80 fa    	ulnk      
    1738:	00 00 06    	return    

0000173a <_lcd_print>:

void lcd_print(_LCD *self, char* message) {
    173a:	30 00 fa    	lnk       #0x30
    173c:	60 17 98    	mov.w     w0, [w14+44]
    173e:	71 17 98    	mov.w     w1, [w14+46]
    char newstr1[17] = "                ";
    1740:	30 34 29    	mov.w     #0x9343, w0
    1742:	ea 00 47    	add.w     w14, #0xa, w1
    1744:	10 00 09    	repeat    #0x10
    1746:	b0 58 78    	mov.b     [w0++], [w1++]
    1748:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr1= newstr1;
    174a:	6a 0f 47    	add.w     w14, #0xa, [w14]
    char newstr2[17] = "                ";
    174c:	30 34 29    	mov.w     #0x9343, w0
    174e:	fb 00 47    	add.w     w14, #0x1b, w1
    1750:	10 00 09    	repeat    #0x10
    1752:	b0 58 78    	mov.b     [w0++], [w1++]
    1754:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr2= newstr2;
    1756:	7b 00 47    	add.w     w14, #0x1b, w0
    1758:	10 07 98    	mov.w     w0, [w14+2]
    char* temp1 = newstrptr1;
    175a:	9e 00 78    	mov.w     [w14], w1
    175c:	31 07 98    	mov.w     w1, [w14+6]
    char* temp2 = newstrptr2;
    175e:	9e 00 90    	mov.w     [w14+2], w1
    1760:	41 07 98    	mov.w     w1, [w14+8]
    uint8_t i=0;
    1762:	00 40 eb    	clr.b     w0
    1764:	40 47 98    	mov.b     w0, [w14+4]
    while (i <17){
    1766:	0f 00 37    	bra       0x1786 <.L42>

00001768 <.L44>:
        if (*message){
    1768:	7e 10 90    	mov.w     [w14+46], w0
    176a:	10 40 78    	mov.b     [w0], w0
    176c:	00 04 e0    	cp0.b     w0
    176e:	08 00 32    	bra       Z, 0x1780 <.L43>
            *newstrptr1=*message;
    1770:	7e 10 90    	mov.w     [w14+46], w0
    1772:	90 40 78    	mov.b     [w0], w1
    1774:	1e 00 78    	mov.w     [w14], w0
    1776:	01 48 78    	mov.b     w1, [w0]
            message++;
    1778:	7e 10 90    	mov.w     [w14+46], w0
    177a:	00 00 e8    	inc.w     w0, w0
    177c:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr1++;
    177e:	1e 0f e8    	inc.w     [w14], [w14]

00001780 <.L43>:
        }
        i++;
    1780:	4e 40 90    	mov.b     [w14+4], w0
    1782:	00 40 e8    	inc.b     w0, w0
    1784:	40 47 98    	mov.b     w0, [w14+4]

00001786 <.L42>:
    1786:	4e 40 90    	mov.b     [w14+4], w0
    1788:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    178a:	ee ff 36    	bra       LEU, 0x1768 <.L44>
    }
    i=0;
    178c:	00 40 eb    	clr.b     w0
    178e:	40 47 98    	mov.b     w0, [w14+4]
    message--; //SKETCHY!
    1790:	7e 10 90    	mov.w     [w14+46], w0
    1792:	00 00 e9    	dec.w     w0, w0
    1794:	70 17 98    	mov.w     w0, [w14+46]
    while (i <17){
    1796:	11 00 37    	bra       0x17ba <.L45>

00001798 <.L47>:
        if (*message){
    1798:	7e 10 90    	mov.w     [w14+46], w0
    179a:	10 40 78    	mov.b     [w0], w0
    179c:	00 04 e0    	cp0.b     w0
    179e:	0a 00 32    	bra       Z, 0x17b4 <.L46>
            *newstrptr2=*message;
    17a0:	7e 10 90    	mov.w     [w14+46], w0
    17a2:	90 40 78    	mov.b     [w0], w1
    17a4:	1e 00 90    	mov.w     [w14+2], w0
    17a6:	01 48 78    	mov.b     w1, [w0]
            message++;
    17a8:	7e 10 90    	mov.w     [w14+46], w0
    17aa:	00 00 e8    	inc.w     w0, w0
    17ac:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr2++;
    17ae:	1e 00 90    	mov.w     [w14+2], w0
    17b0:	00 00 e8    	inc.w     w0, w0
    17b2:	10 07 98    	mov.w     w0, [w14+2]

000017b4 <.L46>:
        }
        i++;
    17b4:	4e 40 90    	mov.b     [w14+4], w0
    17b6:	00 40 e8    	inc.b     w0, w0
    17b8:	40 47 98    	mov.b     w0, [w14+4]

000017ba <.L45>:
    17ba:	4e 40 90    	mov.b     [w14+4], w0
    17bc:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    17be:	ec ff 36    	bra       LEU, 0x1798 <.L47>
    }
    lcd_print2(self, temp1, temp2);
    17c0:	4e 01 90    	mov.w     [w14+8], w2
    17c2:	be 00 90    	mov.w     [w14+6], w1
    17c4:	6e 10 90    	mov.w     [w14+44], w0
    17c6:	87 ff 07    	rcall     0x16d6 <_lcd_print2> <.LFB13> <.LFE12>
}
    17c8:	00 80 fa    	ulnk      
    17ca:	00 00 06    	return    

000017cc <_lcd_broadcast>:

void lcd_broadcast(char* message) {
    17cc:	04 00 fa    	lnk       #0x4
    17ce:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t i;
    for (i = 0; i < 3; i++)
    17d0:	00 40 eb    	clr.b     w0
    17d2:	00 4f 78    	mov.b     w0, [w14]
    17d4:	08 00 37    	bra       0x17e6 <.L49>

000017d6 <.L50>:
        lcd_print(&lcd[i], message);
    17d6:	1e 80 fb    	ze        [w14], w0
    17d8:	65 00 b9    	mul.su    w0, #0x5, w0
    17da:	80 00 78    	mov.w     w0, w1
    17dc:	e0 80 20    	mov.w     #0x80e, w0
    17de:	00 80 40    	add.w     w1, w0, w0
    17e0:	9e 00 90    	mov.w     [w14+2], w1
    17e2:	ab ff 07    	rcall     0x173a <_lcd_print> <.LFB14> <.LFE13>
    17e4:	1e 4f e8    	inc.b     [w14], [w14]

000017e6 <.L49>:
    17e6:	1e 40 78    	mov.b     [w14], w0
    17e8:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    17ea:	f5 ff 36    	bra       LEU, 0x17d6 <.L50>
}
    17ec:	00 80 fa    	ulnk      
    17ee:	00 00 06    	return    

000017f0 <_itoa>:

char * itoa (int value, char *result, int base) {
    17f0:	0e 00 fa    	lnk       #0xe
    17f2:	40 07 98    	mov.w     w0, [w14+8]
    17f4:	51 07 98    	mov.w     w1, [w14+10]
    17f6:	62 07 98    	mov.w     w2, [w14+12]
    // check that the base if valid
    if (base < 2 || base > 36) { *result = '\0'; return result; }
    17f8:	6e 00 90    	mov.w     [w14+12], w0
    17fa:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    17fc:	04 00 34    	bra       LE, 0x1806 <.L52>
    17fe:	ee 00 90    	mov.w     [w14+12], w1
    1800:	40 02 20    	mov.w     #0x24, w0
    1802:	80 8f 50    	sub.w     w1, w0, [w15]
    1804:	05 00 34    	bra       LE, 0x1810 <.L53>

00001806 <.L52>:
    1806:	5e 00 90    	mov.w     [w14+10], w0
    1808:	80 40 eb    	clr.b     w1
    180a:	01 48 78    	mov.b     w1, [w0]
    180c:	5e 00 90    	mov.w     [w14+10], w0
    180e:	39 00 37    	bra       0x1882 <.L54>

00001810 <.L53>:

    char* ptr = result, *ptr1 = result, tmp_char;
    1810:	de 00 90    	mov.w     [w14+10], w1
    1812:	01 0f 78    	mov.w     w1, [w14]
    1814:	5e 01 90    	mov.w     [w14+10], w2
    1816:	12 07 98    	mov.w     w2, [w14+2]

00001818 <.L55>:
    int tmp_value;

    do {
        tmp_value = value;
    1818:	ce 00 90    	mov.w     [w14+8], w1
    181a:	21 07 98    	mov.w     w1, [w14+4]
        value /= base;
    181c:	ce 00 90    	mov.w     [w14+8], w1
    181e:	6e 00 90    	mov.w     [w14+12], w0
    1820:	00 01 78    	mov.w     w0, w2
    1822:	11 00 09    	repeat    #0x11
    1824:	82 00 d8    	div.sw    w1, w2
    1826:	40 07 98    	mov.w     w0, [w14+8]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
    1828:	ce 00 90    	mov.w     [w14+8], w1
    182a:	6e 00 90    	mov.w     [w14+12], w0
    182c:	00 88 b9    	mul.ss    w1, w0, w0
    182e:	00 00 78    	mov.w     w0, w0
    1830:	ae 00 90    	mov.w     [w14+4], w1
    1832:	00 80 50    	sub.w     w1, w0, w0
    1834:	30 02 b0    	add.w     #0x23, w0
    1836:	41 35 29    	mov.w     #0x9354, w1
    1838:	e1 40 78    	mov.b     [w1+w0], w1
    183a:	1e 00 78    	mov.w     [w14], w0
    183c:	01 48 78    	mov.b     w1, [w0]
    183e:	1e 0f e8    	inc.w     [w14], [w14]
    } while ( value );
    1840:	4e 00 90    	mov.w     [w14+8], w0
    1842:	00 00 e0    	cp0.w     w0
    1844:	e9 ff 3a    	bra       NZ, 0x1818 <.L55>

    // Apply negative sign
    if (tmp_value < 0) *ptr++ = '-';
    1846:	2e 00 90    	mov.w     [w14+4], w0
    1848:	00 00 e0    	cp0.w     w0
    184a:	04 00 3d    	bra       GE, 0x1854 <.L56>
    184c:	1e 00 78    	mov.w     [w14], w0
    184e:	d1 c2 b3    	mov.b     #0x2d, w1
    1850:	01 48 78    	mov.b     w1, [w0]
    1852:	1e 0f e8    	inc.w     [w14], [w14]

00001854 <.L56>:
    *ptr-- = '\0';
    1854:	1e 00 78    	mov.w     [w14], w0
    1856:	80 40 eb    	clr.b     w1
    1858:	01 48 78    	mov.b     w1, [w0]
    185a:	1e 0f e9    	dec.w     [w14], [w14]
    while (ptr1 < ptr) {
    185c:	0e 00 37    	bra       0x187a <.L57>

0000185e <.L58>:
        tmp_char = *ptr;
    185e:	1e 00 78    	mov.w     [w14], w0
    1860:	90 40 78    	mov.b     [w0], w1
    1862:	61 47 98    	mov.b     w1, [w14+6]
        *ptr--= *ptr1;
    1864:	1e 00 90    	mov.w     [w14+2], w0
    1866:	90 40 78    	mov.b     [w0], w1
    1868:	1e 00 78    	mov.w     [w14], w0
    186a:	01 48 78    	mov.b     w1, [w0]
    186c:	1e 0f e9    	dec.w     [w14], [w14]
        *ptr1++ = tmp_char;
    186e:	1e 00 90    	mov.w     [w14+2], w0
    1870:	6e 41 90    	mov.b     [w14+6], w2
    1872:	02 48 78    	mov.b     w2, [w0]
    1874:	1e 00 90    	mov.w     [w14+2], w0
    1876:	00 00 e8    	inc.w     w0, w0
    1878:	10 07 98    	mov.w     w0, [w14+2]

0000187a <.L57>:
    187a:	1e 00 90    	mov.w     [w14+2], w0
    187c:	9e 0f 50    	sub.w     w0, [w14], [w15]
    187e:	ef ff 39    	bra       NC, 0x185e <.L58>
    }
    return result;
    1880:	5e 00 90    	mov.w     [w14+10], w0

00001882 <.L54>:
}
    1882:	00 80 fa    	ulnk      
    1884:	00 00 06    	return    

00001886 <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    1886:	08 00 fa    	lnk       #0x8
    1888:	20 07 98    	mov.w     w0, [w14+4]
    188a:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    188c:	60 00 b8    	mul.uu    w0, #0x0, w0
    188e:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    1890:	05 00 37    	bra       0x189c <.L2>

00001892 <.L3>:
        __asm__("nop");
    1892:	00 00 00    	nop       
        count +=1;
    1894:	12 00 20    	mov.w     #0x1, w2
    1896:	03 00 20    	mov.w     #0x0, w3
    1898:	1e 0f 41    	add.w     w2, [w14], [w14]
    189a:	5e 97 49    	addc.w    w3, [++w14], [w14--]

0000189c <.L2>:
    189c:	2e 00 90    	mov.w     [w14+4], w0
    189e:	be 00 90    	mov.w     [w14+6], w1
    18a0:	1e 01 be    	mov.d     [w14], w2
    18a2:	80 0f 51    	sub.w     w2, w0, [w15]
    18a4:	81 8f 59    	subb.w    w3, w1, [w15]
    18a6:	f5 ff 39    	bra       NC, 0x1892 <.L3>
    }
}
    18a8:	00 80 fa    	ulnk      
    18aa:	00 00 06    	return    

000018ac <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    18ac:	04 00 fa    	lnk       #0x4
    18ae:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    18b0:	1e 00 90    	mov.w     [w14+2], w0
    18b2:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    18b4:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    18b6:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    18b8:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    18ba:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    18bc:	80 13 80    	mov.w     0x270, w0
    18be:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    18c0:	36 00 07    	rcall     0x192e <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    18c2:	00 80 fa    	ulnk      
    18c4:	00 00 06    	return    

000018c6 <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    18c6:	02 00 fa    	lnk       #0x2
   int x = 0;
    18c8:	00 00 eb    	clr.w     w0
    18ca:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    18cc:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    18ce:	a0 00 20    	mov.w     #0xa, w0
    18d0:	01 00 20    	mov.w     #0x0, w1
    18d2:	d9 ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    18d4:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    18d6:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    18d8:	07 00 37    	bra       0x18e8 <.L6>

000018da <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    18da:	10 00 20    	mov.w     #0x1, w0
    18dc:	01 00 20    	mov.w     #0x0, w1
    18de:	d3 ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    18e0:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    18e2:	1e 00 78    	mov.w     [w14], w0
    18e4:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    18e6:	05 00 3c    	bra       GT, 0x18f2 <.L9>

000018e8 <.L6>:
    18e8:	b0 13 80    	mov.w     0x276, w0
    18ea:	61 00 60    	and.w     w0, #0x1, w0
    18ec:	00 00 e0    	cp0.w     w0
    18ee:	f5 ff 3a    	bra       NZ, 0x18da <.L8>
    18f0:	01 00 37    	bra       0x18f4 <.L7>

000018f2 <.L9>:
      break;
    18f2:	00 00 00    	nop       

000018f4 <.L7>:
   }
   delay_by_nop(2);
    18f4:	20 00 20    	mov.w     #0x2, w0
    18f6:	01 00 20    	mov.w     #0x0, w1
    18f8:	c6 ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    18fa:	00 80 fa    	ulnk      
    18fc:	00 00 06    	return    

000018fe <_i2c_restart>:

void i2c_restart(void){
    18fe:	02 00 fa    	lnk       #0x2
   int x = 0;
    1900:	00 00 eb    	clr.w     w0
    1902:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    1904:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    1906:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    1908:	07 00 37    	bra       0x1918 <.L11>

0000190a <.L13>:
      delay_by_nop(1);
    190a:	10 00 20    	mov.w     #0x1, w0
    190c:	01 00 20    	mov.w     #0x0, w1
    190e:	bb ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1910:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    1912:	1e 00 78    	mov.w     [w14], w0
    1914:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1916:	05 00 3c    	bra       GT, 0x1922 <.L14>

00001918 <.L11>:
    1918:	b0 13 80    	mov.w     0x276, w0
    191a:	62 00 60    	and.w     w0, #0x2, w0
    191c:	00 00 e0    	cp0.w     w0
    191e:	f5 ff 3a    	bra       NZ, 0x190a <.L13>
    1920:	01 00 37    	bra       0x1924 <.L12>

00001922 <.L14>:
    1922:	00 00 00    	nop       

00001924 <.L12>:
   }
   delay_by_nop(2);
    1924:	20 00 20    	mov.w     #0x2, w0
    1926:	01 00 20    	mov.w     #0x0, w1
    1928:	ae ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    192a:	00 80 fa    	ulnk      
    192c:	00 00 06    	return    

0000192e <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    192e:	02 00 fa    	lnk       #0x2
   int x = 0;
    1930:	00 00 eb    	clr.w     w0
    1932:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    1934:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    1936:	07 00 37    	bra       0x1946 <.L16>

00001938 <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    1938:	10 00 20    	mov.w     #0x1, w0
    193a:	01 00 20    	mov.w     #0x0, w1
    193c:	a4 ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    193e:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    1940:	1e 00 78    	mov.w     [w14], w0
    1942:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1944:	05 00 3c    	bra       GT, 0x1950 <.L19>

00001946 <.L16>:
    1946:	b0 13 80    	mov.w     0x276, w0
    1948:	64 00 60    	and.w     w0, #0x4, w0
    194a:	00 00 e0    	cp0.w     w0
    194c:	f5 ff 3a    	bra       NZ, 0x1938 <.L18>
    194e:	01 00 37    	bra       0x1952 <.L17>

00001950 <.L19>:
    1950:	00 00 00    	nop       

00001952 <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    1952:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    1954:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    1956:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    1958:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    195a:	40 01 20    	mov.w     #0x14, w0
    195c:	01 00 20    	mov.w     #0x0, w1
    195e:	93 ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1960:	00 80 fa    	ulnk      
    1962:	00 00 06    	return    

00001964 <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    1964:	04 00 fa    	lnk       #0x4
    1966:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    1968:	00 00 00    	nop       

0000196a <.L21>:
    196a:	c0 13 80    	mov.w     0x278, w0
    196c:	61 00 60    	and.w     w0, #0x1, w0
    196e:	00 00 e0    	cp0.w     w0
    1970:	fc ff 3a    	bra       NZ, 0x196a <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    1972:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    1974:	1e 00 90    	mov.w     [w14+2], w0
    1976:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    1978:	00 00 eb    	clr.w     w0
    197a:	00 0f 78    	mov.w     w0, [w14]
    197c:	09 00 37    	bra       0x1990 <.L22>

0000197e <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    197e:	c1 13 80    	mov.w     0x278, w1
    1980:	00 00 24    	mov.w     #0x4000, w0
    1982:	00 80 60    	and.w     w1, w0, w0
    1984:	00 00 e0    	cp0.w     w0
    1986:	09 00 32    	bra       Z, 0x199a <.L29>
      delay_by_nop(1); }
    1988:	10 00 20    	mov.w     #0x1, w0
    198a:	01 00 20    	mov.w     #0x0, w1
    198c:	7c ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    198e:	1e 0f e8    	inc.w     [w14], [w14]

00001990 <.L22>:
    1990:	30 1f 20    	mov.w     #0x1f3, w0
    1992:	9e 00 78    	mov.w     [w14], w1
    1994:	80 8f 50    	sub.w     w1, w0, [w15]
    1996:	f3 ff 34    	bra       LE, 0x197e <.L25>
    1998:	01 00 37    	bra       0x199c <.L24>

0000199a <.L29>:
    199a:	00 00 00    	nop       

0000199c <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    199c:	40 1f 20    	mov.w     #0x1f4, w0
    199e:	9e 00 78    	mov.w     [w14], w1
    19a0:	80 8f 50    	sub.w     w1, w0, [w15]
    19a2:	02 00 3a    	bra       NZ, 0x19a8 <.L26>
        return(1); }    // return 1 to indicate failure
    19a4:	10 c0 b3    	mov.b     #0x1, w0
    19a6:	0c 00 37    	bra       0x19c0 <.L27>

000019a8 <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    19a8:	c1 13 80    	mov.w     0x278, w1
    19aa:	00 00 28    	mov.w     #0x8000, w0
    19ac:	00 80 60    	and.w     w1, w0, w0
    19ae:	00 00 e0    	cp0.w     w0
    19b0:	03 00 32    	bra       Z, 0x19b8 <.L28>
      reset_i2c_bus();
    19b2:	bd ff 07    	rcall     0x192e <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    19b4:	10 c0 b3    	mov.b     #0x1, w0
    19b6:	04 00 37    	bra       0x19c0 <.L27>

000019b8 <.L28>:

   delay_by_nop(2);
    19b8:	20 00 20    	mov.w     #0x2, w0
    19ba:	01 00 20    	mov.w     #0x0, w1
    19bc:	64 ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    19be:	00 40 eb    	clr.b     w0

000019c0 <.L27>:
}
    19c0:	00 80 fa    	ulnk      
    19c2:	00 00 06    	return    

000019c4 <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    19c4:	04 00 fa    	lnk       #0x4
   int i = 0;
    19c6:	00 00 eb    	clr.w     w0
    19c8:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    19ca:	00 40 eb    	clr.b     w0
    19cc:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    19ce:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    19d0:	05 00 37    	bra       0x19dc <.L31>

000019d2 <.L33>:
      i ++;
    19d2:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    19d4:	00 7d 20    	mov.w     #0x7d0, w0
    19d6:	9e 00 78    	mov.w     [w14], w1
    19d8:	80 8f 50    	sub.w     w1, w0, [w15]
    19da:	05 00 3c    	bra       GT, 0x19e6 <.L34>

000019dc <.L31>:
    19dc:	c0 13 80    	mov.w     0x278, w0
    19de:	62 00 60    	and.w     w0, #0x2, w0
    19e0:	00 00 e0    	cp0.w     w0
    19e2:	f7 ff 32    	bra       Z, 0x19d2 <.L33>
    19e4:	01 00 37    	bra       0x19e8 <.L32>

000019e6 <.L34>:
    19e6:	00 00 00    	nop       

000019e8 <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    19e8:	80 13 80    	mov.w     0x270, w0
    19ea:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    19ec:	2e 40 90    	mov.b     [w14+2], w0
}
    19ee:	00 80 fa    	ulnk      
    19f0:	00 00 06    	return    

000019f2 <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    19f2:	04 00 fa    	lnk       #0x4
   int i = 0;
    19f4:	00 00 eb    	clr.w     w0
    19f6:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    19f8:	00 40 eb    	clr.b     w0
    19fa:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    19fc:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    19fe:	05 00 37    	bra       0x1a0a <.L36>

00001a00 <.L38>:
      i++;
    1a00:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1a02:	00 7d 20    	mov.w     #0x7d0, w0
    1a04:	9e 00 78    	mov.w     [w14], w1
    1a06:	80 8f 50    	sub.w     w1, w0, [w15]
    1a08:	05 00 3c    	bra       GT, 0x1a14 <.L39>

00001a0a <.L36>:
    1a0a:	c0 13 80    	mov.w     0x278, w0
    1a0c:	62 00 60    	and.w     w0, #0x2, w0
    1a0e:	00 00 e0    	cp0.w     w0
    1a10:	f7 ff 32    	bra       Z, 0x1a00 <.L38>
    1a12:	01 00 37    	bra       0x1a16 <.L37>

00001a14 <.L39>:
    1a14:	00 00 00    	nop       

00001a16 <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    1a16:	80 13 80    	mov.w     0x270, w0
    1a18:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    1a1a:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    1a1c:	a0 00 20    	mov.w     #0xa, w0
    1a1e:	01 00 20    	mov.w     #0x0, w1
    1a20:	32 ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    1a22:	2e 40 90    	mov.b     [w14+2], w0
}
    1a24:	00 80 fa    	ulnk      
    1a26:	00 00 06    	return    

00001a28 <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    1a28:	04 00 fa    	lnk       #0x4
   int i = 0;
    1a2a:	00 00 eb    	clr.w     w0
    1a2c:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1a2e:	00 40 eb    	clr.b     w0
    1a30:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1a32:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    1a34:	05 00 37    	bra       0x1a40 <.L41>

00001a36 <.L43>:
      i++;
    1a36:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1a38:	00 7d 20    	mov.w     #0x7d0, w0
    1a3a:	9e 00 78    	mov.w     [w14], w1
    1a3c:	80 8f 50    	sub.w     w1, w0, [w15]
    1a3e:	05 00 3c    	bra       GT, 0x1a4a <.L44>

00001a40 <.L41>:
    1a40:	c0 13 80    	mov.w     0x278, w0
    1a42:	62 00 60    	and.w     w0, #0x2, w0
    1a44:	00 00 e0    	cp0.w     w0
    1a46:	f7 ff 32    	bra       Z, 0x1a36 <.L43>
    1a48:	01 00 37    	bra       0x1a4c <.L42>

00001a4a <.L44>:
    1a4a:	00 00 00    	nop       

00001a4c <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    1a4c:	80 13 80    	mov.w     0x270, w0
    1a4e:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    1a50:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    1a52:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    1a54:	a0 00 20    	mov.w     #0xa, w0
    1a56:	01 00 20    	mov.w     #0x0, w1
    1a58:	16 ff 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    1a5a:	2e 40 90    	mov.b     [w14+2], w0
}
    1a5c:	00 80 fa    	ulnk      
    1a5e:	00 00 06    	return    

00001a60 <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    1a60:	04 00 fa    	lnk       #0x4
    1a62:	00 4f 78    	mov.b     w0, [w14]
    1a64:	11 47 98    	mov.b     w1, [w14+1]
    1a66:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    1a68:	2e ff 07    	rcall     0x18c6 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    1a6a:	1e 00 fb    	se        [w14], w0
    1a6c:	80 00 78    	mov.w     w0, w1
    1a6e:	e0 ff 2f    	mov.w     #0xfffe, w0
    1a70:	00 80 60    	and.w     w1, w0, w0
    1a72:	78 ff 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1a74:	1e 40 90    	mov.b     [w14+1], w0
    1a76:	00 00 fb    	se        w0, w0
    1a78:	75 ff 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    1a7a:	2e 40 90    	mov.b     [w14+2], w0
    1a7c:	00 00 fb    	se        w0, w0
    1a7e:	72 ff 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    1a80:	56 ff 07    	rcall     0x192e <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1a82:	00 80 fa    	ulnk      
    1a84:	00 00 06    	return    

00001a86 <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    1a86:	04 00 fa    	lnk       #0x4
    1a88:	20 47 98    	mov.b     w0, [w14+2]
    1a8a:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    1a8c:	1c ff 07    	rcall     0x18c6 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    1a8e:	2e 40 90    	mov.b     [w14+2], w0
    1a90:	00 00 fb    	se        w0, w0
    1a92:	68 ff 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1a94:	3e 40 90    	mov.b     [w14+3], w0
    1a96:	00 00 fb    	se        w0, w0
    1a98:	65 ff 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    1a9a:	a0 00 20    	mov.w     #0xa, w0
    1a9c:	01 00 20    	mov.w     #0x0, w1
    1a9e:	f3 fe 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   i2c_restart();
    1aa0:	2e ff 07    	rcall     0x18fe <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    1aa2:	2e 40 90    	mov.b     [w14+2], w0
    1aa4:	00 04 a0    	bset.b    w0, #0x0
    1aa6:	00 00 fb    	se        w0, w0
    1aa8:	5d ff 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    1aaa:	8c ff 07    	rcall     0x19c4 <_i2c_read> <.LFB6> <.LFE5>
    1aac:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    1aae:	3f ff 07    	rcall     0x192e <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    1ab0:	1e 40 78    	mov.b     [w14], w0
}
    1ab2:	00 80 fa    	ulnk      
    1ab4:	00 00 06    	return    

00001ab6 <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is not there, 0 means it is there
unsigned char I2Cpoll(char addr){
    1ab6:	04 00 fa    	lnk       #0x4
    1ab8:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    1aba:	00 40 eb    	clr.b     w0
    1abc:	00 4f 78    	mov.b     w0, [w14]
   i2c_start();
    1abe:	03 ff 07    	rcall     0x18c6 <_i2c_start> <.LFB2> <.LFE1>
   temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    1ac0:	2e 40 90    	mov.b     [w14+2], w0
    1ac2:	00 00 fb    	se        w0, w0
    1ac4:	80 00 78    	mov.w     w0, w1
    1ac6:	e0 ff 2f    	mov.w     #0xfffe, w0
    1ac8:	00 80 60    	and.w     w1, w0, w0
    1aca:	4c ff 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
    1acc:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c_bus();
    1ace:	2f ff 07    	rcall     0x192e <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    1ad0:	1e 40 78    	mov.b     [w14], w0
}
    1ad2:	00 80 fa    	ulnk      
    1ad4:	00 00 06    	return    

00001ad6 <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    1ad6:	08 00 fa    	lnk       #0x8
    1ad8:	20 47 98    	mov.b     w0, [w14+2]
    1ada:	21 07 98    	mov.w     w1, [w14+4]
    1adc:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    1ade:	00 40 eb    	clr.b     w0
    1ae0:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    1ae2:	f1 fe 07    	rcall     0x18c6 <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    1ae4:	2e 40 90    	mov.b     [w14+2], w0
    1ae6:	00 00 fb    	se        w0, w0
    1ae8:	80 00 78    	mov.w     w0, w1
    1aea:	e0 ff 2f    	mov.w     #0xfffe, w0
    1aec:	00 80 60    	and.w     w1, w0, w0
    1aee:	3a ff 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
    1af0:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    1af2:	00 40 eb    	clr.b     w0
    1af4:	10 47 98    	mov.b     w0, [w14+1]
    1af6:	0d 00 37    	bra       0x1b12 <.L49>

00001af8 <.L50>:
    err |= send_i2c_byte(dat[j]);
    1af8:	1e 40 90    	mov.b     [w14+1], w0
    1afa:	00 80 fb    	ze        w0, w0
    1afc:	ae 00 90    	mov.w     [w14+4], w1
    1afe:	00 80 40    	add.w     w1, w0, w0
    1b00:	10 40 78    	mov.b     [w0], w0
    1b02:	00 00 fb    	se        w0, w0
    1b04:	2f ff 07    	rcall     0x1964 <_send_i2c_byte> <.LFB5> <.LFE4>
    1b06:	9e 40 78    	mov.b     [w14], w1
    1b08:	01 40 70    	ior.b     w0, w1, w0
    1b0a:	00 4f 78    	mov.b     w0, [w14]
    1b0c:	1e 40 90    	mov.b     [w14+1], w0
    1b0e:	00 40 e8    	inc.b     w0, w0
    1b10:	10 47 98    	mov.b     w0, [w14+1]

00001b12 <.L49>:
    1b12:	9e 40 90    	mov.b     [w14+1], w1
    1b14:	6e 40 90    	mov.b     [w14+6], w0
    1b16:	80 cf 50    	sub.b     w1, w0, [w15]
    1b18:	ef ff 39    	bra       NC, 0x1af8 <.L50>
  }
  reset_i2c_bus();
    1b1a:	09 ff 07    	rcall     0x192e <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    1b1c:	1e 40 78    	mov.b     [w14], w0
}
    1b1e:	00 80 fa    	ulnk      
    1b20:	00 00 06    	return    

00001b22 <_main>:
    1b22:	1e 00 fa    	lnk       #0x1e
    1b24:	88 1f 78    	mov.w     w8, [w15++]
    1b26:	d2 01 07    	rcall     0x1ecc <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    1b28:	f7 00 07    	rcall     0x1d18 <_toggleSwitchSetup> <.LFB4> <.LFE3>
    1b2a:	80 3e 20    	mov.w     #0x3e8, w0
    1b2c:	bf fe 07    	rcall     0x18ac <_i2c_init> <.LFB1> <.LFE0>
    1b2e:	0e 00 e8    	inc.w     w14, w0
    1b30:	12 c4 b3    	mov.b     #0x41, w2
    1b32:	61 c0 b3    	mov.b     #0x6, w1
    1b34:	df fc 07    	rcall     0x14f4 <_lcd_init> <.LFB5> <.LFE4>
    1b36:	0e 00 e8    	inc.w     w14, w0
    1b38:	71 fd 07    	rcall     0x161c <_lcd_clear> <.LFB8> <.LFE7>
    1b3a:	50 16 80    	mov.w     0x2ca, w0
    1b3c:	45 00 de    	lsr.w     w0, #0x5, w0
    1b3e:	61 40 60    	and.b     w0, #0x1, w0
    1b40:	00 80 fb    	ze        w0, w0
    1b42:	f4 01 07    	rcall     0x1f2c <_read_analog> <.LFB1> <.LFE0>
    1b44:	60 40 88    	mov.w     w0, 0x80c
    1b46:	00 40 eb    	clr.b     w0
    1b48:	00 4f 78    	mov.b     w0, [w14]
    1b4a:	02 00 37    	bra       0x1b50 <.L2>

00001b4c <.L3>:
    1b4c:	08 01 07    	rcall     0x1d5e <_rand_next> <.LFB5> <.LFE4>
    1b4e:	1e 4f e8    	inc.b     [w14], [w14]

00001b50 <.L2>:
    1b50:	1e 84 fb    	ze        [w14], w8
    1b52:	50 16 80    	mov.w     0x2ca, w0
    1b54:	45 00 de    	lsr.w     w0, #0x5, w0
    1b56:	61 40 60    	and.b     w0, #0x1, w0
    1b58:	00 80 fb    	ze        w0, w0
    1b5a:	e8 01 07    	rcall     0x1f2c <_read_analog> <.LFB1> <.LFE0>
    1b5c:	74 00 40    	add.w     w0, #0x14, w0
    1b5e:	80 0f 54    	sub.w     w8, w0, [w15]
    1b60:	f5 ff 39    	bra       NC, 0x1b4c <.L3>
    1b62:	63 21 29    	mov.w     #0x9216, w3
    1b64:	62 40 80    	mov.w     0x80c, w2
    1b66:	f0 a0 2e    	mov.w     #0xea0f, w0
    1b68:	00 10 b8    	mul.uu    w2, w0, w0
    1b6a:	45 08 de    	lsr.w     w1, #0x5, w0
    1b6c:	31 02 20    	mov.w     #0x23, w1
    1b6e:	01 80 b9    	mul.ss    w0, w1, w0
    1b70:	00 00 78    	mov.w     w0, w0
    1b72:	00 00 51    	sub.w     w2, w0, w0
    1b74:	66 00 b9    	mul.su    w0, #0x6, w0
    1b76:	00 00 78    	mov.w     w0, w0
    1b78:	00 80 41    	add.w     w3, w0, w0
    1b7a:	10 40 88    	mov.w     w0, 0x802
    1b7c:	10 40 80    	mov.w     0x802, w0
    1b7e:	64 00 40    	add.w     w0, #0x4, w0
    1b80:	10 42 78    	mov.b     [w0], w4
    1b82:	10 40 80    	mov.w     0x802, w0
    1b84:	00 00 e8    	inc.w     w0, w0
    1b86:	90 41 78    	mov.b     [w0], w3
    1b88:	10 40 80    	mov.w     0x802, w0
    1b8a:	63 00 40    	add.w     w0, #0x3, w0
    1b8c:	10 41 78    	mov.b     [w0], w2
    1b8e:	10 40 80    	mov.w     0x802, w0
    1b90:	90 40 78    	mov.b     [w0], w1
    1b92:	10 40 80    	mov.w     0x802, w0
    1b94:	00 80 e8    	inc2.w    w0, w0
    1b96:	10 40 78    	mov.b     [w0], w0
    1b98:	64 47 98    	mov.b     w4, [w14+6]
    1b9a:	73 47 98    	mov.b     w3, [w14+7]
    1b9c:	02 4f 98    	mov.b     w2, [w14+8]
    1b9e:	11 4f 98    	mov.b     w1, [w14+9]
    1ba0:	20 4f 98    	mov.b     w0, [w14+10]
    1ba2:	00 40 eb    	clr.b     w0
    1ba4:	30 4f 98    	mov.b     w0, [w14+11]
    1ba6:	66 00 47    	add.w     w14, #0x6, w0
    1ba8:	20 40 88    	mov.w     w0, 0x804
    1baa:	62 40 80    	mov.w     0x80c, w2
    1bac:	d0 cc 2c    	mov.w     #0xcccd, w0
    1bae:	00 10 b8    	mul.uu    w2, w0, w0
    1bb0:	42 08 de    	lsr.w     w1, #0x2, w0
    1bb2:	65 00 b9    	mul.su    w0, #0x5, w0
    1bb4:	00 00 78    	mov.w     w0, w0
    1bb6:	00 00 51    	sub.w     w2, w0, w0
    1bb8:	00 40 78    	mov.b     w0, w0
    1bba:	06 e8 b7    	mov.b     WREG, 0x806
    1bbc:	d0 00 07    	rcall     0x1d5e <_rand_next> <.LFB5> <.LFE4>
    1bbe:	62 40 80    	mov.w     0x80c, w2
    1bc0:	d0 cc 2c    	mov.w     #0xcccd, w0
    1bc2:	00 10 b8    	mul.uu    w2, w0, w0
    1bc4:	42 08 de    	lsr.w     w1, #0x2, w0
    1bc6:	65 00 b9    	mul.su    w0, #0x5, w0
    1bc8:	00 00 78    	mov.w     w0, w0
    1bca:	00 00 51    	sub.w     w2, w0, w0
    1bcc:	00 40 78    	mov.b     w0, w0
    1bce:	07 e8 b7    	mov.b     WREG, 0x807
    1bd0:	c6 00 07    	rcall     0x1d5e <_rand_next> <.LFB5> <.LFE4>
    1bd2:	62 40 80    	mov.w     0x80c, w2
    1bd4:	d0 cc 2c    	mov.w     #0xcccd, w0
    1bd6:	00 10 b8    	mul.uu    w2, w0, w0
    1bd8:	42 08 de    	lsr.w     w1, #0x2, w0
    1bda:	65 00 b9    	mul.su    w0, #0x5, w0
    1bdc:	00 00 78    	mov.w     w0, w0
    1bde:	00 00 51    	sub.w     w2, w0, w0
    1be0:	00 40 78    	mov.b     w0, w0
    1be2:	08 e8 b7    	mov.b     WREG, 0x808
    1be4:	bc 00 07    	rcall     0x1d5e <_rand_next> <.LFB5> <.LFE4>
    1be6:	62 40 80    	mov.w     0x80c, w2
    1be8:	d0 cc 2c    	mov.w     #0xcccd, w0
    1bea:	00 10 b8    	mul.uu    w2, w0, w0
    1bec:	42 08 de    	lsr.w     w1, #0x2, w0
    1bee:	65 00 b9    	mul.su    w0, #0x5, w0
    1bf0:	00 00 78    	mov.w     w0, w0
    1bf2:	00 00 51    	sub.w     w2, w0, w0
    1bf4:	00 40 78    	mov.b     w0, w0
    1bf6:	09 e8 b7    	mov.b     WREG, 0x809
    1bf8:	b2 00 07    	rcall     0x1d5e <_rand_next> <.LFB5> <.LFE4>
    1bfa:	62 40 80    	mov.w     0x80c, w2
    1bfc:	d0 cc 2c    	mov.w     #0xcccd, w0
    1bfe:	00 10 b8    	mul.uu    w2, w0, w0
    1c00:	42 08 de    	lsr.w     w1, #0x2, w0
    1c02:	65 00 b9    	mul.su    w0, #0x5, w0
    1c04:	00 00 78    	mov.w     w0, w0
    1c06:	00 00 51    	sub.w     w2, w0, w0
    1c08:	00 40 78    	mov.b     w0, w0
    1c0a:	0a e8 b7    	mov.b     WREG, 0x80a
    1c0c:	90 2f 29    	mov.w     #0x92f9, w0
    1c0e:	ec 00 47    	add.w     w14, #0xc, w1
    1c10:	0f 00 09    	repeat    #0xf
    1c12:	b0 58 78    	mov.b     [w0++], [w1++]
    1c14:	00 01 b1    	sub.w     #0x10, w0
    1c16:	00 40 eb    	clr.b     w0
    1c18:	40 5f 98    	mov.b     w0, [w14+28]
    1c1a:	6c 00 47    	add.w     w14, #0xc, w0
    1c1c:	00 40 88    	mov.w     w0, 0x800
    1c1e:	01 40 80    	mov.w     0x800, w1
    1c20:	0e 00 e8    	inc.w     w14, w0
    1c22:	82 2e 29    	mov.w     #0x92e8, w2
    1c24:	58 fd 07    	rcall     0x16d6 <_lcd_print2> <.LFB13> <.LFE12>
    1c26:	00 02 20    	mov.w     #0x20, w0
    1c28:	80 08 88    	mov.w     w0, 0x110
    1c2a:	00 71 22    	mov.w     #0x2710, w0
    1c2c:	60 08 88    	mov.w     w0, 0x10c
    1c2e:	06 21 ef    	clr.w     0x106
    1c30:	84 e0 a9    	bclr.b    0x84, #0x7
    1c32:	94 e0 a8    	bset.b    0x94, #0x7
    1c34:	11 e1 a9    	bclr.b    0x111, #0x7
    1c36:	40 00 07    	rcall     0x1cb8 <_updateDisplay> <.LFB3> <.LFE0>

00001c38 <.L6>:
    1c38:	21 40 80    	mov.w     0x804, w1
    1c3a:	06 c8 bf    	mov.b     0x806, WREG
    1c3c:	00 80 fb    	ze        w0, w0
    1c3e:	00 80 40    	add.w     w1, w0, w0
    1c40:	90 40 78    	mov.b     [w0], w1
    1c42:	10 40 80    	mov.w     0x802, w0
    1c44:	10 40 78    	mov.b     [w0], w0
    1c46:	80 cf 50    	sub.b     w1, w0, [w15]
    1c48:	2e 00 3a    	bra       NZ, 0x1ca6 <.L4>
    1c4a:	21 40 80    	mov.w     0x804, w1
    1c4c:	07 c8 bf    	mov.b     0x807, WREG
    1c4e:	00 80 fb    	ze        w0, w0
    1c50:	00 80 40    	add.w     w1, w0, w0
    1c52:	90 40 78    	mov.b     [w0], w1
    1c54:	10 40 80    	mov.w     0x802, w0
    1c56:	00 00 e8    	inc.w     w0, w0
    1c58:	10 40 78    	mov.b     [w0], w0
    1c5a:	80 cf 50    	sub.b     w1, w0, [w15]
    1c5c:	24 00 3a    	bra       NZ, 0x1ca6 <.L4>
    1c5e:	21 40 80    	mov.w     0x804, w1
    1c60:	08 c8 bf    	mov.b     0x808, WREG
    1c62:	00 80 fb    	ze        w0, w0
    1c64:	00 80 40    	add.w     w1, w0, w0
    1c66:	90 40 78    	mov.b     [w0], w1
    1c68:	10 40 80    	mov.w     0x802, w0
    1c6a:	00 80 e8    	inc2.w    w0, w0
    1c6c:	10 40 78    	mov.b     [w0], w0
    1c6e:	80 cf 50    	sub.b     w1, w0, [w15]
    1c70:	1a 00 3a    	bra       NZ, 0x1ca6 <.L4>
    1c72:	21 40 80    	mov.w     0x804, w1
    1c74:	09 c8 bf    	mov.b     0x809, WREG
    1c76:	00 80 fb    	ze        w0, w0
    1c78:	00 80 40    	add.w     w1, w0, w0
    1c7a:	90 40 78    	mov.b     [w0], w1
    1c7c:	10 40 80    	mov.w     0x802, w0
    1c7e:	63 00 40    	add.w     w0, #0x3, w0
    1c80:	10 40 78    	mov.b     [w0], w0
    1c82:	80 cf 50    	sub.b     w1, w0, [w15]
    1c84:	10 00 3a    	bra       NZ, 0x1ca6 <.L4>
    1c86:	21 40 80    	mov.w     0x804, w1
    1c88:	0a c8 bf    	mov.b     0x80a, WREG
    1c8a:	00 80 fb    	ze        w0, w0
    1c8c:	00 80 40    	add.w     w1, w0, w0
    1c8e:	90 40 78    	mov.b     [w0], w1
    1c90:	10 40 80    	mov.w     0x802, w0
    1c92:	64 00 40    	add.w     w0, #0x4, w0
    1c94:	10 40 78    	mov.b     [w0], w0
    1c96:	80 cf 50    	sub.b     w1, w0, [w15]
    1c98:	06 00 3a    	bra       NZ, 0x1ca6 <.L4>
    1c9a:	ec 22 a8    	bset.b    0x2ec, #0x1
    1c9c:	01 40 80    	mov.w     0x800, w1
    1c9e:	0e 00 e8    	inc.w     w14, w0
    1ca0:	92 2e 29    	mov.w     #0x92e9, w2
    1ca2:	19 fd 07    	rcall     0x16d6 <_lcd_print2> <.LFB13> <.LFE12>
    1ca4:	05 00 37    	bra       0x1cb0 <.L5>

00001ca6 <.L4>:
    1ca6:	ec 22 a9    	bclr.b    0x2ec, #0x1
    1ca8:	01 40 80    	mov.w     0x800, w1
    1caa:	0e 00 e8    	inc.w     w14, w0
    1cac:	82 2e 29    	mov.w     #0x92e8, w2
    1cae:	13 fd 07    	rcall     0x16d6 <_lcd_print2> <.LFB13> <.LFE12>

00001cb0 <.L5>:
    1cb0:	00 53 27    	mov.w     #0x7530, w0
    1cb2:	01 00 20    	mov.w     #0x0, w1
    1cb4:	e8 fd 07    	rcall     0x1886 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1cb6:	c0 ff 37    	bra       0x1c38 <.L6>

00001cb8 <_updateDisplay>:
    1cb8:	00 00 fa    	lnk       #0x0
    1cba:	00 40 80    	mov.w     0x800, w0
    1cbc:	00 00 e8    	inc.w     w0, w0
    1cbe:	22 40 80    	mov.w     0x804, w2
    1cc0:	61 80 20    	mov.w     #0x806, w1
    1cc2:	91 40 78    	mov.b     [w1], w1
    1cc4:	81 80 fb    	ze        w1, w1
    1cc6:	81 00 41    	add.w     w2, w1, w1
    1cc8:	91 40 78    	mov.b     [w1], w1
    1cca:	01 48 78    	mov.b     w1, [w0]
    1ccc:	00 40 80    	mov.w     0x800, w0
    1cce:	64 00 40    	add.w     w0, #0x4, w0
    1cd0:	22 40 80    	mov.w     0x804, w2
    1cd2:	71 80 20    	mov.w     #0x807, w1
    1cd4:	91 40 78    	mov.b     [w1], w1
    1cd6:	81 80 fb    	ze        w1, w1
    1cd8:	81 00 41    	add.w     w2, w1, w1
    1cda:	91 40 78    	mov.b     [w1], w1
    1cdc:	01 48 78    	mov.b     w1, [w0]
    1cde:	00 40 80    	mov.w     0x800, w0
    1ce0:	67 00 40    	add.w     w0, #0x7, w0
    1ce2:	22 40 80    	mov.w     0x804, w2
    1ce4:	81 80 20    	mov.w     #0x808, w1
    1ce6:	91 40 78    	mov.b     [w1], w1
    1ce8:	81 80 fb    	ze        w1, w1
    1cea:	81 00 41    	add.w     w2, w1, w1
    1cec:	91 40 78    	mov.b     [w1], w1
    1cee:	01 48 78    	mov.b     w1, [w0]
    1cf0:	00 40 80    	mov.w     0x800, w0
    1cf2:	6a 00 40    	add.w     w0, #0xa, w0
    1cf4:	22 40 80    	mov.w     0x804, w2
    1cf6:	91 80 20    	mov.w     #0x809, w1
    1cf8:	91 40 78    	mov.b     [w1], w1
    1cfa:	81 80 fb    	ze        w1, w1
    1cfc:	81 00 41    	add.w     w2, w1, w1
    1cfe:	91 40 78    	mov.b     [w1], w1
    1d00:	01 48 78    	mov.b     w1, [w0]
    1d02:	00 40 80    	mov.w     0x800, w0
    1d04:	6d 00 40    	add.w     w0, #0xd, w0
    1d06:	22 40 80    	mov.w     0x804, w2
    1d08:	a1 80 20    	mov.w     #0x80a, w1
    1d0a:	91 40 78    	mov.b     [w1], w1
    1d0c:	81 80 fb    	ze        w1, w1
    1d0e:	81 00 41    	add.w     w2, w1, w1
    1d10:	91 40 78    	mov.b     [w1], w1
    1d12:	01 48 78    	mov.b     w1, [w0]
    1d14:	00 80 fa    	ulnk      
    1d16:	00 00 06    	return    

00001d18 <_toggleSwitchSetup>:
    1d18:	00 00 fa    	lnk       #0x0
    1d1a:	d8 a2 a8    	bset.b    0x2d8, #0x5
    1d1c:	d8 82 a8    	bset.b    0x2d8, #0x4
    1d1e:	e8 82 a8    	bset.b    0x2e8, #0x4
    1d20:	e8 a2 a8    	bset.b    0x2e8, #0x5
    1d22:	c9 e2 a8    	bset.b    0x2c9, #0x7
    1d24:	e8 62 a8    	bset.b    0x2e8, #0x3
    1d26:	d9 02 a8    	bset.b    0x2d9, #0x0
    1d28:	d9 62 a8    	bset.b    0x2d9, #0x3
    1d2a:	d9 22 a8    	bset.b    0x2d9, #0x1
    1d2c:	d9 42 a8    	bset.b    0x2d9, #0x2
    1d2e:	6f c0 a8    	bset.b    0x6f, #0x6
    1d30:	6f a0 a8    	bset.b    0x6f, #0x5
    1d32:	70 20 a8    	bset.b    0x70, #0x1
    1d34:	70 40 a8    	bset.b    0x70, #0x2
    1d36:	6f 80 a8    	bset.b    0x6f, #0x4
    1d38:	76 e0 a8    	bset.b    0x76, #0x7
    1d3a:	74 a0 a8    	bset.b    0x74, #0x5
    1d3c:	75 00 a8    	bset.b    0x75, #0x0
    1d3e:	74 c0 a8    	bset.b    0x74, #0x6
    1d40:	74 e0 a8    	bset.b    0x74, #0x7
    1d42:	63 c0 a8    	bset.b    0x63, #0x6
    1d44:	63 a0 a8    	bset.b    0x63, #0x5
    1d46:	64 20 a8    	bset.b    0x64, #0x1
    1d48:	64 40 a8    	bset.b    0x64, #0x2
    1d4a:	63 80 a8    	bset.b    0x63, #0x4
    1d4c:	6a e0 a8    	bset.b    0x6a, #0x7
    1d4e:	68 a0 a8    	bset.b    0x68, #0x5
    1d50:	69 00 a8    	bset.b    0x69, #0x0
    1d52:	68 c0 a8    	bset.b    0x68, #0x6
    1d54:	68 e0 a8    	bset.b    0x68, #0x7
    1d56:	86 60 a9    	bclr.b    0x86, #0x3
    1d58:	96 60 a8    	bset.b    0x96, #0x3
    1d5a:	00 80 fa    	ulnk      
    1d5c:	00 00 06    	return    

00001d5e <_rand_next>:
    1d5e:	02 00 fa    	lnk       #0x2
    1d60:	60 40 80    	mov.w     0x80c, w0
    1d62:	c2 00 de    	lsr.w     w0, #0x2, w1
    1d64:	60 40 80    	mov.w     0x80c, w0
    1d66:	80 80 68    	xor.w     w1, w0, w1
    1d68:	60 40 80    	mov.w     0x80c, w0
    1d6a:	4d 00 de    	lsr.w     w0, #0xd, w0
    1d6c:	80 80 68    	xor.w     w1, w0, w1
    1d6e:	60 40 80    	mov.w     0x80c, w0
    1d70:	42 01 de    	lsr.w     w0, #0x2, w2
    1d72:	60 40 80    	mov.w     0x80c, w0
    1d74:	43 00 de    	lsr.w     w0, #0x3, w0
    1d76:	00 00 61    	and.w     w2, w0, w0
    1d78:	00 80 68    	xor.w     w1, w0, w0
    1d7a:	61 0f 60    	and.w     w0, #0x1, [w14]
    1d7c:	60 40 80    	mov.w     0x80c, w0
    1d7e:	80 00 d1    	lsr.w     w0, w1
    1d80:	1e 00 78    	mov.w     [w14], w0
    1d82:	4f 00 dd    	sl.w      w0, #0xf, w0
    1d84:	01 00 70    	ior.w     w0, w1, w0
    1d86:	60 40 88    	mov.w     w0, 0x80c
    1d88:	00 80 fa    	ulnk      
    1d8a:	00 00 06    	return    
Disassembly of section .isr.text:

00001d8c <__CNInterrupt>:
    1d8c:	32 00 f8    	push      0x32
    1d8e:	34 00 f8    	push      0x34
    1d90:	88 1f 78    	mov.w     w8, [w15++]
    1d92:	18 00 20    	mov.w     #0x1, w8
    1d94:	a8 01 88    	mov.w     w8, 0x34
    1d96:	08 20 20    	mov.w     #0x200, w8
    1d98:	98 01 88    	mov.w     w8, 0x32
    1d9a:	4f 04 78    	mov.w     [--w15], w8
    1d9c:	00 00 fa    	lnk       #0x0
    1d9e:	86 60 a9    	bclr.b    0x86, #0x3
    1da0:	06 21 ef    	clr.w     0x106
    1da2:	84 e0 a9    	bclr.b    0x84, #0x7
    1da4:	11 e1 a8    	bset.b    0x111, #0x7
    1da6:	dc e2 a8    	bset.b    0x2dc, #0x7
    1da8:	00 80 fa    	ulnk      
    1daa:	34 00 f9    	pop       0x34
    1dac:	32 00 f9    	pop       0x32
    1dae:	00 40 06    	retfie    

00001db0 <__T2Interrupt>:
    1db0:	36 00 f8    	push      0x36
    1db2:	80 9f be    	mov.d     w0, [w15++]
    1db4:	82 9f be    	mov.d     w2, [w15++]
    1db6:	84 9f be    	mov.d     w4, [w15++]
    1db8:	86 9f be    	mov.d     w6, [w15++]
    1dba:	32 00 f8    	push      0x32
    1dbc:	34 00 f8    	push      0x34
    1dbe:	10 00 20    	mov.w     #0x1, w0
    1dc0:	a0 01 88    	mov.w     w0, 0x34
    1dc2:	00 20 20    	mov.w     #0x200, w0
    1dc4:	90 01 88    	mov.w     w0, 0x32
    1dc6:	00 00 fa    	lnk       #0x0
    1dc8:	84 e0 a9    	bclr.b    0x84, #0x7
    1dca:	11 e1 a9    	bclr.b    0x111, #0x7
    1dcc:	dc e2 a9    	bclr.b    0x2dc, #0x7
    1dce:	d1 16 80    	mov.w     0x2da, w1
    1dd0:	00 02 20    	mov.w     #0x20, w0
    1dd2:	00 80 60    	and.w     w1, w0, w0
    1dd4:	00 00 e0    	cp0.w     w0
    1dd6:	0b 00 3a    	bra       NZ, 0x1dee <.L9>
    1dd8:	06 c8 bf    	mov.b     0x806, WREG
    1dda:	00 80 fb    	ze        w0, w0
    1ddc:	80 00 e8    	inc.w     w0, w1
    1dde:	50 00 20    	mov.w     #0x5, w0
    1de0:	00 01 78    	mov.w     w0, w2
    1de2:	11 00 09    	repeat    #0x11
    1de4:	82 00 d8    	div.sw    w1, w2
    1de6:	80 00 fd    	exch      w0, w1
    1de8:	00 40 78    	mov.b     w0, w0
    1dea:	06 e8 b7    	mov.b     WREG, 0x806
    1dec:	07 00 37    	bra       0x1dfc <.L10>

00001dee <.L9>:
    1dee:	d0 16 80    	mov.w     0x2da, w0
    1df0:	70 00 60    	and.w     w0, #0x10, w0
    1df2:	00 00 e0    	cp0.w     w0
    1df4:	03 00 3a    	bra       NZ, 0x1dfc <.L10>
    1df6:	06 c8 bf    	mov.b     0x806, WREG
    1df8:	00 40 e9    	dec.b     w0, w0
    1dfa:	06 e8 b7    	mov.b     WREG, 0x806

00001dfc <.L10>:
    1dfc:	50 17 80    	mov.w     0x2ea, w0
    1dfe:	70 00 60    	and.w     w0, #0x10, w0
    1e00:	00 00 e0    	cp0.w     w0
    1e02:	0b 00 3a    	bra       NZ, 0x1e1a <.L11>
    1e04:	07 c8 bf    	mov.b     0x807, WREG
    1e06:	00 80 fb    	ze        w0, w0
    1e08:	80 00 e8    	inc.w     w0, w1
    1e0a:	50 00 20    	mov.w     #0x5, w0
    1e0c:	00 01 78    	mov.w     w0, w2
    1e0e:	11 00 09    	repeat    #0x11
    1e10:	82 00 d8    	div.sw    w1, w2
    1e12:	80 00 fd    	exch      w0, w1
    1e14:	00 40 78    	mov.b     w0, w0
    1e16:	07 e8 b7    	mov.b     WREG, 0x807
    1e18:	08 00 37    	bra       0x1e2a <.L12>

00001e1a <.L11>:
    1e1a:	51 17 80    	mov.w     0x2ea, w1
    1e1c:	00 02 20    	mov.w     #0x20, w0
    1e1e:	00 80 60    	and.w     w1, w0, w0
    1e20:	00 00 e0    	cp0.w     w0
    1e22:	03 00 3a    	bra       NZ, 0x1e2a <.L12>
    1e24:	07 c8 bf    	mov.b     0x807, WREG
    1e26:	00 40 e9    	dec.b     w0, w0
    1e28:	07 e8 b7    	mov.b     WREG, 0x807

00001e2a <.L12>:
    1e2a:	51 16 80    	mov.w     0x2ca, w1
    1e2c:	00 00 28    	mov.w     #0x8000, w0
    1e2e:	00 80 60    	and.w     w1, w0, w0
    1e30:	00 00 e0    	cp0.w     w0
    1e32:	0b 00 3a    	bra       NZ, 0x1e4a <.L13>
    1e34:	08 c8 bf    	mov.b     0x808, WREG
    1e36:	00 80 fb    	ze        w0, w0
    1e38:	80 00 e8    	inc.w     w0, w1
    1e3a:	50 00 20    	mov.w     #0x5, w0
    1e3c:	00 01 78    	mov.w     w0, w2
    1e3e:	11 00 09    	repeat    #0x11
    1e40:	82 00 d8    	div.sw    w1, w2
    1e42:	80 00 fd    	exch      w0, w1
    1e44:	00 40 78    	mov.b     w0, w0
    1e46:	08 e8 b7    	mov.b     WREG, 0x808
    1e48:	07 00 37    	bra       0x1e58 <.L14>

00001e4a <.L13>:
    1e4a:	50 17 80    	mov.w     0x2ea, w0
    1e4c:	68 00 60    	and.w     w0, #0x8, w0
    1e4e:	00 00 e0    	cp0.w     w0
    1e50:	03 00 3a    	bra       NZ, 0x1e58 <.L14>
    1e52:	08 c8 bf    	mov.b     0x808, WREG
    1e54:	00 40 e9    	dec.b     w0, w0
    1e56:	08 e8 b7    	mov.b     WREG, 0x808

00001e58 <.L14>:
    1e58:	d1 16 80    	mov.w     0x2da, w1
    1e5a:	00 10 20    	mov.w     #0x100, w0
    1e5c:	00 80 60    	and.w     w1, w0, w0
    1e5e:	00 00 e0    	cp0.w     w0
    1e60:	0b 00 3a    	bra       NZ, 0x1e78 <.L15>
    1e62:	09 c8 bf    	mov.b     0x809, WREG
    1e64:	00 80 fb    	ze        w0, w0
    1e66:	80 00 e8    	inc.w     w0, w1
    1e68:	50 00 20    	mov.w     #0x5, w0
    1e6a:	00 01 78    	mov.w     w0, w2
    1e6c:	11 00 09    	repeat    #0x11
    1e6e:	82 00 d8    	div.sw    w1, w2
    1e70:	80 00 fd    	exch      w0, w1
    1e72:	00 40 78    	mov.b     w0, w0
    1e74:	09 e8 b7    	mov.b     WREG, 0x809
    1e76:	08 00 37    	bra       0x1e88 <.L16>

00001e78 <.L15>:
    1e78:	d1 16 80    	mov.w     0x2da, w1
    1e7a:	00 80 20    	mov.w     #0x800, w0
    1e7c:	00 80 60    	and.w     w1, w0, w0
    1e7e:	00 00 e0    	cp0.w     w0
    1e80:	03 00 3a    	bra       NZ, 0x1e88 <.L16>
    1e82:	09 c8 bf    	mov.b     0x809, WREG
    1e84:	00 40 e9    	dec.b     w0, w0
    1e86:	09 e8 b7    	mov.b     WREG, 0x809

00001e88 <.L16>:
    1e88:	d1 16 80    	mov.w     0x2da, w1
    1e8a:	00 20 20    	mov.w     #0x200, w0
    1e8c:	00 80 60    	and.w     w1, w0, w0
    1e8e:	00 00 e0    	cp0.w     w0
    1e90:	0b 00 3a    	bra       NZ, 0x1ea8 <.L17>
    1e92:	0a c8 bf    	mov.b     0x80a, WREG
    1e94:	00 80 fb    	ze        w0, w0
    1e96:	80 00 e8    	inc.w     w0, w1
    1e98:	50 00 20    	mov.w     #0x5, w0
    1e9a:	00 01 78    	mov.w     w0, w2
    1e9c:	11 00 09    	repeat    #0x11
    1e9e:	82 00 d8    	div.sw    w1, w2
    1ea0:	80 00 fd    	exch      w0, w1
    1ea2:	00 40 78    	mov.b     w0, w0
    1ea4:	0a e8 b7    	mov.b     WREG, 0x80a
    1ea6:	08 00 37    	bra       0x1eb8 <.L18>

00001ea8 <.L17>:
    1ea8:	d1 16 80    	mov.w     0x2da, w1
    1eaa:	00 40 20    	mov.w     #0x400, w0
    1eac:	00 80 60    	and.w     w1, w0, w0
    1eae:	00 00 e0    	cp0.w     w0
    1eb0:	03 00 3a    	bra       NZ, 0x1eb8 <.L18>
    1eb2:	0a c8 bf    	mov.b     0x80a, WREG
    1eb4:	00 40 e9    	dec.b     w0, w0
    1eb6:	0a e8 b7    	mov.b     WREG, 0x80a

00001eb8 <.L18>:
    1eb8:	ff fe 07    	rcall     0x1cb8 <_updateDisplay> <.LFB3> <.LFE0>
    1eba:	00 80 fa    	ulnk      
    1ebc:	34 00 f9    	pop       0x34
    1ebe:	32 00 f9    	pop       0x32
    1ec0:	4f 03 be    	mov.d     [--w15], w6
    1ec2:	4f 02 be    	mov.d     [--w15], w4
    1ec4:	4f 01 be    	mov.d     [--w15], w2
    1ec6:	4f 00 be    	mov.d     [--w15], w0
    1ec8:	36 00 f9    	pop       0x36
    1eca:	00 40 06    	retfie    
Disassembly of section .text:

00001ecc <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    1ecc:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    1ece:	00 10 20    	mov.w     #0x100, w0
    1ed0:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    1ed2:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    1ed4:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    1ed6:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    1ed8:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    1eda:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    1edc:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    1ede:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    1ee0:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    1ee2:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    1ee4:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    1ee6:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    1ee8:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    1eea:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    1eec:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    1eee:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    1ef0:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    1ef2:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    1ef4:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    1ef6:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    1ef8:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    1efa:	f0 03 20    	mov.w     #0x3f, w0
    1efc:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    1efe:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    1f00:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    1f02:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    1f04:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    1f06:	00 0e 20    	mov.w     #0xe0, w0
    1f08:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    1f0a:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    1f0c:	00 c4 20    	mov.w     #0xc40, w0
    1f0e:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    1f10:	50 00 20    	mov.w     #0x5, w0
    1f12:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    1f14:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    1f16:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    1f18:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    1f1a:	e8 02 a9    	bclr.b    0x2e8, #0x0
    1f1c:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    1f1e:	e8 22 a9    	bclr.b    0x2e8, #0x1
    1f20:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    1f22:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    1f24:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    1f26:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    1f28:	00 80 fa    	ulnk      
    1f2a:	00 00 06    	return    

00001f2c <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    1f2c:	02 00 fa    	lnk       #0x2
    1f2e:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    1f30:	9e 00 78    	mov.w     [w14], w1
    1f32:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    1f34:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    1f36:	00 00 00    	nop       

00001f38 <.L3>:
    1f38:	00 19 80    	mov.w     0x320, w0
    1f3a:	61 00 60    	and.w     w0, #0x1, w0
    1f3c:	00 00 e0    	cp0.w     w0
    1f3e:	fc ff 32    	bra       Z, 0x1f38 <.L3>
    return ADC1BUF0;
    1f40:	00 18 80    	mov.w     0x300, w0
}
    1f42:	00 80 fa    	ulnk      
    1f44:	00 00 06    	return    

00001f46 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    1f46:	02 00 fa    	lnk       #0x2
    1f48:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    1f4a:	1e 00 78    	mov.w     [w14], w0
    1f4c:	48 00 de    	lsr.w     w0, #0x8, w0
    1f4e:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    1f50:	1e 00 78    	mov.w     [w14], w0
    1f52:	44 00 de    	lsr.w     w0, #0x4, w0
    1f54:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    1f56:	1e 00 78    	mov.w     [w14], w0
    1f58:	42 00 de    	lsr.w     w0, #0x2, w0
    1f5a:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    1f5c:	1e 00 78    	mov.w     [w14], w0
    1f5e:	00 00 d1    	lsr.w     w0, w0
    1f60:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    1f62:	1e 00 78    	mov.w     [w14], w0
    1f64:	00 40 78    	mov.b     w0, w0
    1f66:	61 40 60    	and.b     w0, #0x1, w0
}
    1f68:	00 80 fa    	ulnk      
    1f6a:	00 00 06    	return    
Disassembly of section .dinit:

00001f6c <.dinit>:
    1f6c:	00 08 00    	nop       
    1f6e:	0e 00 00    	nop       
    1f70:	80 00 00    	nop       
    1f72:	0e 08 00    	nop       
    1f74:	10 00 00    	nop       
    1f76:	80 00 00    	nop       
    1f78:	00 00 00    	nop       
Disassembly of section .isr:

00001f7a <__DefaultInterrupt>:
    1f7a:	00 40 da    	break     
    1f7c:	00 00 fe    	reset     
