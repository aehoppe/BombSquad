
codeword.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	7c 35 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	7c 35 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	7c 35 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	7c 35 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	7c 35 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	7c 35 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	7c 35 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	7c 35 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	7c 35 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	7c 35 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	7c 35 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	7c 35 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	7c 35 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	7c 35 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	7c 35 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	7c 35 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	7c 35 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	7c 35 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	7c 35 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	7c 35 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	7c 35 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	7c 35 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	7c 35 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	7c 35 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	7c 35 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	7c 35 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	7c 35 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	7c 35 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	7c 35 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	7c 35 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	7c 35 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	7c 35 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	7c 35 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	7c 35 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	7c 35 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	7c 35 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	7c 35 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	7c 35 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	7c 35 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	7c 35 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	7c 35 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	7c 35 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	7c 35 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	7c 35 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	7c 35 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	7c 35 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	7c 35 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	7c 35 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	7c 35 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	7c 35 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	7c 35 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	7c 35 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	7c 35 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	7c 35 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	7c 35 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	7c 35 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	7c 35 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	7c 35 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	7c 35 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	7c 35 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	7c 35 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	7c 35 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	7c 35 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	7c 35 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	7c 35 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	7c 35 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	7c 35 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	7c 35 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	7c 35 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	7c 35 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	4f 11 21    	mov.w     #0x1114, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	81 00 07    	rcall     0x1228 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	a0 4f 23    	mov.w     #0x34fa, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	e2 1f 02    	call      0x1fe2 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	c0 3b 20    	mov.w     #0x3bc, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	8c 22 04    	goto      0x228c <_run>
    1216:	00 00 00 
    1218:	7a 23 04    	goto      0x237a <_solved>
    121a:	00 00 00 
    121c:	c8 23 04    	goto      0x23c8 <_end_win>
    121e:	00 00 00 
    1220:	1e 24 04    	goto      0x241e <_end_fail>
    1222:	00 00 00 
    1224:	2a 12 04    	goto      0x122a <_prout>
    1226:	00 00 00 

00001228 <__crt_start_mode>:
    1228:	00 00 05    	retlw.w   #0x0, w0

0000122a <_prout>:
    122a:	88 1f 78    	mov.w     w8, [w15++]
    122c:	02 04 78    	mov.w     w2, w8
    122e:	08 01 78    	mov.w     w8, w2
    1230:	c4 00 07    	rcall     0x13ba <_memcpy>
    1232:	08 00 40    	add.w     w0, w8, w0
    1234:	4f 04 78    	mov.w     [--w15], w8
    1236:	00 00 06    	return    

00001238 <__sprintf_cdnopuxX>:
    1238:	00 00 fa    	lnk       #0x0
    123a:	88 1f 78    	mov.w     w8, [w15++]
    123c:	00 04 78    	mov.w     w0, w8
    123e:	ea 81 57    	sub.w     w15, #0xa, w3
    1240:	3f b9 97    	mov.w     [w15-10], w2
    1242:	88 00 78    	mov.w     w8, w1
    1244:	a0 22 21    	mov.w     #0x122a, w0
    1246:	07 00 07    	rcall     0x1256 <___Printf_cdnopuxX>
    1248:	00 00 e0    	cp0.w     w0
    124a:	02 00 35    	bra       LT, 0x1250 <.L3>
    124c:	80 40 eb    	clr.b     w1
    124e:	01 74 78    	mov.b     w1, [w8+w0]

00001250 <.L3>:
    1250:	4f 04 78    	mov.w     [--w15], w8
    1252:	00 80 fa    	ulnk      
    1254:	00 00 06    	return    

00001256 <___Printf_cdnopuxX>:
    1256:	62 00 fa    	lnk       #0x62
    1258:	88 9f be    	mov.d     w8, [w15++]
    125a:	8a 1f 78    	mov.w     w10, [w15++]
    125c:	00 05 78    	mov.w     w0, w10
    125e:	81 04 78    	mov.w     w1, w9
    1260:	02 04 78    	mov.w     w2, w8
    1262:	83 00 78    	mov.w     w3, w1
    1264:	80 f9 2f    	mov.w     #0xff98, w0
    1266:	0f 00 40    	add.w     w0, w15, w0
    1268:	77 01 07    	rcall     0x1558 <__Vacopy>
    126a:	9a 97 9f    	mov.w     w10, [w15-94]
    126c:	a9 97 9f    	mov.w     w9, [w15-92]
    126e:	00 00 eb    	clr.w     w0
    1270:	b0 9f 9f    	mov.w     w0, [w15-74]

00001272 <.L31>:
    1272:	18 85 fb    	ze        [w8], w10
    1274:	8a 04 fb    	se        w10, w9
    1276:	0a 05 ea    	neg.w     w10, w10
    1278:	4f 55 de    	lsr.w     w10, #0xf, w10
    127a:	50 02 20    	mov.w     #0x25, w0
    127c:	80 8f 54    	sub.w     w9, w0, [w15]
    127e:	0d 00 32    	bra       Z, 0x129a <.L3>
    1280:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    1282:	0b 00 3a    	bra       NZ, 0x129a <.L3>
    1284:	0a 01 78    	mov.w     w10, w2
    1286:	88 00 78    	mov.w     w8, w1
    1288:	2f 90 97    	mov.w     [w15-92], w0
    128a:	9f 91 97    	mov.w     [w15-94], w3
    128c:	03 00 01    	call      w3
    128e:	a0 97 9f    	mov.w     w0, [w15-92]
    1290:	00 00 e0    	cp0.w     w0
    1292:	8e 00 32    	bra       Z, 0x13b0 <.L27>
    1294:	3f 98 97    	mov.w     [w15-74], w0
    1296:	00 00 e8    	inc.w     w0, w0
    1298:	b0 9f 9f    	mov.w     w0, [w15-74]

0000129a <.L3>:
    129a:	0a 04 44    	add.w     w8, w10, w8
    129c:	50 02 20    	mov.w     #0x25, w0
    129e:	80 8f 54    	sub.w     w9, w0, [w15]
    12a0:	04 00 32    	bra       Z, 0x12aa <.L5>
    12a2:	09 00 e0    	cp0.w     w9
    12a4:	e6 ff 3a    	bra       NZ, 0x1272 <.L31>
    12a6:	3f 98 97    	mov.w     [w15-74], w0
    12a8:	84 00 37    	bra       0x13b2 <.L4>

000012aa <.L5>:
    12aa:	00 00 eb    	clr.w     w0
    12ac:	90 9f 9f    	mov.w     w0, [w15-78]
    12ae:	80 9f 9f    	mov.w     w0, [w15-80]
    12b0:	f0 97 9f    	mov.w     w0, [w15-82]
    12b2:	e0 97 9f    	mov.w     w0, [w15-84]
    12b4:	d0 97 9f    	mov.w     w0, [w15-86]
    12b6:	c0 97 9f    	mov.w     w0, [w15-88]
    12b8:	07 00 37    	bra       0x12c8 <.L34>

000012ba <.L8>:
    12ba:	e1 0f 21    	mov.w     #0x10fe, w1
    12bc:	01 00 50    	sub.w     w0, w1, w0
    12be:	00 00 40    	add.w     w0, w0, w0
    12c0:	21 0f 21    	mov.w     #0x10f2, w1
    12c2:	61 00 78    	mov.w     [w1+w0], w0
    12c4:	df 98 97    	mov.w     [w15-70], w1
    12c6:	01 00 70    	ior.w     w0, w1, w0

000012c8 <.L34>:
    12c8:	d0 9f 9f    	mov.w     w0, [w15-70]
    12ca:	88 04 78    	mov.w     w8, w9
    12cc:	09 04 78    	mov.w     w9, w8
    12ce:	38 45 78    	mov.b     [w8++], w10
    12d0:	8a 00 fb    	se        w10, w1
    12d2:	e0 0f 21    	mov.w     #0x10fe, w0
    12d4:	79 00 07    	rcall     0x13c8 <_strchr>
    12d6:	00 00 e0    	cp0.w     w0
    12d8:	f0 ff 3a    	bra       NZ, 0x12ba <.L8>
    12da:	a1 c2 b3    	mov.b     #0x2a, w1
    12dc:	81 4f 55    	sub.b     w10, w1, [w15]
    12de:	0e 00 3a    	bra       NZ, 0x12fc <.L9>
    12e0:	cf 88 97    	mov.w     [w15-104], w1
    12e2:	01 80 e9    	dec2.w    w1, w0
    12e4:	c0 8f 9f    	mov.w     w0, [w15-104]
    12e6:	10 00 78    	mov.w     [w0], w0
    12e8:	c0 9f 9f    	mov.w     w0, [w15-72]
    12ea:	00 00 e0    	cp0.w     w0
    12ec:	05 00 3d    	bra       GE, 0x12f8 <.L10>
    12ee:	00 00 ea    	neg.w     w0, w0
    12f0:	c0 9f 9f    	mov.w     w0, [w15-72]
    12f2:	5f 98 97    	mov.w     [w15-70], w0
    12f4:	00 20 a0    	bset.w    w0, #0x2
    12f6:	d0 9f 9f    	mov.w     w0, [w15-70]

000012f8 <.L10>:
    12f8:	09 04 e8    	inc.w     w9, w8
    12fa:	0f 00 37    	bra       0x131a <.L11>

000012fc <.L9>:
    12fc:	c0 9f 9f    	mov.w     w0, [w15-72]
    12fe:	00 00 eb    	clr.w     w0
    1300:	05 00 37    	bra       0x130c <.L32>

00001302 <.L14>:
    1302:	f2 ff 27    	mov.w     #0x7fff, w2
    1304:	82 0f 50    	sub.w     w0, w2, [w15]
    1306:	02 00 32    	bra       Z, 0x130c <.L32>
    1308:	6a 01 b9    	mul.su    w0, #0xa, w2
    130a:	02 80 40    	add.w     w1, w2, w0

0000130c <.L32>:
    130c:	09 04 78    	mov.w     w9, w8
    130e:	88 04 78    	mov.w     w8, w9
    1310:	b9 00 fb    	se        [w9++], w1
    1312:	01 03 b1    	sub.w     #0x30, w1
    1314:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1316:	f5 ff 36    	bra       LEU, 0x1302 <.L14>
    1318:	c0 9f 9f    	mov.w     w0, [w15-72]

0000131a <.L11>:
    131a:	e0 c2 b3    	mov.b     #0x2e, w0
    131c:	98 4f 10    	subr.b    w0, [w8], [w15]
    131e:	02 00 32    	bra       Z, 0x1324 <.L15>
    1320:	00 80 eb    	setm.w    w0
    1322:	19 00 37    	bra       0x1356 <.L35>

00001324 <.L15>:
    1324:	a0 c2 b3    	mov.b     #0x2a, w0
    1326:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1328:	07 00 3a    	bra       NZ, 0x1338 <.L17>
    132a:	cf 88 97    	mov.w     [w15-104], w1
    132c:	01 80 e9    	dec2.w    w1, w0
    132e:	c0 8f 9f    	mov.w     w0, [w15-104]
    1330:	10 00 78    	mov.w     [w0], w0
    1332:	a0 9f 9f    	mov.w     w0, [w15-76]
    1334:	08 04 e8    	inc.w     w8, w8
    1336:	10 00 37    	bra       0x1358 <.L16>

00001338 <.L17>:
    1338:	00 00 eb    	clr.w     w0
    133a:	a0 9f 9f    	mov.w     w0, [w15-76]
    133c:	88 00 78    	mov.w     w8, w1
    133e:	05 00 37    	bra       0x134a <.L33>

00001340 <.L20>:
    1340:	f3 ff 27    	mov.w     #0x7fff, w3
    1342:	83 0f 50    	sub.w     w0, w3, [w15]
    1344:	02 00 32    	bra       Z, 0x134a <.L33>
    1346:	6a 02 b9    	mul.su    w0, #0xa, w4
    1348:	04 00 41    	add.w     w2, w4, w0

0000134a <.L33>:
    134a:	01 04 78    	mov.w     w1, w8
    134c:	88 00 78    	mov.w     w8, w1
    134e:	31 01 fb    	se        [w1++], w2
    1350:	02 03 b1    	sub.w     #0x30, w2
    1352:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1354:	f5 ff 36    	bra       LEU, 0x1340 <.L20>

00001356 <.L35>:
    1356:	a0 9f 9f    	mov.w     w0, [w15-76]

00001358 <.L16>:
    1358:	98 44 78    	mov.b     [w8], w9
    135a:	89 00 fb    	se        w9, w1
    135c:	a0 0e 21    	mov.w     #0x10ea, w0
    135e:	34 00 07    	rcall     0x13c8 <_strchr>
    1360:	00 00 e0    	cp0.w     w0
    1362:	02 00 32    	bra       Z, 0x1368 <.L25>
    1364:	08 04 e8    	inc.w     w8, w8
    1366:	01 00 37    	bra       0x136a <.L21>

00001368 <.L25>:
    1368:	80 44 eb    	clr.b     w9

0000136a <.L21>:
    136a:	c9 7f 9f    	mov.b     w9, [w15-68]
    136c:	80 c6 b3    	mov.b     #0x68, w0
    136e:	80 cf 54    	sub.b     w9, w0, [w15]
    1370:	04 00 3a    	bra       NZ, 0x137a <.L22>
    1372:	98 cf 14    	subr.b    w9, [w8], [w15]
    1374:	0a 00 3a    	bra       NZ, 0x138a <.L23>
    1376:	66 40 50    	sub.b     w0, #0x6, w0
    1378:	06 00 37    	bra       0x1386 <.L36>

0000137a <.L22>:
    137a:	c0 c6 b3    	mov.b     #0x6c, w0
    137c:	80 cf 54    	sub.b     w9, w0, [w15]
    137e:	05 00 3a    	bra       NZ, 0x138a <.L23>
    1380:	98 cf 14    	subr.b    w9, [w8], [w15]
    1382:	03 00 3a    	bra       NZ, 0x138a <.L23>
    1384:	65 40 40    	add.b     w0, #0x5, w0

00001386 <.L36>:
    1386:	c0 7f 9f    	mov.b     w0, [w15-68]
    1388:	08 04 e8    	inc.w     w8, w8

0000138a <.L23>:
    138a:	18 01 fb    	se        [w8], w2
    138c:	e3 fb 2f    	mov.w     #0xffbe, w3
    138e:	8f 81 41    	add.w     w3, w15, w3
    1390:	81 f9 2f    	mov.w     #0xff98, w1
    1392:	8f 80 40    	add.w     w1, w15, w1
    1394:	a0 f9 2f    	mov.w     #0xff9a, w0
    1396:	0f 00 40    	add.w     w0, w15, w0
    1398:	e1 00 07    	rcall     0x155c <___Putfld_cdnopuxX>
    139a:	00 00 e0    	cp0.w     w0
    139c:	09 00 3a    	bra       NZ, 0x13b0 <.L27>
    139e:	e1 fb 2f    	mov.w     #0xffbe, w1
    13a0:	8f 80 40    	add.w     w1, w15, w1
    13a2:	a0 f9 2f    	mov.w     #0xff9a, w0
    13a4:	0f 00 40    	add.w     w0, w15, w0
    13a6:	1c 00 07    	rcall     0x13e0 <__Puttxt>
    13a8:	00 00 e0    	cp0.w     w0
    13aa:	02 00 35    	bra       LT, 0x13b0 <.L27>
    13ac:	08 04 e8    	inc.w     w8, w8
    13ae:	61 ff 37    	bra       0x1272 <.L31>

000013b0 <.L27>:
    13b0:	00 80 eb    	setm.w    w0

000013b2 <.L4>:
    13b2:	4f 05 78    	mov.w     [--w15], w10
    13b4:	4f 04 be    	mov.d     [--w15], w8
    13b6:	00 80 fa    	ulnk      
    13b8:	00 00 06    	return    

000013ba <_memcpy>:
    13ba:	80 01 78    	mov.w     w0, w3
    13bc:	02 00 37    	bra       0x13c2 <.L2>

000013be <.L3>:
    13be:	b1 59 78    	mov.b     [w1++], [w3++]
    13c0:	02 01 e9    	dec.w     w2, w2

000013c2 <.L2>:
    13c2:	02 00 e0    	cp0.w     w2
    13c4:	fc ff 3a    	bra       NZ, 0x13be <.L3>
    13c6:	00 00 06    	return    

000013c8 <_strchr>:
    13c8:	02 00 37    	bra       0x13ce <.L2>

000013ca <.L4>:
    13ca:	03 04 e0    	cp0.b     w3
    13cc:	06 00 32    	bra       Z, 0x13da <.L5>

000013ce <.L2>:
    13ce:	00 01 78    	mov.w     w0, w2
    13d0:	02 00 78    	mov.w     w2, w0
    13d2:	b0 41 78    	mov.b     [w0++], w3
    13d4:	81 cf 51    	sub.b     w3, w1, [w15]
    13d6:	f9 ff 3a    	bra       NZ, 0x13ca <.L4>
    13d8:	01 00 37    	bra       0x13dc <.L3>

000013da <.L5>:
    13da:	00 01 eb    	clr.w     w2

000013dc <.L3>:
    13dc:	02 00 78    	mov.w     w2, w0
    13de:	00 00 06    	return    

000013e0 <__Puttxt>:
    13e0:	04 00 fa    	lnk       #0x4
    13e2:	88 9f be    	mov.d     w8, [w15++]
    13e4:	8a 9f be    	mov.d     w10, [w15++]
    13e6:	8c 1f 78    	mov.w     w12, [w15++]
    13e8:	00 04 78    	mov.w     w0, w8
    13ea:	01 06 78    	mov.w     w1, w12
    13ec:	f8 0d 90    	mov.w     [w8+30], w11
    13ee:	78 00 90    	mov.w     [w8+14], w0
    13f0:	80 85 55    	sub.w     w11, w0, w11
    13f2:	08 08 90    	mov.w     [w8+16], w0
    13f4:	80 85 55    	sub.w     w11, w0, w11
    13f6:	18 08 90    	mov.w     [w8+18], w0
    13f8:	80 85 55    	sub.w     w11, w0, w11
    13fa:	28 08 90    	mov.w     [w8+20], w0
    13fc:	80 85 55    	sub.w     w11, w0, w11
    13fe:	38 08 90    	mov.w     [w8+22], w0
    1400:	80 85 55    	sub.w     w11, w0, w11
    1402:	48 08 90    	mov.w     [w8+24], w0
    1404:	80 85 55    	sub.w     w11, w0, w11
    1406:	00 02 22    	mov.w     #0x2020, w0
    1408:	90 bf 9f    	mov.w     w0, [w15-14]
    140a:	00 03 23    	mov.w     #0x3030, w0
    140c:	a0 bf 9f    	mov.w     w0, [w15-12]
    140e:	08 10 90    	mov.w     [w8+32], w0
    1410:	00 28 a3    	btst.z    w0, #0x2
    1412:	15 00 3a    	bra       NZ, 0x143e <.L2>
    1414:	0b 00 e0    	cp0.w     w11
    1416:	13 00 34    	bra       LE, 0x143e <.L2>
    1418:	0b 05 78    	mov.w     w11, w10

0000141a <.L5>:
    141a:	8a 04 78    	mov.w     w10, w9
    141c:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    141e:	01 00 36    	bra       LEU, 0x1422 <.L3>
    1420:	29 00 20    	mov.w     #0x2, w9

00001422 <.L3>:
    1422:	c8 01 90    	mov.w     [w8+8], w3
    1424:	09 01 78    	mov.w     w9, w2
    1426:	ee 80 57    	sub.w     w15, #0xe, w1
    1428:	58 00 90    	mov.w     [w8+10], w0
    142a:	03 00 01    	call      w3
    142c:	50 04 98    	mov.w     w0, [w8+10]
    142e:	00 00 e0    	cp0.w     w0
    1430:	8c 00 32    	bra       Z, 0x154a <.L29>
    1432:	68 08 90    	mov.w     [w8+28], w0
    1434:	09 00 40    	add.w     w0, w9, w0
    1436:	60 0c 98    	mov.w     w0, [w8+28]
    1438:	09 05 55    	sub.w     w10, w9, w10
    143a:	42 40 a9    	bclr.b    0x42, #0x2
    143c:	ee ff 3c    	bra       GT, 0x141a <.L5>

0000143e <.L2>:
    143e:	78 01 90    	mov.w     [w8+14], w2
    1440:	02 00 e0    	cp0.w     w2
    1442:	0c 00 34    	bra       LE, 0x145c <.L6>
    1444:	c8 01 90    	mov.w     [w8+8], w3
    1446:	8c 00 78    	mov.w     w12, w1
    1448:	58 00 90    	mov.w     [w8+10], w0
    144a:	03 00 01    	call      w3
    144c:	50 04 98    	mov.w     w0, [w8+10]
    144e:	80 80 eb    	setm.w    w1
    1450:	00 00 e0    	cp0.w     w0
    1452:	7c 00 32    	bra       Z, 0x154c <.L4>
    1454:	e8 08 90    	mov.w     [w8+28], w1
    1456:	78 00 90    	mov.w     [w8+14], w0
    1458:	00 80 40    	add.w     w1, w0, w0
    145a:	60 0c 98    	mov.w     w0, [w8+28]

0000145c <.L6>:
    145c:	88 0c 90    	mov.w     [w8+16], w9

0000145e <.L30>:
    145e:	09 00 e0    	cp0.w     w9
    1460:	11 00 34    	bra       LE, 0x1484 <.L7>
    1462:	09 05 78    	mov.w     w9, w10
    1464:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1466:	01 00 36    	bra       LEU, 0x146a <.L8>
    1468:	2a 00 20    	mov.w     #0x2, w10

0000146a <.L8>:
    146a:	c8 01 90    	mov.w     [w8+8], w3
    146c:	0a 01 78    	mov.w     w10, w2
    146e:	ec 80 57    	sub.w     w15, #0xc, w1
    1470:	58 00 90    	mov.w     [w8+10], w0
    1472:	03 00 01    	call      w3
    1474:	50 04 98    	mov.w     w0, [w8+10]
    1476:	00 00 e0    	cp0.w     w0
    1478:	68 00 32    	bra       Z, 0x154a <.L29>
    147a:	68 08 90    	mov.w     [w8+28], w0
    147c:	0a 00 40    	add.w     w0, w10, w0
    147e:	60 0c 98    	mov.w     w0, [w8+28]
    1480:	8a 84 54    	sub.w     w9, w10, w9
    1482:	ed ff 37    	bra       0x145e <.L30>

00001484 <.L7>:
    1484:	18 09 90    	mov.w     [w8+18], w2
    1486:	02 00 e0    	cp0.w     w2
    1488:	0c 00 34    	bra       LE, 0x14a2 <.L10>
    148a:	c8 01 90    	mov.w     [w8+8], w3
    148c:	e8 00 90    	mov.w     [w8+12], w1
    148e:	58 00 90    	mov.w     [w8+10], w0
    1490:	03 00 01    	call      w3
    1492:	50 04 98    	mov.w     w0, [w8+10]
    1494:	80 80 eb    	setm.w    w1
    1496:	00 00 e0    	cp0.w     w0
    1498:	59 00 32    	bra       Z, 0x154c <.L4>
    149a:	e8 08 90    	mov.w     [w8+28], w1
    149c:	18 08 90    	mov.w     [w8+18], w0
    149e:	00 80 40    	add.w     w1, w0, w0
    14a0:	60 0c 98    	mov.w     w0, [w8+28]

000014a2 <.L10>:
    14a2:	a8 0c 90    	mov.w     [w8+20], w9

000014a4 <.L31>:
    14a4:	09 00 e0    	cp0.w     w9
    14a6:	11 00 34    	bra       LE, 0x14ca <.L11>
    14a8:	09 05 78    	mov.w     w9, w10
    14aa:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    14ac:	01 00 36    	bra       LEU, 0x14b0 <.L12>
    14ae:	2a 00 20    	mov.w     #0x2, w10

000014b0 <.L12>:
    14b0:	c8 01 90    	mov.w     [w8+8], w3
    14b2:	0a 01 78    	mov.w     w10, w2
    14b4:	ec 80 57    	sub.w     w15, #0xc, w1
    14b6:	58 00 90    	mov.w     [w8+10], w0
    14b8:	03 00 01    	call      w3
    14ba:	50 04 98    	mov.w     w0, [w8+10]
    14bc:	00 00 e0    	cp0.w     w0
    14be:	45 00 32    	bra       Z, 0x154a <.L29>
    14c0:	68 08 90    	mov.w     [w8+28], w0
    14c2:	0a 00 40    	add.w     w0, w10, w0
    14c4:	60 0c 98    	mov.w     w0, [w8+28]
    14c6:	8a 84 54    	sub.w     w9, w10, w9
    14c8:	ed ff 37    	bra       0x14a4 <.L31>

000014ca <.L11>:
    14ca:	38 09 90    	mov.w     [w8+22], w2
    14cc:	02 00 e0    	cp0.w     w2
    14ce:	0e 00 34    	bra       LE, 0x14ec <.L14>
    14d0:	e8 00 90    	mov.w     [w8+12], w1
    14d2:	18 08 90    	mov.w     [w8+18], w0
    14d4:	80 80 40    	add.w     w1, w0, w1
    14d6:	c8 01 90    	mov.w     [w8+8], w3
    14d8:	58 00 90    	mov.w     [w8+10], w0
    14da:	03 00 01    	call      w3
    14dc:	50 04 98    	mov.w     w0, [w8+10]
    14de:	80 80 eb    	setm.w    w1
    14e0:	00 00 e0    	cp0.w     w0
    14e2:	34 00 32    	bra       Z, 0x154c <.L4>
    14e4:	e8 08 90    	mov.w     [w8+28], w1
    14e6:	38 08 90    	mov.w     [w8+22], w0
    14e8:	00 80 40    	add.w     w1, w0, w0
    14ea:	60 0c 98    	mov.w     w0, [w8+28]

000014ec <.L14>:
    14ec:	c8 0c 90    	mov.w     [w8+24], w9

000014ee <.L32>:
    14ee:	09 00 e0    	cp0.w     w9
    14f0:	11 00 34    	bra       LE, 0x1514 <.L15>
    14f2:	09 05 78    	mov.w     w9, w10
    14f4:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    14f6:	01 00 36    	bra       LEU, 0x14fa <.L16>
    14f8:	2a 00 20    	mov.w     #0x2, w10

000014fa <.L16>:
    14fa:	c8 01 90    	mov.w     [w8+8], w3
    14fc:	0a 01 78    	mov.w     w10, w2
    14fe:	ec 80 57    	sub.w     w15, #0xc, w1
    1500:	58 00 90    	mov.w     [w8+10], w0
    1502:	03 00 01    	call      w3
    1504:	50 04 98    	mov.w     w0, [w8+10]
    1506:	00 00 e0    	cp0.w     w0
    1508:	20 00 32    	bra       Z, 0x154a <.L29>
    150a:	68 08 90    	mov.w     [w8+28], w0
    150c:	0a 00 40    	add.w     w0, w10, w0
    150e:	60 0c 98    	mov.w     w0, [w8+28]
    1510:	8a 84 54    	sub.w     w9, w10, w9
    1512:	ed ff 37    	bra       0x14ee <.L32>

00001514 <.L15>:
    1514:	08 10 90    	mov.w     [w8+32], w0
    1516:	80 00 eb    	clr.w     w1
    1518:	00 28 a3    	btst.z    w0, #0x2
    151a:	18 00 32    	bra       Z, 0x154c <.L4>
    151c:	0b 00 e0    	cp0.w     w11
    151e:	16 00 34    	bra       LE, 0x154c <.L4>
    1520:	8b 04 78    	mov.w     w11, w9

00001522 <.L19>:
    1522:	09 05 78    	mov.w     w9, w10
    1524:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1526:	01 00 36    	bra       LEU, 0x152a <.L18>
    1528:	2a 00 20    	mov.w     #0x2, w10

0000152a <.L18>:
    152a:	c8 01 90    	mov.w     [w8+8], w3
    152c:	0a 01 78    	mov.w     w10, w2
    152e:	ee 80 57    	sub.w     w15, #0xe, w1
    1530:	58 00 90    	mov.w     [w8+10], w0
    1532:	03 00 01    	call      w3
    1534:	50 04 98    	mov.w     w0, [w8+10]
    1536:	00 00 e0    	cp0.w     w0
    1538:	08 00 32    	bra       Z, 0x154a <.L29>
    153a:	68 08 90    	mov.w     [w8+28], w0
    153c:	0a 00 40    	add.w     w0, w10, w0
    153e:	60 0c 98    	mov.w     w0, [w8+28]
    1540:	8a 84 54    	sub.w     w9, w10, w9
    1542:	42 40 a9    	bclr.b    0x42, #0x2
    1544:	ee ff 3c    	bra       GT, 0x1522 <.L19>
    1546:	80 00 eb    	clr.w     w1
    1548:	01 00 37    	bra       0x154c <.L4>

0000154a <.L29>:
    154a:	80 80 eb    	setm.w    w1

0000154c <.L4>:
    154c:	01 00 78    	mov.w     w1, w0
    154e:	4f 06 78    	mov.w     [--w15], w12
    1550:	4f 05 be    	mov.d     [--w15], w10
    1552:	4f 04 be    	mov.d     [--w15], w8
    1554:	00 80 fa    	ulnk      
    1556:	00 00 06    	return    

00001558 <__Vacopy>:
    1558:	01 08 78    	mov.w     w1, [w0]
    155a:	00 00 06    	return    

0000155c <___Putfld_cdnopuxX>:
    155c:	88 9f be    	mov.d     w8, [w15++]
    155e:	8a 9f be    	mov.d     w10, [w15++]
    1560:	e4 c6 b3    	mov.b     #0x6e, w4
    1562:	84 4f 51    	sub.b     w2, w4, [w15]
    1564:	be 00 32    	bra       Z, 0x16e2 <.L7>
    1566:	10 00 3c    	bra       GT, 0x1588 <.L9>
    1568:	6b 42 52    	sub.b     w4, #0xb, w4
    156a:	84 4f 51    	sub.b     w2, w4, [w15]
    156c:	18 00 32    	bra       Z, 0x159e <.L5>
    156e:	05 00 3c    	bra       GT, 0x157a <.L10>
    1570:	54 c2 b3    	mov.b     #0x25, w4
    1572:	84 4f 51    	sub.b     w2, w4, [w15]
    1574:	f6 00 32    	bra       Z, 0x1762 <.L3>
    1576:	84 c5 b3    	mov.b     #0x58, w4
    1578:	0f 00 37    	bra       0x1598 <.L47>

0000157a <.L10>:
    157a:	44 c6 b3    	mov.b     #0x64, w4
    157c:	84 4f 51    	sub.b     w2, w4, [w15]
    157e:	14 00 32    	bra       Z, 0x15a8 <.L6>
    1580:	65 42 42    	add.b     w4, #0x5, w4
    1582:	84 4f 51    	sub.b     w2, w4, [w15]
    1584:	f1 00 3a    	bra       NZ, 0x1768 <.L2>
    1586:	10 00 37    	bra       0x15a8 <.L6>

00001588 <.L9>:
    1588:	04 c7 b3    	mov.b     #0x70, w4
    158a:	84 4f 51    	sub.b     w2, w4, [w15]
    158c:	dd 00 32    	bra       Z, 0x1748 <.L8>
    158e:	56 00 35    	bra       LT, 0x163c <.L4>
    1590:	65 42 42    	add.b     w4, #0x5, w4
    1592:	84 4f 51    	sub.b     w2, w4, [w15]
    1594:	53 00 32    	bra       Z, 0x163c <.L4>
    1596:	63 42 42    	add.b     w4, #0x3, w4

00001598 <.L47>:
    1598:	84 4f 51    	sub.b     w2, w4, [w15]
    159a:	e6 00 3a    	bra       NZ, 0x1768 <.L2>
    159c:	4f 00 37    	bra       0x163c <.L4>

0000159e <.L5>:
    159e:	11 81 e9    	dec2.w    [w1], w2
    15a0:	82 08 78    	mov.w     w2, [w1]
    15a2:	f0 00 90    	mov.w     [w0+14], w1
    15a4:	12 41 78    	mov.b     [w2], w2
    15a6:	de 00 37    	bra       0x1764 <.L53>

000015a8 <.L6>:
    15a8:	20 62 90    	mov.b     [w0+34], w4
    15aa:	c5 c6 b3    	mov.b     #0x6c, w5
    15ac:	85 4f 52    	sub.b     w4, w5, [w15]
    15ae:	07 00 3a    	bra       NZ, 0x15be <.L12>
    15b0:	91 02 78    	mov.w     [w1], w5
    15b2:	64 82 52    	sub.w     w5, #0x4, w4
    15b4:	84 08 78    	mov.w     w4, [w1]
    15b6:	14 02 be    	mov.d     [w4], w4
    15b8:	4f ab de    	asr.w     w5, #0xf, w6
    15ba:	86 03 78    	mov.w     w6, w7
    15bc:	14 00 37    	bra       0x15e6 <.L13>

000015be <.L12>:
    15be:	15 c7 b3    	mov.b     #0x71, w5
    15c0:	85 4f 52    	sub.b     w4, w5, [w15]
    15c2:	03 00 3a    	bra       NZ, 0x15ca <.L14>
    15c4:	11 04 78    	mov.w     [w1], w8
    15c6:	68 02 54    	sub.w     w8, #0x8, w4
    15c8:	05 00 37    	bra       0x15d4 <.L43>

000015ca <.L14>:
    15ca:	a5 c6 b3    	mov.b     #0x6a, w5
    15cc:	85 4f 52    	sub.b     w4, w5, [w15]
    15ce:	06 00 3a    	bra       NZ, 0x15dc <.L15>
    15d0:	91 04 78    	mov.w     [w1], w9
    15d2:	68 82 54    	sub.w     w9, #0x8, w4

000015d4 <.L43>:
    15d4:	84 08 78    	mov.w     w4, [w1]
    15d6:	54 03 be    	mov.d     [++w4], w6
    15d8:	44 02 be    	mov.d     [--w4], w4
    15da:	05 00 37    	bra       0x15e6 <.L13>

000015dc <.L15>:
    15dc:	11 82 e9    	dec2.w    [w1], w4
    15de:	84 08 78    	mov.w     w4, [w1]
    15e0:	14 02 78    	mov.w     [w4], w4
    15e2:	cf a2 de    	asr.w     w4, #0xf, w5
    15e4:	61 2b b9    	mul.su    w5, #0x1, w6

000015e6 <.L13>:
    15e6:	04 98 be    	mov.d     w4, [w0++]
    15e8:	06 90 be    	mov.d     w6, [w0--]
    15ea:	a0 60 90    	mov.b     [w0+34], w1
    15ec:	88 c6 b3    	mov.b     #0x68, w8
    15ee:	88 cf 50    	sub.b     w1, w8, [w15]
    15f0:	0d 00 32    	bra       Z, 0x160c <.L19>
    15f2:	28 c6 b3    	mov.b     #0x62, w8
    15f4:	88 cf 50    	sub.b     w1, w8, [w15]
    15f6:	04 00 3a    	bra       NZ, 0x1600 <.L18>
    15f8:	04 02 fb    	se        w4, w4
    15fa:	cf a2 de    	asr.w     w4, #0xf, w5
    15fc:	61 2b b9    	mul.su    w5, #0x1, w6
    15fe:	08 00 37    	bra       0x1610 <.L44>

00001600 <.L18>:
    1600:	48 c7 b3    	mov.b     #0x74, w8
    1602:	88 cf 50    	sub.b     w1, w8, [w15]
    1604:	03 00 32    	bra       Z, 0x160c <.L19>
    1606:	66 44 44    	add.b     w8, #0x6, w8
    1608:	88 cf 50    	sub.b     w1, w8, [w15]
    160a:	04 00 3a    	bra       NZ, 0x1614 <.L17>

0000160c <.L19>:
    160c:	cf a2 de    	asr.w     w4, #0xf, w5
    160e:	61 2b b9    	mul.su    w5, #0x1, w6

00001610 <.L44>:
    1610:	04 98 be    	mov.d     w4, [w0++]
    1612:	06 90 be    	mov.d     w6, [w0--]

00001614 <.L17>:
    1614:	30 02 be    	mov.d     [w0++], w4
    1616:	20 03 be    	mov.d     [w0--], w6
    1618:	f0 00 90    	mov.w     [w0+14], w1
    161a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    161c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    161e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1620:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1622:	02 00 3d    	bra       GE, 0x1628 <.L20>
    1624:	d4 c2 b3    	mov.b     #0x2d, w4
    1626:	08 00 37    	bra       0x1638 <.L45>

00001628 <.L20>:
    1628:	00 12 90    	mov.w     [w0+32], w4
    162a:	04 18 a3    	btst.z    w4, #0x1
    162c:	02 00 32    	bra       Z, 0x1632 <.L22>
    162e:	b4 c2 b3    	mov.b     #0x2b, w4
    1630:	03 00 37    	bra       0x1638 <.L45>

00001632 <.L22>:
    1632:	04 08 a3    	btst.z    w4, #0x0
    1634:	51 00 32    	bra       Z, 0x16d8 <.L31>
    1636:	04 c2 b3    	mov.b     #0x20, w4

00001638 <.L45>:
    1638:	84 f1 78    	mov.b     w4, [w3+w1]
    163a:	4c 00 37    	bra       0x16d4 <.L54>

0000163c <.L4>:
    163c:	20 62 90    	mov.b     [w0+34], w4
    163e:	c5 c6 b3    	mov.b     #0x6c, w5
    1640:	85 4f 52    	sub.b     w4, w5, [w15]
    1642:	08 00 3a    	bra       NZ, 0x1654 <.L23>
    1644:	11 05 78    	mov.w     [w1], w10
    1646:	64 02 55    	sub.w     w10, #0x4, w4
    1648:	84 08 78    	mov.w     w4, [w1]
    164a:	14 04 be    	mov.d     [w4], w8
    164c:	60 55 b8    	mul.uu    w10, #0x0, w10
    164e:	08 02 be    	mov.d     w8, w4
    1650:	0a 03 be    	mov.d     w10, w6
    1652:	14 00 37    	bra       0x167c <.L24>

00001654 <.L23>:
    1654:	15 c7 b3    	mov.b     #0x71, w5
    1656:	85 4f 52    	sub.b     w4, w5, [w15]
    1658:	03 00 3a    	bra       NZ, 0x1660 <.L25>
    165a:	91 04 78    	mov.w     [w1], w9
    165c:	68 82 54    	sub.w     w9, #0x8, w4
    165e:	05 00 37    	bra       0x166a <.L48>

00001660 <.L25>:
    1660:	a5 c6 b3    	mov.b     #0x6a, w5
    1662:	85 4f 52    	sub.b     w4, w5, [w15]
    1664:	06 00 3a    	bra       NZ, 0x1672 <.L26>
    1666:	11 05 78    	mov.w     [w1], w10
    1668:	68 02 55    	sub.w     w10, #0x8, w4

0000166a <.L48>:
    166a:	84 08 78    	mov.w     w4, [w1]
    166c:	54 03 be    	mov.d     [++w4], w6
    166e:	44 02 be    	mov.d     [--w4], w4
    1670:	05 00 37    	bra       0x167c <.L24>

00001672 <.L26>:
    1672:	11 82 e9    	dec2.w    [w1], w4
    1674:	84 08 78    	mov.w     w4, [w1]
    1676:	14 02 78    	mov.w     [w4], w4
    1678:	80 02 eb    	clr.w     w5
    167a:	60 33 b8    	mul.uu    w6, #0x0, w6

0000167c <.L24>:
    167c:	04 98 be    	mov.d     w4, [w0++]
    167e:	06 90 be    	mov.d     w6, [w0--]
    1680:	a0 60 90    	mov.b     [w0+34], w1
    1682:	88 c6 b3    	mov.b     #0x68, w8
    1684:	88 cf 50    	sub.b     w1, w8, [w15]
    1686:	0d 00 32    	bra       Z, 0x16a2 <.L30>
    1688:	28 c6 b3    	mov.b     #0x62, w8
    168a:	88 cf 50    	sub.b     w1, w8, [w15]
    168c:	04 00 3a    	bra       NZ, 0x1696 <.L29>
    168e:	04 82 fb    	ze        w4, w4
    1690:	80 02 eb    	clr.w     w5
    1692:	60 33 b8    	mul.uu    w6, #0x0, w6
    1694:	08 00 37    	bra       0x16a6 <.L49>

00001696 <.L29>:
    1696:	48 c7 b3    	mov.b     #0x74, w8
    1698:	88 cf 50    	sub.b     w1, w8, [w15]
    169a:	03 00 32    	bra       Z, 0x16a2 <.L30>
    169c:	66 44 44    	add.b     w8, #0x6, w8
    169e:	88 cf 50    	sub.b     w1, w8, [w15]
    16a0:	04 00 3a    	bra       NZ, 0x16aa <.L28>

000016a2 <.L30>:
    16a2:	80 02 eb    	clr.w     w5
    16a4:	60 33 b8    	mul.uu    w6, #0x0, w6

000016a6 <.L49>:
    16a6:	04 98 be    	mov.d     w4, [w0++]
    16a8:	06 90 be    	mov.d     w6, [w0--]

000016aa <.L28>:
    16aa:	80 10 90    	mov.w     [w0+32], w1
    16ac:	01 38 a3    	btst.z    w1, #0x3
    16ae:	14 00 32    	bra       Z, 0x16d8 <.L31>
    16b0:	30 02 be    	mov.d     [w0++], w4
    16b2:	20 03 be    	mov.d     [w0--], w6
    16b4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    16b6:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    16b8:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    16ba:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    16bc:	0d 00 32    	bra       Z, 0x16d8 <.L31>
    16be:	81 c7 b3    	mov.b     #0x78, w1
    16c0:	81 4f 51    	sub.b     w2, w1, [w15]
    16c2:	03 00 32    	bra       Z, 0x16ca <.L32>
    16c4:	81 c5 b3    	mov.b     #0x58, w1
    16c6:	81 4f 51    	sub.b     w2, w1, [w15]
    16c8:	07 00 3a    	bra       NZ, 0x16d8 <.L31>

000016ca <.L32>:
    16ca:	f0 00 90    	mov.w     [w0+14], w1
    16cc:	04 c3 b3    	mov.b     #0x30, w4
    16ce:	84 f1 78    	mov.b     w4, [w3+w1]
    16d0:	81 00 e8    	inc.w     w1, w1
    16d2:	82 f1 78    	mov.b     w2, [w3+w1]

000016d4 <.L54>:
    16d4:	81 00 e8    	inc.w     w1, w1
    16d6:	71 00 98    	mov.w     w1, [w0+14]

000016d8 <.L31>:
    16d8:	f0 00 90    	mov.w     [w0+14], w1
    16da:	81 81 41    	add.w     w3, w1, w3
    16dc:	63 00 98    	mov.w     w3, [w0+12]
    16de:	82 40 78    	mov.b     w2, w1
    16e0:	3e 00 37    	bra       0x175e <.L52>

000016e2 <.L7>:
    16e2:	a0 61 90    	mov.b     [w0+34], w3
    16e4:	c4 c6 b3    	mov.b     #0x6c, w4
    16e6:	11 81 e9    	dec2.w    [w1], w2
    16e8:	84 cf 51    	sub.b     w3, w4, [w15]
    16ea:	22 00 32    	bra       Z, 0x1730 <.L37>
    16ec:	0a 00 3c    	bra       GT, 0x1702 <.L41>
    16ee:	64 42 52    	sub.b     w4, #0x4, w4
    16f0:	84 cf 51    	sub.b     w3, w4, [w15]
    16f2:	25 00 32    	bra       Z, 0x173e <.L51>
    16f4:	04 c2 e8    	inc2.b    w4, w4
    16f6:	84 cf 51    	sub.b     w3, w4, [w15]
    16f8:	13 00 32    	bra       Z, 0x1720 <.L36>
    16fa:	68 42 52    	sub.b     w4, #0x8, w4
    16fc:	84 cf 51    	sub.b     w3, w4, [w15]
    16fe:	1e 00 3a    	bra       NZ, 0x173c <.L33>
    1700:	0a 00 37    	bra       0x1716 <.L55>

00001702 <.L41>:
    1702:	44 c7 b3    	mov.b     #0x74, w4
    1704:	84 cf 51    	sub.b     w3, w4, [w15]
    1706:	1b 00 32    	bra       Z, 0x173e <.L51>
    1708:	66 42 42    	add.b     w4, #0x6, w4
    170a:	84 cf 51    	sub.b     w3, w4, [w15]
    170c:	18 00 32    	bra       Z, 0x173e <.L51>
    170e:	69 42 52    	sub.b     w4, #0x9, w4
    1710:	84 cf 51    	sub.b     w3, w4, [w15]
    1712:	14 00 3a    	bra       NZ, 0x173c <.L33>
    1714:	05 00 37    	bra       0x1720 <.L36>

00001716 <.L55>:
    1716:	82 08 78    	mov.w     w2, [w1]
    1718:	92 00 78    	mov.w     [w2], w1
    171a:	40 58 90    	mov.b     [w0+28], w0
    171c:	80 48 78    	mov.b     w0, [w1]
    171e:	2c 00 37    	bra       0x1778 <.L11>

00001720 <.L36>:
    1720:	82 08 78    	mov.w     w2, [w1]
    1722:	92 00 78    	mov.w     [w2], w1
    1724:	60 0a 90    	mov.w     [w0+28], w4
    1726:	cf a2 de    	asr.w     w4, #0xf, w5
    1728:	61 2b b9    	mul.su    w5, #0x1, w6
    172a:	84 98 be    	mov.d     w4, [w1++]
    172c:	86 90 be    	mov.d     w6, [w1--]
    172e:	24 00 37    	bra       0x1778 <.L11>

00001730 <.L37>:
    1730:	82 08 78    	mov.w     w2, [w1]
    1732:	92 00 78    	mov.w     [w2], w1
    1734:	60 09 90    	mov.w     [w0+28], w2
    1736:	cf 91 de    	asr.w     w2, #0xf, w3
    1738:	82 88 be    	mov.d     w2, [w1]
    173a:	1e 00 37    	bra       0x1778 <.L11>

0000173c <.L33>:
    173c:	11 81 e9    	dec2.w    [w1], w2

0000173e <.L51>:
    173e:	82 08 78    	mov.w     w2, [w1]
    1740:	92 00 78    	mov.w     [w2], w1
    1742:	60 08 90    	mov.w     [w0+28], w0
    1744:	80 08 78    	mov.w     w0, [w1]
    1746:	18 00 37    	bra       0x1778 <.L11>

00001748 <.L8>:
    1748:	11 81 e9    	dec2.w    [w1], w2
    174a:	82 08 78    	mov.w     w2, [w1]
    174c:	12 02 78    	mov.w     [w2], w4
    174e:	cf a2 de    	asr.w     w4, #0xf, w5
    1750:	61 2b b9    	mul.su    w5, #0x1, w6
    1752:	04 98 be    	mov.d     w4, [w0++]
    1754:	06 90 be    	mov.d     w6, [w0--]
    1756:	f0 00 90    	mov.w     [w0+14], w1
    1758:	81 81 41    	add.w     w3, w1, w3
    175a:	63 00 98    	mov.w     w3, [w0+12]
    175c:	81 c7 b3    	mov.b     #0x78, w1

0000175e <.L52>:
    175e:	10 00 07    	rcall     0x1780 <__Litob>
    1760:	0b 00 37    	bra       0x1778 <.L11>

00001762 <.L3>:
    1762:	f0 00 90    	mov.w     [w0+14], w1

00001764 <.L53>:
    1764:	82 f1 78    	mov.b     w2, [w3+w1]
    1766:	06 00 37    	bra       0x1774 <.L50>

00001768 <.L2>:
    1768:	f0 00 90    	mov.w     [w0+14], w1
    176a:	81 81 41    	add.w     w3, w1, w3
    176c:	02 04 e0    	cp0.b     w2
    176e:	01 00 3a    	bra       NZ, 0x1772 <.L42>
    1770:	52 c2 b3    	mov.b     #0x25, w2

00001772 <.L42>:
    1772:	82 49 78    	mov.b     w2, [w3]

00001774 <.L50>:
    1774:	81 00 e8    	inc.w     w1, w1
    1776:	71 00 98    	mov.w     w1, [w0+14]

00001778 <.L11>:
    1778:	00 00 eb    	clr.w     w0
    177a:	4f 05 be    	mov.d     [--w15], w10
    177c:	4f 04 be    	mov.d     [--w15], w8
    177e:	00 00 06    	return    

00001780 <__Litob>:
    1780:	fc 87 47    	add.w     w15, #0x1c, w15
    1782:	88 9f be    	mov.d     w8, [w15++]
    1784:	8a 9f be    	mov.d     w10, [w15++]
    1786:	8c 9f be    	mov.d     w12, [w15++]
    1788:	8e 1f 78    	mov.w     w14, [w15++]
    178a:	00 06 78    	mov.w     w0, w12
    178c:	80 c5 b3    	mov.b     #0x58, w0
    178e:	80 cf 50    	sub.b     w1, w0, [w15]
    1790:	0a 00 32    	bra       Z, 0x17a6 <.L35>
    1792:	77 40 40    	add.b     w0, #0x17, w0
    1794:	80 cf 50    	sub.b     w1, w0, [w15]
    1796:	0a 00 32    	bra       Z, 0x17ac <.L36>
    1798:	69 40 40    	add.b     w0, #0x9, w0
    179a:	80 cf 50    	sub.b     w1, w0, [w15]
    179c:	0b 00 32    	bra       Z, 0x17b4 <.L37>
    179e:	90 0d 21    	mov.w     #0x10d9, w0
    17a0:	80 bf 9f    	mov.w     w0, [w15-16]
    17a2:	ae 00 20    	mov.w     #0xa, w14
    17a4:	0a 00 37    	bra       0x17ba <.L2>

000017a6 <.L35>:
    17a6:	82 0c 21    	mov.w     #0x10c8, w2
    17a8:	82 bf 9f    	mov.w     w2, [w15-16]
    17aa:	06 00 37    	bra       0x17b8 <.L46>

000017ac <.L36>:
    17ac:	93 0d 21    	mov.w     #0x10d9, w3
    17ae:	83 bf 9f    	mov.w     w3, [w15-16]
    17b0:	8e 00 20    	mov.w     #0x8, w14
    17b2:	03 00 37    	bra       0x17ba <.L2>

000017b4 <.L37>:
    17b4:	94 0d 21    	mov.w     #0x10d9, w4
    17b6:	84 bf 9f    	mov.w     w4, [w15-16]

000017b8 <.L46>:
    17b8:	0e 01 20    	mov.w     #0x10, w14

000017ba <.L2>:
    17ba:	3c 02 be    	mov.d     [w12++], w4
    17bc:	2c 03 be    	mov.d     [w12--], w6
    17be:	06 05 be    	mov.d     w6, w10
    17c0:	04 04 be    	mov.d     w4, w8
    17c2:	40 c6 b3    	mov.b     #0x64, w0
    17c4:	80 cf 50    	sub.b     w1, w0, [w15]
    17c6:	03 00 32    	bra       Z, 0x17ce <.L3>
    17c8:	65 40 40    	add.b     w0, #0x5, w0
    17ca:	80 cf 50    	sub.b     w1, w0, [w15]
    17cc:	0b 00 3a    	bra       NZ, 0x17e4 <.L4>

000017ce <.L3>:
    17ce:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    17d0:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    17d2:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    17d4:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    17d6:	06 00 3d    	bra       GE, 0x17e4 <.L4>
    17d8:	60 00 b8    	mul.uu    w0, #0x0, w0
    17da:	60 11 b8    	mul.uu    w2, #0x0, w2
    17dc:	04 04 50    	sub.w     w0, w4, w8
    17de:	85 84 58    	subb.w    w1, w5, w9
    17e0:	06 05 59    	subb.w    w2, w6, w10
    17e2:	87 85 59    	subb.w    w3, w7, w11

000017e4 <.L4>:
    17e4:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    17e6:	04 00 32    	bra       Z, 0x17f0 <.L38>
    17e8:	40 00 20    	mov.w     #0x4, w0
    17ea:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    17ec:	38 00 3a    	bra       NZ, 0x185e <.L51>
    17ee:	01 00 37    	bra       0x17f2 <.L6>

000017f0 <.L38>:
    17f0:	30 00 20    	mov.w     #0x3, w0

000017f2 <.L6>:
    17f2:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    17f4:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    17f6:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    17f8:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    17fa:	04 00 3a    	bra       NZ, 0x1804 <.L8>
    17fc:	dc 08 90    	mov.w     [w12+26], w1
    17fe:	8d 01 20    	mov.w     #0x18, w13
    1800:	01 00 e0    	cp0.w     w1
    1802:	06 00 32    	bra       Z, 0x1810 <.L9>

00001804 <.L8>:
    1804:	8e 00 e9    	dec.w     w14, w1
    1806:	88 80 60    	and.w     w1, w8, w1
    1808:	8f ba 97    	mov.w     [w15-16], w5
    180a:	e5 c0 78    	mov.b     [w5+w1], w1
    180c:	f1 ef 9f    	mov.b     w1, [w15-17]
    180e:	7d 01 20    	mov.w     #0x17, w13

00001810 <.L9>:
    1810:	80 00 78    	mov.w     w0, w1

00001812 <.LB101>:
    1812:	81 00 e9    	dec.w     w1, w1
    1814:	05 00 33    	bra       N, 0x1820 <.LE101>
    1816:	8b 05 d1    	lsr.w     w11, w11
    1818:	0a 85 d3    	rrc.w     w10, w10
    181a:	89 84 d3    	rrc.w     w9, w9
    181c:	08 84 d3    	rrc.w     w8, w8
    181e:	f9 ff 37    	bra       0x1812 <.LB101>

00001820 <.LE101>:
    1820:	08 9e be    	mov.d     w8, [w12++]
    1822:	0a 96 be    	mov.d     w10, [w12--]
    1824:	12 00 37    	bra       0x184a <.L10>

00001826 <.L12>:
    1826:	8d 06 e9    	dec.w     w13, w13
    1828:	8e 00 e9    	dec.w     w14, w1
    182a:	84 80 60    	and.w     w1, w4, w1
    182c:	0f b9 97    	mov.w     [w15-16], w2
    182e:	e2 c1 78    	mov.b     [w2+w1], w3
    1830:	82 fd 2f    	mov.w     #0xffd8, w2
    1832:	0f 01 41    	add.w     w2, w15, w2
    1834:	03 f1 7e    	mov.b     w3, [w2+w13]
    1836:	80 00 78    	mov.w     w0, w1

00001838 <.LB115>:
    1838:	81 00 e9    	dec.w     w1, w1
    183a:	05 00 33    	bra       N, 0x1846 <.LE115>
    183c:	87 83 d1    	asr.w     w7, w7
    183e:	06 83 d3    	rrc.w     w6, w6
    1840:	85 82 d3    	rrc.w     w5, w5
    1842:	04 82 d3    	rrc.w     w4, w4
    1844:	f9 ff 37    	bra       0x1838 <.LB115>

00001846 <.LE115>:
    1846:	04 9e be    	mov.d     w4, [w12++]
    1848:	06 96 be    	mov.d     w6, [w12--]

0000184a <.L10>:
    184a:	3c 02 be    	mov.d     [w12++], w4
    184c:	2c 03 be    	mov.d     [w12--], w6
    184e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1850:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1852:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1854:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1856:	8b 00 34    	bra       LE, 0x196e <.L11>
    1858:	0d 00 e0    	cp0.w     w13
    185a:	e5 ff 3c    	bra       GT, 0x1826 <.L12>
    185c:	88 00 37    	bra       0x196e <.L11>

0000185e <.L51>:
    185e:	2c 60 90    	mov.b     [w12+34], w0
    1860:	81 c6 b3    	mov.b     #0x68, w1
    1862:	81 4f 50    	sub.b     w0, w1, [w15]
    1864:	0b 00 32    	bra       Z, 0x187c <.L14>
    1866:	06 00 3c    	bra       GT, 0x1874 <.L16>
    1868:	00 04 e0    	cp0.b     w0
    186a:	08 00 32    	bra       Z, 0x187c <.L14>
    186c:	e6 c0 50    	sub.b     w1, #0x6, w1
    186e:	81 4f 50    	sub.b     w0, w1, [w15]
    1870:	4e 00 3a    	bra       NZ, 0x190e <.L13>
    1872:	04 00 37    	bra       0x187c <.L14>

00001874 <.L16>:
    1874:	c1 c6 b3    	mov.b     #0x6c, w1
    1876:	81 4f 50    	sub.b     w0, w1, [w15]
    1878:	4a 00 3a    	bra       NZ, 0x190e <.L13>
    187a:	21 00 37    	bra       0x18be <.L52>

0000187c <.L14>:
    187c:	08 00 e0    	cp0.w     w8
    187e:	04 00 3a    	bra       NZ, 0x1888 <.L17>
    1880:	5c 08 90    	mov.w     [w12+26], w0
    1882:	8d 01 20    	mov.w     #0x18, w13
    1884:	00 00 e0    	cp0.w     w0
    1886:	06 00 32    	bra       Z, 0x1894 <.L18>

00001888 <.L17>:
    1888:	11 00 09    	repeat    #0x11
    188a:	0e 84 d8    	div.uw    w8, w14
    188c:	0f b9 97    	mov.w     [w15-16], w2
    188e:	e2 c0 78    	mov.b     [w2+w1], w1
    1890:	f1 ef 9f    	mov.b     w1, [w15-17]
    1892:	7d 01 20    	mov.w     #0x17, w13

00001894 <.L18>:
    1894:	11 00 09    	repeat    #0x11
    1896:	0e 84 d8    	div.uw    w8, w14
    1898:	0a 00 37    	bra       0x18ae <.L47>

0000189a <.L21>:
    189a:	11 00 09    	repeat    #0x11
    189c:	0e 04 d8    	div.sw    w8, w14
    189e:	8d 06 e9    	dec.w     w13, w13
    18a0:	0e 81 b9    	mul.ss    w0, w14, w2
    18a2:	02 04 54    	sub.w     w8, w2, w8
    18a4:	8f b8 97    	mov.w     [w15-16], w1
    18a6:	61 41 7c    	mov.b     [w1+w8], w2
    18a8:	81 fd 2f    	mov.w     #0xffd8, w1
    18aa:	8f 80 40    	add.w     w1, w15, w1
    18ac:	82 f0 7e    	mov.b     w2, [w1+w13]

000018ae <.L47>:
    18ae:	00 04 78    	mov.w     w0, w8
    18b0:	08 00 e0    	cp0.w     w8
    18b2:	02 00 32    	bra       Z, 0x18b8 <.L20>
    18b4:	0d 00 e0    	cp0.w     w13
    18b6:	f1 ff 3c    	bra       GT, 0x189a <.L21>

000018b8 <.L20>:
    18b8:	cf c4 de    	asr.w     w8, #0xf, w9
    18ba:	61 4d b9    	mul.su    w9, #0x1, w10
    18bc:	25 00 37    	bra       0x1908 <.L50>

000018be <.L52>:
    18be:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    18c0:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    18c2:	04 00 3a    	bra       NZ, 0x18cc <.L22>
    18c4:	5c 08 90    	mov.w     [w12+26], w0
    18c6:	8d 01 20    	mov.w     #0x18, w13
    18c8:	00 00 e0    	cp0.w     w0
    18ca:	07 00 32    	bra       Z, 0x18da <.L23>

000018cc <.L22>:
    18cc:	61 71 b9    	mul.su    w14, #0x1, w2
    18ce:	08 00 be    	mov.d     w8, w0
    18d0:	a5 00 07    	rcall     0x1a1c <___umodsi3>
    18d2:	8f b9 97    	mov.w     [w15-16], w3
    18d4:	e3 41 78    	mov.b     [w3+w0], w3
    18d6:	f3 ef 9f    	mov.b     w3, [w15-17]
    18d8:	7d 01 20    	mov.w     #0x17, w13

000018da <.L23>:
    18da:	61 71 b9    	mul.su    w14, #0x1, w2
    18dc:	08 00 be    	mov.d     w8, w0
    18de:	8e 00 07    	rcall     0x19fc <___udivsi3>
    18e0:	0b 00 37    	bra       0x18f8 <.L48>

000018e2 <.L26>:
    18e2:	61 71 b9    	mul.su    w14, #0x1, w2
    18e4:	08 00 be    	mov.d     w8, w0
    18e6:	7b 00 07    	rcall     0x19de <___divsi3>
    18e8:	8d 06 e9    	dec.w     w13, w13
    18ea:	00 f1 b9    	mul.ss    w14, w0, w2
    18ec:	02 04 54    	sub.w     w8, w2, w8
    18ee:	0f ba 97    	mov.w     [w15-16], w4
    18f0:	e4 42 7c    	mov.b     [w4+w8], w5
    18f2:	84 fd 2f    	mov.w     #0xffd8, w4
    18f4:	0f 02 42    	add.w     w4, w15, w4
    18f6:	05 f2 7e    	mov.b     w5, [w4+w13]

000018f8 <.L48>:
    18f8:	00 04 be    	mov.d     w0, w8
    18fa:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    18fc:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    18fe:	02 00 32    	bra       Z, 0x1904 <.L25>
    1900:	0d 00 e0    	cp0.w     w13
    1902:	ef ff 3c    	bra       GT, 0x18e2 <.L26>

00001904 <.L25>:
    1904:	4f cd de    	asr.w     w9, #0xf, w10
    1906:	8a 05 78    	mov.w     w10, w11

00001908 <.L50>:
    1908:	08 9e be    	mov.d     w8, [w12++]
    190a:	0a 96 be    	mov.d     w10, [w12--]
    190c:	30 00 37    	bra       0x196e <.L11>

0000190e <.L13>:
    190e:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1910:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1912:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1914:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1916:	04 00 3a    	bra       NZ, 0x1920 <.L27>
    1918:	5c 08 90    	mov.w     [w12+26], w0
    191a:	8d 01 20    	mov.w     #0x18, w13
    191c:	00 00 e0    	cp0.w     w0
    191e:	09 00 32    	bra       Z, 0x1932 <.L28>

00001920 <.L27>:
    1920:	61 72 b9    	mul.su    w14, #0x1, w4
    1922:	61 2b b9    	mul.su    w5, #0x1, w6
    1924:	08 00 be    	mov.d     w8, w0
    1926:	0a 01 be    	mov.d     w10, w2
    1928:	1c 01 07    	rcall     0x1b62 <___umoddi3>
    192a:	0f ba 97    	mov.w     [w15-16], w4
    192c:	64 42 78    	mov.b     [w4+w0], w4
    192e:	f4 ef 9f    	mov.b     w4, [w15-17]
    1930:	7d 01 20    	mov.w     #0x17, w13

00001932 <.L28>:
    1932:	61 72 b9    	mul.su    w14, #0x1, w4
    1934:	61 2b b9    	mul.su    w5, #0x1, w6
    1936:	08 00 be    	mov.d     w8, w0
    1938:	0a 01 be    	mov.d     w10, w2
    193a:	0c 01 07    	rcall     0x1b54 <___udivdi3>
    193c:	0d 00 37    	bra       0x1958 <.L49>

0000193e <.L30>:
    193e:	61 72 b9    	mul.su    w14, #0x1, w4
    1940:	61 2b b9    	mul.su    w5, #0x1, w6
    1942:	08 00 be    	mov.d     w8, w0
    1944:	0a 01 be    	mov.d     w10, w2
    1946:	11 01 07    	rcall     0x1b6a <___divdi3>
    1948:	8d 06 e9    	dec.w     w13, w13
    194a:	00 f2 b9    	mul.ss    w14, w0, w4
    194c:	04 04 54    	sub.w     w8, w4, w8
    194e:	8f ba 97    	mov.w     [w15-16], w5
    1950:	65 42 7c    	mov.b     [w5+w8], w4
    1952:	85 fd 2f    	mov.w     #0xffd8, w5
    1954:	8f 82 42    	add.w     w5, w15, w5
    1956:	84 f2 7e    	mov.b     w4, [w5+w13]

00001958 <.L49>:
    1958:	00 9e be    	mov.d     w0, [w12++]
    195a:	02 96 be    	mov.d     w2, [w12--]
    195c:	3c 04 be    	mov.d     [w12++], w8
    195e:	2c 05 be    	mov.d     [w12--], w10
    1960:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1962:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1964:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1966:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1968:	02 00 34    	bra       LE, 0x196e <.L11>
    196a:	0d 00 e0    	cp0.w     w13
    196c:	e8 ff 3c    	bra       GT, 0x193e <.L30>

0000196e <.L11>:
    196e:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1970:	10 00 3a    	bra       NZ, 0x1992 <.L31>
    1972:	0c 10 90    	mov.w     [w12+32], w0
    1974:	00 38 a3    	btst.z    w0, #0x3
    1976:	0d 00 32    	bra       Z, 0x1992 <.L31>
    1978:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    197a:	06 00 3e    	bra       GTU, 0x1988 <.L32>
    197c:	85 fd 2f    	mov.w     #0xffd8, w5
    197e:	8f 82 42    	add.w     w5, w15, w5
    1980:	e5 c0 7e    	mov.b     [w5+w13], w1
    1982:	00 c3 b3    	mov.b     #0x30, w0
    1984:	80 cf 50    	sub.b     w1, w0, [w15]
    1986:	05 00 32    	bra       Z, 0x1992 <.L31>

00001988 <.L32>:
    1988:	8d 06 e9    	dec.w     w13, w13
    198a:	02 c3 b3    	mov.b     #0x30, w2
    198c:	81 fd 2f    	mov.w     #0xffd8, w1
    198e:	8f 80 40    	add.w     w1, w15, w1
    1990:	82 f0 7e    	mov.b     w2, [w1+w13]

00001992 <.L31>:
    1992:	78 81 16    	subr.w    w13, #0x18, w2
    1994:	12 0e 98    	mov.w     w2, [w12+18]
    1996:	6c 00 90    	mov.w     [w12+12], w0
    1998:	83 fd 2f    	mov.w     #0xffd8, w3
    199a:	8f 81 41    	add.w     w3, w15, w3
    199c:	8d 80 41    	add.w     w3, w13, w1
    199e:	0d fd 07    	rcall     0x13ba <_memcpy>
    19a0:	1c 08 90    	mov.w     [w12+18], w0
    19a2:	dc 08 90    	mov.w     [w12+26], w1
    19a4:	81 0f 50    	sub.w     w0, w1, [w15]
    19a6:	06 00 3d    	bra       GE, 0x19b4 <.L33>
    19a8:	00 80 50    	sub.w     w1, w0, w0
    19aa:	00 0e 98    	mov.w     w0, [w12+16]
    19ac:	0c 10 90    	mov.w     [w12+32], w0
    19ae:	00 40 a1    	bclr.w    w0, #0x4
    19b0:	00 16 98    	mov.w     w0, [w12+32]
    19b2:	0f 00 37    	bra       0x19d2 <.L1>

000019b4 <.L33>:
    19b4:	01 00 e0    	cp0.w     w1
    19b6:	0d 00 3d    	bra       GE, 0x19d2 <.L1>
    19b8:	8c 10 90    	mov.w     [w12+32], w1
    19ba:	f4 80 60    	and.w     w1, #0x14, w1
    19bc:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    19be:	09 00 3a    	bra       NZ, 0x19d2 <.L1>
    19c0:	7c 09 90    	mov.w     [w12+30], w2
    19c2:	fc 00 90    	mov.w     [w12+14], w1
    19c4:	81 00 51    	sub.w     w2, w1, w1
    19c6:	0c 09 90    	mov.w     [w12+16], w2
    19c8:	82 80 50    	sub.w     w1, w2, w1
    19ca:	00 80 50    	sub.w     w1, w0, w0
    19cc:	42 40 a9    	bclr.b    0x42, #0x2
    19ce:	01 00 34    	bra       LE, 0x19d2 <.L1>
    19d0:	00 0e 98    	mov.w     w0, [w12+16]

000019d2 <.L1>:
    19d2:	4f 07 78    	mov.w     [--w15], w14
    19d4:	4f 06 be    	mov.d     [--w15], w12
    19d6:	4f 05 be    	mov.d     [--w15], w10
    19d8:	4f 04 be    	mov.d     [--w15], w8
    19da:	cf 01 b1    	sub.w     #0x1c, w15
    19dc:	00 00 06    	return    

000019de <___divsi3>:
    19de:	83 9f 68    	xor.w     w1, w3, [w15++]
    19e0:	01 00 e0    	cp0.w     w1
    19e2:	02 00 3d    	bra       GE, 0x19e8 <divtestb>
    19e4:	60 00 10    	subr.w    w0, #0x0, w0
    19e6:	e0 80 18    	subbr.w   w1, #0x0, w1

000019e8 <divtestb>:
    19e8:	03 00 e0    	cp0.w     w3
    19ea:	02 00 3d    	bra       GE, 0x19f0 <calcquot>
    19ec:	60 01 11    	subr.w    w2, #0x0, w2
    19ee:	e0 81 19    	subbr.w   w3, #0x0, w3

000019f0 <calcquot>:
    19f0:	05 00 07    	rcall     0x19fc <___udivsi3>
    19f2:	4f 00 e0    	cp0.w     [--w15]
    19f4:	02 00 3b    	bra       NN, 0x19fa <returnq>
    19f6:	60 00 10    	subr.w    w0, #0x0, w0
    19f8:	e0 80 18    	subbr.w   w1, #0x0, w1

000019fa <returnq>:
    19fa:	00 00 06    	return    

000019fc <___udivsi3>:
    19fc:	60 22 b8    	mul.uu    w4, #0x0, w4
    19fe:	06 02 20    	mov.w     #0x20, w6

00001a00 <nextbit>:
    1a00:	00 00 d0    	sl.w      w0, w0
    1a02:	81 80 d2    	rlc.w     w1, w1
    1a04:	04 82 d2    	rlc.w     w4, w4
    1a06:	85 82 d2    	rlc.w     w5, w5
    1a08:	00 00 a0    	bset.w    w0, #0x0
    1a0a:	02 02 52    	sub.w     w4, w2, w4
    1a0c:	83 82 5a    	subb.w    w5, w3, w5
    1a0e:	03 00 31    	bra       C, 0x1a16 <iterate>
    1a10:	02 02 42    	add.w     w4, w2, w4
    1a12:	83 82 4a    	addc.w    w5, w3, w5
    1a14:	00 00 a1    	bclr.w    w0, #0x0

00001a16 <iterate>:
    1a16:	06 03 e9    	dec.w     w6, w6
    1a18:	f3 ff 3a    	bra       NZ, 0x1a00 <nextbit>
    1a1a:	00 00 06    	return    

00001a1c <___umodsi3>:
    1a1c:	ef ff 07    	rcall     0x19fc <___udivsi3>
    1a1e:	04 00 be    	mov.d     w4, w0
    1a20:	00 00 06    	return    

00001a22 <___PplusBdi>:
    1a22:	88 9f be    	mov.d     w8, [w15++]
    1a24:	8a 9f be    	mov.d     w10, [w15++]
    1a26:	30 04 42    	add.w     w4, [w0++], w8
    1a28:	b0 84 4a    	addc.w    w5, [w0++], w9
    1a2a:	30 05 4b    	addc.w    w6, [w0++], w10
    1a2c:	90 85 4b    	addc.w    w7, [w0], w11
    1a2e:	60 00 b1    	sub.w     #0x6, w0
    1a30:	08 98 be    	mov.d     w8, [w0++]
    1a32:	0a 90 be    	mov.d     w10, [w0--]
    1a34:	04 40 e1    	cp.w      w8, w4
    1a36:	05 c8 e1    	cpb.w     w9, w5
    1a38:	06 d0 e1    	cpb.w     w10, w6
    1a3a:	07 d8 e1    	cpb.w     w11, w7
    1a3c:	02 00 31    	bra       C, 0x1a42 <.L1>
    1a3e:	68 00 40    	add.w     w0, #0x8, w0
    1a40:	10 08 e8    	inc.w     [w0], [w0]

00001a42 <.L1>:
    1a42:	4f 05 be    	mov.d     [--w15], w10
    1a44:	4f 04 be    	mov.d     [--w15], w8
    1a46:	00 00 06    	return    

00001a48 <___PminusBdi>:
    1a48:	88 9f be    	mov.d     w8, [w15++]
    1a4a:	8a 9f be    	mov.d     w10, [w15++]
    1a4c:	30 04 be    	mov.d     [w0++], w8
    1a4e:	20 05 be    	mov.d     [w0--], w10
    1a50:	04 18 54    	sub.w     w8, w4, [w0++]
    1a52:	05 98 5c    	subb.w    w9, w5, [w0++]
    1a54:	06 18 5d    	subb.w    w10, w6, [w0++]
    1a56:	07 98 5d    	subb.w    w11, w7, [w0++]
    1a58:	11 00 20    	mov.w     #0x1, w1
    1a5a:	04 40 e1    	cp.w      w8, w4
    1a5c:	05 c8 e1    	cpb.w     w9, w5
    1a5e:	06 d0 e1    	cpb.w     w10, w6
    1a60:	07 d8 e1    	cpb.w     w11, w7
    1a62:	01 00 39    	bra       NC, 0x1a66 <.L4>
    1a64:	80 00 eb    	clr.w     w1

00001a66 <.L4>:
    1a66:	10 88 10    	subr.w    w1, [w0], [w0]
    1a68:	4f 05 be    	mov.d     [--w15], w10
    1a6a:	4f 04 be    	mov.d     [--w15], w8
    1a6c:	00 00 06    	return    

00001a6e <___udivmoddi3>:
    1a6e:	12 00 fa    	lnk       #0x12
    1a70:	88 9f be    	mov.d     w8, [w15++]
    1a72:	8a 9f be    	mov.d     w10, [w15++]
    1a74:	8c 9f be    	mov.d     w12, [w15++]
    1a76:	e0 b7 9f    	mov.w     w0, [w15-20]
    1a78:	f1 b7 9f    	mov.w     w1, [w15-18]
    1a7a:	82 bf 9f    	mov.w     w2, [w15-16]
    1a7c:	93 bf 9f    	mov.w     w3, [w15-14]
    1a7e:	06 05 be    	mov.d     w6, w10
    1a80:	04 04 be    	mov.d     w4, w8
    1a82:	00 00 eb    	clr.w     w0
    1a84:	d0 b7 9f    	mov.w     w0, [w15-22]
    1a86:	c0 b7 9f    	mov.w     w0, [w15-24]
    1a88:	b0 b7 9f    	mov.w     w0, [w15-26]
    1a8a:	a0 b7 9f    	mov.w     w0, [w15-28]
    1a8c:	90 b7 9f    	mov.w     w0, [w15-30]
    1a8e:	00 06 eb    	clr.w     w12

00001a90 <.L9>:
    1a90:	5f b1 97    	mov.w     [w15-22], w2
    1a92:	cf b0 97    	mov.w     [w15-24], w1
    1a94:	82 01 41    	add.w     w2, w2, w3
    1a96:	3f b0 97    	mov.w     [w15-26], w0
    1a98:	02 00 e0    	cp0.w     w2
    1a9a:	04 00 3d    	bra       GE, 0x1aa4 <.L6>
    1a9c:	37 00 07    	rcall     0x1b0c <.LPA0>
    1a9e:	7e 80 57    	sub.w     w15, #0x1e, w0
    1aa0:	c0 ff 07    	rcall     0x1a22 <___PplusBdi>
    1aa2:	03 00 37    	bra       0x1aaa <.L7>

00001aa4 <.L6>:
    1aa4:	33 00 07    	rcall     0x1b0c <.LPA0>
    1aa6:	7e 80 57    	sub.w     w15, #0x1e, w0
    1aa8:	cf ff 07    	rcall     0x1a48 <___PminusBdi>

00001aaa <.L7>:
    1aaa:	df b6 97    	mov.w     [w15-22], w13
    1aac:	0d 00 e0    	cp0.w     w13
    1aae:	0c 00 35    	bra       LT, 0x1ac8 <.L8>
    1ab0:	6f b2 97    	mov.w     [w15-20], w4
    1ab2:	ff b2 97    	mov.w     [w15-18], w5
    1ab4:	0f bb 97    	mov.w     [w15-16], w6
    1ab6:	9f bb 97    	mov.w     [w15-14], w7
    1ab8:	10 00 20    	mov.w     #0x1, w0
    1aba:	01 00 20    	mov.w     #0x0, w1
    1abc:	60 11 b8    	mul.uu    w2, #0x0, w2
    1abe:	00 02 72    	ior.w     w4, w0, w4
    1ac0:	81 82 72    	ior.w     w5, w1, w5
    1ac2:	02 03 73    	ior.w     w6, w2, w6
    1ac4:	83 83 73    	ior.w     w7, w3, w7
    1ac6:	1b 00 07    	rcall     0x1afe <.LPA2>

00001ac8 <.L8>:
    1ac8:	0c 06 e8    	inc.w     w12, w12
    1aca:	01 04 20    	mov.w     #0x40, w1
    1acc:	81 0f 56    	sub.w     w12, w1, [w15]
    1ace:	e0 ff 3a    	bra       NZ, 0x1a90 <.L9>
    1ad0:	0d 00 e0    	cp0.w     w13
    1ad2:	04 00 3d    	bra       GE, 0x1adc <.L10>
    1ad4:	08 02 be    	mov.d     w8, w4
    1ad6:	0a 03 be    	mov.d     w10, w6
    1ad8:	7e 80 57    	sub.w     w15, #0x1e, w0
    1ada:	a3 ff 07    	rcall     0x1a22 <___PplusBdi>

00001adc <.L10>:
    1adc:	5f a8 97    	mov.w     [w15-38], w0
    1ade:	00 00 e0    	cp0.w     w0
    1ae0:	05 00 3a    	bra       NZ, 0x1aec <.L11>
    1ae2:	1f b2 97    	mov.w     [w15-30], w4
    1ae4:	af b2 97    	mov.w     [w15-28], w5
    1ae6:	3f b3 97    	mov.w     [w15-26], w6
    1ae8:	cf b3 97    	mov.w     [w15-24], w7
    1aea:	09 00 07    	rcall     0x1afe <.LPA2>

00001aec <.L11>:
    1aec:	6f b0 97    	mov.w     [w15-20], w0
    1aee:	ff b0 97    	mov.w     [w15-18], w1
    1af0:	0f b9 97    	mov.w     [w15-16], w2
    1af2:	9f b9 97    	mov.w     [w15-14], w3
    1af4:	4f 06 be    	mov.d     [--w15], w12
    1af6:	4f 05 be    	mov.d     [--w15], w10
    1af8:	4f 04 be    	mov.d     [--w15], w8
    1afa:	00 80 fa    	ulnk      
    1afc:	00 00 06    	return    

00001afe <.LPA2>:
    1afe:	01 00 07    	rcall     0x1b02 <.LPA5>
    1b00:	00 00 06    	return    

00001b02 <.LPA5>:
    1b02:	a4 b7 9f    	mov.w     w4, [w15-28]
    1b04:	b5 b7 9f    	mov.w     w5, [w15-26]
    1b06:	c6 b7 9f    	mov.w     w6, [w15-24]
    1b08:	d7 b7 9f    	mov.w     w7, [w15-22]
    1b0a:	00 00 06    	return    

00001b0c <.LPA0>:
    1b0c:	4f 09 de    	lsr.w     w1, #0xf, w2
    1b0e:	82 81 71    	ior.w     w3, w2, w3
    1b10:	b3 b7 9f    	mov.w     w3, [w15-26]
    1b12:	4f 01 de    	lsr.w     w0, #0xf, w2
    1b14:	81 80 40    	add.w     w1, w1, w1
    1b16:	82 80 70    	ior.w     w1, w2, w1
    1b18:	a1 b7 9f    	mov.w     w1, [w15-28]
    1b1a:	8f b0 97    	mov.w     [w15-32], w1
    1b1c:	4f 09 de    	lsr.w     w1, #0xf, w2
    1b1e:	00 00 40    	add.w     w0, w0, w0
    1b20:	02 00 70    	ior.w     w0, w2, w0
    1b22:	90 b7 9f    	mov.w     w0, [w15-30]
    1b24:	7f a8 97    	mov.w     [w15-34], w0
    1b26:	4f 01 de    	lsr.w     w0, #0xf, w2
    1b28:	81 80 40    	add.w     w1, w1, w1
    1b2a:	82 80 70    	ior.w     w1, w2, w1
    1b2c:	81 b7 9f    	mov.w     w1, [w15-32]
    1b2e:	0d 00 07    	rcall     0x1b4a <.LPA4>
    1b30:	4f 3a de    	lsr.w     w7, #0xf, w4
    1b32:	00 00 40    	add.w     w0, w0, w0
    1b34:	04 00 70    	ior.w     w0, w4, w0
    1b36:	f0 af 9f    	mov.w     w0, [w15-34]
    1b38:	08 00 07    	rcall     0x1b4a <.LPA4>
    1b3a:	04 02 42    	add.w     w4, w4, w4
    1b3c:	85 82 4a    	addc.w    w5, w5, w5
    1b3e:	06 03 4b    	addc.w    w6, w6, w6
    1b40:	87 83 4b    	addc.w    w7, w7, w7
    1b42:	df ff 07    	rcall     0x1b02 <.LPA5>
    1b44:	08 02 be    	mov.d     w8, w4
    1b46:	0a 03 be    	mov.d     w10, w6
    1b48:	00 00 06    	return    

00001b4a <.LPA4>:
    1b4a:	2f b2 97    	mov.w     [w15-28], w4
    1b4c:	bf b2 97    	mov.w     [w15-26], w5
    1b4e:	4f b3 97    	mov.w     [w15-24], w6
    1b50:	df b3 97    	mov.w     [w15-22], w7
    1b52:	00 00 06    	return    

00001b54 <___udivdi3>:
    1b54:	88 1f 78    	mov.w     w8, [w15++]
    1b56:	18 00 20    	mov.w     #0x1, w8
    1b58:	88 1f 78    	mov.w     w8, [w15++]
    1b5a:	89 ff 07    	rcall     0x1a6e <___udivmoddi3>
    1b5c:	8f 87 e9    	dec2.w    w15, w15
    1b5e:	4f 04 78    	mov.w     [--w15], w8
    1b60:	00 00 06    	return    

00001b62 <___umoddi3>:
    1b62:	80 1f eb    	clr.w     [w15++]
    1b64:	84 ff 07    	rcall     0x1a6e <___udivmoddi3>
    1b66:	8f 87 e9    	dec2.w    w15, w15
    1b68:	00 00 06    	return    

00001b6a <___divdi3>:
    1b6a:	88 9f be    	mov.d     w8, [w15++]
    1b6c:	8a 9f be    	mov.d     w10, [w15++]
    1b6e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1b70:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1b72:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1b74:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1b76:	0c 00 3d    	bra       GE, 0x1b90 <.L15>
    1b78:	60 44 b8    	mul.uu    w8, #0x0, w8
    1b7a:	60 55 b8    	mul.uu    w10, #0x0, w10
    1b7c:	00 00 54    	sub.w     w8, w0, w0
    1b7e:	81 80 5c    	subb.w    w9, w1, w1
    1b80:	02 01 5d    	subb.w    w10, w2, w2
    1b82:	83 81 5d    	subb.w    w11, w3, w3
    1b84:	18 00 20    	mov.w     #0x1, w8
    1b86:	15 00 07    	rcall     0x1bb2 <.LPA3>
    1b88:	08 00 3d    	bra       GE, 0x1b9a <.L16>
    1b8a:	18 00 07    	rcall     0x1bbc <.LPA1>
    1b8c:	00 04 eb    	clr.w     w8
    1b8e:	05 00 37    	bra       0x1b9a <.L16>

00001b90 <.L15>:
    1b90:	00 04 eb    	clr.w     w8
    1b92:	0f 00 07    	rcall     0x1bb2 <.LPA3>
    1b94:	02 00 3d    	bra       GE, 0x1b9a <.L16>
    1b96:	12 00 07    	rcall     0x1bbc <.LPA1>
    1b98:	18 00 20    	mov.w     #0x1, w8

00001b9a <.L16>:
    1b9a:	dc ff 07    	rcall     0x1b54 <___udivdi3>
    1b9c:	08 00 e0    	cp0.w     w8
    1b9e:	06 00 32    	bra       Z, 0x1bac <.L17>
    1ba0:	60 22 b8    	mul.uu    w4, #0x0, w4
    1ba2:	60 33 b8    	mul.uu    w6, #0x0, w6
    1ba4:	00 00 52    	sub.w     w4, w0, w0
    1ba6:	81 80 5a    	subb.w    w5, w1, w1
    1ba8:	02 01 5b    	subb.w    w6, w2, w2
    1baa:	83 81 5b    	subb.w    w7, w3, w3

00001bac <.L17>:
    1bac:	4f 05 be    	mov.d     [--w15], w10
    1bae:	4f 04 be    	mov.d     [--w15], w8
    1bb0:	00 00 06    	return    

00001bb2 <.LPA3>:
    1bb2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1bb4:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1bb6:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1bb8:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1bba:	00 00 06    	return    

00001bbc <.LPA1>:
    1bbc:	60 44 b8    	mul.uu    w8, #0x0, w8
    1bbe:	60 55 b8    	mul.uu    w10, #0x0, w10
    1bc0:	04 02 54    	sub.w     w8, w4, w4
    1bc2:	85 82 5c    	subb.w    w9, w5, w5
    1bc4:	06 03 5d    	subb.w    w10, w6, w6
    1bc6:	87 83 5d    	subb.w    w11, w7, w7
    1bc8:	00 00 06    	return    

00001bca <___moddi3>:
    1bca:	88 9f be    	mov.d     w8, [w15++]
    1bcc:	8a 9f be    	mov.d     w10, [w15++]
    1bce:	8c 1f 78    	mov.w     w12, [w15++]
    1bd0:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1bd2:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1bd4:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1bd6:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1bd8:	0d 00 3d    	bra       GE, 0x1bf4 <.L21>
    1bda:	60 44 b8    	mul.uu    w8, #0x0, w8
    1bdc:	60 55 b8    	mul.uu    w10, #0x0, w10
    1bde:	00 00 54    	sub.w     w8, w0, w0
    1be0:	81 80 5c    	subb.w    w9, w1, w1
    1be2:	02 01 5d    	subb.w    w10, w2, w2
    1be4:	83 81 5d    	subb.w    w11, w3, w3
    1be6:	1c 00 20    	mov.w     #0x1, w12
    1be8:	08 20 e1    	cp.w      w4, w8
    1bea:	09 a8 e1    	cpb.w     w5, w9
    1bec:	0a b0 e1    	cpb.w     w6, w10
    1bee:	0b b8 e1    	cpb.w     w7, w11
    1bf0:	0d 00 3d    	bra       GE, 0x1c0c <.L22>
    1bf2:	08 00 37    	bra       0x1c04 <.L26>

00001bf4 <.L21>:
    1bf4:	00 06 eb    	clr.w     w12
    1bf6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1bf8:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1bfa:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1bfc:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1bfe:	06 00 3d    	bra       GE, 0x1c0c <.L22>
    1c00:	60 44 b8    	mul.uu    w8, #0x0, w8
    1c02:	60 55 b8    	mul.uu    w10, #0x0, w10

00001c04 <.L26>:
    1c04:	04 02 54    	sub.w     w8, w4, w4
    1c06:	85 82 5c    	subb.w    w9, w5, w5
    1c08:	06 03 5d    	subb.w    w10, w6, w6
    1c0a:	87 83 5d    	subb.w    w11, w7, w7

00001c0c <.L22>:
    1c0c:	aa ff 07    	rcall     0x1b62 <___umoddi3>
    1c0e:	0c 00 e0    	cp0.w     w12
    1c10:	06 00 32    	bra       Z, 0x1c1e <.L23>
    1c12:	60 22 b8    	mul.uu    w4, #0x0, w4
    1c14:	60 33 b8    	mul.uu    w6, #0x0, w6
    1c16:	00 00 52    	sub.w     w4, w0, w0
    1c18:	81 80 5a    	subb.w    w5, w1, w1
    1c1a:	02 01 5b    	subb.w    w6, w2, w2
    1c1c:	83 81 5b    	subb.w    w7, w3, w3

00001c1e <.L23>:
    1c1e:	4f 06 78    	mov.w     [--w15], w12
    1c20:	4f 05 be    	mov.d     [--w15], w10
    1c22:	4f 04 be    	mov.d     [--w15], w8
    1c24:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	52 31 04    	goto      0x3152 <__T2Interrupt>
    1032:	00 00 00 
    1034:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	fc 33 04    	goto      0x33fc <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	9a 33 04    	goto      0x339a <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	2e 31 04    	goto      0x312e <__CNInterrupt>
    105a:	00 00 00 
    105c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	a6 32 04    	goto      0x32a6 <__SI2C2Interrupt>
    10b2:	00 00 00 
    10b4:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	7c 35 04    	goto      0x357c <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009c26 <.LC2-0x2ee>:
    9c26:	61 62       	.word 0x6261
    9c28:	6f 75       	.word 0x756f
    9c2a:	74 00       	.word 0x74
    9c2c:	65 76       	.word 0x7665
    9c2e:	65 72       	.word 0x7265
    9c30:	79 00       	.word 0x79
    9c32:	6c 61       	.word 0x616c
    9c34:	72 67       	.word 0x6772
    9c36:	65 00       	.word 0x65
    9c38:	70 6c       	.word 0x6c70
    9c3a:	61 6e       	.word 0x6e61
    9c3c:	74 00       	.word 0x74
    9c3e:	73 70       	.word 0x7073
    9c40:	65 6c       	.word 0x6c65
    9c42:	6c 00       	.word 0x6c
    9c44:	74 68       	.word 0x6874
    9c46:	65 73       	.word 0x7365
    9c48:	65 00       	.word 0x65
    9c4a:	77 68       	.word 0x6877
    9c4c:	65 72       	.word 0x7265
    9c4e:	65 00       	.word 0x65
    9c50:	61 66       	.word 0x6661
    9c52:	74 65       	.word 0x6574
    9c54:	72 00       	.word 0x72
    9c56:	66 69       	.word 0x6966
    9c58:	72 73       	.word 0x7372
    9c5a:	74 00       	.word 0x74
    9c5c:	6c 65       	.word 0x656c
    9c5e:	61 72       	.word 0x7261
    9c60:	6e 00       	.word 0x6e
    9c62:	70 6f       	.word 0x6f70
    9c64:	69 6e       	.word 0x6e69
    9c66:	74 00       	.word 0x74
    9c68:	73 74       	.word 0x7473
    9c6a:	69 6c       	.word 0x6c69
    9c6c:	6c 00       	.word 0x6c
    9c6e:	74 68       	.word 0x6874
    9c70:	69 6e       	.word 0x6e69
    9c72:	67 00       	.word 0x67
    9c74:	77 68       	.word 0x6877
    9c76:	69 63       	.word 0x6369
    9c78:	68 00       	.word 0x68
    9c7a:	61 67       	.word 0x6761
    9c7c:	61 69       	.word 0x6961
    9c7e:	6e 00       	.word 0x6e
    9c80:	66 6f       	.word 0x6f66
    9c82:	75 6e       	.word 0x6e75
    9c84:	64 00       	.word 0x64
    9c86:	6e 65       	.word 0x656e
    9c88:	76 65       	.word 0x6576
    9c8a:	72 00       	.word 0x72
    9c8c:	72 69       	.word 0x6972
    9c8e:	67 68       	.word 0x6867
    9c90:	74 00       	.word 0x74
    9c92:	73 74       	.word 0x7473
    9c94:	75 64       	.word 0x6475
    9c96:	79 00       	.word 0x79
    9c98:	74 68       	.word 0x6874
    9c9a:	69 6e       	.word 0x6e69
    9c9c:	6b 00       	.word 0x6b
    9c9e:	77 6f       	.word 0x6f77
    9ca0:	72 6c       	.word 0x6c72
    9ca2:	64 00       	.word 0x64
    9ca4:	62 65       	.word 0x6562
    9ca6:	6c 6f       	.word 0x6f6c
    9ca8:	77 00       	.word 0x77
    9caa:	67 72       	.word 0x7267
    9cac:	65 61       	.word 0x6165
    9cae:	74 00       	.word 0x74
    9cb0:	6f 74       	.word 0x746f
    9cb2:	68 65       	.word 0x6568
    9cb4:	72 00       	.word 0x72
    9cb6:	73 6d       	.word 0x6d73
    9cb8:	61 6c       	.word 0x6c61
    9cba:	6c 00       	.word 0x6c
    9cbc:	74 68       	.word 0x6874
    9cbe:	65 69       	.word 0x6965
    9cc0:	72 00       	.word 0x72
    9cc2:	74 68       	.word 0x6874
    9cc4:	72 65       	.word 0x6572
    9cc6:	65 00       	.word 0x65
    9cc8:	77 6f       	.word 0x6f77
    9cca:	75 6c       	.word 0x6c75
    9ccc:	64 00       	.word 0x64
    9cce:	63 6f       	.word 0x6f63
    9cd0:	75 6c       	.word 0x6c75
    9cd2:	64 00       	.word 0x64
    9cd4:	68 6f       	.word 0x6f68
    9cd6:	75 73       	.word 0x7375
    9cd8:	65 00       	.word 0x65
    9cda:	70 6c       	.word 0x6c70
    9cdc:	61 63       	.word 0x6361
    9cde:	65 00       	.word 0x65
    9ce0:	73 6f       	.word 0x6f73
    9ce2:	75 6e       	.word 0x6e75
    9ce4:	64 00       	.word 0x64
    9ce6:	74 68       	.word 0x6874
    9ce8:	65 72       	.word 0x7265
    9cea:	65 00       	.word 0x65
    9cec:	77 61       	.word 0x6177
    9cee:	74 65       	.word 0x6574
    9cf0:	72 00       	.word 0x72
    9cf2:	77 72       	.word 0x7277
    9cf4:	69 74       	.word 0x7469
    9cf6:	65 00       	.word 0x65
    9cf8:	57 52       	.word 0x5257
    9cfa:	49 54       	.word 0x5449
    9cfc:	45 47       	.word 0x4745
    9cfe:	59 51       	.word 0x5159
    9d00:	57 56       	.word 0x5657
    9d02:	4d 52       	.word 0x524d
    9d04:	54 45       	.word 0x4554
    9d06:	50 49       	.word 0x4950
    9d08:	58 5a       	.word 0x5a58
    9d0a:	46 4d       	.word 0x4d46
    9d0c:	49 4a       	.word 0x4a49
    9d0e:	59 4a       	.word 0x4a59
    9d10:	54 46       	.word 0x4654
    9d12:	50 42       	.word 0x4250
    9d14:	41 4d       	.word 0x4d41
    9d16:	45 51       	.word 0x5145
    9d18:	50 47       	.word 0x4750
    9d1a:	58 00       	.word 0x58
    9d1c:	53 54       	.word 0x5453
    9d1e:	49 4c       	.word 0x4c49
    9d20:	4c 53       	.word 0x534c
    9d22:	47 43       	.word 0x4347
    9d24:	42 57       	.word 0x5742
    9d26:	54 52       	.word 0x5254
    9d28:	54 56       	.word 0x5654
    9d2a:	5a 53       	.word 0x535a
    9d2c:	4a 56       	.word 0x564a
    9d2e:	49 44       	.word 0x4449
    9d30:	52 46       	.word 0x4652
    9d32:	50 4c       	.word 0x4c50
    9d34:	4a 4f       	.word 0x4f4a
    9d36:	4b 55       	.word 0x554b
    9d38:	53 49       	.word 0x4953
    9d3a:	4a 4c       	.word 0x4c4a
    9d3c:	41 46       	.word 0x4641
    9d3e:	5a 00       	.word 0x5a
    9d40:	45 56       	.word 0x5645
    9d42:	45 52       	.word 0x5245
    9d44:	59 4b       	.word 0x4b59
    9d46:	45 58       	.word 0x5845
    9d48:	4d 59       	.word 0x594d
    9d4a:	5a 4d       	.word 0x4d5a
    9d4c:	53 43       	.word 0x4353
    9d4e:	54 56       	.word 0x5654
    9d50:	50 41       	.word 0x4150
    9d52:	47 4e       	.word 0x4e47
    9d54:	44 45       	.word 0x4544
    9d56:	46 44       	.word 0x4446
    9d58:	48 45       	.word 0x4548
    9d5a:	52 51       	.word 0x5152
    9d5c:	4a 48       	.word 0x484a
    9d5e:	4d 57       	.word 0x574d
    9d60:	4e 59       	.word 0x594e
    9d62:	58 00       	.word 0x58
    9d64:	57 4f       	.word 0x4f57
    9d66:	52 4c       	.word 0x4c52
    9d68:	44 47       	.word 0x4744
    9d6a:	57 51       	.word 0x5157
    9d6c:	41 50       	.word 0x5041
    9d6e:	4e 57       	.word 0x574e
    9d70:	45 4f       	.word 0x4f45
    9d72:	4b 4d       	.word 0x4d4b
    9d74:	51 51       	.word 0x5151
    9d76:	57 52       	.word 0x5257
    9d78:	5a 59       	.word 0x595a
    9d7a:	4a 50       	.word 0x504a
    9d7c:	44 4c       	.word 0x4c44
    9d7e:	4a 42       	.word 0x424a
    9d80:	49 4e       	.word 0x4e49
    9d82:	53 49       	.word 0x4953
    9d84:	43 44       	.word 0x4443
    9d86:	48 00       	.word 0x48
    9d88:	57 52       	.word 0x5257
    9d8a:	49 54       	.word 0x5449
    9d8c:	45 47       	.word 0x4745
    9d8e:	57 4a       	.word 0x4a57
    9d90:	58 44       	.word 0x4458
    9d92:	4c 5a       	.word 0x5a4c
    9d94:	50 4c       	.word 0x4c50
    9d96:	58 49       	.word 0x4958
    9d98:	52 4a       	.word 0x4a52
    9d9a:	54 43       	.word 0x4354
    9d9c:	49 46       	.word 0x4649
    9d9e:	53 54       	.word 0x5453
    9da0:	46 48       	.word 0x4846
    9da2:	42 49       	.word 0x4942
    9da4:	4f 53       	.word 0x534f
    9da6:	51 58       	.word 0x5851
    9da8:	55 4a       	.word 0x4a55
    9daa:	45 00       	.word 0x45
    9dac:	46 4f       	.word 0x4f46
    9dae:	55 4e       	.word 0x4e55
    9db0:	44 5a       	.word 0x5a44
    9db2:	49 4a       	.word 0x4a49
    9db4:	43 45       	.word 0x4543
    9db6:	46 4f       	.word 0x4f46
    9db8:	47 4d       	.word 0x4d47
    9dba:	51 59       	.word 0x5951
    9dbc:	4e 51       	.word 0x514e
    9dbe:	42 56       	.word 0x5642
    9dc0:	45 55       	.word 0x5545
    9dc2:	4a 5a       	.word 0x5a4a
    9dc4:	4e 4f       	.word 0x4f4e
    9dc6:	55 57       	.word 0x5755
    9dc8:	4a 51       	.word 0x514a
    9dca:	47 4c       	.word 0x4c47
    9dcc:	49 44       	.word 0x4449
    9dce:	50 00       	.word 0x50
    9dd0:	43 4f       	.word 0x4f43
    9dd2:	55 4c       	.word 0x4c55
    9dd4:	44 44       	.word 0x4444
    9dd6:	58 43       	.word 0x4358
    9dd8:	55 4a       	.word 0x4a55
    9dda:	54 4f       	.word 0x4f54
    9ddc:	5a 55       	.word 0x555a
    9dde:	50 51       	.word 0x5150
    9de0:	59 4d       	.word 0x4d59
    9de2:	4b 58       	.word 0x584b
    9de4:	56 55       	.word 0x5556
    9de6:	53 4c       	.word 0x4c53
    9de8:	4b 52       	.word 0x524b
    9dea:	51 56       	.word 0x5651
    9dec:	57 4d       	.word 0x4d57
    9dee:	48 44       	.word 0x4448
    9df0:	56 51       	.word 0x5156
    9df2:	4a 00       	.word 0x4a
    9df4:	54 48       	.word 0x4854
    9df6:	45 53       	.word 0x5345
    9df8:	45 58       	.word 0x5845
    9dfa:	54 4b       	.word 0x4b54
    9dfc:	44 4c       	.word 0x4c44
    9dfe:	56 47       	.word 0x4756
    9e00:	48 49       	.word 0x4948
    9e02:	54 50       	.word 0x5054
    9e04:	53 45       	.word 0x4553
    9e06:	51 49       	.word 0x4951
    9e08:	56 54       	.word 0x5456
    9e0a:	4d 45       	.word 0x454d
    9e0c:	48 44       	.word 0x4448
    9e0e:	4f 4e       	.word 0x4e4f
    9e10:	53 56       	.word 0x5653
    9e12:	59 4d       	.word 0x4d59
    9e14:	45 46       	.word 0x4645
    9e16:	42 00       	.word 0x42
    9e18:	4f 54       	.word 0x544f
    9e1a:	48 45       	.word 0x4548
    9e1c:	52 52       	.word 0x5252
    9e1e:	49 42       	.word 0x4249
    9e20:	4f 43       	.word 0x434f
    9e22:	45 54       	.word 0x5445
    9e24:	4e 52       	.word 0x524e
    9e26:	4b 4a       	.word 0x4a4b
    9e28:	42 4e       	.word 0x4e42
    9e2a:	4a 55       	.word 0x554a
    9e2c:	48 47       	.word 0x4748
    9e2e:	45 47       	.word 0x4745
    9e30:	4a 56       	.word 0x564a
    9e32:	57 4b       	.word 0x4b57
    9e34:	45 4b       	.word 0x4b45
    9e36:	44 56       	.word 0x5644
    9e38:	52 50       	.word 0x5052
    9e3a:	4d 00       	.word 0x4d
    9e3c:	57 4f       	.word 0x4f57
    9e3e:	52 4c       	.word 0x4c52
    9e40:	44 54       	.word 0x5444
    9e42:	58 53       	.word 0x5358
    9e44:	55 52       	.word 0x5255
    9e46:	57 46       	.word 0x4657
    9e48:	57 4f       	.word 0x4f57
    9e4a:	51 59       	.word 0x5951
    9e4c:	52 56       	.word 0x5652
    9e4e:	52 51       	.word 0x5152
    9e50:	47 4e       	.word 0x4e47
    9e52:	4a 59       	.word 0x594a
    9e54:	42 4b       	.word 0x4b42
    9e56:	4c 51       	.word 0x514c
    9e58:	4f 48       	.word 0x484f
    9e5a:	58 44       	.word 0x4458
    9e5c:	45 49       	.word 0x4945
    9e5e:	51 00       	.word 0x51
    9e60:	53 4d       	.word 0x4d53
    9e62:	41 4c       	.word 0x4c41
    9e64:	4c 49       	.word 0x494c
    9e66:	56 52       	.word 0x5256
    9e68:	58 53       	.word 0x5358
    9e6a:	55 58       	.word 0x5855
    9e6c:	44 43       	.word 0x4344
    9e6e:	4d 52       	.word 0x524d
    9e70:	59 41       	.word 0x4159
    9e72:	51 54       	.word 0x5451
    9e74:	46 50       	.word 0x5046
    9e76:	4a 56       	.word 0x564a
    9e78:	50 48       	.word 0x4850
    9e7a:	46 4c       	.word 0x4c46
    9e7c:	58 51       	.word 0x5158
    9e7e:	4c 52       	.word 0x524c
    9e80:	4f 42       	.word 0x424f
    9e82:	48 00       	.word 0x48
    9e84:	54 48       	.word 0x4854
    9e86:	45 53       	.word 0x5345
    9e88:	45 4b       	.word 0x4b45
    9e8a:	50 54       	.word 0x5450
    9e8c:	52 4c       	.word 0x4c52
    9e8e:	42 48       	.word 0x4842
    9e90:	4b 56       	.word 0x564b
    9e92:	55 4e       	.word 0x4e55
    9e94:	44 51       	.word 0x5144
    9e96:	47 4c       	.word 0x4c47
    9e98:	45 4a       	.word 0x4a45
    9e9a:	53 58       	.word 0x5853
    9e9c:	41 4d       	.word 0x4d41
    9e9e:	53 56       	.word 0x5653
    9ea0:	44 57       	.word 0x5744
    9ea2:	41 4f       	.word 0x4f41
    9ea4:	45 46       	.word 0x4645
    9ea6:	4e 00       	.word 0x4e
    9ea8:	57 52       	.word 0x5257
    9eaa:	49 54       	.word 0x5449
    9eac:	45 56       	.word 0x5645
    9eae:	57 49       	.word 0x4957
    9eb0:	58 59       	.word 0x5958
    9eb2:	48 57       	.word 0x5748
    9eb4:	4b 58       	.word 0x584b
    9eb6:	42 47       	.word 0x4742
    9eb8:	52 46       	.word 0x4652
    9eba:	45 4c       	.word 0x4c45
    9ebc:	59 49       	.word 0x4959
    9ebe:	50 55       	.word 0x5550
    9ec0:	41 44       	.word 0x4441
    9ec2:	54 52       	.word 0x5254
    9ec4:	4e 4c       	.word 0x4c4e
    9ec6:	56 45       	.word 0x4556
    9ec8:	41 51       	.word 0x5141
    9eca:	55 00       	.word 0x55
    9ecc:	47 52       	.word 0x5247
    9ece:	45 41       	.word 0x4145
    9ed0:	54 4c       	.word 0x4c54
    9ed2:	4f 47       	.word 0x474f
    9ed4:	4d 58       	.word 0x584d
    9ed6:	56 59       	.word 0x5956
    9ed8:	43 4e       	.word 0x4e43
    9eda:	52 57       	.word 0x5752
    9edc:	4b 48       	.word 0x484b
    9ede:	56 50       	.word 0x5056
    9ee0:	45 42       	.word 0x4245
    9ee2:	49 5a       	.word 0x5a49
    9ee4:	41 50       	.word 0x5041
    9ee6:	57 56       	.word 0x5657
    9ee8:	46 57       	.word 0x5746
    9eea:	48 46       	.word 0x4648
    9eec:	53 54       	.word 0x5453
    9eee:	51 00       	.word 0x51
    9ef0:	4f 54       	.word 0x544f
    9ef2:	48 45       	.word 0x4548
    9ef4:	52 46       	.word 0x4652
    9ef6:	47 49       	.word 0x4947
    9ef8:	4f 44       	.word 0x444f
    9efa:	48 42       	.word 0x4248
    9efc:	54 50       	.word 0x5054
    9efe:	58 53       	.word 0x5358
    9f00:	49 43       	.word 0x4349
    9f02:	47 45       	.word 0x4547
    9f04:	4c 50       	.word 0x504c
    9f06:	48 41       	.word 0x4148
    9f08:	44 45       	.word 0x4544
    9f0a:	4a 49       	.word 0x494a
    9f0c:	5a 4e       	.word 0x4e5a
    9f0e:	41 50       	.word 0x5041
    9f10:	4b 49       	.word 0x494b
    9f12:	52 00       	.word 0x52

00009f14 <.LC2>:
    9f14:	00 20       	.word 0x2000

00009f15 <.LC0>:
	...

00009f1c <.LC1>:
    9f1c:	20 6f       	.word 0x6f20
    9f1e:	20 20       	.word 0x2020
    9f20:	6f 20       	.word 0x206f
    9f22:	20 6f       	.word 0x6f20
    9f24:	20 20       	.word 0x2020
    9f26:	6f 20       	.word 0x206f
    9f28:	20 6f       	.word 0x6f20
    9f2a:	20 00       	.word 0x20
    9f2c:	00 41       	.word 0x4100

00009f2d <.LC3>:
    9f2d:	00 00       	.word 0
    9f2f:	00 00       	.word 0
    9f31:	00 00       	.word 0
    9f33:	00 00       	.word 0
    9f35:	00 00       	.word 0
    9f37:	00 00       	.word 0
    9f39:	00 00       	.word 0
    9f3b:	00 00       	.word 0
    9f3d:	00 00       	.word 0

00009f3f <.LC4>:
    9f3f:	00 00       	.word 0
    9f41:	00 00       	.word 0
    9f43:	00 00       	.word 0
    9f45:	00 00       	.word 0
    9f47:	00 00       	.word 0
    9f49:	00 00       	.word 0
    9f4b:	00 00       	.word 0
    9f4d:	00 00       	.word 0
	...

00009f50 <.LC0>:
    9f50:	20 20       	.word 0x2020
    9f52:	20 20       	.word 0x2020
    9f54:	20 20       	.word 0x2020
    9f56:	20 20       	.word 0x2020
    9f58:	20 20       	.word 0x2020
    9f5a:	20 20       	.word 0x2020
    9f5c:	20 20       	.word 0x2020
    9f5e:	20 20       	.word 0x2020
    9f60:	20 20       	.word 0x2020
    9f62:	20 20       	.word 0x2020
    9f64:	20 20       	.word 0x2020
    9f66:	20 20       	.word 0x2020
    9f68:	20 20       	.word 0x2020
    9f6a:	20 20       	.word 0x2020
    9f6c:	20 20       	.word 0x2020
    9f6e:	20 20       	.word 0x2020
    9f70:	20 20       	.word 0x2020
    9f72:	20 20       	.word 0x2020
    9f74:	20 20       	.word 0x2020
    9f76:	20 20       	.word 0x2020
    9f78:	20 20       	.word 0x2020
    9f7a:	20 20       	.word 0x2020
    9f7c:	20 20       	.word 0x2020
    9f7e:	20 20       	.word 0x2020
    9f80:	20 20       	.word 0x2020
    9f82:	20 20       	.word 0x2020
    9f84:	20 20       	.word 0x2020
    9f86:	20 20       	.word 0x2020
    9f88:	00 20       	.word 0x2000

00009f89 <.LC1>:
    9f89:	00 00       	.word 0
    9f8b:	00 00       	.word 0
    9f8d:	00 00       	.word 0
    9f8f:	00 00       	.word 0
    9f91:	00 00       	.word 0
    9f93:	00 00       	.word 0
    9f95:	00 00       	.word 0
    9f97:	00 00       	.word 0
	...

00009f9a <.LC2>:
    9f9a:	7a 79       	.word 0x797a
    9f9c:	78 77       	.word 0x7778
    9f9e:	76 75       	.word 0x7576
    9fa0:	74 73       	.word 0x7374
    9fa2:	72 71       	.word 0x7172
    9fa4:	70 6f       	.word 0x6f70
    9fa6:	6e 6d       	.word 0x6d6e
    9fa8:	6c 6b       	.word 0x6b6c
    9faa:	6a 69       	.word 0x696a
    9fac:	68 67       	.word 0x6768
    9fae:	66 65       	.word 0x6566
    9fb0:	64 63       	.word 0x6364
    9fb2:	62 61       	.word 0x6162
    9fb4:	39 38       	.word 0x3839
    9fb6:	37 36       	.word 0x3637
    9fb8:	35 34       	.word 0x3435
    9fba:	33 32       	.word 0x3233
    9fbc:	31 30       	.word 0x3031
    9fbe:	31 32       	.word 0x3231
    9fc0:	33 34       	.word 0x3433
    9fc2:	35 36       	.word 0x3635
    9fc4:	37 38       	.word 0x3837
    9fc6:	39 61       	.word 0x6139
    9fc8:	62 63       	.word 0x6362
    9fca:	64 65       	.word 0x6564
    9fcc:	66 67       	.word 0x6766
    9fce:	68 69       	.word 0x6968
    9fd0:	6a 6b       	.word 0x6b6a
    9fd2:	6c 6d       	.word 0x6d6c
    9fd4:	6e 6f       	.word 0x6f6e
    9fd6:	70 71       	.word 0x7170
    9fd8:	72 73       	.word 0x7372
    9fda:	74 75       	.word 0x7574
    9fdc:	76 77       	.word 0x7776
    9fde:	78 79       	.word 0x7978
    9fe0:	7a 00       	.word 0x7a
Disassembly of section .text:

00001fe2 <_main>:
uint16_t counter;

_LCD lcd1;

void main(void) {
    1fe2:	62 00 fa    	lnk       #0x62
    1fe4:	88 1f 78    	mov.w     w8, [w15++]
    init_elecanisms();
    1fe6:	35 0a 07    	rcall     0x3452 <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    init_ajuart();
    1fe8:	50 07 07    	rcall     0x2e8a <_init_ajuart> <.L0> <.LFB0> <.LFE21> <.Letext0> <.Ltext0>
    // Setup rocker pins as inputs and set pull-up resistors
    toggleSwitchSetup();
    1fea:	73 02 07    	rcall     0x24d2 <_toggleSwitchSetup> <.LFB9> <.LFE8>

    i2c_init(1e3);
    1fec:	80 3e 20    	mov.w     #0x3e8, w0
    1fee:	1e 05 07    	rcall     0x2a2c <_i2c_init> <.LFB1> <.LFE0>
    lcd_init(&lcd1, 0x07, 'A'); //Setup LCD screen (type A i/o extender)
    1ff0:	12 c4 b3    	mov.b     #0x41, w2
    1ff2:	71 c0 b3    	mov.b     #0x7, w1
    1ff4:	20 0c 21    	mov.w     #0x10c2, w0
    1ff6:	3e 03 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
    lcd_clear(&lcd1);  // Clears _LCD objects from previous array
    1ff8:	20 0c 21    	mov.w     #0x10c2, w0
    1ffa:	d0 03 07    	rcall     0x279c <_lcd_clear> <.LFB8> <.LFE7>

    i2c2_init(157);                      // Initializes I2C on I2C2
    1ffc:	d0 09 20    	mov.w     #0x9d, w0
    1ffe:	56 06 07    	rcall     0x2cac <_i2c2_init> <.LFB13> <.LFE12>
    I2C2ADD = MODULE_CODEWORD_ADDR>>1;   // Set the device address (7-bit register)
    2000:	00 01 20    	mov.w     #0x10, w0
    2002:	d0 10 88    	mov.w     w0, 0x21a
    I2C2MSK = 0;                         // Set mask to 0 (only this address matters)
    2004:	1c 22 ef    	clr.w     0x21c
    _SI2C2IE = 1;                        // Enable i2c slave interrupt
    2006:	9a 20 a8    	bset.b    0x9a, #0x1

    rand_val = read_analog(A0_AN); // Set up the seed
    2008:	50 00 20    	mov.w     #0x5, w0
    200a:	53 0a 07    	rcall     0x34b2 <_read_analog> <.LFB1> <.LFE0>
    200c:	b0 40 88    	mov.w     w0, 0x816

    // Add more random noise
    uint8_t i, j;
    for (i=0; i<20; i++) {
    200e:	00 40 eb    	clr.b     w0
    2010:	00 4f 78    	mov.b     w0, [w14]
    2012:	12 00 37    	bra       0x2038 <.L2>

00002014 <.L5>:
        for (j=0; j<read_analog(A0_AN); j++) {
    2014:	00 40 eb    	clr.b     w0
    2016:	10 47 98    	mov.b     w0, [w14+1]
    2018:	08 00 37    	bra       0x202a <.L3>

0000201a <.L4>:
            rand_next();
    201a:	58 0a 07    	rcall     0x34cc <_rand_next> <.LFB2> <.LFE1>
            delay_by_nop(read_analog(A0_AN));
    201c:	50 00 20    	mov.w     #0x5, w0
    201e:	49 0a 07    	rcall     0x34b2 <_read_analog> <.LFB1> <.LFE0>
    2020:	80 00 eb    	clr.w     w1
    2022:	f1 04 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2024:	1e 40 90    	mov.b     [w14+1], w0
    2026:	00 40 e8    	inc.b     w0, w0
    2028:	10 47 98    	mov.b     w0, [w14+1]

0000202a <.L3>:
    202a:	1e 40 90    	mov.b     [w14+1], w0
    202c:	00 84 fb    	ze        w0, w8
    202e:	50 00 20    	mov.w     #0x5, w0
    2030:	40 0a 07    	rcall     0x34b2 <_read_analog> <.LFB1> <.LFE0>
    2032:	80 0f 54    	sub.w     w8, w0, [w15]
    2034:	f2 ff 39    	bra       NC, 0x201a <.L4>
    2036:	1e 4f e8    	inc.b     [w14], [w14]

00002038 <.L2>:
    2038:	1e 40 78    	mov.b     [w14], w0
    203a:	f3 4f 50    	sub.b     w0, #0x13, [w15]
    203c:	eb ff 36    	bra       LEU, 0x2014 <.L5>
        }
    }

    // U1_putc((uint8_t)rand_val >> 8);
    // U1_putc((uint8_t)rand_val);
    // U1_putc('\r');
    // U1_putc('\n');
    // U1_flush_tx_buffer();

    // set codeword and set of letters
    char _codeSet[36];
    for(i=0; i < 36; i++) {
    203e:	00 40 eb    	clr.b     w0
    2040:	00 4f 78    	mov.b     w0, [w14]
    2042:	12 00 37    	bra       0x2068 <.L6>

00002044 <.L7>:
        _codeSet[i] = letterSets[rand_val%15][i];
    2044:	9e 81 fb    	ze        [w14], w3
    2046:	b2 40 80    	mov.w     0x816, w2
    2048:	90 88 28    	mov.w     #0x8889, w0
    204a:	00 10 b8    	mul.uu    w2, w0, w0
    204c:	43 08 de    	lsr.w     w1, #0x3, w0
    204e:	6f 00 b9    	mul.su    w0, #0xf, w0
    2050:	00 00 78    	mov.w     w0, w0
    2052:	00 00 51    	sub.w     w2, w0, w0
    2054:	1e 81 fb    	ze        [w14], w2
    2056:	41 02 20    	mov.w     #0x24, w1
    2058:	01 80 b9    	mul.ss    w0, w1, w0
    205a:	00 00 78    	mov.w     w0, w0
    205c:	02 00 40    	add.w     w0, w2, w0
    205e:	81 cf 29    	mov.w     #0x9cf8, w1
    2060:	e1 40 78    	mov.b     [w1+w0], w1
    2062:	03 00 47    	add.w     w14, w3, w0
    2064:	21 40 98    	mov.b     w1, [w0+2]
    2066:	1e 4f e8    	inc.b     [w14], [w14]

00002068 <.L6>:
    2068:	30 c2 b3    	mov.b     #0x23, w0
    206a:	9e 40 78    	mov.b     [w14], w1
    206c:	80 cf 50    	sub.b     w1, w0, [w15]
    206e:	ea ff 36    	bra       LEU, 0x2044 <.L7>
    }
    codeSet = _codeSet;
    2070:	0e 80 e8    	inc2.w    w14, w0
    2072:	10 40 88    	mov.w     w0, 0x802

    char tmp[7] = " ";
    2074:	00 02 20    	mov.w     #0x20, w0
    2076:	01 00 20    	mov.w     #0x0, w1
    2078:	30 17 98    	mov.w     w0, [w14+38]
    207a:	41 17 98    	mov.w     w1, [w14+40]
    207c:	8e 00 78    	mov.w     w14, w1
    207e:	a1 02 b0    	add.w     #0x2a, w1
    2080:	00 00 09    	repeat    #0x0
    2082:	80 18 eb    	clr.w     [w1++]
    2084:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<5; i++){
    2086:	00 40 eb    	clr.b     w0
    2088:	00 4f 78    	mov.b     w0, [w14]
    208a:	08 00 37    	bra       0x209c <.L8>

0000208c <.L9>:
        tmp[i] = codeSet[i];
    208c:	1e 80 fb    	ze        [w14], w0
    208e:	12 40 80    	mov.w     0x802, w2
    2090:	9e 80 fb    	ze        [w14], w1
    2092:	81 00 41    	add.w     w2, w1, w1
    2094:	91 40 78    	mov.b     [w1], w1
    2096:	00 00 47    	add.w     w14, w0, w0
    2098:	61 60 98    	mov.b     w1, [w0+38]
    209a:	1e 4f e8    	inc.b     [w14], [w14]

0000209c <.L8>:
    209c:	1e 40 78    	mov.b     [w14], w0
    209e:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    20a0:	f5 ff 36    	bra       LEU, 0x208c <.L9>
    }
    codeword = tmp;
    20a2:	60 02 20    	mov.w     #0x26, w0
    20a4:	0e 00 40    	add.w     w0, w14, w0
    20a6:	70 40 88    	mov.w     w0, 0x80e

    // setup column sets of letters
    char _set0[7] = " ";
    20a8:	50 f1 29    	mov.w     #0x9f15, w0
    20aa:	90 40 78    	mov.b     [w0], w1
    20ac:	51 6f 98    	mov.b     w1, [w14+45]
    20ae:	90 40 90    	mov.b     [w0+1], w1
    20b0:	61 6f 98    	mov.b     w1, [w14+46]
    20b2:	8e 00 78    	mov.w     w14, w1
    20b4:	f1 02 b0    	add.w     #0x2f, w1
    20b6:	04 00 09    	repeat    #0x4
    20b8:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<6; i++){
    20ba:	00 40 eb    	clr.b     w0
    20bc:	00 4f 78    	mov.b     w0, [w14]
    20be:	09 00 37    	bra       0x20d2 <.L10>

000020c0 <.L11>:
        _set0[i] = codeSet[i+5];
    20c0:	1e 80 fb    	ze        [w14], w0
    20c2:	12 40 80    	mov.w     0x802, w2
    20c4:	9e 80 fb    	ze        [w14], w1
    20c6:	e5 80 40    	add.w     w1, #0x5, w1
    20c8:	81 00 41    	add.w     w2, w1, w1
    20ca:	91 40 78    	mov.b     [w1], w1
    20cc:	00 00 47    	add.w     w14, w0, w0
    20ce:	51 68 98    	mov.b     w1, [w0+45]
    20d0:	1e 4f e8    	inc.b     [w14], [w14]

000020d2 <.L10>:
    20d2:	1e 40 78    	mov.b     [w14], w0
    20d4:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    20d6:	f4 ff 36    	bra       LEU, 0x20c0 <.L11>
    }
    set0 = _set0;
    20d8:	d0 02 20    	mov.w     #0x2d, w0
    20da:	0e 00 40    	add.w     w0, w14, w0
    20dc:	20 40 88    	mov.w     w0, 0x804

    char _set1[7] = " ";
    20de:	00 02 20    	mov.w     #0x20, w0
    20e0:	01 00 20    	mov.w     #0x0, w1
    20e2:	20 1f 98    	mov.w     w0, [w14+52]
    20e4:	31 1f 98    	mov.w     w1, [w14+54]
    20e6:	8e 00 78    	mov.w     w14, w1
    20e8:	81 03 b0    	add.w     #0x38, w1
    20ea:	00 00 09    	repeat    #0x0
    20ec:	80 18 eb    	clr.w     [w1++]
    20ee:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<6; i++){
    20f0:	00 40 eb    	clr.b     w0
    20f2:	00 4f 78    	mov.b     w0, [w14]
    20f4:	09 00 37    	bra       0x2108 <.L12>

000020f6 <.L13>:
        _set1[i] = codeSet[i+11];
    20f6:	1e 80 fb    	ze        [w14], w0
    20f8:	12 40 80    	mov.w     0x802, w2
    20fa:	9e 80 fb    	ze        [w14], w1
    20fc:	eb 80 40    	add.w     w1, #0xb, w1
    20fe:	81 00 41    	add.w     w2, w1, w1
    2100:	91 40 78    	mov.b     [w1], w1
    2102:	00 00 47    	add.w     w14, w0, w0
    2104:	41 70 98    	mov.b     w1, [w0+52]
    2106:	1e 4f e8    	inc.b     [w14], [w14]

00002108 <.L12>:
    2108:	1e 40 78    	mov.b     [w14], w0
    210a:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    210c:	f4 ff 36    	bra       LEU, 0x20f6 <.L13>
    }
    set1 = _set1;
    210e:	40 03 20    	mov.w     #0x34, w0
    2110:	0e 00 40    	add.w     w0, w14, w0
    2112:	30 40 88    	mov.w     w0, 0x806

    char _set2[7] = " ";
    2114:	50 f1 29    	mov.w     #0x9f15, w0
    2116:	90 40 78    	mov.b     [w0], w1
    2118:	31 7f 98    	mov.b     w1, [w14+59]
    211a:	90 40 90    	mov.b     [w0+1], w1
    211c:	41 7f 98    	mov.b     w1, [w14+60]
    211e:	8e 00 78    	mov.w     w14, w1
    2120:	d1 03 b0    	add.w     #0x3d, w1
    2122:	04 00 09    	repeat    #0x4
    2124:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<6; i++){
    2126:	00 40 eb    	clr.b     w0
    2128:	00 4f 78    	mov.b     w0, [w14]
    212a:	09 00 37    	bra       0x213e <.L14>

0000212c <.L15>:
        _set2[i] = codeSet[i+17];
    212c:	1e 80 fb    	ze        [w14], w0
    212e:	12 40 80    	mov.w     0x802, w2
    2130:	9e 80 fb    	ze        [w14], w1
    2132:	f1 80 40    	add.w     w1, #0x11, w1
    2134:	81 00 41    	add.w     w2, w1, w1
    2136:	91 40 78    	mov.b     [w1], w1
    2138:	00 00 47    	add.w     w14, w0, w0
    213a:	31 78 98    	mov.b     w1, [w0+59]
    213c:	1e 4f e8    	inc.b     [w14], [w14]

0000213e <.L14>:
    213e:	1e 40 78    	mov.b     [w14], w0
    2140:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    2142:	f4 ff 36    	bra       LEU, 0x212c <.L15>
    }
    set2 = _set2;
    2144:	b0 03 20    	mov.w     #0x3b, w0
    2146:	0e 00 40    	add.w     w0, w14, w0
    2148:	40 40 88    	mov.w     w0, 0x808

    char _set3[7] = " ";
    214a:	00 02 20    	mov.w     #0x20, w0
    214c:	01 00 20    	mov.w     #0x0, w1
    214e:	10 27 98    	mov.w     w0, [w14+66]
    2150:	21 27 98    	mov.w     w1, [w14+68]
    2152:	8e 00 78    	mov.w     w14, w1
    2154:	61 04 b0    	add.w     #0x46, w1
    2156:	00 00 09    	repeat    #0x0
    2158:	80 18 eb    	clr.w     [w1++]
    215a:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<6; i++){
    215c:	00 40 eb    	clr.b     w0
    215e:	00 4f 78    	mov.b     w0, [w14]
    2160:	09 00 37    	bra       0x2174 <.L16>

00002162 <.L17>:
        _set3[i] = codeSet[i+23];
    2162:	1e 80 fb    	ze        [w14], w0
    2164:	12 40 80    	mov.w     0x802, w2
    2166:	9e 80 fb    	ze        [w14], w1
    2168:	f7 80 40    	add.w     w1, #0x17, w1
    216a:	81 00 41    	add.w     w2, w1, w1
    216c:	91 40 78    	mov.b     [w1], w1
    216e:	00 00 47    	add.w     w14, w0, w0
    2170:	21 c0 98    	mov.b     w1, [w0+66]
    2172:	1e 4f e8    	inc.b     [w14], [w14]

00002174 <.L16>:
    2174:	1e 40 78    	mov.b     [w14], w0
    2176:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    2178:	f4 ff 36    	bra       LEU, 0x2162 <.L17>
    }
    set3 = _set3;
    217a:	20 04 20    	mov.w     #0x42, w0
    217c:	0e 00 40    	add.w     w0, w14, w0
    217e:	50 40 88    	mov.w     w0, 0x80a

    char _set4[7] = " ";
    2180:	50 f1 29    	mov.w     #0x9f15, w0
    2182:	90 40 78    	mov.b     [w0], w1
    2184:	11 cf 98    	mov.b     w1, [w14+73]
    2186:	90 40 90    	mov.b     [w0+1], w1
    2188:	21 cf 98    	mov.b     w1, [w14+74]
    218a:	8e 00 78    	mov.w     w14, w1
    218c:	b1 04 b0    	add.w     #0x4b, w1
    218e:	04 00 09    	repeat    #0x4
    2190:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<6; i++){
    2192:	00 40 eb    	clr.b     w0
    2194:	00 4f 78    	mov.b     w0, [w14]
    2196:	09 00 37    	bra       0x21aa <.L18>

00002198 <.L19>:
        _set4[i] = codeSet[i+29];
    2198:	1e 80 fb    	ze        [w14], w0
    219a:	12 40 80    	mov.w     0x802, w2
    219c:	9e 80 fb    	ze        [w14], w1
    219e:	fd 80 40    	add.w     w1, #0x1d, w1
    21a0:	81 00 41    	add.w     w2, w1, w1
    21a2:	91 40 78    	mov.b     [w1], w1
    21a4:	00 00 47    	add.w     w14, w0, w0
    21a6:	11 c8 98    	mov.b     w1, [w0+73]
    21a8:	1e 4f e8    	inc.b     [w14], [w14]

000021aa <.L18>:
    21aa:	1e 40 78    	mov.b     [w14], w0
    21ac:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    21ae:	f4 ff 36    	bra       LEU, 0x2198 <.L19>
    }
    set4 = _set4;
    21b0:	90 04 20    	mov.w     #0x49, w0
    21b2:	0e 00 40    	add.w     w0, w14, w0
    21b4:	60 40 88    	mov.w     w0, 0x80c

    // initialize indices of each column
    i0 = rand_val%5;
    21b6:	b2 40 80    	mov.w     0x816, w2
    21b8:	d0 cc 2c    	mov.w     #0xcccd, w0
    21ba:	00 10 b8    	mul.uu    w2, w0, w0
    21bc:	42 08 de    	lsr.w     w1, #0x2, w0
    21be:	65 00 b9    	mul.su    w0, #0x5, w0
    21c0:	00 00 78    	mov.w     w0, w0
    21c2:	00 00 51    	sub.w     w2, w0, w0
    21c4:	00 40 78    	mov.b     w0, w0
    21c6:	10 e8 b7    	mov.b     WREG, 0x810
    rand_next();
    21c8:	81 09 07    	rcall     0x34cc <_rand_next> <.LFB2> <.LFE1>
    i1 = rand_val%5;
    21ca:	b2 40 80    	mov.w     0x816, w2
    21cc:	d0 cc 2c    	mov.w     #0xcccd, w0
    21ce:	00 10 b8    	mul.uu    w2, w0, w0
    21d0:	42 08 de    	lsr.w     w1, #0x2, w0
    21d2:	65 00 b9    	mul.su    w0, #0x5, w0
    21d4:	00 00 78    	mov.w     w0, w0
    21d6:	00 00 51    	sub.w     w2, w0, w0
    21d8:	00 40 78    	mov.b     w0, w0
    21da:	11 e8 b7    	mov.b     WREG, 0x811
    rand_next();
    21dc:	77 09 07    	rcall     0x34cc <_rand_next> <.LFB2> <.LFE1>
    i2 = rand_val%5;
    21de:	b2 40 80    	mov.w     0x816, w2
    21e0:	d0 cc 2c    	mov.w     #0xcccd, w0
    21e2:	00 10 b8    	mul.uu    w2, w0, w0
    21e4:	42 08 de    	lsr.w     w1, #0x2, w0
    21e6:	65 00 b9    	mul.su    w0, #0x5, w0
    21e8:	00 00 78    	mov.w     w0, w0
    21ea:	00 00 51    	sub.w     w2, w0, w0
    21ec:	00 40 78    	mov.b     w0, w0
    21ee:	12 e8 b7    	mov.b     WREG, 0x812
    rand_next();
    21f0:	6d 09 07    	rcall     0x34cc <_rand_next> <.LFB2> <.LFE1>
    i3 = rand_val%5;
    21f2:	b2 40 80    	mov.w     0x816, w2
    21f4:	d0 cc 2c    	mov.w     #0xcccd, w0
    21f6:	00 10 b8    	mul.uu    w2, w0, w0
    21f8:	42 08 de    	lsr.w     w1, #0x2, w0
    21fa:	65 00 b9    	mul.su    w0, #0x5, w0
    21fc:	00 00 78    	mov.w     w0, w0
    21fe:	00 00 51    	sub.w     w2, w0, w0
    2200:	00 40 78    	mov.b     w0, w0
    2202:	13 e8 b7    	mov.b     WREG, 0x813
    rand_next();
    2204:	63 09 07    	rcall     0x34cc <_rand_next> <.LFB2> <.LFE1>
    i4 = rand_val%5;
    2206:	b2 40 80    	mov.w     0x816, w2
    2208:	d0 cc 2c    	mov.w     #0xcccd, w0
    220a:	00 10 b8    	mul.uu    w2, w0, w0
    220c:	42 08 de    	lsr.w     w1, #0x2, w0
    220e:	65 00 b9    	mul.su    w0, #0x5, w0
    2210:	00 00 78    	mov.w     w0, w0
    2212:	00 00 51    	sub.w     w2, w0, w0
    2214:	00 40 78    	mov.b     w0, w0
    2216:	14 e8 b7    	mov.b     WREG, 0x814

    char dispstring[17] = " o  o  o  o  o ";
    2218:	c0 f1 29    	mov.w     #0x9f1c, w0
    221a:	01 05 20    	mov.w     #0x50, w1
    221c:	81 00 47    	add.w     w14, w1, w1
    221e:	0f 00 09    	repeat    #0xf
    2220:	b0 58 78    	mov.b     [w0++], [w1++]
    2222:	00 01 b1    	sub.w     #0x10, w0
    2224:	00 40 eb    	clr.b     w0
    2226:	00 e7 98    	mov.b     w0, [w14+96]
    dispptr = dispstring;
    2228:	00 05 20    	mov.w     #0x50, w0
    222a:	0e 00 40    	add.w     w0, w14, w0
    222c:	00 40 88    	mov.w     w0, 0x800
    lcd_print2(&lcd1, dispptr, "");
    222e:	00 40 80    	mov.w     0x800, w0
    2230:	42 f1 29    	mov.w     #0x9f14, w2
    2232:	80 00 78    	mov.w     w0, w1
    2234:	20 0c 21    	mov.w     #0x10c2, w0
    2236:	0f 03 07    	rcall     0x2856 <_lcd_print2> <.LFB13> <.LFE12>

    // Timer 2 Setup
    T2CON = 0x0020;         // set Timer2 period to 10 ms for debounce
    2238:	00 02 20    	mov.w     #0x20, w0
    223a:	80 08 88    	mov.w     w0, 0x110
    PR2 = 0x2710;           // prescaler 16, match value 10000
    223c:	00 71 22    	mov.w     #0x2710, w0
    223e:	60 08 88    	mov.w     w0, 0x10c

    TMR2 = 0;               // set Timer2 to 0
    2240:	06 21 ef    	clr.w     0x106
    IFS0bits.T2IF = 0;      // lower T2 interrupt flag
    2242:	84 e0 a9    	bclr.b    0x84, #0x7
    IEC0bits.T2IE = 1;      // enable T2 interrupt
    2244:	94 e0 a8    	bset.b    0x94, #0x7
    T2CONbits.TON = 0;      // make sure T2 isn't on
    2246:	11 e1 a9    	bclr.b    0x111, #0x7

    state = run;
    2248:	c0 28 22    	mov.w     #0x228c, w0
    224a:	c0 40 88    	mov.w     w0, 0x818

0000224c <.L20>:

    while (1) {
        state();
    224c:	c0 40 80    	mov.w     0x818, w0
    224e:	00 00 01    	call      w0
    }
    2250:	fd ff 37    	bra       0x224c <.L20>

00002252 <_setup>:
}

// STATE MACHINE FUNCTIONS /////////////////////////////////////////////////////

void setup(void) { // Waits for master module to start the game
    2252:	00 00 fa    	lnk       #0x0
    // State Setup
    if (state != last_state) {
    2254:	c1 40 80    	mov.w     0x818, w1
    2256:	d0 40 80    	mov.w     0x81a, w0
    2258:	80 8f 50    	sub.w     w1, w0, [w15]
    225a:	08 00 32    	bra       Z, 0x226c <.L22>
        last_state = state;
    225c:	c0 40 80    	mov.w     0x818, w0
    225e:	d0 40 88    	mov.w     w0, 0x81a
        MODULE_LED_GREEN = ON; delay_by_nop(1);
    2260:	da 22 a8    	bset.b    0x2da, #0x1
    2262:	10 00 20    	mov.w     #0x1, w0
    2264:	01 00 20    	mov.w     #0x0, w1
    2266:	cf 03 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        MODULE_LED_RED = ON;
    2268:	da 02 a8    	bset.b    0x2da, #0x0
        complete_flag = 0;
    226a:	24 68 ef    	clr.b     0x824

0000226c <.L22>:
        // setup state here
    }

    // Perform state tasks

    // Check for state transitions
    // if ((start_flag == 1) || (SW2 == 0)){
    //     state = run;
    // }

    if (start_flag == 1) {
    226c:	27 c8 bf    	mov.b     0x827, WREG
    226e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2270:	02 00 3a    	bra       NZ, 0x2276 <.L23>
        state = run;
    2272:	c0 28 22    	mov.w     #0x228c, w0
    2274:	c0 40 88    	mov.w     w0, 0x818

00002276 <.L23>:
    }

    // State Cleanup
    if (state != last_state) {
    2276:	c1 40 80    	mov.w     0x818, w1
    2278:	d0 40 80    	mov.w     0x81a, w0
    227a:	80 8f 50    	sub.w     w1, w0, [w15]
    227c:	05 00 32    	bra       Z, 0x2288 <.L21>
        // cleanup state here
        MODULE_LED_GREEN = OFF; delay_by_nop(1);
    227e:	da 22 a9    	bclr.b    0x2da, #0x1
    2280:	10 00 20    	mov.w     #0x1, w0
    2282:	01 00 20    	mov.w     #0x0, w1
    2284:	c0 03 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        MODULE_LED_RED = ON;
    2286:	da 02 a8    	bset.b    0x2da, #0x0

00002288 <.L21>:
    }
}
    2288:	00 80 fa    	ulnk      
    228a:	00 00 06    	return    

0000228c <_run>:

void run(void) { // Plays the game
    228c:	02 00 fa    	lnk       #0x2
    // State Setup
    if (state != last_state) {
    228e:	c1 40 80    	mov.w     0x818, w1
    2290:	d0 40 80    	mov.w     0x81a, w0
    2292:	80 8f 50    	sub.w     w1, w0, [w15]
    2294:	07 00 32    	bra       Z, 0x22a4 <.L26>
        last_state = state;
    2296:	c0 40 80    	mov.w     0x818, w0
    2298:	d0 40 88    	mov.w     w0, 0x81a
        // setup state here
        LED1 = ON; delay_by_nop(1);
    229a:	dc e2 a8    	bset.b    0x2dc, #0x7
    229c:	10 00 20    	mov.w     #0x1, w0
    229e:	01 00 20    	mov.w     #0x0, w1
    22a0:	b2 03 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        MODULE_LED_RED = ON;
    22a2:	da 02 a8    	bset.b    0x2da, #0x0

000022a4 <.L26>:
    }

    // Perform state tasks
    updateDisplay();
    22a4:	e6 00 07    	rcall     0x2472 <_updateDisplay> <.LFB8> <.LFE5>
    uint16_t reading = read_analog(A5_AN);
    22a6:	00 00 eb    	clr.w     w0
    22a8:	04 09 07    	rcall     0x34b2 <_read_analog> <.LFB1> <.LFE0>
    22aa:	00 0f 78    	mov.w     w0, [w14]
    if (reading > 500) { //TODO: Add real submit button pin mapping
    22ac:	40 1f 20    	mov.w     #0x1f4, w0
    22ae:	9e 00 78    	mov.w     [w14], w1
    22b0:	80 8f 50    	sub.w     w1, w0, [w15]
    22b2:	38 00 36    	bra       LEU, 0x2324 <.L27>
        if ((set0[i0] == codeword[0]) &&
    22b4:	21 40 80    	mov.w     0x804, w1
    22b6:	10 c8 bf    	mov.b     0x810, WREG
    22b8:	00 80 fb    	ze        w0, w0
    22ba:	00 80 40    	add.w     w1, w0, w0
    22bc:	90 40 78    	mov.b     [w0], w1
    22be:	70 40 80    	mov.w     0x80e, w0
    22c0:	10 40 78    	mov.b     [w0], w0
    22c2:	80 cf 50    	sub.b     w1, w0, [w15]
    22c4:	2b 00 3a    	bra       NZ, 0x231c <.L28>
            (set1[i1] == codeword[1]) &&
    22c6:	31 40 80    	mov.w     0x806, w1
    22c8:	11 c8 bf    	mov.b     0x811, WREG
    22ca:	00 80 fb    	ze        w0, w0
    22cc:	00 80 40    	add.w     w1, w0, w0
    22ce:	90 40 78    	mov.b     [w0], w1
    22d0:	70 40 80    	mov.w     0x80e, w0
    22d2:	00 00 e8    	inc.w     w0, w0
    22d4:	10 40 78    	mov.b     [w0], w0
    22d6:	80 cf 50    	sub.b     w1, w0, [w15]
    22d8:	21 00 3a    	bra       NZ, 0x231c <.L28>
            (set2[i2] == codeword[2]) &&
    22da:	41 40 80    	mov.w     0x808, w1
    22dc:	12 c8 bf    	mov.b     0x812, WREG
    22de:	00 80 fb    	ze        w0, w0
    22e0:	00 80 40    	add.w     w1, w0, w0
    22e2:	90 40 78    	mov.b     [w0], w1
    22e4:	70 40 80    	mov.w     0x80e, w0
    22e6:	00 80 e8    	inc2.w    w0, w0
    22e8:	10 40 78    	mov.b     [w0], w0
    22ea:	80 cf 50    	sub.b     w1, w0, [w15]
    22ec:	17 00 3a    	bra       NZ, 0x231c <.L28>
            (set3[i3] == codeword[3]) &&
    22ee:	51 40 80    	mov.w     0x80a, w1
    22f0:	13 c8 bf    	mov.b     0x813, WREG
    22f2:	00 80 fb    	ze        w0, w0
    22f4:	00 80 40    	add.w     w1, w0, w0
    22f6:	90 40 78    	mov.b     [w0], w1
    22f8:	70 40 80    	mov.w     0x80e, w0
    22fa:	63 00 40    	add.w     w0, #0x3, w0
    22fc:	10 40 78    	mov.b     [w0], w0
    22fe:	80 cf 50    	sub.b     w1, w0, [w15]
    2300:	0d 00 3a    	bra       NZ, 0x231c <.L28>
            (set4[i4] == codeword[4])) {
    2302:	61 40 80    	mov.w     0x80c, w1
    2304:	14 c8 bf    	mov.b     0x814, WREG
    2306:	00 80 fb    	ze        w0, w0
    2308:	00 80 40    	add.w     w1, w0, w0
    230a:	90 40 78    	mov.b     [w0], w1
    230c:	70 40 80    	mov.w     0x80e, w0
    230e:	64 00 40    	add.w     w0, #0x4, w0
    2310:	10 40 78    	mov.b     [w0], w0
    2312:	80 cf 50    	sub.b     w1, w0, [w15]
    2314:	03 00 3a    	bra       NZ, 0x231c <.L28>
                state = solved;
    2316:	a0 37 22    	mov.w     #0x237a, w0
    2318:	c0 40 88    	mov.w     w0, 0x818
    231a:	04 00 37    	bra       0x2324 <.L27>

0000231c <.L28>:
        } else {
            num_strikes++;
    231c:	25 c8 bf    	mov.b     0x825, WREG
    231e:	00 40 e8    	inc.b     w0, w0
    2320:	25 e8 b7    	mov.b     WREG, 0x825
            LED3 = OFF;
    2322:	ec 22 a9    	bclr.b    0x2ec, #0x1

00002324 <.L27>:
        }
    }
    sprintf(char_buffer, "Analog reading:%d", reading);
    2324:	9e 1f 78    	mov.w     [w14], [w15++]
    2326:	d0 f2 29    	mov.w     #0x9f2d, w0
    2328:	80 1f 78    	mov.w     w0, [w15++]
    232a:	20 04 21    	mov.w     #0x1042, w0
    232c:	85 f7 07    	rcall     0x1238 <__sprintf_cdnopuxX>
    232e:	e4 87 57    	sub.w     w15, #0x4, w15
    U1_puts(char_buffer);
    2330:	20 04 21    	mov.w     #0x1042, w0
    2332:	38 06 07    	rcall     0x2fa4 <_U1_puts> <.LFB7> <.LFE6>
    U1_putc('\r');
    2334:	d0 c0 b3    	mov.b     #0xd, w0
    2336:	fc 05 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\n');
    2338:	a0 c0 b3    	mov.b     #0xa, w0
    233a:	fa 05 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    233c:	f0 05 07    	rcall     0x2f1e <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

    lcd_print2(&lcd1, dispptr, "");
    233e:	00 40 80    	mov.w     0x800, w0
    2340:	42 f1 29    	mov.w     #0x9f14, w2
    2342:	80 00 78    	mov.w     w0, w1
    2344:	20 0c 21    	mov.w     #0x10c2, w0
    2346:	87 02 07    	rcall     0x2856 <_lcd_print2> <.LFB13> <.LFE12>
    delay_by_nop(3000);
    2348:	80 bb 20    	mov.w     #0xbb8, w0
    234a:	01 00 20    	mov.w     #0x0, w1
    234c:	5c 03 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Check for state transitions
    if (win_flag == 1) {
    234e:	28 c8 bf    	mov.b     0x828, WREG
    2350:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2352:	03 00 3a    	bra       NZ, 0x235a <.L29>
        state = end_win;
    2354:	80 3c 22    	mov.w     #0x23c8, w0
    2356:	c0 40 88    	mov.w     w0, 0x818
    2358:	05 00 37    	bra       0x2364 <.L30>

0000235a <.L29>:
    } else if (lose_flag == 1) {
    235a:	29 c8 bf    	mov.b     0x829, WREG
    235c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    235e:	02 00 3a    	bra       NZ, 0x2364 <.L30>
        state = end_fail;
    2360:	e0 41 22    	mov.w     #0x241e, w0
    2362:	c0 40 88    	mov.w     w0, 0x818

00002364 <.L30>:
    }

    // State Cleanup
    if (state != last_state) {
    2364:	c1 40 80    	mov.w     0x818, w1
    2366:	d0 40 80    	mov.w     0x81a, w0
    2368:	80 8f 50    	sub.w     w1, w0, [w15]
    236a:	05 00 32    	bra       Z, 0x2376 <.L25>
        // cleanup state here
        LED1=OFF; delay_by_nop(1);
    236c:	dc e2 a9    	bclr.b    0x2dc, #0x7
    236e:	10 00 20    	mov.w     #0x1, w0
    2370:	01 00 20    	mov.w     #0x0, w1
    2372:	49 03 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        MODULE_LED_RED = OFF;
    2374:	da 02 a9    	bclr.b    0x2da, #0x0

00002376 <.L25>:
    }
}
    2376:	00 80 fa    	ulnk      
    2378:	00 00 06    	return    

0000237a <_solved>:

void solved(void) { // The puzzle on this module is finished
    237a:	00 00 fa    	lnk       #0x0
    // State Setup
    if (state != last_state) {
    237c:	c1 40 80    	mov.w     0x818, w1
    237e:	d0 40 80    	mov.w     0x81a, w0
    2380:	80 8f 50    	sub.w     w1, w0, [w15]
    2382:	06 00 32    	bra       Z, 0x2390 <.L33>
        // setup state here
        last_state = state;
    2384:	c0 40 80    	mov.w     0x818, w0
    2386:	d0 40 88    	mov.w     w0, 0x81a
        LED3 = ON;
    2388:	ec 22 a8    	bset.b    0x2ec, #0x1
        complete_flag = 1;
    238a:	10 c0 b3    	mov.b     #0x1, w0
    238c:	24 e8 b7    	mov.b     WREG, 0x824
        MODULE_LED_GREEN = ON;
    238e:	da 22 a8    	bset.b    0x2da, #0x1

00002390 <.L33>:
    }

    // Perform state tasks
    lcd_print2(&lcd1, dispptr, "  --CORRECT--  ");
    2390:	00 40 80    	mov.w     0x800, w0
    2392:	f2 f3 29    	mov.w     #0x9f3f, w2
    2394:	80 00 78    	mov.w     w0, w1
    2396:	20 0c 21    	mov.w     #0x10c2, w0
    2398:	5e 02 07    	rcall     0x2856 <_lcd_print2> <.LFB13> <.LFE12>
    delay_by_nop(30000);
    239a:	00 53 27    	mov.w     #0x7530, w0
    239c:	01 00 20    	mov.w     #0x0, w1
    239e:	33 03 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Check for state transitions
    if (win_flag == 1) {
    23a0:	28 c8 bf    	mov.b     0x828, WREG
    23a2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    23a4:	03 00 3a    	bra       NZ, 0x23ac <.L34>
        state = end_win;
    23a6:	80 3c 22    	mov.w     #0x23c8, w0
    23a8:	c0 40 88    	mov.w     w0, 0x818
    23aa:	05 00 37    	bra       0x23b6 <.L35>

000023ac <.L34>:
    } else if (lose_flag == 1) {
    23ac:	29 c8 bf    	mov.b     0x829, WREG
    23ae:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    23b0:	02 00 3a    	bra       NZ, 0x23b6 <.L35>
        state = end_fail;
    23b2:	e0 41 22    	mov.w     #0x241e, w0
    23b4:	c0 40 88    	mov.w     w0, 0x818

000023b6 <.L35>:
    }

    // State Cleanup
    if (state != last_state) {
    23b6:	c1 40 80    	mov.w     0x818, w1
    23b8:	d0 40 80    	mov.w     0x81a, w0
    23ba:	80 8f 50    	sub.w     w1, w0, [w15]
    23bc:	03 00 32    	bra       Z, 0x23c4 <.L32>
        // cleanup state here
        LED3 = OFF;
    23be:	ec 22 a9    	bclr.b    0x2ec, #0x1
        complete_flag = 0;
    23c0:	24 68 ef    	clr.b     0x824
        MODULE_LED_GREEN = OFF;
    23c2:	da 22 a9    	bclr.b    0x2da, #0x1

000023c4 <.L32>:
    }
}
    23c4:	00 80 fa    	ulnk      
    23c6:	00 00 06    	return    

000023c8 <_end_win>:

void end_win(void) { // The master module said the game was won
    23c8:	00 00 fa    	lnk       #0x0
    // State Setup
    if (state != last_state) {
    23ca:	c1 40 80    	mov.w     0x818, w1
    23cc:	d0 40 80    	mov.w     0x81a, w0
    23ce:	80 8f 50    	sub.w     w1, w0, [w15]
    23d0:	0a 00 32    	bra       Z, 0x23e6 <.L38>
        last_state = state;
    23d2:	c0 40 80    	mov.w     0x818, w0
    23d4:	d0 40 88    	mov.w     w0, 0x81a
        MODULE_LED_GREEN = ON;
    23d6:	da 22 a8    	bset.b    0x2da, #0x1

        T1CON = 0x0030;         // set Timer1 period to 0.5s
    23d8:	00 03 20    	mov.w     #0x30, w0
    23da:	20 08 88    	mov.w     w0, 0x104
        PR1 = 0x7A11;
    23dc:	10 a1 27    	mov.w     #0x7a11, w0
    23de:	10 08 88    	mov.w     w0, 0x102

        TMR1 = 0;               // set Timer1 count to 0
    23e0:	00 21 ef    	clr.w     0x100
        IFS0bits.T1IF = 0;      // lower Timer1 interrupt flag
    23e2:	84 60 a9    	bclr.b    0x84, #0x3
        T1CONbits.TON = 1;      // turn on Timer1
    23e4:	05 e1 a8    	bset.b    0x105, #0x7

000023e6 <.L38>:
    }

    // Perform state tasks
    if (IFS0bits.T1IF == 1) {
    23e6:	20 04 80    	mov.w     0x84, w0
    23e8:	68 00 60    	and.w     w0, #0x8, w0
    23ea:	00 00 e0    	cp0.w     w0
    23ec:	10 00 32    	bra       Z, 0x240e <.L39>
        IFS0bits.T1IF = 0;      // lower Timer1 interrupt flag
    23ee:	84 60 a9    	bclr.b    0x84, #0x3
        MODULE_LED_GREEN = !MODULE_LED_GREEN;           // toggle LED
    23f0:	d0 16 80    	mov.w     0x2da, w0
    23f2:	62 00 60    	and.w     w0, #0x2, w0
    23f4:	00 f0 a7    	btsc.w    w0, #0xf
    23f6:	00 00 ea    	neg.w     w0, w0
    23f8:	00 00 e9    	dec.w     w0, w0
    23fa:	4f 00 de    	lsr.w     w0, #0xf, w0
    23fc:	00 40 78    	mov.b     w0, w0
    23fe:	00 80 fb    	ze        w0, w0
    2400:	61 00 60    	and.w     w0, #0x1, w0
    2402:	00 00 40    	add.w     w0, w0, w0
    2404:	d2 16 80    	mov.w     0x2da, w2
    2406:	d1 ff 2f    	mov.w     #0xfffd, w1
    2408:	81 00 61    	and.w     w2, w1, w1
    240a:	01 00 70    	ior.w     w0, w1, w0
    240c:	d0 16 88    	mov.w     w0, 0x2da

0000240e <.L39>:
    }

    // Check for state transitions

    // State Cleanup
    if (state != last_state) {
    240e:	c1 40 80    	mov.w     0x818, w1
    2410:	d0 40 80    	mov.w     0x81a, w0
    2412:	80 8f 50    	sub.w     w1, w0, [w15]
    2414:	02 00 32    	bra       Z, 0x241a <.L37>
        // cleanup state here
        MODULE_LED_GREEN = OFF;
    2416:	da 22 a9    	bclr.b    0x2da, #0x1
        T1CONbits.TON = 0;      // turn off Timer1
    2418:	05 e1 a9    	bclr.b    0x105, #0x7

0000241a <.L37>:
    }
}
    241a:	00 80 fa    	ulnk      
    241c:	00 00 06    	return    

0000241e <_end_fail>:

void end_fail(void) { // The master module said the game was lost
    241e:	00 00 fa    	lnk       #0x0
    // State Setup
    if (state != last_state) {
    2420:	c1 40 80    	mov.w     0x818, w1
    2422:	d0 40 80    	mov.w     0x81a, w0
    2424:	80 8f 50    	sub.w     w1, w0, [w15]
    2426:	0a 00 32    	bra       Z, 0x243c <.L42>
        // setup state here
        last_state = state;
    2428:	c0 40 80    	mov.w     0x818, w0
    242a:	d0 40 88    	mov.w     w0, 0x81a
        MODULE_LED_RED = ON;
    242c:	da 02 a8    	bset.b    0x2da, #0x0

        T1CON = 0x0030;         // set Timer1 period to 0.5s
    242e:	00 03 20    	mov.w     #0x30, w0
    2430:	20 08 88    	mov.w     w0, 0x104
        PR1 = 0x7A11;
    2432:	10 a1 27    	mov.w     #0x7a11, w0
    2434:	10 08 88    	mov.w     w0, 0x102

        TMR1 = 0;               // set Timer1 count to 0
    2436:	00 21 ef    	clr.w     0x100
        IFS0bits.T1IF = 0;      // lower Timer1 interrupt flag
    2438:	84 60 a9    	bclr.b    0x84, #0x3
        T1CONbits.TON = 1;      // turn on Timer1
    243a:	05 e1 a8    	bset.b    0x105, #0x7

0000243c <.L42>:
    }

    // Perform state tasks
    if (IFS0bits.T1IF == 1) {
    243c:	20 04 80    	mov.w     0x84, w0
    243e:	68 00 60    	and.w     w0, #0x8, w0
    2440:	00 00 e0    	cp0.w     w0
    2442:	0f 00 32    	bra       Z, 0x2462 <.L43>
        IFS0bits.T1IF = 0;      // lower Timer1 interrupt flag
    2444:	84 60 a9    	bclr.b    0x84, #0x3
        MODULE_LED_RED = !MODULE_LED_RED;           // toggle LED
    2446:	d0 16 80    	mov.w     0x2da, w0
    2448:	61 00 60    	and.w     w0, #0x1, w0
    244a:	00 f0 a7    	btsc.w    w0, #0xf
    244c:	00 00 ea    	neg.w     w0, w0
    244e:	00 00 e9    	dec.w     w0, w0
    2450:	4f 00 de    	lsr.w     w0, #0xf, w0
    2452:	00 40 78    	mov.b     w0, w0
    2454:	00 80 fb    	ze        w0, w0
    2456:	61 00 60    	and.w     w0, #0x1, w0
    2458:	d2 16 80    	mov.w     0x2da, w2
    245a:	e1 ff 2f    	mov.w     #0xfffe, w1
    245c:	81 00 61    	and.w     w2, w1, w1
    245e:	01 00 70    	ior.w     w0, w1, w0
    2460:	d0 16 88    	mov.w     w0, 0x2da

00002462 <.L43>:
    }

    // Check for state transitions

    // State Cleanup
    if (state != last_state) {
    2462:	c1 40 80    	mov.w     0x818, w1
    2464:	d0 40 80    	mov.w     0x81a, w0
    2466:	80 8f 50    	sub.w     w1, w0, [w15]
    2468:	02 00 32    	bra       Z, 0x246e <.L41>
        // cleanup state here
        MODULE_LED_RED = OFF;
    246a:	da 02 a9    	bclr.b    0x2da, #0x0
        T1CONbits.TON = 0;      // turn off Timer1
    246c:	05 e1 a9    	bclr.b    0x105, #0x7

0000246e <.L41>:
    }
}
    246e:	00 80 fa    	ulnk      
    2470:	00 00 06    	return    

00002472 <_updateDisplay>:

// ISRs ////////////////////////////////////////////////////////////////////////

void __attribute__((interrupt, auto_psv)) _CNInterrupt(void) {
    IFS1bits.CNIF = 0;      // lower INT3 interrupt flag
    TMR2 = 0;                 // reset debounce Timer2
    IFS0bits.T2IF = 0;        // lower Timer2 Interrupt flag
    T2CONbits.TON = 1;        // start Timer2
    LED1 = ON;
}

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    IFS0bits.T2IF = 0;      // lower Timer2 interrupt flag
    T2CONbits.TON = 0;      // turn off timer
    LED1 = OFF;

    // Sample pins and increment/decrement index of character displayed
    if(!D0) {i0 = (i0+1)% LETTERS_PER_COLUMN;} else
    if(!D1) {i0 = (i0 - 1);
        if(i0 > 5) {i0 = LETTERS_PER_COLUMN - 1;}
    }

    if(!D12) {i1 = (i1+1)% LETTERS_PER_COLUMN;} else
    if(!D13) {i1 = (i1 - 1);}
    if(i1 > 5) {i1 += LETTERS_PER_COLUMN;}

    if(!D4) {i2 = (i2+1)% LETTERS_PER_COLUMN;} else
    if(!D5) {i2 = (i2 - 1);}
    if(i2 > 5) {i2 += LETTERS_PER_COLUMN;}

    if(!D6) {i3 = (i3+1)% LETTERS_PER_COLUMN;} else
    if(!D7) {i3 = (i3 - 1);}
    if(i3 > 5) {i3 += LETTERS_PER_COLUMN;}

    if(!D8) {i4 = (i4+1)% LETTERS_PER_COLUMN;} else
    if(!D9) {i4 = (i4 - 1);}
    if(i4 > 5) {i4 += LETTERS_PER_COLUMN;}

    updateDisplay();
}


// HELPER FUNCTIONS ////////////////////////////////////////////////////////////

void updateDisplay(void) {
    2472:	00 00 fa    	lnk       #0x0
    dispptr[1] = set0[i0];
    2474:	00 40 80    	mov.w     0x800, w0
    2476:	00 00 e8    	inc.w     w0, w0
    2478:	22 40 80    	mov.w     0x804, w2
    247a:	01 81 20    	mov.w     #0x810, w1
    247c:	91 40 78    	mov.b     [w1], w1
    247e:	81 80 fb    	ze        w1, w1
    2480:	81 00 41    	add.w     w2, w1, w1
    2482:	91 40 78    	mov.b     [w1], w1
    2484:	01 48 78    	mov.b     w1, [w0]
    dispptr[4] = set1[i1];
    2486:	00 40 80    	mov.w     0x800, w0
    2488:	64 00 40    	add.w     w0, #0x4, w0
    248a:	32 40 80    	mov.w     0x806, w2
    248c:	11 81 20    	mov.w     #0x811, w1
    248e:	91 40 78    	mov.b     [w1], w1
    2490:	81 80 fb    	ze        w1, w1
    2492:	81 00 41    	add.w     w2, w1, w1
    2494:	91 40 78    	mov.b     [w1], w1
    2496:	01 48 78    	mov.b     w1, [w0]
    dispptr[7] = set2[i2];
    2498:	00 40 80    	mov.w     0x800, w0
    249a:	67 00 40    	add.w     w0, #0x7, w0
    249c:	42 40 80    	mov.w     0x808, w2
    249e:	21 81 20    	mov.w     #0x812, w1
    24a0:	91 40 78    	mov.b     [w1], w1
    24a2:	81 80 fb    	ze        w1, w1
    24a4:	81 00 41    	add.w     w2, w1, w1
    24a6:	91 40 78    	mov.b     [w1], w1
    24a8:	01 48 78    	mov.b     w1, [w0]
    dispptr[10] = set3[i3];
    24aa:	00 40 80    	mov.w     0x800, w0
    24ac:	6a 00 40    	add.w     w0, #0xa, w0
    24ae:	52 40 80    	mov.w     0x80a, w2
    24b0:	31 81 20    	mov.w     #0x813, w1
    24b2:	91 40 78    	mov.b     [w1], w1
    24b4:	81 80 fb    	ze        w1, w1
    24b6:	81 00 41    	add.w     w2, w1, w1
    24b8:	91 40 78    	mov.b     [w1], w1
    24ba:	01 48 78    	mov.b     w1, [w0]
    dispptr[13] = set4[i4];
    24bc:	00 40 80    	mov.w     0x800, w0
    24be:	6d 00 40    	add.w     w0, #0xd, w0
    24c0:	62 40 80    	mov.w     0x80c, w2
    24c2:	41 81 20    	mov.w     #0x814, w1
    24c4:	91 40 78    	mov.b     [w1], w1
    24c6:	81 80 fb    	ze        w1, w1
    24c8:	81 00 41    	add.w     w2, w1, w1
    24ca:	91 40 78    	mov.b     [w1], w1
    24cc:	01 48 78    	mov.b     w1, [w0]
}
    24ce:	00 80 fa    	ulnk      
    24d0:	00 00 06    	return    

000024d2 <_toggleSwitchSetup>:

void toggleSwitchSetup(void) {
    24d2:	00 00 fa    	lnk       #0x0
    // Initialize pins as inputs
    D0_DIR = 1; //D0 as input
    24d4:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = 1; //D1 as input
    24d6:	d8 82 a8    	bset.b    0x2d8, #0x4

    D4_DIR = 1; //D4 as input
    24d8:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = 1; //D5 as input
    24da:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = 1; //D6 as input
    24dc:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = 1; //D7 as input
    24de:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = 1; //D8 as input
    24e0:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = 1; //D9 as input
    24e2:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = 0; // D10 and D11 are module LEDs
    24e4:	d8 02 a9    	bclr.b    0x2d8, #0x0
    D11_DIR = 0;
    24e6:	d8 22 a9    	bclr.b    0x2d8, #0x1
    D12_DIR = 1;//D12 as input
    24e8:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = 1;//D13 as input
    24ea:	d8 62 a8    	bset.b    0x2d8, #0x3

    D0_PUE = 1; //D0 pullup enable
    24ec:	6f c0 a8    	bset.b    0x6f, #0x6
    D1_PUE = 1; //D1 pullup enable
    24ee:	6f a0 a8    	bset.b    0x6f, #0x5

    D4_PUE = 1; //D4 pullup enable
    24f0:	6f 80 a8    	bset.b    0x6f, #0x4
    D5_PUE = 1; //D5 pullup enable
    24f2:	76 e0 a8    	bset.b    0x76, #0x7
    D6_PUE = 1; //D6 pullup enable
    24f4:	74 a0 a8    	bset.b    0x74, #0x5
    D7_PUE = 1; //D7 pullup enable
    24f6:	75 00 a8    	bset.b    0x75, #0x0
    D8_PUE = 1; //D8 pullup enable
    24f8:	74 c0 a8    	bset.b    0x74, #0x6
    D9_PUE = 1; //D9 pullup enable
    24fa:	74 e0 a8    	bset.b    0x74, #0x7
    D12_PUE = 1;//D12 pullup enable
    24fc:	74 60 a8    	bset.b    0x74, #0x3
    D13_PUE = 1;//D13 pullup enable
    24fe:	74 80 a8    	bset.b    0x74, #0x4

    D0_CNEN = 1; //D0 interrupt enable
    2500:	63 c0 a8    	bset.b    0x63, #0x6
    D1_CNEN = 1; //D1 interrupt enable
    2502:	63 a0 a8    	bset.b    0x63, #0x5

    D4_CNEN = 1; //D4 interrupt enable
    2504:	63 80 a8    	bset.b    0x63, #0x4
    D5_CNEN = 1; //D5 interrupt enable
    2506:	6a e0 a8    	bset.b    0x6a, #0x7
    D6_CNEN = 1; //D6 interrupt enable
    2508:	68 a0 a8    	bset.b    0x68, #0x5
    D7_CNEN = 1; //D7 interrupt enable
    250a:	69 00 a8    	bset.b    0x69, #0x0
    D8_CNEN = 1; //D8 interrupt enable
    250c:	68 c0 a8    	bset.b    0x68, #0x6
    D9_CNEN = 1; //D9 interrupt enable
    250e:	68 e0 a8    	bset.b    0x68, #0x7
    D12_CNEN = 1;//D12 interrupt enable
    2510:	68 60 a8    	bset.b    0x68, #0x3
    D13_CNEN = 1;//D13 interrupt enable
    2512:	68 80 a8    	bset.b    0x68, #0x4

    IFS1bits.CNIF = 0; // lower CN interrupt flag
    2514:	86 60 a9    	bclr.b    0x86, #0x3
    IEC1bits.CNIE = 1; // Enable CN interrupt module
    2516:	96 60 a8    	bset.b    0x96, #0x3
}
    2518:	00 80 fa    	ulnk      
    251a:	00 00 06    	return    

0000251c <___lcd_i2c_write>:
#define DR_READ 0x0B

_LCD lcd[3];

void __lcd_i2c_write(_LCD *self, uint8_t ch) {
    251c:	04 00 fa    	lnk       #0x4
    251e:	00 0f 78    	mov.w     w0, [w14]
    2520:	21 47 98    	mov.b     w1, [w14+2]
    i2c_start();
    2522:	91 02 07    	rcall     0x2a46 <_i2c_start> <.LFB2> <.LFE1>
    send_i2c_byte(self->addr_write);
    2524:	1e 00 78    	mov.w     [w14], w0
    2526:	10 40 78    	mov.b     [w0], w0
    2528:	00 80 fb    	ze        w0, w0
    252a:	dc 02 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ch);
    252c:	2e 40 90    	mov.b     [w14+2], w0
    252e:	00 80 fb    	ze        w0, w0
    2530:	d9 02 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
    reset_i2c_bus();
    2532:	bd 02 07    	rcall     0x2aae <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2534:	00 80 fa    	ulnk      
    2536:	00 00 06    	return    

00002538 <___lcd_enablePulse>:

// Pulse enable pin high and then low to shift in 4 bits of data
void __lcd_enablePulse(_LCD *self) {
    2538:	02 00 fa    	lnk       #0x2
    253a:	00 0f 78    	mov.w     w0, [w14]
    self->io_write_val ^= ENABLE_TOGGLE;
    253c:	1e 00 78    	mov.w     [w14], w0
    253e:	20 40 90    	mov.b     [w0+2], w0
    2540:	80 40 78    	mov.b     w0, w1
    2542:	01 24 a2    	btg.b     w1, #0x2
    2544:	1e 00 78    	mov.w     [w14], w0
    2546:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    2548:	1e 00 78    	mov.w     [w14], w0
    254a:	20 40 90    	mov.b     [w0+2], w0
    254c:	80 40 78    	mov.b     w0, w1
    254e:	1e 00 78    	mov.w     [w14], w0
    2550:	e5 ff 07    	rcall     0x251c <___lcd_i2c_write> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
    delay_by_nop(100);
    2552:	40 06 20    	mov.w     #0x64, w0
    2554:	01 00 20    	mov.w     #0x0, w1
    2556:	57 02 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    self->io_write_val ^= ENABLE_TOGGLE;
    2558:	1e 00 78    	mov.w     [w14], w0
    255a:	20 40 90    	mov.b     [w0+2], w0
    255c:	80 40 78    	mov.b     w0, w1
    255e:	01 24 a2    	btg.b     w1, #0x2
    2560:	1e 00 78    	mov.w     [w14], w0
    2562:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    2564:	1e 00 78    	mov.w     [w14], w0
    2566:	20 40 90    	mov.b     [w0+2], w0
    2568:	80 40 78    	mov.b     w0, w1
    256a:	1e 00 78    	mov.w     [w14], w0
    256c:	d7 ff 07    	rcall     0x251c <___lcd_i2c_write> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
    // delay_by_nop(1000);
}
    256e:	00 80 fa    	ulnk      
    2570:	00 00 06    	return    

00002572 <___lcd_send>:

/* Send 8 bits of data as one 4-bit nibble, shifting in, second 4-bit nibble, and
shifting in */
void __lcd_send(_LCD *self, uint8_t value, uint8_t command) {
    2572:	06 00 fa    	lnk       #0x6
    2574:	10 07 98    	mov.w     w0, [w14+2]
    2576:	41 47 98    	mov.b     w1, [w14+4]
    2578:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t MS = value & 0x78;
    257a:	4e 40 90    	mov.b     [w14+4], w0
    257c:	81 c7 b3    	mov.b     #0x78, w1
    257e:	01 4f 60    	and.b     w0, w1, [w14]
    uint8_t LS = value << 4;
    2580:	ce 40 90    	mov.b     [w14+4], w1
    2582:	40 00 20    	mov.w     #0x4, w0
    2584:	00 08 dd    	sl.w      w1, w0, w0
    2586:	10 47 98    	mov.b     w0, [w14+1]
    self->io_write_val = command | MS;
    2588:	5e 40 90    	mov.b     [w14+5], w0
    258a:	9e 40 70    	ior.b     w0, [w14], w1
    258c:	1e 00 90    	mov.w     [w14+2], w0
    258e:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    2590:	1e 00 90    	mov.w     [w14+2], w0
    2592:	20 40 90    	mov.b     [w0+2], w0
    2594:	80 40 78    	mov.b     w0, w1
    2596:	1e 00 90    	mov.w     [w14+2], w0
    2598:	c1 ff 07    	rcall     0x251c <___lcd_i2c_write> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
    __lcd_enablePulse(self);
    259a:	1e 00 90    	mov.w     [w14+2], w0
    259c:	cd ff 07    	rcall     0x2538 <___lcd_enablePulse> <.LFB1> <.LFE0>
    self->io_write_val= command | LS;
    259e:	de 40 90    	mov.b     [w14+5], w1
    25a0:	1e 40 90    	mov.b     [w14+1], w0
    25a2:	80 c0 70    	ior.b     w1, w0, w1
    25a4:	1e 00 90    	mov.w     [w14+2], w0
    25a6:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    25a8:	1e 00 90    	mov.w     [w14+2], w0
    25aa:	20 40 90    	mov.b     [w0+2], w0
    25ac:	80 40 78    	mov.b     w0, w1
    25ae:	1e 00 90    	mov.w     [w14+2], w0
    25b0:	b5 ff 07    	rcall     0x251c <___lcd_i2c_write> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
    __lcd_enablePulse(self);
    25b2:	1e 00 90    	mov.w     [w14+2], w0
    25b4:	c1 ff 07    	rcall     0x2538 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    25b6:	00 80 fa    	ulnk      
    25b8:	00 00 06    	return    

000025ba <___lcd_send8>:

void __lcd_send8(_LCD *self, uint8_t value, uint8_t command) {
    25ba:	04 00 fa    	lnk       #0x4
    25bc:	00 0f 78    	mov.w     w0, [w14]
    25be:	21 47 98    	mov.b     w1, [w14+2]
    25c0:	32 47 98    	mov.b     w2, [w14+3]
    value = value << 4;
    25c2:	ae 40 90    	mov.b     [w14+2], w1
    25c4:	40 00 20    	mov.w     #0x4, w0
    25c6:	00 08 dd    	sl.w      w1, w0, w0
    25c8:	20 47 98    	mov.b     w0, [w14+2]
    self->io_write_val = command | value;
    25ca:	be 40 90    	mov.b     [w14+3], w1
    25cc:	2e 40 90    	mov.b     [w14+2], w0
    25ce:	80 c0 70    	ior.b     w1, w0, w1
    25d0:	1e 00 78    	mov.w     [w14], w0
    25d2:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    25d4:	1e 00 78    	mov.w     [w14], w0
    25d6:	20 40 90    	mov.b     [w0+2], w0
    25d8:	80 40 78    	mov.b     w0, w1
    25da:	1e 00 78    	mov.w     [w14], w0
    25dc:	9f ff 07    	rcall     0x251c <___lcd_i2c_write> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
    __lcd_enablePulse(self);
    25de:	1e 00 78    	mov.w     [w14], w0
    25e0:	ab ff 07    	rcall     0x2538 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    25e2:	00 80 fa    	ulnk      
    25e4:	00 00 06    	return    

000025e6 <_init_lcd>:

/* Some code from last year's Spaceteam project that sets up three LCD screens on
 one bus with corresponding IO extender types and hard-wired addresses */
void init_lcd(uint8_t initiator) {
    25e6:	02 00 fa    	lnk       #0x2
    25e8:	00 4f 78    	mov.b     w0, [w14]

    i2c_init(1e3);
    25ea:	80 3e 20    	mov.w     #0x3e8, w0
    25ec:	1f 02 07    	rcall     0x2a2c <_i2c_init> <.LFB1> <.LFE0>

    switch (initiator) {
    25ee:	1e 80 fb    	ze        [w14], w0
    25f0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25f2:	17 00 32    	bra       Z, 0x2622 <.L8>
    25f4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25f6:	03 00 3c    	bra       GT, 0x25fe <.L11>
    25f8:	00 00 e0    	cp0.w     w0
    25fa:	06 00 32    	bra       Z, 0x2608 <.L7>
    25fc:	39 00 37    	bra       0x2670 <.L5>

000025fe <.L11>:
    25fe:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2600:	1d 00 32    	bra       Z, 0x263c <.L9>
    2602:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2604:	28 00 32    	bra       Z, 0x2656 <.L10>
    2606:	34 00 37    	bra       0x2670 <.L5>

00002608 <.L7>:
        case 0: // Central
            lcd_init(&lcd[0], 0x05,'A');
    2608:	12 c4 b3    	mov.b     #0x41, w2
    260a:	51 c0 b3    	mov.b     #0x5, w1
    260c:	40 10 21    	mov.w     #0x1104, w0
    260e:	32 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x07,'A');
    2610:	12 c4 b3    	mov.b     #0x41, w2
    2612:	71 c0 b3    	mov.b     #0x7, w1
    2614:	90 10 21    	mov.w     #0x1109, w0
    2616:	2e 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'T');
    2618:	42 c5 b3    	mov.b     #0x54, w2
    261a:	61 c0 b3    	mov.b     #0x6, w1
    261c:	e0 10 21    	mov.w     #0x110e, w0
    261e:	2a 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            break;
    2620:	27 00 37    	bra       0x2670 <.L5>

00002622 <.L8>:
        case 1:
            lcd_init(&lcd[0], 0x07,'A');
    2622:	12 c4 b3    	mov.b     #0x41, w2
    2624:	71 c0 b3    	mov.b     #0x7, w1
    2626:	40 10 21    	mov.w     #0x1104, w0
    2628:	25 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'A');
    262a:	12 c4 b3    	mov.b     #0x41, w2
    262c:	61 c0 b3    	mov.b     #0x6, w1
    262e:	e0 10 21    	mov.w     #0x110e, w0
    2630:	21 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x05,'A');
    2632:	12 c4 b3    	mov.b     #0x41, w2
    2634:	51 c0 b3    	mov.b     #0x5, w1
    2636:	90 10 21    	mov.w     #0x1109, w0
    2638:	1d 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            break;
    263a:	1a 00 37    	bra       0x2670 <.L5>

0000263c <.L9>:
        case 2:
            lcd_init(&lcd[0], 0x07,'T');
    263c:	42 c5 b3    	mov.b     #0x54, w2
    263e:	71 c0 b3    	mov.b     #0x7, w1
    2640:	40 10 21    	mov.w     #0x1104, w0
    2642:	18 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    2644:	12 c4 b3    	mov.b     #0x41, w2
    2646:	61 c0 b3    	mov.b     #0x6, w1
    2648:	90 10 21    	mov.w     #0x1109, w0
    264a:	14 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    264c:	12 c4 b3    	mov.b     #0x41, w2
    264e:	51 c0 b3    	mov.b     #0x5, w1
    2650:	e0 10 21    	mov.w     #0x110e, w0
    2652:	10 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            break;
    2654:	0d 00 37    	bra       0x2670 <.L5>

00002656 <.L10>:
        case 3:
            lcd_init(&lcd[0], 0x07,'A');
    2656:	12 c4 b3    	mov.b     #0x41, w2
    2658:	71 c0 b3    	mov.b     #0x7, w1
    265a:	40 10 21    	mov.w     #0x1104, w0
    265c:	0b 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    265e:	12 c4 b3    	mov.b     #0x41, w2
    2660:	61 c0 b3    	mov.b     #0x6, w1
    2662:	90 10 21    	mov.w     #0x1109, w0
    2664:	07 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    2666:	12 c4 b3    	mov.b     #0x41, w2
    2668:	51 c0 b3    	mov.b     #0x5, w1
    266a:	e0 10 21    	mov.w     #0x110e, w0
    266c:	03 00 07    	rcall     0x2674 <_lcd_init> <.LFB5> <.LFE4>
            break;
    266e:	00 00 00    	nop       

00002670 <.L5>:
    }
}
    2670:	00 80 fa    	ulnk      
    2672:	00 00 06    	return    

00002674 <_lcd_init>:

// Initializes the LCD screen hardware as per pg. 46 of the datasheet
void lcd_init(_LCD *self, uint8_t addr, char vendor) {
    2674:	04 00 fa    	lnk       #0x4
    2676:	00 0f 78    	mov.w     w0, [w14]
    2678:	21 47 98    	mov.b     w1, [w14+2]
    267a:	32 47 98    	mov.b     w2, [w14+3]
    switch(vendor){
    267c:	3e 40 90    	mov.b     [w14+3], w0
    267e:	00 00 fb    	se        w0, w0
    2680:	11 04 20    	mov.w     #0x41, w1
    2682:	81 0f 50    	sub.w     w0, w1, [w15]
    2684:	10 00 32    	bra       Z, 0x26a6 <.L14>
    2686:	41 05 20    	mov.w     #0x54, w1
    2688:	81 0f 50    	sub.w     w0, w1, [w15]
    268a:	1a 00 3a    	bra       NZ, 0x26c0 <.L13>
        case 'T':// 0x40 == vendor prefix for PCF8574T
            self->addr_write = 0x40 + (addr << 1);
    268c:	2e 40 90    	mov.b     [w14+2], w0
    268e:	00 40 40    	add.b     w0, w0, w0
    2690:	02 c4 b3    	mov.b     #0x40, w2
    2692:	82 40 40    	add.b     w0, w2, w1
    2694:	1e 00 78    	mov.w     [w14], w0
    2696:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x40 + (addr << 1)+1;
    2698:	2e 40 90    	mov.b     [w14+2], w0
    269a:	00 40 40    	add.b     w0, w0, w0
    269c:	12 c4 b3    	mov.b     #0x41, w2
    269e:	82 40 40    	add.b     w0, w2, w1
    26a0:	1e 00 78    	mov.w     [w14], w0
    26a2:	11 40 98    	mov.b     w1, [w0+1]
            break;
    26a4:	0d 00 37    	bra       0x26c0 <.L13>

000026a6 <.L14>:
        case 'A':// 0x70 == vendor prefix PCF8574AT
            self->addr_write = 0x70 + (addr << 1);
    26a6:	2e 40 90    	mov.b     [w14+2], w0
    26a8:	00 40 40    	add.b     w0, w0, w0
    26aa:	02 c7 b3    	mov.b     #0x70, w2
    26ac:	82 40 40    	add.b     w0, w2, w1
    26ae:	1e 00 78    	mov.w     [w14], w0
    26b0:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x70 + (addr << 1)+1;
    26b2:	2e 40 90    	mov.b     [w14+2], w0
    26b4:	00 40 40    	add.b     w0, w0, w0
    26b6:	12 c7 b3    	mov.b     #0x71, w2
    26b8:	82 40 40    	add.b     w0, w2, w1
    26ba:	1e 00 78    	mov.w     [w14], w0
    26bc:	11 40 98    	mov.b     w1, [w0+1]
            break;
    26be:	00 00 00    	nop       

000026c0 <.L13>:
    }

    self->display_control = 0x00;
    26c0:	1e 00 78    	mov.w     [w14], w0
    26c2:	80 40 eb    	clr.b     w1
    26c4:	31 40 98    	mov.b     w1, [w0+3]
    self->display_mode = 0x00;
    26c6:	1e 00 78    	mov.w     [w14], w0
    26c8:	80 40 eb    	clr.b     w1
    26ca:	41 40 98    	mov.b     w1, [w0+4]

    self->io_write_val = 0x00;
    26cc:	1e 00 78    	mov.w     [w14], w0
    26ce:	80 40 eb    	clr.b     w1
    26d0:	21 40 98    	mov.b     w1, [w0+2]

    __lcd_i2c_write(self, 0x00);
    26d2:	80 40 eb    	clr.b     w1
    26d4:	1e 00 78    	mov.w     [w14], w0
    26d6:	22 ff 07    	rcall     0x251c <___lcd_i2c_write> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>

    delay_by_nop(15000);
    26d8:	80 a9 23    	mov.w     #0x3a98, w0
    26da:	01 00 20    	mov.w     #0x0, w1
    26dc:	94 01 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Some bullshit according to pg 46
    __lcd_send8(self, 0x03, INTERNAL_WRITE);
    26de:	82 c0 b3    	mov.b     #0x8, w2
    26e0:	31 c0 b3    	mov.b     #0x3, w1
    26e2:	1e 00 78    	mov.w     [w14], w0
    26e4:	6a ff 07    	rcall     0x25ba <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    26e6:	80 38 21    	mov.w     #0x1388, w0
    26e8:	01 00 20    	mov.w     #0x0, w1
    26ea:	8d 01 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    26ec:	82 c0 b3    	mov.b     #0x8, w2
    26ee:	31 c0 b3    	mov.b     #0x3, w1
    26f0:	1e 00 78    	mov.w     [w14], w0
    26f2:	63 ff 07    	rcall     0x25ba <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    26f4:	80 38 21    	mov.w     #0x1388, w0
    26f6:	01 00 20    	mov.w     #0x0, w1
    26f8:	86 01 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    26fa:	82 c0 b3    	mov.b     #0x8, w2
    26fc:	31 c0 b3    	mov.b     #0x3, w1
    26fe:	1e 00 78    	mov.w     [w14], w0
    2700:	5c ff 07    	rcall     0x25ba <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    2702:	80 38 21    	mov.w     #0x1388, w0
    2704:	01 00 20    	mov.w     #0x0, w1
    2706:	7f 01 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Put it in 4 bit mode
    __lcd_send8(self, 0x02, INTERNAL_WRITE);//0b00110000
    2708:	82 c0 b3    	mov.b     #0x8, w2
    270a:	21 c0 b3    	mov.b     #0x2, w1
    270c:	1e 00 78    	mov.w     [w14], w0
    270e:	55 ff 07    	rcall     0x25ba <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    2710:	80 38 21    	mov.w     #0x1388, w0
    2712:	01 00 20    	mov.w     #0x0, w1
    2714:	78 01 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x28, INTERNAL_WRITE); // Set rows and direction
    2716:	82 c0 b3    	mov.b     #0x8, w2
    2718:	81 c2 b3    	mov.b     #0x28, w1
    271a:	1e 00 78    	mov.w     [w14], w0
    271c:	2a ff 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    271e:	20 03 20    	mov.w     #0x32, w0
    2720:	01 00 20    	mov.w     #0x0, w1
    2722:	71 01 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x80, INTERNAL_WRITE); // Display off, cursor off
    2724:	82 c0 b3    	mov.b     #0x8, w2
    2726:	01 c8 b3    	mov.b     #0x80, w1
    2728:	1e 00 78    	mov.w     [w14], w0
    272a:	23 ff 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    272c:	20 03 20    	mov.w     #0x32, w0
    272e:	01 00 20    	mov.w     #0x0, w1
    2730:	6a 01 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x01, INTERNAL_WRITE); // Go to home position
    2732:	82 c0 b3    	mov.b     #0x8, w2
    2734:	11 c0 b3    	mov.b     #0x1, w1
    2736:	1e 00 78    	mov.w     [w14], w0
    2738:	1c ff 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    273a:	00 7d 20    	mov.w     #0x7d0, w0
    273c:	01 00 20    	mov.w     #0x0, w1
    273e:	63 01 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x06, INTERNAL_WRITE); // Set curson direction
    2740:	82 c0 b3    	mov.b     #0x8, w2
    2742:	61 c0 b3    	mov.b     #0x6, w1
    2744:	1e 00 78    	mov.w     [w14], w0
    2746:	15 ff 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(5000);
    2748:	80 38 21    	mov.w     #0x1388, w0
    274a:	01 00 20    	mov.w     #0x0, w1
    274c:	5c 01 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x0C, INTERNAL_WRITE); // Display on, cursor off
    274e:	82 c0 b3    	mov.b     #0x8, w2
    2750:	c1 c0 b3    	mov.b     #0xc, w1
    2752:	1e 00 78    	mov.w     [w14], w0
    2754:	0e ff 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
}
    2756:	00 80 fa    	ulnk      
    2758:	00 00 06    	return    

0000275a <_lcd_stop>:

// Stops lcd I2C transfer
void lcd_stop(_LCD *self) {
    275a:	02 00 fa    	lnk       #0x2
    275c:	00 0f 78    	mov.w     w0, [w14]
    reset_i2c_bus();
    275e:	a7 01 07    	rcall     0x2aae <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2760:	00 80 fa    	ulnk      
    2762:	00 00 06    	return    

00002764 <_lcd_display>:

// Sends show display command to LCD
void lcd_display(_LCD *self, uint8_t on) {
    2764:	04 00 fa    	lnk       #0x4
    2766:	00 0f 78    	mov.w     w0, [w14]
    2768:	21 47 98    	mov.b     w1, [w14+2]
    if (on) {
    276a:	2e 40 90    	mov.b     [w14+2], w0
    276c:	00 04 e0    	cp0.b     w0
    276e:	07 00 32    	bra       Z, 0x277e <.L18>
        self->display_control |= LCD_DISPLAYON;
    2770:	1e 00 78    	mov.w     [w14], w0
    2772:	30 40 90    	mov.b     [w0+3], w0
    2774:	80 40 78    	mov.b     w0, w1
    2776:	01 24 a0    	bset.b    w1, #0x2
    2778:	1e 00 78    	mov.w     [w14], w0
    277a:	31 40 98    	mov.b     w1, [w0+3]
    277c:	06 00 37    	bra       0x278a <.L19>

0000277e <.L18>:
    } else {
        self->display_control &= ~LCD_DISPLAYON;
    277e:	1e 00 78    	mov.w     [w14], w0
    2780:	b0 40 90    	mov.b     [w0+3], w1
    2782:	b0 cf b3    	mov.b     #0xfb, w0
    2784:	80 c0 60    	and.b     w1, w0, w1
    2786:	1e 00 78    	mov.w     [w14], w0
    2788:	31 40 98    	mov.b     w1, [w0+3]

0000278a <.L19>:
    }
    __lcd_send(self, self->display_control | LCD_DISPLAYCONTROL, INTERNAL_WRITE);
    278a:	1e 00 78    	mov.w     [w14], w0
    278c:	30 40 90    	mov.b     [w0+3], w0
    278e:	00 34 a0    	bset.b    w0, #0x3
    2790:	82 c0 b3    	mov.b     #0x8, w2
    2792:	80 40 78    	mov.b     w0, w1
    2794:	1e 00 78    	mov.w     [w14], w0
    2796:	ed fe 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
}
    2798:	00 80 fa    	ulnk      
    279a:	00 00 06    	return    

0000279c <_lcd_clear>:

// Sends clear display command to LCD
void lcd_clear(_LCD *self) {
    279c:	02 00 fa    	lnk       #0x2
    279e:	00 0f 78    	mov.w     w0, [w14]
    __lcd_send(self, LCD_CLEARDISPLAY, INTERNAL_WRITE);
    27a0:	82 c0 b3    	mov.b     #0x8, w2
    27a2:	11 c0 b3    	mov.b     #0x1, w1
    27a4:	1e 00 78    	mov.w     [w14], w0
    27a6:	e5 fe 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    27a8:	00 7d 20    	mov.w     #0x7d0, w0
    27aa:	01 00 20    	mov.w     #0x0, w1
    27ac:	2c 01 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    27ae:	00 80 fa    	ulnk      
    27b0:	00 00 06    	return    

000027b2 <_lcd_putc>:

// Sends single character to LCD display
void lcd_putc(_LCD *self, char c) {
    27b2:	04 00 fa    	lnk       #0x4
    27b4:	00 0f 78    	mov.w     w0, [w14]
    27b6:	21 47 98    	mov.b     w1, [w14+2]
    __lcd_send(self, c, DR_WRITE);
    27b8:	2e 40 90    	mov.b     [w14+2], w0
    27ba:	92 c0 b3    	mov.b     #0x9, w2
    27bc:	80 40 78    	mov.b     w0, w1
    27be:	1e 00 78    	mov.w     [w14], w0
    27c0:	d8 fe 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
    // delay_by_nop(1000);
}
    27c2:	00 80 fa    	ulnk      
    27c4:	00 00 06    	return    

000027c6 <_lcd_goto>:

// Sends commands to move LCD cursor to specified location
void lcd_goto(_LCD *self, uint8_t line, uint8_t col) { //x=col, y=row
    27c6:	06 00 fa    	lnk       #0x6
    27c8:	10 07 98    	mov.w     w0, [w14+2]
    27ca:	41 47 98    	mov.b     w1, [w14+4]
    27cc:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t address;
    switch(line) {
    27ce:	4e 40 90    	mov.b     [w14+4], w0
    27d0:	00 80 fb    	ze        w0, w0
    27d2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    27d4:	03 00 32    	bra       Z, 0x27dc <.L24>
    27d6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    27d8:	04 00 32    	bra       Z, 0x27e2 <.L25>
    27da:	06 00 37    	bra       0x27e8 <.L27>

000027dc <.L24>:
        case 1:
            address = 0x00;
    27dc:	00 40 eb    	clr.b     w0
    27de:	00 4f 78    	mov.b     w0, [w14]
            break;
    27e0:	06 00 37    	bra       0x27ee <.L26>

000027e2 <.L25>:
        case 2:
            address = 0x40;
    27e2:	00 c4 b3    	mov.b     #0x40, w0
    27e4:	00 4f 78    	mov.b     w0, [w14]
            break;
    27e6:	03 00 37    	bra       0x27ee <.L26>

000027e8 <.L27>:
        default:
            address = 0x00;
    27e8:	00 40 eb    	clr.b     w0
    27ea:	00 4f 78    	mov.b     w0, [w14]
            break;
    27ec:	00 00 00    	nop       

000027ee <.L26>:
    }

    address = address+col;
    27ee:	5e 40 90    	mov.b     [w14+5], w0
    27f0:	1e 4f 40    	add.b     w0, [w14], [w14]
    __lcd_send(self, LCD_SETDDRAMADDR | address, INTERNAL_WRITE);
    27f2:	1e 40 78    	mov.b     [w14], w0
    27f4:	00 74 a0    	bset.b    w0, #0x7
    27f6:	82 c0 b3    	mov.b     #0x8, w2
    27f8:	80 40 78    	mov.b     w0, w1
    27fa:	1e 00 90    	mov.w     [w14+2], w0
    27fc:	ba fe 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
}
    27fe:	00 80 fa    	ulnk      
    2800:	00 00 06    	return    

00002802 <_lcd_cursor>:


void lcd_cursor(_LCD *self, uint8_t cur) {
    2802:	04 00 fa    	lnk       #0x4
    2804:	00 0f 78    	mov.w     w0, [w14]
    2806:	21 47 98    	mov.b     w1, [w14+2]
    switch(cur) {
    2808:	2e 40 90    	mov.b     [w14+2], w0
    280a:	00 80 fb    	ze        w0, w0
    280c:	00 00 e0    	cp0.w     w0
    280e:	03 00 32    	bra       Z, 0x2816 <.L30>
    2810:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2812:	06 00 32    	bra       Z, 0x2820 <.L31>
        case 0:
            __lcd_send(self, 0x0C, INTERNAL_WRITE);
            break;
        case 1:
            __lcd_send(self, 0x0E, INTERNAL_WRITE);
            break;
        default:
            break;
    2814:	0a 00 37    	bra       0x282a <.L28>

00002816 <.L30>:
    2816:	82 c0 b3    	mov.b     #0x8, w2
    2818:	c1 c0 b3    	mov.b     #0xc, w1
    281a:	1e 00 78    	mov.w     [w14], w0
    281c:	aa fe 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
    281e:	05 00 37    	bra       0x282a <.L28>

00002820 <.L31>:
    2820:	82 c0 b3    	mov.b     #0x8, w2
    2822:	e1 c0 b3    	mov.b     #0xe, w1
    2824:	1e 00 78    	mov.w     [w14], w0
    2826:	a5 fe 07    	rcall     0x2572 <___lcd_send> <.LFB2> <.LFE1>
    2828:	00 00 00    	nop       

0000282a <.L28>:
    }
}
    282a:	00 80 fa    	ulnk      
    282c:	00 00 06    	return    

0000282e <_lcd_print1>:

void lcd_print1(_LCD *self, char *str) {
    282e:	04 00 fa    	lnk       #0x4
    2830:	00 0f 78    	mov.w     w0, [w14]
    2832:	11 07 98    	mov.w     w1, [w14+2]
    lcd_clear(self);
    2834:	1e 00 78    	mov.w     [w14], w0
    2836:	b2 ff 07    	rcall     0x279c <_lcd_clear> <.LFB8> <.LFE7>
    while (*str) {
    2838:	08 00 37    	bra       0x284a <.L34>

0000283a <.L35>:
        lcd_putc(self, *str);
    283a:	1e 00 90    	mov.w     [w14+2], w0
    283c:	10 40 78    	mov.b     [w0], w0
    283e:	80 40 78    	mov.b     w0, w1
    2840:	1e 00 78    	mov.w     [w14], w0
    2842:	b7 ff 07    	rcall     0x27b2 <_lcd_putc> <.LFB9> <.LFE8>
        str++;
    2844:	1e 00 90    	mov.w     [w14+2], w0
    2846:	00 00 e8    	inc.w     w0, w0
    2848:	10 07 98    	mov.w     w0, [w14+2]

0000284a <.L34>:
    284a:	1e 00 90    	mov.w     [w14+2], w0
    284c:	10 40 78    	mov.b     [w0], w0
    284e:	00 04 e0    	cp0.b     w0
    2850:	f4 ff 3a    	bra       NZ, 0x283a <.L35>
    }
}
    2852:	00 80 fa    	ulnk      
    2854:	00 00 06    	return    

00002856 <_lcd_print2>:

void lcd_print2(_LCD *self, char* line1, char* line2){
    2856:	42 00 fa    	lnk       #0x42
    2858:	60 1f 98    	mov.w     w0, [w14+60]
    285a:	71 1f 98    	mov.w     w1, [w14+62]
    285c:	02 27 98    	mov.w     w2, [w14+64]
    lcd_clear(self);
    285e:	6e 18 90    	mov.w     [w14+60], w0
    2860:	9d ff 07    	rcall     0x279c <_lcd_clear> <.LFB8> <.LFE7>
    char str[56] ="                                                        ";
    2862:	00 f5 29    	mov.w     #0x9f50, w0
    2864:	e4 00 47    	add.w     w14, #0x4, w1
    2866:	37 00 09    	repeat    #0x37
    2868:	b0 58 78    	mov.b     [w0++], [w1++]
    286a:	80 03 b1    	sub.w     #0x38, w0
    int i =0;
    286c:	00 00 eb    	clr.w     w0
    286e:	00 0f 78    	mov.w     w0, [w14]
    while (*line1){
    2870:	09 00 37    	bra       0x2884 <.L37>

00002872 <.L38>:
        str[i]=*line1;
    2872:	7e 18 90    	mov.w     [w14+62], w0
    2874:	90 40 78    	mov.b     [w0], w1
    2876:	64 00 47    	add.w     w14, #0x4, w0
    2878:	1e 00 40    	add.w     w0, [w14], w0
    287a:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    287c:	1e 0f e8    	inc.w     [w14], [w14]
        line1++;
    287e:	7e 18 90    	mov.w     [w14+62], w0
    2880:	00 00 e8    	inc.w     w0, w0
    2882:	70 1f 98    	mov.w     w0, [w14+62]

00002884 <.L37>:
    2884:	7e 18 90    	mov.w     [w14+62], w0
    2886:	10 40 78    	mov.b     [w0], w0
    2888:	00 04 e0    	cp0.b     w0
    288a:	f3 ff 3a    	bra       NZ, 0x2872 <.L38>
    }
    i =40;
    288c:	80 02 20    	mov.w     #0x28, w0
    288e:	00 0f 78    	mov.w     w0, [w14]
    while (*line2){
    2890:	09 00 37    	bra       0x28a4 <.L39>

00002892 <.L40>:
        str[i]=*line2;
    2892:	0e 20 90    	mov.w     [w14+64], w0
    2894:	90 40 78    	mov.b     [w0], w1
    2896:	64 00 47    	add.w     w14, #0x4, w0
    2898:	1e 00 40    	add.w     w0, [w14], w0
    289a:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    289c:	1e 0f e8    	inc.w     [w14], [w14]
        line2++;
    289e:	0e 20 90    	mov.w     [w14+64], w0
    28a0:	00 00 e8    	inc.w     w0, w0
    28a2:	00 27 98    	mov.w     w0, [w14+64]

000028a4 <.L39>:
    28a4:	0e 20 90    	mov.w     [w14+64], w0
    28a6:	10 40 78    	mov.b     [w0], w0
    28a8:	00 04 e0    	cp0.b     w0
    28aa:	f3 ff 3a    	bra       NZ, 0x2892 <.L40>
    }
    char* strptr=str;
    28ac:	64 00 47    	add.w     w14, #0x4, w0
    28ae:	10 07 98    	mov.w     w0, [w14+2]
    lcd_print1(self,strptr);
    28b0:	9e 00 90    	mov.w     [w14+2], w1
    28b2:	6e 18 90    	mov.w     [w14+60], w0
    28b4:	bc ff 07    	rcall     0x282e <_lcd_print1> <.LFB12> <.LFE11>
}
    28b6:	00 80 fa    	ulnk      
    28b8:	00 00 06    	return    

000028ba <_lcd_print>:

void lcd_print(_LCD *self, char* message) {
    28ba:	30 00 fa    	lnk       #0x30
    28bc:	60 17 98    	mov.w     w0, [w14+44]
    28be:	71 17 98    	mov.w     w1, [w14+46]
    char newstr1[17] = "                ";
    28c0:	90 f8 29    	mov.w     #0x9f89, w0
    28c2:	ea 00 47    	add.w     w14, #0xa, w1
    28c4:	10 00 09    	repeat    #0x10
    28c6:	b0 58 78    	mov.b     [w0++], [w1++]
    28c8:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr1= newstr1;
    28ca:	6a 0f 47    	add.w     w14, #0xa, [w14]
    char newstr2[17] = "                ";
    28cc:	90 f8 29    	mov.w     #0x9f89, w0
    28ce:	fb 00 47    	add.w     w14, #0x1b, w1
    28d0:	10 00 09    	repeat    #0x10
    28d2:	b0 58 78    	mov.b     [w0++], [w1++]
    28d4:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr2= newstr2;
    28d6:	7b 00 47    	add.w     w14, #0x1b, w0
    28d8:	10 07 98    	mov.w     w0, [w14+2]
    char* temp1 = newstrptr1;
    28da:	9e 00 78    	mov.w     [w14], w1
    28dc:	31 07 98    	mov.w     w1, [w14+6]
    char* temp2 = newstrptr2;
    28de:	9e 00 90    	mov.w     [w14+2], w1
    28e0:	41 07 98    	mov.w     w1, [w14+8]
    uint8_t i=0;
    28e2:	00 40 eb    	clr.b     w0
    28e4:	40 47 98    	mov.b     w0, [w14+4]
    while (i <17){
    28e6:	0f 00 37    	bra       0x2906 <.L42>

000028e8 <.L44>:
        if (*message){
    28e8:	7e 10 90    	mov.w     [w14+46], w0
    28ea:	10 40 78    	mov.b     [w0], w0
    28ec:	00 04 e0    	cp0.b     w0
    28ee:	08 00 32    	bra       Z, 0x2900 <.L43>
            *newstrptr1=*message;
    28f0:	7e 10 90    	mov.w     [w14+46], w0
    28f2:	90 40 78    	mov.b     [w0], w1
    28f4:	1e 00 78    	mov.w     [w14], w0
    28f6:	01 48 78    	mov.b     w1, [w0]
            message++;
    28f8:	7e 10 90    	mov.w     [w14+46], w0
    28fa:	00 00 e8    	inc.w     w0, w0
    28fc:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr1++;
    28fe:	1e 0f e8    	inc.w     [w14], [w14]

00002900 <.L43>:
        }
        i++;
    2900:	4e 40 90    	mov.b     [w14+4], w0
    2902:	00 40 e8    	inc.b     w0, w0
    2904:	40 47 98    	mov.b     w0, [w14+4]

00002906 <.L42>:
    2906:	4e 40 90    	mov.b     [w14+4], w0
    2908:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    290a:	ee ff 36    	bra       LEU, 0x28e8 <.L44>
    }
    i=0;
    290c:	00 40 eb    	clr.b     w0
    290e:	40 47 98    	mov.b     w0, [w14+4]
    message--; //SKETCHY!
    2910:	7e 10 90    	mov.w     [w14+46], w0
    2912:	00 00 e9    	dec.w     w0, w0
    2914:	70 17 98    	mov.w     w0, [w14+46]
    while (i <17){
    2916:	11 00 37    	bra       0x293a <.L45>

00002918 <.L47>:
        if (*message){
    2918:	7e 10 90    	mov.w     [w14+46], w0
    291a:	10 40 78    	mov.b     [w0], w0
    291c:	00 04 e0    	cp0.b     w0
    291e:	0a 00 32    	bra       Z, 0x2934 <.L46>
            *newstrptr2=*message;
    2920:	7e 10 90    	mov.w     [w14+46], w0
    2922:	90 40 78    	mov.b     [w0], w1
    2924:	1e 00 90    	mov.w     [w14+2], w0
    2926:	01 48 78    	mov.b     w1, [w0]
            message++;
    2928:	7e 10 90    	mov.w     [w14+46], w0
    292a:	00 00 e8    	inc.w     w0, w0
    292c:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr2++;
    292e:	1e 00 90    	mov.w     [w14+2], w0
    2930:	00 00 e8    	inc.w     w0, w0
    2932:	10 07 98    	mov.w     w0, [w14+2]

00002934 <.L46>:
        }
        i++;
    2934:	4e 40 90    	mov.b     [w14+4], w0
    2936:	00 40 e8    	inc.b     w0, w0
    2938:	40 47 98    	mov.b     w0, [w14+4]

0000293a <.L45>:
    293a:	4e 40 90    	mov.b     [w14+4], w0
    293c:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    293e:	ec ff 36    	bra       LEU, 0x2918 <.L47>
    }
    lcd_print2(self, temp1, temp2);
    2940:	4e 01 90    	mov.w     [w14+8], w2
    2942:	be 00 90    	mov.w     [w14+6], w1
    2944:	6e 10 90    	mov.w     [w14+44], w0
    2946:	87 ff 07    	rcall     0x2856 <_lcd_print2> <.LFB13> <.LFE12>
}
    2948:	00 80 fa    	ulnk      
    294a:	00 00 06    	return    

0000294c <_lcd_broadcast>:

void lcd_broadcast(char* message) {
    294c:	04 00 fa    	lnk       #0x4
    294e:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t i;
    for (i = 0; i < 3; i++)
    2950:	00 40 eb    	clr.b     w0
    2952:	00 4f 78    	mov.b     w0, [w14]
    2954:	08 00 37    	bra       0x2966 <.L49>

00002956 <.L50>:
        lcd_print(&lcd[i], message);
    2956:	1e 80 fb    	ze        [w14], w0
    2958:	65 00 b9    	mul.su    w0, #0x5, w0
    295a:	80 00 78    	mov.w     w0, w1
    295c:	40 10 21    	mov.w     #0x1104, w0
    295e:	00 80 40    	add.w     w1, w0, w0
    2960:	9e 00 90    	mov.w     [w14+2], w1
    2962:	ab ff 07    	rcall     0x28ba <_lcd_print> <.LFB14> <.LFE13>
    2964:	1e 4f e8    	inc.b     [w14], [w14]

00002966 <.L49>:
    2966:	1e 40 78    	mov.b     [w14], w0
    2968:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    296a:	f5 ff 36    	bra       LEU, 0x2956 <.L50>
}
    296c:	00 80 fa    	ulnk      
    296e:	00 00 06    	return    

00002970 <_itoa>:

char * itoa (int value, char *result, int base) {
    2970:	0e 00 fa    	lnk       #0xe
    2972:	40 07 98    	mov.w     w0, [w14+8]
    2974:	51 07 98    	mov.w     w1, [w14+10]
    2976:	62 07 98    	mov.w     w2, [w14+12]
    // check that the base if valid
    if (base < 2 || base > 36) { *result = '\0'; return result; }
    2978:	6e 00 90    	mov.w     [w14+12], w0
    297a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    297c:	04 00 34    	bra       LE, 0x2986 <.L52>
    297e:	ee 00 90    	mov.w     [w14+12], w1
    2980:	40 02 20    	mov.w     #0x24, w0
    2982:	80 8f 50    	sub.w     w1, w0, [w15]
    2984:	05 00 34    	bra       LE, 0x2990 <.L53>

00002986 <.L52>:
    2986:	5e 00 90    	mov.w     [w14+10], w0
    2988:	80 40 eb    	clr.b     w1
    298a:	01 48 78    	mov.b     w1, [w0]
    298c:	5e 00 90    	mov.w     [w14+10], w0
    298e:	39 00 37    	bra       0x2a02 <.L54>

00002990 <.L53>:

    char* ptr = result, *ptr1 = result, tmp_char;
    2990:	de 00 90    	mov.w     [w14+10], w1
    2992:	01 0f 78    	mov.w     w1, [w14]
    2994:	5e 01 90    	mov.w     [w14+10], w2
    2996:	12 07 98    	mov.w     w2, [w14+2]

00002998 <.L55>:
    int tmp_value;

    do {
        tmp_value = value;
    2998:	ce 00 90    	mov.w     [w14+8], w1
    299a:	21 07 98    	mov.w     w1, [w14+4]
        value /= base;
    299c:	ce 00 90    	mov.w     [w14+8], w1
    299e:	6e 00 90    	mov.w     [w14+12], w0
    29a0:	00 01 78    	mov.w     w0, w2
    29a2:	11 00 09    	repeat    #0x11
    29a4:	82 00 d8    	div.sw    w1, w2
    29a6:	40 07 98    	mov.w     w0, [w14+8]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
    29a8:	ce 00 90    	mov.w     [w14+8], w1
    29aa:	6e 00 90    	mov.w     [w14+12], w0
    29ac:	00 88 b9    	mul.ss    w1, w0, w0
    29ae:	00 00 78    	mov.w     w0, w0
    29b0:	ae 00 90    	mov.w     [w14+4], w1
    29b2:	00 80 50    	sub.w     w1, w0, w0
    29b4:	30 02 b0    	add.w     #0x23, w0
    29b6:	a1 f9 29    	mov.w     #0x9f9a, w1
    29b8:	e1 40 78    	mov.b     [w1+w0], w1
    29ba:	1e 00 78    	mov.w     [w14], w0
    29bc:	01 48 78    	mov.b     w1, [w0]
    29be:	1e 0f e8    	inc.w     [w14], [w14]
    } while ( value );
    29c0:	4e 00 90    	mov.w     [w14+8], w0
    29c2:	00 00 e0    	cp0.w     w0
    29c4:	e9 ff 3a    	bra       NZ, 0x2998 <.L55>

    // Apply negative sign
    if (tmp_value < 0) *ptr++ = '-';
    29c6:	2e 00 90    	mov.w     [w14+4], w0
    29c8:	00 00 e0    	cp0.w     w0
    29ca:	04 00 3d    	bra       GE, 0x29d4 <.L56>
    29cc:	1e 00 78    	mov.w     [w14], w0
    29ce:	d1 c2 b3    	mov.b     #0x2d, w1
    29d0:	01 48 78    	mov.b     w1, [w0]
    29d2:	1e 0f e8    	inc.w     [w14], [w14]

000029d4 <.L56>:
    *ptr-- = '\0';
    29d4:	1e 00 78    	mov.w     [w14], w0
    29d6:	80 40 eb    	clr.b     w1
    29d8:	01 48 78    	mov.b     w1, [w0]
    29da:	1e 0f e9    	dec.w     [w14], [w14]
    while (ptr1 < ptr) {
    29dc:	0e 00 37    	bra       0x29fa <.L57>

000029de <.L58>:
        tmp_char = *ptr;
    29de:	1e 00 78    	mov.w     [w14], w0
    29e0:	90 40 78    	mov.b     [w0], w1
    29e2:	61 47 98    	mov.b     w1, [w14+6]
        *ptr--= *ptr1;
    29e4:	1e 00 90    	mov.w     [w14+2], w0
    29e6:	90 40 78    	mov.b     [w0], w1
    29e8:	1e 00 78    	mov.w     [w14], w0
    29ea:	01 48 78    	mov.b     w1, [w0]
    29ec:	1e 0f e9    	dec.w     [w14], [w14]
        *ptr1++ = tmp_char;
    29ee:	1e 00 90    	mov.w     [w14+2], w0
    29f0:	6e 41 90    	mov.b     [w14+6], w2
    29f2:	02 48 78    	mov.b     w2, [w0]
    29f4:	1e 00 90    	mov.w     [w14+2], w0
    29f6:	00 00 e8    	inc.w     w0, w0
    29f8:	10 07 98    	mov.w     w0, [w14+2]

000029fa <.L57>:
    29fa:	1e 00 90    	mov.w     [w14+2], w0
    29fc:	9e 0f 50    	sub.w     w0, [w14], [w15]
    29fe:	ef ff 39    	bra       NC, 0x29de <.L58>
    }
    return result;
    2a00:	5e 00 90    	mov.w     [w14+10], w0

00002a02 <.L54>:
}
    2a02:	00 80 fa    	ulnk      
    2a04:	00 00 06    	return    

00002a06 <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    2a06:	08 00 fa    	lnk       #0x8
    2a08:	20 07 98    	mov.w     w0, [w14+4]
    2a0a:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    2a0c:	60 00 b8    	mul.uu    w0, #0x0, w0
    2a0e:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    2a10:	05 00 37    	bra       0x2a1c <.L2>

00002a12 <.L3>:
        __asm__("nop");
    2a12:	00 00 00    	nop       
        count +=1;
    2a14:	12 00 20    	mov.w     #0x1, w2
    2a16:	03 00 20    	mov.w     #0x0, w3
    2a18:	1e 0f 41    	add.w     w2, [w14], [w14]
    2a1a:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00002a1c <.L2>:
    2a1c:	2e 00 90    	mov.w     [w14+4], w0
    2a1e:	be 00 90    	mov.w     [w14+6], w1
    2a20:	1e 01 be    	mov.d     [w14], w2
    2a22:	80 0f 51    	sub.w     w2, w0, [w15]
    2a24:	81 8f 59    	subb.w    w3, w1, [w15]
    2a26:	f5 ff 39    	bra       NC, 0x2a12 <.L3>
    }
}
    2a28:	00 80 fa    	ulnk      
    2a2a:	00 00 06    	return    

00002a2c <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    2a2c:	04 00 fa    	lnk       #0x4
    2a2e:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    2a30:	1e 00 90    	mov.w     [w14+2], w0
    2a32:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    2a34:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    2a36:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    2a38:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    2a3a:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    2a3c:	80 13 80    	mov.w     0x270, w0
    2a3e:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    2a40:	36 00 07    	rcall     0x2aae <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2a42:	00 80 fa    	ulnk      
    2a44:	00 00 06    	return    

00002a46 <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    2a46:	02 00 fa    	lnk       #0x2
   int x = 0;
    2a48:	00 00 eb    	clr.w     w0
    2a4a:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    2a4c:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    2a4e:	a0 00 20    	mov.w     #0xa, w0
    2a50:	01 00 20    	mov.w     #0x0, w1
    2a52:	d9 ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    2a54:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    2a56:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    2a58:	07 00 37    	bra       0x2a68 <.L6>

00002a5a <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    2a5a:	10 00 20    	mov.w     #0x1, w0
    2a5c:	01 00 20    	mov.w     #0x0, w1
    2a5e:	d3 ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    2a60:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    2a62:	1e 00 78    	mov.w     [w14], w0
    2a64:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2a66:	05 00 3c    	bra       GT, 0x2a72 <.L9>

00002a68 <.L6>:
    2a68:	b0 13 80    	mov.w     0x276, w0
    2a6a:	61 00 60    	and.w     w0, #0x1, w0
    2a6c:	00 00 e0    	cp0.w     w0
    2a6e:	f5 ff 3a    	bra       NZ, 0x2a5a <.L8>
    2a70:	01 00 37    	bra       0x2a74 <.L7>

00002a72 <.L9>:
      break;
    2a72:	00 00 00    	nop       

00002a74 <.L7>:
   }
   delay_by_nop(2);
    2a74:	20 00 20    	mov.w     #0x2, w0
    2a76:	01 00 20    	mov.w     #0x0, w1
    2a78:	c6 ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2a7a:	00 80 fa    	ulnk      
    2a7c:	00 00 06    	return    

00002a7e <_i2c_restart>:

void i2c_restart(void){
    2a7e:	02 00 fa    	lnk       #0x2
   int x = 0;
    2a80:	00 00 eb    	clr.w     w0
    2a82:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    2a84:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    2a86:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    2a88:	07 00 37    	bra       0x2a98 <.L11>

00002a8a <.L13>:
      delay_by_nop(1);
    2a8a:	10 00 20    	mov.w     #0x1, w0
    2a8c:	01 00 20    	mov.w     #0x0, w1
    2a8e:	bb ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    2a90:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    2a92:	1e 00 78    	mov.w     [w14], w0
    2a94:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2a96:	05 00 3c    	bra       GT, 0x2aa2 <.L14>

00002a98 <.L11>:
    2a98:	b0 13 80    	mov.w     0x276, w0
    2a9a:	62 00 60    	and.w     w0, #0x2, w0
    2a9c:	00 00 e0    	cp0.w     w0
    2a9e:	f5 ff 3a    	bra       NZ, 0x2a8a <.L13>
    2aa0:	01 00 37    	bra       0x2aa4 <.L12>

00002aa2 <.L14>:
    2aa2:	00 00 00    	nop       

00002aa4 <.L12>:
   }
   delay_by_nop(2);
    2aa4:	20 00 20    	mov.w     #0x2, w0
    2aa6:	01 00 20    	mov.w     #0x0, w1
    2aa8:	ae ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2aaa:	00 80 fa    	ulnk      
    2aac:	00 00 06    	return    

00002aae <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    2aae:	02 00 fa    	lnk       #0x2
   int x = 0;
    2ab0:	00 00 eb    	clr.w     w0
    2ab2:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    2ab4:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    2ab6:	07 00 37    	bra       0x2ac6 <.L16>

00002ab8 <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    2ab8:	10 00 20    	mov.w     #0x1, w0
    2aba:	01 00 20    	mov.w     #0x0, w1
    2abc:	a4 ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    2abe:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    2ac0:	1e 00 78    	mov.w     [w14], w0
    2ac2:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2ac4:	05 00 3c    	bra       GT, 0x2ad0 <.L19>

00002ac6 <.L16>:
    2ac6:	b0 13 80    	mov.w     0x276, w0
    2ac8:	64 00 60    	and.w     w0, #0x4, w0
    2aca:	00 00 e0    	cp0.w     w0
    2acc:	f5 ff 3a    	bra       NZ, 0x2ab8 <.L18>
    2ace:	01 00 37    	bra       0x2ad2 <.L17>

00002ad0 <.L19>:
    2ad0:	00 00 00    	nop       

00002ad2 <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    2ad2:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    2ad4:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    2ad6:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    2ad8:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    2ada:	40 01 20    	mov.w     #0x14, w0
    2adc:	01 00 20    	mov.w     #0x0, w1
    2ade:	93 ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2ae0:	00 80 fa    	ulnk      
    2ae2:	00 00 06    	return    

00002ae4 <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    2ae4:	04 00 fa    	lnk       #0x4
    2ae6:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    2ae8:	00 00 00    	nop       

00002aea <.L21>:
    2aea:	c0 13 80    	mov.w     0x278, w0
    2aec:	61 00 60    	and.w     w0, #0x1, w0
    2aee:	00 00 e0    	cp0.w     w0
    2af0:	fc ff 3a    	bra       NZ, 0x2aea <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    2af2:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    2af4:	1e 00 90    	mov.w     [w14+2], w0
    2af6:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    2af8:	00 00 eb    	clr.w     w0
    2afa:	00 0f 78    	mov.w     w0, [w14]
    2afc:	09 00 37    	bra       0x2b10 <.L22>

00002afe <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    2afe:	c1 13 80    	mov.w     0x278, w1
    2b00:	00 00 24    	mov.w     #0x4000, w0
    2b02:	00 80 60    	and.w     w1, w0, w0
    2b04:	00 00 e0    	cp0.w     w0
    2b06:	09 00 32    	bra       Z, 0x2b1a <.L29>
      delay_by_nop(1); }
    2b08:	10 00 20    	mov.w     #0x1, w0
    2b0a:	01 00 20    	mov.w     #0x0, w1
    2b0c:	7c ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2b0e:	1e 0f e8    	inc.w     [w14], [w14]

00002b10 <.L22>:
    2b10:	30 1f 20    	mov.w     #0x1f3, w0
    2b12:	9e 00 78    	mov.w     [w14], w1
    2b14:	80 8f 50    	sub.w     w1, w0, [w15]
    2b16:	f3 ff 34    	bra       LE, 0x2afe <.L25>
    2b18:	01 00 37    	bra       0x2b1c <.L24>

00002b1a <.L29>:
    2b1a:	00 00 00    	nop       

00002b1c <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    2b1c:	40 1f 20    	mov.w     #0x1f4, w0
    2b1e:	9e 00 78    	mov.w     [w14], w1
    2b20:	80 8f 50    	sub.w     w1, w0, [w15]
    2b22:	02 00 3a    	bra       NZ, 0x2b28 <.L26>
        return(1); }    // return 1 to indicate failure
    2b24:	10 c0 b3    	mov.b     #0x1, w0
    2b26:	0c 00 37    	bra       0x2b40 <.L27>

00002b28 <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    2b28:	c1 13 80    	mov.w     0x278, w1
    2b2a:	00 00 28    	mov.w     #0x8000, w0
    2b2c:	00 80 60    	and.w     w1, w0, w0
    2b2e:	00 00 e0    	cp0.w     w0
    2b30:	03 00 32    	bra       Z, 0x2b38 <.L28>
      reset_i2c_bus();
    2b32:	bd ff 07    	rcall     0x2aae <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    2b34:	10 c0 b3    	mov.b     #0x1, w0
    2b36:	04 00 37    	bra       0x2b40 <.L27>

00002b38 <.L28>:

   delay_by_nop(2);
    2b38:	20 00 20    	mov.w     #0x2, w0
    2b3a:	01 00 20    	mov.w     #0x0, w1
    2b3c:	64 ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    2b3e:	00 40 eb    	clr.b     w0

00002b40 <.L27>:
}
    2b40:	00 80 fa    	ulnk      
    2b42:	00 00 06    	return    

00002b44 <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    2b44:	04 00 fa    	lnk       #0x4
   int i = 0;
    2b46:	00 00 eb    	clr.w     w0
    2b48:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2b4a:	00 40 eb    	clr.b     w0
    2b4c:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    2b4e:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    2b50:	05 00 37    	bra       0x2b5c <.L31>

00002b52 <.L33>:
      i ++;
    2b52:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    2b54:	00 7d 20    	mov.w     #0x7d0, w0
    2b56:	9e 00 78    	mov.w     [w14], w1
    2b58:	80 8f 50    	sub.w     w1, w0, [w15]
    2b5a:	05 00 3c    	bra       GT, 0x2b66 <.L34>

00002b5c <.L31>:
    2b5c:	c0 13 80    	mov.w     0x278, w0
    2b5e:	62 00 60    	and.w     w0, #0x2, w0
    2b60:	00 00 e0    	cp0.w     w0
    2b62:	f7 ff 32    	bra       Z, 0x2b52 <.L33>
    2b64:	01 00 37    	bra       0x2b68 <.L32>

00002b66 <.L34>:
    2b66:	00 00 00    	nop       

00002b68 <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    2b68:	80 13 80    	mov.w     0x270, w0
    2b6a:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    2b6c:	2e 40 90    	mov.b     [w14+2], w0
}
    2b6e:	00 80 fa    	ulnk      
    2b70:	00 00 06    	return    

00002b72 <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    2b72:	04 00 fa    	lnk       #0x4
   int i = 0;
    2b74:	00 00 eb    	clr.w     w0
    2b76:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2b78:	00 40 eb    	clr.b     w0
    2b7a:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    2b7c:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    2b7e:	05 00 37    	bra       0x2b8a <.L36>

00002b80 <.L38>:
      i++;
    2b80:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2b82:	00 7d 20    	mov.w     #0x7d0, w0
    2b84:	9e 00 78    	mov.w     [w14], w1
    2b86:	80 8f 50    	sub.w     w1, w0, [w15]
    2b88:	05 00 3c    	bra       GT, 0x2b94 <.L39>

00002b8a <.L36>:
    2b8a:	c0 13 80    	mov.w     0x278, w0
    2b8c:	62 00 60    	and.w     w0, #0x2, w0
    2b8e:	00 00 e0    	cp0.w     w0
    2b90:	f7 ff 32    	bra       Z, 0x2b80 <.L38>
    2b92:	01 00 37    	bra       0x2b96 <.L37>

00002b94 <.L39>:
    2b94:	00 00 00    	nop       

00002b96 <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    2b96:	80 13 80    	mov.w     0x270, w0
    2b98:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    2b9a:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    2b9c:	a0 00 20    	mov.w     #0xa, w0
    2b9e:	01 00 20    	mov.w     #0x0, w1
    2ba0:	32 ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2ba2:	2e 40 90    	mov.b     [w14+2], w0
}
    2ba4:	00 80 fa    	ulnk      
    2ba6:	00 00 06    	return    

00002ba8 <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    2ba8:	04 00 fa    	lnk       #0x4
   int i = 0;
    2baa:	00 00 eb    	clr.w     w0
    2bac:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2bae:	00 40 eb    	clr.b     w0
    2bb0:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    2bb2:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    2bb4:	05 00 37    	bra       0x2bc0 <.L41>

00002bb6 <.L43>:
      i++;
    2bb6:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2bb8:	00 7d 20    	mov.w     #0x7d0, w0
    2bba:	9e 00 78    	mov.w     [w14], w1
    2bbc:	80 8f 50    	sub.w     w1, w0, [w15]
    2bbe:	05 00 3c    	bra       GT, 0x2bca <.L44>

00002bc0 <.L41>:
    2bc0:	c0 13 80    	mov.w     0x278, w0
    2bc2:	62 00 60    	and.w     w0, #0x2, w0
    2bc4:	00 00 e0    	cp0.w     w0
    2bc6:	f7 ff 32    	bra       Z, 0x2bb6 <.L43>
    2bc8:	01 00 37    	bra       0x2bcc <.L42>

00002bca <.L44>:
    2bca:	00 00 00    	nop       

00002bcc <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    2bcc:	80 13 80    	mov.w     0x270, w0
    2bce:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    2bd0:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    2bd2:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    2bd4:	a0 00 20    	mov.w     #0xa, w0
    2bd6:	01 00 20    	mov.w     #0x0, w1
    2bd8:	16 ff 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2bda:	2e 40 90    	mov.b     [w14+2], w0
}
    2bdc:	00 80 fa    	ulnk      
    2bde:	00 00 06    	return    

00002be0 <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    2be0:	04 00 fa    	lnk       #0x4
    2be2:	00 4f 78    	mov.b     w0, [w14]
    2be4:	11 47 98    	mov.b     w1, [w14+1]
    2be6:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    2be8:	2e ff 07    	rcall     0x2a46 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    2bea:	1e 00 fb    	se        [w14], w0
    2bec:	80 00 78    	mov.w     w0, w1
    2bee:	e0 ff 2f    	mov.w     #0xfffe, w0
    2bf0:	00 80 60    	and.w     w1, w0, w0
    2bf2:	78 ff 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    2bf4:	1e 40 90    	mov.b     [w14+1], w0
    2bf6:	00 00 fb    	se        w0, w0
    2bf8:	75 ff 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    2bfa:	2e 40 90    	mov.b     [w14+2], w0
    2bfc:	00 00 fb    	se        w0, w0
    2bfe:	72 ff 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    2c00:	56 ff 07    	rcall     0x2aae <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2c02:	00 80 fa    	ulnk      
    2c04:	00 00 06    	return    

00002c06 <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    2c06:	04 00 fa    	lnk       #0x4
    2c08:	20 47 98    	mov.b     w0, [w14+2]
    2c0a:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    2c0c:	1c ff 07    	rcall     0x2a46 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    2c0e:	2e 40 90    	mov.b     [w14+2], w0
    2c10:	00 00 fb    	se        w0, w0
    2c12:	68 ff 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    2c14:	3e 40 90    	mov.b     [w14+3], w0
    2c16:	00 00 fb    	se        w0, w0
    2c18:	65 ff 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    2c1a:	a0 00 20    	mov.w     #0xa, w0
    2c1c:	01 00 20    	mov.w     #0x0, w1
    2c1e:	f3 fe 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   i2c_restart();
    2c20:	2e ff 07    	rcall     0x2a7e <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    2c22:	2e 40 90    	mov.b     [w14+2], w0
    2c24:	00 04 a0    	bset.b    w0, #0x0
    2c26:	00 00 fb    	se        w0, w0
    2c28:	5d ff 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    2c2a:	8c ff 07    	rcall     0x2b44 <_i2c_read> <.LFB6> <.LFE5>
    2c2c:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    2c2e:	3f ff 07    	rcall     0x2aae <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    2c30:	1e 40 78    	mov.b     [w14], w0
}
    2c32:	00 80 fa    	ulnk      
    2c34:	00 00 06    	return    

00002c36 <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is there, 0 means it is not there
unsigned char I2Cpoll(char addr){
    2c36:	04 00 fa    	lnk       #0x4
    2c38:	20 47 98    	mov.b     w0, [w14+2]
    unsigned char temp = 0;
    2c3a:	00 40 eb    	clr.b     w0
    2c3c:	00 4f 78    	mov.b     w0, [w14]
    i2c_start();
    2c3e:	03 ff 07    	rcall     0x2a46 <_i2c_start> <.LFB2> <.LFE1>
    temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    2c40:	2e 40 90    	mov.b     [w14+2], w0
    2c42:	00 00 fb    	se        w0, w0
    2c44:	80 00 78    	mov.w     w0, w1
    2c46:	e0 ff 2f    	mov.w     #0xfffe, w0
    2c48:	00 80 60    	and.w     w1, w0, w0
    2c4a:	4c ff 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
    2c4c:	00 4f 78    	mov.b     w0, [w14]
    reset_i2c_bus();
    2c4e:	2f ff 07    	rcall     0x2aae <_reset_i2c_bus> <.LFB4> <.LFE3>
    if (temp == 0) {
    2c50:	1e 40 78    	mov.b     [w14], w0
    2c52:	00 04 e0    	cp0.b     w0
    2c54:	02 00 3a    	bra       NZ, 0x2c5a <.L48>
        return 1; // We found it, no error
    2c56:	10 c0 b3    	mov.b     #0x1, w0
    2c58:	01 00 37    	bra       0x2c5c <.L49>

00002c5a <.L48>:
    } else return 0;
    2c5a:	00 40 eb    	clr.b     w0

00002c5c <.L49>:
}
    2c5c:	00 80 fa    	ulnk      
    2c5e:	00 00 06    	return    

00002c60 <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    2c60:	08 00 fa    	lnk       #0x8
    2c62:	20 47 98    	mov.b     w0, [w14+2]
    2c64:	21 07 98    	mov.w     w1, [w14+4]
    2c66:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    2c68:	00 40 eb    	clr.b     w0
    2c6a:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    2c6c:	ec fe 07    	rcall     0x2a46 <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    2c6e:	2e 40 90    	mov.b     [w14+2], w0
    2c70:	00 00 fb    	se        w0, w0
    2c72:	80 00 78    	mov.w     w0, w1
    2c74:	e0 ff 2f    	mov.w     #0xfffe, w0
    2c76:	00 80 60    	and.w     w1, w0, w0
    2c78:	35 ff 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
    2c7a:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    2c7c:	00 40 eb    	clr.b     w0
    2c7e:	10 47 98    	mov.b     w0, [w14+1]
    2c80:	0d 00 37    	bra       0x2c9c <.L51>

00002c82 <.L52>:
    err |= send_i2c_byte(dat[j]);
    2c82:	1e 40 90    	mov.b     [w14+1], w0
    2c84:	00 80 fb    	ze        w0, w0
    2c86:	ae 00 90    	mov.w     [w14+4], w1
    2c88:	00 80 40    	add.w     w1, w0, w0
    2c8a:	10 40 78    	mov.b     [w0], w0
    2c8c:	00 00 fb    	se        w0, w0
    2c8e:	2a ff 07    	rcall     0x2ae4 <_send_i2c_byte> <.LFB5> <.LFE4>
    2c90:	9e 40 78    	mov.b     [w14], w1
    2c92:	01 40 70    	ior.b     w0, w1, w0
    2c94:	00 4f 78    	mov.b     w0, [w14]
    2c96:	1e 40 90    	mov.b     [w14+1], w0
    2c98:	00 40 e8    	inc.b     w0, w0
    2c9a:	10 47 98    	mov.b     w0, [w14+1]

00002c9c <.L51>:
    2c9c:	9e 40 90    	mov.b     [w14+1], w1
    2c9e:	6e 40 90    	mov.b     [w14+6], w0
    2ca0:	80 cf 50    	sub.b     w1, w0, [w15]
    2ca2:	ef ff 39    	bra       NC, 0x2c82 <.L52>
  }
  reset_i2c_bus();
    2ca4:	04 ff 07    	rcall     0x2aae <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    2ca6:	1e 40 78    	mov.b     [w14], w0
}
    2ca8:	00 80 fa    	ulnk      
    2caa:	00 00 06    	return    

00002cac <_i2c2_init>:

////////////////////////////////////////////////////////////////////////////////
// I2C2 ////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// initiates I2C3 module to baud rate BRG
void i2c2_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    2cac:	04 00 fa    	lnk       #0x4
    2cae:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C2BRG = BRG;           // Sets freq to 100kHz
    2cb0:	1e 00 90    	mov.w     [w14+2], w0
    2cb2:	a0 10 88    	mov.w     w0, 0x214
   I2C2CONbits.I2CEN = 0;	// Disable I2C Mode
    2cb4:	17 e2 a9    	bclr.b    0x217, #0x7
   I2C2CONbits.DISSLW = 1;	// Disable slew rate control
    2cb6:	17 22 a8    	bset.b    0x217, #0x1
   IFS3bits.MI2C2IF = 0;	 // Clear Interrupt
    2cb8:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2CONbits.I2CEN = 1;	// Enable I2C Mode
    2cba:	17 e2 a8    	bset.b    0x217, #0x7
   temp = I2C2RCV;	 // read buffer to clear buffer full
    2cbc:	80 10 80    	mov.w     0x210, w0
    2cbe:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    2cc0:	f6 fe 07    	rcall     0x2aae <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2cc2:	00 80 fa    	ulnk      
    2cc4:	00 00 06    	return    

00002cc6 <_i2c2_start>:

//function iniates a start condition on bus
void i2c2_start(void){
    2cc6:	02 00 fa    	lnk       #0x2
   int x = 0;
    2cc8:	00 00 eb    	clr.w     w0
    2cca:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.ACKDT = 0;	//Reset any previous Ack
    2ccc:	16 a2 a9    	bclr.b    0x216, #0x5
   delay_by_nop(10);
    2cce:	a0 00 20    	mov.w     #0xa, w0
    2cd0:	01 00 20    	mov.w     #0x0, w1
    2cd2:	99 fe 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C2CONbits.SEN = 1;	//Initiate Start condition
    2cd4:	16 02 a8    	bset.b    0x216, #0x0
   __asm__("nop");
    2cd6:	00 00 00    	nop       

   while (I2C2CONbits.SEN){    //the hardware will automatically clear Start Bit
    2cd8:	07 00 37    	bra       0x2ce8 <.L55>

00002cda <.L57>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    2cda:	10 00 20    	mov.w     #0x1, w0
    2cdc:	01 00 20    	mov.w     #0x0, w1
    2cde:	93 fe 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    2ce0:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    2ce2:	1e 00 78    	mov.w     [w14], w0
    2ce4:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2ce6:	05 00 3c    	bra       GT, 0x2cf2 <.L58>

00002ce8 <.L55>:
    2ce8:	b0 10 80    	mov.w     0x216, w0
    2cea:	61 00 60    	and.w     w0, #0x1, w0
    2cec:	00 00 e0    	cp0.w     w0
    2cee:	f5 ff 3a    	bra       NZ, 0x2cda <.L57>
    2cf0:	01 00 37    	bra       0x2cf4 <.L56>

00002cf2 <.L58>:
      break;
    2cf2:	00 00 00    	nop       

00002cf4 <.L56>:
   }
   delay_by_nop(2);
    2cf4:	20 00 20    	mov.w     #0x2, w0
    2cf6:	01 00 20    	mov.w     #0x0, w1
    2cf8:	86 fe 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2cfa:	00 80 fa    	ulnk      
    2cfc:	00 00 06    	return    

00002cfe <_i2c2_restart>:

void i2c2_restart(void){
    2cfe:	02 00 fa    	lnk       #0x2
   int x = 0;
    2d00:	00 00 eb    	clr.w     w0
    2d02:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.RSEN = 1;	//Initiate restart condition
    2d04:	16 22 a8    	bset.b    0x216, #0x1
   __asm__("nop");
    2d06:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C2CONbits.RSEN){
    2d08:	07 00 37    	bra       0x2d18 <.L60>

00002d0a <.L62>:
      delay_by_nop(1);
    2d0a:	10 00 20    	mov.w     #0x1, w0
    2d0c:	01 00 20    	mov.w     #0x0, w1
    2d0e:	7b fe 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    2d10:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    2d12:	1e 00 78    	mov.w     [w14], w0
    2d14:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2d16:	05 00 3c    	bra       GT, 0x2d22 <.L63>

00002d18 <.L60>:
    2d18:	b0 10 80    	mov.w     0x216, w0
    2d1a:	62 00 60    	and.w     w0, #0x2, w0
    2d1c:	00 00 e0    	cp0.w     w0
    2d1e:	f5 ff 3a    	bra       NZ, 0x2d0a <.L62>
    2d20:	01 00 37    	bra       0x2d24 <.L61>

00002d22 <.L63>:
    2d22:	00 00 00    	nop       

00002d24 <.L61>:
   }
   delay_by_nop(2);
    2d24:	20 00 20    	mov.w     #0x2, w0
    2d26:	01 00 20    	mov.w     #0x0, w1
    2d28:	6e fe 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2d2a:	00 80 fa    	ulnk      
    2d2c:	00 00 06    	return    

00002d2e <_reset_i2c2_bus>:


//Resets the I2C bus to Idle
void reset_i2c2_bus(void){
    2d2e:	02 00 fa    	lnk       #0x2
   int x = 0;
    2d30:	00 00 eb    	clr.w     w0
    2d32:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.PEN = 1;     //initiate stop bit
    2d34:	16 42 a8    	bset.b    0x216, #0x2
   while (I2C2CONbits.PEN) {     //wait for hardware clear of stop bit
    2d36:	07 00 37    	bra       0x2d46 <.L65>

00002d38 <.L67>:
      // delay_by_nop(1);
      delay_by_nop(1);
    2d38:	10 00 20    	mov.w     #0x1, w0
    2d3a:	01 00 20    	mov.w     #0x0, w1
    2d3c:	64 fe 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    2d3e:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    2d40:	1e 00 78    	mov.w     [w14], w0
    2d42:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2d44:	05 00 3c    	bra       GT, 0x2d50 <.L68>

00002d46 <.L65>:
    2d46:	b0 10 80    	mov.w     0x216, w0
    2d48:	64 00 60    	and.w     w0, #0x4, w0
    2d4a:	00 00 e0    	cp0.w     w0
    2d4c:	f5 ff 3a    	bra       NZ, 0x2d38 <.L67>
    2d4e:	01 00 37    	bra       0x2d52 <.L66>

00002d50 <.L68>:
    2d50:	00 00 00    	nop       

00002d52 <.L66>:
   }

   I2C2CONbits.RCEN = 0;
    2d52:	16 62 a9    	bclr.b    0x216, #0x3
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    2d54:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2STATbits.IWCOL = 0;
    2d56:	18 e2 a9    	bclr.b    0x218, #0x7
   I2C2STATbits.BCL = 0;
    2d58:	19 42 a9    	bclr.b    0x219, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    2d5a:	40 01 20    	mov.w     #0x14, w0
    2d5c:	01 00 20    	mov.w     #0x0, w1
    2d5e:	53 fe 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2d60:	00 80 fa    	ulnk      
    2d62:	00 00 06    	return    

00002d64 <_send_i2c2_byte>:


//basic I2C byte send
char send_i2c2_byte(int data){
    2d64:	04 00 fa    	lnk       #0x4
    2d66:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C2STATbits.TBF) { }
    2d68:	00 00 00    	nop       

00002d6a <.L70>:
    2d6a:	c0 10 80    	mov.w     0x218, w0
    2d6c:	61 00 60    	and.w     w0, #0x1, w0
    2d6e:	00 00 e0    	cp0.w     w0
    2d70:	fc ff 3a    	bra       NZ, 0x2d6a <.L70>
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    2d72:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2TRN = data; // load the outgoing data byte
    2d74:	1e 00 90    	mov.w     [w14+2], w0
    2d76:	90 10 88    	mov.w     w0, 0x212

   for (i=0; i<500; i++){           // wait for transmission
    2d78:	00 00 eb    	clr.w     w0
    2d7a:	00 0f 78    	mov.w     w0, [w14]
    2d7c:	09 00 37    	bra       0x2d90 <.L71>

00002d7e <.L74>:
      if (!I2C2STATbits.TRSTAT) break; // if master transmit not in progress break
    2d7e:	c1 10 80    	mov.w     0x218, w1
    2d80:	00 00 24    	mov.w     #0x4000, w0
    2d82:	00 80 60    	and.w     w1, w0, w0
    2d84:	00 00 e0    	cp0.w     w0
    2d86:	09 00 32    	bra       Z, 0x2d9a <.L78>
      delay_by_nop(1); }
    2d88:	10 00 20    	mov.w     #0x1, w0
    2d8a:	01 00 20    	mov.w     #0x0, w1
    2d8c:	3c fe 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2d8e:	1e 0f e8    	inc.w     [w14], [w14]

00002d90 <.L71>:
    2d90:	30 1f 20    	mov.w     #0x1f3, w0
    2d92:	9e 00 78    	mov.w     [w14], w1
    2d94:	80 8f 50    	sub.w     w1, w0, [w15]
    2d96:	f3 ff 34    	bra       LE, 0x2d7e <.L74>
    2d98:	01 00 37    	bra       0x2d9c <.L73>

00002d9a <.L78>:
    2d9a:	00 00 00    	nop       

00002d9c <.L73>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    2d9c:	40 1f 20    	mov.w     #0x1f4, w0
    2d9e:	9e 00 78    	mov.w     [w14], w1
    2da0:	80 8f 50    	sub.w     w1, w0, [w15]
    2da2:	02 00 3a    	bra       NZ, 0x2da8 <.L75>
        return(1); }    // return 1 to indicate failure
    2da4:	10 c0 b3    	mov.b     #0x1, w0
    2da6:	0c 00 37    	bra       0x2dc0 <.L76>

00002da8 <.L75>:

   if (I2C2STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    2da8:	c1 10 80    	mov.w     0x218, w1
    2daa:	00 00 28    	mov.w     #0x8000, w0
    2dac:	00 80 60    	and.w     w1, w0, w0
    2dae:	00 00 e0    	cp0.w     w0
    2db0:	03 00 32    	bra       Z, 0x2db8 <.L77>
      reset_i2c2_bus();
    2db2:	bd ff 07    	rcall     0x2d2e <_reset_i2c2_bus> <.LFB16> <.LFE15>
      return(1); }            // abort if not found
    2db4:	10 c0 b3    	mov.b     #0x1, w0
    2db6:	04 00 37    	bra       0x2dc0 <.L76>

00002db8 <.L77>:

   delay_by_nop(2);
    2db8:	20 00 20    	mov.w     #0x2, w0
    2dba:	01 00 20    	mov.w     #0x0, w1
    2dbc:	24 fe 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    2dbe:	00 40 eb    	clr.b     w0

00002dc0 <.L76>:
}
    2dc0:	00 80 fa    	ulnk      
    2dc2:	00 00 06    	return    

00002dc4 <_i2c2_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c2_read(void){
    2dc4:	04 00 fa    	lnk       #0x4
   int i = 0;
    2dc6:	00 00 eb    	clr.w     w0
    2dc8:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2dca:	00 40 eb    	clr.b     w0
    2dcc:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    2dce:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {           //if no response, break
    2dd0:	05 00 37    	bra       0x2ddc <.L80>

00002dd2 <.L82>:
      i ++;
    2dd2:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    2dd4:	00 7d 20    	mov.w     #0x7d0, w0
    2dd6:	9e 00 78    	mov.w     [w14], w1
    2dd8:	80 8f 50    	sub.w     w1, w0, [w15]
    2dda:	05 00 3c    	bra       GT, 0x2de6 <.L83>

00002ddc <.L80>:
    2ddc:	c0 10 80    	mov.w     0x218, w0
    2dde:	62 00 60    	and.w     w0, #0x2, w0
    2de0:	00 00 e0    	cp0.w     w0
    2de2:	f7 ff 32    	bra       Z, 0x2dd2 <.L82>
    2de4:	01 00 37    	bra       0x2de8 <.L81>

00002de6 <.L83>:
    2de6:	00 00 00    	nop       

00002de8 <.L81>:

   data = I2C2RCV;       //get data from I2C2RCV register
    2de8:	80 10 80    	mov.w     0x210, w0
    2dea:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    2dec:	2e 40 90    	mov.b     [w14+2], w0
}
    2dee:	00 80 fa    	ulnk      
    2df0:	00 00 06    	return    

00002df2 <_i2c2_read_ack>:


//function reads data, returns the read data, with ack
char i2c2_read_ack(void){	//does not reset bus!!!
    2df2:	04 00 fa    	lnk       #0x4
   int i = 0;
    2df4:	00 00 eb    	clr.w     w0
    2df6:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2df8:	00 40 eb    	clr.b     w0
    2dfa:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    2dfc:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    2dfe:	05 00 37    	bra       0x2e0a <.L85>

00002e00 <.L87>:
      i++;
    2e00:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2e02:	00 7d 20    	mov.w     #0x7d0, w0
    2e04:	9e 00 78    	mov.w     [w14], w1
    2e06:	80 8f 50    	sub.w     w1, w0, [w15]
    2e08:	05 00 3c    	bra       GT, 0x2e14 <.L88>

00002e0a <.L85>:
    2e0a:	c0 10 80    	mov.w     0x218, w0
    2e0c:	62 00 60    	and.w     w0, #0x2, w0
    2e0e:	00 00 e0    	cp0.w     w0
    2e10:	f7 ff 32    	bra       Z, 0x2e00 <.L87>
    2e12:	01 00 37    	bra       0x2e16 <.L86>

00002e14 <.L88>:
    2e14:	00 00 00    	nop       

00002e16 <.L86>:

   data = I2C2RCV;               //get data from I2C2RCV register
    2e16:	80 10 80    	mov.w     0x210, w0
    2e18:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKEN = 1;        //start ACK generation
    2e1a:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    2e1c:	a0 00 20    	mov.w     #0xa, w0
    2e1e:	01 00 20    	mov.w     #0x0, w1
    2e20:	f2 fd 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2e22:	2e 40 90    	mov.b     [w14+2], w0
}
    2e24:	00 80 fa    	ulnk      
    2e26:	00 00 06    	return    

00002e28 <_i2c2_read_nack>:

char i2c2_read_nack(void){	//does not reset bus!!!
    2e28:	04 00 fa    	lnk       #0x4
   int i = 0;
    2e2a:	00 00 eb    	clr.w     w0
    2e2c:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2e2e:	00 40 eb    	clr.b     w0
    2e30:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    2e32:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    2e34:	05 00 37    	bra       0x2e40 <.L90>

00002e36 <.L92>:
      i++;
    2e36:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2e38:	00 7d 20    	mov.w     #0x7d0, w0
    2e3a:	9e 00 78    	mov.w     [w14], w1
    2e3c:	80 8f 50    	sub.w     w1, w0, [w15]
    2e3e:	05 00 3c    	bra       GT, 0x2e4a <.L93>

00002e40 <.L90>:
    2e40:	c0 10 80    	mov.w     0x218, w0
    2e42:	62 00 60    	and.w     w0, #0x2, w0
    2e44:	00 00 e0    	cp0.w     w0
    2e46:	f7 ff 32    	bra       Z, 0x2e36 <.L92>
    2e48:	01 00 37    	bra       0x2e4c <.L91>

00002e4a <.L93>:
    2e4a:	00 00 00    	nop       

00002e4c <.L91>:

   data = I2C2RCV;               //get data from I2C2RCV register
    2e4c:	80 10 80    	mov.w     0x210, w0
    2e4e:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    2e50:	16 a2 a8    	bset.b    0x216, #0x5
   I2C2CONbits.ACKEN = 1;        //start ack generation
    2e52:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    2e54:	a0 00 20    	mov.w     #0xa, w0
    2e56:	01 00 20    	mov.w     #0x0, w1
    2e58:	d6 fd 07    	rcall     0x2a06 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2e5a:	2e 40 90    	mov.b     [w14+2], w0
}
    2e5c:	00 80 fa    	ulnk      
    2e5e:	00 00 06    	return    

00002e60 <_I2C2poll>:

// function checks if device at addr i bus
// 1 means it is not there, 0 means it is not there
unsigned char I2C2poll(char addr){
    2e60:	04 00 fa    	lnk       #0x4
    2e62:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    2e64:	00 40 eb    	clr.b     w0
    2e66:	00 4f 78    	mov.b     w0, [w14]
   i2c2_start();
    2e68:	2e ff 07    	rcall     0x2cc6 <_i2c2_start> <.LFB14> <.LFE13>
   temp = send_i2c2_byte((addr) & (0xfffe)); // set /W bit
    2e6a:	2e 40 90    	mov.b     [w14+2], w0
    2e6c:	00 00 fb    	se        w0, w0
    2e6e:	80 00 78    	mov.w     w0, w1
    2e70:	e0 ff 2f    	mov.w     #0xfffe, w0
    2e72:	00 80 60    	and.w     w1, w0, w0
    2e74:	77 ff 07    	rcall     0x2d64 <_send_i2c2_byte> <.LFB17> <.LFE16>
    2e76:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c2_bus();
    2e78:	5a ff 07    	rcall     0x2d2e <_reset_i2c2_bus> <.LFB16> <.LFE15>
   if (temp == 0) {
    2e7a:	1e 40 78    	mov.b     [w14], w0
    2e7c:	00 04 e0    	cp0.b     w0
    2e7e:	02 00 3a    	bra       NZ, 0x2e84 <.L95>
       return 1; // We found it, no error
    2e80:	10 c0 b3    	mov.b     #0x1, w0
    2e82:	01 00 37    	bra       0x2e86 <.L96>

00002e84 <.L95>:
   } else return 0;
    2e84:	00 40 eb    	clr.b     w0

00002e86 <.L96>:
}
    2e86:	00 80 fa    	ulnk      
    2e88:	00 00 06    	return    

00002e8a <_init_ajuart>:
uint8_t U1TXbuffer[U1_TX_BUFFER_LENGTH];
uint8_t U1RXbuffer[U1_RX_BUFFER_LENGTH];
uint16_t U1_tx_threshold;

void init_ajuart(void) {
    2e8a:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure audio jack UART pins and connect them to UART1
    AJ_TX_DIR = OUT; AJ_TX = 1;
    2e8c:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    2e8e:	f2 c2 a8    	bset.b    0x2f2, #0x6
    AJ_RX_DIR = IN;
    2e90:	f0 e2 a8    	bset.b    0x2f0, #0x7

    RPOR = (uint8_t *)&RPOR0;
    2e92:	00 6c 20    	mov.w     #0x6c0, w0
    2e94:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    2e96:	00 68 20    	mov.w     #0x680, w0
    2e98:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    2e9a:	11 3a 80    	mov.w     0x742, w1
    2e9c:	f0 0b 20    	mov.w     #0xbf, w0
    2e9e:	00 81 60    	and.w     w1, w0, w2
    2ea0:	60 04 20    	mov.w     #0x46, w0
    2ea2:	71 05 20    	mov.w     #0x57, w1
    2ea4:	23 74 20    	mov.w     #0x742, w3
    2ea6:	80 49 78    	mov.b     w0, [w3]
    2ea8:	81 49 78    	mov.b     w1, [w3]
    2eaa:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = AJ_RX_RP;
    2eac:	1e 00 90    	mov.w     [w14+2], w0
    2eae:	40 02 b0    	add.w     #0x24, w0
    2eb0:	a1 c1 b3    	mov.b     #0x1a, w1
    2eb2:	01 48 78    	mov.b     w1, [w0]
    RPOR[AJ_TX_RP] = U1TX_RP;
    2eb4:	9e 00 78    	mov.w     [w14], w1
    2eb6:	75 80 40    	add.w     w1, #0x15, w0
    2eb8:	31 c0 b3    	mov.b     #0x3, w1
    2eba:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    2ebc:	10 3a 80    	mov.w     0x742, w0
    2ebe:	00 01 78    	mov.w     w0, w2
    2ec0:	02 60 a0    	bset.w    w2, #0x6
    2ec2:	60 04 20    	mov.w     #0x46, w0
    2ec4:	71 05 20    	mov.w     #0x57, w1
    2ec6:	23 74 20    	mov.w     #0x742, w3
    2ec8:	80 49 78    	mov.b     w0, [w3]
    2eca:	81 49 78    	mov.b     w1, [w3]
    2ecc:	82 49 78    	mov.b     w2, [w3]

    U1MODE = 0x0008;                // configure UART1 for transmission at
    2ece:	80 00 20    	mov.w     #0x8, w0
    2ed0:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;                 //   115,200 baud, no parity, 1 stop bit
    2ed2:	20 02 20    	mov.w     #0x22, w0
    2ed4:	40 11 88    	mov.w     w0, 0x228

    U1_tx_buffer.data = U1TXbuffer;
    2ed6:	20 84 20    	mov.w     #0x842, w0
    2ed8:	70 41 88    	mov.w     w0, 0x82e
    U1_tx_buffer.length = U1_TX_BUFFER_LENGTH;
    2eda:	00 40 20    	mov.w     #0x400, w0
    2edc:	80 41 88    	mov.w     w0, 0x830
    U1_tx_buffer.head = 0;
    2ede:	00 00 eb    	clr.w     w0
    2ee0:	90 41 88    	mov.w     w0, 0x832
    U1_tx_buffer.tail = 0;
    2ee2:	00 00 eb    	clr.w     w0
    2ee4:	a0 41 88    	mov.w     w0, 0x834
    U1_tx_buffer.count = 0;
    2ee6:	00 00 eb    	clr.w     w0
    2ee8:	b0 41 88    	mov.w     w0, 0x836
    U1_tx_threshold = 3 * U1_TX_BUFFER_LENGTH / 4;
    2eea:	00 30 20    	mov.w     #0x300, w0
    2eec:	60 41 88    	mov.w     w0, 0x82c

    U1_rx_buffer.data = U1RXbuffer;
    2eee:	20 c4 20    	mov.w     #0xc42, w0
    2ef0:	c0 41 88    	mov.w     w0, 0x838
    U1_rx_buffer.length = U1_RX_BUFFER_LENGTH;
    2ef2:	00 40 20    	mov.w     #0x400, w0
    2ef4:	d0 41 88    	mov.w     w0, 0x83a
    U1_rx_buffer.head = 0;
    2ef6:	00 00 eb    	clr.w     w0
    2ef8:	e0 41 88    	mov.w     w0, 0x83c
    U1_rx_buffer.tail = 0;
    2efa:	00 00 eb    	clr.w     w0
    2efc:	f0 41 88    	mov.w     w0, 0x83e
    U1_rx_buffer.count = 0;
    2efe:	00 00 eb    	clr.w     w0
    2f00:	00 42 88    	mov.w     w0, 0x840

    U1STAbits.UTXISEL1 = 0;         // set UART1 UTXISEL<1:0> = 01, TX interrupt
    2f02:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;         //   when all transmit operations are done
    2f04:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    2f06:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;            // enable UART1 TX interrupt
    2f08:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    2f0a:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;            // enable UART1 RX interrupt
    2f0c:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;          // enable UART1 module
    2f0e:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
    2f10:	23 42 a8    	bset.b    0x223, #0x2
}
    2f12:	00 80 fa    	ulnk      
    2f14:	00 00 06    	return    

00002f16 <_U1_in_waiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
        disable_interrupts();
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
        U1_tx_buffer.head++;
        if (U1_tx_buffer.head == U1_tx_buffer.length)
            U1_tx_buffer.head = 0;
        U1_tx_buffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    2f16:	00 00 fa    	lnk       #0x0
    return U1_rx_buffer.count;
    2f18:	00 42 80    	mov.w     0x840, w0
}
    2f1a:	00 80 fa    	ulnk      
    2f1c:	00 00 06    	return    

00002f1e <_U1_flush_tx_buffer>:

void U1_flush_tx_buffer(void) {
    2f1e:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    2f20:	11 11 80    	mov.w     0x222, w1
    2f22:	00 40 20    	mov.w     #0x400, w0
    2f24:	00 80 60    	and.w     w1, w0, w0
    2f26:	00 00 e0    	cp0.w     w0
    2f28:	01 00 3a    	bra       NZ, 0x2f2c <.L15>
        U1STAbits.UTXEN = 1;        //   enable it
    2f2a:	23 42 a8    	bset.b    0x223, #0x2

00002f2c <.L15>:
}
    2f2c:	00 80 fa    	ulnk      
    2f2e:	00 00 06    	return    

00002f30 <_U1_putc>:

void U1_putc(uint8_t ch) {
    2f30:	02 00 fa    	lnk       #0x2
    2f32:	00 4f 78    	mov.b     w0, [w14]
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}
    2f34:	00 00 00    	nop       

00002f36 <.L18>:
    2f36:	b1 41 80    	mov.w     0x836, w1
    2f38:	80 41 80    	mov.w     0x830, w0
    2f3a:	80 8f 50    	sub.w     w1, w0, [w15]
    2f3c:	fc ff 32    	bra       Z, 0x2f36 <.L18>

    disable_interrupts();
    2f3e:	ff 3f fc    	disi      #0x3fff
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    2f40:	71 41 80    	mov.w     0x82e, w1
    2f42:	a0 41 80    	mov.w     0x834, w0
    2f44:	00 80 40    	add.w     w1, w0, w0
    2f46:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    2f48:	a0 41 80    	mov.w     0x834, w0
    2f4a:	00 00 e8    	inc.w     w0, w0
    2f4c:	a0 41 88    	mov.w     w0, 0x834
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    2f4e:	a1 41 80    	mov.w     0x834, w1
    2f50:	80 41 80    	mov.w     0x830, w0
    2f52:	80 8f 50    	sub.w     w1, w0, [w15]
    2f54:	02 00 3a    	bra       NZ, 0x2f5a <.L19>
        U1_tx_buffer.tail = 0;
    2f56:	00 00 eb    	clr.w     w0
    2f58:	a0 41 88    	mov.w     w0, 0x834

00002f5a <.L19>:
    U1_tx_buffer.count++;
    2f5a:	b0 41 80    	mov.w     0x836, w0
    2f5c:	00 00 e8    	inc.w     w0, w0
    2f5e:	b0 41 88    	mov.w     w0, 0x836
    enable_interrupts();
    2f60:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    2f62:	b1 41 80    	mov.w     0x836, w1
    2f64:	60 41 80    	mov.w     0x82c, w0
    2f66:	80 8f 50    	sub.w     w1, w0, [w15]
    2f68:	01 00 39    	bra       NC, 0x2f6c <.L17>
        U1STAbits.UTXEN = 1;
    2f6a:	23 42 a8    	bset.b    0x223, #0x2

00002f6c <.L17>:
}
    2f6c:	00 80 fa    	ulnk      
    2f6e:	00 00 06    	return    

00002f70 <_U1_getc>:

uint8_t U1_getc(void) {
    2f70:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    2f72:	00 00 00    	nop       

00002f74 <.L22>:
    2f74:	00 42 80    	mov.w     0x840, w0
    2f76:	00 00 e0    	cp0.w     w0
    2f78:	fd ff 32    	bra       Z, 0x2f74 <.L22>

    disable_interrupts();
    2f7a:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    2f7c:	c1 41 80    	mov.w     0x838, w1
    2f7e:	e0 41 80    	mov.w     0x83c, w0
    2f80:	00 80 40    	add.w     w1, w0, w0
    2f82:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    2f84:	e0 41 80    	mov.w     0x83c, w0
    2f86:	00 00 e8    	inc.w     w0, w0
    2f88:	e0 41 88    	mov.w     w0, 0x83c
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    2f8a:	e1 41 80    	mov.w     0x83c, w1
    2f8c:	d0 41 80    	mov.w     0x83a, w0
    2f8e:	80 8f 50    	sub.w     w1, w0, [w15]
    2f90:	02 00 3a    	bra       NZ, 0x2f96 <.L23>
        U1_rx_buffer.head = 0;
    2f92:	00 00 eb    	clr.w     w0
    2f94:	e0 41 88    	mov.w     w0, 0x83c

00002f96 <.L23>:
    U1_rx_buffer.count--;
    2f96:	00 42 80    	mov.w     0x840, w0
    2f98:	00 00 e9    	dec.w     w0, w0
    2f9a:	00 42 88    	mov.w     w0, 0x840
    enable_interrupts();
    2f9c:	52 20 ef    	clr.w     0x52

    return ch;
    2f9e:	1e 40 78    	mov.b     [w14], w0
}
    2fa0:	00 80 fa    	ulnk      
    2fa2:	00 00 06    	return    

00002fa4 <_U1_puts>:

void U1_puts(uint8_t *str) {
    2fa4:	02 00 fa    	lnk       #0x2
    2fa6:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    2fa8:	04 00 37    	bra       0x2fb2 <.L25>

00002faa <.L26>:
        U1_putc(*str++);
    2faa:	1e 00 78    	mov.w     [w14], w0
    2fac:	10 40 78    	mov.b     [w0], w0
    2fae:	1e 0f e8    	inc.w     [w14], [w14]
    2fb0:	bf ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>

00002fb2 <.L25>:
    2fb2:	1e 00 78    	mov.w     [w14], w0
    2fb4:	10 40 78    	mov.b     [w0], w0
    2fb6:	00 04 e0    	cp0.b     w0
    2fb8:	f8 ff 3a    	bra       NZ, 0x2faa <.L26>
    U1_flush_tx_buffer();
    2fba:	b1 ff 07    	rcall     0x2f1e <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    2fbc:	00 80 fa    	ulnk      
    2fbe:	00 00 06    	return    

00002fc0 <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    2fc0:	04 00 fa    	lnk       #0x4
    2fc2:	00 0f 78    	mov.w     w0, [w14]
    2fc4:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    2fc6:	1e 00 90    	mov.w     [w14+2], w0
    2fc8:	00 00 e0    	cp0.w     w0
    2fca:	1a 00 32    	bra       Z, 0x3000 <.L32>
        return;

    if (len == 1) {
    2fcc:	1e 00 90    	mov.w     [w14+2], w0
    2fce:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2fd0:	04 00 3a    	bra       NZ, 0x2fda <.L30>
        *str = '\0';
    2fd2:	1e 00 78    	mov.w     [w14], w0
    2fd4:	80 40 eb    	clr.b     w1
    2fd6:	01 48 78    	mov.b     w1, [w0]
        return;
    2fd8:	14 00 37    	bra       0x3002 <.L27>

00002fda <.L30>:
    }

    while (1) {
        *str = U1_getc();
    2fda:	ca ff 07    	rcall     0x2f70 <_U1_getc> <.LFB6> <.LFE5>
    2fdc:	9e 00 78    	mov.w     [w14], w1
    2fde:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    2fe0:	1e 00 78    	mov.w     [w14], w0
    2fe2:	10 40 78    	mov.b     [w0], w0
    2fe4:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2fe6:	08 00 32    	bra       Z, 0x2ff8 <.L31>
    2fe8:	1e 00 90    	mov.w     [w14+2], w0
    2fea:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2fec:	05 00 32    	bra       Z, 0x2ff8 <.L31>
            break;
        str++;
    2fee:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    2ff0:	1e 00 90    	mov.w     [w14+2], w0
    2ff2:	00 00 e9    	dec.w     w0, w0
    2ff4:	10 07 98    	mov.w     w0, [w14+2]
    }
    2ff6:	f1 ff 37    	bra       0x2fda <.L30>

00002ff8 <.L31>:
    *str = '\0';
    2ff8:	1e 00 78    	mov.w     [w14], w0
    2ffa:	80 40 eb    	clr.b     w1
    2ffc:	01 48 78    	mov.b     w1, [w0]
    2ffe:	01 00 37    	bra       0x3002 <.L27>

00003000 <.L32>:
    3000:	00 00 00    	nop       

00003002 <.L27>:
}
    3002:	00 80 fa    	ulnk      
    3004:	00 00 06    	return    

00003006 <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    3006:	08 00 fa    	lnk       #0x8
    3008:	20 07 98    	mov.w     w0, [w14+4]
    300a:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    300c:	3e 00 90    	mov.w     [w14+6], w0
    300e:	00 00 e0    	cp0.w     w0
    3010:	6f 00 32    	bra       Z, 0x30f0 <.L46>
        return;

    if (len == 1) {
    3012:	3e 00 90    	mov.w     [w14+6], w0
    3014:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3016:	04 00 3a    	bra       NZ, 0x3020 <.L36>
        *str = '\0';
    3018:	2e 00 90    	mov.w     [w14+4], w0
    301a:	80 40 eb    	clr.b     w1
    301c:	01 48 78    	mov.b     w1, [w0]
        return;
    301e:	69 00 37    	bra       0x30f2 <.L33>

00003020 <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    3020:	b0 c1 b3    	mov.b     #0x1b, w0
    3022:	86 ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    3024:	70 c3 b3    	mov.b     #0x37, w0
    3026:	84 ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    3028:	7a ff 07    	rcall     0x2f1e <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    302a:	ae 00 90    	mov.w     [w14+4], w1
    302c:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    302e:	be 00 90    	mov.w     [w14+6], w1
    3030:	01 0f 78    	mov.w     w1, [w14]
    3032:	03 00 37    	bra       0x303a <.L45>

00003034 <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    3034:	00 00 00    	nop       
    3036:	01 00 37    	bra       0x303a <.L45>

00003038 <.L48>:
    3038:	00 00 00    	nop       

0000303a <.L45>:
    303a:	9a ff 07    	rcall     0x2f70 <_U1_getc> <.LFB6> <.LFE5>
    303c:	ae 00 90    	mov.w     [w14+4], w1
    303e:	80 48 78    	mov.b     w0, [w1]
    3040:	2e 00 90    	mov.w     [w14+4], w0
    3042:	10 40 78    	mov.b     [w0], w0
    3044:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3046:	09 00 3a    	bra       NZ, 0x305a <.L37>
    *str = '\0';                            // terminarte the string with null
    3048:	2e 00 90    	mov.w     [w14+4], w0
    304a:	80 40 eb    	clr.b     w1
    304c:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    304e:	a0 c0 b3    	mov.b     #0xa, w0
    3050:	6f ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    3052:	d0 c0 b3    	mov.b     #0xd, w0
    3054:	6d ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    3056:	63 ff 07    	rcall     0x2f1e <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3058:	4c 00 37    	bra       0x30f2 <.L33>

0000305a <.L37>:
    305a:	2e 00 90    	mov.w     [w14+4], w0
    305c:	10 40 78    	mov.b     [w0], w0
    305e:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    3060:	10 00 3a    	bra       NZ, 0x3082 <.L38>
    3062:	b0 c1 b3    	mov.b     #0x1b, w0
    3064:	65 ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    3066:	80 c3 b3    	mov.b     #0x38, w0
    3068:	63 ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    306a:	b0 c1 b3    	mov.b     #0x1b, w0
    306c:	61 ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    306e:	b0 c5 b3    	mov.b     #0x5b, w0
    3070:	5f ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    3072:	b0 c4 b3    	mov.b     #0x4b, w0
    3074:	5d ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    3076:	53 ff 07    	rcall     0x2f1e <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3078:	9e 00 90    	mov.w     [w14+2], w1
    307a:	21 07 98    	mov.w     w1, [w14+4]
    307c:	be 00 90    	mov.w     [w14+6], w1
    307e:	01 0f 78    	mov.w     w1, [w14]
    3080:	36 00 37    	bra       0x30ee <.L39>

00003082 <.L38>:
    3082:	2e 00 90    	mov.w     [w14+4], w0
    3084:	10 40 78    	mov.b     [w0], w0
    3086:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    3088:	05 00 32    	bra       Z, 0x3094 <.L40>
    308a:	2e 00 90    	mov.w     [w14+4], w0
    308c:	90 40 78    	mov.b     [w0], w1
    308e:	f0 c7 b3    	mov.b     #0x7f, w0
    3090:	80 cf 50    	sub.b     w1, w0, [w15]
    3092:	14 00 3a    	bra       NZ, 0x30bc <.L41>

00003094 <.L40>:
    3094:	ae 00 90    	mov.w     [w14+4], w1
    3096:	1e 00 90    	mov.w     [w14+2], w0
    3098:	80 8f 50    	sub.w     w1, w0, [w15]
    309a:	0c 00 36    	bra       LEU, 0x30b4 <.L42>
    309c:	80 c0 b3    	mov.b     #0x8, w0
    309e:	48 ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    30a0:	00 c2 b3    	mov.b     #0x20, w0
    30a2:	46 ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    30a4:	80 c0 b3    	mov.b     #0x8, w0
    30a6:	44 ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    30a8:	3a ff 07    	rcall     0x2f1e <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    30aa:	2e 00 90    	mov.w     [w14+4], w0
    30ac:	00 00 e9    	dec.w     w0, w0
    30ae:	20 07 98    	mov.w     w0, [w14+4]
    30b0:	1e 0f e8    	inc.w     [w14], [w14]
    30b2:	03 00 37    	bra       0x30ba <.L43>

000030b4 <.L42>:
    30b4:	70 c0 b3    	mov.b     #0x7, w0
    30b6:	3c ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    30b8:	32 ff 07    	rcall     0x2f1e <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

000030ba <.L43>:
    30ba:	19 00 37    	bra       0x30ee <.L39>

000030bc <.L41>:
    30bc:	1e 00 78    	mov.w     [w14], w0
    30be:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    30c0:	04 00 3a    	bra       NZ, 0x30ca <.L44>
    30c2:	70 c0 b3    	mov.b     #0x7, w0
    30c4:	35 ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    30c6:	2b ff 07    	rcall     0x2f1e <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    30c8:	12 00 37    	bra       0x30ee <.L39>

000030ca <.L44>:
    30ca:	2e 00 90    	mov.w     [w14+4], w0
    30cc:	10 40 78    	mov.b     [w0], w0
    30ce:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    30d0:	b1 ff 36    	bra       LEU, 0x3034 <.L47>
    30d2:	2e 00 90    	mov.w     [w14+4], w0
    30d4:	90 40 78    	mov.b     [w0], w1
    30d6:	e0 c7 b3    	mov.b     #0x7e, w0
    30d8:	80 cf 50    	sub.b     w1, w0, [w15]
    30da:	ae ff 3e    	bra       GTU, 0x3038 <.L48>
    30dc:	2e 00 90    	mov.w     [w14+4], w0
    30de:	10 40 78    	mov.b     [w0], w0
    30e0:	27 ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    30e2:	1d ff 07    	rcall     0x2f1e <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    30e4:	2e 00 90    	mov.w     [w14+4], w0
    30e6:	00 00 e8    	inc.w     w0, w0
    30e8:	20 07 98    	mov.w     w0, [w14+4]
    30ea:	1e 0f e9    	dec.w     [w14], [w14]
    30ec:	a6 ff 37    	bra       0x303a <.L45>

000030ee <.L39>:
    30ee:	a5 ff 37    	bra       0x303a <.L45>

000030f0 <.L46>:
    30f0:	00 00 00    	nop       

000030f2 <.L33>:
}
    30f2:	00 80 fa    	ulnk      
    30f4:	00 00 06    	return    

000030f6 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    30f6:	08 00 fa    	lnk       #0x8
    30f8:	10 07 98    	mov.w     w0, [w14+2]
    30fa:	21 07 98    	mov.w     w1, [w14+4]
    30fc:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    30fe:	1e 00 90    	mov.w     [w14+2], w0
    3100:	60 00 40    	add.w     w0, #0x0, w0
    3102:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3104:	10 00 3e    	bra       GTU, 0x3126 <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    3106:	00 00 eb    	clr.w     w0
    3108:	00 0f 78    	mov.w     w0, [w14]
    310a:	07 00 37    	bra       0x311a <.L52>

0000310c <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    310c:	2e 00 90    	mov.w     [w14+4], w0
    310e:	10 40 78    	mov.b     [w0], w0
    3110:	ae 00 90    	mov.w     [w14+4], w1
    3112:	81 00 e8    	inc.w     w1, w1
    3114:	21 07 98    	mov.w     w1, [w14+4]
    3116:	0c ff 07    	rcall     0x2f30 <_U1_putc> <.LFB5> <.LFE4>
    3118:	1e 0f e8    	inc.w     [w14], [w14]

0000311a <.L52>:
    311a:	9e 00 78    	mov.w     [w14], w1
    311c:	3e 00 90    	mov.w     [w14+6], w0
    311e:	80 8f 50    	sub.w     w1, w0, [w15]
    3120:	f5 ff 39    	bra       NC, 0x310c <.L53>
            U1_flush_tx_buffer();
    3122:	fd fe 07    	rcall     0x2f1e <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    3124:	01 00 37    	bra       0x3128 <.L54>

00003126 <.L55>:
        default:
            break;
    3126:	00 00 00    	nop       

00003128 <.L54>:
    }
    return len;
    3128:	3e 00 90    	mov.w     [w14+6], w0
}
    312a:	00 80 fa    	ulnk      
    312c:	00 00 06    	return    
Disassembly of section .isr.text:

0000312e <__CNInterrupt>:
    312e:	32 00 f8    	push      0x32
    3130:	34 00 f8    	push      0x34
    3132:	88 1f 78    	mov.w     w8, [w15++]
    3134:	18 00 20    	mov.w     #0x1, w8
    3136:	a8 01 88    	mov.w     w8, 0x34
    3138:	08 20 20    	mov.w     #0x200, w8
    313a:	98 01 88    	mov.w     w8, 0x32
    313c:	4f 04 78    	mov.w     [--w15], w8
    313e:	00 00 fa    	lnk       #0x0
    3140:	86 60 a9    	bclr.b    0x86, #0x3
    3142:	06 21 ef    	clr.w     0x106
    3144:	84 e0 a9    	bclr.b    0x84, #0x7
    3146:	11 e1 a8    	bset.b    0x111, #0x7
    3148:	dc e2 a8    	bset.b    0x2dc, #0x7
    314a:	00 80 fa    	ulnk      
    314c:	34 00 f9    	pop       0x34
    314e:	32 00 f9    	pop       0x32
    3150:	00 40 06    	retfie    

00003152 <__T2Interrupt>:
    3152:	36 00 f8    	push      0x36
    3154:	80 9f be    	mov.d     w0, [w15++]
    3156:	82 9f be    	mov.d     w2, [w15++]
    3158:	84 9f be    	mov.d     w4, [w15++]
    315a:	86 9f be    	mov.d     w6, [w15++]
    315c:	32 00 f8    	push      0x32
    315e:	34 00 f8    	push      0x34
    3160:	10 00 20    	mov.w     #0x1, w0
    3162:	a0 01 88    	mov.w     w0, 0x34
    3164:	00 20 20    	mov.w     #0x200, w0
    3166:	90 01 88    	mov.w     w0, 0x32
    3168:	00 00 fa    	lnk       #0x0
    316a:	84 e0 a9    	bclr.b    0x84, #0x7
    316c:	11 e1 a9    	bclr.b    0x111, #0x7
    316e:	dc e2 a9    	bclr.b    0x2dc, #0x7
    3170:	d1 16 80    	mov.w     0x2da, w1
    3172:	00 02 20    	mov.w     #0x20, w0
    3174:	00 80 60    	and.w     w1, w0, w0
    3176:	00 00 e0    	cp0.w     w0
    3178:	0b 00 3a    	bra       NZ, 0x3190 <.L47>
    317a:	10 c8 bf    	mov.b     0x810, WREG
    317c:	00 80 fb    	ze        w0, w0
    317e:	80 00 e8    	inc.w     w0, w1
    3180:	60 00 20    	mov.w     #0x6, w0
    3182:	00 01 78    	mov.w     w0, w2
    3184:	11 00 09    	repeat    #0x11
    3186:	82 00 d8    	div.sw    w1, w2
    3188:	80 00 fd    	exch      w0, w1
    318a:	00 40 78    	mov.b     w0, w0
    318c:	10 e8 b7    	mov.b     WREG, 0x810
    318e:	0c 00 37    	bra       0x31a8 <.L48>

00003190 <.L47>:
    3190:	d0 16 80    	mov.w     0x2da, w0
    3192:	70 00 60    	and.w     w0, #0x10, w0
    3194:	00 00 e0    	cp0.w     w0
    3196:	08 00 3a    	bra       NZ, 0x31a8 <.L48>
    3198:	10 c8 bf    	mov.b     0x810, WREG
    319a:	00 40 e9    	dec.b     w0, w0
    319c:	10 e8 b7    	mov.b     WREG, 0x810
    319e:	10 c8 bf    	mov.b     0x810, WREG
    31a0:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    31a2:	02 00 36    	bra       LEU, 0x31a8 <.L48>
    31a4:	50 c0 b3    	mov.b     #0x5, w0
    31a6:	10 e8 b7    	mov.b     WREG, 0x810

000031a8 <.L48>:
    31a8:	d0 16 80    	mov.w     0x2da, w0
    31aa:	64 00 60    	and.w     w0, #0x4, w0
    31ac:	00 00 e0    	cp0.w     w0
    31ae:	0b 00 3a    	bra       NZ, 0x31c6 <.L49>
    31b0:	11 c8 bf    	mov.b     0x811, WREG
    31b2:	00 80 fb    	ze        w0, w0
    31b4:	80 00 e8    	inc.w     w0, w1
    31b6:	60 00 20    	mov.w     #0x6, w0
    31b8:	00 01 78    	mov.w     w0, w2
    31ba:	11 00 09    	repeat    #0x11
    31bc:	82 00 d8    	div.sw    w1, w2
    31be:	80 00 fd    	exch      w0, w1
    31c0:	00 40 78    	mov.b     w0, w0
    31c2:	11 e8 b7    	mov.b     WREG, 0x811
    31c4:	07 00 37    	bra       0x31d4 <.L50>

000031c6 <.L49>:
    31c6:	d0 16 80    	mov.w     0x2da, w0
    31c8:	68 00 60    	and.w     w0, #0x8, w0
    31ca:	00 00 e0    	cp0.w     w0
    31cc:	03 00 3a    	bra       NZ, 0x31d4 <.L50>
    31ce:	11 c8 bf    	mov.b     0x811, WREG
    31d0:	00 40 e9    	dec.b     w0, w0
    31d2:	11 e8 b7    	mov.b     WREG, 0x811

000031d4 <.L50>:
    31d4:	11 c8 bf    	mov.b     0x811, WREG
    31d6:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    31d8:	03 00 36    	bra       LEU, 0x31e0 <.L51>
    31da:	11 c8 bf    	mov.b     0x811, WREG
    31dc:	66 40 40    	add.b     w0, #0x6, w0
    31de:	11 e8 b7    	mov.b     WREG, 0x811

000031e0 <.L51>:
    31e0:	51 16 80    	mov.w     0x2ca, w1
    31e2:	00 00 28    	mov.w     #0x8000, w0
    31e4:	00 80 60    	and.w     w1, w0, w0
    31e6:	00 00 e0    	cp0.w     w0
    31e8:	0b 00 3a    	bra       NZ, 0x3200 <.L52>
    31ea:	12 c8 bf    	mov.b     0x812, WREG
    31ec:	00 80 fb    	ze        w0, w0
    31ee:	80 00 e8    	inc.w     w0, w1
    31f0:	60 00 20    	mov.w     #0x6, w0
    31f2:	00 01 78    	mov.w     w0, w2
    31f4:	11 00 09    	repeat    #0x11
    31f6:	82 00 d8    	div.sw    w1, w2
    31f8:	80 00 fd    	exch      w0, w1
    31fa:	00 40 78    	mov.b     w0, w0
    31fc:	12 e8 b7    	mov.b     WREG, 0x812
    31fe:	07 00 37    	bra       0x320e <.L53>

00003200 <.L52>:
    3200:	50 17 80    	mov.w     0x2ea, w0
    3202:	68 00 60    	and.w     w0, #0x8, w0
    3204:	00 00 e0    	cp0.w     w0
    3206:	03 00 3a    	bra       NZ, 0x320e <.L53>
    3208:	12 c8 bf    	mov.b     0x812, WREG
    320a:	00 40 e9    	dec.b     w0, w0
    320c:	12 e8 b7    	mov.b     WREG, 0x812

0000320e <.L53>:
    320e:	12 c8 bf    	mov.b     0x812, WREG
    3210:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    3212:	03 00 36    	bra       LEU, 0x321a <.L54>
    3214:	12 c8 bf    	mov.b     0x812, WREG
    3216:	66 40 40    	add.b     w0, #0x6, w0
    3218:	12 e8 b7    	mov.b     WREG, 0x812

0000321a <.L54>:
    321a:	d1 16 80    	mov.w     0x2da, w1
    321c:	00 10 20    	mov.w     #0x100, w0
    321e:	00 80 60    	and.w     w1, w0, w0
    3220:	00 00 e0    	cp0.w     w0
    3222:	0b 00 3a    	bra       NZ, 0x323a <.L55>
    3224:	13 c8 bf    	mov.b     0x813, WREG
    3226:	00 80 fb    	ze        w0, w0
    3228:	80 00 e8    	inc.w     w0, w1
    322a:	60 00 20    	mov.w     #0x6, w0
    322c:	00 01 78    	mov.w     w0, w2
    322e:	11 00 09    	repeat    #0x11
    3230:	82 00 d8    	div.sw    w1, w2
    3232:	80 00 fd    	exch      w0, w1
    3234:	00 40 78    	mov.b     w0, w0
    3236:	13 e8 b7    	mov.b     WREG, 0x813
    3238:	08 00 37    	bra       0x324a <.L56>

0000323a <.L55>:
    323a:	d1 16 80    	mov.w     0x2da, w1
    323c:	00 80 20    	mov.w     #0x800, w0
    323e:	00 80 60    	and.w     w1, w0, w0
    3240:	00 00 e0    	cp0.w     w0
    3242:	03 00 3a    	bra       NZ, 0x324a <.L56>
    3244:	13 c8 bf    	mov.b     0x813, WREG
    3246:	00 40 e9    	dec.b     w0, w0
    3248:	13 e8 b7    	mov.b     WREG, 0x813

0000324a <.L56>:
    324a:	13 c8 bf    	mov.b     0x813, WREG
    324c:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    324e:	03 00 36    	bra       LEU, 0x3256 <.L57>
    3250:	13 c8 bf    	mov.b     0x813, WREG
    3252:	66 40 40    	add.b     w0, #0x6, w0
    3254:	13 e8 b7    	mov.b     WREG, 0x813

00003256 <.L57>:
    3256:	d1 16 80    	mov.w     0x2da, w1
    3258:	00 20 20    	mov.w     #0x200, w0
    325a:	00 80 60    	and.w     w1, w0, w0
    325c:	00 00 e0    	cp0.w     w0
    325e:	0b 00 3a    	bra       NZ, 0x3276 <.L58>
    3260:	14 c8 bf    	mov.b     0x814, WREG
    3262:	00 80 fb    	ze        w0, w0
    3264:	80 00 e8    	inc.w     w0, w1
    3266:	60 00 20    	mov.w     #0x6, w0
    3268:	00 01 78    	mov.w     w0, w2
    326a:	11 00 09    	repeat    #0x11
    326c:	82 00 d8    	div.sw    w1, w2
    326e:	80 00 fd    	exch      w0, w1
    3270:	00 40 78    	mov.b     w0, w0
    3272:	14 e8 b7    	mov.b     WREG, 0x814
    3274:	08 00 37    	bra       0x3286 <.L59>

00003276 <.L58>:
    3276:	d1 16 80    	mov.w     0x2da, w1
    3278:	00 40 20    	mov.w     #0x400, w0
    327a:	00 80 60    	and.w     w1, w0, w0
    327c:	00 00 e0    	cp0.w     w0
    327e:	03 00 3a    	bra       NZ, 0x3286 <.L59>
    3280:	14 c8 bf    	mov.b     0x814, WREG
    3282:	00 40 e9    	dec.b     w0, w0
    3284:	14 e8 b7    	mov.b     WREG, 0x814

00003286 <.L59>:
    3286:	14 c8 bf    	mov.b     0x814, WREG
    3288:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    328a:	03 00 36    	bra       LEU, 0x3292 <.L60>
    328c:	14 c8 bf    	mov.b     0x814, WREG
    328e:	66 40 40    	add.b     w0, #0x6, w0
    3290:	14 e8 b7    	mov.b     WREG, 0x814

00003292 <.L60>:
    3292:	ef f8 07    	rcall     0x2472 <_updateDisplay> <.LFB8> <.LFE5>
    3294:	00 80 fa    	ulnk      
    3296:	34 00 f9    	pop       0x34
    3298:	32 00 f9    	pop       0x32
    329a:	4f 03 be    	mov.d     [--w15], w6
    329c:	4f 02 be    	mov.d     [--w15], w4
    329e:	4f 01 be    	mov.d     [--w15], w2
    32a0:	4f 00 be    	mov.d     [--w15], w0
    32a2:	36 00 f9    	pop       0x36
    32a4:	00 40 06    	retfie    

000032a6 <__SI2C2Interrupt>:
    32a6:	80 9f be    	mov.d     w0, [w15++]
    32a8:	32 00 f8    	push      0x32
    32aa:	34 00 f8    	push      0x34
    32ac:	10 00 20    	mov.w     #0x1, w0
    32ae:	a0 01 88    	mov.w     w0, 0x34
    32b0:	00 20 20    	mov.w     #0x200, w0
    32b2:	90 01 88    	mov.w     w0, 0x32
    32b4:	02 00 fa    	lnk       #0x2
    32b6:	8a 20 a9    	bclr.b    0x8a, #0x1
    32b8:	50 41 80    	mov.w     0x82a, w0
    32ba:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32bc:	23 00 32    	bra       Z, 0x3304 <.L4>
    32be:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32c0:	03 00 39    	bra       NC, 0x32c8 <.L3>
    32c2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    32c4:	62 00 32    	bra       Z, 0x338a <.L5>
    32c6:	63 00 37    	bra       0x338e <.L19>

000032c8 <.L3>:
    32c8:	80 10 80    	mov.w     0x210, w0
    32ca:	00 4f 78    	mov.b     w0, [w14]
    32cc:	c0 10 80    	mov.w     0x218, w0
    32ce:	64 00 60    	and.w     w0, #0x4, w0
    32d0:	00 00 e0    	cp0.w     w0
    32d2:	15 00 32    	bra       Z, 0x32fe <.L6>
    32d4:	24 c8 bf    	mov.b     0x824, WREG
    32d6:	00 80 fb    	ze        w0, w0
    32d8:	47 00 dd    	sl.w      w0, #0x7, w0
    32da:	80 40 78    	mov.b     w0, w1
    32dc:	25 c8 bf    	mov.b     0x825, WREG
    32de:	00 80 fb    	ze        w0, w0
    32e0:	67 00 60    	and.w     w0, #0x7, w0
    32e2:	44 00 dd    	sl.w      w0, #0x4, w0
    32e4:	00 40 78    	mov.b     w0, w0
    32e6:	80 c0 70    	ior.b     w1, w0, w1
    32e8:	26 c8 bf    	mov.b     0x826, WREG
    32ea:	6f 40 60    	and.b     w0, #0xf, w0
    32ec:	00 c0 70    	ior.b     w1, w0, w0
    32ee:	1e e8 b7    	mov.b     WREG, 0x81e
    32f0:	1e c8 bf    	mov.b     0x81e, WREG
    32f2:	00 80 fb    	ze        w0, w0
    32f4:	90 10 88    	mov.w     w0, 0x212
    32f6:	17 82 a8    	bset.b    0x217, #0x4
    32f8:	20 00 20    	mov.w     #0x2, w0
    32fa:	50 41 88    	mov.w     w0, 0x82a
    32fc:	49 00 37    	bra       0x3390 <.L1>

000032fe <.L6>:
    32fe:	10 00 20    	mov.w     #0x1, w0
    3300:	50 41 88    	mov.w     w0, 0x82a
    3302:	46 00 37    	bra       0x3390 <.L1>

00003304 <.L4>:
    3304:	80 10 80    	mov.w     0x210, w0
    3306:	00 40 78    	mov.b     w0, w0
    3308:	1f e8 b7    	mov.b     WREG, 0x81f
    330a:	1f c8 bf    	mov.b     0x81f, WREG
    330c:	00 80 fb    	ze        w0, w0
    330e:	45 00 de    	lsr.w     w0, #0x5, w0
    3310:	00 40 78    	mov.b     w0, w0
    3312:	00 80 fb    	ze        w0, w0
    3314:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3316:	11 00 32    	bra       Z, 0x333a <.L13>
    3318:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    331a:	07 00 3c    	bra       GT, 0x332a <.L17>
    331c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    331e:	2b 00 32    	bra       Z, 0x3376 <.L11>
    3320:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3322:	0f 00 3c    	bra       GT, 0x3342 <.L12>
    3324:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3326:	24 00 32    	bra       Z, 0x3370 <.L10>
    3328:	29 00 37    	bra       0x337c <.L9>

0000332a <.L17>:
    332a:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    332c:	1a 00 32    	bra       Z, 0x3362 <.L15>
    332e:	11 10 20    	mov.w     #0x101, w1
    3330:	81 0f 50    	sub.w     w0, w1, [w15]
    3332:	28 00 32    	bra       Z, 0x3384 <.L20>
    3334:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    3336:	19 00 32    	bra       Z, 0x336a <.L14>
    3338:	21 00 37    	bra       0x337c <.L9>

0000333a <.L13>:
    333a:	1f c8 bf    	mov.b     0x81f, WREG
    333c:	7f 40 60    	and.b     w0, #0x1f, w0
    333e:	20 e8 b7    	mov.b     WREG, 0x820
    3340:	22 00 37    	bra       0x3386 <.L18>

00003342 <.L12>:
    3342:	1f c8 bf    	mov.b     0x81f, WREG
    3344:	00 80 fb    	ze        w0, w0
    3346:	64 00 60    	and.w     w0, #0x4, w0
    3348:	42 80 de    	asr.w     w0, #0x2, w0
    334a:	00 40 78    	mov.b     w0, w0
    334c:	21 e8 b7    	mov.b     WREG, 0x821
    334e:	1f c8 bf    	mov.b     0x81f, WREG
    3350:	00 80 fb    	ze        w0, w0
    3352:	62 00 60    	and.w     w0, #0x2, w0
    3354:	00 80 d1    	asr.w     w0, w0
    3356:	00 40 78    	mov.b     w0, w0
    3358:	22 e8 b7    	mov.b     WREG, 0x822
    335a:	1f c8 bf    	mov.b     0x81f, WREG
    335c:	61 40 60    	and.b     w0, #0x1, w0
    335e:	23 e8 b7    	mov.b     WREG, 0x823
    3360:	12 00 37    	bra       0x3386 <.L18>

00003362 <.L15>:
    3362:	1f c8 bf    	mov.b     0x81f, WREG
    3364:	7f 40 60    	and.b     w0, #0x1f, w0
    3366:	25 e8 b7    	mov.b     WREG, 0x825
    3368:	0e 00 37    	bra       0x3386 <.L18>

0000336a <.L14>:
    336a:	10 c0 b3    	mov.b     #0x1, w0
    336c:	27 e8 b7    	mov.b     WREG, 0x827
    336e:	0b 00 37    	bra       0x3386 <.L18>

00003370 <.L10>:
    3370:	10 c0 b3    	mov.b     #0x1, w0
    3372:	28 e8 b7    	mov.b     WREG, 0x828
    3374:	08 00 37    	bra       0x3386 <.L18>

00003376 <.L11>:
    3376:	10 c0 b3    	mov.b     #0x1, w0
    3378:	29 e8 b7    	mov.b     WREG, 0x829
    337a:	05 00 37    	bra       0x3386 <.L18>

0000337c <.L9>:
    337c:	26 c8 bf    	mov.b     0x826, WREG
    337e:	00 40 e8    	inc.b     w0, w0
    3380:	26 e8 b7    	mov.b     WREG, 0x826
    3382:	01 00 37    	bra       0x3386 <.L18>

00003384 <.L20>:
    3384:	00 00 00    	nop       

00003386 <.L18>:
    3386:	2a 28 ef    	clr.w     0x82a
    3388:	03 00 37    	bra       0x3390 <.L1>

0000338a <.L5>:
    338a:	2a 28 ef    	clr.w     0x82a
    338c:	01 00 37    	bra       0x3390 <.L1>

0000338e <.L19>:
    338e:	2a 28 ef    	clr.w     0x82a

00003390 <.L1>:
    3390:	00 80 fa    	ulnk      
    3392:	34 00 f9    	pop       0x34
    3394:	32 00 f9    	pop       0x32
    3396:	4f 00 be    	mov.d     [--w15], w0
    3398:	00 40 06    	retfie    

0000339a <__U1TXInterrupt>:
    339a:	80 9f be    	mov.d     w0, [w15++]
    339c:	32 00 f8    	push      0x32
    339e:	34 00 f8    	push      0x34
    33a0:	10 00 20    	mov.w     #0x1, w0
    33a2:	a0 01 88    	mov.w     w0, 0x34
    33a4:	00 20 20    	mov.w     #0x200, w0
    33a6:	90 01 88    	mov.w     w0, 0x32
    33a8:	02 00 fa    	lnk       #0x2
    33aa:	85 80 a9    	bclr.b    0x85, #0x4
    33ac:	b0 41 80    	mov.w     0x836, w0
    33ae:	00 00 e0    	cp0.w     w0
    33b0:	17 00 3a    	bra       NZ, 0x33e0 <.L8>
    33b2:	23 42 a9    	bclr.b    0x223, #0x2
    33b4:	16 00 37    	bra       0x33e2 <.L4>

000033b6 <.L7>:
    33b6:	ff 3f fc    	disi      #0x3fff
    33b8:	71 41 80    	mov.w     0x82e, w1
    33ba:	90 41 80    	mov.w     0x832, w0
    33bc:	00 80 40    	add.w     w1, w0, w0
    33be:	10 4f 78    	mov.b     [w0], [w14]
    33c0:	90 41 80    	mov.w     0x832, w0
    33c2:	00 00 e8    	inc.w     w0, w0
    33c4:	90 41 88    	mov.w     w0, 0x832
    33c6:	91 41 80    	mov.w     0x832, w1
    33c8:	80 41 80    	mov.w     0x830, w0
    33ca:	80 8f 50    	sub.w     w1, w0, [w15]
    33cc:	02 00 3a    	bra       NZ, 0x33d2 <.L5>
    33ce:	00 00 eb    	clr.w     w0
    33d0:	90 41 88    	mov.w     w0, 0x832

000033d2 <.L5>:
    33d2:	b0 41 80    	mov.w     0x836, w0
    33d4:	00 00 e9    	dec.w     w0, w0
    33d6:	b0 41 88    	mov.w     w0, 0x836
    33d8:	52 20 ef    	clr.w     0x52
    33da:	1e 80 fb    	ze        [w14], w0
    33dc:	20 11 88    	mov.w     w0, 0x224
    33de:	01 00 37    	bra       0x33e2 <.L4>

000033e0 <.L8>:
    33e0:	00 00 00    	nop       

000033e2 <.L4>:
    33e2:	11 11 80    	mov.w     0x222, w1
    33e4:	00 20 20    	mov.w     #0x200, w0
    33e6:	00 80 60    	and.w     w1, w0, w0
    33e8:	00 00 e0    	cp0.w     w0
    33ea:	03 00 3a    	bra       NZ, 0x33f2 <.L2>
    33ec:	b0 41 80    	mov.w     0x836, w0
    33ee:	00 00 e0    	cp0.w     w0
    33f0:	e2 ff 3a    	bra       NZ, 0x33b6 <.L7>

000033f2 <.L2>:
    33f2:	00 80 fa    	ulnk      
    33f4:	34 00 f9    	pop       0x34
    33f6:	32 00 f9    	pop       0x32
    33f8:	4f 00 be    	mov.d     [--w15], w0
    33fa:	00 40 06    	retfie    

000033fc <__U1RXInterrupt>:
    33fc:	80 9f be    	mov.d     w0, [w15++]
    33fe:	32 00 f8    	push      0x32
    3400:	34 00 f8    	push      0x34
    3402:	10 00 20    	mov.w     #0x1, w0
    3404:	a0 01 88    	mov.w     w0, 0x34
    3406:	00 20 20    	mov.w     #0x200, w0
    3408:	90 01 88    	mov.w     w0, 0x32
    340a:	00 00 fa    	lnk       #0x0
    340c:	85 60 a9    	bclr.b    0x85, #0x3
    340e:	14 00 37    	bra       0x3438 <.L10>

00003410 <.L13>:
    3410:	ff 3f fc    	disi      #0x3fff
    3412:	c1 41 80    	mov.w     0x838, w1
    3414:	f0 41 80    	mov.w     0x83e, w0
    3416:	00 80 40    	add.w     w1, w0, w0
    3418:	31 11 80    	mov.w     0x226, w1
    341a:	81 40 78    	mov.b     w1, w1
    341c:	01 48 78    	mov.b     w1, [w0]
    341e:	f0 41 80    	mov.w     0x83e, w0
    3420:	00 00 e8    	inc.w     w0, w0
    3422:	f0 41 88    	mov.w     w0, 0x83e
    3424:	f1 41 80    	mov.w     0x83e, w1
    3426:	d0 41 80    	mov.w     0x83a, w0
    3428:	80 8f 50    	sub.w     w1, w0, [w15]
    342a:	02 00 3a    	bra       NZ, 0x3430 <.L11>
    342c:	00 00 eb    	clr.w     w0
    342e:	f0 41 88    	mov.w     w0, 0x83e

00003430 <.L11>:
    3430:	00 42 80    	mov.w     0x840, w0
    3432:	00 00 e8    	inc.w     w0, w0
    3434:	00 42 88    	mov.w     w0, 0x840
    3436:	52 20 ef    	clr.w     0x52

00003438 <.L10>:
    3438:	10 11 80    	mov.w     0x222, w0
    343a:	61 00 60    	and.w     w0, #0x1, w0
    343c:	00 00 e0    	cp0.w     w0
    343e:	04 00 32    	bra       Z, 0x3448 <.L9>
    3440:	01 42 80    	mov.w     0x840, w1
    3442:	d0 41 80    	mov.w     0x83a, w0
    3444:	80 8f 50    	sub.w     w1, w0, [w15]
    3446:	e4 ff 3a    	bra       NZ, 0x3410 <.L13>

00003448 <.L9>:
    3448:	00 80 fa    	ulnk      
    344a:	34 00 f9    	pop       0x34
    344c:	32 00 f9    	pop       0x32
    344e:	4f 00 be    	mov.d     [--w15], w0
    3450:	00 40 06    	retfie    
Disassembly of section .text:

00003452 <_init_elecanisms>:
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}
    3452:	00 00 fa    	lnk       #0x0
    3454:	00 10 20    	mov.w     #0x100, w0
    3456:	20 3a 88    	mov.w     w0, 0x744
    3458:	d8 a2 a8    	bset.b    0x2d8, #0x5
    345a:	d8 82 a8    	bset.b    0x2d8, #0x4
    345c:	e8 82 a8    	bset.b    0x2e8, #0x4
    345e:	e8 a2 a8    	bset.b    0x2e8, #0x5
    3460:	c9 e2 a8    	bset.b    0x2c9, #0x7
    3462:	e8 62 a8    	bset.b    0x2e8, #0x3
    3464:	d9 02 a8    	bset.b    0x2d9, #0x0
    3466:	d9 62 a8    	bset.b    0x2d9, #0x3
    3468:	d9 22 a8    	bset.b    0x2d9, #0x1
    346a:	d9 42 a8    	bset.b    0x2d9, #0x2
    346c:	d8 02 a8    	bset.b    0x2d8, #0x0
    346e:	d8 22 a8    	bset.b    0x2d8, #0x1
    3470:	d8 42 a8    	bset.b    0x2d8, #0x2
    3472:	d8 62 a8    	bset.b    0x2d8, #0x3
    3474:	c8 a2 a8    	bset.b    0x2c8, #0x5
    3476:	c8 82 a8    	bset.b    0x2c8, #0x4
    3478:	c8 62 a8    	bset.b    0x2c8, #0x3
    347a:	c8 42 a8    	bset.b    0x2c8, #0x2
    347c:	c8 22 a8    	bset.b    0x2c8, #0x1
    347e:	c8 02 a8    	bset.b    0x2c8, #0x0
    3480:	f0 03 20    	mov.w     #0x3f, w0
    3482:	10 27 88    	mov.w     w0, 0x4e2
    3484:	e4 24 ef    	clr.w     0x4e4
    3486:	e6 24 ef    	clr.w     0x4e6
    3488:	ea 24 ef    	clr.w     0x4ea
    348a:	ec 24 ef    	clr.w     0x4ec
    348c:	00 0e 20    	mov.w     #0xe0, w0
    348e:	00 19 88    	mov.w     w0, 0x320
    3490:	22 23 ef    	clr.w     0x322
    3492:	00 c4 20    	mov.w     #0xc40, w0
    3494:	20 19 88    	mov.w     w0, 0x324
    3496:	50 00 20    	mov.w     #0x5, w0
    3498:	40 19 88    	mov.w     w0, 0x328
    349a:	21 e3 a8    	bset.b    0x321, #0x7
    349c:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    349e:	dc e2 a9    	bclr.b    0x2dc, #0x7
    34a0:	e8 02 a9    	bclr.b    0x2e8, #0x0
    34a2:	ec 02 a9    	bclr.b    0x2ec, #0x0
    34a4:	e8 22 a9    	bclr.b    0x2e8, #0x1
    34a6:	ec 22 a9    	bclr.b    0x2ec, #0x1
    34a8:	d1 e2 a8    	bset.b    0x2d1, #0x7
    34aa:	d1 82 a8    	bset.b    0x2d1, #0x4
    34ac:	c9 82 a8    	bset.b    0x2c9, #0x4
    34ae:	00 80 fa    	ulnk      
    34b0:	00 00 06    	return    

000034b2 <_read_analog>:
    34b2:	02 00 fa    	lnk       #0x2
    34b4:	00 0f 78    	mov.w     w0, [w14]
    34b6:	9e 00 78    	mov.w     [w14], w1
    34b8:	41 19 88    	mov.w     w1, 0x328
    34ba:	20 23 a8    	bset.b    0x320, #0x1
    34bc:	00 00 00    	nop       

000034be <.L3>:
    34be:	00 19 80    	mov.w     0x320, w0
    34c0:	61 00 60    	and.w     w0, #0x1, w0
    34c2:	00 00 e0    	cp0.w     w0
    34c4:	fc ff 32    	bra       Z, 0x34be <.L3>
    34c6:	00 18 80    	mov.w     0x300, w0
    34c8:	00 80 fa    	ulnk      
    34ca:	00 00 06    	return    

000034cc <_rand_next>:
    34cc:	02 00 fa    	lnk       #0x2
    34ce:	b0 40 80    	mov.w     0x816, w0
    34d0:	c2 00 de    	lsr.w     w0, #0x2, w1
    34d2:	b0 40 80    	mov.w     0x816, w0
    34d4:	80 80 68    	xor.w     w1, w0, w1
    34d6:	b0 40 80    	mov.w     0x816, w0
    34d8:	4d 00 de    	lsr.w     w0, #0xd, w0
    34da:	80 80 68    	xor.w     w1, w0, w1
    34dc:	b0 40 80    	mov.w     0x816, w0
    34de:	42 01 de    	lsr.w     w0, #0x2, w2
    34e0:	b0 40 80    	mov.w     0x816, w0
    34e2:	43 00 de    	lsr.w     w0, #0x3, w0
    34e4:	00 00 61    	and.w     w2, w0, w0
    34e6:	00 80 68    	xor.w     w1, w0, w0
    34e8:	61 0f 60    	and.w     w0, #0x1, [w14]
    34ea:	b0 40 80    	mov.w     0x816, w0
    34ec:	80 00 d1    	lsr.w     w0, w1
    34ee:	1e 00 78    	mov.w     [w14], w0
    34f0:	4f 00 dd    	sl.w      w0, #0xf, w0
    34f2:	01 00 70    	ior.w     w0, w1, w0
    34f4:	b0 40 88    	mov.w     w0, 0x816
    34f6:	00 80 fa    	ulnk      
    34f8:	00 00 06    	return    
Disassembly of section .dinit:

000034fa <.dinit>:
    34fa:	42 10 00    	nop       
    34fc:	86 00 00    	nop       
    34fe:	80 00 00    	nop       
    3500:	00 08 00    	nop       
    3502:	1e 00 00    	nop       
    3504:	80 00 00    	nop       
    3506:	04 11 00    	nop       
    3508:	10 00 00    	nop       
    350a:	80 00 00    	nop       
    350c:	1e 08 00    	nop       
    350e:	0e 00 00    	nop       
    3510:	80 00 00    	nop       
    3512:	2e 08 00    	nop       
    3514:	14 08 00    	nop       
    3516:	80 00 00    	nop       
    3518:	2c 08 00    	nop       
    351a:	02 00 00    	nop       
    351c:	80 00 00    	nop       
    351e:	ea 10 00    	nop       
    3520:	1a 00 00    	nop       
    3522:	82 00 00    	nop       
    3524:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    3526:	74 7a 4c    	.pword 0x4c7a74
    3528:	00 00 01    	call      w0
    352a:	00 02 00    	nop       
    352c:	04 00 08    	do        #0x4, 0x5530
    352e:	00 10 00 
    3530:	00 00 20    	mov.w     #0x0, w0
    3532:	2b 2d 23    	mov.w     #0x32d2, w11
    3534:	30 00 00    	nop       
    3536:	c8 10 00    	nop       
    3538:	22 00 00    	nop       
    353a:	82 00 00    	nop       
    353c:	30 31 32    	bra       Z, 0x979e
    353e:	33 34 35    	bra       LT, 0x9da6
    3540:	36 37 38    	bra       NOV, 0xa3ae
    3542:	39 41 42    	add.b     w4, [w9++], w2
    3544:	43 44 45    	add.b     w10, [--w3], w8
    3546:	46 00 30    	bra       OV, 0x35d4
    3548:	31 32 33    	bra       N, 0x99ac
    354a:	34 35 36    	bra       LEU, 0x9fb4
    354c:	37 38 39    	bra       NC, 0xa5bc
    354e:	61 62 63    	and.b     w6, #0x1, [--w4]
    3550:	64 65 66    	and.b     w12, #0x4, [--w10]
	...
Disassembly of section .text:

00003556 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    3556:	02 00 fa    	lnk       #0x2
    3558:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    355a:	1e 00 78    	mov.w     [w14], w0
    355c:	48 00 de    	lsr.w     w0, #0x8, w0
    355e:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    3560:	1e 00 78    	mov.w     [w14], w0
    3562:	44 00 de    	lsr.w     w0, #0x4, w0
    3564:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    3566:	1e 00 78    	mov.w     [w14], w0
    3568:	42 00 de    	lsr.w     w0, #0x2, w0
    356a:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    356c:	1e 00 78    	mov.w     [w14], w0
    356e:	00 00 d1    	lsr.w     w0, w0
    3570:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    3572:	1e 00 78    	mov.w     [w14], w0
    3574:	00 40 78    	mov.b     w0, w0
    3576:	61 40 60    	and.b     w0, #0x1, w0
}
    3578:	00 80 fa    	ulnk      
    357a:	00 00 06    	return    
Disassembly of section .isr:

0000357c <__DefaultInterrupt>:
    357c:	00 40 da    	break     
    357e:	00 00 fe    	reset     
