
codeword.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	88 1d 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	88 1d 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	88 1d 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	88 1d 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	88 1d 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	88 1d 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	88 1d 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	88 1d 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	88 1d 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	88 1d 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	88 1d 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	88 1d 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	88 1d 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	88 1d 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	88 1d 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	88 1d 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	88 1d 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	88 1d 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	88 1d 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	88 1d 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	88 1d 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	88 1d 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	88 1d 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	88 1d 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	88 1d 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	88 1d 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	88 1d 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	88 1d 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	88 1d 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	88 1d 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	88 1d 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	88 1d 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	88 1d 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	88 1d 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	88 1d 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	88 1d 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	88 1d 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	88 1d 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	88 1d 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	88 1d 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	88 1d 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	88 1d 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	88 1d 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	88 1d 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	88 1d 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	88 1d 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	88 1d 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	88 1d 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	88 1d 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	88 1d 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	88 1d 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	88 1d 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	88 1d 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	88 1d 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	88 1d 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	88 1d 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	88 1d 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	88 1d 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	88 1d 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	88 1d 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	88 1d 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	88 1d 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	88 1d 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	88 1d 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	88 1d 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	88 1d 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	88 1d 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	88 1d 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	88 1d 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	88 1d 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	af 81 20    	mov.w     #0x81a, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	77 00 07    	rcall     0x1214 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	a0 d7 21    	mov.w     #0x1d7a, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	b8 1b 02    	call      0x1bb8 <.LFE2>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	e0 0b 20    	mov.w     #0xbe, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <__crt_start_mode>:
    1214:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	7e 1a 04    	goto      0x1a7e <__T2Interrupt>
    1032:	00 00 00 
    1034:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	5a 1a 04    	goto      0x1a5a <__CNInterrupt>
    105a:	00 00 00 
    105c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	88 1d 04    	goto      0x1d88 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009216 <.LC0>:
    9216:	20 20       	.word 0x2020
    9218:	20 20       	.word 0x2020
    921a:	20 20       	.word 0x2020
    921c:	20 20       	.word 0x2020
    921e:	20 20       	.word 0x2020
    9220:	20 20       	.word 0x2020
    9222:	20 20       	.word 0x2020
    9224:	20 20       	.word 0x2020
    9226:	20 20       	.word 0x2020
    9228:	20 20       	.word 0x2020
    922a:	20 20       	.word 0x2020
    922c:	20 20       	.word 0x2020
    922e:	20 20       	.word 0x2020
    9230:	20 20       	.word 0x2020
    9232:	20 20       	.word 0x2020
    9234:	20 20       	.word 0x2020
    9236:	20 20       	.word 0x2020
    9238:	20 20       	.word 0x2020
    923a:	20 20       	.word 0x2020
    923c:	20 20       	.word 0x2020
    923e:	20 20       	.word 0x2020
    9240:	20 20       	.word 0x2020
    9242:	20 20       	.word 0x2020
    9244:	20 20       	.word 0x2020
    9246:	20 20       	.word 0x2020
    9248:	20 20       	.word 0x2020
    924a:	20 20       	.word 0x2020
    924c:	20 20       	.word 0x2020
    924e:	00 20       	.word 0x2000

0000924f <.LC1>:
    924f:	00 00       	.word 0
    9251:	00 00       	.word 0
    9253:	00 00       	.word 0
    9255:	00 00       	.word 0
    9257:	00 00       	.word 0
    9259:	00 00       	.word 0
    925b:	00 00       	.word 0
    925d:	00 00       	.word 0
	...

00009260 <.LC2>:
    9260:	7a 79       	.word 0x797a
    9262:	78 77       	.word 0x7778
    9264:	76 75       	.word 0x7576
    9266:	74 73       	.word 0x7374
    9268:	72 71       	.word 0x7172
    926a:	70 6f       	.word 0x6f70
    926c:	6e 6d       	.word 0x6d6e
    926e:	6c 6b       	.word 0x6b6c
    9270:	6a 69       	.word 0x696a
    9272:	68 67       	.word 0x6768
    9274:	66 65       	.word 0x6566
    9276:	64 63       	.word 0x6364
    9278:	62 61       	.word 0x6162
    927a:	39 38       	.word 0x3839
    927c:	37 36       	.word 0x3637
    927e:	35 34       	.word 0x3435
    9280:	33 32       	.word 0x3233
    9282:	31 30       	.word 0x3031
    9284:	31 32       	.word 0x3231
    9286:	33 34       	.word 0x3433
    9288:	35 36       	.word 0x3635
    928a:	37 38       	.word 0x3837
    928c:	39 61       	.word 0x6139
    928e:	62 63       	.word 0x6362
    9290:	64 65       	.word 0x6564
    9292:	66 67       	.word 0x6766
    9294:	68 69       	.word 0x6968
    9296:	6a 6b       	.word 0x6b6a
    9298:	6c 6d       	.word 0x6d6c
    929a:	6e 6f       	.word 0x6f6e
    929c:	70 71       	.word 0x7170
    929e:	72 73       	.word 0x7372
    92a0:	74 75       	.word 0x7574
    92a2:	76 77       	.word 0x7776
    92a4:	78 79       	.word 0x7978
    92a6:	7a 00       	.word 0x7a

000092a8 <.LC0>:
    92a8:	4d 6f       	.word 0x6f4d
    92aa:	64 75       	.word 0x7564
    92ac:	6c 65       	.word 0x656c
    92ae:	00 43       	.word 0x4300

000092af <.LC1>:
    92af:	00 00       	.word 0
    92b1:	00 00       	.word 0
    92b3:	00 00       	.word 0
    92b5:	00 00       	.word 0
    92b7:	00 00       	.word 0

000092b9 <.LC4>:
	...

000092ba <.LC2>:
    92ba:	73 74       	.word 0x7473
    92bc:	72 65       	.word 0x6572
    92be:	6e 67       	.word 0x676e
    92c0:	74 68       	.word 0x6874
    92c2:	00 20       	.word 0x2000

000092c3 <.LC3>:
    92c3:	00 00       	.word 0
    92c5:	00 00       	.word 0
    92c7:	00 00       	.word 0
    92c9:	00 00       	.word 0
    92cb:	00 00       	.word 0
    92cd:	00 00       	.word 0
    92cf:	00 00       	.word 0
    92d1:	00 00       	.word 0
	...
Disassembly of section .text:

000012d4 <___lcd_i2c_write>:
#define DR_READ 0x0B

_LCD lcd[3];

void __lcd_i2c_write(_LCD *self, uint8_t ch) {
    12d4:	04 00 fa    	lnk       #0x4
    12d6:	00 0f 78    	mov.w     w0, [w14]
    12d8:	21 47 98    	mov.b     w1, [w14+2]
    i2c_start();
    12da:	91 02 07    	rcall     0x17fe <_i2c_start> <.LFB2> <.LFE1>
    send_i2c_byte(self->addr_write);
    12dc:	1e 00 78    	mov.w     [w14], w0
    12de:	10 40 78    	mov.b     [w0], w0
    12e0:	00 80 fb    	ze        w0, w0
    12e2:	dc 02 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ch);
    12e4:	2e 40 90    	mov.b     [w14+2], w0
    12e6:	00 80 fb    	ze        w0, w0
    12e8:	d9 02 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
    reset_i2c_bus();
    12ea:	bd 02 07    	rcall     0x1866 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    12ec:	00 80 fa    	ulnk      
    12ee:	00 00 06    	return    

000012f0 <___lcd_enablePulse>:

// Pulse enable pin high and then low to shift in 4 bits of data
void __lcd_enablePulse(_LCD *self) {
    12f0:	02 00 fa    	lnk       #0x2
    12f2:	00 0f 78    	mov.w     w0, [w14]
    self->io_write_val ^= ENABLE_TOGGLE;
    12f4:	1e 00 78    	mov.w     [w14], w0
    12f6:	20 40 90    	mov.b     [w0+2], w0
    12f8:	80 40 78    	mov.b     w0, w1
    12fa:	01 24 a2    	btg.b     w1, #0x2
    12fc:	1e 00 78    	mov.w     [w14], w0
    12fe:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1300:	1e 00 78    	mov.w     [w14], w0
    1302:	20 40 90    	mov.b     [w0+2], w0
    1304:	80 40 78    	mov.b     w0, w1
    1306:	1e 00 78    	mov.w     [w14], w0
    1308:	e5 ff 07    	rcall     0x12d4 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    delay_by_nop(100);
    130a:	40 06 20    	mov.w     #0x64, w0
    130c:	01 00 20    	mov.w     #0x0, w1
    130e:	57 02 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    self->io_write_val ^= ENABLE_TOGGLE;
    1310:	1e 00 78    	mov.w     [w14], w0
    1312:	20 40 90    	mov.b     [w0+2], w0
    1314:	80 40 78    	mov.b     w0, w1
    1316:	01 24 a2    	btg.b     w1, #0x2
    1318:	1e 00 78    	mov.w     [w14], w0
    131a:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    131c:	1e 00 78    	mov.w     [w14], w0
    131e:	20 40 90    	mov.b     [w0+2], w0
    1320:	80 40 78    	mov.b     w0, w1
    1322:	1e 00 78    	mov.w     [w14], w0
    1324:	d7 ff 07    	rcall     0x12d4 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    // delay_by_nop(1000);
}
    1326:	00 80 fa    	ulnk      
    1328:	00 00 06    	return    

0000132a <___lcd_send>:

/* Send 8 bits of data as one 4-bit nibble, shifting in, second 4-bit nibble, and
shifting in */
void __lcd_send(_LCD *self, uint8_t value, uint8_t command) {
    132a:	06 00 fa    	lnk       #0x6
    132c:	10 07 98    	mov.w     w0, [w14+2]
    132e:	41 47 98    	mov.b     w1, [w14+4]
    1330:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t MS = value & 0x78;
    1332:	4e 40 90    	mov.b     [w14+4], w0
    1334:	81 c7 b3    	mov.b     #0x78, w1
    1336:	01 4f 60    	and.b     w0, w1, [w14]
    uint8_t LS = value << 4;
    1338:	ce 40 90    	mov.b     [w14+4], w1
    133a:	40 00 20    	mov.w     #0x4, w0
    133c:	00 08 dd    	sl.w      w1, w0, w0
    133e:	10 47 98    	mov.b     w0, [w14+1]
    self->io_write_val = command | MS;
    1340:	5e 40 90    	mov.b     [w14+5], w0
    1342:	9e 40 70    	ior.b     w0, [w14], w1
    1344:	1e 00 90    	mov.w     [w14+2], w0
    1346:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1348:	1e 00 90    	mov.w     [w14+2], w0
    134a:	20 40 90    	mov.b     [w0+2], w0
    134c:	80 40 78    	mov.b     w0, w1
    134e:	1e 00 90    	mov.w     [w14+2], w0
    1350:	c1 ff 07    	rcall     0x12d4 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    1352:	1e 00 90    	mov.w     [w14+2], w0
    1354:	cd ff 07    	rcall     0x12f0 <___lcd_enablePulse> <.LFB1> <.LFE0>
    self->io_write_val= command | LS;
    1356:	de 40 90    	mov.b     [w14+5], w1
    1358:	1e 40 90    	mov.b     [w14+1], w0
    135a:	80 c0 70    	ior.b     w1, w0, w1
    135c:	1e 00 90    	mov.w     [w14+2], w0
    135e:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1360:	1e 00 90    	mov.w     [w14+2], w0
    1362:	20 40 90    	mov.b     [w0+2], w0
    1364:	80 40 78    	mov.b     w0, w1
    1366:	1e 00 90    	mov.w     [w14+2], w0
    1368:	b5 ff 07    	rcall     0x12d4 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    136a:	1e 00 90    	mov.w     [w14+2], w0
    136c:	c1 ff 07    	rcall     0x12f0 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    136e:	00 80 fa    	ulnk      
    1370:	00 00 06    	return    

00001372 <___lcd_send8>:

void __lcd_send8(_LCD *self, uint8_t value, uint8_t command) {
    1372:	04 00 fa    	lnk       #0x4
    1374:	00 0f 78    	mov.w     w0, [w14]
    1376:	21 47 98    	mov.b     w1, [w14+2]
    1378:	32 47 98    	mov.b     w2, [w14+3]
    value = value << 4;
    137a:	ae 40 90    	mov.b     [w14+2], w1
    137c:	40 00 20    	mov.w     #0x4, w0
    137e:	00 08 dd    	sl.w      w1, w0, w0
    1380:	20 47 98    	mov.b     w0, [w14+2]
    self->io_write_val = command | value;
    1382:	be 40 90    	mov.b     [w14+3], w1
    1384:	2e 40 90    	mov.b     [w14+2], w0
    1386:	80 c0 70    	ior.b     w1, w0, w1
    1388:	1e 00 78    	mov.w     [w14], w0
    138a:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    138c:	1e 00 78    	mov.w     [w14], w0
    138e:	20 40 90    	mov.b     [w0+2], w0
    1390:	80 40 78    	mov.b     w0, w1
    1392:	1e 00 78    	mov.w     [w14], w0
    1394:	9f ff 07    	rcall     0x12d4 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    1396:	1e 00 78    	mov.w     [w14], w0
    1398:	ab ff 07    	rcall     0x12f0 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    139a:	00 80 fa    	ulnk      
    139c:	00 00 06    	return    

0000139e <_init_lcd>:

/* Some code from last year's Spaceteam project that sets up three LCD screens on
 one bus with corresponding IO extender types and hard-wired addresses */
void init_lcd(uint8_t initiator) {
    139e:	02 00 fa    	lnk       #0x2
    13a0:	00 4f 78    	mov.b     w0, [w14]

    i2c_init(1e3);
    13a2:	80 3e 20    	mov.w     #0x3e8, w0
    13a4:	1f 02 07    	rcall     0x17e4 <_i2c_init> <.LFB1> <.LFE0>

    switch (initiator) {
    13a6:	1e 80 fb    	ze        [w14], w0
    13a8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    13aa:	17 00 32    	bra       Z, 0x13da <.L8>
    13ac:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    13ae:	03 00 3c    	bra       GT, 0x13b6 <.L11>
    13b0:	00 00 e0    	cp0.w     w0
    13b2:	06 00 32    	bra       Z, 0x13c0 <.L7>
    13b4:	39 00 37    	bra       0x1428 <.L5>

000013b6 <.L11>:
    13b6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    13b8:	1d 00 32    	bra       Z, 0x13f4 <.L9>
    13ba:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    13bc:	28 00 32    	bra       Z, 0x140e <.L10>
    13be:	34 00 37    	bra       0x1428 <.L5>

000013c0 <.L7>:
        case 0: // Central
            lcd_init(&lcd[0], 0x05,'A');
    13c0:	12 c4 b3    	mov.b     #0x41, w2
    13c2:	51 c0 b3    	mov.b     #0x5, w1
    13c4:	a0 80 20    	mov.w     #0x80a, w0
    13c6:	32 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x07,'A');
    13c8:	12 c4 b3    	mov.b     #0x41, w2
    13ca:	71 c0 b3    	mov.b     #0x7, w1
    13cc:	f0 80 20    	mov.w     #0x80f, w0
    13ce:	2e 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'T');
    13d0:	42 c5 b3    	mov.b     #0x54, w2
    13d2:	61 c0 b3    	mov.b     #0x6, w1
    13d4:	40 81 20    	mov.w     #0x814, w0
    13d6:	2a 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            break;
    13d8:	27 00 37    	bra       0x1428 <.L5>

000013da <.L8>:
        case 1:
            lcd_init(&lcd[0], 0x07,'A');
    13da:	12 c4 b3    	mov.b     #0x41, w2
    13dc:	71 c0 b3    	mov.b     #0x7, w1
    13de:	a0 80 20    	mov.w     #0x80a, w0
    13e0:	25 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'A');
    13e2:	12 c4 b3    	mov.b     #0x41, w2
    13e4:	61 c0 b3    	mov.b     #0x6, w1
    13e6:	40 81 20    	mov.w     #0x814, w0
    13e8:	21 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x05,'A');
    13ea:	12 c4 b3    	mov.b     #0x41, w2
    13ec:	51 c0 b3    	mov.b     #0x5, w1
    13ee:	f0 80 20    	mov.w     #0x80f, w0
    13f0:	1d 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            break;
    13f2:	1a 00 37    	bra       0x1428 <.L5>

000013f4 <.L9>:
        case 2:
            lcd_init(&lcd[0], 0x07,'T');
    13f4:	42 c5 b3    	mov.b     #0x54, w2
    13f6:	71 c0 b3    	mov.b     #0x7, w1
    13f8:	a0 80 20    	mov.w     #0x80a, w0
    13fa:	18 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    13fc:	12 c4 b3    	mov.b     #0x41, w2
    13fe:	61 c0 b3    	mov.b     #0x6, w1
    1400:	f0 80 20    	mov.w     #0x80f, w0
    1402:	14 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    1404:	12 c4 b3    	mov.b     #0x41, w2
    1406:	51 c0 b3    	mov.b     #0x5, w1
    1408:	40 81 20    	mov.w     #0x814, w0
    140a:	10 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            break;
    140c:	0d 00 37    	bra       0x1428 <.L5>

0000140e <.L10>:
        case 3:
            lcd_init(&lcd[0], 0x07,'A');
    140e:	12 c4 b3    	mov.b     #0x41, w2
    1410:	71 c0 b3    	mov.b     #0x7, w1
    1412:	a0 80 20    	mov.w     #0x80a, w0
    1414:	0b 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    1416:	12 c4 b3    	mov.b     #0x41, w2
    1418:	61 c0 b3    	mov.b     #0x6, w1
    141a:	f0 80 20    	mov.w     #0x80f, w0
    141c:	07 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    141e:	12 c4 b3    	mov.b     #0x41, w2
    1420:	51 c0 b3    	mov.b     #0x5, w1
    1422:	40 81 20    	mov.w     #0x814, w0
    1424:	03 00 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
            break;
    1426:	00 00 00    	nop       

00001428 <.L5>:
    }
}
    1428:	00 80 fa    	ulnk      
    142a:	00 00 06    	return    

0000142c <_lcd_init>:

// Initializes the LCD screen hardware as per pg. 46 of the datasheet
void lcd_init(_LCD *self, uint8_t addr, char vendor) {
    142c:	04 00 fa    	lnk       #0x4
    142e:	00 0f 78    	mov.w     w0, [w14]
    1430:	21 47 98    	mov.b     w1, [w14+2]
    1432:	32 47 98    	mov.b     w2, [w14+3]
    switch(vendor){
    1434:	3e 40 90    	mov.b     [w14+3], w0
    1436:	00 00 fb    	se        w0, w0
    1438:	11 04 20    	mov.w     #0x41, w1
    143a:	81 0f 50    	sub.w     w0, w1, [w15]
    143c:	10 00 32    	bra       Z, 0x145e <.L14>
    143e:	41 05 20    	mov.w     #0x54, w1
    1440:	81 0f 50    	sub.w     w0, w1, [w15]
    1442:	1a 00 3a    	bra       NZ, 0x1478 <.L13>
        case 'T':// 0x40 == vendor prefix for PCF8574T
            self->addr_write = 0x40 + (addr << 1);
    1444:	2e 40 90    	mov.b     [w14+2], w0
    1446:	00 40 40    	add.b     w0, w0, w0
    1448:	02 c4 b3    	mov.b     #0x40, w2
    144a:	82 40 40    	add.b     w0, w2, w1
    144c:	1e 00 78    	mov.w     [w14], w0
    144e:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x40 + (addr << 1)+1;
    1450:	2e 40 90    	mov.b     [w14+2], w0
    1452:	00 40 40    	add.b     w0, w0, w0
    1454:	12 c4 b3    	mov.b     #0x41, w2
    1456:	82 40 40    	add.b     w0, w2, w1
    1458:	1e 00 78    	mov.w     [w14], w0
    145a:	11 40 98    	mov.b     w1, [w0+1]
            break;
    145c:	0d 00 37    	bra       0x1478 <.L13>

0000145e <.L14>:
        case 'A':// 0x70 == vendor prefix PCF8574AT
            self->addr_write = 0x70 + (addr << 1);
    145e:	2e 40 90    	mov.b     [w14+2], w0
    1460:	00 40 40    	add.b     w0, w0, w0
    1462:	02 c7 b3    	mov.b     #0x70, w2
    1464:	82 40 40    	add.b     w0, w2, w1
    1466:	1e 00 78    	mov.w     [w14], w0
    1468:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x70 + (addr << 1)+1;
    146a:	2e 40 90    	mov.b     [w14+2], w0
    146c:	00 40 40    	add.b     w0, w0, w0
    146e:	12 c7 b3    	mov.b     #0x71, w2
    1470:	82 40 40    	add.b     w0, w2, w1
    1472:	1e 00 78    	mov.w     [w14], w0
    1474:	11 40 98    	mov.b     w1, [w0+1]
            break;
    1476:	00 00 00    	nop       

00001478 <.L13>:
    }

    self->display_control = 0x00;
    1478:	1e 00 78    	mov.w     [w14], w0
    147a:	80 40 eb    	clr.b     w1
    147c:	31 40 98    	mov.b     w1, [w0+3]
    self->display_mode = 0x00;
    147e:	1e 00 78    	mov.w     [w14], w0
    1480:	80 40 eb    	clr.b     w1
    1482:	41 40 98    	mov.b     w1, [w0+4]

    self->io_write_val = 0x00;
    1484:	1e 00 78    	mov.w     [w14], w0
    1486:	80 40 eb    	clr.b     w1
    1488:	21 40 98    	mov.b     w1, [w0+2]

    __lcd_i2c_write(self, 0x00);
    148a:	80 40 eb    	clr.b     w1
    148c:	1e 00 78    	mov.w     [w14], w0
    148e:	22 ff 07    	rcall     0x12d4 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>

    delay_by_nop(15000);
    1490:	80 a9 23    	mov.w     #0x3a98, w0
    1492:	01 00 20    	mov.w     #0x0, w1
    1494:	94 01 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Some bullshit according to pg 46
    __lcd_send8(self, 0x03, INTERNAL_WRITE);
    1496:	82 c0 b3    	mov.b     #0x8, w2
    1498:	31 c0 b3    	mov.b     #0x3, w1
    149a:	1e 00 78    	mov.w     [w14], w0
    149c:	6a ff 07    	rcall     0x1372 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    149e:	80 38 21    	mov.w     #0x1388, w0
    14a0:	01 00 20    	mov.w     #0x0, w1
    14a2:	8d 01 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    14a4:	82 c0 b3    	mov.b     #0x8, w2
    14a6:	31 c0 b3    	mov.b     #0x3, w1
    14a8:	1e 00 78    	mov.w     [w14], w0
    14aa:	63 ff 07    	rcall     0x1372 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    14ac:	80 38 21    	mov.w     #0x1388, w0
    14ae:	01 00 20    	mov.w     #0x0, w1
    14b0:	86 01 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    14b2:	82 c0 b3    	mov.b     #0x8, w2
    14b4:	31 c0 b3    	mov.b     #0x3, w1
    14b6:	1e 00 78    	mov.w     [w14], w0
    14b8:	5c ff 07    	rcall     0x1372 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    14ba:	80 38 21    	mov.w     #0x1388, w0
    14bc:	01 00 20    	mov.w     #0x0, w1
    14be:	7f 01 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Put it in 4 bit mode
    __lcd_send8(self, 0x02, INTERNAL_WRITE);//0b00110000
    14c0:	82 c0 b3    	mov.b     #0x8, w2
    14c2:	21 c0 b3    	mov.b     #0x2, w1
    14c4:	1e 00 78    	mov.w     [w14], w0
    14c6:	55 ff 07    	rcall     0x1372 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    14c8:	80 38 21    	mov.w     #0x1388, w0
    14ca:	01 00 20    	mov.w     #0x0, w1
    14cc:	78 01 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x28, INTERNAL_WRITE); // Set rows and direction
    14ce:	82 c0 b3    	mov.b     #0x8, w2
    14d0:	81 c2 b3    	mov.b     #0x28, w1
    14d2:	1e 00 78    	mov.w     [w14], w0
    14d4:	2a ff 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    14d6:	20 03 20    	mov.w     #0x32, w0
    14d8:	01 00 20    	mov.w     #0x0, w1
    14da:	71 01 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x80, INTERNAL_WRITE); // Display off, cursor off
    14dc:	82 c0 b3    	mov.b     #0x8, w2
    14de:	01 c8 b3    	mov.b     #0x80, w1
    14e0:	1e 00 78    	mov.w     [w14], w0
    14e2:	23 ff 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    14e4:	20 03 20    	mov.w     #0x32, w0
    14e6:	01 00 20    	mov.w     #0x0, w1
    14e8:	6a 01 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x01, INTERNAL_WRITE); // Go to home position
    14ea:	82 c0 b3    	mov.b     #0x8, w2
    14ec:	11 c0 b3    	mov.b     #0x1, w1
    14ee:	1e 00 78    	mov.w     [w14], w0
    14f0:	1c ff 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    14f2:	00 7d 20    	mov.w     #0x7d0, w0
    14f4:	01 00 20    	mov.w     #0x0, w1
    14f6:	63 01 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x06, INTERNAL_WRITE); // Set curson direction
    14f8:	82 c0 b3    	mov.b     #0x8, w2
    14fa:	61 c0 b3    	mov.b     #0x6, w1
    14fc:	1e 00 78    	mov.w     [w14], w0
    14fe:	15 ff 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(5000);
    1500:	80 38 21    	mov.w     #0x1388, w0
    1502:	01 00 20    	mov.w     #0x0, w1
    1504:	5c 01 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x0C, INTERNAL_WRITE); // Display on, cursor off
    1506:	82 c0 b3    	mov.b     #0x8, w2
    1508:	c1 c0 b3    	mov.b     #0xc, w1
    150a:	1e 00 78    	mov.w     [w14], w0
    150c:	0e ff 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
}
    150e:	00 80 fa    	ulnk      
    1510:	00 00 06    	return    

00001512 <_lcd_stop>:

// Stops lcd I2C transfer
void lcd_stop(_LCD *self) {
    1512:	02 00 fa    	lnk       #0x2
    1514:	00 0f 78    	mov.w     w0, [w14]
    reset_i2c_bus();
    1516:	a7 01 07    	rcall     0x1866 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1518:	00 80 fa    	ulnk      
    151a:	00 00 06    	return    

0000151c <_lcd_display>:

// Sends show display command to LCD
void lcd_display(_LCD *self, uint8_t on) {
    151c:	04 00 fa    	lnk       #0x4
    151e:	00 0f 78    	mov.w     w0, [w14]
    1520:	21 47 98    	mov.b     w1, [w14+2]
    if (on) {
    1522:	2e 40 90    	mov.b     [w14+2], w0
    1524:	00 04 e0    	cp0.b     w0
    1526:	07 00 32    	bra       Z, 0x1536 <.L18>
        self->display_control |= LCD_DISPLAYON;
    1528:	1e 00 78    	mov.w     [w14], w0
    152a:	30 40 90    	mov.b     [w0+3], w0
    152c:	80 40 78    	mov.b     w0, w1
    152e:	01 24 a0    	bset.b    w1, #0x2
    1530:	1e 00 78    	mov.w     [w14], w0
    1532:	31 40 98    	mov.b     w1, [w0+3]
    1534:	06 00 37    	bra       0x1542 <.L19>

00001536 <.L18>:
    } else {
        self->display_control &= ~LCD_DISPLAYON;
    1536:	1e 00 78    	mov.w     [w14], w0
    1538:	b0 40 90    	mov.b     [w0+3], w1
    153a:	b0 cf b3    	mov.b     #0xfb, w0
    153c:	80 c0 60    	and.b     w1, w0, w1
    153e:	1e 00 78    	mov.w     [w14], w0
    1540:	31 40 98    	mov.b     w1, [w0+3]

00001542 <.L19>:
    }
    __lcd_send(self, self->display_control | LCD_DISPLAYCONTROL, INTERNAL_WRITE);
    1542:	1e 00 78    	mov.w     [w14], w0
    1544:	30 40 90    	mov.b     [w0+3], w0
    1546:	00 34 a0    	bset.b    w0, #0x3
    1548:	82 c0 b3    	mov.b     #0x8, w2
    154a:	80 40 78    	mov.b     w0, w1
    154c:	1e 00 78    	mov.w     [w14], w0
    154e:	ed fe 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
}
    1550:	00 80 fa    	ulnk      
    1552:	00 00 06    	return    

00001554 <_lcd_clear>:

// Sends clear display command to LCD
void lcd_clear(_LCD *self) {
    1554:	02 00 fa    	lnk       #0x2
    1556:	00 0f 78    	mov.w     w0, [w14]
    __lcd_send(self, LCD_CLEARDISPLAY, INTERNAL_WRITE);
    1558:	82 c0 b3    	mov.b     #0x8, w2
    155a:	11 c0 b3    	mov.b     #0x1, w1
    155c:	1e 00 78    	mov.w     [w14], w0
    155e:	e5 fe 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    1560:	00 7d 20    	mov.w     #0x7d0, w0
    1562:	01 00 20    	mov.w     #0x0, w1
    1564:	2c 01 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1566:	00 80 fa    	ulnk      
    1568:	00 00 06    	return    

0000156a <_lcd_putc>:

// Sends single character to LCD display
void lcd_putc(_LCD *self, char c) {
    156a:	04 00 fa    	lnk       #0x4
    156c:	00 0f 78    	mov.w     w0, [w14]
    156e:	21 47 98    	mov.b     w1, [w14+2]
    __lcd_send(self, c, DR_WRITE);
    1570:	2e 40 90    	mov.b     [w14+2], w0
    1572:	92 c0 b3    	mov.b     #0x9, w2
    1574:	80 40 78    	mov.b     w0, w1
    1576:	1e 00 78    	mov.w     [w14], w0
    1578:	d8 fe 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
    // delay_by_nop(1000);
}
    157a:	00 80 fa    	ulnk      
    157c:	00 00 06    	return    

0000157e <_lcd_goto>:

// Sends commands to move LCD cursor to specified location
void lcd_goto(_LCD *self, uint8_t line, uint8_t col) { //x=col, y=row
    157e:	06 00 fa    	lnk       #0x6
    1580:	10 07 98    	mov.w     w0, [w14+2]
    1582:	41 47 98    	mov.b     w1, [w14+4]
    1584:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t address;
    switch(line) {
    1586:	4e 40 90    	mov.b     [w14+4], w0
    1588:	00 80 fb    	ze        w0, w0
    158a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    158c:	03 00 32    	bra       Z, 0x1594 <.L24>
    158e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1590:	04 00 32    	bra       Z, 0x159a <.L25>
    1592:	06 00 37    	bra       0x15a0 <.L27>

00001594 <.L24>:
        case 1:
            address = 0x00;
    1594:	00 40 eb    	clr.b     w0
    1596:	00 4f 78    	mov.b     w0, [w14]
            break;
    1598:	06 00 37    	bra       0x15a6 <.L26>

0000159a <.L25>:
        case 2:
            address = 0x40;
    159a:	00 c4 b3    	mov.b     #0x40, w0
    159c:	00 4f 78    	mov.b     w0, [w14]
            break;
    159e:	03 00 37    	bra       0x15a6 <.L26>

000015a0 <.L27>:
        default:
            address = 0x00;
    15a0:	00 40 eb    	clr.b     w0
    15a2:	00 4f 78    	mov.b     w0, [w14]
            break;
    15a4:	00 00 00    	nop       

000015a6 <.L26>:
    }

    address = address+col;
    15a6:	5e 40 90    	mov.b     [w14+5], w0
    15a8:	1e 4f 40    	add.b     w0, [w14], [w14]
    __lcd_send(self, LCD_SETDDRAMADDR | address, INTERNAL_WRITE);
    15aa:	1e 40 78    	mov.b     [w14], w0
    15ac:	00 74 a0    	bset.b    w0, #0x7
    15ae:	82 c0 b3    	mov.b     #0x8, w2
    15b0:	80 40 78    	mov.b     w0, w1
    15b2:	1e 00 90    	mov.w     [w14+2], w0
    15b4:	ba fe 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
}
    15b6:	00 80 fa    	ulnk      
    15b8:	00 00 06    	return    

000015ba <_lcd_cursor>:


void lcd_cursor(_LCD *self, uint8_t cur) {
    15ba:	04 00 fa    	lnk       #0x4
    15bc:	00 0f 78    	mov.w     w0, [w14]
    15be:	21 47 98    	mov.b     w1, [w14+2]
    switch(cur) {
    15c0:	2e 40 90    	mov.b     [w14+2], w0
    15c2:	00 80 fb    	ze        w0, w0
    15c4:	00 00 e0    	cp0.w     w0
    15c6:	03 00 32    	bra       Z, 0x15ce <.L30>
    15c8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    15ca:	06 00 32    	bra       Z, 0x15d8 <.L31>
        case 0:
            __lcd_send(self, 0x0C, INTERNAL_WRITE);
            break;
        case 1:
            __lcd_send(self, 0x0E, INTERNAL_WRITE);
            break;
        default:
            break;
    15cc:	0a 00 37    	bra       0x15e2 <.L28>

000015ce <.L30>:
    15ce:	82 c0 b3    	mov.b     #0x8, w2
    15d0:	c1 c0 b3    	mov.b     #0xc, w1
    15d2:	1e 00 78    	mov.w     [w14], w0
    15d4:	aa fe 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
    15d6:	05 00 37    	bra       0x15e2 <.L28>

000015d8 <.L31>:
    15d8:	82 c0 b3    	mov.b     #0x8, w2
    15da:	e1 c0 b3    	mov.b     #0xe, w1
    15dc:	1e 00 78    	mov.w     [w14], w0
    15de:	a5 fe 07    	rcall     0x132a <___lcd_send> <.LFB2> <.LFE1>
    15e0:	00 00 00    	nop       

000015e2 <.L28>:
    }
}
    15e2:	00 80 fa    	ulnk      
    15e4:	00 00 06    	return    

000015e6 <_lcd_print1>:

void lcd_print1(_LCD *self, char *str) {
    15e6:	04 00 fa    	lnk       #0x4
    15e8:	00 0f 78    	mov.w     w0, [w14]
    15ea:	11 07 98    	mov.w     w1, [w14+2]
    lcd_clear(self);
    15ec:	1e 00 78    	mov.w     [w14], w0
    15ee:	b2 ff 07    	rcall     0x1554 <_lcd_clear> <.LFB8> <.LFE7>
    while (*str) {
    15f0:	08 00 37    	bra       0x1602 <.L34>

000015f2 <.L35>:
        lcd_putc(self, *str);
    15f2:	1e 00 90    	mov.w     [w14+2], w0
    15f4:	10 40 78    	mov.b     [w0], w0
    15f6:	80 40 78    	mov.b     w0, w1
    15f8:	1e 00 78    	mov.w     [w14], w0
    15fa:	b7 ff 07    	rcall     0x156a <_lcd_putc> <.LFB9> <.LFE8>
        str++;
    15fc:	1e 00 90    	mov.w     [w14+2], w0
    15fe:	00 00 e8    	inc.w     w0, w0
    1600:	10 07 98    	mov.w     w0, [w14+2]

00001602 <.L34>:
    1602:	1e 00 90    	mov.w     [w14+2], w0
    1604:	10 40 78    	mov.b     [w0], w0
    1606:	00 04 e0    	cp0.b     w0
    1608:	f4 ff 3a    	bra       NZ, 0x15f2 <.L35>
    }
}
    160a:	00 80 fa    	ulnk      
    160c:	00 00 06    	return    

0000160e <_lcd_print2>:

void lcd_print2(_LCD *self, char* line1, char* line2){
    160e:	42 00 fa    	lnk       #0x42
    1610:	60 1f 98    	mov.w     w0, [w14+60]
    1612:	71 1f 98    	mov.w     w1, [w14+62]
    1614:	02 27 98    	mov.w     w2, [w14+64]
    lcd_clear(self);
    1616:	6e 18 90    	mov.w     [w14+60], w0
    1618:	9d ff 07    	rcall     0x1554 <_lcd_clear> <.LFB8> <.LFE7>
    char str[56] ="                                                        ";
    161a:	60 21 29    	mov.w     #0x9216, w0
    161c:	e4 00 47    	add.w     w14, #0x4, w1
    161e:	37 00 09    	repeat    #0x37
    1620:	b0 58 78    	mov.b     [w0++], [w1++]
    1622:	80 03 b1    	sub.w     #0x38, w0
    int i =0;
    1624:	00 00 eb    	clr.w     w0
    1626:	00 0f 78    	mov.w     w0, [w14]
    while (*line1){
    1628:	09 00 37    	bra       0x163c <.L37>

0000162a <.L38>:
        str[i]=*line1;
    162a:	7e 18 90    	mov.w     [w14+62], w0
    162c:	90 40 78    	mov.b     [w0], w1
    162e:	64 00 47    	add.w     w14, #0x4, w0
    1630:	1e 00 40    	add.w     w0, [w14], w0
    1632:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    1634:	1e 0f e8    	inc.w     [w14], [w14]
        line1++;
    1636:	7e 18 90    	mov.w     [w14+62], w0
    1638:	00 00 e8    	inc.w     w0, w0
    163a:	70 1f 98    	mov.w     w0, [w14+62]

0000163c <.L37>:
    163c:	7e 18 90    	mov.w     [w14+62], w0
    163e:	10 40 78    	mov.b     [w0], w0
    1640:	00 04 e0    	cp0.b     w0
    1642:	f3 ff 3a    	bra       NZ, 0x162a <.L38>
    }
    i =40;
    1644:	80 02 20    	mov.w     #0x28, w0
    1646:	00 0f 78    	mov.w     w0, [w14]
    while (*line2){
    1648:	09 00 37    	bra       0x165c <.L39>

0000164a <.L40>:
        str[i]=*line2;
    164a:	0e 20 90    	mov.w     [w14+64], w0
    164c:	90 40 78    	mov.b     [w0], w1
    164e:	64 00 47    	add.w     w14, #0x4, w0
    1650:	1e 00 40    	add.w     w0, [w14], w0
    1652:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    1654:	1e 0f e8    	inc.w     [w14], [w14]
        line2++;
    1656:	0e 20 90    	mov.w     [w14+64], w0
    1658:	00 00 e8    	inc.w     w0, w0
    165a:	00 27 98    	mov.w     w0, [w14+64]

0000165c <.L39>:
    165c:	0e 20 90    	mov.w     [w14+64], w0
    165e:	10 40 78    	mov.b     [w0], w0
    1660:	00 04 e0    	cp0.b     w0
    1662:	f3 ff 3a    	bra       NZ, 0x164a <.L40>
    }
    char* strptr=str;
    1664:	64 00 47    	add.w     w14, #0x4, w0
    1666:	10 07 98    	mov.w     w0, [w14+2]
    lcd_print1(self,strptr);
    1668:	9e 00 90    	mov.w     [w14+2], w1
    166a:	6e 18 90    	mov.w     [w14+60], w0
    166c:	bc ff 07    	rcall     0x15e6 <_lcd_print1> <.LFB12> <.LFE11>
}
    166e:	00 80 fa    	ulnk      
    1670:	00 00 06    	return    

00001672 <_lcd_print>:

void lcd_print(_LCD *self, char* message) {
    1672:	30 00 fa    	lnk       #0x30
    1674:	60 17 98    	mov.w     w0, [w14+44]
    1676:	71 17 98    	mov.w     w1, [w14+46]
    char newstr1[17] = "                ";
    1678:	f0 24 29    	mov.w     #0x924f, w0
    167a:	ea 00 47    	add.w     w14, #0xa, w1
    167c:	10 00 09    	repeat    #0x10
    167e:	b0 58 78    	mov.b     [w0++], [w1++]
    1680:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr1= newstr1;
    1682:	6a 0f 47    	add.w     w14, #0xa, [w14]
    char newstr2[17] = "                ";
    1684:	f0 24 29    	mov.w     #0x924f, w0
    1686:	fb 00 47    	add.w     w14, #0x1b, w1
    1688:	10 00 09    	repeat    #0x10
    168a:	b0 58 78    	mov.b     [w0++], [w1++]
    168c:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr2= newstr2;
    168e:	7b 00 47    	add.w     w14, #0x1b, w0
    1690:	10 07 98    	mov.w     w0, [w14+2]
    char* temp1 = newstrptr1;
    1692:	9e 00 78    	mov.w     [w14], w1
    1694:	31 07 98    	mov.w     w1, [w14+6]
    char* temp2 = newstrptr2;
    1696:	9e 00 90    	mov.w     [w14+2], w1
    1698:	41 07 98    	mov.w     w1, [w14+8]
    uint8_t i=0;
    169a:	00 40 eb    	clr.b     w0
    169c:	40 47 98    	mov.b     w0, [w14+4]
    while (i <17){
    169e:	0f 00 37    	bra       0x16be <.L42>

000016a0 <.L44>:
        if (*message){
    16a0:	7e 10 90    	mov.w     [w14+46], w0
    16a2:	10 40 78    	mov.b     [w0], w0
    16a4:	00 04 e0    	cp0.b     w0
    16a6:	08 00 32    	bra       Z, 0x16b8 <.L43>
            *newstrptr1=*message;
    16a8:	7e 10 90    	mov.w     [w14+46], w0
    16aa:	90 40 78    	mov.b     [w0], w1
    16ac:	1e 00 78    	mov.w     [w14], w0
    16ae:	01 48 78    	mov.b     w1, [w0]
            message++;
    16b0:	7e 10 90    	mov.w     [w14+46], w0
    16b2:	00 00 e8    	inc.w     w0, w0
    16b4:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr1++;
    16b6:	1e 0f e8    	inc.w     [w14], [w14]

000016b8 <.L43>:
        }
        i++;
    16b8:	4e 40 90    	mov.b     [w14+4], w0
    16ba:	00 40 e8    	inc.b     w0, w0
    16bc:	40 47 98    	mov.b     w0, [w14+4]

000016be <.L42>:
    16be:	4e 40 90    	mov.b     [w14+4], w0
    16c0:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    16c2:	ee ff 36    	bra       LEU, 0x16a0 <.L44>
    }
    i=0;
    16c4:	00 40 eb    	clr.b     w0
    16c6:	40 47 98    	mov.b     w0, [w14+4]
    message--; //SKETCHY!
    16c8:	7e 10 90    	mov.w     [w14+46], w0
    16ca:	00 00 e9    	dec.w     w0, w0
    16cc:	70 17 98    	mov.w     w0, [w14+46]
    while (i <17){
    16ce:	11 00 37    	bra       0x16f2 <.L45>

000016d0 <.L47>:
        if (*message){
    16d0:	7e 10 90    	mov.w     [w14+46], w0
    16d2:	10 40 78    	mov.b     [w0], w0
    16d4:	00 04 e0    	cp0.b     w0
    16d6:	0a 00 32    	bra       Z, 0x16ec <.L46>
            *newstrptr2=*message;
    16d8:	7e 10 90    	mov.w     [w14+46], w0
    16da:	90 40 78    	mov.b     [w0], w1
    16dc:	1e 00 90    	mov.w     [w14+2], w0
    16de:	01 48 78    	mov.b     w1, [w0]
            message++;
    16e0:	7e 10 90    	mov.w     [w14+46], w0
    16e2:	00 00 e8    	inc.w     w0, w0
    16e4:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr2++;
    16e6:	1e 00 90    	mov.w     [w14+2], w0
    16e8:	00 00 e8    	inc.w     w0, w0
    16ea:	10 07 98    	mov.w     w0, [w14+2]

000016ec <.L46>:
        }
        i++;
    16ec:	4e 40 90    	mov.b     [w14+4], w0
    16ee:	00 40 e8    	inc.b     w0, w0
    16f0:	40 47 98    	mov.b     w0, [w14+4]

000016f2 <.L45>:
    16f2:	4e 40 90    	mov.b     [w14+4], w0
    16f4:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    16f6:	ec ff 36    	bra       LEU, 0x16d0 <.L47>
    }
    lcd_print2(self, temp1, temp2);
    16f8:	4e 01 90    	mov.w     [w14+8], w2
    16fa:	be 00 90    	mov.w     [w14+6], w1
    16fc:	6e 10 90    	mov.w     [w14+44], w0
    16fe:	87 ff 07    	rcall     0x160e <_lcd_print2> <.LFB13> <.LFE12>
}
    1700:	00 80 fa    	ulnk      
    1702:	00 00 06    	return    

00001704 <_lcd_broadcast>:

void lcd_broadcast(char* message) {
    1704:	04 00 fa    	lnk       #0x4
    1706:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t i;
    for (i = 0; i < 3; i++)
    1708:	00 40 eb    	clr.b     w0
    170a:	00 4f 78    	mov.b     w0, [w14]
    170c:	08 00 37    	bra       0x171e <.L49>

0000170e <.L50>:
        lcd_print(&lcd[i], message);
    170e:	1e 80 fb    	ze        [w14], w0
    1710:	65 00 b9    	mul.su    w0, #0x5, w0
    1712:	80 00 78    	mov.w     w0, w1
    1714:	a0 80 20    	mov.w     #0x80a, w0
    1716:	00 80 40    	add.w     w1, w0, w0
    1718:	9e 00 90    	mov.w     [w14+2], w1
    171a:	ab ff 07    	rcall     0x1672 <_lcd_print> <.LFB14> <.LFE13>
    171c:	1e 4f e8    	inc.b     [w14], [w14]

0000171e <.L49>:
    171e:	1e 40 78    	mov.b     [w14], w0
    1720:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1722:	f5 ff 36    	bra       LEU, 0x170e <.L50>
}
    1724:	00 80 fa    	ulnk      
    1726:	00 00 06    	return    

00001728 <_itoa>:

char * itoa (int value, char *result, int base) {
    1728:	0e 00 fa    	lnk       #0xe
    172a:	40 07 98    	mov.w     w0, [w14+8]
    172c:	51 07 98    	mov.w     w1, [w14+10]
    172e:	62 07 98    	mov.w     w2, [w14+12]
    // check that the base if valid
    if (base < 2 || base > 36) { *result = '\0'; return result; }
    1730:	6e 00 90    	mov.w     [w14+12], w0
    1732:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1734:	04 00 34    	bra       LE, 0x173e <.L52>
    1736:	ee 00 90    	mov.w     [w14+12], w1
    1738:	40 02 20    	mov.w     #0x24, w0
    173a:	80 8f 50    	sub.w     w1, w0, [w15]
    173c:	05 00 34    	bra       LE, 0x1748 <.L53>

0000173e <.L52>:
    173e:	5e 00 90    	mov.w     [w14+10], w0
    1740:	80 40 eb    	clr.b     w1
    1742:	01 48 78    	mov.b     w1, [w0]
    1744:	5e 00 90    	mov.w     [w14+10], w0
    1746:	39 00 37    	bra       0x17ba <.L54>

00001748 <.L53>:

    char* ptr = result, *ptr1 = result, tmp_char;
    1748:	de 00 90    	mov.w     [w14+10], w1
    174a:	01 0f 78    	mov.w     w1, [w14]
    174c:	5e 01 90    	mov.w     [w14+10], w2
    174e:	12 07 98    	mov.w     w2, [w14+2]

00001750 <.L55>:
    int tmp_value;

    do {
        tmp_value = value;
    1750:	ce 00 90    	mov.w     [w14+8], w1
    1752:	21 07 98    	mov.w     w1, [w14+4]
        value /= base;
    1754:	ce 00 90    	mov.w     [w14+8], w1
    1756:	6e 00 90    	mov.w     [w14+12], w0
    1758:	00 01 78    	mov.w     w0, w2
    175a:	11 00 09    	repeat    #0x11
    175c:	82 00 d8    	div.sw    w1, w2
    175e:	40 07 98    	mov.w     w0, [w14+8]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
    1760:	ce 00 90    	mov.w     [w14+8], w1
    1762:	6e 00 90    	mov.w     [w14+12], w0
    1764:	00 88 b9    	mul.ss    w1, w0, w0
    1766:	00 00 78    	mov.w     w0, w0
    1768:	ae 00 90    	mov.w     [w14+4], w1
    176a:	00 80 50    	sub.w     w1, w0, w0
    176c:	30 02 b0    	add.w     #0x23, w0
    176e:	01 26 29    	mov.w     #0x9260, w1
    1770:	e1 40 78    	mov.b     [w1+w0], w1
    1772:	1e 00 78    	mov.w     [w14], w0
    1774:	01 48 78    	mov.b     w1, [w0]
    1776:	1e 0f e8    	inc.w     [w14], [w14]
    } while ( value );
    1778:	4e 00 90    	mov.w     [w14+8], w0
    177a:	00 00 e0    	cp0.w     w0
    177c:	e9 ff 3a    	bra       NZ, 0x1750 <.L55>

    // Apply negative sign
    if (tmp_value < 0) *ptr++ = '-';
    177e:	2e 00 90    	mov.w     [w14+4], w0
    1780:	00 00 e0    	cp0.w     w0
    1782:	04 00 3d    	bra       GE, 0x178c <.L56>
    1784:	1e 00 78    	mov.w     [w14], w0
    1786:	d1 c2 b3    	mov.b     #0x2d, w1
    1788:	01 48 78    	mov.b     w1, [w0]
    178a:	1e 0f e8    	inc.w     [w14], [w14]

0000178c <.L56>:
    *ptr-- = '\0';
    178c:	1e 00 78    	mov.w     [w14], w0
    178e:	80 40 eb    	clr.b     w1
    1790:	01 48 78    	mov.b     w1, [w0]
    1792:	1e 0f e9    	dec.w     [w14], [w14]
    while (ptr1 < ptr) {
    1794:	0e 00 37    	bra       0x17b2 <.L57>

00001796 <.L58>:
        tmp_char = *ptr;
    1796:	1e 00 78    	mov.w     [w14], w0
    1798:	90 40 78    	mov.b     [w0], w1
    179a:	61 47 98    	mov.b     w1, [w14+6]
        *ptr--= *ptr1;
    179c:	1e 00 90    	mov.w     [w14+2], w0
    179e:	90 40 78    	mov.b     [w0], w1
    17a0:	1e 00 78    	mov.w     [w14], w0
    17a2:	01 48 78    	mov.b     w1, [w0]
    17a4:	1e 0f e9    	dec.w     [w14], [w14]
        *ptr1++ = tmp_char;
    17a6:	1e 00 90    	mov.w     [w14+2], w0
    17a8:	6e 41 90    	mov.b     [w14+6], w2
    17aa:	02 48 78    	mov.b     w2, [w0]
    17ac:	1e 00 90    	mov.w     [w14+2], w0
    17ae:	00 00 e8    	inc.w     w0, w0
    17b0:	10 07 98    	mov.w     w0, [w14+2]

000017b2 <.L57>:
    17b2:	1e 00 90    	mov.w     [w14+2], w0
    17b4:	9e 0f 50    	sub.w     w0, [w14], [w15]
    17b6:	ef ff 39    	bra       NC, 0x1796 <.L58>
    }
    return result;
    17b8:	5e 00 90    	mov.w     [w14+10], w0

000017ba <.L54>:
}
    17ba:	00 80 fa    	ulnk      
    17bc:	00 00 06    	return    

000017be <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    17be:	08 00 fa    	lnk       #0x8
    17c0:	20 07 98    	mov.w     w0, [w14+4]
    17c2:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    17c4:	60 00 b8    	mul.uu    w0, #0x0, w0
    17c6:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    17c8:	05 00 37    	bra       0x17d4 <.L2>

000017ca <.L3>:
        __asm__("nop");
    17ca:	00 00 00    	nop       
        count +=1;
    17cc:	12 00 20    	mov.w     #0x1, w2
    17ce:	03 00 20    	mov.w     #0x0, w3
    17d0:	1e 0f 41    	add.w     w2, [w14], [w14]
    17d2:	5e 97 49    	addc.w    w3, [++w14], [w14--]

000017d4 <.L2>:
    17d4:	2e 00 90    	mov.w     [w14+4], w0
    17d6:	be 00 90    	mov.w     [w14+6], w1
    17d8:	1e 01 be    	mov.d     [w14], w2
    17da:	80 0f 51    	sub.w     w2, w0, [w15]
    17dc:	81 8f 59    	subb.w    w3, w1, [w15]
    17de:	f5 ff 39    	bra       NC, 0x17ca <.L3>
    }
}
    17e0:	00 80 fa    	ulnk      
    17e2:	00 00 06    	return    

000017e4 <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    17e4:	04 00 fa    	lnk       #0x4
    17e6:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    17e8:	1e 00 90    	mov.w     [w14+2], w0
    17ea:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    17ec:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    17ee:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    17f0:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    17f2:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    17f4:	80 13 80    	mov.w     0x270, w0
    17f6:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    17f8:	36 00 07    	rcall     0x1866 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    17fa:	00 80 fa    	ulnk      
    17fc:	00 00 06    	return    

000017fe <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    17fe:	02 00 fa    	lnk       #0x2
   int x = 0;
    1800:	00 00 eb    	clr.w     w0
    1802:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    1804:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    1806:	a0 00 20    	mov.w     #0xa, w0
    1808:	01 00 20    	mov.w     #0x0, w1
    180a:	d9 ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    180c:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    180e:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    1810:	07 00 37    	bra       0x1820 <.L6>

00001812 <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    1812:	10 00 20    	mov.w     #0x1, w0
    1814:	01 00 20    	mov.w     #0x0, w1
    1816:	d3 ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1818:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    181a:	1e 00 78    	mov.w     [w14], w0
    181c:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    181e:	05 00 3c    	bra       GT, 0x182a <.L9>

00001820 <.L6>:
    1820:	b0 13 80    	mov.w     0x276, w0
    1822:	61 00 60    	and.w     w0, #0x1, w0
    1824:	00 00 e0    	cp0.w     w0
    1826:	f5 ff 3a    	bra       NZ, 0x1812 <.L8>
    1828:	01 00 37    	bra       0x182c <.L7>

0000182a <.L9>:
      break;
    182a:	00 00 00    	nop       

0000182c <.L7>:
   }
   delay_by_nop(2);
    182c:	20 00 20    	mov.w     #0x2, w0
    182e:	01 00 20    	mov.w     #0x0, w1
    1830:	c6 ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1832:	00 80 fa    	ulnk      
    1834:	00 00 06    	return    

00001836 <_i2c_restart>:

void i2c_restart(void){
    1836:	02 00 fa    	lnk       #0x2
   int x = 0;
    1838:	00 00 eb    	clr.w     w0
    183a:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    183c:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    183e:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    1840:	07 00 37    	bra       0x1850 <.L11>

00001842 <.L13>:
      delay_by_nop(1);
    1842:	10 00 20    	mov.w     #0x1, w0
    1844:	01 00 20    	mov.w     #0x0, w1
    1846:	bb ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1848:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    184a:	1e 00 78    	mov.w     [w14], w0
    184c:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    184e:	05 00 3c    	bra       GT, 0x185a <.L14>

00001850 <.L11>:
    1850:	b0 13 80    	mov.w     0x276, w0
    1852:	62 00 60    	and.w     w0, #0x2, w0
    1854:	00 00 e0    	cp0.w     w0
    1856:	f5 ff 3a    	bra       NZ, 0x1842 <.L13>
    1858:	01 00 37    	bra       0x185c <.L12>

0000185a <.L14>:
    185a:	00 00 00    	nop       

0000185c <.L12>:
   }
   delay_by_nop(2);
    185c:	20 00 20    	mov.w     #0x2, w0
    185e:	01 00 20    	mov.w     #0x0, w1
    1860:	ae ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1862:	00 80 fa    	ulnk      
    1864:	00 00 06    	return    

00001866 <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    1866:	02 00 fa    	lnk       #0x2
   int x = 0;
    1868:	00 00 eb    	clr.w     w0
    186a:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    186c:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    186e:	07 00 37    	bra       0x187e <.L16>

00001870 <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    1870:	10 00 20    	mov.w     #0x1, w0
    1872:	01 00 20    	mov.w     #0x0, w1
    1874:	a4 ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    1876:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    1878:	1e 00 78    	mov.w     [w14], w0
    187a:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    187c:	05 00 3c    	bra       GT, 0x1888 <.L19>

0000187e <.L16>:
    187e:	b0 13 80    	mov.w     0x276, w0
    1880:	64 00 60    	and.w     w0, #0x4, w0
    1882:	00 00 e0    	cp0.w     w0
    1884:	f5 ff 3a    	bra       NZ, 0x1870 <.L18>
    1886:	01 00 37    	bra       0x188a <.L17>

00001888 <.L19>:
    1888:	00 00 00    	nop       

0000188a <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    188a:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    188c:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    188e:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    1890:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    1892:	40 01 20    	mov.w     #0x14, w0
    1894:	01 00 20    	mov.w     #0x0, w1
    1896:	93 ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1898:	00 80 fa    	ulnk      
    189a:	00 00 06    	return    

0000189c <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    189c:	04 00 fa    	lnk       #0x4
    189e:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    18a0:	00 00 00    	nop       

000018a2 <.L21>:
    18a2:	c0 13 80    	mov.w     0x278, w0
    18a4:	61 00 60    	and.w     w0, #0x1, w0
    18a6:	00 00 e0    	cp0.w     w0
    18a8:	fc ff 3a    	bra       NZ, 0x18a2 <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    18aa:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    18ac:	1e 00 90    	mov.w     [w14+2], w0
    18ae:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    18b0:	00 00 eb    	clr.w     w0
    18b2:	00 0f 78    	mov.w     w0, [w14]
    18b4:	09 00 37    	bra       0x18c8 <.L22>

000018b6 <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    18b6:	c1 13 80    	mov.w     0x278, w1
    18b8:	00 00 24    	mov.w     #0x4000, w0
    18ba:	00 80 60    	and.w     w1, w0, w0
    18bc:	00 00 e0    	cp0.w     w0
    18be:	09 00 32    	bra       Z, 0x18d2 <.L29>
      delay_by_nop(1); }
    18c0:	10 00 20    	mov.w     #0x1, w0
    18c2:	01 00 20    	mov.w     #0x0, w1
    18c4:	7c ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    18c6:	1e 0f e8    	inc.w     [w14], [w14]

000018c8 <.L22>:
    18c8:	30 1f 20    	mov.w     #0x1f3, w0
    18ca:	9e 00 78    	mov.w     [w14], w1
    18cc:	80 8f 50    	sub.w     w1, w0, [w15]
    18ce:	f3 ff 34    	bra       LE, 0x18b6 <.L25>
    18d0:	01 00 37    	bra       0x18d4 <.L24>

000018d2 <.L29>:
    18d2:	00 00 00    	nop       

000018d4 <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    18d4:	40 1f 20    	mov.w     #0x1f4, w0
    18d6:	9e 00 78    	mov.w     [w14], w1
    18d8:	80 8f 50    	sub.w     w1, w0, [w15]
    18da:	02 00 3a    	bra       NZ, 0x18e0 <.L26>
        return(1); }    // return 1 to indicate failure
    18dc:	10 c0 b3    	mov.b     #0x1, w0
    18de:	0c 00 37    	bra       0x18f8 <.L27>

000018e0 <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    18e0:	c1 13 80    	mov.w     0x278, w1
    18e2:	00 00 28    	mov.w     #0x8000, w0
    18e4:	00 80 60    	and.w     w1, w0, w0
    18e6:	00 00 e0    	cp0.w     w0
    18e8:	03 00 32    	bra       Z, 0x18f0 <.L28>
      reset_i2c_bus();
    18ea:	bd ff 07    	rcall     0x1866 <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    18ec:	10 c0 b3    	mov.b     #0x1, w0
    18ee:	04 00 37    	bra       0x18f8 <.L27>

000018f0 <.L28>:

   delay_by_nop(2);
    18f0:	20 00 20    	mov.w     #0x2, w0
    18f2:	01 00 20    	mov.w     #0x0, w1
    18f4:	64 ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    18f6:	00 40 eb    	clr.b     w0

000018f8 <.L27>:
}
    18f8:	00 80 fa    	ulnk      
    18fa:	00 00 06    	return    

000018fc <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    18fc:	04 00 fa    	lnk       #0x4
   int i = 0;
    18fe:	00 00 eb    	clr.w     w0
    1900:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1902:	00 40 eb    	clr.b     w0
    1904:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1906:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    1908:	05 00 37    	bra       0x1914 <.L31>

0000190a <.L33>:
      i ++;
    190a:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    190c:	00 7d 20    	mov.w     #0x7d0, w0
    190e:	9e 00 78    	mov.w     [w14], w1
    1910:	80 8f 50    	sub.w     w1, w0, [w15]
    1912:	05 00 3c    	bra       GT, 0x191e <.L34>

00001914 <.L31>:
    1914:	c0 13 80    	mov.w     0x278, w0
    1916:	62 00 60    	and.w     w0, #0x2, w0
    1918:	00 00 e0    	cp0.w     w0
    191a:	f7 ff 32    	bra       Z, 0x190a <.L33>
    191c:	01 00 37    	bra       0x1920 <.L32>

0000191e <.L34>:
    191e:	00 00 00    	nop       

00001920 <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    1920:	80 13 80    	mov.w     0x270, w0
    1922:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    1924:	2e 40 90    	mov.b     [w14+2], w0
}
    1926:	00 80 fa    	ulnk      
    1928:	00 00 06    	return    

0000192a <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    192a:	04 00 fa    	lnk       #0x4
   int i = 0;
    192c:	00 00 eb    	clr.w     w0
    192e:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1930:	00 40 eb    	clr.b     w0
    1932:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1934:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    1936:	05 00 37    	bra       0x1942 <.L36>

00001938 <.L38>:
      i++;
    1938:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    193a:	00 7d 20    	mov.w     #0x7d0, w0
    193c:	9e 00 78    	mov.w     [w14], w1
    193e:	80 8f 50    	sub.w     w1, w0, [w15]
    1940:	05 00 3c    	bra       GT, 0x194c <.L39>

00001942 <.L36>:
    1942:	c0 13 80    	mov.w     0x278, w0
    1944:	62 00 60    	and.w     w0, #0x2, w0
    1946:	00 00 e0    	cp0.w     w0
    1948:	f7 ff 32    	bra       Z, 0x1938 <.L38>
    194a:	01 00 37    	bra       0x194e <.L37>

0000194c <.L39>:
    194c:	00 00 00    	nop       

0000194e <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    194e:	80 13 80    	mov.w     0x270, w0
    1950:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    1952:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    1954:	a0 00 20    	mov.w     #0xa, w0
    1956:	01 00 20    	mov.w     #0x0, w1
    1958:	32 ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    195a:	2e 40 90    	mov.b     [w14+2], w0
}
    195c:	00 80 fa    	ulnk      
    195e:	00 00 06    	return    

00001960 <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    1960:	04 00 fa    	lnk       #0x4
   int i = 0;
    1962:	00 00 eb    	clr.w     w0
    1964:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1966:	00 40 eb    	clr.b     w0
    1968:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    196a:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    196c:	05 00 37    	bra       0x1978 <.L41>

0000196e <.L43>:
      i++;
    196e:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1970:	00 7d 20    	mov.w     #0x7d0, w0
    1972:	9e 00 78    	mov.w     [w14], w1
    1974:	80 8f 50    	sub.w     w1, w0, [w15]
    1976:	05 00 3c    	bra       GT, 0x1982 <.L44>

00001978 <.L41>:
    1978:	c0 13 80    	mov.w     0x278, w0
    197a:	62 00 60    	and.w     w0, #0x2, w0
    197c:	00 00 e0    	cp0.w     w0
    197e:	f7 ff 32    	bra       Z, 0x196e <.L43>
    1980:	01 00 37    	bra       0x1984 <.L42>

00001982 <.L44>:
    1982:	00 00 00    	nop       

00001984 <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    1984:	80 13 80    	mov.w     0x270, w0
    1986:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    1988:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    198a:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    198c:	a0 00 20    	mov.w     #0xa, w0
    198e:	01 00 20    	mov.w     #0x0, w1
    1990:	16 ff 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    1992:	2e 40 90    	mov.b     [w14+2], w0
}
    1994:	00 80 fa    	ulnk      
    1996:	00 00 06    	return    

00001998 <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    1998:	04 00 fa    	lnk       #0x4
    199a:	00 4f 78    	mov.b     w0, [w14]
    199c:	11 47 98    	mov.b     w1, [w14+1]
    199e:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    19a0:	2e ff 07    	rcall     0x17fe <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    19a2:	1e 00 fb    	se        [w14], w0
    19a4:	80 00 78    	mov.w     w0, w1
    19a6:	e0 ff 2f    	mov.w     #0xfffe, w0
    19a8:	00 80 60    	and.w     w1, w0, w0
    19aa:	78 ff 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    19ac:	1e 40 90    	mov.b     [w14+1], w0
    19ae:	00 00 fb    	se        w0, w0
    19b0:	75 ff 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    19b2:	2e 40 90    	mov.b     [w14+2], w0
    19b4:	00 00 fb    	se        w0, w0
    19b6:	72 ff 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    19b8:	56 ff 07    	rcall     0x1866 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    19ba:	00 80 fa    	ulnk      
    19bc:	00 00 06    	return    

000019be <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    19be:	04 00 fa    	lnk       #0x4
    19c0:	20 47 98    	mov.b     w0, [w14+2]
    19c2:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    19c4:	1c ff 07    	rcall     0x17fe <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    19c6:	2e 40 90    	mov.b     [w14+2], w0
    19c8:	00 00 fb    	se        w0, w0
    19ca:	68 ff 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    19cc:	3e 40 90    	mov.b     [w14+3], w0
    19ce:	00 00 fb    	se        w0, w0
    19d0:	65 ff 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    19d2:	a0 00 20    	mov.w     #0xa, w0
    19d4:	01 00 20    	mov.w     #0x0, w1
    19d6:	f3 fe 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   i2c_restart();
    19d8:	2e ff 07    	rcall     0x1836 <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    19da:	2e 40 90    	mov.b     [w14+2], w0
    19dc:	00 04 a0    	bset.b    w0, #0x0
    19de:	00 00 fb    	se        w0, w0
    19e0:	5d ff 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    19e2:	8c ff 07    	rcall     0x18fc <_i2c_read> <.LFB6> <.LFE5>
    19e4:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    19e6:	3f ff 07    	rcall     0x1866 <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    19e8:	1e 40 78    	mov.b     [w14], w0
}
    19ea:	00 80 fa    	ulnk      
    19ec:	00 00 06    	return    

000019ee <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is not there, 0 means it is there
unsigned char I2Cpoll(char addr){
    19ee:	04 00 fa    	lnk       #0x4
    19f0:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    19f2:	00 40 eb    	clr.b     w0
    19f4:	00 4f 78    	mov.b     w0, [w14]
   i2c_start();
    19f6:	03 ff 07    	rcall     0x17fe <_i2c_start> <.LFB2> <.LFE1>
   temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    19f8:	2e 40 90    	mov.b     [w14+2], w0
    19fa:	00 00 fb    	se        w0, w0
    19fc:	80 00 78    	mov.w     w0, w1
    19fe:	e0 ff 2f    	mov.w     #0xfffe, w0
    1a00:	00 80 60    	and.w     w1, w0, w0
    1a02:	4c ff 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
    1a04:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c_bus();
    1a06:	2f ff 07    	rcall     0x1866 <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    1a08:	1e 40 78    	mov.b     [w14], w0
}
    1a0a:	00 80 fa    	ulnk      
    1a0c:	00 00 06    	return    

00001a0e <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    1a0e:	08 00 fa    	lnk       #0x8
    1a10:	20 47 98    	mov.b     w0, [w14+2]
    1a12:	21 07 98    	mov.w     w1, [w14+4]
    1a14:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    1a16:	00 40 eb    	clr.b     w0
    1a18:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    1a1a:	f1 fe 07    	rcall     0x17fe <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    1a1c:	2e 40 90    	mov.b     [w14+2], w0
    1a1e:	00 00 fb    	se        w0, w0
    1a20:	80 00 78    	mov.w     w0, w1
    1a22:	e0 ff 2f    	mov.w     #0xfffe, w0
    1a24:	00 80 60    	and.w     w1, w0, w0
    1a26:	3a ff 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
    1a28:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    1a2a:	00 40 eb    	clr.b     w0
    1a2c:	10 47 98    	mov.b     w0, [w14+1]
    1a2e:	0d 00 37    	bra       0x1a4a <.L49>

00001a30 <.L50>:
    err |= send_i2c_byte(dat[j]);
    1a30:	1e 40 90    	mov.b     [w14+1], w0
    1a32:	00 80 fb    	ze        w0, w0
    1a34:	ae 00 90    	mov.w     [w14+4], w1
    1a36:	00 80 40    	add.w     w1, w0, w0
    1a38:	10 40 78    	mov.b     [w0], w0
    1a3a:	00 00 fb    	se        w0, w0
    1a3c:	2f ff 07    	rcall     0x189c <_send_i2c_byte> <.LFB5> <.LFE4>
    1a3e:	9e 40 78    	mov.b     [w14], w1
    1a40:	01 40 70    	ior.b     w0, w1, w0
    1a42:	00 4f 78    	mov.b     w0, [w14]
    1a44:	1e 40 90    	mov.b     [w14+1], w0
    1a46:	00 40 e8    	inc.b     w0, w0
    1a48:	10 47 98    	mov.b     w0, [w14+1]

00001a4a <.L49>:
    1a4a:	9e 40 90    	mov.b     [w14+1], w1
    1a4c:	6e 40 90    	mov.b     [w14+6], w0
    1a4e:	80 cf 50    	sub.b     w1, w0, [w15]
    1a50:	ef ff 39    	bra       NC, 0x1a30 <.L50>
  }
  reset_i2c_bus();
    1a52:	09 ff 07    	rcall     0x1866 <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    1a54:	1e 40 78    	mov.b     [w14], w0
}
    1a56:	00 80 fa    	ulnk      
    1a58:	00 00 06    	return    
Disassembly of section .isr.text:

00001a5a <__CNInterrupt>:
    1a5a:	32 00 f8    	push      0x32
    1a5c:	34 00 f8    	push      0x34
    1a5e:	88 1f 78    	mov.w     w8, [w15++]
    1a60:	18 00 20    	mov.w     #0x1, w8
    1a62:	a8 01 88    	mov.w     w8, 0x34
    1a64:	08 20 20    	mov.w     #0x200, w8
    1a66:	98 01 88    	mov.w     w8, 0x32
    1a68:	4f 04 78    	mov.w     [--w15], w8
    1a6a:	00 00 fa    	lnk       #0x0
    1a6c:	86 60 a9    	bclr.b    0x86, #0x3
    1a6e:	06 21 ef    	clr.w     0x106
    1a70:	84 e0 a9    	bclr.b    0x84, #0x7
    1a72:	11 e1 a8    	bset.b    0x111, #0x7
    1a74:	dc e2 a8    	bset.b    0x2dc, #0x7
    1a76:	00 80 fa    	ulnk      
    1a78:	34 00 f9    	pop       0x34
    1a7a:	32 00 f9    	pop       0x32
    1a7c:	00 40 06    	retfie    

00001a7e <__T2Interrupt>:
    1a7e:	36 00 f8    	push      0x36
    1a80:	80 9f be    	mov.d     w0, [w15++]
    1a82:	82 9f be    	mov.d     w2, [w15++]
    1a84:	84 9f be    	mov.d     w4, [w15++]
    1a86:	86 9f be    	mov.d     w6, [w15++]
    1a88:	32 00 f8    	push      0x32
    1a8a:	34 00 f8    	push      0x34
    1a8c:	10 00 20    	mov.w     #0x1, w0
    1a8e:	a0 01 88    	mov.w     w0, 0x34
    1a90:	00 20 20    	mov.w     #0x200, w0
    1a92:	90 01 88    	mov.w     w0, 0x32
    1a94:	00 00 fa    	lnk       #0x0
    1a96:	84 e0 a9    	bclr.b    0x84, #0x7
    1a98:	11 e1 a9    	bclr.b    0x111, #0x7
    1a9a:	dc e2 a9    	bclr.b    0x2dc, #0x7
    1a9c:	d1 16 80    	mov.w     0x2da, w1
    1a9e:	00 02 20    	mov.w     #0x20, w0
    1aa0:	00 80 60    	and.w     w1, w0, w0
    1aa2:	00 00 e0    	cp0.w     w0
    1aa4:	0e 00 3a    	bra       NZ, 0x1ac2 <.L5>
    1aa6:	04 c8 bf    	mov.b     0x804, WREG
    1aa8:	00 80 fb    	ze        w0, w0
    1aaa:	80 00 e8    	inc.w     w0, w1
    1aac:	70 00 28    	mov.w     #0x8007, w0
    1aae:	00 80 60    	and.w     w1, w0, w0
    1ab0:	00 00 e0    	cp0.w     w0
    1ab2:	04 00 3d    	bra       GE, 0x1abc <.L6>
    1ab4:	00 00 e9    	dec.w     w0, w0
    1ab6:	81 ff 2f    	mov.w     #0xfff8, w1
    1ab8:	00 80 70    	ior.w     w1, w0, w0
    1aba:	00 00 e8    	inc.w     w0, w0

00001abc <.L6>:
    1abc:	00 40 78    	mov.b     w0, w0
    1abe:	04 e8 b7    	mov.b     WREG, 0x804
    1ac0:	07 00 37    	bra       0x1ad0 <.L7>

00001ac2 <.L5>:
    1ac2:	d0 16 80    	mov.w     0x2da, w0
    1ac4:	70 00 60    	and.w     w0, #0x10, w0
    1ac6:	00 00 e0    	cp0.w     w0
    1ac8:	03 00 3a    	bra       NZ, 0x1ad0 <.L7>
    1aca:	04 c8 bf    	mov.b     0x804, WREG
    1acc:	00 40 e9    	dec.b     w0, w0
    1ace:	04 e8 b7    	mov.b     WREG, 0x804

00001ad0 <.L7>:
    1ad0:	50 17 80    	mov.w     0x2ea, w0
    1ad2:	70 00 60    	and.w     w0, #0x10, w0
    1ad4:	00 00 e0    	cp0.w     w0
    1ad6:	0e 00 3a    	bra       NZ, 0x1af4 <.L8>
    1ad8:	05 c8 bf    	mov.b     0x805, WREG
    1ada:	00 80 fb    	ze        w0, w0
    1adc:	80 00 e8    	inc.w     w0, w1
    1ade:	70 00 28    	mov.w     #0x8007, w0
    1ae0:	00 80 60    	and.w     w1, w0, w0
    1ae2:	00 00 e0    	cp0.w     w0
    1ae4:	04 00 3d    	bra       GE, 0x1aee <.L9>
    1ae6:	00 00 e9    	dec.w     w0, w0
    1ae8:	81 ff 2f    	mov.w     #0xfff8, w1
    1aea:	00 80 70    	ior.w     w1, w0, w0
    1aec:	00 00 e8    	inc.w     w0, w0

00001aee <.L9>:
    1aee:	00 40 78    	mov.b     w0, w0
    1af0:	05 e8 b7    	mov.b     WREG, 0x805
    1af2:	08 00 37    	bra       0x1b04 <.L10>

00001af4 <.L8>:
    1af4:	51 17 80    	mov.w     0x2ea, w1
    1af6:	00 02 20    	mov.w     #0x20, w0
    1af8:	00 80 60    	and.w     w1, w0, w0
    1afa:	00 00 e0    	cp0.w     w0
    1afc:	03 00 3a    	bra       NZ, 0x1b04 <.L10>
    1afe:	05 c8 bf    	mov.b     0x805, WREG
    1b00:	00 40 e9    	dec.b     w0, w0
    1b02:	05 e8 b7    	mov.b     WREG, 0x805

00001b04 <.L10>:
    1b04:	51 16 80    	mov.w     0x2ca, w1
    1b06:	00 00 28    	mov.w     #0x8000, w0
    1b08:	00 80 60    	and.w     w1, w0, w0
    1b0a:	00 00 e0    	cp0.w     w0
    1b0c:	0e 00 3a    	bra       NZ, 0x1b2a <.L11>
    1b0e:	06 c8 bf    	mov.b     0x806, WREG
    1b10:	00 80 fb    	ze        w0, w0
    1b12:	80 00 e8    	inc.w     w0, w1
    1b14:	70 00 28    	mov.w     #0x8007, w0
    1b16:	00 80 60    	and.w     w1, w0, w0
    1b18:	00 00 e0    	cp0.w     w0
    1b1a:	04 00 3d    	bra       GE, 0x1b24 <.L12>
    1b1c:	00 00 e9    	dec.w     w0, w0
    1b1e:	81 ff 2f    	mov.w     #0xfff8, w1
    1b20:	00 80 70    	ior.w     w1, w0, w0
    1b22:	00 00 e8    	inc.w     w0, w0

00001b24 <.L12>:
    1b24:	00 40 78    	mov.b     w0, w0
    1b26:	06 e8 b7    	mov.b     WREG, 0x806
    1b28:	07 00 37    	bra       0x1b38 <.L13>

00001b2a <.L11>:
    1b2a:	50 17 80    	mov.w     0x2ea, w0
    1b2c:	68 00 60    	and.w     w0, #0x8, w0
    1b2e:	00 00 e0    	cp0.w     w0
    1b30:	03 00 3a    	bra       NZ, 0x1b38 <.L13>
    1b32:	06 c8 bf    	mov.b     0x806, WREG
    1b34:	00 40 e9    	dec.b     w0, w0
    1b36:	06 e8 b7    	mov.b     WREG, 0x806

00001b38 <.L13>:
    1b38:	d1 16 80    	mov.w     0x2da, w1
    1b3a:	00 10 20    	mov.w     #0x100, w0
    1b3c:	00 80 60    	and.w     w1, w0, w0
    1b3e:	00 00 e0    	cp0.w     w0
    1b40:	0e 00 3a    	bra       NZ, 0x1b5e <.L14>
    1b42:	07 c8 bf    	mov.b     0x807, WREG
    1b44:	00 80 fb    	ze        w0, w0
    1b46:	80 00 e8    	inc.w     w0, w1
    1b48:	70 00 28    	mov.w     #0x8007, w0
    1b4a:	00 80 60    	and.w     w1, w0, w0
    1b4c:	00 00 e0    	cp0.w     w0
    1b4e:	04 00 3d    	bra       GE, 0x1b58 <.L15>
    1b50:	00 00 e9    	dec.w     w0, w0
    1b52:	81 ff 2f    	mov.w     #0xfff8, w1
    1b54:	00 80 70    	ior.w     w1, w0, w0
    1b56:	00 00 e8    	inc.w     w0, w0

00001b58 <.L15>:
    1b58:	00 40 78    	mov.b     w0, w0
    1b5a:	07 e8 b7    	mov.b     WREG, 0x807
    1b5c:	08 00 37    	bra       0x1b6e <.L16>

00001b5e <.L14>:
    1b5e:	d1 16 80    	mov.w     0x2da, w1
    1b60:	00 80 20    	mov.w     #0x800, w0
    1b62:	00 80 60    	and.w     w1, w0, w0
    1b64:	00 00 e0    	cp0.w     w0
    1b66:	03 00 3a    	bra       NZ, 0x1b6e <.L16>
    1b68:	07 c8 bf    	mov.b     0x807, WREG
    1b6a:	00 40 e9    	dec.b     w0, w0
    1b6c:	07 e8 b7    	mov.b     WREG, 0x807

00001b6e <.L16>:
    1b6e:	d1 16 80    	mov.w     0x2da, w1
    1b70:	00 20 20    	mov.w     #0x200, w0
    1b72:	00 80 60    	and.w     w1, w0, w0
    1b74:	00 00 e0    	cp0.w     w0
    1b76:	0e 00 3a    	bra       NZ, 0x1b94 <.L17>
    1b78:	08 c8 bf    	mov.b     0x808, WREG
    1b7a:	00 80 fb    	ze        w0, w0
    1b7c:	80 00 e8    	inc.w     w0, w1
    1b7e:	70 00 28    	mov.w     #0x8007, w0
    1b80:	00 80 60    	and.w     w1, w0, w0
    1b82:	00 00 e0    	cp0.w     w0
    1b84:	04 00 3d    	bra       GE, 0x1b8e <.L18>
    1b86:	00 00 e9    	dec.w     w0, w0
    1b88:	81 ff 2f    	mov.w     #0xfff8, w1
    1b8a:	00 80 70    	ior.w     w1, w0, w0
    1b8c:	00 00 e8    	inc.w     w0, w0

00001b8e <.L18>:
    1b8e:	00 40 78    	mov.b     w0, w0
    1b90:	08 e8 b7    	mov.b     WREG, 0x808
    1b92:	08 00 37    	bra       0x1ba4 <.L19>

00001b94 <.L17>:
    1b94:	d1 16 80    	mov.w     0x2da, w1
    1b96:	00 40 20    	mov.w     #0x400, w0
    1b98:	00 80 60    	and.w     w1, w0, w0
    1b9a:	00 00 e0    	cp0.w     w0
    1b9c:	03 00 3a    	bra       NZ, 0x1ba4 <.L19>
    1b9e:	08 c8 bf    	mov.b     0x808, WREG
    1ba0:	00 40 e9    	dec.b     w0, w0
    1ba2:	08 e8 b7    	mov.b     WREG, 0x808

00001ba4 <.L19>:
    1ba4:	47 00 07    	rcall     0x1c34 <_updateDisplay> <.LFB3> <.LFE0>
    1ba6:	00 80 fa    	ulnk      
    1ba8:	34 00 f9    	pop       0x34
    1baa:	32 00 f9    	pop       0x32
    1bac:	4f 03 be    	mov.d     [--w15], w6
    1bae:	4f 02 be    	mov.d     [--w15], w4
    1bb0:	4f 01 be    	mov.d     [--w15], w2
    1bb2:	4f 00 be    	mov.d     [--w15], w0
    1bb4:	36 00 f9    	pop       0x36
    1bb6:	00 40 06    	retfie    
Disassembly of section .text:

00001bb8 <_main>:
    1bb8:	20 00 fa    	lnk       #0x20
    1bba:	8f 00 07    	rcall     0x1cda <_init_elecanisms> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
    1bbc:	6b 00 07    	rcall     0x1c94 <_toggleSwitchSetup> <.LFB4> <.LFE3>
    1bbe:	80 3e 20    	mov.w     #0x3e8, w0
    1bc0:	11 fe 07    	rcall     0x17e4 <_i2c_init> <.LFB1> <.LFE0>
    1bc2:	12 c4 b3    	mov.b     #0x41, w2
    1bc4:	61 c0 b3    	mov.b     #0x6, w1
    1bc6:	0e 00 78    	mov.w     w14, w0
    1bc8:	31 fc 07    	rcall     0x142c <_lcd_init> <.LFB5> <.LFE4>
    1bca:	0e 00 78    	mov.w     w14, w0
    1bcc:	c3 fc 07    	rcall     0x1554 <_lcd_clear> <.LFB8> <.LFE7>
    1bce:	82 2a 29    	mov.w     #0x92a8, w2
    1bd0:	f1 2a 29    	mov.w     #0x92af, w1
    1bd2:	0e 00 78    	mov.w     w14, w0
    1bd4:	1c fd 07    	rcall     0x160e <_lcd_print2> <.LFB13> <.LFE12>
    1bd6:	00 53 27    	mov.w     #0x7530, w0
    1bd8:	01 00 20    	mov.w     #0x0, w1
    1bda:	f1 fd 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1bdc:	a0 2b 29    	mov.w     #0x92ba, w0
    1bde:	e5 00 47    	add.w     w14, #0x5, w1
    1be0:	08 00 09    	repeat    #0x8
    1be2:	b0 58 78    	mov.b     [w0++], [w1++]
    1be4:	90 00 b1    	sub.w     #0x9, w0
    1be6:	65 00 47    	add.w     w14, #0x5, w0
    1be8:	10 40 88    	mov.w     w0, 0x802
    1bea:	30 2c 29    	mov.w     #0x92c3, w0
    1bec:	ee 00 47    	add.w     w14, #0xe, w1
    1bee:	0f 00 09    	repeat    #0xf
    1bf0:	b0 58 78    	mov.b     [w0++], [w1++]
    1bf2:	00 01 b1    	sub.w     #0x10, w0
    1bf4:	00 40 eb    	clr.b     w0
    1bf6:	60 5f 98    	mov.b     w0, [w14+30]
    1bf8:	6e 00 47    	add.w     w14, #0xe, w0
    1bfa:	00 40 88    	mov.w     w0, 0x800
    1bfc:	00 40 80    	mov.w     0x800, w0
    1bfe:	92 2b 29    	mov.w     #0x92b9, w2
    1c00:	80 00 78    	mov.w     w0, w1
    1c02:	0e 00 78    	mov.w     w14, w0
    1c04:	04 fd 07    	rcall     0x160e <_lcd_print2> <.LFB13> <.LFE12>
    1c06:	00 02 20    	mov.w     #0x20, w0
    1c08:	80 08 88    	mov.w     w0, 0x110
    1c0a:	00 71 22    	mov.w     #0x2710, w0
    1c0c:	60 08 88    	mov.w     w0, 0x10c
    1c0e:	06 21 ef    	clr.w     0x106
    1c10:	84 e0 a9    	bclr.b    0x84, #0x7
    1c12:	94 e0 a8    	bset.b    0x94, #0x7
    1c14:	11 e1 a9    	bclr.b    0x111, #0x7
    1c16:	04 68 ef    	clr.b     0x804
    1c18:	05 68 ef    	clr.b     0x805
    1c1a:	06 68 ef    	clr.b     0x806
    1c1c:	07 68 ef    	clr.b     0x807
    1c1e:	08 68 ef    	clr.b     0x808
    1c20:	09 00 07    	rcall     0x1c34 <_updateDisplay> <.LFB3> <.LFE0>

00001c22 <.L2>:
    1c22:	00 40 80    	mov.w     0x800, w0
    1c24:	92 2b 29    	mov.w     #0x92b9, w2
    1c26:	80 00 78    	mov.w     w0, w1
    1c28:	0e 00 78    	mov.w     w14, w0
    1c2a:	f1 fc 07    	rcall     0x160e <_lcd_print2> <.LFB13> <.LFE12>
    1c2c:	00 53 27    	mov.w     #0x7530, w0
    1c2e:	01 00 20    	mov.w     #0x0, w1
    1c30:	c6 fd 07    	rcall     0x17be <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1c32:	f7 ff 37    	bra       0x1c22 <.L2>

00001c34 <_updateDisplay>:
    1c34:	00 00 fa    	lnk       #0x0
    1c36:	00 40 80    	mov.w     0x800, w0
    1c38:	65 00 40    	add.w     w0, #0x5, w0
    1c3a:	12 40 80    	mov.w     0x802, w2
    1c3c:	41 80 20    	mov.w     #0x804, w1
    1c3e:	91 40 78    	mov.b     [w1], w1
    1c40:	81 80 fb    	ze        w1, w1
    1c42:	81 00 41    	add.w     w2, w1, w1
    1c44:	91 40 78    	mov.b     [w1], w1
    1c46:	01 48 78    	mov.b     w1, [w0]
    1c48:	00 40 80    	mov.w     0x800, w0
    1c4a:	66 00 40    	add.w     w0, #0x6, w0
    1c4c:	12 40 80    	mov.w     0x802, w2
    1c4e:	51 80 20    	mov.w     #0x805, w1
    1c50:	91 40 78    	mov.b     [w1], w1
    1c52:	81 80 fb    	ze        w1, w1
    1c54:	81 00 41    	add.w     w2, w1, w1
    1c56:	91 40 78    	mov.b     [w1], w1
    1c58:	01 48 78    	mov.b     w1, [w0]
    1c5a:	00 40 80    	mov.w     0x800, w0
    1c5c:	67 00 40    	add.w     w0, #0x7, w0
    1c5e:	12 40 80    	mov.w     0x802, w2
    1c60:	61 80 20    	mov.w     #0x806, w1
    1c62:	91 40 78    	mov.b     [w1], w1
    1c64:	81 80 fb    	ze        w1, w1
    1c66:	81 00 41    	add.w     w2, w1, w1
    1c68:	91 40 78    	mov.b     [w1], w1
    1c6a:	01 48 78    	mov.b     w1, [w0]
    1c6c:	00 40 80    	mov.w     0x800, w0
    1c6e:	68 00 40    	add.w     w0, #0x8, w0
    1c70:	12 40 80    	mov.w     0x802, w2
    1c72:	71 80 20    	mov.w     #0x807, w1
    1c74:	91 40 78    	mov.b     [w1], w1
    1c76:	81 80 fb    	ze        w1, w1
    1c78:	81 00 41    	add.w     w2, w1, w1
    1c7a:	91 40 78    	mov.b     [w1], w1
    1c7c:	01 48 78    	mov.b     w1, [w0]
    1c7e:	00 40 80    	mov.w     0x800, w0
    1c80:	69 00 40    	add.w     w0, #0x9, w0
    1c82:	12 40 80    	mov.w     0x802, w2
    1c84:	81 80 20    	mov.w     #0x808, w1
    1c86:	91 40 78    	mov.b     [w1], w1
    1c88:	81 80 fb    	ze        w1, w1
    1c8a:	81 00 41    	add.w     w2, w1, w1
    1c8c:	91 40 78    	mov.b     [w1], w1
    1c8e:	01 48 78    	mov.b     w1, [w0]
    1c90:	00 80 fa    	ulnk      
    1c92:	00 00 06    	return    

00001c94 <_toggleSwitchSetup>:
    1c94:	00 00 fa    	lnk       #0x0
    1c96:	d8 a2 a8    	bset.b    0x2d8, #0x5
    1c98:	d8 82 a8    	bset.b    0x2d8, #0x4
    1c9a:	e8 82 a8    	bset.b    0x2e8, #0x4
    1c9c:	e8 a2 a8    	bset.b    0x2e8, #0x5
    1c9e:	c9 e2 a8    	bset.b    0x2c9, #0x7
    1ca0:	e8 62 a8    	bset.b    0x2e8, #0x3
    1ca2:	d9 02 a8    	bset.b    0x2d9, #0x0
    1ca4:	d9 62 a8    	bset.b    0x2d9, #0x3
    1ca6:	d9 22 a8    	bset.b    0x2d9, #0x1
    1ca8:	d9 42 a8    	bset.b    0x2d9, #0x2
    1caa:	6f c0 a8    	bset.b    0x6f, #0x6
    1cac:	6f a0 a8    	bset.b    0x6f, #0x5
    1cae:	70 20 a8    	bset.b    0x70, #0x1
    1cb0:	70 40 a8    	bset.b    0x70, #0x2
    1cb2:	6f 80 a8    	bset.b    0x6f, #0x4
    1cb4:	76 e0 a8    	bset.b    0x76, #0x7
    1cb6:	74 a0 a8    	bset.b    0x74, #0x5
    1cb8:	75 00 a8    	bset.b    0x75, #0x0
    1cba:	74 c0 a8    	bset.b    0x74, #0x6
    1cbc:	74 e0 a8    	bset.b    0x74, #0x7
    1cbe:	63 c0 a8    	bset.b    0x63, #0x6
    1cc0:	63 a0 a8    	bset.b    0x63, #0x5
    1cc2:	64 20 a8    	bset.b    0x64, #0x1
    1cc4:	64 40 a8    	bset.b    0x64, #0x2
    1cc6:	63 80 a8    	bset.b    0x63, #0x4
    1cc8:	6a e0 a8    	bset.b    0x6a, #0x7
    1cca:	68 a0 a8    	bset.b    0x68, #0x5
    1ccc:	69 00 a8    	bset.b    0x69, #0x0
    1cce:	68 c0 a8    	bset.b    0x68, #0x6
    1cd0:	68 e0 a8    	bset.b    0x68, #0x7
    1cd2:	86 60 a9    	bclr.b    0x86, #0x3
    1cd4:	96 60 a8    	bset.b    0x96, #0x3
    1cd6:	00 80 fa    	ulnk      
    1cd8:	00 00 06    	return    

00001cda <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    1cda:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    1cdc:	00 10 20    	mov.w     #0x100, w0
    1cde:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    1ce0:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    1ce2:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    1ce4:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    1ce6:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    1ce8:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    1cea:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    1cec:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    1cee:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    1cf0:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    1cf2:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    1cf4:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    1cf6:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    1cf8:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    1cfa:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    1cfc:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    1cfe:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    1d00:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    1d02:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    1d04:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    1d06:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    1d08:	f0 03 20    	mov.w     #0x3f, w0
    1d0a:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    1d0c:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    1d0e:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    1d10:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    1d12:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    1d14:	00 0e 20    	mov.w     #0xe0, w0
    1d16:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    1d18:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    1d1a:	00 c4 20    	mov.w     #0xc40, w0
    1d1c:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    1d1e:	50 00 20    	mov.w     #0x5, w0
    1d20:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    1d22:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    1d24:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    1d26:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    1d28:	e8 02 a9    	bclr.b    0x2e8, #0x0
    1d2a:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    1d2c:	e8 22 a9    	bclr.b    0x2e8, #0x1
    1d2e:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    1d30:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    1d32:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    1d34:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    1d36:	00 80 fa    	ulnk      
    1d38:	00 00 06    	return    

00001d3a <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    1d3a:	02 00 fa    	lnk       #0x2
    1d3c:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    1d3e:	9e 00 78    	mov.w     [w14], w1
    1d40:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    1d42:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    1d44:	00 00 00    	nop       

00001d46 <.L3>:
    1d46:	00 19 80    	mov.w     0x320, w0
    1d48:	61 00 60    	and.w     w0, #0x1, w0
    1d4a:	00 00 e0    	cp0.w     w0
    1d4c:	fc ff 32    	bra       Z, 0x1d46 <.L3>
    return ADC1BUF0;
    1d4e:	00 18 80    	mov.w     0x300, w0
}
    1d50:	00 80 fa    	ulnk      
    1d52:	00 00 06    	return    

00001d54 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    1d54:	02 00 fa    	lnk       #0x2
    1d56:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    1d58:	1e 00 78    	mov.w     [w14], w0
    1d5a:	48 00 de    	lsr.w     w0, #0x8, w0
    1d5c:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    1d5e:	1e 00 78    	mov.w     [w14], w0
    1d60:	44 00 de    	lsr.w     w0, #0x4, w0
    1d62:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    1d64:	1e 00 78    	mov.w     [w14], w0
    1d66:	42 00 de    	lsr.w     w0, #0x2, w0
    1d68:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    1d6a:	1e 00 78    	mov.w     [w14], w0
    1d6c:	00 00 d1    	lsr.w     w0, w0
    1d6e:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    1d70:	1e 00 78    	mov.w     [w14], w0
    1d72:	00 40 78    	mov.b     w0, w0
    1d74:	61 40 60    	and.b     w0, #0x1, w0
}
    1d76:	00 80 fa    	ulnk      
    1d78:	00 00 06    	return    
Disassembly of section .dinit:

00001d7a <.dinit>:
    1d7a:	00 08 00    	nop       
    1d7c:	0a 00 00    	nop       
    1d7e:	80 00 00    	nop       
    1d80:	0a 08 00    	nop       
    1d82:	10 00 00    	nop       
    1d84:	80 00 00    	nop       
    1d86:	00 00 00    	nop       
Disassembly of section .isr:

00001d88 <__DefaultInterrupt>:
    1d88:	00 40 da    	break     
    1d8a:	00 00 fe    	reset     
