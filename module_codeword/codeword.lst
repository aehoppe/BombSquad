
codeword.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	7a 2a 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	7a 2a 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	7a 2a 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	7a 2a 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	7a 2a 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	7a 2a 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	7a 2a 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	7a 2a 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	7a 2a 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	7a 2a 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	7a 2a 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	7a 2a 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	7a 2a 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	7a 2a 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	7a 2a 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	7a 2a 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	7a 2a 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	7a 2a 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	7a 2a 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	7a 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	7a 2a 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	7a 2a 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	7a 2a 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	7a 2a 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	7a 2a 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	7a 2a 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	7a 2a 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	7a 2a 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	7a 2a 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	7a 2a 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	7a 2a 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	7a 2a 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	7a 2a 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	7a 2a 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	7a 2a 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	7a 2a 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	7a 2a 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	7a 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	7a 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	7a 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	7a 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	7a 2a 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	7a 2a 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	7a 2a 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	7a 2a 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	7a 2a 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	7a 2a 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	7a 2a 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	7a 2a 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	7a 2a 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	7a 2a 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	7a 2a 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	7a 2a 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	7a 2a 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	7a 2a 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	7a 2a 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	7a 2a 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	7a 2a 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	7a 2a 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	6f 05 21    	mov.w     #0x1056, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	81 00 07    	rcall     0x1228 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	40 a5 22    	mov.w     #0x2a54, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	c6 1a 02    	call      0x1ac6 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	20 3b 20    	mov.w     #0x3b2, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	28 1d 04    	goto      0x1d28 <_setup>
    1216:	00 00 00 
    1218:	5a 1d 04    	goto      0x1d5a <_run>
    121a:	00 00 00 
    121c:	20 1e 04    	goto      0x1e20 <_solved>
    121e:	00 00 00 
    1220:	6e 1e 04    	goto      0x1e6e <_end_win>
    1222:	00 00 00 
    1224:	96 1e 04    	goto      0x1e96 <_end_fail>
    1226:	00 00 00 

00001228 <__crt_start_mode>:
    1228:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	e2 26 04    	goto      0x26e2 <__T2Interrupt>
    1032:	00 00 00 
    1034:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	5e 29 04    	goto      0x295e <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	fc 28 04    	goto      0x28fc <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	be 26 04    	goto      0x26be <__CNInterrupt>
    105a:	00 00 00 
    105c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	36 28 04    	goto      0x2836 <__SI2C2Interrupt>
    10b2:	00 00 00 
    10b4:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	7a 2a 04    	goto      0x2a7a <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000922a <.LC2-0x2ee>:
    922a:	61 62       	.word 0x6261
    922c:	6f 75       	.word 0x756f
    922e:	74 00       	.word 0x74
    9230:	65 76       	.word 0x7665
    9232:	65 72       	.word 0x7265
    9234:	79 00       	.word 0x79
    9236:	6c 61       	.word 0x616c
    9238:	72 67       	.word 0x6772
    923a:	65 00       	.word 0x65
    923c:	70 6c       	.word 0x6c70
    923e:	61 6e       	.word 0x6e61
    9240:	74 00       	.word 0x74
    9242:	73 70       	.word 0x7073
    9244:	65 6c       	.word 0x6c65
    9246:	6c 00       	.word 0x6c
    9248:	74 68       	.word 0x6874
    924a:	65 73       	.word 0x7365
    924c:	65 00       	.word 0x65
    924e:	77 68       	.word 0x6877
    9250:	65 72       	.word 0x7265
    9252:	65 00       	.word 0x65
    9254:	61 66       	.word 0x6661
    9256:	74 65       	.word 0x6574
    9258:	72 00       	.word 0x72
    925a:	66 69       	.word 0x6966
    925c:	72 73       	.word 0x7372
    925e:	74 00       	.word 0x74
    9260:	6c 65       	.word 0x656c
    9262:	61 72       	.word 0x7261
    9264:	6e 00       	.word 0x6e
    9266:	70 6f       	.word 0x6f70
    9268:	69 6e       	.word 0x6e69
    926a:	74 00       	.word 0x74
    926c:	73 74       	.word 0x7473
    926e:	69 6c       	.word 0x6c69
    9270:	6c 00       	.word 0x6c
    9272:	74 68       	.word 0x6874
    9274:	69 6e       	.word 0x6e69
    9276:	67 00       	.word 0x67
    9278:	77 68       	.word 0x6877
    927a:	69 63       	.word 0x6369
    927c:	68 00       	.word 0x68
    927e:	61 67       	.word 0x6761
    9280:	61 69       	.word 0x6961
    9282:	6e 00       	.word 0x6e
    9284:	66 6f       	.word 0x6f66
    9286:	75 6e       	.word 0x6e75
    9288:	64 00       	.word 0x64
    928a:	6e 65       	.word 0x656e
    928c:	76 65       	.word 0x6576
    928e:	72 00       	.word 0x72
    9290:	72 69       	.word 0x6972
    9292:	67 68       	.word 0x6867
    9294:	74 00       	.word 0x74
    9296:	73 74       	.word 0x7473
    9298:	75 64       	.word 0x6475
    929a:	79 00       	.word 0x79
    929c:	74 68       	.word 0x6874
    929e:	69 6e       	.word 0x6e69
    92a0:	6b 00       	.word 0x6b
    92a2:	77 6f       	.word 0x6f77
    92a4:	72 6c       	.word 0x6c72
    92a6:	64 00       	.word 0x64
    92a8:	62 65       	.word 0x6562
    92aa:	6c 6f       	.word 0x6f6c
    92ac:	77 00       	.word 0x77
    92ae:	67 72       	.word 0x7267
    92b0:	65 61       	.word 0x6165
    92b2:	74 00       	.word 0x74
    92b4:	6f 74       	.word 0x746f
    92b6:	68 65       	.word 0x6568
    92b8:	72 00       	.word 0x72
    92ba:	73 6d       	.word 0x6d73
    92bc:	61 6c       	.word 0x6c61
    92be:	6c 00       	.word 0x6c
    92c0:	74 68       	.word 0x6874
    92c2:	65 69       	.word 0x6965
    92c4:	72 00       	.word 0x72
    92c6:	74 68       	.word 0x6874
    92c8:	72 65       	.word 0x6572
    92ca:	65 00       	.word 0x65
    92cc:	77 6f       	.word 0x6f77
    92ce:	75 6c       	.word 0x6c75
    92d0:	64 00       	.word 0x64
    92d2:	63 6f       	.word 0x6f63
    92d4:	75 6c       	.word 0x6c75
    92d6:	64 00       	.word 0x64
    92d8:	68 6f       	.word 0x6f68
    92da:	75 73       	.word 0x7375
    92dc:	65 00       	.word 0x65
    92de:	70 6c       	.word 0x6c70
    92e0:	61 63       	.word 0x6361
    92e2:	65 00       	.word 0x65
    92e4:	73 6f       	.word 0x6f73
    92e6:	75 6e       	.word 0x6e75
    92e8:	64 00       	.word 0x64
    92ea:	74 68       	.word 0x6874
    92ec:	65 72       	.word 0x7265
    92ee:	65 00       	.word 0x65
    92f0:	77 61       	.word 0x6177
    92f2:	74 65       	.word 0x6574
    92f4:	72 00       	.word 0x72
    92f6:	77 72       	.word 0x7277
    92f8:	69 74       	.word 0x7469
    92fa:	65 00       	.word 0x65
    92fc:	57 52       	.word 0x5257
    92fe:	49 54       	.word 0x5449
    9300:	45 47       	.word 0x4745
    9302:	59 51       	.word 0x5159
    9304:	57 56       	.word 0x5657
    9306:	4d 52       	.word 0x524d
    9308:	54 45       	.word 0x4554
    930a:	50 49       	.word 0x4950
    930c:	58 5a       	.word 0x5a58
    930e:	46 4d       	.word 0x4d46
    9310:	49 4a       	.word 0x4a49
    9312:	59 4a       	.word 0x4a59
    9314:	54 46       	.word 0x4654
    9316:	50 42       	.word 0x4250
    9318:	41 4d       	.word 0x4d41
    931a:	45 51       	.word 0x5145
    931c:	50 47       	.word 0x4750
    931e:	58 00       	.word 0x58
    9320:	53 54       	.word 0x5453
    9322:	49 4c       	.word 0x4c49
    9324:	4c 53       	.word 0x534c
    9326:	47 43       	.word 0x4347
    9328:	42 57       	.word 0x5742
    932a:	54 52       	.word 0x5254
    932c:	54 56       	.word 0x5654
    932e:	5a 53       	.word 0x535a
    9330:	4a 56       	.word 0x564a
    9332:	49 44       	.word 0x4449
    9334:	52 46       	.word 0x4652
    9336:	50 4c       	.word 0x4c50
    9338:	4a 4f       	.word 0x4f4a
    933a:	4b 55       	.word 0x554b
    933c:	53 49       	.word 0x4953
    933e:	4a 4c       	.word 0x4c4a
    9340:	41 46       	.word 0x4641
    9342:	5a 00       	.word 0x5a
    9344:	45 56       	.word 0x5645
    9346:	45 52       	.word 0x5245
    9348:	59 4b       	.word 0x4b59
    934a:	45 58       	.word 0x5845
    934c:	4d 59       	.word 0x594d
    934e:	5a 4d       	.word 0x4d5a
    9350:	53 43       	.word 0x4353
    9352:	54 56       	.word 0x5654
    9354:	50 41       	.word 0x4150
    9356:	47 4e       	.word 0x4e47
    9358:	44 45       	.word 0x4544
    935a:	46 44       	.word 0x4446
    935c:	48 45       	.word 0x4548
    935e:	52 51       	.word 0x5152
    9360:	4a 48       	.word 0x484a
    9362:	4d 57       	.word 0x574d
    9364:	4e 59       	.word 0x594e
    9366:	58 00       	.word 0x58
    9368:	57 4f       	.word 0x4f57
    936a:	52 4c       	.word 0x4c52
    936c:	44 47       	.word 0x4744
    936e:	57 51       	.word 0x5157
    9370:	41 50       	.word 0x5041
    9372:	4e 57       	.word 0x574e
    9374:	45 4f       	.word 0x4f45
    9376:	4b 4d       	.word 0x4d4b
    9378:	51 51       	.word 0x5151
    937a:	57 52       	.word 0x5257
    937c:	5a 59       	.word 0x595a
    937e:	4a 50       	.word 0x504a
    9380:	44 4c       	.word 0x4c44
    9382:	4a 42       	.word 0x424a
    9384:	49 4e       	.word 0x4e49
    9386:	53 49       	.word 0x4953
    9388:	43 44       	.word 0x4443
    938a:	48 00       	.word 0x48
    938c:	57 52       	.word 0x5257
    938e:	49 54       	.word 0x5449
    9390:	45 47       	.word 0x4745
    9392:	57 4a       	.word 0x4a57
    9394:	58 44       	.word 0x4458
    9396:	4c 5a       	.word 0x5a4c
    9398:	50 4c       	.word 0x4c50
    939a:	58 49       	.word 0x4958
    939c:	52 4a       	.word 0x4a52
    939e:	54 43       	.word 0x4354
    93a0:	49 46       	.word 0x4649
    93a2:	53 54       	.word 0x5453
    93a4:	46 48       	.word 0x4846
    93a6:	42 49       	.word 0x4942
    93a8:	4f 53       	.word 0x534f
    93aa:	51 58       	.word 0x5851
    93ac:	55 4a       	.word 0x4a55
    93ae:	45 00       	.word 0x45
    93b0:	46 4f       	.word 0x4f46
    93b2:	55 4e       	.word 0x4e55
    93b4:	44 5a       	.word 0x5a44
    93b6:	49 4a       	.word 0x4a49
    93b8:	43 45       	.word 0x4543
    93ba:	46 4f       	.word 0x4f46
    93bc:	47 4d       	.word 0x4d47
    93be:	51 59       	.word 0x5951
    93c0:	4e 51       	.word 0x514e
    93c2:	42 56       	.word 0x5642
    93c4:	45 55       	.word 0x5545
    93c6:	4a 5a       	.word 0x5a4a
    93c8:	4e 4f       	.word 0x4f4e
    93ca:	55 57       	.word 0x5755
    93cc:	4a 51       	.word 0x514a
    93ce:	47 4c       	.word 0x4c47
    93d0:	49 44       	.word 0x4449
    93d2:	50 00       	.word 0x50
    93d4:	43 4f       	.word 0x4f43
    93d6:	55 4c       	.word 0x4c55
    93d8:	44 44       	.word 0x4444
    93da:	58 43       	.word 0x4358
    93dc:	55 4a       	.word 0x4a55
    93de:	54 4f       	.word 0x4f54
    93e0:	5a 55       	.word 0x555a
    93e2:	50 51       	.word 0x5150
    93e4:	59 4d       	.word 0x4d59
    93e6:	4b 58       	.word 0x584b
    93e8:	56 55       	.word 0x5556
    93ea:	53 4c       	.word 0x4c53
    93ec:	4b 52       	.word 0x524b
    93ee:	51 56       	.word 0x5651
    93f0:	57 4d       	.word 0x4d57
    93f2:	48 44       	.word 0x4448
    93f4:	56 51       	.word 0x5156
    93f6:	4a 00       	.word 0x4a
    93f8:	54 48       	.word 0x4854
    93fa:	45 53       	.word 0x5345
    93fc:	45 58       	.word 0x5845
    93fe:	54 4b       	.word 0x4b54
    9400:	44 4c       	.word 0x4c44
    9402:	56 47       	.word 0x4756
    9404:	48 49       	.word 0x4948
    9406:	54 50       	.word 0x5054
    9408:	53 45       	.word 0x4553
    940a:	51 49       	.word 0x4951
    940c:	56 54       	.word 0x5456
    940e:	4d 45       	.word 0x454d
    9410:	48 44       	.word 0x4448
    9412:	4f 4e       	.word 0x4e4f
    9414:	53 56       	.word 0x5653
    9416:	59 4d       	.word 0x4d59
    9418:	45 46       	.word 0x4645
    941a:	42 00       	.word 0x42
    941c:	4f 54       	.word 0x544f
    941e:	48 45       	.word 0x4548
    9420:	52 52       	.word 0x5252
    9422:	49 42       	.word 0x4249
    9424:	4f 43       	.word 0x434f
    9426:	45 54       	.word 0x5445
    9428:	4e 52       	.word 0x524e
    942a:	4b 4a       	.word 0x4a4b
    942c:	42 4e       	.word 0x4e42
    942e:	4a 55       	.word 0x554a
    9430:	48 47       	.word 0x4748
    9432:	45 47       	.word 0x4745
    9434:	4a 56       	.word 0x564a
    9436:	57 4b       	.word 0x4b57
    9438:	45 4b       	.word 0x4b45
    943a:	44 56       	.word 0x5644
    943c:	52 50       	.word 0x5052
    943e:	4d 00       	.word 0x4d
    9440:	57 4f       	.word 0x4f57
    9442:	52 4c       	.word 0x4c52
    9444:	44 54       	.word 0x5444
    9446:	58 53       	.word 0x5358
    9448:	55 52       	.word 0x5255
    944a:	57 46       	.word 0x4657
    944c:	57 4f       	.word 0x4f57
    944e:	51 59       	.word 0x5951
    9450:	52 56       	.word 0x5652
    9452:	52 51       	.word 0x5152
    9454:	47 4e       	.word 0x4e47
    9456:	4a 59       	.word 0x594a
    9458:	42 4b       	.word 0x4b42
    945a:	4c 51       	.word 0x514c
    945c:	4f 48       	.word 0x484f
    945e:	58 44       	.word 0x4458
    9460:	45 49       	.word 0x4945
    9462:	51 00       	.word 0x51
    9464:	53 4d       	.word 0x4d53
    9466:	41 4c       	.word 0x4c41
    9468:	4c 49       	.word 0x494c
    946a:	56 52       	.word 0x5256
    946c:	58 53       	.word 0x5358
    946e:	55 58       	.word 0x5855
    9470:	44 43       	.word 0x4344
    9472:	4d 52       	.word 0x524d
    9474:	59 41       	.word 0x4159
    9476:	51 54       	.word 0x5451
    9478:	46 50       	.word 0x5046
    947a:	4a 56       	.word 0x564a
    947c:	50 48       	.word 0x4850
    947e:	46 4c       	.word 0x4c46
    9480:	58 51       	.word 0x5158
    9482:	4c 52       	.word 0x524c
    9484:	4f 42       	.word 0x424f
    9486:	48 00       	.word 0x48
    9488:	54 48       	.word 0x4854
    948a:	45 53       	.word 0x5345
    948c:	45 4b       	.word 0x4b45
    948e:	50 54       	.word 0x5450
    9490:	52 4c       	.word 0x4c52
    9492:	42 48       	.word 0x4842
    9494:	4b 56       	.word 0x564b
    9496:	55 4e       	.word 0x4e55
    9498:	44 51       	.word 0x5144
    949a:	47 4c       	.word 0x4c47
    949c:	45 4a       	.word 0x4a45
    949e:	53 58       	.word 0x5853
    94a0:	41 4d       	.word 0x4d41
    94a2:	53 56       	.word 0x5653
    94a4:	44 57       	.word 0x5744
    94a6:	41 4f       	.word 0x4f41
    94a8:	45 46       	.word 0x4645
    94aa:	4e 00       	.word 0x4e
    94ac:	57 52       	.word 0x5257
    94ae:	49 54       	.word 0x5449
    94b0:	45 56       	.word 0x5645
    94b2:	57 49       	.word 0x4957
    94b4:	58 59       	.word 0x5958
    94b6:	48 57       	.word 0x5748
    94b8:	4b 58       	.word 0x584b
    94ba:	42 47       	.word 0x4742
    94bc:	52 46       	.word 0x4652
    94be:	45 4c       	.word 0x4c45
    94c0:	59 49       	.word 0x4959
    94c2:	50 55       	.word 0x5550
    94c4:	41 44       	.word 0x4441
    94c6:	54 52       	.word 0x5254
    94c8:	4e 4c       	.word 0x4c4e
    94ca:	56 45       	.word 0x4556
    94cc:	41 51       	.word 0x5141
    94ce:	55 00       	.word 0x55
    94d0:	47 52       	.word 0x5247
    94d2:	45 41       	.word 0x4145
    94d4:	54 4c       	.word 0x4c54
    94d6:	4f 47       	.word 0x474f
    94d8:	4d 58       	.word 0x584d
    94da:	56 59       	.word 0x5956
    94dc:	43 4e       	.word 0x4e43
    94de:	52 57       	.word 0x5752
    94e0:	4b 48       	.word 0x484b
    94e2:	56 50       	.word 0x5056
    94e4:	45 42       	.word 0x4245
    94e6:	49 5a       	.word 0x5a49
    94e8:	41 50       	.word 0x5041
    94ea:	57 56       	.word 0x5657
    94ec:	46 57       	.word 0x5746
    94ee:	48 46       	.word 0x4648
    94f0:	53 54       	.word 0x5453
    94f2:	51 00       	.word 0x51
    94f4:	4f 54       	.word 0x544f
    94f6:	48 45       	.word 0x4548
    94f8:	52 46       	.word 0x4652
    94fa:	47 49       	.word 0x4947
    94fc:	4f 44       	.word 0x444f
    94fe:	48 42       	.word 0x4248
    9500:	54 50       	.word 0x5054
    9502:	58 53       	.word 0x5358
    9504:	49 43       	.word 0x4349
    9506:	47 45       	.word 0x4547
    9508:	4c 50       	.word 0x504c
    950a:	48 41       	.word 0x4148
    950c:	44 45       	.word 0x4544
    950e:	4a 49       	.word 0x494a
    9510:	5a 4e       	.word 0x4e5a
    9512:	41 50       	.word 0x5041
    9514:	4b 49       	.word 0x494b
    9516:	52 00       	.word 0x52

00009518 <.LC2>:
    9518:	00 20       	.word 0x2000

00009519 <.LC0>:
	...

00009520 <.LC1>:
    9520:	20 6f       	.word 0x6f20
    9522:	20 20       	.word 0x2020
    9524:	6f 20       	.word 0x206f
    9526:	20 6f       	.word 0x6f20
    9528:	20 20       	.word 0x2020
    952a:	6f 20       	.word 0x206f
    952c:	20 6f       	.word 0x6f20
    952e:	20 00       	.word 0x20
    9530:	00 5f       	.word 0x5f00

00009531 <.LC3>:
    9531:	00 00       	.word 0
    9533:	00 00       	.word 0
    9535:	00 00       	.word 0
    9537:	00 00       	.word 0

00009539 <.LC4>:
    9539:	00 00       	.word 0
    953b:	00 00       	.word 0
    953d:	00 00       	.word 0
    953f:	00 00       	.word 0
    9541:	00 00       	.word 0
    9543:	00 00       	.word 0
    9545:	00 00       	.word 0
    9547:	00 00       	.word 0
	...

0000954a <.LC0>:
    954a:	20 20       	.word 0x2020
    954c:	20 20       	.word 0x2020
    954e:	20 20       	.word 0x2020
    9550:	20 20       	.word 0x2020
    9552:	20 20       	.word 0x2020
    9554:	20 20       	.word 0x2020
    9556:	20 20       	.word 0x2020
    9558:	20 20       	.word 0x2020
    955a:	20 20       	.word 0x2020
    955c:	20 20       	.word 0x2020
    955e:	20 20       	.word 0x2020
    9560:	20 20       	.word 0x2020
    9562:	20 20       	.word 0x2020
    9564:	20 20       	.word 0x2020
    9566:	20 20       	.word 0x2020
    9568:	20 20       	.word 0x2020
    956a:	20 20       	.word 0x2020
    956c:	20 20       	.word 0x2020
    956e:	20 20       	.word 0x2020
    9570:	20 20       	.word 0x2020
    9572:	20 20       	.word 0x2020
    9574:	20 20       	.word 0x2020
    9576:	20 20       	.word 0x2020
    9578:	20 20       	.word 0x2020
    957a:	20 20       	.word 0x2020
    957c:	20 20       	.word 0x2020
    957e:	20 20       	.word 0x2020
    9580:	20 20       	.word 0x2020
    9582:	00 20       	.word 0x2000

00009583 <.LC1>:
    9583:	00 00       	.word 0
    9585:	00 00       	.word 0
    9587:	00 00       	.word 0
    9589:	00 00       	.word 0
    958b:	00 00       	.word 0
    958d:	00 00       	.word 0
    958f:	00 00       	.word 0
    9591:	00 00       	.word 0
	...

00009594 <.LC2>:
    9594:	7a 79       	.word 0x797a
    9596:	78 77       	.word 0x7778
    9598:	76 75       	.word 0x7576
    959a:	74 73       	.word 0x7374
    959c:	72 71       	.word 0x7172
    959e:	70 6f       	.word 0x6f70
    95a0:	6e 6d       	.word 0x6d6e
    95a2:	6c 6b       	.word 0x6b6c
    95a4:	6a 69       	.word 0x696a
    95a6:	68 67       	.word 0x6768
    95a8:	66 65       	.word 0x6566
    95aa:	64 63       	.word 0x6364
    95ac:	62 61       	.word 0x6162
    95ae:	39 38       	.word 0x3839
    95b0:	37 36       	.word 0x3637
    95b2:	35 34       	.word 0x3435
    95b4:	33 32       	.word 0x3233
    95b6:	31 30       	.word 0x3031
    95b8:	31 32       	.word 0x3231
    95ba:	33 34       	.word 0x3433
    95bc:	35 36       	.word 0x3635
    95be:	37 38       	.word 0x3837
    95c0:	39 61       	.word 0x6139
    95c2:	62 63       	.word 0x6362
    95c4:	64 65       	.word 0x6564
    95c6:	66 67       	.word 0x6766
    95c8:	68 69       	.word 0x6968
    95ca:	6a 6b       	.word 0x6b6a
    95cc:	6c 6d       	.word 0x6d6c
    95ce:	6e 6f       	.word 0x6f6e
    95d0:	70 71       	.word 0x7170
    95d2:	72 73       	.word 0x7372
    95d4:	74 75       	.word 0x7574
    95d6:	76 77       	.word 0x7776
    95d8:	78 79       	.word 0x7978
    95da:	7a 00       	.word 0x7a
Disassembly of section .text:

000015dc <___lcd_i2c_write>:
#define DR_READ 0x0B

_LCD lcd[3];

void __lcd_i2c_write(_LCD *self, uint8_t ch) {
    15dc:	04 00 fa    	lnk       #0x4
    15de:	00 0f 78    	mov.w     w0, [w14]
    15e0:	21 47 98    	mov.b     w1, [w14+2]
    i2c_start();
    15e2:	f9 04 07    	rcall     0x1fd6 <_i2c_start> <.LFB2> <.LFE1>
    send_i2c_byte(self->addr_write);
    15e4:	1e 00 78    	mov.w     [w14], w0
    15e6:	10 40 78    	mov.b     [w0], w0
    15e8:	00 80 fb    	ze        w0, w0
    15ea:	44 05 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ch);
    15ec:	2e 40 90    	mov.b     [w14+2], w0
    15ee:	00 80 fb    	ze        w0, w0
    15f0:	41 05 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
    reset_i2c_bus();
    15f2:	25 05 07    	rcall     0x203e <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    15f4:	00 80 fa    	ulnk      
    15f6:	00 00 06    	return    

000015f8 <___lcd_enablePulse>:

// Pulse enable pin high and then low to shift in 4 bits of data
void __lcd_enablePulse(_LCD *self) {
    15f8:	02 00 fa    	lnk       #0x2
    15fa:	00 0f 78    	mov.w     w0, [w14]
    self->io_write_val ^= ENABLE_TOGGLE;
    15fc:	1e 00 78    	mov.w     [w14], w0
    15fe:	20 40 90    	mov.b     [w0+2], w0
    1600:	80 40 78    	mov.b     w0, w1
    1602:	01 24 a2    	btg.b     w1, #0x2
    1604:	1e 00 78    	mov.w     [w14], w0
    1606:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1608:	1e 00 78    	mov.w     [w14], w0
    160a:	20 40 90    	mov.b     [w0+2], w0
    160c:	80 40 78    	mov.b     w0, w1
    160e:	1e 00 78    	mov.w     [w14], w0
    1610:	e5 ff 07    	rcall     0x15dc <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    delay_by_nop(100);
    1612:	40 06 20    	mov.w     #0x64, w0
    1614:	01 00 20    	mov.w     #0x0, w1
    1616:	bf 04 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    self->io_write_val ^= ENABLE_TOGGLE;
    1618:	1e 00 78    	mov.w     [w14], w0
    161a:	20 40 90    	mov.b     [w0+2], w0
    161c:	80 40 78    	mov.b     w0, w1
    161e:	01 24 a2    	btg.b     w1, #0x2
    1620:	1e 00 78    	mov.w     [w14], w0
    1622:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1624:	1e 00 78    	mov.w     [w14], w0
    1626:	20 40 90    	mov.b     [w0+2], w0
    1628:	80 40 78    	mov.b     w0, w1
    162a:	1e 00 78    	mov.w     [w14], w0
    162c:	d7 ff 07    	rcall     0x15dc <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    // delay_by_nop(1000);
}
    162e:	00 80 fa    	ulnk      
    1630:	00 00 06    	return    

00001632 <___lcd_send>:

/* Send 8 bits of data as one 4-bit nibble, shifting in, second 4-bit nibble, and
shifting in */
void __lcd_send(_LCD *self, uint8_t value, uint8_t command) {
    1632:	06 00 fa    	lnk       #0x6
    1634:	10 07 98    	mov.w     w0, [w14+2]
    1636:	41 47 98    	mov.b     w1, [w14+4]
    1638:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t MS = value & 0x78;
    163a:	4e 40 90    	mov.b     [w14+4], w0
    163c:	81 c7 b3    	mov.b     #0x78, w1
    163e:	01 4f 60    	and.b     w0, w1, [w14]
    uint8_t LS = value << 4;
    1640:	ce 40 90    	mov.b     [w14+4], w1
    1642:	40 00 20    	mov.w     #0x4, w0
    1644:	00 08 dd    	sl.w      w1, w0, w0
    1646:	10 47 98    	mov.b     w0, [w14+1]
    self->io_write_val = command | MS;
    1648:	5e 40 90    	mov.b     [w14+5], w0
    164a:	9e 40 70    	ior.b     w0, [w14], w1
    164c:	1e 00 90    	mov.w     [w14+2], w0
    164e:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1650:	1e 00 90    	mov.w     [w14+2], w0
    1652:	20 40 90    	mov.b     [w0+2], w0
    1654:	80 40 78    	mov.b     w0, w1
    1656:	1e 00 90    	mov.w     [w14+2], w0
    1658:	c1 ff 07    	rcall     0x15dc <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    165a:	1e 00 90    	mov.w     [w14+2], w0
    165c:	cd ff 07    	rcall     0x15f8 <___lcd_enablePulse> <.LFB1> <.LFE0>
    self->io_write_val= command | LS;
    165e:	de 40 90    	mov.b     [w14+5], w1
    1660:	1e 40 90    	mov.b     [w14+1], w0
    1662:	80 c0 70    	ior.b     w1, w0, w1
    1664:	1e 00 90    	mov.w     [w14+2], w0
    1666:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1668:	1e 00 90    	mov.w     [w14+2], w0
    166a:	20 40 90    	mov.b     [w0+2], w0
    166c:	80 40 78    	mov.b     w0, w1
    166e:	1e 00 90    	mov.w     [w14+2], w0
    1670:	b5 ff 07    	rcall     0x15dc <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    1672:	1e 00 90    	mov.w     [w14+2], w0
    1674:	c1 ff 07    	rcall     0x15f8 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    1676:	00 80 fa    	ulnk      
    1678:	00 00 06    	return    

0000167a <___lcd_send8>:

void __lcd_send8(_LCD *self, uint8_t value, uint8_t command) {
    167a:	04 00 fa    	lnk       #0x4
    167c:	00 0f 78    	mov.w     w0, [w14]
    167e:	21 47 98    	mov.b     w1, [w14+2]
    1680:	32 47 98    	mov.b     w2, [w14+3]
    value = value << 4;
    1682:	ae 40 90    	mov.b     [w14+2], w1
    1684:	40 00 20    	mov.w     #0x4, w0
    1686:	00 08 dd    	sl.w      w1, w0, w0
    1688:	20 47 98    	mov.b     w0, [w14+2]
    self->io_write_val = command | value;
    168a:	be 40 90    	mov.b     [w14+3], w1
    168c:	2e 40 90    	mov.b     [w14+2], w0
    168e:	80 c0 70    	ior.b     w1, w0, w1
    1690:	1e 00 78    	mov.w     [w14], w0
    1692:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1694:	1e 00 78    	mov.w     [w14], w0
    1696:	20 40 90    	mov.b     [w0+2], w0
    1698:	80 40 78    	mov.b     w0, w1
    169a:	1e 00 78    	mov.w     [w14], w0
    169c:	9f ff 07    	rcall     0x15dc <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    169e:	1e 00 78    	mov.w     [w14], w0
    16a0:	ab ff 07    	rcall     0x15f8 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    16a2:	00 80 fa    	ulnk      
    16a4:	00 00 06    	return    

000016a6 <_init_lcd>:

/* Some code from last year's Spaceteam project that sets up three LCD screens on
 one bus with corresponding IO extender types and hard-wired addresses */
void init_lcd(uint8_t initiator) {
    16a6:	02 00 fa    	lnk       #0x2
    16a8:	00 4f 78    	mov.b     w0, [w14]

    i2c_init(1e3);
    16aa:	80 3e 20    	mov.w     #0x3e8, w0
    16ac:	87 04 07    	rcall     0x1fbc <_i2c_init> <.LFB1> <.LFE0>

    switch (initiator) {
    16ae:	1e 80 fb    	ze        [w14], w0
    16b0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    16b2:	17 00 32    	bra       Z, 0x16e2 <.L8>
    16b4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    16b6:	03 00 3c    	bra       GT, 0x16be <.L11>
    16b8:	00 00 e0    	cp0.w     w0
    16ba:	06 00 32    	bra       Z, 0x16c8 <.L7>
    16bc:	39 00 37    	bra       0x1730 <.L5>

000016be <.L11>:
    16be:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    16c0:	1d 00 32    	bra       Z, 0x16fc <.L9>
    16c2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    16c4:	28 00 32    	bra       Z, 0x1716 <.L10>
    16c6:	34 00 37    	bra       0x1730 <.L5>

000016c8 <.L7>:
        case 0: // Central
            lcd_init(&lcd[0], 0x05,'A');
    16c8:	12 c4 b3    	mov.b     #0x41, w2
    16ca:	51 c0 b3    	mov.b     #0x5, w1
    16cc:	00 04 21    	mov.w     #0x1040, w0
    16ce:	32 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x07,'A');
    16d0:	12 c4 b3    	mov.b     #0x41, w2
    16d2:	71 c0 b3    	mov.b     #0x7, w1
    16d4:	50 04 21    	mov.w     #0x1045, w0
    16d6:	2e 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'T');
    16d8:	42 c5 b3    	mov.b     #0x54, w2
    16da:	61 c0 b3    	mov.b     #0x6, w1
    16dc:	a0 04 21    	mov.w     #0x104a, w0
    16de:	2a 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            break;
    16e0:	27 00 37    	bra       0x1730 <.L5>

000016e2 <.L8>:
        case 1:
            lcd_init(&lcd[0], 0x07,'A');
    16e2:	12 c4 b3    	mov.b     #0x41, w2
    16e4:	71 c0 b3    	mov.b     #0x7, w1
    16e6:	00 04 21    	mov.w     #0x1040, w0
    16e8:	25 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'A');
    16ea:	12 c4 b3    	mov.b     #0x41, w2
    16ec:	61 c0 b3    	mov.b     #0x6, w1
    16ee:	a0 04 21    	mov.w     #0x104a, w0
    16f0:	21 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x05,'A');
    16f2:	12 c4 b3    	mov.b     #0x41, w2
    16f4:	51 c0 b3    	mov.b     #0x5, w1
    16f6:	50 04 21    	mov.w     #0x1045, w0
    16f8:	1d 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            break;
    16fa:	1a 00 37    	bra       0x1730 <.L5>

000016fc <.L9>:
        case 2:
            lcd_init(&lcd[0], 0x07,'T');
    16fc:	42 c5 b3    	mov.b     #0x54, w2
    16fe:	71 c0 b3    	mov.b     #0x7, w1
    1700:	00 04 21    	mov.w     #0x1040, w0
    1702:	18 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    1704:	12 c4 b3    	mov.b     #0x41, w2
    1706:	61 c0 b3    	mov.b     #0x6, w1
    1708:	50 04 21    	mov.w     #0x1045, w0
    170a:	14 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    170c:	12 c4 b3    	mov.b     #0x41, w2
    170e:	51 c0 b3    	mov.b     #0x5, w1
    1710:	a0 04 21    	mov.w     #0x104a, w0
    1712:	10 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            break;
    1714:	0d 00 37    	bra       0x1730 <.L5>

00001716 <.L10>:
        case 3:
            lcd_init(&lcd[0], 0x07,'A');
    1716:	12 c4 b3    	mov.b     #0x41, w2
    1718:	71 c0 b3    	mov.b     #0x7, w1
    171a:	00 04 21    	mov.w     #0x1040, w0
    171c:	0b 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    171e:	12 c4 b3    	mov.b     #0x41, w2
    1720:	61 c0 b3    	mov.b     #0x6, w1
    1722:	50 04 21    	mov.w     #0x1045, w0
    1724:	07 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    1726:	12 c4 b3    	mov.b     #0x41, w2
    1728:	51 c0 b3    	mov.b     #0x5, w1
    172a:	a0 04 21    	mov.w     #0x104a, w0
    172c:	03 00 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
            break;
    172e:	00 00 00    	nop       

00001730 <.L5>:
    }
}
    1730:	00 80 fa    	ulnk      
    1732:	00 00 06    	return    

00001734 <_lcd_init>:

// Initializes the LCD screen hardware as per pg. 46 of the datasheet
void lcd_init(_LCD *self, uint8_t addr, char vendor) {
    1734:	04 00 fa    	lnk       #0x4
    1736:	00 0f 78    	mov.w     w0, [w14]
    1738:	21 47 98    	mov.b     w1, [w14+2]
    173a:	32 47 98    	mov.b     w2, [w14+3]
    switch(vendor){
    173c:	3e 40 90    	mov.b     [w14+3], w0
    173e:	00 00 fb    	se        w0, w0
    1740:	11 04 20    	mov.w     #0x41, w1
    1742:	81 0f 50    	sub.w     w0, w1, [w15]
    1744:	10 00 32    	bra       Z, 0x1766 <.L14>
    1746:	41 05 20    	mov.w     #0x54, w1
    1748:	81 0f 50    	sub.w     w0, w1, [w15]
    174a:	1a 00 3a    	bra       NZ, 0x1780 <.L13>
        case 'T':// 0x40 == vendor prefix for PCF8574T
            self->addr_write = 0x40 + (addr << 1);
    174c:	2e 40 90    	mov.b     [w14+2], w0
    174e:	00 40 40    	add.b     w0, w0, w0
    1750:	02 c4 b3    	mov.b     #0x40, w2
    1752:	82 40 40    	add.b     w0, w2, w1
    1754:	1e 00 78    	mov.w     [w14], w0
    1756:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x40 + (addr << 1)+1;
    1758:	2e 40 90    	mov.b     [w14+2], w0
    175a:	00 40 40    	add.b     w0, w0, w0
    175c:	12 c4 b3    	mov.b     #0x41, w2
    175e:	82 40 40    	add.b     w0, w2, w1
    1760:	1e 00 78    	mov.w     [w14], w0
    1762:	11 40 98    	mov.b     w1, [w0+1]
            break;
    1764:	0d 00 37    	bra       0x1780 <.L13>

00001766 <.L14>:
        case 'A':// 0x70 == vendor prefix PCF8574AT
            self->addr_write = 0x70 + (addr << 1);
    1766:	2e 40 90    	mov.b     [w14+2], w0
    1768:	00 40 40    	add.b     w0, w0, w0
    176a:	02 c7 b3    	mov.b     #0x70, w2
    176c:	82 40 40    	add.b     w0, w2, w1
    176e:	1e 00 78    	mov.w     [w14], w0
    1770:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x70 + (addr << 1)+1;
    1772:	2e 40 90    	mov.b     [w14+2], w0
    1774:	00 40 40    	add.b     w0, w0, w0
    1776:	12 c7 b3    	mov.b     #0x71, w2
    1778:	82 40 40    	add.b     w0, w2, w1
    177a:	1e 00 78    	mov.w     [w14], w0
    177c:	11 40 98    	mov.b     w1, [w0+1]
            break;
    177e:	00 00 00    	nop       

00001780 <.L13>:
    }

    self->display_control = 0x00;
    1780:	1e 00 78    	mov.w     [w14], w0
    1782:	80 40 eb    	clr.b     w1
    1784:	31 40 98    	mov.b     w1, [w0+3]
    self->display_mode = 0x00;
    1786:	1e 00 78    	mov.w     [w14], w0
    1788:	80 40 eb    	clr.b     w1
    178a:	41 40 98    	mov.b     w1, [w0+4]

    self->io_write_val = 0x00;
    178c:	1e 00 78    	mov.w     [w14], w0
    178e:	80 40 eb    	clr.b     w1
    1790:	21 40 98    	mov.b     w1, [w0+2]

    __lcd_i2c_write(self, 0x00);
    1792:	80 40 eb    	clr.b     w1
    1794:	1e 00 78    	mov.w     [w14], w0
    1796:	22 ff 07    	rcall     0x15dc <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>

    delay_by_nop(15000);
    1798:	80 a9 23    	mov.w     #0x3a98, w0
    179a:	01 00 20    	mov.w     #0x0, w1
    179c:	fc 03 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    // Some bullshit according to pg 46
    __lcd_send8(self, 0x03, INTERNAL_WRITE);
    179e:	82 c0 b3    	mov.b     #0x8, w2
    17a0:	31 c0 b3    	mov.b     #0x3, w1
    17a2:	1e 00 78    	mov.w     [w14], w0
    17a4:	6a ff 07    	rcall     0x167a <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    17a6:	80 38 21    	mov.w     #0x1388, w0
    17a8:	01 00 20    	mov.w     #0x0, w1
    17aa:	f5 03 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    17ac:	82 c0 b3    	mov.b     #0x8, w2
    17ae:	31 c0 b3    	mov.b     #0x3, w1
    17b0:	1e 00 78    	mov.w     [w14], w0
    17b2:	63 ff 07    	rcall     0x167a <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    17b4:	80 38 21    	mov.w     #0x1388, w0
    17b6:	01 00 20    	mov.w     #0x0, w1
    17b8:	ee 03 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    17ba:	82 c0 b3    	mov.b     #0x8, w2
    17bc:	31 c0 b3    	mov.b     #0x3, w1
    17be:	1e 00 78    	mov.w     [w14], w0
    17c0:	5c ff 07    	rcall     0x167a <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    17c2:	80 38 21    	mov.w     #0x1388, w0
    17c4:	01 00 20    	mov.w     #0x0, w1
    17c6:	e7 03 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    // Put it in 4 bit mode
    __lcd_send8(self, 0x02, INTERNAL_WRITE);//0b00110000
    17c8:	82 c0 b3    	mov.b     #0x8, w2
    17ca:	21 c0 b3    	mov.b     #0x2, w1
    17cc:	1e 00 78    	mov.w     [w14], w0
    17ce:	55 ff 07    	rcall     0x167a <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    17d0:	80 38 21    	mov.w     #0x1388, w0
    17d2:	01 00 20    	mov.w     #0x0, w1
    17d4:	e0 03 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x28, INTERNAL_WRITE); // Set rows and direction
    17d6:	82 c0 b3    	mov.b     #0x8, w2
    17d8:	81 c2 b3    	mov.b     #0x28, w1
    17da:	1e 00 78    	mov.w     [w14], w0
    17dc:	2a ff 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    17de:	20 03 20    	mov.w     #0x32, w0
    17e0:	01 00 20    	mov.w     #0x0, w1
    17e2:	d9 03 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x80, INTERNAL_WRITE); // Display off, cursor off
    17e4:	82 c0 b3    	mov.b     #0x8, w2
    17e6:	01 c8 b3    	mov.b     #0x80, w1
    17e8:	1e 00 78    	mov.w     [w14], w0
    17ea:	23 ff 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    17ec:	20 03 20    	mov.w     #0x32, w0
    17ee:	01 00 20    	mov.w     #0x0, w1
    17f0:	d2 03 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x01, INTERNAL_WRITE); // Go to home position
    17f2:	82 c0 b3    	mov.b     #0x8, w2
    17f4:	11 c0 b3    	mov.b     #0x1, w1
    17f6:	1e 00 78    	mov.w     [w14], w0
    17f8:	1c ff 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    17fa:	00 7d 20    	mov.w     #0x7d0, w0
    17fc:	01 00 20    	mov.w     #0x0, w1
    17fe:	cb 03 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x06, INTERNAL_WRITE); // Set curson direction
    1800:	82 c0 b3    	mov.b     #0x8, w2
    1802:	61 c0 b3    	mov.b     #0x6, w1
    1804:	1e 00 78    	mov.w     [w14], w0
    1806:	15 ff 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(5000);
    1808:	80 38 21    	mov.w     #0x1388, w0
    180a:	01 00 20    	mov.w     #0x0, w1
    180c:	c4 03 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x0C, INTERNAL_WRITE); // Display on, cursor off
    180e:	82 c0 b3    	mov.b     #0x8, w2
    1810:	c1 c0 b3    	mov.b     #0xc, w1
    1812:	1e 00 78    	mov.w     [w14], w0
    1814:	0e ff 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
}
    1816:	00 80 fa    	ulnk      
    1818:	00 00 06    	return    

0000181a <_lcd_stop>:

// Stops lcd I2C transfer
void lcd_stop(_LCD *self) {
    181a:	02 00 fa    	lnk       #0x2
    181c:	00 0f 78    	mov.w     w0, [w14]
    reset_i2c_bus();
    181e:	0f 04 07    	rcall     0x203e <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1820:	00 80 fa    	ulnk      
    1822:	00 00 06    	return    

00001824 <_lcd_display>:

// Sends show display command to LCD
void lcd_display(_LCD *self, uint8_t on) {
    1824:	04 00 fa    	lnk       #0x4
    1826:	00 0f 78    	mov.w     w0, [w14]
    1828:	21 47 98    	mov.b     w1, [w14+2]
    if (on) {
    182a:	2e 40 90    	mov.b     [w14+2], w0
    182c:	00 04 e0    	cp0.b     w0
    182e:	07 00 32    	bra       Z, 0x183e <.L18>
        self->display_control |= LCD_DISPLAYON;
    1830:	1e 00 78    	mov.w     [w14], w0
    1832:	30 40 90    	mov.b     [w0+3], w0
    1834:	80 40 78    	mov.b     w0, w1
    1836:	01 24 a0    	bset.b    w1, #0x2
    1838:	1e 00 78    	mov.w     [w14], w0
    183a:	31 40 98    	mov.b     w1, [w0+3]
    183c:	06 00 37    	bra       0x184a <.L19>

0000183e <.L18>:
    } else {
        self->display_control &= ~LCD_DISPLAYON;
    183e:	1e 00 78    	mov.w     [w14], w0
    1840:	b0 40 90    	mov.b     [w0+3], w1
    1842:	b0 cf b3    	mov.b     #0xfb, w0
    1844:	80 c0 60    	and.b     w1, w0, w1
    1846:	1e 00 78    	mov.w     [w14], w0
    1848:	31 40 98    	mov.b     w1, [w0+3]

0000184a <.L19>:
    }
    __lcd_send(self, self->display_control | LCD_DISPLAYCONTROL, INTERNAL_WRITE);
    184a:	1e 00 78    	mov.w     [w14], w0
    184c:	30 40 90    	mov.b     [w0+3], w0
    184e:	00 34 a0    	bset.b    w0, #0x3
    1850:	82 c0 b3    	mov.b     #0x8, w2
    1852:	80 40 78    	mov.b     w0, w1
    1854:	1e 00 78    	mov.w     [w14], w0
    1856:	ed fe 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
}
    1858:	00 80 fa    	ulnk      
    185a:	00 00 06    	return    

0000185c <_lcd_clear>:

// Sends clear display command to LCD
void lcd_clear(_LCD *self) {
    185c:	02 00 fa    	lnk       #0x2
    185e:	00 0f 78    	mov.w     w0, [w14]
    __lcd_send(self, LCD_CLEARDISPLAY, INTERNAL_WRITE);
    1860:	82 c0 b3    	mov.b     #0x8, w2
    1862:	11 c0 b3    	mov.b     #0x1, w1
    1864:	1e 00 78    	mov.w     [w14], w0
    1866:	e5 fe 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    1868:	00 7d 20    	mov.w     #0x7d0, w0
    186a:	01 00 20    	mov.w     #0x0, w1
    186c:	94 03 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    186e:	00 80 fa    	ulnk      
    1870:	00 00 06    	return    

00001872 <_lcd_putc>:

// Sends single character to LCD display
void lcd_putc(_LCD *self, char c) {
    1872:	04 00 fa    	lnk       #0x4
    1874:	00 0f 78    	mov.w     w0, [w14]
    1876:	21 47 98    	mov.b     w1, [w14+2]
    __lcd_send(self, c, DR_WRITE);
    1878:	2e 40 90    	mov.b     [w14+2], w0
    187a:	92 c0 b3    	mov.b     #0x9, w2
    187c:	80 40 78    	mov.b     w0, w1
    187e:	1e 00 78    	mov.w     [w14], w0
    1880:	d8 fe 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
    // delay_by_nop(1000);
}
    1882:	00 80 fa    	ulnk      
    1884:	00 00 06    	return    

00001886 <_lcd_goto>:

// Sends commands to move LCD cursor to specified location
void lcd_goto(_LCD *self, uint8_t line, uint8_t col) { //x=col, y=row
    1886:	06 00 fa    	lnk       #0x6
    1888:	10 07 98    	mov.w     w0, [w14+2]
    188a:	41 47 98    	mov.b     w1, [w14+4]
    188c:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t address;
    switch(line) {
    188e:	4e 40 90    	mov.b     [w14+4], w0
    1890:	00 80 fb    	ze        w0, w0
    1892:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1894:	03 00 32    	bra       Z, 0x189c <.L24>
    1896:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1898:	04 00 32    	bra       Z, 0x18a2 <.L25>
    189a:	06 00 37    	bra       0x18a8 <.L27>

0000189c <.L24>:
        case 1:
            address = 0x00;
    189c:	00 40 eb    	clr.b     w0
    189e:	00 4f 78    	mov.b     w0, [w14]
            break;
    18a0:	06 00 37    	bra       0x18ae <.L26>

000018a2 <.L25>:
        case 2:
            address = 0x40;
    18a2:	00 c4 b3    	mov.b     #0x40, w0
    18a4:	00 4f 78    	mov.b     w0, [w14]
            break;
    18a6:	03 00 37    	bra       0x18ae <.L26>

000018a8 <.L27>:
        default:
            address = 0x00;
    18a8:	00 40 eb    	clr.b     w0
    18aa:	00 4f 78    	mov.b     w0, [w14]
            break;
    18ac:	00 00 00    	nop       

000018ae <.L26>:
    }

    address = address+col;
    18ae:	5e 40 90    	mov.b     [w14+5], w0
    18b0:	1e 4f 40    	add.b     w0, [w14], [w14]
    __lcd_send(self, LCD_SETDDRAMADDR | address, INTERNAL_WRITE);
    18b2:	1e 40 78    	mov.b     [w14], w0
    18b4:	00 74 a0    	bset.b    w0, #0x7
    18b6:	82 c0 b3    	mov.b     #0x8, w2
    18b8:	80 40 78    	mov.b     w0, w1
    18ba:	1e 00 90    	mov.w     [w14+2], w0
    18bc:	ba fe 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
}
    18be:	00 80 fa    	ulnk      
    18c0:	00 00 06    	return    

000018c2 <_lcd_cursor>:


void lcd_cursor(_LCD *self, uint8_t cur) {
    18c2:	04 00 fa    	lnk       #0x4
    18c4:	00 0f 78    	mov.w     w0, [w14]
    18c6:	21 47 98    	mov.b     w1, [w14+2]
    switch(cur) {
    18c8:	2e 40 90    	mov.b     [w14+2], w0
    18ca:	00 80 fb    	ze        w0, w0
    18cc:	00 00 e0    	cp0.w     w0
    18ce:	03 00 32    	bra       Z, 0x18d6 <.L30>
    18d0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    18d2:	06 00 32    	bra       Z, 0x18e0 <.L31>
        case 0:
            __lcd_send(self, 0x0C, INTERNAL_WRITE);
            break;
        case 1:
            __lcd_send(self, 0x0E, INTERNAL_WRITE);
            break;
        default:
            break;
    18d4:	0a 00 37    	bra       0x18ea <.L28>

000018d6 <.L30>:
    18d6:	82 c0 b3    	mov.b     #0x8, w2
    18d8:	c1 c0 b3    	mov.b     #0xc, w1
    18da:	1e 00 78    	mov.w     [w14], w0
    18dc:	aa fe 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
    18de:	05 00 37    	bra       0x18ea <.L28>

000018e0 <.L31>:
    18e0:	82 c0 b3    	mov.b     #0x8, w2
    18e2:	e1 c0 b3    	mov.b     #0xe, w1
    18e4:	1e 00 78    	mov.w     [w14], w0
    18e6:	a5 fe 07    	rcall     0x1632 <___lcd_send> <.LFB2> <.LFE1>
    18e8:	00 00 00    	nop       

000018ea <.L28>:
    }
}
    18ea:	00 80 fa    	ulnk      
    18ec:	00 00 06    	return    

000018ee <_lcd_print1>:

void lcd_print1(_LCD *self, char *str) {
    18ee:	04 00 fa    	lnk       #0x4
    18f0:	00 0f 78    	mov.w     w0, [w14]
    18f2:	11 07 98    	mov.w     w1, [w14+2]
    lcd_clear(self);
    18f4:	1e 00 78    	mov.w     [w14], w0
    18f6:	b2 ff 07    	rcall     0x185c <_lcd_clear> <.LFB8> <.LFE7>
    while (*str) {
    18f8:	08 00 37    	bra       0x190a <.L34>

000018fa <.L35>:
        lcd_putc(self, *str);
    18fa:	1e 00 90    	mov.w     [w14+2], w0
    18fc:	10 40 78    	mov.b     [w0], w0
    18fe:	80 40 78    	mov.b     w0, w1
    1900:	1e 00 78    	mov.w     [w14], w0
    1902:	b7 ff 07    	rcall     0x1872 <_lcd_putc> <.LFB9> <.LFE8>
        str++;
    1904:	1e 00 90    	mov.w     [w14+2], w0
    1906:	00 00 e8    	inc.w     w0, w0
    1908:	10 07 98    	mov.w     w0, [w14+2]

0000190a <.L34>:
    190a:	1e 00 90    	mov.w     [w14+2], w0
    190c:	10 40 78    	mov.b     [w0], w0
    190e:	00 04 e0    	cp0.b     w0
    1910:	f4 ff 3a    	bra       NZ, 0x18fa <.L35>
    }
}
    1912:	00 80 fa    	ulnk      
    1914:	00 00 06    	return    

00001916 <_lcd_print2>:

void lcd_print2(_LCD *self, char* line1, char* line2){
    1916:	42 00 fa    	lnk       #0x42
    1918:	60 1f 98    	mov.w     w0, [w14+60]
    191a:	71 1f 98    	mov.w     w1, [w14+62]
    191c:	02 27 98    	mov.w     w2, [w14+64]
    lcd_clear(self);
    191e:	6e 18 90    	mov.w     [w14+60], w0
    1920:	9d ff 07    	rcall     0x185c <_lcd_clear> <.LFB8> <.LFE7>
    char str[56] ="                                                        ";
    1922:	a0 54 29    	mov.w     #0x954a, w0
    1924:	e4 00 47    	add.w     w14, #0x4, w1
    1926:	37 00 09    	repeat    #0x37
    1928:	b0 58 78    	mov.b     [w0++], [w1++]
    192a:	80 03 b1    	sub.w     #0x38, w0
    int i =0;
    192c:	00 00 eb    	clr.w     w0
    192e:	00 0f 78    	mov.w     w0, [w14]
    while (*line1){
    1930:	09 00 37    	bra       0x1944 <.L37>

00001932 <.L38>:
        str[i]=*line1;
    1932:	7e 18 90    	mov.w     [w14+62], w0
    1934:	90 40 78    	mov.b     [w0], w1
    1936:	64 00 47    	add.w     w14, #0x4, w0
    1938:	1e 00 40    	add.w     w0, [w14], w0
    193a:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    193c:	1e 0f e8    	inc.w     [w14], [w14]
        line1++;
    193e:	7e 18 90    	mov.w     [w14+62], w0
    1940:	00 00 e8    	inc.w     w0, w0
    1942:	70 1f 98    	mov.w     w0, [w14+62]

00001944 <.L37>:
    1944:	7e 18 90    	mov.w     [w14+62], w0
    1946:	10 40 78    	mov.b     [w0], w0
    1948:	00 04 e0    	cp0.b     w0
    194a:	f3 ff 3a    	bra       NZ, 0x1932 <.L38>
    }
    i =40;
    194c:	80 02 20    	mov.w     #0x28, w0
    194e:	00 0f 78    	mov.w     w0, [w14]
    while (*line2){
    1950:	09 00 37    	bra       0x1964 <.L39>

00001952 <.L40>:
        str[i]=*line2;
    1952:	0e 20 90    	mov.w     [w14+64], w0
    1954:	90 40 78    	mov.b     [w0], w1
    1956:	64 00 47    	add.w     w14, #0x4, w0
    1958:	1e 00 40    	add.w     w0, [w14], w0
    195a:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    195c:	1e 0f e8    	inc.w     [w14], [w14]
        line2++;
    195e:	0e 20 90    	mov.w     [w14+64], w0
    1960:	00 00 e8    	inc.w     w0, w0
    1962:	00 27 98    	mov.w     w0, [w14+64]

00001964 <.L39>:
    1964:	0e 20 90    	mov.w     [w14+64], w0
    1966:	10 40 78    	mov.b     [w0], w0
    1968:	00 04 e0    	cp0.b     w0
    196a:	f3 ff 3a    	bra       NZ, 0x1952 <.L40>
    }
    char* strptr=str;
    196c:	64 00 47    	add.w     w14, #0x4, w0
    196e:	10 07 98    	mov.w     w0, [w14+2]
    lcd_print1(self,strptr);
    1970:	9e 00 90    	mov.w     [w14+2], w1
    1972:	6e 18 90    	mov.w     [w14+60], w0
    1974:	bc ff 07    	rcall     0x18ee <_lcd_print1> <.LFB12> <.LFE11>
}
    1976:	00 80 fa    	ulnk      
    1978:	00 00 06    	return    

0000197a <_lcd_print>:

void lcd_print(_LCD *self, char* message) {
    197a:	30 00 fa    	lnk       #0x30
    197c:	60 17 98    	mov.w     w0, [w14+44]
    197e:	71 17 98    	mov.w     w1, [w14+46]
    char newstr1[17] = "                ";
    1980:	30 58 29    	mov.w     #0x9583, w0
    1982:	ea 00 47    	add.w     w14, #0xa, w1
    1984:	10 00 09    	repeat    #0x10
    1986:	b0 58 78    	mov.b     [w0++], [w1++]
    1988:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr1= newstr1;
    198a:	6a 0f 47    	add.w     w14, #0xa, [w14]
    char newstr2[17] = "                ";
    198c:	30 58 29    	mov.w     #0x9583, w0
    198e:	fb 00 47    	add.w     w14, #0x1b, w1
    1990:	10 00 09    	repeat    #0x10
    1992:	b0 58 78    	mov.b     [w0++], [w1++]
    1994:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr2= newstr2;
    1996:	7b 00 47    	add.w     w14, #0x1b, w0
    1998:	10 07 98    	mov.w     w0, [w14+2]
    char* temp1 = newstrptr1;
    199a:	9e 00 78    	mov.w     [w14], w1
    199c:	31 07 98    	mov.w     w1, [w14+6]
    char* temp2 = newstrptr2;
    199e:	9e 00 90    	mov.w     [w14+2], w1
    19a0:	41 07 98    	mov.w     w1, [w14+8]
    uint8_t i=0;
    19a2:	00 40 eb    	clr.b     w0
    19a4:	40 47 98    	mov.b     w0, [w14+4]
    while (i <17){
    19a6:	0f 00 37    	bra       0x19c6 <.L42>

000019a8 <.L44>:
        if (*message){
    19a8:	7e 10 90    	mov.w     [w14+46], w0
    19aa:	10 40 78    	mov.b     [w0], w0
    19ac:	00 04 e0    	cp0.b     w0
    19ae:	08 00 32    	bra       Z, 0x19c0 <.L43>
            *newstrptr1=*message;
    19b0:	7e 10 90    	mov.w     [w14+46], w0
    19b2:	90 40 78    	mov.b     [w0], w1
    19b4:	1e 00 78    	mov.w     [w14], w0
    19b6:	01 48 78    	mov.b     w1, [w0]
            message++;
    19b8:	7e 10 90    	mov.w     [w14+46], w0
    19ba:	00 00 e8    	inc.w     w0, w0
    19bc:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr1++;
    19be:	1e 0f e8    	inc.w     [w14], [w14]

000019c0 <.L43>:
        }
        i++;
    19c0:	4e 40 90    	mov.b     [w14+4], w0
    19c2:	00 40 e8    	inc.b     w0, w0
    19c4:	40 47 98    	mov.b     w0, [w14+4]

000019c6 <.L42>:
    19c6:	4e 40 90    	mov.b     [w14+4], w0
    19c8:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    19ca:	ee ff 36    	bra       LEU, 0x19a8 <.L44>
    }
    i=0;
    19cc:	00 40 eb    	clr.b     w0
    19ce:	40 47 98    	mov.b     w0, [w14+4]
    message--; //SKETCHY!
    19d0:	7e 10 90    	mov.w     [w14+46], w0
    19d2:	00 00 e9    	dec.w     w0, w0
    19d4:	70 17 98    	mov.w     w0, [w14+46]
    while (i <17){
    19d6:	11 00 37    	bra       0x19fa <.L45>

000019d8 <.L47>:
        if (*message){
    19d8:	7e 10 90    	mov.w     [w14+46], w0
    19da:	10 40 78    	mov.b     [w0], w0
    19dc:	00 04 e0    	cp0.b     w0
    19de:	0a 00 32    	bra       Z, 0x19f4 <.L46>
            *newstrptr2=*message;
    19e0:	7e 10 90    	mov.w     [w14+46], w0
    19e2:	90 40 78    	mov.b     [w0], w1
    19e4:	1e 00 90    	mov.w     [w14+2], w0
    19e6:	01 48 78    	mov.b     w1, [w0]
            message++;
    19e8:	7e 10 90    	mov.w     [w14+46], w0
    19ea:	00 00 e8    	inc.w     w0, w0
    19ec:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr2++;
    19ee:	1e 00 90    	mov.w     [w14+2], w0
    19f0:	00 00 e8    	inc.w     w0, w0
    19f2:	10 07 98    	mov.w     w0, [w14+2]

000019f4 <.L46>:
        }
        i++;
    19f4:	4e 40 90    	mov.b     [w14+4], w0
    19f6:	00 40 e8    	inc.b     w0, w0
    19f8:	40 47 98    	mov.b     w0, [w14+4]

000019fa <.L45>:
    19fa:	4e 40 90    	mov.b     [w14+4], w0
    19fc:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    19fe:	ec ff 36    	bra       LEU, 0x19d8 <.L47>
    }
    lcd_print2(self, temp1, temp2);
    1a00:	4e 01 90    	mov.w     [w14+8], w2
    1a02:	be 00 90    	mov.w     [w14+6], w1
    1a04:	6e 10 90    	mov.w     [w14+44], w0
    1a06:	87 ff 07    	rcall     0x1916 <_lcd_print2> <.LFB13> <.LFE12>
}
    1a08:	00 80 fa    	ulnk      
    1a0a:	00 00 06    	return    

00001a0c <_lcd_broadcast>:

void lcd_broadcast(char* message) {
    1a0c:	04 00 fa    	lnk       #0x4
    1a0e:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t i;
    for (i = 0; i < 3; i++)
    1a10:	00 40 eb    	clr.b     w0
    1a12:	00 4f 78    	mov.b     w0, [w14]
    1a14:	08 00 37    	bra       0x1a26 <.L49>

00001a16 <.L50>:
        lcd_print(&lcd[i], message);
    1a16:	1e 80 fb    	ze        [w14], w0
    1a18:	65 00 b9    	mul.su    w0, #0x5, w0
    1a1a:	80 00 78    	mov.w     w0, w1
    1a1c:	00 04 21    	mov.w     #0x1040, w0
    1a1e:	00 80 40    	add.w     w1, w0, w0
    1a20:	9e 00 90    	mov.w     [w14+2], w1
    1a22:	ab ff 07    	rcall     0x197a <_lcd_print> <.LFB14> <.LFE13>
    1a24:	1e 4f e8    	inc.b     [w14], [w14]

00001a26 <.L49>:
    1a26:	1e 40 78    	mov.b     [w14], w0
    1a28:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1a2a:	f5 ff 36    	bra       LEU, 0x1a16 <.L50>
}
    1a2c:	00 80 fa    	ulnk      
    1a2e:	00 00 06    	return    

00001a30 <_itoa>:

char * itoa (int value, char *result, int base) {
    1a30:	0e 00 fa    	lnk       #0xe
    1a32:	40 07 98    	mov.w     w0, [w14+8]
    1a34:	51 07 98    	mov.w     w1, [w14+10]
    1a36:	62 07 98    	mov.w     w2, [w14+12]
    // check that the base if valid
    if (base < 2 || base > 36) { *result = '\0'; return result; }
    1a38:	6e 00 90    	mov.w     [w14+12], w0
    1a3a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1a3c:	04 00 34    	bra       LE, 0x1a46 <.L52>
    1a3e:	ee 00 90    	mov.w     [w14+12], w1
    1a40:	40 02 20    	mov.w     #0x24, w0
    1a42:	80 8f 50    	sub.w     w1, w0, [w15]
    1a44:	05 00 34    	bra       LE, 0x1a50 <.L53>

00001a46 <.L52>:
    1a46:	5e 00 90    	mov.w     [w14+10], w0
    1a48:	80 40 eb    	clr.b     w1
    1a4a:	01 48 78    	mov.b     w1, [w0]
    1a4c:	5e 00 90    	mov.w     [w14+10], w0
    1a4e:	39 00 37    	bra       0x1ac2 <.L54>

00001a50 <.L53>:

    char* ptr = result, *ptr1 = result, tmp_char;
    1a50:	de 00 90    	mov.w     [w14+10], w1
    1a52:	01 0f 78    	mov.w     w1, [w14]
    1a54:	5e 01 90    	mov.w     [w14+10], w2
    1a56:	12 07 98    	mov.w     w2, [w14+2]

00001a58 <.L55>:
    int tmp_value;

    do {
        tmp_value = value;
    1a58:	ce 00 90    	mov.w     [w14+8], w1
    1a5a:	21 07 98    	mov.w     w1, [w14+4]
        value /= base;
    1a5c:	ce 00 90    	mov.w     [w14+8], w1
    1a5e:	6e 00 90    	mov.w     [w14+12], w0
    1a60:	00 01 78    	mov.w     w0, w2
    1a62:	11 00 09    	repeat    #0x11
    1a64:	82 00 d8    	div.sw    w1, w2
    1a66:	40 07 98    	mov.w     w0, [w14+8]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
    1a68:	ce 00 90    	mov.w     [w14+8], w1
    1a6a:	6e 00 90    	mov.w     [w14+12], w0
    1a6c:	00 88 b9    	mul.ss    w1, w0, w0
    1a6e:	00 00 78    	mov.w     w0, w0
    1a70:	ae 00 90    	mov.w     [w14+4], w1
    1a72:	00 80 50    	sub.w     w1, w0, w0
    1a74:	30 02 b0    	add.w     #0x23, w0
    1a76:	41 59 29    	mov.w     #0x9594, w1
    1a78:	e1 40 78    	mov.b     [w1+w0], w1
    1a7a:	1e 00 78    	mov.w     [w14], w0
    1a7c:	01 48 78    	mov.b     w1, [w0]
    1a7e:	1e 0f e8    	inc.w     [w14], [w14]
    } while ( value );
    1a80:	4e 00 90    	mov.w     [w14+8], w0
    1a82:	00 00 e0    	cp0.w     w0
    1a84:	e9 ff 3a    	bra       NZ, 0x1a58 <.L55>

    // Apply negative sign
    if (tmp_value < 0) *ptr++ = '-';
    1a86:	2e 00 90    	mov.w     [w14+4], w0
    1a88:	00 00 e0    	cp0.w     w0
    1a8a:	04 00 3d    	bra       GE, 0x1a94 <.L56>
    1a8c:	1e 00 78    	mov.w     [w14], w0
    1a8e:	d1 c2 b3    	mov.b     #0x2d, w1
    1a90:	01 48 78    	mov.b     w1, [w0]
    1a92:	1e 0f e8    	inc.w     [w14], [w14]

00001a94 <.L56>:
    *ptr-- = '\0';
    1a94:	1e 00 78    	mov.w     [w14], w0
    1a96:	80 40 eb    	clr.b     w1
    1a98:	01 48 78    	mov.b     w1, [w0]
    1a9a:	1e 0f e9    	dec.w     [w14], [w14]
    while (ptr1 < ptr) {
    1a9c:	0e 00 37    	bra       0x1aba <.L57>

00001a9e <.L58>:
        tmp_char = *ptr;
    1a9e:	1e 00 78    	mov.w     [w14], w0
    1aa0:	90 40 78    	mov.b     [w0], w1
    1aa2:	61 47 98    	mov.b     w1, [w14+6]
        *ptr--= *ptr1;
    1aa4:	1e 00 90    	mov.w     [w14+2], w0
    1aa6:	90 40 78    	mov.b     [w0], w1
    1aa8:	1e 00 78    	mov.w     [w14], w0
    1aaa:	01 48 78    	mov.b     w1, [w0]
    1aac:	1e 0f e9    	dec.w     [w14], [w14]
        *ptr1++ = tmp_char;
    1aae:	1e 00 90    	mov.w     [w14+2], w0
    1ab0:	6e 41 90    	mov.b     [w14+6], w2
    1ab2:	02 48 78    	mov.b     w2, [w0]
    1ab4:	1e 00 90    	mov.w     [w14+2], w0
    1ab6:	00 00 e8    	inc.w     w0, w0
    1ab8:	10 07 98    	mov.w     w0, [w14+2]

00001aba <.L57>:
    1aba:	1e 00 90    	mov.w     [w14+2], w0
    1abc:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1abe:	ef ff 39    	bra       NC, 0x1a9e <.L58>
    }
    return result;
    1ac0:	5e 00 90    	mov.w     [w14+10], w0

00001ac2 <.L54>:
}
    1ac2:	00 80 fa    	ulnk      
    1ac4:	00 00 06    	return    

00001ac6 <_main>:
    1ac6:	60 00 fa    	lnk       #0x60
    1ac8:	88 1f 78    	mov.w     w8, [w15++]
    1aca:	74 07 07    	rcall     0x29b4 <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    1acc:	a6 04 07    	rcall     0x241a <_init_ajuart> <.L0> <.LFB0> <.LFE21> <.Letext0> <.Ltext0>
    1ace:	27 02 07    	rcall     0x1f1e <_toggleSwitchSetup> <.LFB9> <.LFE8>
    1ad0:	80 3e 20    	mov.w     #0x3e8, w0
    1ad2:	74 02 07    	rcall     0x1fbc <_i2c_init> <.LFB1> <.LFE0>
    1ad4:	12 c4 b3    	mov.b     #0x41, w2
    1ad6:	61 c0 b3    	mov.b     #0x6, w1
    1ad8:	00 05 21    	mov.w     #0x1050, w0
    1ada:	2c fe 07    	rcall     0x1734 <_lcd_init> <.LFB5> <.LFE4>
    1adc:	00 05 21    	mov.w     #0x1050, w0
    1ade:	be fe 07    	rcall     0x185c <_lcd_clear> <.LFB8> <.LFE7>
    1ae0:	d0 09 20    	mov.w     #0x9d, w0
    1ae2:	ac 03 07    	rcall     0x223c <_i2c2_init> <.LFB13> <.LFE12>
    1ae4:	00 01 20    	mov.w     #0x10, w0
    1ae6:	d0 10 88    	mov.w     w0, 0x21a
    1ae8:	1c 22 ef    	clr.w     0x21c
    1aea:	9a 20 a8    	bset.b    0x9a, #0x1
    1aec:	50 16 80    	mov.w     0x2ca, w0
    1aee:	45 00 de    	lsr.w     w0, #0x5, w0
    1af0:	61 40 60    	and.b     w0, #0x1, w0
    1af2:	00 80 fb    	ze        w0, w0
    1af4:	8f 07 07    	rcall     0x2a14 <_read_analog> <.LFB1> <.LFE0>
    1af6:	b0 40 88    	mov.w     w0, 0x816
    1af8:	00 40 eb    	clr.b     w0
    1afa:	00 4f 78    	mov.b     w0, [w14]
    1afc:	02 00 37    	bra       0x1b02 <.L2>

00001afe <.L3>:
    1afe:	34 02 07    	rcall     0x1f68 <_rand_next> <.LFB10> <.LFE9>
    1b00:	1e 4f e8    	inc.b     [w14], [w14]

00001b02 <.L2>:
    1b02:	1e 84 fb    	ze        [w14], w8
    1b04:	50 16 80    	mov.w     0x2ca, w0
    1b06:	45 00 de    	lsr.w     w0, #0x5, w0
    1b08:	61 40 60    	and.b     w0, #0x1, w0
    1b0a:	00 80 fb    	ze        w0, w0
    1b0c:	83 07 07    	rcall     0x2a14 <_read_analog> <.LFB1> <.LFE0>
    1b0e:	74 00 40    	add.w     w0, #0x14, w0
    1b10:	80 0f 54    	sub.w     w8, w0, [w15]
    1b12:	f5 ff 39    	bra       NC, 0x1afe <.L3>
    1b14:	00 40 eb    	clr.b     w0
    1b16:	00 4f 78    	mov.b     w0, [w14]
    1b18:	12 00 37    	bra       0x1b3e <.L4>

00001b1a <.L5>:
    1b1a:	9e 81 fb    	ze        [w14], w3
    1b1c:	b2 40 80    	mov.w     0x816, w2
    1b1e:	90 88 28    	mov.w     #0x8889, w0
    1b20:	00 10 b8    	mul.uu    w2, w0, w0
    1b22:	43 08 de    	lsr.w     w1, #0x3, w0
    1b24:	6f 00 b9    	mul.su    w0, #0xf, w0
    1b26:	00 00 78    	mov.w     w0, w0
    1b28:	00 00 51    	sub.w     w2, w0, w0
    1b2a:	1e 81 fb    	ze        [w14], w2
    1b2c:	41 02 20    	mov.w     #0x24, w1
    1b2e:	01 80 b9    	mul.ss    w0, w1, w0
    1b30:	00 00 78    	mov.w     w0, w0
    1b32:	02 00 40    	add.w     w0, w2, w0
    1b34:	c1 2f 29    	mov.w     #0x92fc, w1
    1b36:	e1 40 78    	mov.b     [w1+w0], w1
    1b38:	03 00 47    	add.w     w14, w3, w0
    1b3a:	11 40 98    	mov.b     w1, [w0+1]
    1b3c:	1e 4f e8    	inc.b     [w14], [w14]

00001b3e <.L4>:
    1b3e:	30 c2 b3    	mov.b     #0x23, w0
    1b40:	9e 40 78    	mov.b     [w14], w1
    1b42:	80 cf 50    	sub.b     w1, w0, [w15]
    1b44:	ea ff 36    	bra       LEU, 0x1b1a <.L5>
    1b46:	0e 00 e8    	inc.w     w14, w0
    1b48:	10 40 88    	mov.w     w0, 0x802
    1b4a:	90 51 29    	mov.w     #0x9519, w0
    1b4c:	90 40 78    	mov.b     [w0], w1
    1b4e:	51 67 98    	mov.b     w1, [w14+37]
    1b50:	90 40 90    	mov.b     [w0+1], w1
    1b52:	61 67 98    	mov.b     w1, [w14+38]
    1b54:	8e 00 78    	mov.w     w14, w1
    1b56:	71 02 b0    	add.w     #0x27, w1
    1b58:	04 00 09    	repeat    #0x4
    1b5a:	80 58 eb    	clr.b     [w1++]
    1b5c:	00 40 eb    	clr.b     w0
    1b5e:	00 4f 78    	mov.b     w0, [w14]
    1b60:	08 00 37    	bra       0x1b72 <.L6>

00001b62 <.L7>:
    1b62:	1e 80 fb    	ze        [w14], w0
    1b64:	12 40 80    	mov.w     0x802, w2
    1b66:	9e 80 fb    	ze        [w14], w1
    1b68:	81 00 41    	add.w     w2, w1, w1
    1b6a:	91 40 78    	mov.b     [w1], w1
    1b6c:	00 00 47    	add.w     w14, w0, w0
    1b6e:	51 60 98    	mov.b     w1, [w0+37]
    1b70:	1e 4f e8    	inc.b     [w14], [w14]

00001b72 <.L6>:
    1b72:	1e 40 78    	mov.b     [w14], w0
    1b74:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1b76:	f5 ff 36    	bra       LEU, 0x1b62 <.L7>
    1b78:	50 02 20    	mov.w     #0x25, w0
    1b7a:	0e 00 40    	add.w     w0, w14, w0
    1b7c:	70 40 88    	mov.w     w0, 0x80e
    1b7e:	00 02 20    	mov.w     #0x20, w0
    1b80:	01 00 20    	mov.w     #0x0, w1
    1b82:	60 17 98    	mov.w     w0, [w14+44]
    1b84:	71 17 98    	mov.w     w1, [w14+46]
    1b86:	8e 00 78    	mov.w     w14, w1
    1b88:	01 03 b0    	add.w     #0x30, w1
    1b8a:	00 00 09    	repeat    #0x0
    1b8c:	80 18 eb    	clr.w     [w1++]
    1b8e:	80 58 eb    	clr.b     [w1++]
    1b90:	00 40 eb    	clr.b     w0
    1b92:	00 4f 78    	mov.b     w0, [w14]
    1b94:	09 00 37    	bra       0x1ba8 <.L8>

00001b96 <.L9>:
    1b96:	1e 80 fb    	ze        [w14], w0
    1b98:	12 40 80    	mov.w     0x802, w2
    1b9a:	9e 80 fb    	ze        [w14], w1
    1b9c:	e5 80 40    	add.w     w1, #0x5, w1
    1b9e:	81 00 41    	add.w     w2, w1, w1
    1ba0:	91 40 78    	mov.b     [w1], w1
    1ba2:	00 00 47    	add.w     w14, w0, w0
    1ba4:	41 68 98    	mov.b     w1, [w0+44]
    1ba6:	1e 4f e8    	inc.b     [w14], [w14]

00001ba8 <.L8>:
    1ba8:	1e 40 78    	mov.b     [w14], w0
    1baa:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1bac:	f4 ff 36    	bra       LEU, 0x1b96 <.L9>
    1bae:	c0 02 20    	mov.w     #0x2c, w0
    1bb0:	0e 00 40    	add.w     w0, w14, w0
    1bb2:	20 40 88    	mov.w     w0, 0x804
    1bb4:	90 51 29    	mov.w     #0x9519, w0
    1bb6:	90 40 78    	mov.b     [w0], w1
    1bb8:	31 77 98    	mov.b     w1, [w14+51]
    1bba:	90 40 90    	mov.b     [w0+1], w1
    1bbc:	41 77 98    	mov.b     w1, [w14+52]
    1bbe:	8e 00 78    	mov.w     w14, w1
    1bc0:	51 03 b0    	add.w     #0x35, w1
    1bc2:	04 00 09    	repeat    #0x4
    1bc4:	80 58 eb    	clr.b     [w1++]
    1bc6:	00 40 eb    	clr.b     w0
    1bc8:	00 4f 78    	mov.b     w0, [w14]
    1bca:	09 00 37    	bra       0x1bde <.L10>

00001bcc <.L11>:
    1bcc:	1e 80 fb    	ze        [w14], w0
    1bce:	12 40 80    	mov.w     0x802, w2
    1bd0:	9e 80 fb    	ze        [w14], w1
    1bd2:	eb 80 40    	add.w     w1, #0xb, w1
    1bd4:	81 00 41    	add.w     w2, w1, w1
    1bd6:	91 40 78    	mov.b     [w1], w1
    1bd8:	00 00 47    	add.w     w14, w0, w0
    1bda:	31 70 98    	mov.b     w1, [w0+51]
    1bdc:	1e 4f e8    	inc.b     [w14], [w14]

00001bde <.L10>:
    1bde:	1e 40 78    	mov.b     [w14], w0
    1be0:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1be2:	f4 ff 36    	bra       LEU, 0x1bcc <.L11>
    1be4:	30 03 20    	mov.w     #0x33, w0
    1be6:	0e 00 40    	add.w     w0, w14, w0
    1be8:	30 40 88    	mov.w     w0, 0x806
    1bea:	00 02 20    	mov.w     #0x20, w0
    1bec:	01 00 20    	mov.w     #0x0, w1
    1bee:	50 1f 98    	mov.w     w0, [w14+58]
    1bf0:	61 1f 98    	mov.w     w1, [w14+60]
    1bf2:	8e 00 78    	mov.w     w14, w1
    1bf4:	e1 03 b0    	add.w     #0x3e, w1
    1bf6:	00 00 09    	repeat    #0x0
    1bf8:	80 18 eb    	clr.w     [w1++]
    1bfa:	80 58 eb    	clr.b     [w1++]
    1bfc:	00 40 eb    	clr.b     w0
    1bfe:	00 4f 78    	mov.b     w0, [w14]
    1c00:	09 00 37    	bra       0x1c14 <.L12>

00001c02 <.L13>:
    1c02:	1e 80 fb    	ze        [w14], w0
    1c04:	12 40 80    	mov.w     0x802, w2
    1c06:	9e 80 fb    	ze        [w14], w1
    1c08:	f1 80 40    	add.w     w1, #0x11, w1
    1c0a:	81 00 41    	add.w     w2, w1, w1
    1c0c:	91 40 78    	mov.b     [w1], w1
    1c0e:	00 00 47    	add.w     w14, w0, w0
    1c10:	21 78 98    	mov.b     w1, [w0+58]
    1c12:	1e 4f e8    	inc.b     [w14], [w14]

00001c14 <.L12>:
    1c14:	1e 40 78    	mov.b     [w14], w0
    1c16:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1c18:	f4 ff 36    	bra       LEU, 0x1c02 <.L13>
    1c1a:	a0 03 20    	mov.w     #0x3a, w0
    1c1c:	0e 00 40    	add.w     w0, w14, w0
    1c1e:	40 40 88    	mov.w     w0, 0x808
    1c20:	90 51 29    	mov.w     #0x9519, w0
    1c22:	90 40 78    	mov.b     [w0], w1
    1c24:	11 c7 98    	mov.b     w1, [w14+65]
    1c26:	90 40 90    	mov.b     [w0+1], w1
    1c28:	21 c7 98    	mov.b     w1, [w14+66]
    1c2a:	8e 00 78    	mov.w     w14, w1
    1c2c:	31 04 b0    	add.w     #0x43, w1
    1c2e:	04 00 09    	repeat    #0x4
    1c30:	80 58 eb    	clr.b     [w1++]
    1c32:	00 40 eb    	clr.b     w0
    1c34:	00 4f 78    	mov.b     w0, [w14]
    1c36:	09 00 37    	bra       0x1c4a <.L14>

00001c38 <.L15>:
    1c38:	1e 80 fb    	ze        [w14], w0
    1c3a:	12 40 80    	mov.w     0x802, w2
    1c3c:	9e 80 fb    	ze        [w14], w1
    1c3e:	f7 80 40    	add.w     w1, #0x17, w1
    1c40:	81 00 41    	add.w     w2, w1, w1
    1c42:	91 40 78    	mov.b     [w1], w1
    1c44:	00 00 47    	add.w     w14, w0, w0
    1c46:	11 c0 98    	mov.b     w1, [w0+65]
    1c48:	1e 4f e8    	inc.b     [w14], [w14]

00001c4a <.L14>:
    1c4a:	1e 40 78    	mov.b     [w14], w0
    1c4c:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1c4e:	f4 ff 36    	bra       LEU, 0x1c38 <.L15>
    1c50:	10 04 20    	mov.w     #0x41, w0
    1c52:	0e 00 40    	add.w     w0, w14, w0
    1c54:	50 40 88    	mov.w     w0, 0x80a
    1c56:	00 02 20    	mov.w     #0x20, w0
    1c58:	01 00 20    	mov.w     #0x0, w1
    1c5a:	40 27 98    	mov.w     w0, [w14+72]
    1c5c:	51 27 98    	mov.w     w1, [w14+74]
    1c5e:	8e 00 78    	mov.w     w14, w1
    1c60:	c1 04 b0    	add.w     #0x4c, w1
    1c62:	00 00 09    	repeat    #0x0
    1c64:	80 18 eb    	clr.w     [w1++]
    1c66:	80 58 eb    	clr.b     [w1++]
    1c68:	00 40 eb    	clr.b     w0
    1c6a:	00 4f 78    	mov.b     w0, [w14]
    1c6c:	09 00 37    	bra       0x1c80 <.L16>

00001c6e <.L17>:
    1c6e:	1e 80 fb    	ze        [w14], w0
    1c70:	12 40 80    	mov.w     0x802, w2
    1c72:	9e 80 fb    	ze        [w14], w1
    1c74:	fd 80 40    	add.w     w1, #0x1d, w1
    1c76:	81 00 41    	add.w     w2, w1, w1
    1c78:	91 40 78    	mov.b     [w1], w1
    1c7a:	00 00 47    	add.w     w14, w0, w0
    1c7c:	01 c8 98    	mov.b     w1, [w0+72]
    1c7e:	1e 4f e8    	inc.b     [w14], [w14]

00001c80 <.L16>:
    1c80:	1e 40 78    	mov.b     [w14], w0
    1c82:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1c84:	f4 ff 36    	bra       LEU, 0x1c6e <.L17>
    1c86:	80 04 20    	mov.w     #0x48, w0
    1c88:	0e 00 40    	add.w     w0, w14, w0
    1c8a:	60 40 88    	mov.w     w0, 0x80c
    1c8c:	b2 40 80    	mov.w     0x816, w2
    1c8e:	d0 cc 2c    	mov.w     #0xcccd, w0
    1c90:	00 10 b8    	mul.uu    w2, w0, w0
    1c92:	42 08 de    	lsr.w     w1, #0x2, w0
    1c94:	65 00 b9    	mul.su    w0, #0x5, w0
    1c96:	00 00 78    	mov.w     w0, w0
    1c98:	00 00 51    	sub.w     w2, w0, w0
    1c9a:	00 40 78    	mov.b     w0, w0
    1c9c:	10 e8 b7    	mov.b     WREG, 0x810
    1c9e:	64 01 07    	rcall     0x1f68 <_rand_next> <.LFB10> <.LFE9>
    1ca0:	b2 40 80    	mov.w     0x816, w2
    1ca2:	d0 cc 2c    	mov.w     #0xcccd, w0
    1ca4:	00 10 b8    	mul.uu    w2, w0, w0
    1ca6:	42 08 de    	lsr.w     w1, #0x2, w0
    1ca8:	65 00 b9    	mul.su    w0, #0x5, w0
    1caa:	00 00 78    	mov.w     w0, w0
    1cac:	00 00 51    	sub.w     w2, w0, w0
    1cae:	00 40 78    	mov.b     w0, w0
    1cb0:	11 e8 b7    	mov.b     WREG, 0x811
    1cb2:	5a 01 07    	rcall     0x1f68 <_rand_next> <.LFB10> <.LFE9>
    1cb4:	b2 40 80    	mov.w     0x816, w2
    1cb6:	d0 cc 2c    	mov.w     #0xcccd, w0
    1cb8:	00 10 b8    	mul.uu    w2, w0, w0
    1cba:	42 08 de    	lsr.w     w1, #0x2, w0
    1cbc:	65 00 b9    	mul.su    w0, #0x5, w0
    1cbe:	00 00 78    	mov.w     w0, w0
    1cc0:	00 00 51    	sub.w     w2, w0, w0
    1cc2:	00 40 78    	mov.b     w0, w0
    1cc4:	12 e8 b7    	mov.b     WREG, 0x812
    1cc6:	50 01 07    	rcall     0x1f68 <_rand_next> <.LFB10> <.LFE9>
    1cc8:	b2 40 80    	mov.w     0x816, w2
    1cca:	d0 cc 2c    	mov.w     #0xcccd, w0
    1ccc:	00 10 b8    	mul.uu    w2, w0, w0
    1cce:	42 08 de    	lsr.w     w1, #0x2, w0
    1cd0:	65 00 b9    	mul.su    w0, #0x5, w0
    1cd2:	00 00 78    	mov.w     w0, w0
    1cd4:	00 00 51    	sub.w     w2, w0, w0
    1cd6:	00 40 78    	mov.b     w0, w0
    1cd8:	13 e8 b7    	mov.b     WREG, 0x813
    1cda:	46 01 07    	rcall     0x1f68 <_rand_next> <.LFB10> <.LFE9>
    1cdc:	b2 40 80    	mov.w     0x816, w2
    1cde:	d0 cc 2c    	mov.w     #0xcccd, w0
    1ce0:	00 10 b8    	mul.uu    w2, w0, w0
    1ce2:	42 08 de    	lsr.w     w1, #0x2, w0
    1ce4:	65 00 b9    	mul.su    w0, #0x5, w0
    1ce6:	00 00 78    	mov.w     w0, w0
    1ce8:	00 00 51    	sub.w     w2, w0, w0
    1cea:	00 40 78    	mov.b     w0, w0
    1cec:	14 e8 b7    	mov.b     WREG, 0x814
    1cee:	00 52 29    	mov.w     #0x9520, w0
    1cf0:	f1 04 20    	mov.w     #0x4f, w1
    1cf2:	81 00 47    	add.w     w14, w1, w1
    1cf4:	0f 00 09    	repeat    #0xf
    1cf6:	b0 58 78    	mov.b     [w0++], [w1++]
    1cf8:	00 01 b1    	sub.w     #0x10, w0
    1cfa:	00 40 eb    	clr.b     w0
    1cfc:	70 df 98    	mov.b     w0, [w14+95]
    1cfe:	f0 04 20    	mov.w     #0x4f, w0
    1d00:	0e 00 40    	add.w     w0, w14, w0
    1d02:	00 40 88    	mov.w     w0, 0x800
    1d04:	00 40 80    	mov.w     0x800, w0
    1d06:	82 51 29    	mov.w     #0x9518, w2
    1d08:	80 00 78    	mov.w     w0, w1
    1d0a:	00 05 21    	mov.w     #0x1050, w0
    1d0c:	04 fe 07    	rcall     0x1916 <_lcd_print2> <.LFB13> <.LFE12>
    1d0e:	00 02 20    	mov.w     #0x20, w0
    1d10:	80 08 88    	mov.w     w0, 0x110
    1d12:	00 71 22    	mov.w     #0x2710, w0
    1d14:	60 08 88    	mov.w     w0, 0x10c
    1d16:	06 21 ef    	clr.w     0x106
    1d18:	84 e0 a9    	bclr.b    0x84, #0x7
    1d1a:	94 e0 a8    	bset.b    0x94, #0x7
    1d1c:	11 e1 a9    	bclr.b    0x111, #0x7
    1d1e:	80 d2 21    	mov.w     #0x1d28, w0
    1d20:	c0 40 88    	mov.w     w0, 0x818

00001d22 <.L18>:
    1d22:	c0 40 80    	mov.w     0x818, w0
    1d24:	00 00 01    	call      w0
    1d26:	fd ff 37    	bra       0x1d22 <.L18>

00001d28 <_setup>:
    1d28:	00 00 fa    	lnk       #0x0
    1d2a:	c1 40 80    	mov.w     0x818, w1
    1d2c:	d0 40 80    	mov.w     0x81a, w0
    1d2e:	80 8f 50    	sub.w     w1, w0, [w15]
    1d30:	08 00 32    	bra       Z, 0x1d42 <.L20>
    1d32:	c0 40 80    	mov.w     0x818, w0
    1d34:	d0 40 88    	mov.w     w0, 0x81a
    1d36:	da 22 a8    	bset.b    0x2da, #0x1
    1d38:	82 51 29    	mov.w     #0x9518, w2
    1d3a:	11 53 29    	mov.w     #0x9531, w1
    1d3c:	00 05 21    	mov.w     #0x1050, w0
    1d3e:	eb fd 07    	rcall     0x1916 <_lcd_print2> <.LFB13> <.LFE12>
    1d40:	21 68 ef    	clr.b     0x821

00001d42 <.L20>:
    1d42:	24 c8 bf    	mov.b     0x824, WREG
    1d44:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1d46:	02 00 3a    	bra       NZ, 0x1d4c <.L21>
    1d48:	a0 d5 21    	mov.w     #0x1d5a, w0
    1d4a:	c0 40 88    	mov.w     w0, 0x818

00001d4c <.L21>:
    1d4c:	c1 40 80    	mov.w     0x818, w1
    1d4e:	d0 40 80    	mov.w     0x81a, w0
    1d50:	80 8f 50    	sub.w     w1, w0, [w15]
    1d52:	01 00 32    	bra       Z, 0x1d56 <.L19>
    1d54:	da 22 a9    	bclr.b    0x2da, #0x1

00001d56 <.L19>:
    1d56:	00 80 fa    	ulnk      
    1d58:	00 00 06    	return    

00001d5a <_run>:
    1d5a:	00 00 fa    	lnk       #0x0
    1d5c:	c1 40 80    	mov.w     0x818, w1
    1d5e:	d0 40 80    	mov.w     0x81a, w0
    1d60:	80 8f 50    	sub.w     w1, w0, [w15]
    1d62:	07 00 32    	bra       Z, 0x1d72 <.L24>
    1d64:	c0 40 80    	mov.w     0x818, w0
    1d66:	d0 40 88    	mov.w     w0, 0x81a
    1d68:	dc e2 a8    	bset.b    0x2dc, #0x7
    1d6a:	10 00 20    	mov.w     #0x1, w0
    1d6c:	01 00 20    	mov.w     #0x0, w1
    1d6e:	13 01 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1d70:	da 02 a8    	bset.b    0x2da, #0x0

00001d72 <.L24>:
    1d72:	a5 00 07    	rcall     0x1ebe <_updateDisplay> <.LFB8> <.LFE5>
    1d74:	21 40 80    	mov.w     0x804, w1
    1d76:	10 c8 bf    	mov.b     0x810, WREG
    1d78:	00 80 fb    	ze        w0, w0
    1d7a:	00 80 40    	add.w     w1, w0, w0
    1d7c:	90 40 78    	mov.b     [w0], w1
    1d7e:	70 40 80    	mov.w     0x80e, w0
    1d80:	10 40 78    	mov.b     [w0], w0
    1d82:	80 cf 50    	sub.b     w1, w0, [w15]
    1d84:	2b 00 3a    	bra       NZ, 0x1ddc <.L25>
    1d86:	31 40 80    	mov.w     0x806, w1
    1d88:	11 c8 bf    	mov.b     0x811, WREG
    1d8a:	00 80 fb    	ze        w0, w0
    1d8c:	00 80 40    	add.w     w1, w0, w0
    1d8e:	90 40 78    	mov.b     [w0], w1
    1d90:	70 40 80    	mov.w     0x80e, w0
    1d92:	00 00 e8    	inc.w     w0, w0
    1d94:	10 40 78    	mov.b     [w0], w0
    1d96:	80 cf 50    	sub.b     w1, w0, [w15]
    1d98:	21 00 3a    	bra       NZ, 0x1ddc <.L25>
    1d9a:	41 40 80    	mov.w     0x808, w1
    1d9c:	12 c8 bf    	mov.b     0x812, WREG
    1d9e:	00 80 fb    	ze        w0, w0
    1da0:	00 80 40    	add.w     w1, w0, w0
    1da2:	90 40 78    	mov.b     [w0], w1
    1da4:	70 40 80    	mov.w     0x80e, w0
    1da6:	00 80 e8    	inc2.w    w0, w0
    1da8:	10 40 78    	mov.b     [w0], w0
    1daa:	80 cf 50    	sub.b     w1, w0, [w15]
    1dac:	17 00 3a    	bra       NZ, 0x1ddc <.L25>
    1dae:	51 40 80    	mov.w     0x80a, w1
    1db0:	13 c8 bf    	mov.b     0x813, WREG
    1db2:	00 80 fb    	ze        w0, w0
    1db4:	00 80 40    	add.w     w1, w0, w0
    1db6:	90 40 78    	mov.b     [w0], w1
    1db8:	70 40 80    	mov.w     0x80e, w0
    1dba:	63 00 40    	add.w     w0, #0x3, w0
    1dbc:	10 40 78    	mov.b     [w0], w0
    1dbe:	80 cf 50    	sub.b     w1, w0, [w15]
    1dc0:	0d 00 3a    	bra       NZ, 0x1ddc <.L25>
    1dc2:	61 40 80    	mov.w     0x80c, w1
    1dc4:	14 c8 bf    	mov.b     0x814, WREG
    1dc6:	00 80 fb    	ze        w0, w0
    1dc8:	00 80 40    	add.w     w1, w0, w0
    1dca:	90 40 78    	mov.b     [w0], w1
    1dcc:	70 40 80    	mov.w     0x80e, w0
    1dce:	64 00 40    	add.w     w0, #0x4, w0
    1dd0:	10 40 78    	mov.b     [w0], w0
    1dd2:	80 cf 50    	sub.b     w1, w0, [w15]
    1dd4:	03 00 3a    	bra       NZ, 0x1ddc <.L25>
    1dd6:	00 e2 21    	mov.w     #0x1e20, w0
    1dd8:	c0 40 88    	mov.w     w0, 0x818
    1dda:	09 00 37    	bra       0x1dee <.L26>

00001ddc <.L25>:
    1ddc:	ec 22 a9    	bclr.b    0x2ec, #0x1
    1dde:	22 c8 bf    	mov.b     0x822, WREG
    1de0:	6f 03 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    1de2:	65 03 07    	rcall     0x24ae <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1de4:	00 40 80    	mov.w     0x800, w0
    1de6:	82 51 29    	mov.w     #0x9518, w2
    1de8:	80 00 78    	mov.w     w0, w1
    1dea:	00 05 21    	mov.w     #0x1050, w0
    1dec:	94 fd 07    	rcall     0x1916 <_lcd_print2> <.LFB13> <.LFE12>

00001dee <.L26>:
    1dee:	00 53 27    	mov.w     #0x7530, w0
    1df0:	01 00 20    	mov.w     #0x0, w1
    1df2:	d1 00 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1df4:	25 c8 bf    	mov.b     0x825, WREG
    1df6:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1df8:	03 00 3a    	bra       NZ, 0x1e00 <.L27>
    1dfa:	e0 e6 21    	mov.w     #0x1e6e, w0
    1dfc:	c0 40 88    	mov.w     w0, 0x818
    1dfe:	05 00 37    	bra       0x1e0a <.L28>

00001e00 <.L27>:
    1e00:	26 c8 bf    	mov.b     0x826, WREG
    1e02:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1e04:	02 00 3a    	bra       NZ, 0x1e0a <.L28>
    1e06:	60 e9 21    	mov.w     #0x1e96, w0
    1e08:	c0 40 88    	mov.w     w0, 0x818

00001e0a <.L28>:
    1e0a:	c1 40 80    	mov.w     0x818, w1
    1e0c:	d0 40 80    	mov.w     0x81a, w0
    1e0e:	80 8f 50    	sub.w     w1, w0, [w15]
    1e10:	05 00 32    	bra       Z, 0x1e1c <.L23>
    1e12:	dc e2 a9    	bclr.b    0x2dc, #0x7
    1e14:	10 00 20    	mov.w     #0x1, w0
    1e16:	01 00 20    	mov.w     #0x0, w1
    1e18:	be 00 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1e1a:	da 02 a9    	bclr.b    0x2da, #0x0

00001e1c <.L23>:
    1e1c:	00 80 fa    	ulnk      
    1e1e:	00 00 06    	return    

00001e20 <_solved>:
    1e20:	00 00 fa    	lnk       #0x0
    1e22:	c1 40 80    	mov.w     0x818, w1
    1e24:	d0 40 80    	mov.w     0x81a, w0
    1e26:	80 8f 50    	sub.w     w1, w0, [w15]
    1e28:	06 00 32    	bra       Z, 0x1e36 <.L31>
    1e2a:	c0 40 80    	mov.w     0x818, w0
    1e2c:	d0 40 88    	mov.w     w0, 0x81a
    1e2e:	ec 22 a8    	bset.b    0x2ec, #0x1
    1e30:	10 c0 b3    	mov.b     #0x1, w0
    1e32:	21 e8 b7    	mov.b     WREG, 0x821
    1e34:	da 22 a8    	bset.b    0x2da, #0x1

00001e36 <.L31>:
    1e36:	00 40 80    	mov.w     0x800, w0
    1e38:	92 53 29    	mov.w     #0x9539, w2
    1e3a:	80 00 78    	mov.w     w0, w1
    1e3c:	00 05 21    	mov.w     #0x1050, w0
    1e3e:	6b fd 07    	rcall     0x1916 <_lcd_print2> <.LFB13> <.LFE12>
    1e40:	00 53 27    	mov.w     #0x7530, w0
    1e42:	01 00 20    	mov.w     #0x0, w1
    1e44:	a8 00 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1e46:	25 c8 bf    	mov.b     0x825, WREG
    1e48:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1e4a:	03 00 3a    	bra       NZ, 0x1e52 <.L32>
    1e4c:	e0 e6 21    	mov.w     #0x1e6e, w0
    1e4e:	c0 40 88    	mov.w     w0, 0x818
    1e50:	05 00 37    	bra       0x1e5c <.L33>

00001e52 <.L32>:
    1e52:	26 c8 bf    	mov.b     0x826, WREG
    1e54:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1e56:	02 00 3a    	bra       NZ, 0x1e5c <.L33>
    1e58:	60 e9 21    	mov.w     #0x1e96, w0
    1e5a:	c0 40 88    	mov.w     w0, 0x818

00001e5c <.L33>:
    1e5c:	c1 40 80    	mov.w     0x818, w1
    1e5e:	d0 40 80    	mov.w     0x81a, w0
    1e60:	80 8f 50    	sub.w     w1, w0, [w15]
    1e62:	03 00 32    	bra       Z, 0x1e6a <.L30>
    1e64:	ec 22 a9    	bclr.b    0x2ec, #0x1
    1e66:	21 68 ef    	clr.b     0x821
    1e68:	da 22 a9    	bclr.b    0x2da, #0x1

00001e6a <.L30>:
    1e6a:	00 80 fa    	ulnk      
    1e6c:	00 00 06    	return    

00001e6e <_end_win>:
    1e6e:	00 00 fa    	lnk       #0x0
    1e70:	c1 40 80    	mov.w     0x818, w1
    1e72:	d0 40 80    	mov.w     0x81a, w0
    1e74:	80 8f 50    	sub.w     w1, w0, [w15]
    1e76:	03 00 32    	bra       Z, 0x1e7e <.L36>
    1e78:	c0 40 80    	mov.w     0x818, w0
    1e7a:	d0 40 88    	mov.w     w0, 0x81a
    1e7c:	da 22 a8    	bset.b    0x2da, #0x1

00001e7e <.L36>:
    1e7e:	24 c8 bf    	mov.b     0x824, WREG
    1e80:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1e82:	02 00 3a    	bra       NZ, 0x1e88 <.L37>
    1e84:	a0 d5 21    	mov.w     #0x1d5a, w0
    1e86:	c0 40 88    	mov.w     w0, 0x818

00001e88 <.L37>:
    1e88:	c1 40 80    	mov.w     0x818, w1
    1e8a:	d0 40 80    	mov.w     0x81a, w0
    1e8c:	80 8f 50    	sub.w     w1, w0, [w15]
    1e8e:	01 00 32    	bra       Z, 0x1e92 <.L35>
    1e90:	da 22 a9    	bclr.b    0x2da, #0x1

00001e92 <.L35>:
    1e92:	00 80 fa    	ulnk      
    1e94:	00 00 06    	return    

00001e96 <_end_fail>:
    1e96:	00 00 fa    	lnk       #0x0
    1e98:	c1 40 80    	mov.w     0x818, w1
    1e9a:	d0 40 80    	mov.w     0x81a, w0
    1e9c:	80 8f 50    	sub.w     w1, w0, [w15]
    1e9e:	03 00 32    	bra       Z, 0x1ea6 <.L40>
    1ea0:	c0 40 80    	mov.w     0x818, w0
    1ea2:	d0 40 88    	mov.w     w0, 0x81a
    1ea4:	da 02 a8    	bset.b    0x2da, #0x0

00001ea6 <.L40>:
    1ea6:	24 c8 bf    	mov.b     0x824, WREG
    1ea8:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1eaa:	02 00 3a    	bra       NZ, 0x1eb0 <.L41>
    1eac:	a0 d5 21    	mov.w     #0x1d5a, w0
    1eae:	c0 40 88    	mov.w     w0, 0x818

00001eb0 <.L41>:
    1eb0:	c1 40 80    	mov.w     0x818, w1
    1eb2:	d0 40 80    	mov.w     0x81a, w0
    1eb4:	80 8f 50    	sub.w     w1, w0, [w15]
    1eb6:	01 00 32    	bra       Z, 0x1eba <.L39>
    1eb8:	da 02 a9    	bclr.b    0x2da, #0x0

00001eba <.L39>:
    1eba:	00 80 fa    	ulnk      
    1ebc:	00 00 06    	return    

00001ebe <_updateDisplay>:
    1ebe:	00 00 fa    	lnk       #0x0
    1ec0:	00 40 80    	mov.w     0x800, w0
    1ec2:	00 00 e8    	inc.w     w0, w0
    1ec4:	22 40 80    	mov.w     0x804, w2
    1ec6:	01 81 20    	mov.w     #0x810, w1
    1ec8:	91 40 78    	mov.b     [w1], w1
    1eca:	81 80 fb    	ze        w1, w1
    1ecc:	81 00 41    	add.w     w2, w1, w1
    1ece:	91 40 78    	mov.b     [w1], w1
    1ed0:	01 48 78    	mov.b     w1, [w0]
    1ed2:	00 40 80    	mov.w     0x800, w0
    1ed4:	64 00 40    	add.w     w0, #0x4, w0
    1ed6:	32 40 80    	mov.w     0x806, w2
    1ed8:	11 81 20    	mov.w     #0x811, w1
    1eda:	91 40 78    	mov.b     [w1], w1
    1edc:	81 80 fb    	ze        w1, w1
    1ede:	81 00 41    	add.w     w2, w1, w1
    1ee0:	91 40 78    	mov.b     [w1], w1
    1ee2:	01 48 78    	mov.b     w1, [w0]
    1ee4:	00 40 80    	mov.w     0x800, w0
    1ee6:	67 00 40    	add.w     w0, #0x7, w0
    1ee8:	42 40 80    	mov.w     0x808, w2
    1eea:	21 81 20    	mov.w     #0x812, w1
    1eec:	91 40 78    	mov.b     [w1], w1
    1eee:	81 80 fb    	ze        w1, w1
    1ef0:	81 00 41    	add.w     w2, w1, w1
    1ef2:	91 40 78    	mov.b     [w1], w1
    1ef4:	01 48 78    	mov.b     w1, [w0]
    1ef6:	00 40 80    	mov.w     0x800, w0
    1ef8:	6a 00 40    	add.w     w0, #0xa, w0
    1efa:	52 40 80    	mov.w     0x80a, w2
    1efc:	31 81 20    	mov.w     #0x813, w1
    1efe:	91 40 78    	mov.b     [w1], w1
    1f00:	81 80 fb    	ze        w1, w1
    1f02:	81 00 41    	add.w     w2, w1, w1
    1f04:	91 40 78    	mov.b     [w1], w1
    1f06:	01 48 78    	mov.b     w1, [w0]
    1f08:	00 40 80    	mov.w     0x800, w0
    1f0a:	6d 00 40    	add.w     w0, #0xd, w0
    1f0c:	62 40 80    	mov.w     0x80c, w2
    1f0e:	41 81 20    	mov.w     #0x814, w1
    1f10:	91 40 78    	mov.b     [w1], w1
    1f12:	81 80 fb    	ze        w1, w1
    1f14:	81 00 41    	add.w     w2, w1, w1
    1f16:	91 40 78    	mov.b     [w1], w1
    1f18:	01 48 78    	mov.b     w1, [w0]
    1f1a:	00 80 fa    	ulnk      
    1f1c:	00 00 06    	return    

00001f1e <_toggleSwitchSetup>:
    1f1e:	00 00 fa    	lnk       #0x0
    1f20:	d8 a2 a8    	bset.b    0x2d8, #0x5
    1f22:	d8 82 a8    	bset.b    0x2d8, #0x4
    1f24:	c9 e2 a8    	bset.b    0x2c9, #0x7
    1f26:	e8 62 a8    	bset.b    0x2e8, #0x3
    1f28:	d9 02 a8    	bset.b    0x2d9, #0x0
    1f2a:	d9 62 a8    	bset.b    0x2d9, #0x3
    1f2c:	d9 22 a8    	bset.b    0x2d9, #0x1
    1f2e:	d9 42 a8    	bset.b    0x2d9, #0x2
    1f30:	d8 02 a9    	bclr.b    0x2d8, #0x0
    1f32:	d8 22 a9    	bclr.b    0x2d8, #0x1
    1f34:	d8 42 a8    	bset.b    0x2d8, #0x2
    1f36:	d8 62 a8    	bset.b    0x2d8, #0x3
    1f38:	6f c0 a8    	bset.b    0x6f, #0x6
    1f3a:	6f a0 a8    	bset.b    0x6f, #0x5
    1f3c:	6f 80 a8    	bset.b    0x6f, #0x4
    1f3e:	76 e0 a8    	bset.b    0x76, #0x7
    1f40:	74 a0 a8    	bset.b    0x74, #0x5
    1f42:	75 00 a8    	bset.b    0x75, #0x0
    1f44:	74 c0 a8    	bset.b    0x74, #0x6
    1f46:	74 e0 a8    	bset.b    0x74, #0x7
    1f48:	74 60 a8    	bset.b    0x74, #0x3
    1f4a:	74 80 a8    	bset.b    0x74, #0x4
    1f4c:	63 c0 a8    	bset.b    0x63, #0x6
    1f4e:	63 a0 a8    	bset.b    0x63, #0x5
    1f50:	63 80 a8    	bset.b    0x63, #0x4
    1f52:	6a e0 a8    	bset.b    0x6a, #0x7
    1f54:	68 a0 a8    	bset.b    0x68, #0x5
    1f56:	69 00 a8    	bset.b    0x69, #0x0
    1f58:	68 c0 a8    	bset.b    0x68, #0x6
    1f5a:	68 e0 a8    	bset.b    0x68, #0x7
    1f5c:	68 60 a8    	bset.b    0x68, #0x3
    1f5e:	68 80 a8    	bset.b    0x68, #0x4
    1f60:	86 60 a9    	bclr.b    0x86, #0x3
    1f62:	96 60 a8    	bset.b    0x96, #0x3
    1f64:	00 80 fa    	ulnk      
    1f66:	00 00 06    	return    

00001f68 <_rand_next>:
    1f68:	02 00 fa    	lnk       #0x2
    1f6a:	b0 40 80    	mov.w     0x816, w0
    1f6c:	c2 00 de    	lsr.w     w0, #0x2, w1
    1f6e:	b0 40 80    	mov.w     0x816, w0
    1f70:	80 80 68    	xor.w     w1, w0, w1
    1f72:	b0 40 80    	mov.w     0x816, w0
    1f74:	4d 00 de    	lsr.w     w0, #0xd, w0
    1f76:	80 80 68    	xor.w     w1, w0, w1
    1f78:	b0 40 80    	mov.w     0x816, w0
    1f7a:	42 01 de    	lsr.w     w0, #0x2, w2
    1f7c:	b0 40 80    	mov.w     0x816, w0
    1f7e:	43 00 de    	lsr.w     w0, #0x3, w0
    1f80:	00 00 61    	and.w     w2, w0, w0
    1f82:	00 80 68    	xor.w     w1, w0, w0
    1f84:	61 0f 60    	and.w     w0, #0x1, [w14]
    1f86:	b0 40 80    	mov.w     0x816, w0
    1f88:	80 00 d1    	lsr.w     w0, w1
    1f8a:	1e 00 78    	mov.w     [w14], w0
    1f8c:	4f 00 dd    	sl.w      w0, #0xf, w0
    1f8e:	01 00 70    	ior.w     w0, w1, w0
    1f90:	b0 40 88    	mov.w     w0, 0x816
    1f92:	00 80 fa    	ulnk      
    1f94:	00 00 06    	return    

00001f96 <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    1f96:	08 00 fa    	lnk       #0x8
    1f98:	20 07 98    	mov.w     w0, [w14+4]
    1f9a:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    1f9c:	60 00 b8    	mul.uu    w0, #0x0, w0
    1f9e:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    1fa0:	05 00 37    	bra       0x1fac <.L2>

00001fa2 <.L3>:
        __asm__("nop");
    1fa2:	00 00 00    	nop       
        count +=1;
    1fa4:	12 00 20    	mov.w     #0x1, w2
    1fa6:	03 00 20    	mov.w     #0x0, w3
    1fa8:	1e 0f 41    	add.w     w2, [w14], [w14]
    1faa:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00001fac <.L2>:
    1fac:	2e 00 90    	mov.w     [w14+4], w0
    1fae:	be 00 90    	mov.w     [w14+6], w1
    1fb0:	1e 01 be    	mov.d     [w14], w2
    1fb2:	80 0f 51    	sub.w     w2, w0, [w15]
    1fb4:	81 8f 59    	subb.w    w3, w1, [w15]
    1fb6:	f5 ff 39    	bra       NC, 0x1fa2 <.L3>
    }
}
    1fb8:	00 80 fa    	ulnk      
    1fba:	00 00 06    	return    

00001fbc <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    1fbc:	04 00 fa    	lnk       #0x4
    1fbe:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    1fc0:	1e 00 90    	mov.w     [w14+2], w0
    1fc2:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    1fc4:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    1fc6:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    1fc8:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    1fca:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    1fcc:	80 13 80    	mov.w     0x270, w0
    1fce:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    1fd0:	36 00 07    	rcall     0x203e <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1fd2:	00 80 fa    	ulnk      
    1fd4:	00 00 06    	return    

00001fd6 <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    1fd6:	02 00 fa    	lnk       #0x2
   int x = 0;
    1fd8:	00 00 eb    	clr.w     w0
    1fda:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    1fdc:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    1fde:	a0 00 20    	mov.w     #0xa, w0
    1fe0:	01 00 20    	mov.w     #0x0, w1
    1fe2:	d9 ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    1fe4:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    1fe6:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    1fe8:	07 00 37    	bra       0x1ff8 <.L6>

00001fea <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    1fea:	10 00 20    	mov.w     #0x1, w0
    1fec:	01 00 20    	mov.w     #0x0, w1
    1fee:	d3 ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
      x++;
    1ff0:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    1ff2:	1e 00 78    	mov.w     [w14], w0
    1ff4:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1ff6:	05 00 3c    	bra       GT, 0x2002 <.L9>

00001ff8 <.L6>:
    1ff8:	b0 13 80    	mov.w     0x276, w0
    1ffa:	61 00 60    	and.w     w0, #0x1, w0
    1ffc:	00 00 e0    	cp0.w     w0
    1ffe:	f5 ff 3a    	bra       NZ, 0x1fea <.L8>
    2000:	01 00 37    	bra       0x2004 <.L7>

00002002 <.L9>:
      break;
    2002:	00 00 00    	nop       

00002004 <.L7>:
   }
   delay_by_nop(2);
    2004:	20 00 20    	mov.w     #0x2, w0
    2006:	01 00 20    	mov.w     #0x0, w1
    2008:	c6 ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    200a:	00 80 fa    	ulnk      
    200c:	00 00 06    	return    

0000200e <_i2c_restart>:

void i2c_restart(void){
    200e:	02 00 fa    	lnk       #0x2
   int x = 0;
    2010:	00 00 eb    	clr.w     w0
    2012:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    2014:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    2016:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    2018:	07 00 37    	bra       0x2028 <.L11>

0000201a <.L13>:
      delay_by_nop(1);
    201a:	10 00 20    	mov.w     #0x1, w0
    201c:	01 00 20    	mov.w     #0x0, w1
    201e:	bb ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
      x++;
    2020:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    2022:	1e 00 78    	mov.w     [w14], w0
    2024:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2026:	05 00 3c    	bra       GT, 0x2032 <.L14>

00002028 <.L11>:
    2028:	b0 13 80    	mov.w     0x276, w0
    202a:	62 00 60    	and.w     w0, #0x2, w0
    202c:	00 00 e0    	cp0.w     w0
    202e:	f5 ff 3a    	bra       NZ, 0x201a <.L13>
    2030:	01 00 37    	bra       0x2034 <.L12>

00002032 <.L14>:
    2032:	00 00 00    	nop       

00002034 <.L12>:
   }
   delay_by_nop(2);
    2034:	20 00 20    	mov.w     #0x2, w0
    2036:	01 00 20    	mov.w     #0x0, w1
    2038:	ae ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    203a:	00 80 fa    	ulnk      
    203c:	00 00 06    	return    

0000203e <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    203e:	02 00 fa    	lnk       #0x2
   int x = 0;
    2040:	00 00 eb    	clr.w     w0
    2042:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    2044:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    2046:	07 00 37    	bra       0x2056 <.L16>

00002048 <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    2048:	10 00 20    	mov.w     #0x1, w0
    204a:	01 00 20    	mov.w     #0x0, w1
    204c:	a4 ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
      x ++;
    204e:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    2050:	1e 00 78    	mov.w     [w14], w0
    2052:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2054:	05 00 3c    	bra       GT, 0x2060 <.L19>

00002056 <.L16>:
    2056:	b0 13 80    	mov.w     0x276, w0
    2058:	64 00 60    	and.w     w0, #0x4, w0
    205a:	00 00 e0    	cp0.w     w0
    205c:	f5 ff 3a    	bra       NZ, 0x2048 <.L18>
    205e:	01 00 37    	bra       0x2062 <.L17>

00002060 <.L19>:
    2060:	00 00 00    	nop       

00002062 <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    2062:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    2064:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    2066:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    2068:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    206a:	40 01 20    	mov.w     #0x14, w0
    206c:	01 00 20    	mov.w     #0x0, w1
    206e:	93 ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    2070:	00 80 fa    	ulnk      
    2072:	00 00 06    	return    

00002074 <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    2074:	04 00 fa    	lnk       #0x4
    2076:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    2078:	00 00 00    	nop       

0000207a <.L21>:
    207a:	c0 13 80    	mov.w     0x278, w0
    207c:	61 00 60    	and.w     w0, #0x1, w0
    207e:	00 00 e0    	cp0.w     w0
    2080:	fc ff 3a    	bra       NZ, 0x207a <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    2082:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    2084:	1e 00 90    	mov.w     [w14+2], w0
    2086:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    2088:	00 00 eb    	clr.w     w0
    208a:	00 0f 78    	mov.w     w0, [w14]
    208c:	09 00 37    	bra       0x20a0 <.L22>

0000208e <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    208e:	c1 13 80    	mov.w     0x278, w1
    2090:	00 00 24    	mov.w     #0x4000, w0
    2092:	00 80 60    	and.w     w1, w0, w0
    2094:	00 00 e0    	cp0.w     w0
    2096:	09 00 32    	bra       Z, 0x20aa <.L29>
      delay_by_nop(1); }
    2098:	10 00 20    	mov.w     #0x1, w0
    209a:	01 00 20    	mov.w     #0x0, w1
    209c:	7c ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    209e:	1e 0f e8    	inc.w     [w14], [w14]

000020a0 <.L22>:
    20a0:	30 1f 20    	mov.w     #0x1f3, w0
    20a2:	9e 00 78    	mov.w     [w14], w1
    20a4:	80 8f 50    	sub.w     w1, w0, [w15]
    20a6:	f3 ff 34    	bra       LE, 0x208e <.L25>
    20a8:	01 00 37    	bra       0x20ac <.L24>

000020aa <.L29>:
    20aa:	00 00 00    	nop       

000020ac <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    20ac:	40 1f 20    	mov.w     #0x1f4, w0
    20ae:	9e 00 78    	mov.w     [w14], w1
    20b0:	80 8f 50    	sub.w     w1, w0, [w15]
    20b2:	02 00 3a    	bra       NZ, 0x20b8 <.L26>
        return(1); }    // return 1 to indicate failure
    20b4:	10 c0 b3    	mov.b     #0x1, w0
    20b6:	0c 00 37    	bra       0x20d0 <.L27>

000020b8 <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    20b8:	c1 13 80    	mov.w     0x278, w1
    20ba:	00 00 28    	mov.w     #0x8000, w0
    20bc:	00 80 60    	and.w     w1, w0, w0
    20be:	00 00 e0    	cp0.w     w0
    20c0:	03 00 32    	bra       Z, 0x20c8 <.L28>
      reset_i2c_bus();
    20c2:	bd ff 07    	rcall     0x203e <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    20c4:	10 c0 b3    	mov.b     #0x1, w0
    20c6:	04 00 37    	bra       0x20d0 <.L27>

000020c8 <.L28>:

   delay_by_nop(2);
    20c8:	20 00 20    	mov.w     #0x2, w0
    20ca:	01 00 20    	mov.w     #0x0, w1
    20cc:	64 ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   return(0);
    20ce:	00 40 eb    	clr.b     w0

000020d0 <.L27>:
}
    20d0:	00 80 fa    	ulnk      
    20d2:	00 00 06    	return    

000020d4 <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    20d4:	04 00 fa    	lnk       #0x4
   int i = 0;
    20d6:	00 00 eb    	clr.w     w0
    20d8:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    20da:	00 40 eb    	clr.b     w0
    20dc:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    20de:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    20e0:	05 00 37    	bra       0x20ec <.L31>

000020e2 <.L33>:
      i ++;
    20e2:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    20e4:	00 7d 20    	mov.w     #0x7d0, w0
    20e6:	9e 00 78    	mov.w     [w14], w1
    20e8:	80 8f 50    	sub.w     w1, w0, [w15]
    20ea:	05 00 3c    	bra       GT, 0x20f6 <.L34>

000020ec <.L31>:
    20ec:	c0 13 80    	mov.w     0x278, w0
    20ee:	62 00 60    	and.w     w0, #0x2, w0
    20f0:	00 00 e0    	cp0.w     w0
    20f2:	f7 ff 32    	bra       Z, 0x20e2 <.L33>
    20f4:	01 00 37    	bra       0x20f8 <.L32>

000020f6 <.L34>:
    20f6:	00 00 00    	nop       

000020f8 <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    20f8:	80 13 80    	mov.w     0x270, w0
    20fa:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    20fc:	2e 40 90    	mov.b     [w14+2], w0
}
    20fe:	00 80 fa    	ulnk      
    2100:	00 00 06    	return    

00002102 <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    2102:	04 00 fa    	lnk       #0x4
   int i = 0;
    2104:	00 00 eb    	clr.w     w0
    2106:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2108:	00 40 eb    	clr.b     w0
    210a:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    210c:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    210e:	05 00 37    	bra       0x211a <.L36>

00002110 <.L38>:
      i++;
    2110:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2112:	00 7d 20    	mov.w     #0x7d0, w0
    2114:	9e 00 78    	mov.w     [w14], w1
    2116:	80 8f 50    	sub.w     w1, w0, [w15]
    2118:	05 00 3c    	bra       GT, 0x2124 <.L39>

0000211a <.L36>:
    211a:	c0 13 80    	mov.w     0x278, w0
    211c:	62 00 60    	and.w     w0, #0x2, w0
    211e:	00 00 e0    	cp0.w     w0
    2120:	f7 ff 32    	bra       Z, 0x2110 <.L38>
    2122:	01 00 37    	bra       0x2126 <.L37>

00002124 <.L39>:
    2124:	00 00 00    	nop       

00002126 <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    2126:	80 13 80    	mov.w     0x270, w0
    2128:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    212a:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    212c:	a0 00 20    	mov.w     #0xa, w0
    212e:	01 00 20    	mov.w     #0x0, w1
    2130:	32 ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   return data;
    2132:	2e 40 90    	mov.b     [w14+2], w0
}
    2134:	00 80 fa    	ulnk      
    2136:	00 00 06    	return    

00002138 <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    2138:	04 00 fa    	lnk       #0x4
   int i = 0;
    213a:	00 00 eb    	clr.w     w0
    213c:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    213e:	00 40 eb    	clr.b     w0
    2140:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    2142:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    2144:	05 00 37    	bra       0x2150 <.L41>

00002146 <.L43>:
      i++;
    2146:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2148:	00 7d 20    	mov.w     #0x7d0, w0
    214a:	9e 00 78    	mov.w     [w14], w1
    214c:	80 8f 50    	sub.w     w1, w0, [w15]
    214e:	05 00 3c    	bra       GT, 0x215a <.L44>

00002150 <.L41>:
    2150:	c0 13 80    	mov.w     0x278, w0
    2152:	62 00 60    	and.w     w0, #0x2, w0
    2154:	00 00 e0    	cp0.w     w0
    2156:	f7 ff 32    	bra       Z, 0x2146 <.L43>
    2158:	01 00 37    	bra       0x215c <.L42>

0000215a <.L44>:
    215a:	00 00 00    	nop       

0000215c <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    215c:	80 13 80    	mov.w     0x270, w0
    215e:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    2160:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    2162:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    2164:	a0 00 20    	mov.w     #0xa, w0
    2166:	01 00 20    	mov.w     #0x0, w1
    2168:	16 ff 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   return data;
    216a:	2e 40 90    	mov.b     [w14+2], w0
}
    216c:	00 80 fa    	ulnk      
    216e:	00 00 06    	return    

00002170 <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    2170:	04 00 fa    	lnk       #0x4
    2172:	00 4f 78    	mov.b     w0, [w14]
    2174:	11 47 98    	mov.b     w1, [w14+1]
    2176:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    2178:	2e ff 07    	rcall     0x1fd6 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    217a:	1e 00 fb    	se        [w14], w0
    217c:	80 00 78    	mov.w     w0, w1
    217e:	e0 ff 2f    	mov.w     #0xfffe, w0
    2180:	00 80 60    	and.w     w1, w0, w0
    2182:	78 ff 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    2184:	1e 40 90    	mov.b     [w14+1], w0
    2186:	00 00 fb    	se        w0, w0
    2188:	75 ff 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    218a:	2e 40 90    	mov.b     [w14+2], w0
    218c:	00 00 fb    	se        w0, w0
    218e:	72 ff 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    2190:	56 ff 07    	rcall     0x203e <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2192:	00 80 fa    	ulnk      
    2194:	00 00 06    	return    

00002196 <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    2196:	04 00 fa    	lnk       #0x4
    2198:	20 47 98    	mov.b     w0, [w14+2]
    219a:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    219c:	1c ff 07    	rcall     0x1fd6 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    219e:	2e 40 90    	mov.b     [w14+2], w0
    21a0:	00 00 fb    	se        w0, w0
    21a2:	68 ff 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    21a4:	3e 40 90    	mov.b     [w14+3], w0
    21a6:	00 00 fb    	se        w0, w0
    21a8:	65 ff 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    21aa:	a0 00 20    	mov.w     #0xa, w0
    21ac:	01 00 20    	mov.w     #0x0, w1
    21ae:	f3 fe 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   i2c_restart();
    21b0:	2e ff 07    	rcall     0x200e <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    21b2:	2e 40 90    	mov.b     [w14+2], w0
    21b4:	00 04 a0    	bset.b    w0, #0x0
    21b6:	00 00 fb    	se        w0, w0
    21b8:	5d ff 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    21ba:	8c ff 07    	rcall     0x20d4 <_i2c_read> <.LFB6> <.LFE5>
    21bc:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    21be:	3f ff 07    	rcall     0x203e <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    21c0:	1e 40 78    	mov.b     [w14], w0
}
    21c2:	00 80 fa    	ulnk      
    21c4:	00 00 06    	return    

000021c6 <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is there, 0 means it is not there
unsigned char I2Cpoll(char addr){
    21c6:	04 00 fa    	lnk       #0x4
    21c8:	20 47 98    	mov.b     w0, [w14+2]
    unsigned char temp = 0;
    21ca:	00 40 eb    	clr.b     w0
    21cc:	00 4f 78    	mov.b     w0, [w14]
    i2c_start();
    21ce:	03 ff 07    	rcall     0x1fd6 <_i2c_start> <.LFB2> <.LFE1>
    temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    21d0:	2e 40 90    	mov.b     [w14+2], w0
    21d2:	00 00 fb    	se        w0, w0
    21d4:	80 00 78    	mov.w     w0, w1
    21d6:	e0 ff 2f    	mov.w     #0xfffe, w0
    21d8:	00 80 60    	and.w     w1, w0, w0
    21da:	4c ff 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
    21dc:	00 4f 78    	mov.b     w0, [w14]
    reset_i2c_bus();
    21de:	2f ff 07    	rcall     0x203e <_reset_i2c_bus> <.LFB4> <.LFE3>
    if (temp == 0) {
    21e0:	1e 40 78    	mov.b     [w14], w0
    21e2:	00 04 e0    	cp0.b     w0
    21e4:	02 00 3a    	bra       NZ, 0x21ea <.L48>
        return 1; // We found it, no error
    21e6:	10 c0 b3    	mov.b     #0x1, w0
    21e8:	01 00 37    	bra       0x21ec <.L49>

000021ea <.L48>:
    } else return 0;
    21ea:	00 40 eb    	clr.b     w0

000021ec <.L49>:
}
    21ec:	00 80 fa    	ulnk      
    21ee:	00 00 06    	return    

000021f0 <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    21f0:	08 00 fa    	lnk       #0x8
    21f2:	20 47 98    	mov.b     w0, [w14+2]
    21f4:	21 07 98    	mov.w     w1, [w14+4]
    21f6:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    21f8:	00 40 eb    	clr.b     w0
    21fa:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    21fc:	ec fe 07    	rcall     0x1fd6 <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    21fe:	2e 40 90    	mov.b     [w14+2], w0
    2200:	00 00 fb    	se        w0, w0
    2202:	80 00 78    	mov.w     w0, w1
    2204:	e0 ff 2f    	mov.w     #0xfffe, w0
    2206:	00 80 60    	and.w     w1, w0, w0
    2208:	35 ff 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
    220a:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    220c:	00 40 eb    	clr.b     w0
    220e:	10 47 98    	mov.b     w0, [w14+1]
    2210:	0d 00 37    	bra       0x222c <.L51>

00002212 <.L52>:
    err |= send_i2c_byte(dat[j]);
    2212:	1e 40 90    	mov.b     [w14+1], w0
    2214:	00 80 fb    	ze        w0, w0
    2216:	ae 00 90    	mov.w     [w14+4], w1
    2218:	00 80 40    	add.w     w1, w0, w0
    221a:	10 40 78    	mov.b     [w0], w0
    221c:	00 00 fb    	se        w0, w0
    221e:	2a ff 07    	rcall     0x2074 <_send_i2c_byte> <.LFB5> <.LFE4>
    2220:	9e 40 78    	mov.b     [w14], w1
    2222:	01 40 70    	ior.b     w0, w1, w0
    2224:	00 4f 78    	mov.b     w0, [w14]
    2226:	1e 40 90    	mov.b     [w14+1], w0
    2228:	00 40 e8    	inc.b     w0, w0
    222a:	10 47 98    	mov.b     w0, [w14+1]

0000222c <.L51>:
    222c:	9e 40 90    	mov.b     [w14+1], w1
    222e:	6e 40 90    	mov.b     [w14+6], w0
    2230:	80 cf 50    	sub.b     w1, w0, [w15]
    2232:	ef ff 39    	bra       NC, 0x2212 <.L52>
  }
  reset_i2c_bus();
    2234:	04 ff 07    	rcall     0x203e <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    2236:	1e 40 78    	mov.b     [w14], w0
}
    2238:	00 80 fa    	ulnk      
    223a:	00 00 06    	return    

0000223c <_i2c2_init>:

////////////////////////////////////////////////////////////////////////////////
// I2C2 ////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// initiates I2C3 module to baud rate BRG
void i2c2_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    223c:	04 00 fa    	lnk       #0x4
    223e:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C2BRG = BRG;           // Sets freq to 100kHz
    2240:	1e 00 90    	mov.w     [w14+2], w0
    2242:	a0 10 88    	mov.w     w0, 0x214
   I2C2CONbits.I2CEN = 0;	// Disable I2C Mode
    2244:	17 e2 a9    	bclr.b    0x217, #0x7
   I2C2CONbits.DISSLW = 1;	// Disable slew rate control
    2246:	17 22 a8    	bset.b    0x217, #0x1
   IFS3bits.MI2C2IF = 0;	 // Clear Interrupt
    2248:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2CONbits.I2CEN = 1;	// Enable I2C Mode
    224a:	17 e2 a8    	bset.b    0x217, #0x7
   temp = I2C2RCV;	 // read buffer to clear buffer full
    224c:	80 10 80    	mov.w     0x210, w0
    224e:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    2250:	f6 fe 07    	rcall     0x203e <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2252:	00 80 fa    	ulnk      
    2254:	00 00 06    	return    

00002256 <_i2c2_start>:

//function iniates a start condition on bus
void i2c2_start(void){
    2256:	02 00 fa    	lnk       #0x2
   int x = 0;
    2258:	00 00 eb    	clr.w     w0
    225a:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.ACKDT = 0;	//Reset any previous Ack
    225c:	16 a2 a9    	bclr.b    0x216, #0x5
   delay_by_nop(10);
    225e:	a0 00 20    	mov.w     #0xa, w0
    2260:	01 00 20    	mov.w     #0x0, w1
    2262:	99 fe 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   I2C2CONbits.SEN = 1;	//Initiate Start condition
    2264:	16 02 a8    	bset.b    0x216, #0x0
   __asm__("nop");
    2266:	00 00 00    	nop       

   while (I2C2CONbits.SEN){    //the hardware will automatically clear Start Bit
    2268:	07 00 37    	bra       0x2278 <.L55>

0000226a <.L57>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    226a:	10 00 20    	mov.w     #0x1, w0
    226c:	01 00 20    	mov.w     #0x0, w1
    226e:	93 fe 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
      x++;
    2270:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    2272:	1e 00 78    	mov.w     [w14], w0
    2274:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2276:	05 00 3c    	bra       GT, 0x2282 <.L58>

00002278 <.L55>:
    2278:	b0 10 80    	mov.w     0x216, w0
    227a:	61 00 60    	and.w     w0, #0x1, w0
    227c:	00 00 e0    	cp0.w     w0
    227e:	f5 ff 3a    	bra       NZ, 0x226a <.L57>
    2280:	01 00 37    	bra       0x2284 <.L56>

00002282 <.L58>:
      break;
    2282:	00 00 00    	nop       

00002284 <.L56>:
   }
   delay_by_nop(2);
    2284:	20 00 20    	mov.w     #0x2, w0
    2286:	01 00 20    	mov.w     #0x0, w1
    2288:	86 fe 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    228a:	00 80 fa    	ulnk      
    228c:	00 00 06    	return    

0000228e <_i2c2_restart>:

void i2c2_restart(void){
    228e:	02 00 fa    	lnk       #0x2
   int x = 0;
    2290:	00 00 eb    	clr.w     w0
    2292:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.RSEN = 1;	//Initiate restart condition
    2294:	16 22 a8    	bset.b    0x216, #0x1
   __asm__("nop");
    2296:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C2CONbits.RSEN){
    2298:	07 00 37    	bra       0x22a8 <.L60>

0000229a <.L62>:
      delay_by_nop(1);
    229a:	10 00 20    	mov.w     #0x1, w0
    229c:	01 00 20    	mov.w     #0x0, w1
    229e:	7b fe 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
      x++;
    22a0:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    22a2:	1e 00 78    	mov.w     [w14], w0
    22a4:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    22a6:	05 00 3c    	bra       GT, 0x22b2 <.L63>

000022a8 <.L60>:
    22a8:	b0 10 80    	mov.w     0x216, w0
    22aa:	62 00 60    	and.w     w0, #0x2, w0
    22ac:	00 00 e0    	cp0.w     w0
    22ae:	f5 ff 3a    	bra       NZ, 0x229a <.L62>
    22b0:	01 00 37    	bra       0x22b4 <.L61>

000022b2 <.L63>:
    22b2:	00 00 00    	nop       

000022b4 <.L61>:
   }
   delay_by_nop(2);
    22b4:	20 00 20    	mov.w     #0x2, w0
    22b6:	01 00 20    	mov.w     #0x0, w1
    22b8:	6e fe 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    22ba:	00 80 fa    	ulnk      
    22bc:	00 00 06    	return    

000022be <_reset_i2c2_bus>:


//Resets the I2C bus to Idle
void reset_i2c2_bus(void){
    22be:	02 00 fa    	lnk       #0x2
   int x = 0;
    22c0:	00 00 eb    	clr.w     w0
    22c2:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.PEN = 1;     //initiate stop bit
    22c4:	16 42 a8    	bset.b    0x216, #0x2
   while (I2C2CONbits.PEN) {     //wait for hardware clear of stop bit
    22c6:	07 00 37    	bra       0x22d6 <.L65>

000022c8 <.L67>:
      // delay_by_nop(1);
      delay_by_nop(1);
    22c8:	10 00 20    	mov.w     #0x1, w0
    22ca:	01 00 20    	mov.w     #0x0, w1
    22cc:	64 fe 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
      x ++;
    22ce:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    22d0:	1e 00 78    	mov.w     [w14], w0
    22d2:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    22d4:	05 00 3c    	bra       GT, 0x22e0 <.L68>

000022d6 <.L65>:
    22d6:	b0 10 80    	mov.w     0x216, w0
    22d8:	64 00 60    	and.w     w0, #0x4, w0
    22da:	00 00 e0    	cp0.w     w0
    22dc:	f5 ff 3a    	bra       NZ, 0x22c8 <.L67>
    22de:	01 00 37    	bra       0x22e2 <.L66>

000022e0 <.L68>:
    22e0:	00 00 00    	nop       

000022e2 <.L66>:
   }

   I2C2CONbits.RCEN = 0;
    22e2:	16 62 a9    	bclr.b    0x216, #0x3
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    22e4:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2STATbits.IWCOL = 0;
    22e6:	18 e2 a9    	bclr.b    0x218, #0x7
   I2C2STATbits.BCL = 0;
    22e8:	19 42 a9    	bclr.b    0x219, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    22ea:	40 01 20    	mov.w     #0x14, w0
    22ec:	01 00 20    	mov.w     #0x0, w1
    22ee:	53 fe 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    22f0:	00 80 fa    	ulnk      
    22f2:	00 00 06    	return    

000022f4 <_send_i2c2_byte>:


//basic I2C byte send
char send_i2c2_byte(int data){
    22f4:	04 00 fa    	lnk       #0x4
    22f6:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C2STATbits.TBF) { }
    22f8:	00 00 00    	nop       

000022fa <.L70>:
    22fa:	c0 10 80    	mov.w     0x218, w0
    22fc:	61 00 60    	and.w     w0, #0x1, w0
    22fe:	00 00 e0    	cp0.w     w0
    2300:	fc ff 3a    	bra       NZ, 0x22fa <.L70>
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    2302:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2TRN = data; // load the outgoing data byte
    2304:	1e 00 90    	mov.w     [w14+2], w0
    2306:	90 10 88    	mov.w     w0, 0x212

   for (i=0; i<500; i++){           // wait for transmission
    2308:	00 00 eb    	clr.w     w0
    230a:	00 0f 78    	mov.w     w0, [w14]
    230c:	09 00 37    	bra       0x2320 <.L71>

0000230e <.L74>:
      if (!I2C2STATbits.TRSTAT) break; // if master transmit not in progress break
    230e:	c1 10 80    	mov.w     0x218, w1
    2310:	00 00 24    	mov.w     #0x4000, w0
    2312:	00 80 60    	and.w     w1, w0, w0
    2314:	00 00 e0    	cp0.w     w0
    2316:	09 00 32    	bra       Z, 0x232a <.L78>
      delay_by_nop(1); }
    2318:	10 00 20    	mov.w     #0x1, w0
    231a:	01 00 20    	mov.w     #0x0, w1
    231c:	3c fe 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    231e:	1e 0f e8    	inc.w     [w14], [w14]

00002320 <.L71>:
    2320:	30 1f 20    	mov.w     #0x1f3, w0
    2322:	9e 00 78    	mov.w     [w14], w1
    2324:	80 8f 50    	sub.w     w1, w0, [w15]
    2326:	f3 ff 34    	bra       LE, 0x230e <.L74>
    2328:	01 00 37    	bra       0x232c <.L73>

0000232a <.L78>:
    232a:	00 00 00    	nop       

0000232c <.L73>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    232c:	40 1f 20    	mov.w     #0x1f4, w0
    232e:	9e 00 78    	mov.w     [w14], w1
    2330:	80 8f 50    	sub.w     w1, w0, [w15]
    2332:	02 00 3a    	bra       NZ, 0x2338 <.L75>
        return(1); }    // return 1 to indicate failure
    2334:	10 c0 b3    	mov.b     #0x1, w0
    2336:	0c 00 37    	bra       0x2350 <.L76>

00002338 <.L75>:

   if (I2C2STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    2338:	c1 10 80    	mov.w     0x218, w1
    233a:	00 00 28    	mov.w     #0x8000, w0
    233c:	00 80 60    	and.w     w1, w0, w0
    233e:	00 00 e0    	cp0.w     w0
    2340:	03 00 32    	bra       Z, 0x2348 <.L77>
      reset_i2c2_bus();
    2342:	bd ff 07    	rcall     0x22be <_reset_i2c2_bus> <.LFB16> <.LFE15>
      return(1); }            // abort if not found
    2344:	10 c0 b3    	mov.b     #0x1, w0
    2346:	04 00 37    	bra       0x2350 <.L76>

00002348 <.L77>:

   delay_by_nop(2);
    2348:	20 00 20    	mov.w     #0x2, w0
    234a:	01 00 20    	mov.w     #0x0, w1
    234c:	24 fe 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   return(0);
    234e:	00 40 eb    	clr.b     w0

00002350 <.L76>:
}
    2350:	00 80 fa    	ulnk      
    2352:	00 00 06    	return    

00002354 <_i2c2_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c2_read(void){
    2354:	04 00 fa    	lnk       #0x4
   int i = 0;
    2356:	00 00 eb    	clr.w     w0
    2358:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    235a:	00 40 eb    	clr.b     w0
    235c:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    235e:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {           //if no response, break
    2360:	05 00 37    	bra       0x236c <.L80>

00002362 <.L82>:
      i ++;
    2362:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    2364:	00 7d 20    	mov.w     #0x7d0, w0
    2366:	9e 00 78    	mov.w     [w14], w1
    2368:	80 8f 50    	sub.w     w1, w0, [w15]
    236a:	05 00 3c    	bra       GT, 0x2376 <.L83>

0000236c <.L80>:
    236c:	c0 10 80    	mov.w     0x218, w0
    236e:	62 00 60    	and.w     w0, #0x2, w0
    2370:	00 00 e0    	cp0.w     w0
    2372:	f7 ff 32    	bra       Z, 0x2362 <.L82>
    2374:	01 00 37    	bra       0x2378 <.L81>

00002376 <.L83>:
    2376:	00 00 00    	nop       

00002378 <.L81>:

   data = I2C2RCV;       //get data from I2C2RCV register
    2378:	80 10 80    	mov.w     0x210, w0
    237a:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    237c:	2e 40 90    	mov.b     [w14+2], w0
}
    237e:	00 80 fa    	ulnk      
    2380:	00 00 06    	return    

00002382 <_i2c2_read_ack>:


//function reads data, returns the read data, with ack
char i2c2_read_ack(void){	//does not reset bus!!!
    2382:	04 00 fa    	lnk       #0x4
   int i = 0;
    2384:	00 00 eb    	clr.w     w0
    2386:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2388:	00 40 eb    	clr.b     w0
    238a:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    238c:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    238e:	05 00 37    	bra       0x239a <.L85>

00002390 <.L87>:
      i++;
    2390:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2392:	00 7d 20    	mov.w     #0x7d0, w0
    2394:	9e 00 78    	mov.w     [w14], w1
    2396:	80 8f 50    	sub.w     w1, w0, [w15]
    2398:	05 00 3c    	bra       GT, 0x23a4 <.L88>

0000239a <.L85>:
    239a:	c0 10 80    	mov.w     0x218, w0
    239c:	62 00 60    	and.w     w0, #0x2, w0
    239e:	00 00 e0    	cp0.w     w0
    23a0:	f7 ff 32    	bra       Z, 0x2390 <.L87>
    23a2:	01 00 37    	bra       0x23a6 <.L86>

000023a4 <.L88>:
    23a4:	00 00 00    	nop       

000023a6 <.L86>:

   data = I2C2RCV;               //get data from I2C2RCV register
    23a6:	80 10 80    	mov.w     0x210, w0
    23a8:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKEN = 1;        //start ACK generation
    23aa:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    23ac:	a0 00 20    	mov.w     #0xa, w0
    23ae:	01 00 20    	mov.w     #0x0, w1
    23b0:	f2 fd 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   return data;
    23b2:	2e 40 90    	mov.b     [w14+2], w0
}
    23b4:	00 80 fa    	ulnk      
    23b6:	00 00 06    	return    

000023b8 <_i2c2_read_nack>:

char i2c2_read_nack(void){	//does not reset bus!!!
    23b8:	04 00 fa    	lnk       #0x4
   int i = 0;
    23ba:	00 00 eb    	clr.w     w0
    23bc:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    23be:	00 40 eb    	clr.b     w0
    23c0:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    23c2:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    23c4:	05 00 37    	bra       0x23d0 <.L90>

000023c6 <.L92>:
      i++;
    23c6:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    23c8:	00 7d 20    	mov.w     #0x7d0, w0
    23ca:	9e 00 78    	mov.w     [w14], w1
    23cc:	80 8f 50    	sub.w     w1, w0, [w15]
    23ce:	05 00 3c    	bra       GT, 0x23da <.L93>

000023d0 <.L90>:
    23d0:	c0 10 80    	mov.w     0x218, w0
    23d2:	62 00 60    	and.w     w0, #0x2, w0
    23d4:	00 00 e0    	cp0.w     w0
    23d6:	f7 ff 32    	bra       Z, 0x23c6 <.L92>
    23d8:	01 00 37    	bra       0x23dc <.L91>

000023da <.L93>:
    23da:	00 00 00    	nop       

000023dc <.L91>:

   data = I2C2RCV;               //get data from I2C2RCV register
    23dc:	80 10 80    	mov.w     0x210, w0
    23de:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    23e0:	16 a2 a8    	bset.b    0x216, #0x5
   I2C2CONbits.ACKEN = 1;        //start ack generation
    23e2:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    23e4:	a0 00 20    	mov.w     #0xa, w0
    23e6:	01 00 20    	mov.w     #0x0, w1
    23e8:	d6 fd 07    	rcall     0x1f96 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   return data;
    23ea:	2e 40 90    	mov.b     [w14+2], w0
}
    23ec:	00 80 fa    	ulnk      
    23ee:	00 00 06    	return    

000023f0 <_I2C2poll>:

// function checks if device at addr i bus
// 1 means it is not there, 0 means it is not there
unsigned char I2C2poll(char addr){
    23f0:	04 00 fa    	lnk       #0x4
    23f2:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    23f4:	00 40 eb    	clr.b     w0
    23f6:	00 4f 78    	mov.b     w0, [w14]
   i2c2_start();
    23f8:	2e ff 07    	rcall     0x2256 <_i2c2_start> <.LFB14> <.LFE13>
   temp = send_i2c2_byte((addr) & (0xfffe)); // set /W bit
    23fa:	2e 40 90    	mov.b     [w14+2], w0
    23fc:	00 00 fb    	se        w0, w0
    23fe:	80 00 78    	mov.w     w0, w1
    2400:	e0 ff 2f    	mov.w     #0xfffe, w0
    2402:	00 80 60    	and.w     w1, w0, w0
    2404:	77 ff 07    	rcall     0x22f4 <_send_i2c2_byte> <.LFB17> <.LFE16>
    2406:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c2_bus();
    2408:	5a ff 07    	rcall     0x22be <_reset_i2c2_bus> <.LFB16> <.LFE15>
   if (temp == 0) {
    240a:	1e 40 78    	mov.b     [w14], w0
    240c:	00 04 e0    	cp0.b     w0
    240e:	02 00 3a    	bra       NZ, 0x2414 <.L95>
       return 1; // We found it, no error
    2410:	10 c0 b3    	mov.b     #0x1, w0
    2412:	01 00 37    	bra       0x2416 <.L96>

00002414 <.L95>:
   } else return 0;
    2414:	00 40 eb    	clr.b     w0

00002416 <.L96>:
}
    2416:	00 80 fa    	ulnk      
    2418:	00 00 06    	return    

0000241a <_init_ajuart>:
uint8_t U1TXbuffer[U1_TX_BUFFER_LENGTH];
uint8_t U1RXbuffer[U1_RX_BUFFER_LENGTH];
uint16_t U1_tx_threshold;

void init_ajuart(void) {
    241a:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure audio jack UART pins and connect them to UART1
    AJ_TX_DIR = OUT; AJ_TX = 1;
    241c:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    241e:	f2 c2 a8    	bset.b    0x2f2, #0x6
    AJ_RX_DIR = IN;
    2420:	f0 e2 a8    	bset.b    0x2f0, #0x7

    RPOR = (uint8_t *)&RPOR0;
    2422:	00 6c 20    	mov.w     #0x6c0, w0
    2424:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    2426:	00 68 20    	mov.w     #0x680, w0
    2428:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    242a:	11 3a 80    	mov.w     0x742, w1
    242c:	f0 0b 20    	mov.w     #0xbf, w0
    242e:	00 81 60    	and.w     w1, w0, w2
    2430:	60 04 20    	mov.w     #0x46, w0
    2432:	71 05 20    	mov.w     #0x57, w1
    2434:	23 74 20    	mov.w     #0x742, w3
    2436:	80 49 78    	mov.b     w0, [w3]
    2438:	81 49 78    	mov.b     w1, [w3]
    243a:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = AJ_RX_RP;
    243c:	1e 00 90    	mov.w     [w14+2], w0
    243e:	40 02 b0    	add.w     #0x24, w0
    2440:	a1 c1 b3    	mov.b     #0x1a, w1
    2442:	01 48 78    	mov.b     w1, [w0]
    RPOR[AJ_TX_RP] = U1TX_RP;
    2444:	9e 00 78    	mov.w     [w14], w1
    2446:	75 80 40    	add.w     w1, #0x15, w0
    2448:	31 c0 b3    	mov.b     #0x3, w1
    244a:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    244c:	10 3a 80    	mov.w     0x742, w0
    244e:	00 01 78    	mov.w     w0, w2
    2450:	02 60 a0    	bset.w    w2, #0x6
    2452:	60 04 20    	mov.w     #0x46, w0
    2454:	71 05 20    	mov.w     #0x57, w1
    2456:	23 74 20    	mov.w     #0x742, w3
    2458:	80 49 78    	mov.b     w0, [w3]
    245a:	81 49 78    	mov.b     w1, [w3]
    245c:	82 49 78    	mov.b     w2, [w3]

    U1MODE = 0x0008;                // configure UART1 for transmission at
    245e:	80 00 20    	mov.w     #0x8, w0
    2460:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;                 //   115,200 baud, no parity, 1 stop bit
    2462:	20 02 20    	mov.w     #0x22, w0
    2464:	40 11 88    	mov.w     w0, 0x228

    U1_tx_buffer.data = U1TXbuffer;
    2466:	00 84 20    	mov.w     #0x840, w0
    2468:	60 41 88    	mov.w     w0, 0x82c
    U1_tx_buffer.length = U1_TX_BUFFER_LENGTH;
    246a:	00 40 20    	mov.w     #0x400, w0
    246c:	70 41 88    	mov.w     w0, 0x82e
    U1_tx_buffer.head = 0;
    246e:	00 00 eb    	clr.w     w0
    2470:	80 41 88    	mov.w     w0, 0x830
    U1_tx_buffer.tail = 0;
    2472:	00 00 eb    	clr.w     w0
    2474:	90 41 88    	mov.w     w0, 0x832
    U1_tx_buffer.count = 0;
    2476:	00 00 eb    	clr.w     w0
    2478:	a0 41 88    	mov.w     w0, 0x834
    U1_tx_threshold = 3 * U1_TX_BUFFER_LENGTH / 4;
    247a:	00 30 20    	mov.w     #0x300, w0
    247c:	50 41 88    	mov.w     w0, 0x82a

    U1_rx_buffer.data = U1RXbuffer;
    247e:	00 c4 20    	mov.w     #0xc40, w0
    2480:	b0 41 88    	mov.w     w0, 0x836
    U1_rx_buffer.length = U1_RX_BUFFER_LENGTH;
    2482:	00 40 20    	mov.w     #0x400, w0
    2484:	c0 41 88    	mov.w     w0, 0x838
    U1_rx_buffer.head = 0;
    2486:	00 00 eb    	clr.w     w0
    2488:	d0 41 88    	mov.w     w0, 0x83a
    U1_rx_buffer.tail = 0;
    248a:	00 00 eb    	clr.w     w0
    248c:	e0 41 88    	mov.w     w0, 0x83c
    U1_rx_buffer.count = 0;
    248e:	00 00 eb    	clr.w     w0
    2490:	f0 41 88    	mov.w     w0, 0x83e

    U1STAbits.UTXISEL1 = 0;         // set UART1 UTXISEL<1:0> = 01, TX interrupt
    2492:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;         //   when all transmit operations are done
    2494:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    2496:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;            // enable UART1 TX interrupt
    2498:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    249a:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;            // enable UART1 RX interrupt
    249c:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;          // enable UART1 module
    249e:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
    24a0:	23 42 a8    	bset.b    0x223, #0x2
}
    24a2:	00 80 fa    	ulnk      
    24a4:	00 00 06    	return    

000024a6 <_U1_in_waiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
        disable_interrupts();
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
        U1_tx_buffer.head++;
        if (U1_tx_buffer.head == U1_tx_buffer.length)
            U1_tx_buffer.head = 0;
        U1_tx_buffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    24a6:	00 00 fa    	lnk       #0x0
    return U1_rx_buffer.count;
    24a8:	f0 41 80    	mov.w     0x83e, w0
}
    24aa:	00 80 fa    	ulnk      
    24ac:	00 00 06    	return    

000024ae <_U1_flush_tx_buffer>:

void U1_flush_tx_buffer(void) {
    24ae:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    24b0:	11 11 80    	mov.w     0x222, w1
    24b2:	00 40 20    	mov.w     #0x400, w0
    24b4:	00 80 60    	and.w     w1, w0, w0
    24b6:	00 00 e0    	cp0.w     w0
    24b8:	01 00 3a    	bra       NZ, 0x24bc <.L15>
        U1STAbits.UTXEN = 1;        //   enable it
    24ba:	23 42 a8    	bset.b    0x223, #0x2

000024bc <.L15>:
}
    24bc:	00 80 fa    	ulnk      
    24be:	00 00 06    	return    

000024c0 <_U1_putc>:

void U1_putc(uint8_t ch) {
    24c0:	02 00 fa    	lnk       #0x2
    24c2:	00 4f 78    	mov.b     w0, [w14]
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}
    24c4:	00 00 00    	nop       

000024c6 <.L18>:
    24c6:	a1 41 80    	mov.w     0x834, w1
    24c8:	70 41 80    	mov.w     0x82e, w0
    24ca:	80 8f 50    	sub.w     w1, w0, [w15]
    24cc:	fc ff 32    	bra       Z, 0x24c6 <.L18>

    disable_interrupts();
    24ce:	ff 3f fc    	disi      #0x3fff
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    24d0:	61 41 80    	mov.w     0x82c, w1
    24d2:	90 41 80    	mov.w     0x832, w0
    24d4:	00 80 40    	add.w     w1, w0, w0
    24d6:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    24d8:	90 41 80    	mov.w     0x832, w0
    24da:	00 00 e8    	inc.w     w0, w0
    24dc:	90 41 88    	mov.w     w0, 0x832
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    24de:	91 41 80    	mov.w     0x832, w1
    24e0:	70 41 80    	mov.w     0x82e, w0
    24e2:	80 8f 50    	sub.w     w1, w0, [w15]
    24e4:	02 00 3a    	bra       NZ, 0x24ea <.L19>
        U1_tx_buffer.tail = 0;
    24e6:	00 00 eb    	clr.w     w0
    24e8:	90 41 88    	mov.w     w0, 0x832

000024ea <.L19>:
    U1_tx_buffer.count++;
    24ea:	a0 41 80    	mov.w     0x834, w0
    24ec:	00 00 e8    	inc.w     w0, w0
    24ee:	a0 41 88    	mov.w     w0, 0x834
    enable_interrupts();
    24f0:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    24f2:	a1 41 80    	mov.w     0x834, w1
    24f4:	50 41 80    	mov.w     0x82a, w0
    24f6:	80 8f 50    	sub.w     w1, w0, [w15]
    24f8:	01 00 39    	bra       NC, 0x24fc <.L17>
        U1STAbits.UTXEN = 1;
    24fa:	23 42 a8    	bset.b    0x223, #0x2

000024fc <.L17>:
}
    24fc:	00 80 fa    	ulnk      
    24fe:	00 00 06    	return    

00002500 <_U1_getc>:

uint8_t U1_getc(void) {
    2500:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    2502:	00 00 00    	nop       

00002504 <.L22>:
    2504:	f0 41 80    	mov.w     0x83e, w0
    2506:	00 00 e0    	cp0.w     w0
    2508:	fd ff 32    	bra       Z, 0x2504 <.L22>

    disable_interrupts();
    250a:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    250c:	b1 41 80    	mov.w     0x836, w1
    250e:	d0 41 80    	mov.w     0x83a, w0
    2510:	00 80 40    	add.w     w1, w0, w0
    2512:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    2514:	d0 41 80    	mov.w     0x83a, w0
    2516:	00 00 e8    	inc.w     w0, w0
    2518:	d0 41 88    	mov.w     w0, 0x83a
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    251a:	d1 41 80    	mov.w     0x83a, w1
    251c:	c0 41 80    	mov.w     0x838, w0
    251e:	80 8f 50    	sub.w     w1, w0, [w15]
    2520:	02 00 3a    	bra       NZ, 0x2526 <.L23>
        U1_rx_buffer.head = 0;
    2522:	00 00 eb    	clr.w     w0
    2524:	d0 41 88    	mov.w     w0, 0x83a

00002526 <.L23>:
    U1_rx_buffer.count--;
    2526:	f0 41 80    	mov.w     0x83e, w0
    2528:	00 00 e9    	dec.w     w0, w0
    252a:	f0 41 88    	mov.w     w0, 0x83e
    enable_interrupts();
    252c:	52 20 ef    	clr.w     0x52

    return ch;
    252e:	1e 40 78    	mov.b     [w14], w0
}
    2530:	00 80 fa    	ulnk      
    2532:	00 00 06    	return    

00002534 <_U1_puts>:

void U1_puts(uint8_t *str) {
    2534:	02 00 fa    	lnk       #0x2
    2536:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    2538:	04 00 37    	bra       0x2542 <.L25>

0000253a <.L26>:
        U1_putc(*str++);
    253a:	1e 00 78    	mov.w     [w14], w0
    253c:	10 40 78    	mov.b     [w0], w0
    253e:	1e 0f e8    	inc.w     [w14], [w14]
    2540:	bf ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>

00002542 <.L25>:
    2542:	1e 00 78    	mov.w     [w14], w0
    2544:	10 40 78    	mov.b     [w0], w0
    2546:	00 04 e0    	cp0.b     w0
    2548:	f8 ff 3a    	bra       NZ, 0x253a <.L26>
    U1_flush_tx_buffer();
    254a:	b1 ff 07    	rcall     0x24ae <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    254c:	00 80 fa    	ulnk      
    254e:	00 00 06    	return    

00002550 <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    2550:	04 00 fa    	lnk       #0x4
    2552:	00 0f 78    	mov.w     w0, [w14]
    2554:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    2556:	1e 00 90    	mov.w     [w14+2], w0
    2558:	00 00 e0    	cp0.w     w0
    255a:	1a 00 32    	bra       Z, 0x2590 <.L32>
        return;

    if (len == 1) {
    255c:	1e 00 90    	mov.w     [w14+2], w0
    255e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2560:	04 00 3a    	bra       NZ, 0x256a <.L30>
        *str = '\0';
    2562:	1e 00 78    	mov.w     [w14], w0
    2564:	80 40 eb    	clr.b     w1
    2566:	01 48 78    	mov.b     w1, [w0]
        return;
    2568:	14 00 37    	bra       0x2592 <.L27>

0000256a <.L30>:
    }

    while (1) {
        *str = U1_getc();
    256a:	ca ff 07    	rcall     0x2500 <_U1_getc> <.LFB6> <.LFE5>
    256c:	9e 00 78    	mov.w     [w14], w1
    256e:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    2570:	1e 00 78    	mov.w     [w14], w0
    2572:	10 40 78    	mov.b     [w0], w0
    2574:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2576:	08 00 32    	bra       Z, 0x2588 <.L31>
    2578:	1e 00 90    	mov.w     [w14+2], w0
    257a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    257c:	05 00 32    	bra       Z, 0x2588 <.L31>
            break;
        str++;
    257e:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    2580:	1e 00 90    	mov.w     [w14+2], w0
    2582:	00 00 e9    	dec.w     w0, w0
    2584:	10 07 98    	mov.w     w0, [w14+2]
    }
    2586:	f1 ff 37    	bra       0x256a <.L30>

00002588 <.L31>:
    *str = '\0';
    2588:	1e 00 78    	mov.w     [w14], w0
    258a:	80 40 eb    	clr.b     w1
    258c:	01 48 78    	mov.b     w1, [w0]
    258e:	01 00 37    	bra       0x2592 <.L27>

00002590 <.L32>:
    2590:	00 00 00    	nop       

00002592 <.L27>:
}
    2592:	00 80 fa    	ulnk      
    2594:	00 00 06    	return    

00002596 <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    2596:	08 00 fa    	lnk       #0x8
    2598:	20 07 98    	mov.w     w0, [w14+4]
    259a:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    259c:	3e 00 90    	mov.w     [w14+6], w0
    259e:	00 00 e0    	cp0.w     w0
    25a0:	6f 00 32    	bra       Z, 0x2680 <.L46>
        return;

    if (len == 1) {
    25a2:	3e 00 90    	mov.w     [w14+6], w0
    25a4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25a6:	04 00 3a    	bra       NZ, 0x25b0 <.L36>
        *str = '\0';
    25a8:	2e 00 90    	mov.w     [w14+4], w0
    25aa:	80 40 eb    	clr.b     w1
    25ac:	01 48 78    	mov.b     w1, [w0]
        return;
    25ae:	69 00 37    	bra       0x2682 <.L33>

000025b0 <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    25b0:	b0 c1 b3    	mov.b     #0x1b, w0
    25b2:	86 ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    25b4:	70 c3 b3    	mov.b     #0x37, w0
    25b6:	84 ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    25b8:	7a ff 07    	rcall     0x24ae <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    25ba:	ae 00 90    	mov.w     [w14+4], w1
    25bc:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    25be:	be 00 90    	mov.w     [w14+6], w1
    25c0:	01 0f 78    	mov.w     w1, [w14]
    25c2:	03 00 37    	bra       0x25ca <.L45>

000025c4 <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    25c4:	00 00 00    	nop       
    25c6:	01 00 37    	bra       0x25ca <.L45>

000025c8 <.L48>:
    25c8:	00 00 00    	nop       

000025ca <.L45>:
    25ca:	9a ff 07    	rcall     0x2500 <_U1_getc> <.LFB6> <.LFE5>
    25cc:	ae 00 90    	mov.w     [w14+4], w1
    25ce:	80 48 78    	mov.b     w0, [w1]
    25d0:	2e 00 90    	mov.w     [w14+4], w0
    25d2:	10 40 78    	mov.b     [w0], w0
    25d4:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    25d6:	09 00 3a    	bra       NZ, 0x25ea <.L37>
    *str = '\0';                            // terminarte the string with null
    25d8:	2e 00 90    	mov.w     [w14+4], w0
    25da:	80 40 eb    	clr.b     w1
    25dc:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    25de:	a0 c0 b3    	mov.b     #0xa, w0
    25e0:	6f ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    25e2:	d0 c0 b3    	mov.b     #0xd, w0
    25e4:	6d ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    25e6:	63 ff 07    	rcall     0x24ae <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    25e8:	4c 00 37    	bra       0x2682 <.L33>

000025ea <.L37>:
    25ea:	2e 00 90    	mov.w     [w14+4], w0
    25ec:	10 40 78    	mov.b     [w0], w0
    25ee:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    25f0:	10 00 3a    	bra       NZ, 0x2612 <.L38>
    25f2:	b0 c1 b3    	mov.b     #0x1b, w0
    25f4:	65 ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    25f6:	80 c3 b3    	mov.b     #0x38, w0
    25f8:	63 ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    25fa:	b0 c1 b3    	mov.b     #0x1b, w0
    25fc:	61 ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    25fe:	b0 c5 b3    	mov.b     #0x5b, w0
    2600:	5f ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    2602:	b0 c4 b3    	mov.b     #0x4b, w0
    2604:	5d ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    2606:	53 ff 07    	rcall     0x24ae <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2608:	9e 00 90    	mov.w     [w14+2], w1
    260a:	21 07 98    	mov.w     w1, [w14+4]
    260c:	be 00 90    	mov.w     [w14+6], w1
    260e:	01 0f 78    	mov.w     w1, [w14]
    2610:	36 00 37    	bra       0x267e <.L39>

00002612 <.L38>:
    2612:	2e 00 90    	mov.w     [w14+4], w0
    2614:	10 40 78    	mov.b     [w0], w0
    2616:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2618:	05 00 32    	bra       Z, 0x2624 <.L40>
    261a:	2e 00 90    	mov.w     [w14+4], w0
    261c:	90 40 78    	mov.b     [w0], w1
    261e:	f0 c7 b3    	mov.b     #0x7f, w0
    2620:	80 cf 50    	sub.b     w1, w0, [w15]
    2622:	14 00 3a    	bra       NZ, 0x264c <.L41>

00002624 <.L40>:
    2624:	ae 00 90    	mov.w     [w14+4], w1
    2626:	1e 00 90    	mov.w     [w14+2], w0
    2628:	80 8f 50    	sub.w     w1, w0, [w15]
    262a:	0c 00 36    	bra       LEU, 0x2644 <.L42>
    262c:	80 c0 b3    	mov.b     #0x8, w0
    262e:	48 ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    2630:	00 c2 b3    	mov.b     #0x20, w0
    2632:	46 ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    2634:	80 c0 b3    	mov.b     #0x8, w0
    2636:	44 ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    2638:	3a ff 07    	rcall     0x24ae <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    263a:	2e 00 90    	mov.w     [w14+4], w0
    263c:	00 00 e9    	dec.w     w0, w0
    263e:	20 07 98    	mov.w     w0, [w14+4]
    2640:	1e 0f e8    	inc.w     [w14], [w14]
    2642:	03 00 37    	bra       0x264a <.L43>

00002644 <.L42>:
    2644:	70 c0 b3    	mov.b     #0x7, w0
    2646:	3c ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    2648:	32 ff 07    	rcall     0x24ae <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

0000264a <.L43>:
    264a:	19 00 37    	bra       0x267e <.L39>

0000264c <.L41>:
    264c:	1e 00 78    	mov.w     [w14], w0
    264e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2650:	04 00 3a    	bra       NZ, 0x265a <.L44>
    2652:	70 c0 b3    	mov.b     #0x7, w0
    2654:	35 ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    2656:	2b ff 07    	rcall     0x24ae <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2658:	12 00 37    	bra       0x267e <.L39>

0000265a <.L44>:
    265a:	2e 00 90    	mov.w     [w14+4], w0
    265c:	10 40 78    	mov.b     [w0], w0
    265e:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2660:	b1 ff 36    	bra       LEU, 0x25c4 <.L47>
    2662:	2e 00 90    	mov.w     [w14+4], w0
    2664:	90 40 78    	mov.b     [w0], w1
    2666:	e0 c7 b3    	mov.b     #0x7e, w0
    2668:	80 cf 50    	sub.b     w1, w0, [w15]
    266a:	ae ff 3e    	bra       GTU, 0x25c8 <.L48>
    266c:	2e 00 90    	mov.w     [w14+4], w0
    266e:	10 40 78    	mov.b     [w0], w0
    2670:	27 ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    2672:	1d ff 07    	rcall     0x24ae <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2674:	2e 00 90    	mov.w     [w14+4], w0
    2676:	00 00 e8    	inc.w     w0, w0
    2678:	20 07 98    	mov.w     w0, [w14+4]
    267a:	1e 0f e9    	dec.w     [w14], [w14]
    267c:	a6 ff 37    	bra       0x25ca <.L45>

0000267e <.L39>:
    267e:	a5 ff 37    	bra       0x25ca <.L45>

00002680 <.L46>:
    2680:	00 00 00    	nop       

00002682 <.L33>:
}
    2682:	00 80 fa    	ulnk      
    2684:	00 00 06    	return    

00002686 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2686:	08 00 fa    	lnk       #0x8
    2688:	10 07 98    	mov.w     w0, [w14+2]
    268a:	21 07 98    	mov.w     w1, [w14+4]
    268c:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    268e:	1e 00 90    	mov.w     [w14+2], w0
    2690:	60 00 40    	add.w     w0, #0x0, w0
    2692:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2694:	10 00 3e    	bra       GTU, 0x26b6 <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    2696:	00 00 eb    	clr.w     w0
    2698:	00 0f 78    	mov.w     w0, [w14]
    269a:	07 00 37    	bra       0x26aa <.L52>

0000269c <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    269c:	2e 00 90    	mov.w     [w14+4], w0
    269e:	10 40 78    	mov.b     [w0], w0
    26a0:	ae 00 90    	mov.w     [w14+4], w1
    26a2:	81 00 e8    	inc.w     w1, w1
    26a4:	21 07 98    	mov.w     w1, [w14+4]
    26a6:	0c ff 07    	rcall     0x24c0 <_U1_putc> <.LFB5> <.LFE4>
    26a8:	1e 0f e8    	inc.w     [w14], [w14]

000026aa <.L52>:
    26aa:	9e 00 78    	mov.w     [w14], w1
    26ac:	3e 00 90    	mov.w     [w14+6], w0
    26ae:	80 8f 50    	sub.w     w1, w0, [w15]
    26b0:	f5 ff 39    	bra       NC, 0x269c <.L53>
            U1_flush_tx_buffer();
    26b2:	fd fe 07    	rcall     0x24ae <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    26b4:	01 00 37    	bra       0x26b8 <.L54>

000026b6 <.L55>:
        default:
            break;
    26b6:	00 00 00    	nop       

000026b8 <.L54>:
    }
    return len;
    26b8:	3e 00 90    	mov.w     [w14+6], w0
}
    26ba:	00 80 fa    	ulnk      
    26bc:	00 00 06    	return    
Disassembly of section .isr.text:

000026be <__CNInterrupt>:
    26be:	32 00 f8    	push      0x32
    26c0:	34 00 f8    	push      0x34
    26c2:	88 1f 78    	mov.w     w8, [w15++]
    26c4:	18 00 20    	mov.w     #0x1, w8
    26c6:	a8 01 88    	mov.w     w8, 0x34
    26c8:	08 20 20    	mov.w     #0x200, w8
    26ca:	98 01 88    	mov.w     w8, 0x32
    26cc:	4f 04 78    	mov.w     [--w15], w8
    26ce:	00 00 fa    	lnk       #0x0
    26d0:	86 60 a9    	bclr.b    0x86, #0x3
    26d2:	06 21 ef    	clr.w     0x106
    26d4:	84 e0 a9    	bclr.b    0x84, #0x7
    26d6:	11 e1 a8    	bset.b    0x111, #0x7
    26d8:	dc e2 a8    	bset.b    0x2dc, #0x7
    26da:	00 80 fa    	ulnk      
    26dc:	34 00 f9    	pop       0x34
    26de:	32 00 f9    	pop       0x32
    26e0:	00 40 06    	retfie    

000026e2 <__T2Interrupt>:
    26e2:	36 00 f8    	push      0x36
    26e4:	80 9f be    	mov.d     w0, [w15++]
    26e6:	82 9f be    	mov.d     w2, [w15++]
    26e8:	84 9f be    	mov.d     w4, [w15++]
    26ea:	86 9f be    	mov.d     w6, [w15++]
    26ec:	32 00 f8    	push      0x32
    26ee:	34 00 f8    	push      0x34
    26f0:	10 00 20    	mov.w     #0x1, w0
    26f2:	a0 01 88    	mov.w     w0, 0x34
    26f4:	00 20 20    	mov.w     #0x200, w0
    26f6:	90 01 88    	mov.w     w0, 0x32
    26f8:	00 00 fa    	lnk       #0x0
    26fa:	84 e0 a9    	bclr.b    0x84, #0x7
    26fc:	11 e1 a9    	bclr.b    0x111, #0x7
    26fe:	dc e2 a9    	bclr.b    0x2dc, #0x7
    2700:	d1 16 80    	mov.w     0x2da, w1
    2702:	00 02 20    	mov.w     #0x20, w0
    2704:	00 80 60    	and.w     w1, w0, w0
    2706:	00 00 e0    	cp0.w     w0
    2708:	0b 00 3a    	bra       NZ, 0x2720 <.L45>
    270a:	10 c8 bf    	mov.b     0x810, WREG
    270c:	00 80 fb    	ze        w0, w0
    270e:	80 00 e8    	inc.w     w0, w1
    2710:	60 00 20    	mov.w     #0x6, w0
    2712:	00 01 78    	mov.w     w0, w2
    2714:	11 00 09    	repeat    #0x11
    2716:	82 00 d8    	div.sw    w1, w2
    2718:	80 00 fd    	exch      w0, w1
    271a:	00 40 78    	mov.b     w0, w0
    271c:	10 e8 b7    	mov.b     WREG, 0x810
    271e:	0c 00 37    	bra       0x2738 <.L46>

00002720 <.L45>:
    2720:	d0 16 80    	mov.w     0x2da, w0
    2722:	70 00 60    	and.w     w0, #0x10, w0
    2724:	00 00 e0    	cp0.w     w0
    2726:	08 00 3a    	bra       NZ, 0x2738 <.L46>
    2728:	10 c8 bf    	mov.b     0x810, WREG
    272a:	00 40 e9    	dec.b     w0, w0
    272c:	10 e8 b7    	mov.b     WREG, 0x810
    272e:	10 c8 bf    	mov.b     0x810, WREG
    2730:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    2732:	02 00 36    	bra       LEU, 0x2738 <.L46>
    2734:	50 c0 b3    	mov.b     #0x5, w0
    2736:	10 e8 b7    	mov.b     WREG, 0x810

00002738 <.L46>:
    2738:	d0 16 80    	mov.w     0x2da, w0
    273a:	64 00 60    	and.w     w0, #0x4, w0
    273c:	00 00 e0    	cp0.w     w0
    273e:	0b 00 3a    	bra       NZ, 0x2756 <.L47>
    2740:	11 c8 bf    	mov.b     0x811, WREG
    2742:	00 80 fb    	ze        w0, w0
    2744:	80 00 e8    	inc.w     w0, w1
    2746:	60 00 20    	mov.w     #0x6, w0
    2748:	00 01 78    	mov.w     w0, w2
    274a:	11 00 09    	repeat    #0x11
    274c:	82 00 d8    	div.sw    w1, w2
    274e:	80 00 fd    	exch      w0, w1
    2750:	00 40 78    	mov.b     w0, w0
    2752:	11 e8 b7    	mov.b     WREG, 0x811
    2754:	07 00 37    	bra       0x2764 <.L48>

00002756 <.L47>:
    2756:	d0 16 80    	mov.w     0x2da, w0
    2758:	68 00 60    	and.w     w0, #0x8, w0
    275a:	00 00 e0    	cp0.w     w0
    275c:	03 00 3a    	bra       NZ, 0x2764 <.L48>
    275e:	11 c8 bf    	mov.b     0x811, WREG
    2760:	00 40 e9    	dec.b     w0, w0
    2762:	11 e8 b7    	mov.b     WREG, 0x811

00002764 <.L48>:
    2764:	11 c8 bf    	mov.b     0x811, WREG
    2766:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    2768:	03 00 36    	bra       LEU, 0x2770 <.L49>
    276a:	11 c8 bf    	mov.b     0x811, WREG
    276c:	66 40 40    	add.b     w0, #0x6, w0
    276e:	11 e8 b7    	mov.b     WREG, 0x811

00002770 <.L49>:
    2770:	51 16 80    	mov.w     0x2ca, w1
    2772:	00 00 28    	mov.w     #0x8000, w0
    2774:	00 80 60    	and.w     w1, w0, w0
    2776:	00 00 e0    	cp0.w     w0
    2778:	0b 00 3a    	bra       NZ, 0x2790 <.L50>
    277a:	12 c8 bf    	mov.b     0x812, WREG
    277c:	00 80 fb    	ze        w0, w0
    277e:	80 00 e8    	inc.w     w0, w1
    2780:	60 00 20    	mov.w     #0x6, w0
    2782:	00 01 78    	mov.w     w0, w2
    2784:	11 00 09    	repeat    #0x11
    2786:	82 00 d8    	div.sw    w1, w2
    2788:	80 00 fd    	exch      w0, w1
    278a:	00 40 78    	mov.b     w0, w0
    278c:	12 e8 b7    	mov.b     WREG, 0x812
    278e:	07 00 37    	bra       0x279e <.L51>

00002790 <.L50>:
    2790:	50 17 80    	mov.w     0x2ea, w0
    2792:	68 00 60    	and.w     w0, #0x8, w0
    2794:	00 00 e0    	cp0.w     w0
    2796:	03 00 3a    	bra       NZ, 0x279e <.L51>
    2798:	12 c8 bf    	mov.b     0x812, WREG
    279a:	00 40 e9    	dec.b     w0, w0
    279c:	12 e8 b7    	mov.b     WREG, 0x812

0000279e <.L51>:
    279e:	12 c8 bf    	mov.b     0x812, WREG
    27a0:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    27a2:	03 00 36    	bra       LEU, 0x27aa <.L52>
    27a4:	12 c8 bf    	mov.b     0x812, WREG
    27a6:	66 40 40    	add.b     w0, #0x6, w0
    27a8:	12 e8 b7    	mov.b     WREG, 0x812

000027aa <.L52>:
    27aa:	d1 16 80    	mov.w     0x2da, w1
    27ac:	00 10 20    	mov.w     #0x100, w0
    27ae:	00 80 60    	and.w     w1, w0, w0
    27b0:	00 00 e0    	cp0.w     w0
    27b2:	0b 00 3a    	bra       NZ, 0x27ca <.L53>
    27b4:	13 c8 bf    	mov.b     0x813, WREG
    27b6:	00 80 fb    	ze        w0, w0
    27b8:	80 00 e8    	inc.w     w0, w1
    27ba:	60 00 20    	mov.w     #0x6, w0
    27bc:	00 01 78    	mov.w     w0, w2
    27be:	11 00 09    	repeat    #0x11
    27c0:	82 00 d8    	div.sw    w1, w2
    27c2:	80 00 fd    	exch      w0, w1
    27c4:	00 40 78    	mov.b     w0, w0
    27c6:	13 e8 b7    	mov.b     WREG, 0x813
    27c8:	08 00 37    	bra       0x27da <.L54>

000027ca <.L53>:
    27ca:	d1 16 80    	mov.w     0x2da, w1
    27cc:	00 80 20    	mov.w     #0x800, w0
    27ce:	00 80 60    	and.w     w1, w0, w0
    27d0:	00 00 e0    	cp0.w     w0
    27d2:	03 00 3a    	bra       NZ, 0x27da <.L54>
    27d4:	13 c8 bf    	mov.b     0x813, WREG
    27d6:	00 40 e9    	dec.b     w0, w0
    27d8:	13 e8 b7    	mov.b     WREG, 0x813

000027da <.L54>:
    27da:	13 c8 bf    	mov.b     0x813, WREG
    27dc:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    27de:	03 00 36    	bra       LEU, 0x27e6 <.L55>
    27e0:	13 c8 bf    	mov.b     0x813, WREG
    27e2:	66 40 40    	add.b     w0, #0x6, w0
    27e4:	13 e8 b7    	mov.b     WREG, 0x813

000027e6 <.L55>:
    27e6:	d1 16 80    	mov.w     0x2da, w1
    27e8:	00 20 20    	mov.w     #0x200, w0
    27ea:	00 80 60    	and.w     w1, w0, w0
    27ec:	00 00 e0    	cp0.w     w0
    27ee:	0b 00 3a    	bra       NZ, 0x2806 <.L56>
    27f0:	14 c8 bf    	mov.b     0x814, WREG
    27f2:	00 80 fb    	ze        w0, w0
    27f4:	80 00 e8    	inc.w     w0, w1
    27f6:	60 00 20    	mov.w     #0x6, w0
    27f8:	00 01 78    	mov.w     w0, w2
    27fa:	11 00 09    	repeat    #0x11
    27fc:	82 00 d8    	div.sw    w1, w2
    27fe:	80 00 fd    	exch      w0, w1
    2800:	00 40 78    	mov.b     w0, w0
    2802:	14 e8 b7    	mov.b     WREG, 0x814
    2804:	08 00 37    	bra       0x2816 <.L57>

00002806 <.L56>:
    2806:	d1 16 80    	mov.w     0x2da, w1
    2808:	00 40 20    	mov.w     #0x400, w0
    280a:	00 80 60    	and.w     w1, w0, w0
    280c:	00 00 e0    	cp0.w     w0
    280e:	03 00 3a    	bra       NZ, 0x2816 <.L57>
    2810:	14 c8 bf    	mov.b     0x814, WREG
    2812:	00 40 e9    	dec.b     w0, w0
    2814:	14 e8 b7    	mov.b     WREG, 0x814

00002816 <.L57>:
    2816:	14 c8 bf    	mov.b     0x814, WREG
    2818:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    281a:	03 00 36    	bra       LEU, 0x2822 <.L58>
    281c:	14 c8 bf    	mov.b     0x814, WREG
    281e:	66 40 40    	add.b     w0, #0x6, w0
    2820:	14 e8 b7    	mov.b     WREG, 0x814

00002822 <.L58>:
    2822:	4d fb 07    	rcall     0x1ebe <_updateDisplay> <.LFB8> <.LFE5>
    2824:	00 80 fa    	ulnk      
    2826:	34 00 f9    	pop       0x34
    2828:	32 00 f9    	pop       0x32
    282a:	4f 03 be    	mov.d     [--w15], w6
    282c:	4f 02 be    	mov.d     [--w15], w4
    282e:	4f 01 be    	mov.d     [--w15], w2
    2830:	4f 00 be    	mov.d     [--w15], w0
    2832:	36 00 f9    	pop       0x36
    2834:	00 40 06    	retfie    

00002836 <__SI2C2Interrupt>:
    2836:	80 9f be    	mov.d     w0, [w15++]
    2838:	32 00 f8    	push      0x32
    283a:	34 00 f8    	push      0x34
    283c:	10 00 20    	mov.w     #0x1, w0
    283e:	a0 01 88    	mov.w     w0, 0x34
    2840:	00 20 20    	mov.w     #0x200, w0
    2842:	90 01 88    	mov.w     w0, 0x32
    2844:	02 00 fa    	lnk       #0x2
    2846:	8a 20 a9    	bclr.b    0x8a, #0x1
    2848:	40 41 80    	mov.w     0x828, w0
    284a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    284c:	23 00 32    	bra       Z, 0x2894 <.L4>
    284e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2850:	03 00 39    	bra       NC, 0x2858 <.L3>
    2852:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2854:	4b 00 32    	bra       Z, 0x28ec <.L5>
    2856:	4c 00 37    	bra       0x28f0 <.L17>

00002858 <.L3>:
    2858:	80 10 80    	mov.w     0x210, w0
    285a:	00 4f 78    	mov.b     w0, [w14]
    285c:	c0 10 80    	mov.w     0x218, w0
    285e:	64 00 60    	and.w     w0, #0x4, w0
    2860:	00 00 e0    	cp0.w     w0
    2862:	15 00 32    	bra       Z, 0x288e <.L6>
    2864:	21 c8 bf    	mov.b     0x821, WREG
    2866:	00 80 fb    	ze        w0, w0
    2868:	47 00 dd    	sl.w      w0, #0x7, w0
    286a:	80 40 78    	mov.b     w0, w1
    286c:	22 c8 bf    	mov.b     0x822, WREG
    286e:	00 80 fb    	ze        w0, w0
    2870:	67 00 60    	and.w     w0, #0x7, w0
    2872:	44 00 dd    	sl.w      w0, #0x4, w0
    2874:	00 40 78    	mov.b     w0, w0
    2876:	80 c0 70    	ior.b     w1, w0, w1
    2878:	23 c8 bf    	mov.b     0x823, WREG
    287a:	6f 40 60    	and.b     w0, #0xf, w0
    287c:	00 c0 70    	ior.b     w1, w0, w0
    287e:	1e e8 b7    	mov.b     WREG, 0x81e
    2880:	1e c8 bf    	mov.b     0x81e, WREG
    2882:	00 80 fb    	ze        w0, w0
    2884:	90 10 88    	mov.w     w0, 0x212
    2886:	17 82 a8    	bset.b    0x217, #0x4
    2888:	20 00 20    	mov.w     #0x2, w0
    288a:	40 41 88    	mov.w     w0, 0x828
    288c:	32 00 37    	bra       0x28f2 <.L1>

0000288e <.L6>:
    288e:	10 00 20    	mov.w     #0x1, w0
    2890:	40 41 88    	mov.w     w0, 0x828
    2892:	2f 00 37    	bra       0x28f2 <.L1>

00002894 <.L4>:
    2894:	80 10 80    	mov.w     0x210, w0
    2896:	00 40 78    	mov.b     w0, w0
    2898:	1f e8 b7    	mov.b     WREG, 0x81f
    289a:	1f c8 bf    	mov.b     0x81f, WREG
    289c:	00 80 fb    	ze        w0, w0
    289e:	45 00 de    	lsr.w     w0, #0x5, w0
    28a0:	00 40 78    	mov.b     w0, w0
    28a2:	00 80 fb    	ze        w0, w0
    28a4:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    28a6:	0c 00 32    	bra       Z, 0x28c0 <.L12>
    28a8:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    28aa:	05 00 3c    	bra       GT, 0x28b6 <.L15>
    28ac:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    28ae:	13 00 32    	bra       Z, 0x28d6 <.L10>
    28b0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    28b2:	14 00 32    	bra       Z, 0x28dc <.L11>
    28b4:	16 00 37    	bra       0x28e2 <.L9>

000028b6 <.L15>:
    28b6:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    28b8:	0b 00 32    	bra       Z, 0x28d0 <.L13>
    28ba:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    28bc:	05 00 32    	bra       Z, 0x28c8 <.L14>
    28be:	11 00 37    	bra       0x28e2 <.L9>

000028c0 <.L12>:
    28c0:	1f c8 bf    	mov.b     0x81f, WREG
    28c2:	7f 40 60    	and.b     w0, #0x1f, w0
    28c4:	20 e8 b7    	mov.b     WREG, 0x820
    28c6:	10 00 37    	bra       0x28e8 <.L16>

000028c8 <.L14>:
    28c8:	1f c8 bf    	mov.b     0x81f, WREG
    28ca:	7f 40 60    	and.b     w0, #0x1f, w0
    28cc:	22 e8 b7    	mov.b     WREG, 0x822
    28ce:	0c 00 37    	bra       0x28e8 <.L16>

000028d0 <.L13>:
    28d0:	10 c0 b3    	mov.b     #0x1, w0
    28d2:	24 e8 b7    	mov.b     WREG, 0x824
    28d4:	09 00 37    	bra       0x28e8 <.L16>

000028d6 <.L10>:
    28d6:	10 c0 b3    	mov.b     #0x1, w0
    28d8:	25 e8 b7    	mov.b     WREG, 0x825
    28da:	06 00 37    	bra       0x28e8 <.L16>

000028dc <.L11>:
    28dc:	10 c0 b3    	mov.b     #0x1, w0
    28de:	26 e8 b7    	mov.b     WREG, 0x826
    28e0:	03 00 37    	bra       0x28e8 <.L16>

000028e2 <.L9>:
    28e2:	23 c8 bf    	mov.b     0x823, WREG
    28e4:	00 40 e8    	inc.b     w0, w0
    28e6:	23 e8 b7    	mov.b     WREG, 0x823

000028e8 <.L16>:
    28e8:	28 28 ef    	clr.w     0x828
    28ea:	03 00 37    	bra       0x28f2 <.L1>

000028ec <.L5>:
    28ec:	28 28 ef    	clr.w     0x828
    28ee:	01 00 37    	bra       0x28f2 <.L1>

000028f0 <.L17>:
    28f0:	28 28 ef    	clr.w     0x828

000028f2 <.L1>:
    28f2:	00 80 fa    	ulnk      
    28f4:	34 00 f9    	pop       0x34
    28f6:	32 00 f9    	pop       0x32
    28f8:	4f 00 be    	mov.d     [--w15], w0
    28fa:	00 40 06    	retfie    

000028fc <__U1TXInterrupt>:
    28fc:	80 9f be    	mov.d     w0, [w15++]
    28fe:	32 00 f8    	push      0x32
    2900:	34 00 f8    	push      0x34
    2902:	10 00 20    	mov.w     #0x1, w0
    2904:	a0 01 88    	mov.w     w0, 0x34
    2906:	00 20 20    	mov.w     #0x200, w0
    2908:	90 01 88    	mov.w     w0, 0x32
    290a:	02 00 fa    	lnk       #0x2
    290c:	85 80 a9    	bclr.b    0x85, #0x4
    290e:	a0 41 80    	mov.w     0x834, w0
    2910:	00 00 e0    	cp0.w     w0
    2912:	17 00 3a    	bra       NZ, 0x2942 <.L8>
    2914:	23 42 a9    	bclr.b    0x223, #0x2
    2916:	16 00 37    	bra       0x2944 <.L4>

00002918 <.L7>:
    2918:	ff 3f fc    	disi      #0x3fff
    291a:	61 41 80    	mov.w     0x82c, w1
    291c:	80 41 80    	mov.w     0x830, w0
    291e:	00 80 40    	add.w     w1, w0, w0
    2920:	10 4f 78    	mov.b     [w0], [w14]
    2922:	80 41 80    	mov.w     0x830, w0
    2924:	00 00 e8    	inc.w     w0, w0
    2926:	80 41 88    	mov.w     w0, 0x830
    2928:	81 41 80    	mov.w     0x830, w1
    292a:	70 41 80    	mov.w     0x82e, w0
    292c:	80 8f 50    	sub.w     w1, w0, [w15]
    292e:	02 00 3a    	bra       NZ, 0x2934 <.L5>
    2930:	00 00 eb    	clr.w     w0
    2932:	80 41 88    	mov.w     w0, 0x830

00002934 <.L5>:
    2934:	a0 41 80    	mov.w     0x834, w0
    2936:	00 00 e9    	dec.w     w0, w0
    2938:	a0 41 88    	mov.w     w0, 0x834
    293a:	52 20 ef    	clr.w     0x52
    293c:	1e 80 fb    	ze        [w14], w0
    293e:	20 11 88    	mov.w     w0, 0x224
    2940:	01 00 37    	bra       0x2944 <.L4>

00002942 <.L8>:
    2942:	00 00 00    	nop       

00002944 <.L4>:
    2944:	11 11 80    	mov.w     0x222, w1
    2946:	00 20 20    	mov.w     #0x200, w0
    2948:	00 80 60    	and.w     w1, w0, w0
    294a:	00 00 e0    	cp0.w     w0
    294c:	03 00 3a    	bra       NZ, 0x2954 <.L2>
    294e:	a0 41 80    	mov.w     0x834, w0
    2950:	00 00 e0    	cp0.w     w0
    2952:	e2 ff 3a    	bra       NZ, 0x2918 <.L7>

00002954 <.L2>:
    2954:	00 80 fa    	ulnk      
    2956:	34 00 f9    	pop       0x34
    2958:	32 00 f9    	pop       0x32
    295a:	4f 00 be    	mov.d     [--w15], w0
    295c:	00 40 06    	retfie    

0000295e <__U1RXInterrupt>:
    295e:	80 9f be    	mov.d     w0, [w15++]
    2960:	32 00 f8    	push      0x32
    2962:	34 00 f8    	push      0x34
    2964:	10 00 20    	mov.w     #0x1, w0
    2966:	a0 01 88    	mov.w     w0, 0x34
    2968:	00 20 20    	mov.w     #0x200, w0
    296a:	90 01 88    	mov.w     w0, 0x32
    296c:	00 00 fa    	lnk       #0x0
    296e:	85 60 a9    	bclr.b    0x85, #0x3
    2970:	14 00 37    	bra       0x299a <.L10>

00002972 <.L13>:
    2972:	ff 3f fc    	disi      #0x3fff
    2974:	b1 41 80    	mov.w     0x836, w1
    2976:	e0 41 80    	mov.w     0x83c, w0
    2978:	00 80 40    	add.w     w1, w0, w0
    297a:	31 11 80    	mov.w     0x226, w1
    297c:	81 40 78    	mov.b     w1, w1
    297e:	01 48 78    	mov.b     w1, [w0]
    2980:	e0 41 80    	mov.w     0x83c, w0
    2982:	00 00 e8    	inc.w     w0, w0
    2984:	e0 41 88    	mov.w     w0, 0x83c
    2986:	e1 41 80    	mov.w     0x83c, w1
    2988:	c0 41 80    	mov.w     0x838, w0
    298a:	80 8f 50    	sub.w     w1, w0, [w15]
    298c:	02 00 3a    	bra       NZ, 0x2992 <.L11>
    298e:	00 00 eb    	clr.w     w0
    2990:	e0 41 88    	mov.w     w0, 0x83c

00002992 <.L11>:
    2992:	f0 41 80    	mov.w     0x83e, w0
    2994:	00 00 e8    	inc.w     w0, w0
    2996:	f0 41 88    	mov.w     w0, 0x83e
    2998:	52 20 ef    	clr.w     0x52

0000299a <.L10>:
    299a:	10 11 80    	mov.w     0x222, w0
    299c:	61 00 60    	and.w     w0, #0x1, w0
    299e:	00 00 e0    	cp0.w     w0
    29a0:	04 00 32    	bra       Z, 0x29aa <.L9>
    29a2:	f1 41 80    	mov.w     0x83e, w1
    29a4:	c0 41 80    	mov.w     0x838, w0
    29a6:	80 8f 50    	sub.w     w1, w0, [w15]
    29a8:	e4 ff 3a    	bra       NZ, 0x2972 <.L13>

000029aa <.L9>:
    29aa:	00 80 fa    	ulnk      
    29ac:	34 00 f9    	pop       0x34
    29ae:	32 00 f9    	pop       0x32
    29b0:	4f 00 be    	mov.d     [--w15], w0
    29b2:	00 40 06    	retfie    
Disassembly of section .text:

000029b4 <_init_elecanisms>:
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}
    29b4:	00 00 fa    	lnk       #0x0
    29b6:	00 10 20    	mov.w     #0x100, w0
    29b8:	20 3a 88    	mov.w     w0, 0x744
    29ba:	d8 a2 a8    	bset.b    0x2d8, #0x5
    29bc:	d8 82 a8    	bset.b    0x2d8, #0x4
    29be:	e8 82 a8    	bset.b    0x2e8, #0x4
    29c0:	e8 a2 a8    	bset.b    0x2e8, #0x5
    29c2:	c9 e2 a8    	bset.b    0x2c9, #0x7
    29c4:	e8 62 a8    	bset.b    0x2e8, #0x3
    29c6:	d9 02 a8    	bset.b    0x2d9, #0x0
    29c8:	d9 62 a8    	bset.b    0x2d9, #0x3
    29ca:	d9 22 a8    	bset.b    0x2d9, #0x1
    29cc:	d9 42 a8    	bset.b    0x2d9, #0x2
    29ce:	d8 02 a8    	bset.b    0x2d8, #0x0
    29d0:	d8 22 a8    	bset.b    0x2d8, #0x1
    29d2:	d8 42 a8    	bset.b    0x2d8, #0x2
    29d4:	d8 62 a8    	bset.b    0x2d8, #0x3
    29d6:	c8 a2 a8    	bset.b    0x2c8, #0x5
    29d8:	c8 82 a8    	bset.b    0x2c8, #0x4
    29da:	c8 62 a8    	bset.b    0x2c8, #0x3
    29dc:	c8 42 a8    	bset.b    0x2c8, #0x2
    29de:	c8 22 a8    	bset.b    0x2c8, #0x1
    29e0:	c8 02 a8    	bset.b    0x2c8, #0x0
    29e2:	f0 03 20    	mov.w     #0x3f, w0
    29e4:	10 27 88    	mov.w     w0, 0x4e2
    29e6:	e4 24 ef    	clr.w     0x4e4
    29e8:	e6 24 ef    	clr.w     0x4e6
    29ea:	ea 24 ef    	clr.w     0x4ea
    29ec:	ec 24 ef    	clr.w     0x4ec
    29ee:	00 0e 20    	mov.w     #0xe0, w0
    29f0:	00 19 88    	mov.w     w0, 0x320
    29f2:	22 23 ef    	clr.w     0x322
    29f4:	00 c4 20    	mov.w     #0xc40, w0
    29f6:	20 19 88    	mov.w     w0, 0x324
    29f8:	50 00 20    	mov.w     #0x5, w0
    29fa:	40 19 88    	mov.w     w0, 0x328
    29fc:	21 e3 a8    	bset.b    0x321, #0x7
    29fe:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    2a00:	dc e2 a9    	bclr.b    0x2dc, #0x7
    2a02:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2a04:	ec 02 a9    	bclr.b    0x2ec, #0x0
    2a06:	e8 22 a9    	bclr.b    0x2e8, #0x1
    2a08:	ec 22 a9    	bclr.b    0x2ec, #0x1
    2a0a:	d1 e2 a8    	bset.b    0x2d1, #0x7
    2a0c:	d1 82 a8    	bset.b    0x2d1, #0x4
    2a0e:	c9 82 a8    	bset.b    0x2c9, #0x4
    2a10:	00 80 fa    	ulnk      
    2a12:	00 00 06    	return    

00002a14 <_read_analog>:
    2a14:	02 00 fa    	lnk       #0x2
    2a16:	00 0f 78    	mov.w     w0, [w14]
    2a18:	9e 00 78    	mov.w     [w14], w1
    2a1a:	41 19 88    	mov.w     w1, 0x328
    2a1c:	20 23 a8    	bset.b    0x320, #0x1
    2a1e:	00 00 00    	nop       

00002a20 <.L3>:
    2a20:	00 19 80    	mov.w     0x320, w0
    2a22:	61 00 60    	and.w     w0, #0x1, w0
    2a24:	00 00 e0    	cp0.w     w0
    2a26:	fc ff 32    	bra       Z, 0x2a20 <.L3>
    2a28:	00 18 80    	mov.w     0x300, w0
    2a2a:	00 80 fa    	ulnk      
    2a2c:	00 00 06    	return    

00002a2e <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    2a2e:	02 00 fa    	lnk       #0x2
    2a30:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    2a32:	1e 00 78    	mov.w     [w14], w0
    2a34:	48 00 de    	lsr.w     w0, #0x8, w0
    2a36:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    2a38:	1e 00 78    	mov.w     [w14], w0
    2a3a:	44 00 de    	lsr.w     w0, #0x4, w0
    2a3c:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    2a3e:	1e 00 78    	mov.w     [w14], w0
    2a40:	42 00 de    	lsr.w     w0, #0x2, w0
    2a42:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    2a44:	1e 00 78    	mov.w     [w14], w0
    2a46:	00 00 d1    	lsr.w     w0, w0
    2a48:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    2a4a:	1e 00 78    	mov.w     [w14], w0
    2a4c:	00 40 78    	mov.b     w0, w0
    2a4e:	61 40 60    	and.b     w0, #0x1, w0
}
    2a50:	00 80 fa    	ulnk      
    2a52:	00 00 06    	return    
Disassembly of section .dinit:

00002a54 <.dinit>:
    2a54:	50 10 00    	nop       
    2a56:	06 00 00    	nop       
    2a58:	80 00 00    	nop       
    2a5a:	00 08 00    	nop       
    2a5c:	1e 00 00    	nop       
    2a5e:	80 00 00    	nop       
    2a60:	40 10 00    	nop       
    2a62:	10 00 00    	nop       
    2a64:	80 00 00    	nop       
    2a66:	1e 08 00    	nop       
    2a68:	0c 00 00    	nop       
    2a6a:	80 00 00    	nop       
    2a6c:	2c 08 00    	nop       
    2a6e:	14 08 00    	nop       
    2a70:	80 00 00    	nop       
    2a72:	2a 08 00    	nop       
    2a74:	02 00 00    	nop       
    2a76:	80 00 00    	nop       
    2a78:	00 00 00    	nop       
Disassembly of section .isr:

00002a7a <__DefaultInterrupt>:
    2a7a:	00 40 da    	break     
    2a7c:	00 00 fe    	reset     
