
codeword.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	ac 24 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	ac 24 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	ac 24 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	ac 24 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	ac 24 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	ac 24 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	ac 24 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	ac 24 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	ac 24 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	ac 24 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	ac 24 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	ac 24 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	ac 24 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	ac 24 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	ac 24 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	ac 24 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	ac 24 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	ac 24 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	ac 24 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	ac 24 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	ac 24 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	ac 24 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	ac 24 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	ac 24 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	ac 24 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	ac 24 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	ac 24 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	ac 24 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	ac 24 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	ac 24 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	ac 24 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	ac 24 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	ac 24 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	ac 24 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	ac 24 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	ac 24 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	ac 24 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	ac 24 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	ac 24 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	ac 24 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	ac 24 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	ac 24 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	ac 24 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	ac 24 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	ac 24 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	ac 24 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	ac 24 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	ac 24 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	ac 24 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	ac 24 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	ac 24 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	ac 24 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	ac 24 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	ac 24 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	ac 24 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	ac 24 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	ac 24 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	ac 24 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	ac 24 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	ac 24 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	ac 24 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	ac 24 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	ac 24 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	ac 24 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	ac 24 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	ac 24 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	ac 24 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	ac 24 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	ac 24 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	ac 24 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f 84 20    	mov.w     #0x840, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	81 00 07    	rcall     0x1228 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	20 49 22    	mov.w     #0x2492, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	e2 1a 02    	call      0x1ae2 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	e0 3c 20    	mov.w     #0x3ce, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	38 1d 04    	goto      0x1d38 <_setup>
    1216:	00 00 00 
    1218:	5a 1d 04    	goto      0x1d5a <_run>
    121a:	00 00 00 
    121c:	00 1e 04    	goto      0x1e00 <_solved>
    121e:	00 00 00 
    1220:	44 1e 04    	goto      0x1e44 <_end_win>
    1222:	00 00 00 
    1224:	60 1e 04    	goto      0x1e60 <_end_fail>
    1226:	00 00 00 

00001228 <__crt_start_mode>:
    1228:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	10 22 04    	goto      0x2210 <__T2Interrupt>
    1032:	00 00 00 
    1034:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	ec 21 04    	goto      0x21ec <__CNInterrupt>
    105a:	00 00 00 
    105c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	2c 23 04    	goto      0x232c <__SI2C3Interrupt>
    10e6:	00 00 00 
    10e8:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	ac 24 04    	goto      0x24ac <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000922a <.LC0-0x2ee>:
    922a:	61 62       	.word 0x6261
    922c:	6f 75       	.word 0x756f
    922e:	74 00       	.word 0x74
    9230:	65 76       	.word 0x7665
    9232:	65 72       	.word 0x7265
    9234:	79 00       	.word 0x79
    9236:	6c 61       	.word 0x616c
    9238:	72 67       	.word 0x6772
    923a:	65 00       	.word 0x65
    923c:	70 6c       	.word 0x6c70
    923e:	61 6e       	.word 0x6e61
    9240:	74 00       	.word 0x74
    9242:	73 70       	.word 0x7073
    9244:	65 6c       	.word 0x6c65
    9246:	6c 00       	.word 0x6c
    9248:	74 68       	.word 0x6874
    924a:	65 73       	.word 0x7365
    924c:	65 00       	.word 0x65
    924e:	77 68       	.word 0x6877
    9250:	65 72       	.word 0x7265
    9252:	65 00       	.word 0x65
    9254:	61 66       	.word 0x6661
    9256:	74 65       	.word 0x6574
    9258:	72 00       	.word 0x72
    925a:	66 69       	.word 0x6966
    925c:	72 73       	.word 0x7372
    925e:	74 00       	.word 0x74
    9260:	6c 65       	.word 0x656c
    9262:	61 72       	.word 0x7261
    9264:	6e 00       	.word 0x6e
    9266:	70 6f       	.word 0x6f70
    9268:	69 6e       	.word 0x6e69
    926a:	74 00       	.word 0x74
    926c:	73 74       	.word 0x7473
    926e:	69 6c       	.word 0x6c69
    9270:	6c 00       	.word 0x6c
    9272:	74 68       	.word 0x6874
    9274:	69 6e       	.word 0x6e69
    9276:	67 00       	.word 0x67
    9278:	77 68       	.word 0x6877
    927a:	69 63       	.word 0x6369
    927c:	68 00       	.word 0x68
    927e:	61 67       	.word 0x6761
    9280:	61 69       	.word 0x6961
    9282:	6e 00       	.word 0x6e
    9284:	66 6f       	.word 0x6f66
    9286:	75 6e       	.word 0x6e75
    9288:	64 00       	.word 0x64
    928a:	6e 65       	.word 0x656e
    928c:	76 65       	.word 0x6576
    928e:	72 00       	.word 0x72
    9290:	72 69       	.word 0x6972
    9292:	67 68       	.word 0x6867
    9294:	74 00       	.word 0x74
    9296:	73 74       	.word 0x7473
    9298:	75 64       	.word 0x6475
    929a:	79 00       	.word 0x79
    929c:	74 68       	.word 0x6874
    929e:	69 6e       	.word 0x6e69
    92a0:	6b 00       	.word 0x6b
    92a2:	77 6f       	.word 0x6f77
    92a4:	72 6c       	.word 0x6c72
    92a6:	64 00       	.word 0x64
    92a8:	62 65       	.word 0x6562
    92aa:	6c 6f       	.word 0x6f6c
    92ac:	77 00       	.word 0x77
    92ae:	67 72       	.word 0x7267
    92b0:	65 61       	.word 0x6165
    92b2:	74 00       	.word 0x74
    92b4:	6f 74       	.word 0x746f
    92b6:	68 65       	.word 0x6568
    92b8:	72 00       	.word 0x72
    92ba:	73 6d       	.word 0x6d73
    92bc:	61 6c       	.word 0x6c61
    92be:	6c 00       	.word 0x6c
    92c0:	74 68       	.word 0x6874
    92c2:	65 69       	.word 0x6965
    92c4:	72 00       	.word 0x72
    92c6:	74 68       	.word 0x6874
    92c8:	72 65       	.word 0x6572
    92ca:	65 00       	.word 0x65
    92cc:	77 6f       	.word 0x6f77
    92ce:	75 6c       	.word 0x6c75
    92d0:	64 00       	.word 0x64
    92d2:	63 6f       	.word 0x6f63
    92d4:	75 6c       	.word 0x6c75
    92d6:	64 00       	.word 0x64
    92d8:	68 6f       	.word 0x6f68
    92da:	75 73       	.word 0x7375
    92dc:	65 00       	.word 0x65
    92de:	70 6c       	.word 0x6c70
    92e0:	61 63       	.word 0x6361
    92e2:	65 00       	.word 0x65
    92e4:	73 6f       	.word 0x6f73
    92e6:	75 6e       	.word 0x6e75
    92e8:	64 00       	.word 0x64
    92ea:	74 68       	.word 0x6874
    92ec:	65 72       	.word 0x7265
    92ee:	65 00       	.word 0x65
    92f0:	77 61       	.word 0x6177
    92f2:	74 65       	.word 0x6574
    92f4:	72 00       	.word 0x72
    92f6:	77 72       	.word 0x7277
    92f8:	69 74       	.word 0x7469
    92fa:	65 00       	.word 0x65
    92fc:	57 52       	.word 0x5257
    92fe:	49 54       	.word 0x5449
    9300:	45 47       	.word 0x4745
    9302:	59 51       	.word 0x5159
    9304:	57 56       	.word 0x5657
    9306:	4d 52       	.word 0x524d
    9308:	54 45       	.word 0x4554
    930a:	50 49       	.word 0x4950
    930c:	58 5a       	.word 0x5a58
    930e:	46 4d       	.word 0x4d46
    9310:	49 4a       	.word 0x4a49
    9312:	59 4a       	.word 0x4a59
    9314:	54 46       	.word 0x4654
    9316:	50 42       	.word 0x4250
    9318:	41 4d       	.word 0x4d41
    931a:	45 51       	.word 0x5145
    931c:	50 47       	.word 0x4750
    931e:	58 00       	.word 0x58
    9320:	53 54       	.word 0x5453
    9322:	49 4c       	.word 0x4c49
    9324:	4c 53       	.word 0x534c
    9326:	47 43       	.word 0x4347
    9328:	42 57       	.word 0x5742
    932a:	54 52       	.word 0x5254
    932c:	54 56       	.word 0x5654
    932e:	5a 53       	.word 0x535a
    9330:	4a 56       	.word 0x564a
    9332:	49 44       	.word 0x4449
    9334:	52 46       	.word 0x4652
    9336:	50 4c       	.word 0x4c50
    9338:	4a 4f       	.word 0x4f4a
    933a:	4b 55       	.word 0x554b
    933c:	53 49       	.word 0x4953
    933e:	4a 4c       	.word 0x4c4a
    9340:	41 46       	.word 0x4641
    9342:	5a 00       	.word 0x5a
    9344:	45 56       	.word 0x5645
    9346:	45 52       	.word 0x5245
    9348:	59 4b       	.word 0x4b59
    934a:	45 58       	.word 0x5845
    934c:	4d 59       	.word 0x594d
    934e:	5a 4d       	.word 0x4d5a
    9350:	53 43       	.word 0x4353
    9352:	54 56       	.word 0x5654
    9354:	50 41       	.word 0x4150
    9356:	47 4e       	.word 0x4e47
    9358:	44 45       	.word 0x4544
    935a:	46 44       	.word 0x4446
    935c:	48 45       	.word 0x4548
    935e:	52 51       	.word 0x5152
    9360:	4a 48       	.word 0x484a
    9362:	4d 57       	.word 0x574d
    9364:	4e 59       	.word 0x594e
    9366:	58 00       	.word 0x58
    9368:	57 4f       	.word 0x4f57
    936a:	52 4c       	.word 0x4c52
    936c:	44 47       	.word 0x4744
    936e:	57 51       	.word 0x5157
    9370:	41 50       	.word 0x5041
    9372:	4e 57       	.word 0x574e
    9374:	45 4f       	.word 0x4f45
    9376:	4b 4d       	.word 0x4d4b
    9378:	51 51       	.word 0x5151
    937a:	57 52       	.word 0x5257
    937c:	5a 59       	.word 0x595a
    937e:	4a 50       	.word 0x504a
    9380:	44 4c       	.word 0x4c44
    9382:	4a 42       	.word 0x424a
    9384:	49 4e       	.word 0x4e49
    9386:	53 49       	.word 0x4953
    9388:	43 44       	.word 0x4443
    938a:	48 00       	.word 0x48
    938c:	57 52       	.word 0x5257
    938e:	49 54       	.word 0x5449
    9390:	45 47       	.word 0x4745
    9392:	57 4a       	.word 0x4a57
    9394:	58 44       	.word 0x4458
    9396:	4c 5a       	.word 0x5a4c
    9398:	50 4c       	.word 0x4c50
    939a:	58 49       	.word 0x4958
    939c:	52 4a       	.word 0x4a52
    939e:	54 43       	.word 0x4354
    93a0:	49 46       	.word 0x4649
    93a2:	53 54       	.word 0x5453
    93a4:	46 48       	.word 0x4846
    93a6:	42 49       	.word 0x4942
    93a8:	4f 53       	.word 0x534f
    93aa:	51 58       	.word 0x5851
    93ac:	55 4a       	.word 0x4a55
    93ae:	45 00       	.word 0x45
    93b0:	46 4f       	.word 0x4f46
    93b2:	55 4e       	.word 0x4e55
    93b4:	44 5a       	.word 0x5a44
    93b6:	49 4a       	.word 0x4a49
    93b8:	43 45       	.word 0x4543
    93ba:	46 4f       	.word 0x4f46
    93bc:	47 4d       	.word 0x4d47
    93be:	51 59       	.word 0x5951
    93c0:	4e 51       	.word 0x514e
    93c2:	42 56       	.word 0x5642
    93c4:	45 55       	.word 0x5545
    93c6:	4a 5a       	.word 0x5a4a
    93c8:	4e 4f       	.word 0x4f4e
    93ca:	55 57       	.word 0x5755
    93cc:	4a 51       	.word 0x514a
    93ce:	47 4c       	.word 0x4c47
    93d0:	49 44       	.word 0x4449
    93d2:	50 00       	.word 0x50
    93d4:	43 4f       	.word 0x4f43
    93d6:	55 4c       	.word 0x4c55
    93d8:	44 44       	.word 0x4444
    93da:	58 43       	.word 0x4358
    93dc:	55 4a       	.word 0x4a55
    93de:	54 4f       	.word 0x4f54
    93e0:	5a 55       	.word 0x555a
    93e2:	50 51       	.word 0x5150
    93e4:	59 4d       	.word 0x4d59
    93e6:	4b 58       	.word 0x584b
    93e8:	56 55       	.word 0x5556
    93ea:	53 4c       	.word 0x4c53
    93ec:	4b 52       	.word 0x524b
    93ee:	51 56       	.word 0x5651
    93f0:	57 4d       	.word 0x4d57
    93f2:	48 44       	.word 0x4448
    93f4:	56 51       	.word 0x5156
    93f6:	4a 00       	.word 0x4a
    93f8:	54 48       	.word 0x4854
    93fa:	45 53       	.word 0x5345
    93fc:	45 58       	.word 0x5845
    93fe:	54 4b       	.word 0x4b54
    9400:	44 4c       	.word 0x4c44
    9402:	56 47       	.word 0x4756
    9404:	48 49       	.word 0x4948
    9406:	54 50       	.word 0x5054
    9408:	53 45       	.word 0x4553
    940a:	51 49       	.word 0x4951
    940c:	56 54       	.word 0x5456
    940e:	4d 45       	.word 0x454d
    9410:	48 44       	.word 0x4448
    9412:	4f 4e       	.word 0x4e4f
    9414:	53 56       	.word 0x5653
    9416:	59 4d       	.word 0x4d59
    9418:	45 46       	.word 0x4645
    941a:	42 00       	.word 0x42
    941c:	4f 54       	.word 0x544f
    941e:	48 45       	.word 0x4548
    9420:	52 52       	.word 0x5252
    9422:	49 42       	.word 0x4249
    9424:	4f 43       	.word 0x434f
    9426:	45 54       	.word 0x5445
    9428:	4e 52       	.word 0x524e
    942a:	4b 4a       	.word 0x4a4b
    942c:	42 4e       	.word 0x4e42
    942e:	4a 55       	.word 0x554a
    9430:	48 47       	.word 0x4748
    9432:	45 47       	.word 0x4745
    9434:	4a 56       	.word 0x564a
    9436:	57 4b       	.word 0x4b57
    9438:	45 4b       	.word 0x4b45
    943a:	44 56       	.word 0x5644
    943c:	52 50       	.word 0x5052
    943e:	4d 00       	.word 0x4d
    9440:	57 4f       	.word 0x4f57
    9442:	52 4c       	.word 0x4c52
    9444:	44 54       	.word 0x5444
    9446:	58 53       	.word 0x5358
    9448:	55 52       	.word 0x5255
    944a:	57 46       	.word 0x4657
    944c:	57 4f       	.word 0x4f57
    944e:	51 59       	.word 0x5951
    9450:	52 56       	.word 0x5652
    9452:	52 51       	.word 0x5152
    9454:	47 4e       	.word 0x4e47
    9456:	4a 59       	.word 0x594a
    9458:	42 4b       	.word 0x4b42
    945a:	4c 51       	.word 0x514c
    945c:	4f 48       	.word 0x484f
    945e:	58 44       	.word 0x4458
    9460:	45 49       	.word 0x4945
    9462:	51 00       	.word 0x51
    9464:	53 4d       	.word 0x4d53
    9466:	41 4c       	.word 0x4c41
    9468:	4c 49       	.word 0x494c
    946a:	56 52       	.word 0x5256
    946c:	58 53       	.word 0x5358
    946e:	55 58       	.word 0x5855
    9470:	44 43       	.word 0x4344
    9472:	4d 52       	.word 0x524d
    9474:	59 41       	.word 0x4159
    9476:	51 54       	.word 0x5451
    9478:	46 50       	.word 0x5046
    947a:	4a 56       	.word 0x564a
    947c:	50 48       	.word 0x4850
    947e:	46 4c       	.word 0x4c46
    9480:	58 51       	.word 0x5158
    9482:	4c 52       	.word 0x524c
    9484:	4f 42       	.word 0x424f
    9486:	48 00       	.word 0x48
    9488:	54 48       	.word 0x4854
    948a:	45 53       	.word 0x5345
    948c:	45 4b       	.word 0x4b45
    948e:	50 54       	.word 0x5450
    9490:	52 4c       	.word 0x4c52
    9492:	42 48       	.word 0x4842
    9494:	4b 56       	.word 0x564b
    9496:	55 4e       	.word 0x4e55
    9498:	44 51       	.word 0x5144
    949a:	47 4c       	.word 0x4c47
    949c:	45 4a       	.word 0x4a45
    949e:	53 58       	.word 0x5853
    94a0:	41 4d       	.word 0x4d41
    94a2:	53 56       	.word 0x5653
    94a4:	44 57       	.word 0x5744
    94a6:	41 4f       	.word 0x4f41
    94a8:	45 46       	.word 0x4645
    94aa:	4e 00       	.word 0x4e
    94ac:	57 52       	.word 0x5257
    94ae:	49 54       	.word 0x5449
    94b0:	45 56       	.word 0x5645
    94b2:	57 49       	.word 0x4957
    94b4:	58 59       	.word 0x5958
    94b6:	48 57       	.word 0x5748
    94b8:	4b 58       	.word 0x584b
    94ba:	42 47       	.word 0x4742
    94bc:	52 46       	.word 0x4652
    94be:	45 4c       	.word 0x4c45
    94c0:	59 49       	.word 0x4959
    94c2:	50 55       	.word 0x5550
    94c4:	41 44       	.word 0x4441
    94c6:	54 52       	.word 0x5254
    94c8:	4e 4c       	.word 0x4c4e
    94ca:	56 45       	.word 0x4556
    94cc:	41 51       	.word 0x5141
    94ce:	55 00       	.word 0x55
    94d0:	47 52       	.word 0x5247
    94d2:	45 41       	.word 0x4145
    94d4:	54 4c       	.word 0x4c54
    94d6:	4f 47       	.word 0x474f
    94d8:	4d 58       	.word 0x584d
    94da:	56 59       	.word 0x5956
    94dc:	43 4e       	.word 0x4e43
    94de:	52 57       	.word 0x5752
    94e0:	4b 48       	.word 0x484b
    94e2:	56 50       	.word 0x5056
    94e4:	45 42       	.word 0x4245
    94e6:	49 5a       	.word 0x5a49
    94e8:	41 50       	.word 0x5041
    94ea:	57 56       	.word 0x5657
    94ec:	46 57       	.word 0x5746
    94ee:	48 46       	.word 0x4648
    94f0:	53 54       	.word 0x5453
    94f2:	51 00       	.word 0x51
    94f4:	4f 54       	.word 0x544f
    94f6:	48 45       	.word 0x4548
    94f8:	52 46       	.word 0x4652
    94fa:	47 49       	.word 0x4947
    94fc:	4f 44       	.word 0x444f
    94fe:	48 42       	.word 0x4248
    9500:	54 50       	.word 0x5054
    9502:	58 53       	.word 0x5358
    9504:	49 43       	.word 0x4349
    9506:	47 45       	.word 0x4547
    9508:	4c 50       	.word 0x504c
    950a:	48 41       	.word 0x4148
    950c:	44 45       	.word 0x4544
    950e:	4a 49       	.word 0x494a
    9510:	5a 4e       	.word 0x4e5a
    9512:	41 50       	.word 0x5041
    9514:	4b 49       	.word 0x494b
    9516:	52 00       	.word 0x52

00009518 <.LC0>:
    9518:	57 4f       	.word 0x4f57
    951a:	52 4c       	.word 0x4c52
    951c:	44 47       	.word 0x4744
    951e:	57 51       	.word 0x5157
    9520:	41 50       	.word 0x5041
    9522:	4e 57       	.word 0x574e
    9524:	45 4f       	.word 0x4f45
    9526:	4b 4d       	.word 0x4d4b
    9528:	51 51       	.word 0x5151
    952a:	57 52       	.word 0x5257
    952c:	5a 59       	.word 0x595a
    952e:	4a 50       	.word 0x504a
    9530:	44 4c       	.word 0x4c44
    9532:	4a 42       	.word 0x424a
    9534:	49 4e       	.word 0x4e49
    9536:	53 49       	.word 0x4953
    9538:	43 44       	.word 0x4443
    953a:	48 00       	.word 0x48

0000953c <.LC3>:
    953c:	00 20       	.word 0x2000

0000953d <.LC1>:
	...

00009544 <.LC2>:
    9544:	20 6f       	.word 0x6f20
    9546:	20 20       	.word 0x2020
    9548:	6f 20       	.word 0x206f
    954a:	20 6f       	.word 0x6f20
    954c:	20 20       	.word 0x2020
    954e:	6f 20       	.word 0x206f
    9550:	20 6f       	.word 0x6f20
    9552:	20 00       	.word 0x20
    9554:	00 20       	.word 0x2000

00009555 <.LC4>:
    9555:	00 00       	.word 0
    9557:	00 00       	.word 0
    9559:	00 00       	.word 0
    955b:	00 00       	.word 0
    955d:	00 00       	.word 0
    955f:	00 00       	.word 0
    9561:	00 00       	.word 0
    9563:	00 00       	.word 0
	...

00009566 <.LC0>:
    9566:	20 20       	.word 0x2020
    9568:	20 20       	.word 0x2020
    956a:	20 20       	.word 0x2020
    956c:	20 20       	.word 0x2020
    956e:	20 20       	.word 0x2020
    9570:	20 20       	.word 0x2020
    9572:	20 20       	.word 0x2020
    9574:	20 20       	.word 0x2020
    9576:	20 20       	.word 0x2020
    9578:	20 20       	.word 0x2020
    957a:	20 20       	.word 0x2020
    957c:	20 20       	.word 0x2020
    957e:	20 20       	.word 0x2020
    9580:	20 20       	.word 0x2020
    9582:	20 20       	.word 0x2020
    9584:	20 20       	.word 0x2020
    9586:	20 20       	.word 0x2020
    9588:	20 20       	.word 0x2020
    958a:	20 20       	.word 0x2020
    958c:	20 20       	.word 0x2020
    958e:	20 20       	.word 0x2020
    9590:	20 20       	.word 0x2020
    9592:	20 20       	.word 0x2020
    9594:	20 20       	.word 0x2020
    9596:	20 20       	.word 0x2020
    9598:	20 20       	.word 0x2020
    959a:	20 20       	.word 0x2020
    959c:	20 20       	.word 0x2020
    959e:	00 20       	.word 0x2000

0000959f <.LC1>:
    959f:	00 00       	.word 0
    95a1:	00 00       	.word 0
    95a3:	00 00       	.word 0
    95a5:	00 00       	.word 0
    95a7:	00 00       	.word 0
    95a9:	00 00       	.word 0
    95ab:	00 00       	.word 0
    95ad:	00 00       	.word 0
	...

000095b0 <.LC2>:
    95b0:	7a 79       	.word 0x797a
    95b2:	78 77       	.word 0x7778
    95b4:	76 75       	.word 0x7576
    95b6:	74 73       	.word 0x7374
    95b8:	72 71       	.word 0x7172
    95ba:	70 6f       	.word 0x6f70
    95bc:	6e 6d       	.word 0x6d6e
    95be:	6c 6b       	.word 0x6b6c
    95c0:	6a 69       	.word 0x696a
    95c2:	68 67       	.word 0x6768
    95c4:	66 65       	.word 0x6566
    95c6:	64 63       	.word 0x6364
    95c8:	62 61       	.word 0x6162
    95ca:	39 38       	.word 0x3839
    95cc:	37 36       	.word 0x3637
    95ce:	35 34       	.word 0x3435
    95d0:	33 32       	.word 0x3233
    95d2:	31 30       	.word 0x3031
    95d4:	31 32       	.word 0x3231
    95d6:	33 34       	.word 0x3433
    95d8:	35 36       	.word 0x3635
    95da:	37 38       	.word 0x3837
    95dc:	39 61       	.word 0x6139
    95de:	62 63       	.word 0x6362
    95e0:	64 65       	.word 0x6564
    95e2:	66 67       	.word 0x6766
    95e4:	68 69       	.word 0x6968
    95e6:	6a 6b       	.word 0x6b6a
    95e8:	6c 6d       	.word 0x6d6c
    95ea:	6e 6f       	.word 0x6f6e
    95ec:	70 71       	.word 0x7170
    95ee:	72 73       	.word 0x7372
    95f0:	74 75       	.word 0x7574
    95f2:	76 77       	.word 0x7776
    95f4:	78 79       	.word 0x7978
    95f6:	7a 00       	.word 0x7a
Disassembly of section .text:

000015f8 <___lcd_i2c_write>:
#define DR_READ 0x0B

_LCD lcd[3];

void __lcd_i2c_write(_LCD *self, uint8_t ch) {
    15f8:	04 00 fa    	lnk       #0x4
    15fa:	00 0f 78    	mov.w     w0, [w14]
    15fc:	21 47 98    	mov.b     w1, [w14+2]
    i2c_start();
    15fe:	c8 04 07    	rcall     0x1f90 <_i2c_start> <.LFB2> <.LFE1>
    send_i2c_byte(self->addr_write);
    1600:	1e 00 78    	mov.w     [w14], w0
    1602:	10 40 78    	mov.b     [w0], w0
    1604:	00 80 fb    	ze        w0, w0
    1606:	13 05 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ch);
    1608:	2e 40 90    	mov.b     [w14+2], w0
    160a:	00 80 fb    	ze        w0, w0
    160c:	10 05 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
    reset_i2c_bus();
    160e:	f4 04 07    	rcall     0x1ff8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1610:	00 80 fa    	ulnk      
    1612:	00 00 06    	return    

00001614 <___lcd_enablePulse>:

// Pulse enable pin high and then low to shift in 4 bits of data
void __lcd_enablePulse(_LCD *self) {
    1614:	02 00 fa    	lnk       #0x2
    1616:	00 0f 78    	mov.w     w0, [w14]
    self->io_write_val ^= ENABLE_TOGGLE;
    1618:	1e 00 78    	mov.w     [w14], w0
    161a:	20 40 90    	mov.b     [w0+2], w0
    161c:	80 40 78    	mov.b     w0, w1
    161e:	01 24 a2    	btg.b     w1, #0x2
    1620:	1e 00 78    	mov.w     [w14], w0
    1622:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1624:	1e 00 78    	mov.w     [w14], w0
    1626:	20 40 90    	mov.b     [w0+2], w0
    1628:	80 40 78    	mov.b     w0, w1
    162a:	1e 00 78    	mov.w     [w14], w0
    162c:	e5 ff 07    	rcall     0x15f8 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    delay_by_nop(100);
    162e:	40 06 20    	mov.w     #0x64, w0
    1630:	01 00 20    	mov.w     #0x0, w1
    1632:	8e 04 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    self->io_write_val ^= ENABLE_TOGGLE;
    1634:	1e 00 78    	mov.w     [w14], w0
    1636:	20 40 90    	mov.b     [w0+2], w0
    1638:	80 40 78    	mov.b     w0, w1
    163a:	01 24 a2    	btg.b     w1, #0x2
    163c:	1e 00 78    	mov.w     [w14], w0
    163e:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1640:	1e 00 78    	mov.w     [w14], w0
    1642:	20 40 90    	mov.b     [w0+2], w0
    1644:	80 40 78    	mov.b     w0, w1
    1646:	1e 00 78    	mov.w     [w14], w0
    1648:	d7 ff 07    	rcall     0x15f8 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    // delay_by_nop(1000);
}
    164a:	00 80 fa    	ulnk      
    164c:	00 00 06    	return    

0000164e <___lcd_send>:

/* Send 8 bits of data as one 4-bit nibble, shifting in, second 4-bit nibble, and
shifting in */
void __lcd_send(_LCD *self, uint8_t value, uint8_t command) {
    164e:	06 00 fa    	lnk       #0x6
    1650:	10 07 98    	mov.w     w0, [w14+2]
    1652:	41 47 98    	mov.b     w1, [w14+4]
    1654:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t MS = value & 0x78;
    1656:	4e 40 90    	mov.b     [w14+4], w0
    1658:	81 c7 b3    	mov.b     #0x78, w1
    165a:	01 4f 60    	and.b     w0, w1, [w14]
    uint8_t LS = value << 4;
    165c:	ce 40 90    	mov.b     [w14+4], w1
    165e:	40 00 20    	mov.w     #0x4, w0
    1660:	00 08 dd    	sl.w      w1, w0, w0
    1662:	10 47 98    	mov.b     w0, [w14+1]
    self->io_write_val = command | MS;
    1664:	5e 40 90    	mov.b     [w14+5], w0
    1666:	9e 40 70    	ior.b     w0, [w14], w1
    1668:	1e 00 90    	mov.w     [w14+2], w0
    166a:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    166c:	1e 00 90    	mov.w     [w14+2], w0
    166e:	20 40 90    	mov.b     [w0+2], w0
    1670:	80 40 78    	mov.b     w0, w1
    1672:	1e 00 90    	mov.w     [w14+2], w0
    1674:	c1 ff 07    	rcall     0x15f8 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    1676:	1e 00 90    	mov.w     [w14+2], w0
    1678:	cd ff 07    	rcall     0x1614 <___lcd_enablePulse> <.LFB1> <.LFE0>
    self->io_write_val= command | LS;
    167a:	de 40 90    	mov.b     [w14+5], w1
    167c:	1e 40 90    	mov.b     [w14+1], w0
    167e:	80 c0 70    	ior.b     w1, w0, w1
    1680:	1e 00 90    	mov.w     [w14+2], w0
    1682:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1684:	1e 00 90    	mov.w     [w14+2], w0
    1686:	20 40 90    	mov.b     [w0+2], w0
    1688:	80 40 78    	mov.b     w0, w1
    168a:	1e 00 90    	mov.w     [w14+2], w0
    168c:	b5 ff 07    	rcall     0x15f8 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    168e:	1e 00 90    	mov.w     [w14+2], w0
    1690:	c1 ff 07    	rcall     0x1614 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    1692:	00 80 fa    	ulnk      
    1694:	00 00 06    	return    

00001696 <___lcd_send8>:

void __lcd_send8(_LCD *self, uint8_t value, uint8_t command) {
    1696:	04 00 fa    	lnk       #0x4
    1698:	00 0f 78    	mov.w     w0, [w14]
    169a:	21 47 98    	mov.b     w1, [w14+2]
    169c:	32 47 98    	mov.b     w2, [w14+3]
    value = value << 4;
    169e:	ae 40 90    	mov.b     [w14+2], w1
    16a0:	40 00 20    	mov.w     #0x4, w0
    16a2:	00 08 dd    	sl.w      w1, w0, w0
    16a4:	20 47 98    	mov.b     w0, [w14+2]
    self->io_write_val = command | value;
    16a6:	be 40 90    	mov.b     [w14+3], w1
    16a8:	2e 40 90    	mov.b     [w14+2], w0
    16aa:	80 c0 70    	ior.b     w1, w0, w1
    16ac:	1e 00 78    	mov.w     [w14], w0
    16ae:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    16b0:	1e 00 78    	mov.w     [w14], w0
    16b2:	20 40 90    	mov.b     [w0+2], w0
    16b4:	80 40 78    	mov.b     w0, w1
    16b6:	1e 00 78    	mov.w     [w14], w0
    16b8:	9f ff 07    	rcall     0x15f8 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>
    __lcd_enablePulse(self);
    16ba:	1e 00 78    	mov.w     [w14], w0
    16bc:	ab ff 07    	rcall     0x1614 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    16be:	00 80 fa    	ulnk      
    16c0:	00 00 06    	return    

000016c2 <_init_lcd>:

/* Some code from last year's Spaceteam project that sets up three LCD screens on
 one bus with corresponding IO extender types and hard-wired addresses */
void init_lcd(uint8_t initiator) {
    16c2:	02 00 fa    	lnk       #0x2
    16c4:	00 4f 78    	mov.b     w0, [w14]

    i2c_init(1e3);
    16c6:	80 3e 20    	mov.w     #0x3e8, w0
    16c8:	56 04 07    	rcall     0x1f76 <_i2c_init> <.LFB1> <.LFE0>

    switch (initiator) {
    16ca:	1e 80 fb    	ze        [w14], w0
    16cc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    16ce:	17 00 32    	bra       Z, 0x16fe <.L8>
    16d0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    16d2:	03 00 3c    	bra       GT, 0x16da <.L11>
    16d4:	00 00 e0    	cp0.w     w0
    16d6:	06 00 32    	bra       Z, 0x16e4 <.L7>
    16d8:	39 00 37    	bra       0x174c <.L5>

000016da <.L11>:
    16da:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    16dc:	1d 00 32    	bra       Z, 0x1718 <.L9>
    16de:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    16e0:	28 00 32    	bra       Z, 0x1732 <.L10>
    16e2:	34 00 37    	bra       0x174c <.L5>

000016e4 <.L7>:
        case 0: // Central
            lcd_init(&lcd[0], 0x05,'A');
    16e4:	12 c4 b3    	mov.b     #0x41, w2
    16e6:	51 c0 b3    	mov.b     #0x5, w1
    16e8:	a0 82 20    	mov.w     #0x82a, w0
    16ea:	32 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x07,'A');
    16ec:	12 c4 b3    	mov.b     #0x41, w2
    16ee:	71 c0 b3    	mov.b     #0x7, w1
    16f0:	f0 82 20    	mov.w     #0x82f, w0
    16f2:	2e 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'T');
    16f4:	42 c5 b3    	mov.b     #0x54, w2
    16f6:	61 c0 b3    	mov.b     #0x6, w1
    16f8:	40 83 20    	mov.w     #0x834, w0
    16fa:	2a 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            break;
    16fc:	27 00 37    	bra       0x174c <.L5>

000016fe <.L8>:
        case 1:
            lcd_init(&lcd[0], 0x07,'A');
    16fe:	12 c4 b3    	mov.b     #0x41, w2
    1700:	71 c0 b3    	mov.b     #0x7, w1
    1702:	a0 82 20    	mov.w     #0x82a, w0
    1704:	25 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'A');
    1706:	12 c4 b3    	mov.b     #0x41, w2
    1708:	61 c0 b3    	mov.b     #0x6, w1
    170a:	40 83 20    	mov.w     #0x834, w0
    170c:	21 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x05,'A');
    170e:	12 c4 b3    	mov.b     #0x41, w2
    1710:	51 c0 b3    	mov.b     #0x5, w1
    1712:	f0 82 20    	mov.w     #0x82f, w0
    1714:	1d 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            break;
    1716:	1a 00 37    	bra       0x174c <.L5>

00001718 <.L9>:
        case 2:
            lcd_init(&lcd[0], 0x07,'T');
    1718:	42 c5 b3    	mov.b     #0x54, w2
    171a:	71 c0 b3    	mov.b     #0x7, w1
    171c:	a0 82 20    	mov.w     #0x82a, w0
    171e:	18 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    1720:	12 c4 b3    	mov.b     #0x41, w2
    1722:	61 c0 b3    	mov.b     #0x6, w1
    1724:	f0 82 20    	mov.w     #0x82f, w0
    1726:	14 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    1728:	12 c4 b3    	mov.b     #0x41, w2
    172a:	51 c0 b3    	mov.b     #0x5, w1
    172c:	40 83 20    	mov.w     #0x834, w0
    172e:	10 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            break;
    1730:	0d 00 37    	bra       0x174c <.L5>

00001732 <.L10>:
        case 3:
            lcd_init(&lcd[0], 0x07,'A');
    1732:	12 c4 b3    	mov.b     #0x41, w2
    1734:	71 c0 b3    	mov.b     #0x7, w1
    1736:	a0 82 20    	mov.w     #0x82a, w0
    1738:	0b 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    173a:	12 c4 b3    	mov.b     #0x41, w2
    173c:	61 c0 b3    	mov.b     #0x6, w1
    173e:	f0 82 20    	mov.w     #0x82f, w0
    1740:	07 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    1742:	12 c4 b3    	mov.b     #0x41, w2
    1744:	51 c0 b3    	mov.b     #0x5, w1
    1746:	40 83 20    	mov.w     #0x834, w0
    1748:	03 00 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
            break;
    174a:	00 00 00    	nop       

0000174c <.L5>:
    }
}
    174c:	00 80 fa    	ulnk      
    174e:	00 00 06    	return    

00001750 <_lcd_init>:

// Initializes the LCD screen hardware as per pg. 46 of the datasheet
void lcd_init(_LCD *self, uint8_t addr, char vendor) {
    1750:	04 00 fa    	lnk       #0x4
    1752:	00 0f 78    	mov.w     w0, [w14]
    1754:	21 47 98    	mov.b     w1, [w14+2]
    1756:	32 47 98    	mov.b     w2, [w14+3]
    switch(vendor){
    1758:	3e 40 90    	mov.b     [w14+3], w0
    175a:	00 00 fb    	se        w0, w0
    175c:	11 04 20    	mov.w     #0x41, w1
    175e:	81 0f 50    	sub.w     w0, w1, [w15]
    1760:	10 00 32    	bra       Z, 0x1782 <.L14>
    1762:	41 05 20    	mov.w     #0x54, w1
    1764:	81 0f 50    	sub.w     w0, w1, [w15]
    1766:	1a 00 3a    	bra       NZ, 0x179c <.L13>
        case 'T':// 0x40 == vendor prefix for PCF8574T
            self->addr_write = 0x40 + (addr << 1);
    1768:	2e 40 90    	mov.b     [w14+2], w0
    176a:	00 40 40    	add.b     w0, w0, w0
    176c:	02 c4 b3    	mov.b     #0x40, w2
    176e:	82 40 40    	add.b     w0, w2, w1
    1770:	1e 00 78    	mov.w     [w14], w0
    1772:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x40 + (addr << 1)+1;
    1774:	2e 40 90    	mov.b     [w14+2], w0
    1776:	00 40 40    	add.b     w0, w0, w0
    1778:	12 c4 b3    	mov.b     #0x41, w2
    177a:	82 40 40    	add.b     w0, w2, w1
    177c:	1e 00 78    	mov.w     [w14], w0
    177e:	11 40 98    	mov.b     w1, [w0+1]
            break;
    1780:	0d 00 37    	bra       0x179c <.L13>

00001782 <.L14>:
        case 'A':// 0x70 == vendor prefix PCF8574AT
            self->addr_write = 0x70 + (addr << 1);
    1782:	2e 40 90    	mov.b     [w14+2], w0
    1784:	00 40 40    	add.b     w0, w0, w0
    1786:	02 c7 b3    	mov.b     #0x70, w2
    1788:	82 40 40    	add.b     w0, w2, w1
    178a:	1e 00 78    	mov.w     [w14], w0
    178c:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x70 + (addr << 1)+1;
    178e:	2e 40 90    	mov.b     [w14+2], w0
    1790:	00 40 40    	add.b     w0, w0, w0
    1792:	12 c7 b3    	mov.b     #0x71, w2
    1794:	82 40 40    	add.b     w0, w2, w1
    1796:	1e 00 78    	mov.w     [w14], w0
    1798:	11 40 98    	mov.b     w1, [w0+1]
            break;
    179a:	00 00 00    	nop       

0000179c <.L13>:
    }

    self->display_control = 0x00;
    179c:	1e 00 78    	mov.w     [w14], w0
    179e:	80 40 eb    	clr.b     w1
    17a0:	31 40 98    	mov.b     w1, [w0+3]
    self->display_mode = 0x00;
    17a2:	1e 00 78    	mov.w     [w14], w0
    17a4:	80 40 eb    	clr.b     w1
    17a6:	41 40 98    	mov.b     w1, [w0+4]

    self->io_write_val = 0x00;
    17a8:	1e 00 78    	mov.w     [w14], w0
    17aa:	80 40 eb    	clr.b     w1
    17ac:	21 40 98    	mov.b     w1, [w0+2]

    __lcd_i2c_write(self, 0x00);
    17ae:	80 40 eb    	clr.b     w1
    17b0:	1e 00 78    	mov.w     [w14], w0
    17b2:	22 ff 07    	rcall     0x15f8 <___lcd_i2c_write> <.L0> <.LFB0> <.Ltext0>

    delay_by_nop(15000);
    17b4:	80 a9 23    	mov.w     #0x3a98, w0
    17b6:	01 00 20    	mov.w     #0x0, w1
    17b8:	cb 03 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    // Some bullshit according to pg 46
    __lcd_send8(self, 0x03, INTERNAL_WRITE);
    17ba:	82 c0 b3    	mov.b     #0x8, w2
    17bc:	31 c0 b3    	mov.b     #0x3, w1
    17be:	1e 00 78    	mov.w     [w14], w0
    17c0:	6a ff 07    	rcall     0x1696 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    17c2:	80 38 21    	mov.w     #0x1388, w0
    17c4:	01 00 20    	mov.w     #0x0, w1
    17c6:	c4 03 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    17c8:	82 c0 b3    	mov.b     #0x8, w2
    17ca:	31 c0 b3    	mov.b     #0x3, w1
    17cc:	1e 00 78    	mov.w     [w14], w0
    17ce:	63 ff 07    	rcall     0x1696 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    17d0:	80 38 21    	mov.w     #0x1388, w0
    17d2:	01 00 20    	mov.w     #0x0, w1
    17d4:	bd 03 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    17d6:	82 c0 b3    	mov.b     #0x8, w2
    17d8:	31 c0 b3    	mov.b     #0x3, w1
    17da:	1e 00 78    	mov.w     [w14], w0
    17dc:	5c ff 07    	rcall     0x1696 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    17de:	80 38 21    	mov.w     #0x1388, w0
    17e0:	01 00 20    	mov.w     #0x0, w1
    17e2:	b6 03 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    // Put it in 4 bit mode
    __lcd_send8(self, 0x02, INTERNAL_WRITE);//0b00110000
    17e4:	82 c0 b3    	mov.b     #0x8, w2
    17e6:	21 c0 b3    	mov.b     #0x2, w1
    17e8:	1e 00 78    	mov.w     [w14], w0
    17ea:	55 ff 07    	rcall     0x1696 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    17ec:	80 38 21    	mov.w     #0x1388, w0
    17ee:	01 00 20    	mov.w     #0x0, w1
    17f0:	af 03 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x28, INTERNAL_WRITE); // Set rows and direction
    17f2:	82 c0 b3    	mov.b     #0x8, w2
    17f4:	81 c2 b3    	mov.b     #0x28, w1
    17f6:	1e 00 78    	mov.w     [w14], w0
    17f8:	2a ff 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    17fa:	20 03 20    	mov.w     #0x32, w0
    17fc:	01 00 20    	mov.w     #0x0, w1
    17fe:	a8 03 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x80, INTERNAL_WRITE); // Display off, cursor off
    1800:	82 c0 b3    	mov.b     #0x8, w2
    1802:	01 c8 b3    	mov.b     #0x80, w1
    1804:	1e 00 78    	mov.w     [w14], w0
    1806:	23 ff 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    1808:	20 03 20    	mov.w     #0x32, w0
    180a:	01 00 20    	mov.w     #0x0, w1
    180c:	a1 03 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x01, INTERNAL_WRITE); // Go to home position
    180e:	82 c0 b3    	mov.b     #0x8, w2
    1810:	11 c0 b3    	mov.b     #0x1, w1
    1812:	1e 00 78    	mov.w     [w14], w0
    1814:	1c ff 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    1816:	00 7d 20    	mov.w     #0x7d0, w0
    1818:	01 00 20    	mov.w     #0x0, w1
    181a:	9a 03 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x06, INTERNAL_WRITE); // Set curson direction
    181c:	82 c0 b3    	mov.b     #0x8, w2
    181e:	61 c0 b3    	mov.b     #0x6, w1
    1820:	1e 00 78    	mov.w     [w14], w0
    1822:	15 ff 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(5000);
    1824:	80 38 21    	mov.w     #0x1388, w0
    1826:	01 00 20    	mov.w     #0x0, w1
    1828:	93 03 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x0C, INTERNAL_WRITE); // Display on, cursor off
    182a:	82 c0 b3    	mov.b     #0x8, w2
    182c:	c1 c0 b3    	mov.b     #0xc, w1
    182e:	1e 00 78    	mov.w     [w14], w0
    1830:	0e ff 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
}
    1832:	00 80 fa    	ulnk      
    1834:	00 00 06    	return    

00001836 <_lcd_stop>:

// Stops lcd I2C transfer
void lcd_stop(_LCD *self) {
    1836:	02 00 fa    	lnk       #0x2
    1838:	00 0f 78    	mov.w     w0, [w14]
    reset_i2c_bus();
    183a:	de 03 07    	rcall     0x1ff8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    183c:	00 80 fa    	ulnk      
    183e:	00 00 06    	return    

00001840 <_lcd_display>:

// Sends show display command to LCD
void lcd_display(_LCD *self, uint8_t on) {
    1840:	04 00 fa    	lnk       #0x4
    1842:	00 0f 78    	mov.w     w0, [w14]
    1844:	21 47 98    	mov.b     w1, [w14+2]
    if (on) {
    1846:	2e 40 90    	mov.b     [w14+2], w0
    1848:	00 04 e0    	cp0.b     w0
    184a:	07 00 32    	bra       Z, 0x185a <.L18>
        self->display_control |= LCD_DISPLAYON;
    184c:	1e 00 78    	mov.w     [w14], w0
    184e:	30 40 90    	mov.b     [w0+3], w0
    1850:	80 40 78    	mov.b     w0, w1
    1852:	01 24 a0    	bset.b    w1, #0x2
    1854:	1e 00 78    	mov.w     [w14], w0
    1856:	31 40 98    	mov.b     w1, [w0+3]
    1858:	06 00 37    	bra       0x1866 <.L19>

0000185a <.L18>:
    } else {
        self->display_control &= ~LCD_DISPLAYON;
    185a:	1e 00 78    	mov.w     [w14], w0
    185c:	b0 40 90    	mov.b     [w0+3], w1
    185e:	b0 cf b3    	mov.b     #0xfb, w0
    1860:	80 c0 60    	and.b     w1, w0, w1
    1862:	1e 00 78    	mov.w     [w14], w0
    1864:	31 40 98    	mov.b     w1, [w0+3]

00001866 <.L19>:
    }
    __lcd_send(self, self->display_control | LCD_DISPLAYCONTROL, INTERNAL_WRITE);
    1866:	1e 00 78    	mov.w     [w14], w0
    1868:	30 40 90    	mov.b     [w0+3], w0
    186a:	00 34 a0    	bset.b    w0, #0x3
    186c:	82 c0 b3    	mov.b     #0x8, w2
    186e:	80 40 78    	mov.b     w0, w1
    1870:	1e 00 78    	mov.w     [w14], w0
    1872:	ed fe 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
}
    1874:	00 80 fa    	ulnk      
    1876:	00 00 06    	return    

00001878 <_lcd_clear>:

// Sends clear display command to LCD
void lcd_clear(_LCD *self) {
    1878:	02 00 fa    	lnk       #0x2
    187a:	00 0f 78    	mov.w     w0, [w14]
    __lcd_send(self, LCD_CLEARDISPLAY, INTERNAL_WRITE);
    187c:	82 c0 b3    	mov.b     #0x8, w2
    187e:	11 c0 b3    	mov.b     #0x1, w1
    1880:	1e 00 78    	mov.w     [w14], w0
    1882:	e5 fe 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    1884:	00 7d 20    	mov.w     #0x7d0, w0
    1886:	01 00 20    	mov.w     #0x0, w1
    1888:	63 03 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    188a:	00 80 fa    	ulnk      
    188c:	00 00 06    	return    

0000188e <_lcd_putc>:

// Sends single character to LCD display
void lcd_putc(_LCD *self, char c) {
    188e:	04 00 fa    	lnk       #0x4
    1890:	00 0f 78    	mov.w     w0, [w14]
    1892:	21 47 98    	mov.b     w1, [w14+2]
    __lcd_send(self, c, DR_WRITE);
    1894:	2e 40 90    	mov.b     [w14+2], w0
    1896:	92 c0 b3    	mov.b     #0x9, w2
    1898:	80 40 78    	mov.b     w0, w1
    189a:	1e 00 78    	mov.w     [w14], w0
    189c:	d8 fe 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
    // delay_by_nop(1000);
}
    189e:	00 80 fa    	ulnk      
    18a0:	00 00 06    	return    

000018a2 <_lcd_goto>:

// Sends commands to move LCD cursor to specified location
void lcd_goto(_LCD *self, uint8_t line, uint8_t col) { //x=col, y=row
    18a2:	06 00 fa    	lnk       #0x6
    18a4:	10 07 98    	mov.w     w0, [w14+2]
    18a6:	41 47 98    	mov.b     w1, [w14+4]
    18a8:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t address;
    switch(line) {
    18aa:	4e 40 90    	mov.b     [w14+4], w0
    18ac:	00 80 fb    	ze        w0, w0
    18ae:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    18b0:	03 00 32    	bra       Z, 0x18b8 <.L24>
    18b2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    18b4:	04 00 32    	bra       Z, 0x18be <.L25>
    18b6:	06 00 37    	bra       0x18c4 <.L27>

000018b8 <.L24>:
        case 1:
            address = 0x00;
    18b8:	00 40 eb    	clr.b     w0
    18ba:	00 4f 78    	mov.b     w0, [w14]
            break;
    18bc:	06 00 37    	bra       0x18ca <.L26>

000018be <.L25>:
        case 2:
            address = 0x40;
    18be:	00 c4 b3    	mov.b     #0x40, w0
    18c0:	00 4f 78    	mov.b     w0, [w14]
            break;
    18c2:	03 00 37    	bra       0x18ca <.L26>

000018c4 <.L27>:
        default:
            address = 0x00;
    18c4:	00 40 eb    	clr.b     w0
    18c6:	00 4f 78    	mov.b     w0, [w14]
            break;
    18c8:	00 00 00    	nop       

000018ca <.L26>:
    }

    address = address+col;
    18ca:	5e 40 90    	mov.b     [w14+5], w0
    18cc:	1e 4f 40    	add.b     w0, [w14], [w14]
    __lcd_send(self, LCD_SETDDRAMADDR | address, INTERNAL_WRITE);
    18ce:	1e 40 78    	mov.b     [w14], w0
    18d0:	00 74 a0    	bset.b    w0, #0x7
    18d2:	82 c0 b3    	mov.b     #0x8, w2
    18d4:	80 40 78    	mov.b     w0, w1
    18d6:	1e 00 90    	mov.w     [w14+2], w0
    18d8:	ba fe 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
}
    18da:	00 80 fa    	ulnk      
    18dc:	00 00 06    	return    

000018de <_lcd_cursor>:


void lcd_cursor(_LCD *self, uint8_t cur) {
    18de:	04 00 fa    	lnk       #0x4
    18e0:	00 0f 78    	mov.w     w0, [w14]
    18e2:	21 47 98    	mov.b     w1, [w14+2]
    switch(cur) {
    18e4:	2e 40 90    	mov.b     [w14+2], w0
    18e6:	00 80 fb    	ze        w0, w0
    18e8:	00 00 e0    	cp0.w     w0
    18ea:	03 00 32    	bra       Z, 0x18f2 <.L30>
    18ec:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    18ee:	06 00 32    	bra       Z, 0x18fc <.L31>
        case 0:
            __lcd_send(self, 0x0C, INTERNAL_WRITE);
            break;
        case 1:
            __lcd_send(self, 0x0E, INTERNAL_WRITE);
            break;
        default:
            break;
    18f0:	0a 00 37    	bra       0x1906 <.L28>

000018f2 <.L30>:
    18f2:	82 c0 b3    	mov.b     #0x8, w2
    18f4:	c1 c0 b3    	mov.b     #0xc, w1
    18f6:	1e 00 78    	mov.w     [w14], w0
    18f8:	aa fe 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
    18fa:	05 00 37    	bra       0x1906 <.L28>

000018fc <.L31>:
    18fc:	82 c0 b3    	mov.b     #0x8, w2
    18fe:	e1 c0 b3    	mov.b     #0xe, w1
    1900:	1e 00 78    	mov.w     [w14], w0
    1902:	a5 fe 07    	rcall     0x164e <___lcd_send> <.LFB2> <.LFE1>
    1904:	00 00 00    	nop       

00001906 <.L28>:
    }
}
    1906:	00 80 fa    	ulnk      
    1908:	00 00 06    	return    

0000190a <_lcd_print1>:

void lcd_print1(_LCD *self, char *str) {
    190a:	04 00 fa    	lnk       #0x4
    190c:	00 0f 78    	mov.w     w0, [w14]
    190e:	11 07 98    	mov.w     w1, [w14+2]
    lcd_clear(self);
    1910:	1e 00 78    	mov.w     [w14], w0
    1912:	b2 ff 07    	rcall     0x1878 <_lcd_clear> <.LFB8> <.LFE7>
    while (*str) {
    1914:	08 00 37    	bra       0x1926 <.L34>

00001916 <.L35>:
        lcd_putc(self, *str);
    1916:	1e 00 90    	mov.w     [w14+2], w0
    1918:	10 40 78    	mov.b     [w0], w0
    191a:	80 40 78    	mov.b     w0, w1
    191c:	1e 00 78    	mov.w     [w14], w0
    191e:	b7 ff 07    	rcall     0x188e <_lcd_putc> <.LFB9> <.LFE8>
        str++;
    1920:	1e 00 90    	mov.w     [w14+2], w0
    1922:	00 00 e8    	inc.w     w0, w0
    1924:	10 07 98    	mov.w     w0, [w14+2]

00001926 <.L34>:
    1926:	1e 00 90    	mov.w     [w14+2], w0
    1928:	10 40 78    	mov.b     [w0], w0
    192a:	00 04 e0    	cp0.b     w0
    192c:	f4 ff 3a    	bra       NZ, 0x1916 <.L35>
    }
}
    192e:	00 80 fa    	ulnk      
    1930:	00 00 06    	return    

00001932 <_lcd_print2>:

void lcd_print2(_LCD *self, char* line1, char* line2){
    1932:	42 00 fa    	lnk       #0x42
    1934:	60 1f 98    	mov.w     w0, [w14+60]
    1936:	71 1f 98    	mov.w     w1, [w14+62]
    1938:	02 27 98    	mov.w     w2, [w14+64]
    lcd_clear(self);
    193a:	6e 18 90    	mov.w     [w14+60], w0
    193c:	9d ff 07    	rcall     0x1878 <_lcd_clear> <.LFB8> <.LFE7>
    char str[56] ="                                                        ";
    193e:	60 56 29    	mov.w     #0x9566, w0
    1940:	e4 00 47    	add.w     w14, #0x4, w1
    1942:	37 00 09    	repeat    #0x37
    1944:	b0 58 78    	mov.b     [w0++], [w1++]
    1946:	80 03 b1    	sub.w     #0x38, w0
    int i =0;
    1948:	00 00 eb    	clr.w     w0
    194a:	00 0f 78    	mov.w     w0, [w14]
    while (*line1){
    194c:	09 00 37    	bra       0x1960 <.L37>

0000194e <.L38>:
        str[i]=*line1;
    194e:	7e 18 90    	mov.w     [w14+62], w0
    1950:	90 40 78    	mov.b     [w0], w1
    1952:	64 00 47    	add.w     w14, #0x4, w0
    1954:	1e 00 40    	add.w     w0, [w14], w0
    1956:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    1958:	1e 0f e8    	inc.w     [w14], [w14]
        line1++;
    195a:	7e 18 90    	mov.w     [w14+62], w0
    195c:	00 00 e8    	inc.w     w0, w0
    195e:	70 1f 98    	mov.w     w0, [w14+62]

00001960 <.L37>:
    1960:	7e 18 90    	mov.w     [w14+62], w0
    1962:	10 40 78    	mov.b     [w0], w0
    1964:	00 04 e0    	cp0.b     w0
    1966:	f3 ff 3a    	bra       NZ, 0x194e <.L38>
    }
    i =40;
    1968:	80 02 20    	mov.w     #0x28, w0
    196a:	00 0f 78    	mov.w     w0, [w14]
    while (*line2){
    196c:	09 00 37    	bra       0x1980 <.L39>

0000196e <.L40>:
        str[i]=*line2;
    196e:	0e 20 90    	mov.w     [w14+64], w0
    1970:	90 40 78    	mov.b     [w0], w1
    1972:	64 00 47    	add.w     w14, #0x4, w0
    1974:	1e 00 40    	add.w     w0, [w14], w0
    1976:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    1978:	1e 0f e8    	inc.w     [w14], [w14]
        line2++;
    197a:	0e 20 90    	mov.w     [w14+64], w0
    197c:	00 00 e8    	inc.w     w0, w0
    197e:	00 27 98    	mov.w     w0, [w14+64]

00001980 <.L39>:
    1980:	0e 20 90    	mov.w     [w14+64], w0
    1982:	10 40 78    	mov.b     [w0], w0
    1984:	00 04 e0    	cp0.b     w0
    1986:	f3 ff 3a    	bra       NZ, 0x196e <.L40>
    }
    char* strptr=str;
    1988:	64 00 47    	add.w     w14, #0x4, w0
    198a:	10 07 98    	mov.w     w0, [w14+2]
    lcd_print1(self,strptr);
    198c:	9e 00 90    	mov.w     [w14+2], w1
    198e:	6e 18 90    	mov.w     [w14+60], w0
    1990:	bc ff 07    	rcall     0x190a <_lcd_print1> <.LFB12> <.LFE11>
}
    1992:	00 80 fa    	ulnk      
    1994:	00 00 06    	return    

00001996 <_lcd_print>:

void lcd_print(_LCD *self, char* message) {
    1996:	30 00 fa    	lnk       #0x30
    1998:	60 17 98    	mov.w     w0, [w14+44]
    199a:	71 17 98    	mov.w     w1, [w14+46]
    char newstr1[17] = "                ";
    199c:	f0 59 29    	mov.w     #0x959f, w0
    199e:	ea 00 47    	add.w     w14, #0xa, w1
    19a0:	10 00 09    	repeat    #0x10
    19a2:	b0 58 78    	mov.b     [w0++], [w1++]
    19a4:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr1= newstr1;
    19a6:	6a 0f 47    	add.w     w14, #0xa, [w14]
    char newstr2[17] = "                ";
    19a8:	f0 59 29    	mov.w     #0x959f, w0
    19aa:	fb 00 47    	add.w     w14, #0x1b, w1
    19ac:	10 00 09    	repeat    #0x10
    19ae:	b0 58 78    	mov.b     [w0++], [w1++]
    19b0:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr2= newstr2;
    19b2:	7b 00 47    	add.w     w14, #0x1b, w0
    19b4:	10 07 98    	mov.w     w0, [w14+2]
    char* temp1 = newstrptr1;
    19b6:	9e 00 78    	mov.w     [w14], w1
    19b8:	31 07 98    	mov.w     w1, [w14+6]
    char* temp2 = newstrptr2;
    19ba:	9e 00 90    	mov.w     [w14+2], w1
    19bc:	41 07 98    	mov.w     w1, [w14+8]
    uint8_t i=0;
    19be:	00 40 eb    	clr.b     w0
    19c0:	40 47 98    	mov.b     w0, [w14+4]
    while (i <17){
    19c2:	0f 00 37    	bra       0x19e2 <.L42>

000019c4 <.L44>:
        if (*message){
    19c4:	7e 10 90    	mov.w     [w14+46], w0
    19c6:	10 40 78    	mov.b     [w0], w0
    19c8:	00 04 e0    	cp0.b     w0
    19ca:	08 00 32    	bra       Z, 0x19dc <.L43>
            *newstrptr1=*message;
    19cc:	7e 10 90    	mov.w     [w14+46], w0
    19ce:	90 40 78    	mov.b     [w0], w1
    19d0:	1e 00 78    	mov.w     [w14], w0
    19d2:	01 48 78    	mov.b     w1, [w0]
            message++;
    19d4:	7e 10 90    	mov.w     [w14+46], w0
    19d6:	00 00 e8    	inc.w     w0, w0
    19d8:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr1++;
    19da:	1e 0f e8    	inc.w     [w14], [w14]

000019dc <.L43>:
        }
        i++;
    19dc:	4e 40 90    	mov.b     [w14+4], w0
    19de:	00 40 e8    	inc.b     w0, w0
    19e0:	40 47 98    	mov.b     w0, [w14+4]

000019e2 <.L42>:
    19e2:	4e 40 90    	mov.b     [w14+4], w0
    19e4:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    19e6:	ee ff 36    	bra       LEU, 0x19c4 <.L44>
    }
    i=0;
    19e8:	00 40 eb    	clr.b     w0
    19ea:	40 47 98    	mov.b     w0, [w14+4]
    message--; //SKETCHY!
    19ec:	7e 10 90    	mov.w     [w14+46], w0
    19ee:	00 00 e9    	dec.w     w0, w0
    19f0:	70 17 98    	mov.w     w0, [w14+46]
    while (i <17){
    19f2:	11 00 37    	bra       0x1a16 <.L45>

000019f4 <.L47>:
        if (*message){
    19f4:	7e 10 90    	mov.w     [w14+46], w0
    19f6:	10 40 78    	mov.b     [w0], w0
    19f8:	00 04 e0    	cp0.b     w0
    19fa:	0a 00 32    	bra       Z, 0x1a10 <.L46>
            *newstrptr2=*message;
    19fc:	7e 10 90    	mov.w     [w14+46], w0
    19fe:	90 40 78    	mov.b     [w0], w1
    1a00:	1e 00 90    	mov.w     [w14+2], w0
    1a02:	01 48 78    	mov.b     w1, [w0]
            message++;
    1a04:	7e 10 90    	mov.w     [w14+46], w0
    1a06:	00 00 e8    	inc.w     w0, w0
    1a08:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr2++;
    1a0a:	1e 00 90    	mov.w     [w14+2], w0
    1a0c:	00 00 e8    	inc.w     w0, w0
    1a0e:	10 07 98    	mov.w     w0, [w14+2]

00001a10 <.L46>:
        }
        i++;
    1a10:	4e 40 90    	mov.b     [w14+4], w0
    1a12:	00 40 e8    	inc.b     w0, w0
    1a14:	40 47 98    	mov.b     w0, [w14+4]

00001a16 <.L45>:
    1a16:	4e 40 90    	mov.b     [w14+4], w0
    1a18:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    1a1a:	ec ff 36    	bra       LEU, 0x19f4 <.L47>
    }
    lcd_print2(self, temp1, temp2);
    1a1c:	4e 01 90    	mov.w     [w14+8], w2
    1a1e:	be 00 90    	mov.w     [w14+6], w1
    1a20:	6e 10 90    	mov.w     [w14+44], w0
    1a22:	87 ff 07    	rcall     0x1932 <_lcd_print2> <.LFB13> <.LFE12>
}
    1a24:	00 80 fa    	ulnk      
    1a26:	00 00 06    	return    

00001a28 <_lcd_broadcast>:

void lcd_broadcast(char* message) {
    1a28:	04 00 fa    	lnk       #0x4
    1a2a:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t i;
    for (i = 0; i < 3; i++)
    1a2c:	00 40 eb    	clr.b     w0
    1a2e:	00 4f 78    	mov.b     w0, [w14]
    1a30:	08 00 37    	bra       0x1a42 <.L49>

00001a32 <.L50>:
        lcd_print(&lcd[i], message);
    1a32:	1e 80 fb    	ze        [w14], w0
    1a34:	65 00 b9    	mul.su    w0, #0x5, w0
    1a36:	80 00 78    	mov.w     w0, w1
    1a38:	a0 82 20    	mov.w     #0x82a, w0
    1a3a:	00 80 40    	add.w     w1, w0, w0
    1a3c:	9e 00 90    	mov.w     [w14+2], w1
    1a3e:	ab ff 07    	rcall     0x1996 <_lcd_print> <.LFB14> <.LFE13>
    1a40:	1e 4f e8    	inc.b     [w14], [w14]

00001a42 <.L49>:
    1a42:	1e 40 78    	mov.b     [w14], w0
    1a44:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1a46:	f5 ff 36    	bra       LEU, 0x1a32 <.L50>
}
    1a48:	00 80 fa    	ulnk      
    1a4a:	00 00 06    	return    

00001a4c <_itoa>:

char * itoa (int value, char *result, int base) {
    1a4c:	0e 00 fa    	lnk       #0xe
    1a4e:	40 07 98    	mov.w     w0, [w14+8]
    1a50:	51 07 98    	mov.w     w1, [w14+10]
    1a52:	62 07 98    	mov.w     w2, [w14+12]
    // check that the base if valid
    if (base < 2 || base > 36) { *result = '\0'; return result; }
    1a54:	6e 00 90    	mov.w     [w14+12], w0
    1a56:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1a58:	04 00 34    	bra       LE, 0x1a62 <.L52>
    1a5a:	ee 00 90    	mov.w     [w14+12], w1
    1a5c:	40 02 20    	mov.w     #0x24, w0
    1a5e:	80 8f 50    	sub.w     w1, w0, [w15]
    1a60:	05 00 34    	bra       LE, 0x1a6c <.L53>

00001a62 <.L52>:
    1a62:	5e 00 90    	mov.w     [w14+10], w0
    1a64:	80 40 eb    	clr.b     w1
    1a66:	01 48 78    	mov.b     w1, [w0]
    1a68:	5e 00 90    	mov.w     [w14+10], w0
    1a6a:	39 00 37    	bra       0x1ade <.L54>

00001a6c <.L53>:

    char* ptr = result, *ptr1 = result, tmp_char;
    1a6c:	de 00 90    	mov.w     [w14+10], w1
    1a6e:	01 0f 78    	mov.w     w1, [w14]
    1a70:	5e 01 90    	mov.w     [w14+10], w2
    1a72:	12 07 98    	mov.w     w2, [w14+2]

00001a74 <.L55>:
    int tmp_value;

    do {
        tmp_value = value;
    1a74:	ce 00 90    	mov.w     [w14+8], w1
    1a76:	21 07 98    	mov.w     w1, [w14+4]
        value /= base;
    1a78:	ce 00 90    	mov.w     [w14+8], w1
    1a7a:	6e 00 90    	mov.w     [w14+12], w0
    1a7c:	00 01 78    	mov.w     w0, w2
    1a7e:	11 00 09    	repeat    #0x11
    1a80:	82 00 d8    	div.sw    w1, w2
    1a82:	40 07 98    	mov.w     w0, [w14+8]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
    1a84:	ce 00 90    	mov.w     [w14+8], w1
    1a86:	6e 00 90    	mov.w     [w14+12], w0
    1a88:	00 88 b9    	mul.ss    w1, w0, w0
    1a8a:	00 00 78    	mov.w     w0, w0
    1a8c:	ae 00 90    	mov.w     [w14+4], w1
    1a8e:	00 80 50    	sub.w     w1, w0, w0
    1a90:	30 02 b0    	add.w     #0x23, w0
    1a92:	01 5b 29    	mov.w     #0x95b0, w1
    1a94:	e1 40 78    	mov.b     [w1+w0], w1
    1a96:	1e 00 78    	mov.w     [w14], w0
    1a98:	01 48 78    	mov.b     w1, [w0]
    1a9a:	1e 0f e8    	inc.w     [w14], [w14]
    } while ( value );
    1a9c:	4e 00 90    	mov.w     [w14+8], w0
    1a9e:	00 00 e0    	cp0.w     w0
    1aa0:	e9 ff 3a    	bra       NZ, 0x1a74 <.L55>

    // Apply negative sign
    if (tmp_value < 0) *ptr++ = '-';
    1aa2:	2e 00 90    	mov.w     [w14+4], w0
    1aa4:	00 00 e0    	cp0.w     w0
    1aa6:	04 00 3d    	bra       GE, 0x1ab0 <.L56>
    1aa8:	1e 00 78    	mov.w     [w14], w0
    1aaa:	d1 c2 b3    	mov.b     #0x2d, w1
    1aac:	01 48 78    	mov.b     w1, [w0]
    1aae:	1e 0f e8    	inc.w     [w14], [w14]

00001ab0 <.L56>:
    *ptr-- = '\0';
    1ab0:	1e 00 78    	mov.w     [w14], w0
    1ab2:	80 40 eb    	clr.b     w1
    1ab4:	01 48 78    	mov.b     w1, [w0]
    1ab6:	1e 0f e9    	dec.w     [w14], [w14]
    while (ptr1 < ptr) {
    1ab8:	0e 00 37    	bra       0x1ad6 <.L57>

00001aba <.L58>:
        tmp_char = *ptr;
    1aba:	1e 00 78    	mov.w     [w14], w0
    1abc:	90 40 78    	mov.b     [w0], w1
    1abe:	61 47 98    	mov.b     w1, [w14+6]
        *ptr--= *ptr1;
    1ac0:	1e 00 90    	mov.w     [w14+2], w0
    1ac2:	90 40 78    	mov.b     [w0], w1
    1ac4:	1e 00 78    	mov.w     [w14], w0
    1ac6:	01 48 78    	mov.b     w1, [w0]
    1ac8:	1e 0f e9    	dec.w     [w14], [w14]
        *ptr1++ = tmp_char;
    1aca:	1e 00 90    	mov.w     [w14+2], w0
    1acc:	6e 41 90    	mov.b     [w14+6], w2
    1ace:	02 48 78    	mov.b     w2, [w0]
    1ad0:	1e 00 90    	mov.w     [w14+2], w0
    1ad2:	00 00 e8    	inc.w     w0, w0
    1ad4:	10 07 98    	mov.w     w0, [w14+2]

00001ad6 <.L57>:
    1ad6:	1e 00 90    	mov.w     [w14+2], w0
    1ad8:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1ada:	ef ff 39    	bra       NC, 0x1aba <.L58>
    }
    return result;
    1adc:	5e 00 90    	mov.w     [w14+10], w0

00001ade <.L54>:
}
    1ade:	00 80 fa    	ulnk      
    1ae0:	00 00 06    	return    

00001ae2 <_main>:
    1ae2:	60 00 fa    	lnk       #0x60
    1ae4:	88 1f 78    	mov.w     w8, [w15++]
    1ae6:	85 04 07    	rcall     0x23f2 <.LFE0> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    1ae8:	f9 01 07    	rcall     0x1edc <_toggleSwitchSetup> <.LFB9> <.LFE8>
    1aea:	80 3e 20    	mov.w     #0x3e8, w0
    1aec:	44 02 07    	rcall     0x1f76 <_i2c_init> <.LFB1> <.LFE0>
    1aee:	12 c4 b3    	mov.b     #0x41, w2
    1af0:	61 c0 b3    	mov.b     #0x6, w1
    1af2:	a0 83 20    	mov.w     #0x83a, w0
    1af4:	2d fe 07    	rcall     0x1750 <_lcd_init> <.LFB5> <.LFE4>
    1af6:	a0 83 20    	mov.w     #0x83a, w0
    1af8:	bf fe 07    	rcall     0x1878 <_lcd_clear> <.LFB8> <.LFE7>
    1afa:	50 16 80    	mov.w     0x2ca, w0
    1afc:	45 00 de    	lsr.w     w0, #0x5, w0
    1afe:	61 40 60    	and.b     w0, #0x1, w0
    1b00:	00 80 fb    	ze        w0, w0
    1b02:	a7 04 07    	rcall     0x2452 <_read_analog> <.LFB1> <.LFE0>
    1b04:	b0 40 88    	mov.w     w0, 0x816
    1b06:	00 40 eb    	clr.b     w0
    1b08:	00 4f 78    	mov.b     w0, [w14]
    1b0a:	02 00 37    	bra       0x1b10 <.L2>

00001b0c <.L3>:
    1b0c:	0a 02 07    	rcall     0x1f22 <_rand_next> <.LFB10> <.LFE9>
    1b0e:	1e 4f e8    	inc.b     [w14], [w14]

00001b10 <.L2>:
    1b10:	1e 84 fb    	ze        [w14], w8
    1b12:	50 16 80    	mov.w     0x2ca, w0
    1b14:	45 00 de    	lsr.w     w0, #0x5, w0
    1b16:	61 40 60    	and.b     w0, #0x1, w0
    1b18:	00 80 fb    	ze        w0, w0
    1b1a:	9b 04 07    	rcall     0x2452 <_read_analog> <.LFB1> <.LFE0>
    1b1c:	74 00 40    	add.w     w0, #0x14, w0
    1b1e:	80 0f 54    	sub.w     w8, w0, [w15]
    1b20:	f5 ff 39    	bra       NC, 0x1b0c <.L3>
    1b22:	00 40 eb    	clr.b     w0
    1b24:	00 4f 78    	mov.b     w0, [w14]
    1b26:	13 00 37    	bra       0x1b4e <.L4>

00001b28 <.L5>:
    1b28:	11 40 80    	mov.w     0x802, w1
    1b2a:	1e 80 fb    	ze        [w14], w0
    1b2c:	00 82 40    	add.w     w1, w0, w4
    1b2e:	9e 81 fb    	ze        [w14], w3
    1b30:	b2 40 80    	mov.w     0x816, w2
    1b32:	90 88 28    	mov.w     #0x8889, w0
    1b34:	00 10 b8    	mul.uu    w2, w0, w0
    1b36:	43 08 de    	lsr.w     w1, #0x3, w0
    1b38:	6f 00 b9    	mul.su    w0, #0xf, w0
    1b3a:	00 00 78    	mov.w     w0, w0
    1b3c:	00 00 51    	sub.w     w2, w0, w0
    1b3e:	41 02 20    	mov.w     #0x24, w1
    1b40:	01 99 b9    	mul.ss    w3, w1, w2
    1b42:	82 00 78    	mov.w     w2, w1
    1b44:	00 80 40    	add.w     w1, w0, w0
    1b46:	c1 2f 29    	mov.w     #0x92fc, w1
    1b48:	61 40 78    	mov.b     [w1+w0], w0
    1b4a:	00 4a 78    	mov.b     w0, [w4]
    1b4c:	1e 4f e8    	inc.b     [w14], [w14]

00001b4e <.L4>:
    1b4e:	30 c2 b3    	mov.b     #0x23, w0
    1b50:	9e 40 78    	mov.b     [w14], w1
    1b52:	80 cf 50    	sub.b     w1, w0, [w15]
    1b54:	e9 ff 36    	bra       LEU, 0x1b28 <.L5>
    1b56:	80 51 29    	mov.w     #0x9518, w0
    1b58:	10 40 88    	mov.w     w0, 0x802
    1b5a:	d0 53 29    	mov.w     #0x953d, w0
    1b5c:	90 40 78    	mov.b     [w0], w1
    1b5e:	51 67 98    	mov.b     w1, [w14+37]
    1b60:	90 40 90    	mov.b     [w0+1], w1
    1b62:	61 67 98    	mov.b     w1, [w14+38]
    1b64:	8e 00 78    	mov.w     w14, w1
    1b66:	71 02 b0    	add.w     #0x27, w1
    1b68:	04 00 09    	repeat    #0x4
    1b6a:	80 58 eb    	clr.b     [w1++]
    1b6c:	00 40 eb    	clr.b     w0
    1b6e:	00 4f 78    	mov.b     w0, [w14]
    1b70:	08 00 37    	bra       0x1b82 <.L6>

00001b72 <.L7>:
    1b72:	1e 80 fb    	ze        [w14], w0
    1b74:	12 40 80    	mov.w     0x802, w2
    1b76:	9e 80 fb    	ze        [w14], w1
    1b78:	81 00 41    	add.w     w2, w1, w1
    1b7a:	91 40 78    	mov.b     [w1], w1
    1b7c:	00 00 47    	add.w     w14, w0, w0
    1b7e:	51 60 98    	mov.b     w1, [w0+37]
    1b80:	1e 4f e8    	inc.b     [w14], [w14]

00001b82 <.L6>:
    1b82:	1e 40 78    	mov.b     [w14], w0
    1b84:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1b86:	f5 ff 36    	bra       LEU, 0x1b72 <.L7>
    1b88:	50 02 20    	mov.w     #0x25, w0
    1b8a:	0e 00 40    	add.w     w0, w14, w0
    1b8c:	70 40 88    	mov.w     w0, 0x80e
    1b8e:	00 02 20    	mov.w     #0x20, w0
    1b90:	01 00 20    	mov.w     #0x0, w1
    1b92:	60 17 98    	mov.w     w0, [w14+44]
    1b94:	71 17 98    	mov.w     w1, [w14+46]
    1b96:	8e 00 78    	mov.w     w14, w1
    1b98:	01 03 b0    	add.w     #0x30, w1
    1b9a:	00 00 09    	repeat    #0x0
    1b9c:	80 18 eb    	clr.w     [w1++]
    1b9e:	80 58 eb    	clr.b     [w1++]
    1ba0:	00 40 eb    	clr.b     w0
    1ba2:	00 4f 78    	mov.b     w0, [w14]
    1ba4:	09 00 37    	bra       0x1bb8 <.L8>

00001ba6 <.L9>:
    1ba6:	1e 80 fb    	ze        [w14], w0
    1ba8:	12 40 80    	mov.w     0x802, w2
    1baa:	9e 80 fb    	ze        [w14], w1
    1bac:	e5 80 40    	add.w     w1, #0x5, w1
    1bae:	81 00 41    	add.w     w2, w1, w1
    1bb0:	91 40 78    	mov.b     [w1], w1
    1bb2:	00 00 47    	add.w     w14, w0, w0
    1bb4:	41 68 98    	mov.b     w1, [w0+44]
    1bb6:	1e 4f e8    	inc.b     [w14], [w14]

00001bb8 <.L8>:
    1bb8:	1e 40 78    	mov.b     [w14], w0
    1bba:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1bbc:	f4 ff 36    	bra       LEU, 0x1ba6 <.L9>
    1bbe:	c0 02 20    	mov.w     #0x2c, w0
    1bc0:	0e 00 40    	add.w     w0, w14, w0
    1bc2:	20 40 88    	mov.w     w0, 0x804
    1bc4:	d0 53 29    	mov.w     #0x953d, w0
    1bc6:	90 40 78    	mov.b     [w0], w1
    1bc8:	31 77 98    	mov.b     w1, [w14+51]
    1bca:	90 40 90    	mov.b     [w0+1], w1
    1bcc:	41 77 98    	mov.b     w1, [w14+52]
    1bce:	8e 00 78    	mov.w     w14, w1
    1bd0:	51 03 b0    	add.w     #0x35, w1
    1bd2:	04 00 09    	repeat    #0x4
    1bd4:	80 58 eb    	clr.b     [w1++]
    1bd6:	00 40 eb    	clr.b     w0
    1bd8:	00 4f 78    	mov.b     w0, [w14]
    1bda:	09 00 37    	bra       0x1bee <.L10>

00001bdc <.L11>:
    1bdc:	1e 80 fb    	ze        [w14], w0
    1bde:	12 40 80    	mov.w     0x802, w2
    1be0:	9e 80 fb    	ze        [w14], w1
    1be2:	eb 80 40    	add.w     w1, #0xb, w1
    1be4:	81 00 41    	add.w     w2, w1, w1
    1be6:	91 40 78    	mov.b     [w1], w1
    1be8:	00 00 47    	add.w     w14, w0, w0
    1bea:	31 70 98    	mov.b     w1, [w0+51]
    1bec:	1e 4f e8    	inc.b     [w14], [w14]

00001bee <.L10>:
    1bee:	1e 40 78    	mov.b     [w14], w0
    1bf0:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1bf2:	f4 ff 36    	bra       LEU, 0x1bdc <.L11>
    1bf4:	30 03 20    	mov.w     #0x33, w0
    1bf6:	0e 00 40    	add.w     w0, w14, w0
    1bf8:	30 40 88    	mov.w     w0, 0x806
    1bfa:	00 02 20    	mov.w     #0x20, w0
    1bfc:	01 00 20    	mov.w     #0x0, w1
    1bfe:	50 1f 98    	mov.w     w0, [w14+58]
    1c00:	61 1f 98    	mov.w     w1, [w14+60]
    1c02:	8e 00 78    	mov.w     w14, w1
    1c04:	e1 03 b0    	add.w     #0x3e, w1
    1c06:	00 00 09    	repeat    #0x0
    1c08:	80 18 eb    	clr.w     [w1++]
    1c0a:	80 58 eb    	clr.b     [w1++]
    1c0c:	00 40 eb    	clr.b     w0
    1c0e:	00 4f 78    	mov.b     w0, [w14]
    1c10:	09 00 37    	bra       0x1c24 <.L12>

00001c12 <.L13>:
    1c12:	1e 80 fb    	ze        [w14], w0
    1c14:	12 40 80    	mov.w     0x802, w2
    1c16:	9e 80 fb    	ze        [w14], w1
    1c18:	f1 80 40    	add.w     w1, #0x11, w1
    1c1a:	81 00 41    	add.w     w2, w1, w1
    1c1c:	91 40 78    	mov.b     [w1], w1
    1c1e:	00 00 47    	add.w     w14, w0, w0
    1c20:	21 78 98    	mov.b     w1, [w0+58]
    1c22:	1e 4f e8    	inc.b     [w14], [w14]

00001c24 <.L12>:
    1c24:	1e 40 78    	mov.b     [w14], w0
    1c26:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1c28:	f4 ff 36    	bra       LEU, 0x1c12 <.L13>
    1c2a:	a0 03 20    	mov.w     #0x3a, w0
    1c2c:	0e 00 40    	add.w     w0, w14, w0
    1c2e:	40 40 88    	mov.w     w0, 0x808
    1c30:	d0 53 29    	mov.w     #0x953d, w0
    1c32:	90 40 78    	mov.b     [w0], w1
    1c34:	11 c7 98    	mov.b     w1, [w14+65]
    1c36:	90 40 90    	mov.b     [w0+1], w1
    1c38:	21 c7 98    	mov.b     w1, [w14+66]
    1c3a:	8e 00 78    	mov.w     w14, w1
    1c3c:	31 04 b0    	add.w     #0x43, w1
    1c3e:	04 00 09    	repeat    #0x4
    1c40:	80 58 eb    	clr.b     [w1++]
    1c42:	00 40 eb    	clr.b     w0
    1c44:	00 4f 78    	mov.b     w0, [w14]
    1c46:	09 00 37    	bra       0x1c5a <.L14>

00001c48 <.L15>:
    1c48:	1e 80 fb    	ze        [w14], w0
    1c4a:	12 40 80    	mov.w     0x802, w2
    1c4c:	9e 80 fb    	ze        [w14], w1
    1c4e:	f7 80 40    	add.w     w1, #0x17, w1
    1c50:	81 00 41    	add.w     w2, w1, w1
    1c52:	91 40 78    	mov.b     [w1], w1
    1c54:	00 00 47    	add.w     w14, w0, w0
    1c56:	11 c0 98    	mov.b     w1, [w0+65]
    1c58:	1e 4f e8    	inc.b     [w14], [w14]

00001c5a <.L14>:
    1c5a:	1e 40 78    	mov.b     [w14], w0
    1c5c:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1c5e:	f4 ff 36    	bra       LEU, 0x1c48 <.L15>
    1c60:	10 04 20    	mov.w     #0x41, w0
    1c62:	0e 00 40    	add.w     w0, w14, w0
    1c64:	50 40 88    	mov.w     w0, 0x80a
    1c66:	00 02 20    	mov.w     #0x20, w0
    1c68:	01 00 20    	mov.w     #0x0, w1
    1c6a:	40 27 98    	mov.w     w0, [w14+72]
    1c6c:	51 27 98    	mov.w     w1, [w14+74]
    1c6e:	8e 00 78    	mov.w     w14, w1
    1c70:	c1 04 b0    	add.w     #0x4c, w1
    1c72:	00 00 09    	repeat    #0x0
    1c74:	80 18 eb    	clr.w     [w1++]
    1c76:	80 58 eb    	clr.b     [w1++]
    1c78:	00 40 eb    	clr.b     w0
    1c7a:	00 4f 78    	mov.b     w0, [w14]
    1c7c:	09 00 37    	bra       0x1c90 <.L16>

00001c7e <.L17>:
    1c7e:	1e 80 fb    	ze        [w14], w0
    1c80:	12 40 80    	mov.w     0x802, w2
    1c82:	9e 80 fb    	ze        [w14], w1
    1c84:	fd 80 40    	add.w     w1, #0x1d, w1
    1c86:	81 00 41    	add.w     w2, w1, w1
    1c88:	91 40 78    	mov.b     [w1], w1
    1c8a:	00 00 47    	add.w     w14, w0, w0
    1c8c:	01 c8 98    	mov.b     w1, [w0+72]
    1c8e:	1e 4f e8    	inc.b     [w14], [w14]

00001c90 <.L16>:
    1c90:	1e 40 78    	mov.b     [w14], w0
    1c92:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1c94:	f4 ff 36    	bra       LEU, 0x1c7e <.L17>
    1c96:	80 04 20    	mov.w     #0x48, w0
    1c98:	0e 00 40    	add.w     w0, w14, w0
    1c9a:	60 40 88    	mov.w     w0, 0x80c
    1c9c:	b2 40 80    	mov.w     0x816, w2
    1c9e:	d0 cc 2c    	mov.w     #0xcccd, w0
    1ca0:	00 10 b8    	mul.uu    w2, w0, w0
    1ca2:	42 08 de    	lsr.w     w1, #0x2, w0
    1ca4:	65 00 b9    	mul.su    w0, #0x5, w0
    1ca6:	00 00 78    	mov.w     w0, w0
    1ca8:	00 00 51    	sub.w     w2, w0, w0
    1caa:	00 40 78    	mov.b     w0, w0
    1cac:	10 e8 b7    	mov.b     WREG, 0x810
    1cae:	39 01 07    	rcall     0x1f22 <_rand_next> <.LFB10> <.LFE9>
    1cb0:	b2 40 80    	mov.w     0x816, w2
    1cb2:	d0 cc 2c    	mov.w     #0xcccd, w0
    1cb4:	00 10 b8    	mul.uu    w2, w0, w0
    1cb6:	42 08 de    	lsr.w     w1, #0x2, w0
    1cb8:	65 00 b9    	mul.su    w0, #0x5, w0
    1cba:	00 00 78    	mov.w     w0, w0
    1cbc:	00 00 51    	sub.w     w2, w0, w0
    1cbe:	00 40 78    	mov.b     w0, w0
    1cc0:	11 e8 b7    	mov.b     WREG, 0x811
    1cc2:	2f 01 07    	rcall     0x1f22 <_rand_next> <.LFB10> <.LFE9>
    1cc4:	b2 40 80    	mov.w     0x816, w2
    1cc6:	d0 cc 2c    	mov.w     #0xcccd, w0
    1cc8:	00 10 b8    	mul.uu    w2, w0, w0
    1cca:	42 08 de    	lsr.w     w1, #0x2, w0
    1ccc:	65 00 b9    	mul.su    w0, #0x5, w0
    1cce:	00 00 78    	mov.w     w0, w0
    1cd0:	00 00 51    	sub.w     w2, w0, w0
    1cd2:	00 40 78    	mov.b     w0, w0
    1cd4:	12 e8 b7    	mov.b     WREG, 0x812
    1cd6:	25 01 07    	rcall     0x1f22 <_rand_next> <.LFB10> <.LFE9>
    1cd8:	b2 40 80    	mov.w     0x816, w2
    1cda:	d0 cc 2c    	mov.w     #0xcccd, w0
    1cdc:	00 10 b8    	mul.uu    w2, w0, w0
    1cde:	42 08 de    	lsr.w     w1, #0x2, w0
    1ce0:	65 00 b9    	mul.su    w0, #0x5, w0
    1ce2:	00 00 78    	mov.w     w0, w0
    1ce4:	00 00 51    	sub.w     w2, w0, w0
    1ce6:	00 40 78    	mov.b     w0, w0
    1ce8:	13 e8 b7    	mov.b     WREG, 0x813
    1cea:	1b 01 07    	rcall     0x1f22 <_rand_next> <.LFB10> <.LFE9>
    1cec:	b2 40 80    	mov.w     0x816, w2
    1cee:	d0 cc 2c    	mov.w     #0xcccd, w0
    1cf0:	00 10 b8    	mul.uu    w2, w0, w0
    1cf2:	42 08 de    	lsr.w     w1, #0x2, w0
    1cf4:	65 00 b9    	mul.su    w0, #0x5, w0
    1cf6:	00 00 78    	mov.w     w0, w0
    1cf8:	00 00 51    	sub.w     w2, w0, w0
    1cfa:	00 40 78    	mov.b     w0, w0
    1cfc:	14 e8 b7    	mov.b     WREG, 0x814
    1cfe:	40 54 29    	mov.w     #0x9544, w0
    1d00:	f1 04 20    	mov.w     #0x4f, w1
    1d02:	81 00 47    	add.w     w14, w1, w1
    1d04:	0f 00 09    	repeat    #0xf
    1d06:	b0 58 78    	mov.b     [w0++], [w1++]
    1d08:	00 01 b1    	sub.w     #0x10, w0
    1d0a:	00 40 eb    	clr.b     w0
    1d0c:	70 df 98    	mov.b     w0, [w14+95]
    1d0e:	f0 04 20    	mov.w     #0x4f, w0
    1d10:	0e 00 40    	add.w     w0, w14, w0
    1d12:	00 40 88    	mov.w     w0, 0x800
    1d14:	00 40 80    	mov.w     0x800, w0
    1d16:	c2 53 29    	mov.w     #0x953c, w2
    1d18:	80 00 78    	mov.w     w0, w1
    1d1a:	a0 83 20    	mov.w     #0x83a, w0
    1d1c:	0a fe 07    	rcall     0x1932 <_lcd_print2> <.LFB13> <.LFE12>
    1d1e:	00 02 20    	mov.w     #0x20, w0
    1d20:	80 08 88    	mov.w     w0, 0x110
    1d22:	00 71 22    	mov.w     #0x2710, w0
    1d24:	60 08 88    	mov.w     w0, 0x10c
    1d26:	06 21 ef    	clr.w     0x106
    1d28:	84 e0 a9    	bclr.b    0x84, #0x7
    1d2a:	94 e0 a8    	bset.b    0x94, #0x7
    1d2c:	11 e1 a9    	bclr.b    0x111, #0x7
    1d2e:	80 d3 21    	mov.w     #0x1d38, w0
    1d30:	c0 40 88    	mov.w     w0, 0x818

00001d32 <.L18>:
    1d32:	c0 40 80    	mov.w     0x818, w0
    1d34:	00 00 01    	call      w0
    1d36:	fd ff 37    	bra       0x1d32 <.L18>

00001d38 <_setup>:
    1d38:	00 00 fa    	lnk       #0x0
    1d3a:	c1 40 80    	mov.w     0x818, w1
    1d3c:	d0 40 80    	mov.w     0x81a, w0
    1d3e:	80 8f 50    	sub.w     w1, w0, [w15]
    1d40:	03 00 32    	bra       Z, 0x1d48 <.L20>
    1d42:	c0 40 80    	mov.w     0x818, w0
    1d44:	d0 40 88    	mov.w     w0, 0x81a
    1d46:	da 22 a8    	bset.b    0x2da, #0x1

00001d48 <.L20>:
    1d48:	a0 d5 21    	mov.w     #0x1d5a, w0
    1d4a:	c0 40 88    	mov.w     w0, 0x818
    1d4c:	c1 40 80    	mov.w     0x818, w1
    1d4e:	d0 40 80    	mov.w     0x81a, w0
    1d50:	80 8f 50    	sub.w     w1, w0, [w15]
    1d52:	01 00 32    	bra       Z, 0x1d56 <.L19>
    1d54:	da 22 a9    	bclr.b    0x2da, #0x1

00001d56 <.L19>:
    1d56:	00 80 fa    	ulnk      
    1d58:	00 00 06    	return    

00001d5a <_run>:
    1d5a:	00 00 fa    	lnk       #0x0
    1d5c:	c1 40 80    	mov.w     0x818, w1
    1d5e:	d0 40 80    	mov.w     0x81a, w0
    1d60:	80 8f 50    	sub.w     w1, w0, [w15]
    1d62:	03 00 32    	bra       Z, 0x1d6a <.L23>
    1d64:	c0 40 80    	mov.w     0x818, w0
    1d66:	d0 40 88    	mov.w     w0, 0x81a
    1d68:	da 02 a8    	bset.b    0x2da, #0x0

00001d6a <.L23>:
    1d6a:	88 00 07    	rcall     0x1e7c <_updateDisplay> <.LFB8> <.LFE5>
    1d6c:	21 40 80    	mov.w     0x804, w1
    1d6e:	10 c8 bf    	mov.b     0x810, WREG
    1d70:	00 80 fb    	ze        w0, w0
    1d72:	00 80 40    	add.w     w1, w0, w0
    1d74:	90 40 78    	mov.b     [w0], w1
    1d76:	70 40 80    	mov.w     0x80e, w0
    1d78:	10 40 78    	mov.b     [w0], w0
    1d7a:	80 cf 50    	sub.b     w1, w0, [w15]
    1d7c:	2b 00 3a    	bra       NZ, 0x1dd4 <.L24>
    1d7e:	31 40 80    	mov.w     0x806, w1
    1d80:	11 c8 bf    	mov.b     0x811, WREG
    1d82:	00 80 fb    	ze        w0, w0
    1d84:	00 80 40    	add.w     w1, w0, w0
    1d86:	90 40 78    	mov.b     [w0], w1
    1d88:	70 40 80    	mov.w     0x80e, w0
    1d8a:	00 00 e8    	inc.w     w0, w0
    1d8c:	10 40 78    	mov.b     [w0], w0
    1d8e:	80 cf 50    	sub.b     w1, w0, [w15]
    1d90:	21 00 3a    	bra       NZ, 0x1dd4 <.L24>
    1d92:	41 40 80    	mov.w     0x808, w1
    1d94:	12 c8 bf    	mov.b     0x812, WREG
    1d96:	00 80 fb    	ze        w0, w0
    1d98:	00 80 40    	add.w     w1, w0, w0
    1d9a:	90 40 78    	mov.b     [w0], w1
    1d9c:	70 40 80    	mov.w     0x80e, w0
    1d9e:	00 80 e8    	inc2.w    w0, w0
    1da0:	10 40 78    	mov.b     [w0], w0
    1da2:	80 cf 50    	sub.b     w1, w0, [w15]
    1da4:	17 00 3a    	bra       NZ, 0x1dd4 <.L24>
    1da6:	51 40 80    	mov.w     0x80a, w1
    1da8:	13 c8 bf    	mov.b     0x813, WREG
    1daa:	00 80 fb    	ze        w0, w0
    1dac:	00 80 40    	add.w     w1, w0, w0
    1dae:	90 40 78    	mov.b     [w0], w1
    1db0:	70 40 80    	mov.w     0x80e, w0
    1db2:	63 00 40    	add.w     w0, #0x3, w0
    1db4:	10 40 78    	mov.b     [w0], w0
    1db6:	80 cf 50    	sub.b     w1, w0, [w15]
    1db8:	0d 00 3a    	bra       NZ, 0x1dd4 <.L24>
    1dba:	61 40 80    	mov.w     0x80c, w1
    1dbc:	14 c8 bf    	mov.b     0x814, WREG
    1dbe:	00 80 fb    	ze        w0, w0
    1dc0:	00 80 40    	add.w     w1, w0, w0
    1dc2:	90 40 78    	mov.b     [w0], w1
    1dc4:	70 40 80    	mov.w     0x80e, w0
    1dc6:	64 00 40    	add.w     w0, #0x4, w0
    1dc8:	10 40 78    	mov.b     [w0], w0
    1dca:	80 cf 50    	sub.b     w1, w0, [w15]
    1dcc:	03 00 3a    	bra       NZ, 0x1dd4 <.L24>
    1dce:	00 e0 21    	mov.w     #0x1e00, w0
    1dd0:	c0 40 88    	mov.w     w0, 0x818
    1dd2:	06 00 37    	bra       0x1de0 <.L25>

00001dd4 <.L24>:
    1dd4:	ec 22 a9    	bclr.b    0x2ec, #0x1
    1dd6:	00 40 80    	mov.w     0x800, w0
    1dd8:	c2 53 29    	mov.w     #0x953c, w2
    1dda:	80 00 78    	mov.w     w0, w1
    1ddc:	a0 83 20    	mov.w     #0x83a, w0
    1dde:	a9 fd 07    	rcall     0x1932 <_lcd_print2> <.LFB13> <.LFE12>

00001de0 <.L25>:
    1de0:	00 53 27    	mov.w     #0x7530, w0
    1de2:	01 00 20    	mov.w     #0x0, w1
    1de4:	b5 00 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1de6:	25 c8 bf    	mov.b     0x825, WREG
    1de8:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1dea:	03 00 3a    	bra       NZ, 0x1df2 <.L26>
    1dec:	40 e4 21    	mov.w     #0x1e44, w0
    1dee:	c0 40 88    	mov.w     w0, 0x818
    1df0:	05 00 37    	bra       0x1dfc <.L27>

00001df2 <.L26>:
    1df2:	26 c8 bf    	mov.b     0x826, WREG
    1df4:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1df6:	02 00 3a    	bra       NZ, 0x1dfc <.L27>
    1df8:	00 e6 21    	mov.w     #0x1e60, w0
    1dfa:	c0 40 88    	mov.w     w0, 0x818

00001dfc <.L27>:
    1dfc:	00 80 fa    	ulnk      
    1dfe:	00 00 06    	return    

00001e00 <_solved>:
    1e00:	00 00 fa    	lnk       #0x0
    1e02:	c1 40 80    	mov.w     0x818, w1
    1e04:	d0 40 80    	mov.w     0x81a, w0
    1e06:	80 8f 50    	sub.w     w1, w0, [w15]
    1e08:	03 00 32    	bra       Z, 0x1e10 <.L29>
    1e0a:	c0 40 80    	mov.w     0x818, w0
    1e0c:	d0 40 88    	mov.w     w0, 0x81a
    1e0e:	ec 22 a8    	bset.b    0x2ec, #0x1

00001e10 <.L29>:
    1e10:	00 40 80    	mov.w     0x800, w0
    1e12:	52 55 29    	mov.w     #0x9555, w2
    1e14:	80 00 78    	mov.w     w0, w1
    1e16:	a0 83 20    	mov.w     #0x83a, w0
    1e18:	8c fd 07    	rcall     0x1932 <_lcd_print2> <.LFB13> <.LFE12>
    1e1a:	00 53 27    	mov.w     #0x7530, w0
    1e1c:	01 00 20    	mov.w     #0x0, w1
    1e1e:	98 00 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1e20:	25 c8 bf    	mov.b     0x825, WREG
    1e22:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1e24:	03 00 3a    	bra       NZ, 0x1e2c <.L30>
    1e26:	40 e4 21    	mov.w     #0x1e44, w0
    1e28:	c0 40 88    	mov.w     w0, 0x818
    1e2a:	05 00 37    	bra       0x1e36 <.L31>

00001e2c <.L30>:
    1e2c:	26 c8 bf    	mov.b     0x826, WREG
    1e2e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1e30:	02 00 3a    	bra       NZ, 0x1e36 <.L31>
    1e32:	00 e6 21    	mov.w     #0x1e60, w0
    1e34:	c0 40 88    	mov.w     w0, 0x818

00001e36 <.L31>:
    1e36:	c1 40 80    	mov.w     0x818, w1
    1e38:	d0 40 80    	mov.w     0x81a, w0
    1e3a:	80 8f 50    	sub.w     w1, w0, [w15]
    1e3c:	01 00 32    	bra       Z, 0x1e40 <.L28>
    1e3e:	ec 22 a9    	bclr.b    0x2ec, #0x1

00001e40 <.L28>:
    1e40:	00 80 fa    	ulnk      
    1e42:	00 00 06    	return    

00001e44 <_end_win>:
    1e44:	00 00 fa    	lnk       #0x0
    1e46:	c1 40 80    	mov.w     0x818, w1
    1e48:	d0 40 80    	mov.w     0x81a, w0
    1e4a:	80 8f 50    	sub.w     w1, w0, [w15]
    1e4c:	02 00 32    	bra       Z, 0x1e52 <.L34>
    1e4e:	c0 40 80    	mov.w     0x818, w0
    1e50:	d0 40 88    	mov.w     w0, 0x81a

00001e52 <.L34>:
    1e52:	24 c8 bf    	mov.b     0x824, WREG
    1e54:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1e56:	02 00 3a    	bra       NZ, 0x1e5c <.L35>
    1e58:	a0 d5 21    	mov.w     #0x1d5a, w0
    1e5a:	c0 40 88    	mov.w     w0, 0x818

00001e5c <.L35>:
    1e5c:	00 80 fa    	ulnk      
    1e5e:	00 00 06    	return    

00001e60 <_end_fail>:
    1e60:	00 00 fa    	lnk       #0x0
    1e62:	c1 40 80    	mov.w     0x818, w1
    1e64:	d0 40 80    	mov.w     0x81a, w0
    1e66:	80 8f 50    	sub.w     w1, w0, [w15]
    1e68:	02 00 32    	bra       Z, 0x1e6e <.L37>
    1e6a:	c0 40 80    	mov.w     0x818, w0
    1e6c:	d0 40 88    	mov.w     w0, 0x81a

00001e6e <.L37>:
    1e6e:	24 c8 bf    	mov.b     0x824, WREG
    1e70:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1e72:	02 00 3a    	bra       NZ, 0x1e78 <.L38>
    1e74:	a0 d5 21    	mov.w     #0x1d5a, w0
    1e76:	c0 40 88    	mov.w     w0, 0x818

00001e78 <.L38>:
    1e78:	00 80 fa    	ulnk      
    1e7a:	00 00 06    	return    

00001e7c <_updateDisplay>:
    1e7c:	00 00 fa    	lnk       #0x0
    1e7e:	00 40 80    	mov.w     0x800, w0
    1e80:	00 00 e8    	inc.w     w0, w0
    1e82:	22 40 80    	mov.w     0x804, w2
    1e84:	01 81 20    	mov.w     #0x810, w1
    1e86:	91 40 78    	mov.b     [w1], w1
    1e88:	81 80 fb    	ze        w1, w1
    1e8a:	81 00 41    	add.w     w2, w1, w1
    1e8c:	91 40 78    	mov.b     [w1], w1
    1e8e:	01 48 78    	mov.b     w1, [w0]
    1e90:	00 40 80    	mov.w     0x800, w0
    1e92:	64 00 40    	add.w     w0, #0x4, w0
    1e94:	32 40 80    	mov.w     0x806, w2
    1e96:	11 81 20    	mov.w     #0x811, w1
    1e98:	91 40 78    	mov.b     [w1], w1
    1e9a:	81 80 fb    	ze        w1, w1
    1e9c:	81 00 41    	add.w     w2, w1, w1
    1e9e:	91 40 78    	mov.b     [w1], w1
    1ea0:	01 48 78    	mov.b     w1, [w0]
    1ea2:	00 40 80    	mov.w     0x800, w0
    1ea4:	67 00 40    	add.w     w0, #0x7, w0
    1ea6:	42 40 80    	mov.w     0x808, w2
    1ea8:	21 81 20    	mov.w     #0x812, w1
    1eaa:	91 40 78    	mov.b     [w1], w1
    1eac:	81 80 fb    	ze        w1, w1
    1eae:	81 00 41    	add.w     w2, w1, w1
    1eb0:	91 40 78    	mov.b     [w1], w1
    1eb2:	01 48 78    	mov.b     w1, [w0]
    1eb4:	00 40 80    	mov.w     0x800, w0
    1eb6:	6a 00 40    	add.w     w0, #0xa, w0
    1eb8:	52 40 80    	mov.w     0x80a, w2
    1eba:	31 81 20    	mov.w     #0x813, w1
    1ebc:	91 40 78    	mov.b     [w1], w1
    1ebe:	81 80 fb    	ze        w1, w1
    1ec0:	81 00 41    	add.w     w2, w1, w1
    1ec2:	91 40 78    	mov.b     [w1], w1
    1ec4:	01 48 78    	mov.b     w1, [w0]
    1ec6:	00 40 80    	mov.w     0x800, w0
    1ec8:	6d 00 40    	add.w     w0, #0xd, w0
    1eca:	62 40 80    	mov.w     0x80c, w2
    1ecc:	41 81 20    	mov.w     #0x814, w1
    1ece:	91 40 78    	mov.b     [w1], w1
    1ed0:	81 80 fb    	ze        w1, w1
    1ed2:	81 00 41    	add.w     w2, w1, w1
    1ed4:	91 40 78    	mov.b     [w1], w1
    1ed6:	01 48 78    	mov.b     w1, [w0]
    1ed8:	00 80 fa    	ulnk      
    1eda:	00 00 06    	return    

00001edc <_toggleSwitchSetup>:
    1edc:	00 00 fa    	lnk       #0x0
    1ede:	d8 a2 a8    	bset.b    0x2d8, #0x5
    1ee0:	d8 82 a8    	bset.b    0x2d8, #0x4
    1ee2:	e8 82 a8    	bset.b    0x2e8, #0x4
    1ee4:	e8 a2 a8    	bset.b    0x2e8, #0x5
    1ee6:	c9 e2 a8    	bset.b    0x2c9, #0x7
    1ee8:	e8 62 a8    	bset.b    0x2e8, #0x3
    1eea:	d9 02 a8    	bset.b    0x2d9, #0x0
    1eec:	d9 62 a8    	bset.b    0x2d9, #0x3
    1eee:	d9 22 a8    	bset.b    0x2d9, #0x1
    1ef0:	d9 42 a8    	bset.b    0x2d9, #0x2
    1ef2:	6f c0 a8    	bset.b    0x6f, #0x6
    1ef4:	6f a0 a8    	bset.b    0x6f, #0x5
    1ef6:	70 20 a8    	bset.b    0x70, #0x1
    1ef8:	70 40 a8    	bset.b    0x70, #0x2
    1efa:	6f 80 a8    	bset.b    0x6f, #0x4
    1efc:	76 e0 a8    	bset.b    0x76, #0x7
    1efe:	74 a0 a8    	bset.b    0x74, #0x5
    1f00:	75 00 a8    	bset.b    0x75, #0x0
    1f02:	74 c0 a8    	bset.b    0x74, #0x6
    1f04:	74 e0 a8    	bset.b    0x74, #0x7
    1f06:	63 c0 a8    	bset.b    0x63, #0x6
    1f08:	63 a0 a8    	bset.b    0x63, #0x5
    1f0a:	64 20 a8    	bset.b    0x64, #0x1
    1f0c:	64 40 a8    	bset.b    0x64, #0x2
    1f0e:	63 80 a8    	bset.b    0x63, #0x4
    1f10:	6a e0 a8    	bset.b    0x6a, #0x7
    1f12:	68 a0 a8    	bset.b    0x68, #0x5
    1f14:	69 00 a8    	bset.b    0x69, #0x0
    1f16:	68 c0 a8    	bset.b    0x68, #0x6
    1f18:	68 e0 a8    	bset.b    0x68, #0x7
    1f1a:	86 60 a9    	bclr.b    0x86, #0x3
    1f1c:	96 60 a8    	bset.b    0x96, #0x3
    1f1e:	00 80 fa    	ulnk      
    1f20:	00 00 06    	return    

00001f22 <_rand_next>:
    1f22:	02 00 fa    	lnk       #0x2
    1f24:	b0 40 80    	mov.w     0x816, w0
    1f26:	c2 00 de    	lsr.w     w0, #0x2, w1
    1f28:	b0 40 80    	mov.w     0x816, w0
    1f2a:	80 80 68    	xor.w     w1, w0, w1
    1f2c:	b0 40 80    	mov.w     0x816, w0
    1f2e:	4d 00 de    	lsr.w     w0, #0xd, w0
    1f30:	80 80 68    	xor.w     w1, w0, w1
    1f32:	b0 40 80    	mov.w     0x816, w0
    1f34:	42 01 de    	lsr.w     w0, #0x2, w2
    1f36:	b0 40 80    	mov.w     0x816, w0
    1f38:	43 00 de    	lsr.w     w0, #0x3, w0
    1f3a:	00 00 61    	and.w     w2, w0, w0
    1f3c:	00 80 68    	xor.w     w1, w0, w0
    1f3e:	61 0f 60    	and.w     w0, #0x1, [w14]
    1f40:	b0 40 80    	mov.w     0x816, w0
    1f42:	80 00 d1    	lsr.w     w0, w1
    1f44:	1e 00 78    	mov.w     [w14], w0
    1f46:	4f 00 dd    	sl.w      w0, #0xf, w0
    1f48:	01 00 70    	ior.w     w0, w1, w0
    1f4a:	b0 40 88    	mov.w     w0, 0x816
    1f4c:	00 80 fa    	ulnk      
    1f4e:	00 00 06    	return    

00001f50 <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    1f50:	08 00 fa    	lnk       #0x8
    1f52:	20 07 98    	mov.w     w0, [w14+4]
    1f54:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    1f56:	60 00 b8    	mul.uu    w0, #0x0, w0
    1f58:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    1f5a:	05 00 37    	bra       0x1f66 <.L2>

00001f5c <.L3>:
        __asm__("nop");
    1f5c:	00 00 00    	nop       
        count +=1;
    1f5e:	12 00 20    	mov.w     #0x1, w2
    1f60:	03 00 20    	mov.w     #0x0, w3
    1f62:	1e 0f 41    	add.w     w2, [w14], [w14]
    1f64:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00001f66 <.L2>:
    1f66:	2e 00 90    	mov.w     [w14+4], w0
    1f68:	be 00 90    	mov.w     [w14+6], w1
    1f6a:	1e 01 be    	mov.d     [w14], w2
    1f6c:	80 0f 51    	sub.w     w2, w0, [w15]
    1f6e:	81 8f 59    	subb.w    w3, w1, [w15]
    1f70:	f5 ff 39    	bra       NC, 0x1f5c <.L3>
    }
}
    1f72:	00 80 fa    	ulnk      
    1f74:	00 00 06    	return    

00001f76 <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    1f76:	04 00 fa    	lnk       #0x4
    1f78:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    1f7a:	1e 00 90    	mov.w     [w14+2], w0
    1f7c:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    1f7e:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    1f80:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    1f82:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    1f84:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    1f86:	80 13 80    	mov.w     0x270, w0
    1f88:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    1f8a:	36 00 07    	rcall     0x1ff8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1f8c:	00 80 fa    	ulnk      
    1f8e:	00 00 06    	return    

00001f90 <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    1f90:	02 00 fa    	lnk       #0x2
   int x = 0;
    1f92:	00 00 eb    	clr.w     w0
    1f94:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    1f96:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    1f98:	a0 00 20    	mov.w     #0xa, w0
    1f9a:	01 00 20    	mov.w     #0x0, w1
    1f9c:	d9 ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    1f9e:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    1fa0:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    1fa2:	07 00 37    	bra       0x1fb2 <.L6>

00001fa4 <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    1fa4:	10 00 20    	mov.w     #0x1, w0
    1fa6:	01 00 20    	mov.w     #0x0, w1
    1fa8:	d3 ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
      x++;
    1faa:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    1fac:	1e 00 78    	mov.w     [w14], w0
    1fae:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1fb0:	05 00 3c    	bra       GT, 0x1fbc <.L9>

00001fb2 <.L6>:
    1fb2:	b0 13 80    	mov.w     0x276, w0
    1fb4:	61 00 60    	and.w     w0, #0x1, w0
    1fb6:	00 00 e0    	cp0.w     w0
    1fb8:	f5 ff 3a    	bra       NZ, 0x1fa4 <.L8>
    1fba:	01 00 37    	bra       0x1fbe <.L7>

00001fbc <.L9>:
      break;
    1fbc:	00 00 00    	nop       

00001fbe <.L7>:
   }
   delay_by_nop(2);
    1fbe:	20 00 20    	mov.w     #0x2, w0
    1fc0:	01 00 20    	mov.w     #0x0, w1
    1fc2:	c6 ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    1fc4:	00 80 fa    	ulnk      
    1fc6:	00 00 06    	return    

00001fc8 <_i2c_restart>:

void i2c_restart(void){
    1fc8:	02 00 fa    	lnk       #0x2
   int x = 0;
    1fca:	00 00 eb    	clr.w     w0
    1fcc:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    1fce:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    1fd0:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    1fd2:	07 00 37    	bra       0x1fe2 <.L11>

00001fd4 <.L13>:
      delay_by_nop(1);
    1fd4:	10 00 20    	mov.w     #0x1, w0
    1fd6:	01 00 20    	mov.w     #0x0, w1
    1fd8:	bb ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
      x++;
    1fda:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    1fdc:	1e 00 78    	mov.w     [w14], w0
    1fde:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1fe0:	05 00 3c    	bra       GT, 0x1fec <.L14>

00001fe2 <.L11>:
    1fe2:	b0 13 80    	mov.w     0x276, w0
    1fe4:	62 00 60    	and.w     w0, #0x2, w0
    1fe6:	00 00 e0    	cp0.w     w0
    1fe8:	f5 ff 3a    	bra       NZ, 0x1fd4 <.L13>
    1fea:	01 00 37    	bra       0x1fee <.L12>

00001fec <.L14>:
    1fec:	00 00 00    	nop       

00001fee <.L12>:
   }
   delay_by_nop(2);
    1fee:	20 00 20    	mov.w     #0x2, w0
    1ff0:	01 00 20    	mov.w     #0x0, w1
    1ff2:	ae ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    1ff4:	00 80 fa    	ulnk      
    1ff6:	00 00 06    	return    

00001ff8 <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    1ff8:	02 00 fa    	lnk       #0x2
   int x = 0;
    1ffa:	00 00 eb    	clr.w     w0
    1ffc:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    1ffe:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    2000:	07 00 37    	bra       0x2010 <.L16>

00002002 <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    2002:	10 00 20    	mov.w     #0x1, w0
    2004:	01 00 20    	mov.w     #0x0, w1
    2006:	a4 ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
      x ++;
    2008:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    200a:	1e 00 78    	mov.w     [w14], w0
    200c:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    200e:	05 00 3c    	bra       GT, 0x201a <.L19>

00002010 <.L16>:
    2010:	b0 13 80    	mov.w     0x276, w0
    2012:	64 00 60    	and.w     w0, #0x4, w0
    2014:	00 00 e0    	cp0.w     w0
    2016:	f5 ff 3a    	bra       NZ, 0x2002 <.L18>
    2018:	01 00 37    	bra       0x201c <.L17>

0000201a <.L19>:
    201a:	00 00 00    	nop       

0000201c <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    201c:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    201e:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    2020:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    2022:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    2024:	40 01 20    	mov.w     #0x14, w0
    2026:	01 00 20    	mov.w     #0x0, w1
    2028:	93 ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
}
    202a:	00 80 fa    	ulnk      
    202c:	00 00 06    	return    

0000202e <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    202e:	04 00 fa    	lnk       #0x4
    2030:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    2032:	00 00 00    	nop       

00002034 <.L21>:
    2034:	c0 13 80    	mov.w     0x278, w0
    2036:	61 00 60    	and.w     w0, #0x1, w0
    2038:	00 00 e0    	cp0.w     w0
    203a:	fc ff 3a    	bra       NZ, 0x2034 <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    203c:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    203e:	1e 00 90    	mov.w     [w14+2], w0
    2040:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    2042:	00 00 eb    	clr.w     w0
    2044:	00 0f 78    	mov.w     w0, [w14]
    2046:	09 00 37    	bra       0x205a <.L22>

00002048 <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    2048:	c1 13 80    	mov.w     0x278, w1
    204a:	00 00 24    	mov.w     #0x4000, w0
    204c:	00 80 60    	and.w     w1, w0, w0
    204e:	00 00 e0    	cp0.w     w0
    2050:	09 00 32    	bra       Z, 0x2064 <.L29>
      delay_by_nop(1); }
    2052:	10 00 20    	mov.w     #0x1, w0
    2054:	01 00 20    	mov.w     #0x0, w1
    2056:	7c ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    2058:	1e 0f e8    	inc.w     [w14], [w14]

0000205a <.L22>:
    205a:	30 1f 20    	mov.w     #0x1f3, w0
    205c:	9e 00 78    	mov.w     [w14], w1
    205e:	80 8f 50    	sub.w     w1, w0, [w15]
    2060:	f3 ff 34    	bra       LE, 0x2048 <.L25>
    2062:	01 00 37    	bra       0x2066 <.L24>

00002064 <.L29>:
    2064:	00 00 00    	nop       

00002066 <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    2066:	40 1f 20    	mov.w     #0x1f4, w0
    2068:	9e 00 78    	mov.w     [w14], w1
    206a:	80 8f 50    	sub.w     w1, w0, [w15]
    206c:	02 00 3a    	bra       NZ, 0x2072 <.L26>
        return(1); }    // return 1 to indicate failure
    206e:	10 c0 b3    	mov.b     #0x1, w0
    2070:	0c 00 37    	bra       0x208a <.L27>

00002072 <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    2072:	c1 13 80    	mov.w     0x278, w1
    2074:	00 00 28    	mov.w     #0x8000, w0
    2076:	00 80 60    	and.w     w1, w0, w0
    2078:	00 00 e0    	cp0.w     w0
    207a:	03 00 32    	bra       Z, 0x2082 <.L28>
      reset_i2c_bus();
    207c:	bd ff 07    	rcall     0x1ff8 <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    207e:	10 c0 b3    	mov.b     #0x1, w0
    2080:	04 00 37    	bra       0x208a <.L27>

00002082 <.L28>:

   delay_by_nop(2);
    2082:	20 00 20    	mov.w     #0x2, w0
    2084:	01 00 20    	mov.w     #0x0, w1
    2086:	64 ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   return(0);
    2088:	00 40 eb    	clr.b     w0

0000208a <.L27>:
}
    208a:	00 80 fa    	ulnk      
    208c:	00 00 06    	return    

0000208e <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    208e:	04 00 fa    	lnk       #0x4
   int i = 0;
    2090:	00 00 eb    	clr.w     w0
    2092:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2094:	00 40 eb    	clr.b     w0
    2096:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    2098:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    209a:	05 00 37    	bra       0x20a6 <.L31>

0000209c <.L33>:
      i ++;
    209c:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    209e:	00 7d 20    	mov.w     #0x7d0, w0
    20a0:	9e 00 78    	mov.w     [w14], w1
    20a2:	80 8f 50    	sub.w     w1, w0, [w15]
    20a4:	05 00 3c    	bra       GT, 0x20b0 <.L34>

000020a6 <.L31>:
    20a6:	c0 13 80    	mov.w     0x278, w0
    20a8:	62 00 60    	and.w     w0, #0x2, w0
    20aa:	00 00 e0    	cp0.w     w0
    20ac:	f7 ff 32    	bra       Z, 0x209c <.L33>
    20ae:	01 00 37    	bra       0x20b2 <.L32>

000020b0 <.L34>:
    20b0:	00 00 00    	nop       

000020b2 <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    20b2:	80 13 80    	mov.w     0x270, w0
    20b4:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    20b6:	2e 40 90    	mov.b     [w14+2], w0
}
    20b8:	00 80 fa    	ulnk      
    20ba:	00 00 06    	return    

000020bc <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    20bc:	04 00 fa    	lnk       #0x4
   int i = 0;
    20be:	00 00 eb    	clr.w     w0
    20c0:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    20c2:	00 40 eb    	clr.b     w0
    20c4:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    20c6:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    20c8:	05 00 37    	bra       0x20d4 <.L36>

000020ca <.L38>:
      i++;
    20ca:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    20cc:	00 7d 20    	mov.w     #0x7d0, w0
    20ce:	9e 00 78    	mov.w     [w14], w1
    20d0:	80 8f 50    	sub.w     w1, w0, [w15]
    20d2:	05 00 3c    	bra       GT, 0x20de <.L39>

000020d4 <.L36>:
    20d4:	c0 13 80    	mov.w     0x278, w0
    20d6:	62 00 60    	and.w     w0, #0x2, w0
    20d8:	00 00 e0    	cp0.w     w0
    20da:	f7 ff 32    	bra       Z, 0x20ca <.L38>
    20dc:	01 00 37    	bra       0x20e0 <.L37>

000020de <.L39>:
    20de:	00 00 00    	nop       

000020e0 <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    20e0:	80 13 80    	mov.w     0x270, w0
    20e2:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    20e4:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    20e6:	a0 00 20    	mov.w     #0xa, w0
    20e8:	01 00 20    	mov.w     #0x0, w1
    20ea:	32 ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   return data;
    20ec:	2e 40 90    	mov.b     [w14+2], w0
}
    20ee:	00 80 fa    	ulnk      
    20f0:	00 00 06    	return    

000020f2 <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    20f2:	04 00 fa    	lnk       #0x4
   int i = 0;
    20f4:	00 00 eb    	clr.w     w0
    20f6:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    20f8:	00 40 eb    	clr.b     w0
    20fa:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    20fc:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    20fe:	05 00 37    	bra       0x210a <.L41>

00002100 <.L43>:
      i++;
    2100:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2102:	00 7d 20    	mov.w     #0x7d0, w0
    2104:	9e 00 78    	mov.w     [w14], w1
    2106:	80 8f 50    	sub.w     w1, w0, [w15]
    2108:	05 00 3c    	bra       GT, 0x2114 <.L44>

0000210a <.L41>:
    210a:	c0 13 80    	mov.w     0x278, w0
    210c:	62 00 60    	and.w     w0, #0x2, w0
    210e:	00 00 e0    	cp0.w     w0
    2110:	f7 ff 32    	bra       Z, 0x2100 <.L43>
    2112:	01 00 37    	bra       0x2116 <.L42>

00002114 <.L44>:
    2114:	00 00 00    	nop       

00002116 <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    2116:	80 13 80    	mov.w     0x270, w0
    2118:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    211a:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    211c:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    211e:	a0 00 20    	mov.w     #0xa, w0
    2120:	01 00 20    	mov.w     #0x0, w1
    2122:	16 ff 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   return data;
    2124:	2e 40 90    	mov.b     [w14+2], w0
}
    2126:	00 80 fa    	ulnk      
    2128:	00 00 06    	return    

0000212a <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    212a:	04 00 fa    	lnk       #0x4
    212c:	00 4f 78    	mov.b     w0, [w14]
    212e:	11 47 98    	mov.b     w1, [w14+1]
    2130:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    2132:	2e ff 07    	rcall     0x1f90 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    2134:	1e 00 fb    	se        [w14], w0
    2136:	80 00 78    	mov.w     w0, w1
    2138:	e0 ff 2f    	mov.w     #0xfffe, w0
    213a:	00 80 60    	and.w     w1, w0, w0
    213c:	78 ff 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    213e:	1e 40 90    	mov.b     [w14+1], w0
    2140:	00 00 fb    	se        w0, w0
    2142:	75 ff 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    2144:	2e 40 90    	mov.b     [w14+2], w0
    2146:	00 00 fb    	se        w0, w0
    2148:	72 ff 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    214a:	56 ff 07    	rcall     0x1ff8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    214c:	00 80 fa    	ulnk      
    214e:	00 00 06    	return    

00002150 <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    2150:	04 00 fa    	lnk       #0x4
    2152:	20 47 98    	mov.b     w0, [w14+2]
    2154:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    2156:	1c ff 07    	rcall     0x1f90 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    2158:	2e 40 90    	mov.b     [w14+2], w0
    215a:	00 00 fb    	se        w0, w0
    215c:	68 ff 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    215e:	3e 40 90    	mov.b     [w14+3], w0
    2160:	00 00 fb    	se        w0, w0
    2162:	65 ff 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    2164:	a0 00 20    	mov.w     #0xa, w0
    2166:	01 00 20    	mov.w     #0x0, w1
    2168:	f3 fe 07    	rcall     0x1f50 <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
   i2c_restart();
    216a:	2e ff 07    	rcall     0x1fc8 <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    216c:	2e 40 90    	mov.b     [w14+2], w0
    216e:	00 04 a0    	bset.b    w0, #0x0
    2170:	00 00 fb    	se        w0, w0
    2172:	5d ff 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    2174:	8c ff 07    	rcall     0x208e <_i2c_read> <.LFB6> <.LFE5>
    2176:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    2178:	3f ff 07    	rcall     0x1ff8 <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    217a:	1e 40 78    	mov.b     [w14], w0
}
    217c:	00 80 fa    	ulnk      
    217e:	00 00 06    	return    

00002180 <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is not there, 0 means it is there
unsigned char I2Cpoll(char addr){
    2180:	04 00 fa    	lnk       #0x4
    2182:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    2184:	00 40 eb    	clr.b     w0
    2186:	00 4f 78    	mov.b     w0, [w14]
   i2c_start();
    2188:	03 ff 07    	rcall     0x1f90 <_i2c_start> <.LFB2> <.LFE1>
   temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    218a:	2e 40 90    	mov.b     [w14+2], w0
    218c:	00 00 fb    	se        w0, w0
    218e:	80 00 78    	mov.w     w0, w1
    2190:	e0 ff 2f    	mov.w     #0xfffe, w0
    2192:	00 80 60    	and.w     w1, w0, w0
    2194:	4c ff 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
    2196:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c_bus();
    2198:	2f ff 07    	rcall     0x1ff8 <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    219a:	1e 40 78    	mov.b     [w14], w0
}
    219c:	00 80 fa    	ulnk      
    219e:	00 00 06    	return    

000021a0 <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    21a0:	08 00 fa    	lnk       #0x8
    21a2:	20 47 98    	mov.b     w0, [w14+2]
    21a4:	21 07 98    	mov.w     w1, [w14+4]
    21a6:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    21a8:	00 40 eb    	clr.b     w0
    21aa:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    21ac:	f1 fe 07    	rcall     0x1f90 <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    21ae:	2e 40 90    	mov.b     [w14+2], w0
    21b0:	00 00 fb    	se        w0, w0
    21b2:	80 00 78    	mov.w     w0, w1
    21b4:	e0 ff 2f    	mov.w     #0xfffe, w0
    21b6:	00 80 60    	and.w     w1, w0, w0
    21b8:	3a ff 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
    21ba:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    21bc:	00 40 eb    	clr.b     w0
    21be:	10 47 98    	mov.b     w0, [w14+1]
    21c0:	0d 00 37    	bra       0x21dc <.L49>

000021c2 <.L50>:
    err |= send_i2c_byte(dat[j]);
    21c2:	1e 40 90    	mov.b     [w14+1], w0
    21c4:	00 80 fb    	ze        w0, w0
    21c6:	ae 00 90    	mov.w     [w14+4], w1
    21c8:	00 80 40    	add.w     w1, w0, w0
    21ca:	10 40 78    	mov.b     [w0], w0
    21cc:	00 00 fb    	se        w0, w0
    21ce:	2f ff 07    	rcall     0x202e <_send_i2c_byte> <.LFB5> <.LFE4>
    21d0:	9e 40 78    	mov.b     [w14], w1
    21d2:	01 40 70    	ior.b     w0, w1, w0
    21d4:	00 4f 78    	mov.b     w0, [w14]
    21d6:	1e 40 90    	mov.b     [w14+1], w0
    21d8:	00 40 e8    	inc.b     w0, w0
    21da:	10 47 98    	mov.b     w0, [w14+1]

000021dc <.L49>:
    21dc:	9e 40 90    	mov.b     [w14+1], w1
    21de:	6e 40 90    	mov.b     [w14+6], w0
    21e0:	80 cf 50    	sub.b     w1, w0, [w15]
    21e2:	ef ff 39    	bra       NC, 0x21c2 <.L50>
  }
  reset_i2c_bus();
    21e4:	09 ff 07    	rcall     0x1ff8 <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    21e6:	1e 40 78    	mov.b     [w14], w0
}
    21e8:	00 80 fa    	ulnk      
    21ea:	00 00 06    	return    
Disassembly of section .isr.text:

000021ec <__CNInterrupt>:
    21ec:	32 00 f8    	push      0x32
    21ee:	34 00 f8    	push      0x34
    21f0:	88 1f 78    	mov.w     w8, [w15++]
    21f2:	18 00 20    	mov.w     #0x1, w8
    21f4:	a8 01 88    	mov.w     w8, 0x34
    21f6:	08 20 20    	mov.w     #0x200, w8
    21f8:	98 01 88    	mov.w     w8, 0x32
    21fa:	4f 04 78    	mov.w     [--w15], w8
    21fc:	00 00 fa    	lnk       #0x0
    21fe:	86 60 a9    	bclr.b    0x86, #0x3
    2200:	06 21 ef    	clr.w     0x106
    2202:	84 e0 a9    	bclr.b    0x84, #0x7
    2204:	11 e1 a8    	bset.b    0x111, #0x7
    2206:	dc e2 a8    	bset.b    0x2dc, #0x7
    2208:	00 80 fa    	ulnk      
    220a:	34 00 f9    	pop       0x34
    220c:	32 00 f9    	pop       0x32
    220e:	00 40 06    	retfie    

00002210 <__T2Interrupt>:
    2210:	36 00 f8    	push      0x36
    2212:	80 9f be    	mov.d     w0, [w15++]
    2214:	82 9f be    	mov.d     w2, [w15++]
    2216:	84 9f be    	mov.d     w4, [w15++]
    2218:	86 9f be    	mov.d     w6, [w15++]
    221a:	32 00 f8    	push      0x32
    221c:	34 00 f8    	push      0x34
    221e:	10 00 20    	mov.w     #0x1, w0
    2220:	a0 01 88    	mov.w     w0, 0x34
    2222:	00 20 20    	mov.w     #0x200, w0
    2224:	90 01 88    	mov.w     w0, 0x32
    2226:	00 00 fa    	lnk       #0x0
    2228:	84 e0 a9    	bclr.b    0x84, #0x7
    222a:	11 e1 a9    	bclr.b    0x111, #0x7
    222c:	dc e2 a9    	bclr.b    0x2dc, #0x7
    222e:	d1 16 80    	mov.w     0x2da, w1
    2230:	00 02 20    	mov.w     #0x20, w0
    2232:	00 80 60    	and.w     w1, w0, w0
    2234:	00 00 e0    	cp0.w     w0
    2236:	0b 00 3a    	bra       NZ, 0x224e <.L41>
    2238:	10 c8 bf    	mov.b     0x810, WREG
    223a:	00 80 fb    	ze        w0, w0
    223c:	80 00 e8    	inc.w     w0, w1
    223e:	50 00 20    	mov.w     #0x5, w0
    2240:	00 01 78    	mov.w     w0, w2
    2242:	11 00 09    	repeat    #0x11
    2244:	82 00 d8    	div.sw    w1, w2
    2246:	80 00 fd    	exch      w0, w1
    2248:	00 40 78    	mov.b     w0, w0
    224a:	10 e8 b7    	mov.b     WREG, 0x810
    224c:	07 00 37    	bra       0x225c <.L42>

0000224e <.L41>:
    224e:	d0 16 80    	mov.w     0x2da, w0
    2250:	70 00 60    	and.w     w0, #0x10, w0
    2252:	00 00 e0    	cp0.w     w0
    2254:	03 00 3a    	bra       NZ, 0x225c <.L42>
    2256:	10 c8 bf    	mov.b     0x810, WREG
    2258:	00 40 e9    	dec.b     w0, w0
    225a:	10 e8 b7    	mov.b     WREG, 0x810

0000225c <.L42>:
    225c:	50 17 80    	mov.w     0x2ea, w0
    225e:	70 00 60    	and.w     w0, #0x10, w0
    2260:	00 00 e0    	cp0.w     w0
    2262:	0b 00 3a    	bra       NZ, 0x227a <.L43>
    2264:	11 c8 bf    	mov.b     0x811, WREG
    2266:	00 80 fb    	ze        w0, w0
    2268:	80 00 e8    	inc.w     w0, w1
    226a:	50 00 20    	mov.w     #0x5, w0
    226c:	00 01 78    	mov.w     w0, w2
    226e:	11 00 09    	repeat    #0x11
    2270:	82 00 d8    	div.sw    w1, w2
    2272:	80 00 fd    	exch      w0, w1
    2274:	00 40 78    	mov.b     w0, w0
    2276:	11 e8 b7    	mov.b     WREG, 0x811
    2278:	08 00 37    	bra       0x228a <.L44>

0000227a <.L43>:
    227a:	51 17 80    	mov.w     0x2ea, w1
    227c:	00 02 20    	mov.w     #0x20, w0
    227e:	00 80 60    	and.w     w1, w0, w0
    2280:	00 00 e0    	cp0.w     w0
    2282:	03 00 3a    	bra       NZ, 0x228a <.L44>
    2284:	11 c8 bf    	mov.b     0x811, WREG
    2286:	00 40 e9    	dec.b     w0, w0
    2288:	11 e8 b7    	mov.b     WREG, 0x811

0000228a <.L44>:
    228a:	51 16 80    	mov.w     0x2ca, w1
    228c:	00 00 28    	mov.w     #0x8000, w0
    228e:	00 80 60    	and.w     w1, w0, w0
    2290:	00 00 e0    	cp0.w     w0
    2292:	0b 00 3a    	bra       NZ, 0x22aa <.L45>
    2294:	12 c8 bf    	mov.b     0x812, WREG
    2296:	00 80 fb    	ze        w0, w0
    2298:	80 00 e8    	inc.w     w0, w1
    229a:	50 00 20    	mov.w     #0x5, w0
    229c:	00 01 78    	mov.w     w0, w2
    229e:	11 00 09    	repeat    #0x11
    22a0:	82 00 d8    	div.sw    w1, w2
    22a2:	80 00 fd    	exch      w0, w1
    22a4:	00 40 78    	mov.b     w0, w0
    22a6:	12 e8 b7    	mov.b     WREG, 0x812
    22a8:	07 00 37    	bra       0x22b8 <.L46>

000022aa <.L45>:
    22aa:	50 17 80    	mov.w     0x2ea, w0
    22ac:	68 00 60    	and.w     w0, #0x8, w0
    22ae:	00 00 e0    	cp0.w     w0
    22b0:	03 00 3a    	bra       NZ, 0x22b8 <.L46>
    22b2:	12 c8 bf    	mov.b     0x812, WREG
    22b4:	00 40 e9    	dec.b     w0, w0
    22b6:	12 e8 b7    	mov.b     WREG, 0x812

000022b8 <.L46>:
    22b8:	d1 16 80    	mov.w     0x2da, w1
    22ba:	00 10 20    	mov.w     #0x100, w0
    22bc:	00 80 60    	and.w     w1, w0, w0
    22be:	00 00 e0    	cp0.w     w0
    22c0:	0b 00 3a    	bra       NZ, 0x22d8 <.L47>
    22c2:	13 c8 bf    	mov.b     0x813, WREG
    22c4:	00 80 fb    	ze        w0, w0
    22c6:	80 00 e8    	inc.w     w0, w1
    22c8:	50 00 20    	mov.w     #0x5, w0
    22ca:	00 01 78    	mov.w     w0, w2
    22cc:	11 00 09    	repeat    #0x11
    22ce:	82 00 d8    	div.sw    w1, w2
    22d0:	80 00 fd    	exch      w0, w1
    22d2:	00 40 78    	mov.b     w0, w0
    22d4:	13 e8 b7    	mov.b     WREG, 0x813
    22d6:	08 00 37    	bra       0x22e8 <.L48>

000022d8 <.L47>:
    22d8:	d1 16 80    	mov.w     0x2da, w1
    22da:	00 80 20    	mov.w     #0x800, w0
    22dc:	00 80 60    	and.w     w1, w0, w0
    22de:	00 00 e0    	cp0.w     w0
    22e0:	03 00 3a    	bra       NZ, 0x22e8 <.L48>
    22e2:	13 c8 bf    	mov.b     0x813, WREG
    22e4:	00 40 e9    	dec.b     w0, w0
    22e6:	13 e8 b7    	mov.b     WREG, 0x813

000022e8 <.L48>:
    22e8:	d1 16 80    	mov.w     0x2da, w1
    22ea:	00 20 20    	mov.w     #0x200, w0
    22ec:	00 80 60    	and.w     w1, w0, w0
    22ee:	00 00 e0    	cp0.w     w0
    22f0:	0b 00 3a    	bra       NZ, 0x2308 <.L49>
    22f2:	14 c8 bf    	mov.b     0x814, WREG
    22f4:	00 80 fb    	ze        w0, w0
    22f6:	80 00 e8    	inc.w     w0, w1
    22f8:	50 00 20    	mov.w     #0x5, w0
    22fa:	00 01 78    	mov.w     w0, w2
    22fc:	11 00 09    	repeat    #0x11
    22fe:	82 00 d8    	div.sw    w1, w2
    2300:	80 00 fd    	exch      w0, w1
    2302:	00 40 78    	mov.b     w0, w0
    2304:	14 e8 b7    	mov.b     WREG, 0x814
    2306:	08 00 37    	bra       0x2318 <.L50>

00002308 <.L49>:
    2308:	d1 16 80    	mov.w     0x2da, w1
    230a:	00 40 20    	mov.w     #0x400, w0
    230c:	00 80 60    	and.w     w1, w0, w0
    230e:	00 00 e0    	cp0.w     w0
    2310:	03 00 3a    	bra       NZ, 0x2318 <.L50>
    2312:	14 c8 bf    	mov.b     0x814, WREG
    2314:	00 40 e9    	dec.b     w0, w0
    2316:	14 e8 b7    	mov.b     WREG, 0x814

00002318 <.L50>:
    2318:	b1 fd 07    	rcall     0x1e7c <_updateDisplay> <.LFB8> <.LFE5>
    231a:	00 80 fa    	ulnk      
    231c:	34 00 f9    	pop       0x34
    231e:	32 00 f9    	pop       0x32
    2320:	4f 03 be    	mov.d     [--w15], w6
    2322:	4f 02 be    	mov.d     [--w15], w4
    2324:	4f 01 be    	mov.d     [--w15], w2
    2326:	4f 00 be    	mov.d     [--w15], w0
    2328:	36 00 f9    	pop       0x36
    232a:	00 40 06    	retfie    

0000232c <__SI2C3Interrupt>:
uint8_t lose_flag = 0;

volatile I2CSTATE i2c3_state = STATE_WAIT_FOR_ADDR;

void __attribute__((interrupt, auto_psv)) _SI2C3Interrupt(void) {
    232c:	80 9f be    	mov.d     w0, [w15++]
    232e:	32 00 f8    	push      0x32
    2330:	34 00 f8    	push      0x34
    2332:	10 00 20    	mov.w     #0x1, w0
    2334:	a0 01 88    	mov.w     w0, 0x34
    2336:	00 20 20    	mov.w     #0x200, w0
    2338:	90 01 88    	mov.w     w0, 0x32
    233a:	02 00 fa    	lnk       #0x2
    uint8_t u8_c;
    _SI2C3IF = 0;
    233c:	8e 80 a9    	bclr.b    0x8e, #0x4

    switch (i2c3_state) {
    233e:	40 41 80    	mov.w     0x828, w0
    2340:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2342:	23 00 32    	bra       Z, 0x238a <.L4>
    2344:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2346:	03 00 39    	bra       NC, 0x234e <.L3>
    2348:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    234a:	4b 00 32    	bra       Z, 0x23e2 <.L5>
    234c:	4c 00 37    	bra       0x23e6 <.L17>

0000234e <.L3>:

    case STATE_WAIT_FOR_ADDR:
        u8_c = I2C3RCV;     //clear RBF bit for address
    234e:	80 13 80    	mov.w     0x270, w0
    2350:	00 4f 78    	mov.b     w0, [w14]
        if (I2C3STATbits.R_W) {   // if data transfer is out from slave // check R/W bit of address byte
    2352:	c0 13 80    	mov.w     0x278, w0
    2354:	64 00 60    	and.w     w0, #0x4, w0
    2356:	00 00 e0    	cp0.w     w0
    2358:	15 00 32    	bra       Z, 0x2384 <.L6>
            _byte_to_master = (complete_flag << 7) | ((num_strikes & 0b111) << 4) | (error_code & 0b1111) ; // assemble
    235a:	21 c8 bf    	mov.b     0x821, WREG
    235c:	00 80 fb    	ze        w0, w0
    235e:	47 00 dd    	sl.w      w0, #0x7, w0
    2360:	80 40 78    	mov.b     w0, w1
    2362:	22 c8 bf    	mov.b     0x822, WREG
    2364:	00 80 fb    	ze        w0, w0
    2366:	67 00 60    	and.w     w0, #0x7, w0
    2368:	44 00 dd    	sl.w      w0, #0x4, w0
    236a:	00 40 78    	mov.b     w0, w0
    236c:	80 c0 70    	ior.b     w1, w0, w1
    236e:	23 c8 bf    	mov.b     0x823, WREG
    2370:	6f 40 60    	and.b     w0, #0xf, w0
    2372:	00 c0 70    	ior.b     w1, w0, w0
    2374:	1e e8 b7    	mov.b     WREG, 0x81e
            I2C3TRN = _byte_to_master;   //Set transmit register to first data byte to send back to master
    2376:	1e c8 bf    	mov.b     0x81e, WREG
    2378:	00 80 fb    	ze        w0, w0
    237a:	90 13 88    	mov.w     w0, 0x272
            I2C3CONbits.SCLREL = 1;    //  SCL released during slave read so master can drive it
    237c:	77 82 a8    	bset.b    0x277, #0x4
            i2c3_state = STATE_END_TRANSACTION; //goes to read transaction
    237e:	20 00 20    	mov.w     #0x2, w0
    2380:	40 41 88    	mov.w     w0, 0x828
        }
        else i2c3_state = STATE_RECEIVE_FROM_MASTER;     // goes to write transaction
        break;
    2382:	32 00 37    	bra       0x23e8 <.L1>

00002384 <.L6>:
    2384:	10 00 20    	mov.w     #0x1, w0
    2386:	40 41 88    	mov.w     w0, 0x828
    2388:	2f 00 37    	bra       0x23e8 <.L1>

0000238a <.L4>:

    case STATE_RECEIVE_FROM_MASTER:     // write transaction state, character arrived, place in buffer
        _data_from_master = I2C3RCV;        //read the byte
    238a:	80 13 80    	mov.w     0x270, w0
    238c:	00 40 78    	mov.b     w0, w0
    238e:	1f e8 b7    	mov.b     WREG, 0x81f
        switch (_data_from_master >> 5){
    2390:	1f c8 bf    	mov.b     0x81f, WREG
    2392:	00 80 fb    	ze        w0, w0
    2394:	45 00 de    	lsr.w     w0, #0x5, w0
    2396:	00 40 78    	mov.b     w0, w0
    2398:	00 80 fb    	ze        w0, w0
    239a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    239c:	1a 00 32    	bra       Z, 0x23d2 <.L12>
    239e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    23a0:	05 00 3c    	bra       GT, 0x23ac <.L15>
    23a2:	00 00 e0    	cp0.w     w0
    23a4:	10 00 32    	bra       Z, 0x23c6 <.L10>
    23a6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    23a8:	11 00 32    	bra       Z, 0x23cc <.L11>
    23aa:	16 00 37    	bra       0x23d8 <.L9>

000023ac <.L15>:
    23ac:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    23ae:	03 00 32    	bra       Z, 0x23b6 <.L13>
    23b0:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    23b2:	05 00 32    	bra       Z, 0x23be <.L14>
    23b4:	11 00 37    	bra       0x23d8 <.L9>

000023b6 <.L13>:
            case HEADER_SERIAL_NUMBER: // 100
                serial_number = _data_from_master & 0b00011111 ;
    23b6:	1f c8 bf    	mov.b     0x81f, WREG
    23b8:	7f 40 60    	and.b     w0, #0x1f, w0
    23ba:	20 e8 b7    	mov.b     WREG, 0x820
            break;
    23bc:	10 00 37    	bra       0x23de <.L16>

000023be <.L14>:
            case HEADER_NUM_STRIKES:    // 111
                num_strikes = _data_from_master & 0b00011111 ;
    23be:	1f c8 bf    	mov.b     0x81f, WREG
    23c0:	7f 40 60    	and.b     w0, #0x1f, w0
    23c2:	22 e8 b7    	mov.b     WREG, 0x822
            break;
    23c4:	0c 00 37    	bra       0x23de <.L16>

000023c6 <.L10>:
            case HEADER_START_GAME:    // 000
                start_flag = 1 ;
    23c6:	10 c0 b3    	mov.b     #0x1, w0
    23c8:	24 e8 b7    	mov.b     WREG, 0x824
            break;
    23ca:	09 00 37    	bra       0x23de <.L16>

000023cc <.L11>:
            case HEADER_END_WIN:    // 001
                win_flag = 1 ;
    23cc:	10 c0 b3    	mov.b     #0x1, w0
    23ce:	25 e8 b7    	mov.b     WREG, 0x825
            break;
    23d0:	06 00 37    	bra       0x23de <.L16>

000023d2 <.L12>:
            case HEADER_END_LOSE:    // 010
                lose_flag = 1 ;
    23d2:	10 c0 b3    	mov.b     #0x1, w0
    23d4:	26 e8 b7    	mov.b     WREG, 0x826
            break;
    23d6:	03 00 37    	bra       0x23de <.L16>

000023d8 <.L9>:

            default: error_code ++ ;
    23d8:	23 c8 bf    	mov.b     0x823, WREG
    23da:	00 40 e8    	inc.b     w0, w0
    23dc:	23 e8 b7    	mov.b     WREG, 0x823

000023de <.L16>:

        }
        i2c3_state = STATE_WAIT_FOR_ADDR;    // go to wait for next transaction
    23de:	28 28 ef    	clr.w     0x828
        break;
    23e0:	03 00 37    	bra       0x23e8 <.L1>

000023e2 <.L5>:

    case STATE_END_TRANSACTION:  //interrupt for last character finished shifting out to master
        i2c3_state = STATE_WAIT_FOR_ADDR;
    23e2:	28 28 ef    	clr.w     0x828
        break;
    23e4:	01 00 37    	bra       0x23e8 <.L1>

000023e6 <.L17>:

    default:
        i2c3_state = STATE_WAIT_FOR_ADDR;
    23e6:	28 28 ef    	clr.w     0x828

000023e8 <.L1>:

    } // end of switch statements
}   // end of ISR
    23e8:	00 80 fa    	ulnk      
    23ea:	34 00 f9    	pop       0x34
    23ec:	32 00 f9    	pop       0x32
    23ee:	4f 00 be    	mov.d     [--w15], w0
    23f0:	00 40 06    	retfie    
Disassembly of section .text:

000023f2 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    23f2:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    23f4:	00 10 20    	mov.w     #0x100, w0
    23f6:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    23f8:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    23fa:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    23fc:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    23fe:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    2400:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    2402:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    2404:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    2406:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    2408:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    240a:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    240c:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    240e:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    2410:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    2412:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    2414:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    2416:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    2418:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    241a:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    241c:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    241e:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    2420:	f0 03 20    	mov.w     #0x3f, w0
    2422:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    2424:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    2426:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    2428:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    242a:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    242c:	00 0e 20    	mov.w     #0xe0, w0
    242e:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    2430:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    2432:	00 c4 20    	mov.w     #0xc40, w0
    2434:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    2436:	50 00 20    	mov.w     #0x5, w0
    2438:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    243a:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    243c:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    243e:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    2440:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2442:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    2444:	e8 22 a9    	bclr.b    0x2e8, #0x1
    2446:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    2448:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    244a:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    244c:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    244e:	00 80 fa    	ulnk      
    2450:	00 00 06    	return    

00002452 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    2452:	02 00 fa    	lnk       #0x2
    2454:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    2456:	9e 00 78    	mov.w     [w14], w1
    2458:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    245a:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    245c:	00 00 00    	nop       

0000245e <.L3>:
    245e:	00 19 80    	mov.w     0x320, w0
    2460:	61 00 60    	and.w     w0, #0x1, w0
    2462:	00 00 e0    	cp0.w     w0
    2464:	fc ff 32    	bra       Z, 0x245e <.L3>
    return ADC1BUF0;
    2466:	00 18 80    	mov.w     0x300, w0
}
    2468:	00 80 fa    	ulnk      
    246a:	00 00 06    	return    

0000246c <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    246c:	02 00 fa    	lnk       #0x2
    246e:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    2470:	1e 00 78    	mov.w     [w14], w0
    2472:	48 00 de    	lsr.w     w0, #0x8, w0
    2474:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    2476:	1e 00 78    	mov.w     [w14], w0
    2478:	44 00 de    	lsr.w     w0, #0x4, w0
    247a:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    247c:	1e 00 78    	mov.w     [w14], w0
    247e:	42 00 de    	lsr.w     w0, #0x2, w0
    2480:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    2482:	1e 00 78    	mov.w     [w14], w0
    2484:	00 00 d1    	lsr.w     w0, w0
    2486:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    2488:	1e 00 78    	mov.w     [w14], w0
    248a:	00 40 78    	mov.b     w0, w0
    248c:	61 40 60    	and.b     w0, #0x1, w0
}
    248e:	00 80 fa    	ulnk      
    2490:	00 00 06    	return    
Disassembly of section .dinit:

00002492 <.dinit>:
    2492:	3a 08 00    	nop       
    2494:	06 00 00    	nop       
    2496:	80 00 00    	nop       
    2498:	00 08 00    	nop       
    249a:	1e 00 00    	nop       
    249c:	80 00 00    	nop       
    249e:	2a 08 00    	nop       
    24a0:	10 00 00    	nop       
    24a2:	80 00 00    	nop       
    24a4:	1e 08 00    	nop       
    24a6:	0c 00 00    	nop       
    24a8:	80 00 00    	nop       
    24aa:	00 00 00    	nop       
Disassembly of section .isr:

000024ac <__DefaultInterrupt>:
    24ac:	00 40 da    	break     
    24ae:	00 00 fe    	reset     
