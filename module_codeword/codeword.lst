
codeword.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	ca 2a 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	ca 2a 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	ca 2a 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	ca 2a 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	ca 2a 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	ca 2a 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	ca 2a 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	ca 2a 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	ca 2a 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	ca 2a 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	ca 2a 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	ca 2a 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	ca 2a 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	ca 2a 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	ca 2a 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	ca 2a 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	ca 2a 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	ca 2a 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	ca 2a 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	ca 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	ca 2a 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	ca 2a 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	ca 2a 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	ca 2a 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	ca 2a 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	ca 2a 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	ca 2a 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	ca 2a 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	ca 2a 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	ca 2a 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	ca 2a 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	ca 2a 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	ca 2a 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	ca 2a 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	ca 2a 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	ca 2a 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	ca 2a 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	ca 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	ca 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	ca 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	ca 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	ca 2a 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	ca 2a 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	ca 2a 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	ca 2a 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	ca 2a 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	ca 2a 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	ca 2a 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	ca 2a 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	ca 2a 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	ca 2a 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	ca 2a 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	ca 2a 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	ca 2a 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	ca 2a 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	ca 2a 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	ca 2a 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	ca 2a 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	ca 2a 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	6f 05 21    	mov.w     #0x1056, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	81 00 07    	rcall     0x1228 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	40 aa 22    	mov.w     #0x2aa4, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	d4 15 02    	call      0x15d4 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	a0 3a 20    	mov.w     #0x3aa, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	72 18 04    	goto      0x1872 <_setup>
    1216:	00 00 00 
    1218:	ac 18 04    	goto      0x18ac <_run>
    121a:	00 00 00 
    121c:	7c 19 04    	goto      0x197c <_solved>
    121e:	00 00 00 
    1220:	ca 19 04    	goto      0x19ca <_end_win>
    1222:	00 00 00 
    1224:	f2 19 04    	goto      0x19f2 <_end_fail>
    1226:	00 00 00 

00001228 <__crt_start_mode>:
    1228:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	28 27 04    	goto      0x2728 <__T2Interrupt>
    1032:	00 00 00 
    1034:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	ae 29 04    	goto      0x29ae <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	4c 29 04    	goto      0x294c <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	04 27 04    	goto      0x2704 <__CNInterrupt>
    105a:	00 00 00 
    105c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	7c 28 04    	goto      0x287c <__SI2C2Interrupt>
    10b2:	00 00 00 
    10b4:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	ca 2a 04    	goto      0x2aca <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000922a <.LC2-0x2ee>:
    922a:	61 62       	.word 0x6261
    922c:	6f 75       	.word 0x756f
    922e:	74 00       	.word 0x74
    9230:	65 76       	.word 0x7665
    9232:	65 72       	.word 0x7265
    9234:	79 00       	.word 0x79
    9236:	6c 61       	.word 0x616c
    9238:	72 67       	.word 0x6772
    923a:	65 00       	.word 0x65
    923c:	70 6c       	.word 0x6c70
    923e:	61 6e       	.word 0x6e61
    9240:	74 00       	.word 0x74
    9242:	73 70       	.word 0x7073
    9244:	65 6c       	.word 0x6c65
    9246:	6c 00       	.word 0x6c
    9248:	74 68       	.word 0x6874
    924a:	65 73       	.word 0x7365
    924c:	65 00       	.word 0x65
    924e:	77 68       	.word 0x6877
    9250:	65 72       	.word 0x7265
    9252:	65 00       	.word 0x65
    9254:	61 66       	.word 0x6661
    9256:	74 65       	.word 0x6574
    9258:	72 00       	.word 0x72
    925a:	66 69       	.word 0x6966
    925c:	72 73       	.word 0x7372
    925e:	74 00       	.word 0x74
    9260:	6c 65       	.word 0x656c
    9262:	61 72       	.word 0x7261
    9264:	6e 00       	.word 0x6e
    9266:	70 6f       	.word 0x6f70
    9268:	69 6e       	.word 0x6e69
    926a:	74 00       	.word 0x74
    926c:	73 74       	.word 0x7473
    926e:	69 6c       	.word 0x6c69
    9270:	6c 00       	.word 0x6c
    9272:	74 68       	.word 0x6874
    9274:	69 6e       	.word 0x6e69
    9276:	67 00       	.word 0x67
    9278:	77 68       	.word 0x6877
    927a:	69 63       	.word 0x6369
    927c:	68 00       	.word 0x68
    927e:	61 67       	.word 0x6761
    9280:	61 69       	.word 0x6961
    9282:	6e 00       	.word 0x6e
    9284:	66 6f       	.word 0x6f66
    9286:	75 6e       	.word 0x6e75
    9288:	64 00       	.word 0x64
    928a:	6e 65       	.word 0x656e
    928c:	76 65       	.word 0x6576
    928e:	72 00       	.word 0x72
    9290:	72 69       	.word 0x6972
    9292:	67 68       	.word 0x6867
    9294:	74 00       	.word 0x74
    9296:	73 74       	.word 0x7473
    9298:	75 64       	.word 0x6475
    929a:	79 00       	.word 0x79
    929c:	74 68       	.word 0x6874
    929e:	69 6e       	.word 0x6e69
    92a0:	6b 00       	.word 0x6b
    92a2:	77 6f       	.word 0x6f77
    92a4:	72 6c       	.word 0x6c72
    92a6:	64 00       	.word 0x64
    92a8:	62 65       	.word 0x6562
    92aa:	6c 6f       	.word 0x6f6c
    92ac:	77 00       	.word 0x77
    92ae:	67 72       	.word 0x7267
    92b0:	65 61       	.word 0x6165
    92b2:	74 00       	.word 0x74
    92b4:	6f 74       	.word 0x746f
    92b6:	68 65       	.word 0x6568
    92b8:	72 00       	.word 0x72
    92ba:	73 6d       	.word 0x6d73
    92bc:	61 6c       	.word 0x6c61
    92be:	6c 00       	.word 0x6c
    92c0:	74 68       	.word 0x6874
    92c2:	65 69       	.word 0x6965
    92c4:	72 00       	.word 0x72
    92c6:	74 68       	.word 0x6874
    92c8:	72 65       	.word 0x6572
    92ca:	65 00       	.word 0x65
    92cc:	77 6f       	.word 0x6f77
    92ce:	75 6c       	.word 0x6c75
    92d0:	64 00       	.word 0x64
    92d2:	63 6f       	.word 0x6f63
    92d4:	75 6c       	.word 0x6c75
    92d6:	64 00       	.word 0x64
    92d8:	68 6f       	.word 0x6f68
    92da:	75 73       	.word 0x7375
    92dc:	65 00       	.word 0x65
    92de:	70 6c       	.word 0x6c70
    92e0:	61 63       	.word 0x6361
    92e2:	65 00       	.word 0x65
    92e4:	73 6f       	.word 0x6f73
    92e6:	75 6e       	.word 0x6e75
    92e8:	64 00       	.word 0x64
    92ea:	74 68       	.word 0x6874
    92ec:	65 72       	.word 0x7265
    92ee:	65 00       	.word 0x65
    92f0:	77 61       	.word 0x6177
    92f2:	74 65       	.word 0x6574
    92f4:	72 00       	.word 0x72
    92f6:	77 72       	.word 0x7277
    92f8:	69 74       	.word 0x7469
    92fa:	65 00       	.word 0x65
    92fc:	57 52       	.word 0x5257
    92fe:	49 54       	.word 0x5449
    9300:	45 47       	.word 0x4745
    9302:	59 51       	.word 0x5159
    9304:	57 56       	.word 0x5657
    9306:	4d 52       	.word 0x524d
    9308:	54 45       	.word 0x4554
    930a:	50 49       	.word 0x4950
    930c:	58 5a       	.word 0x5a58
    930e:	46 4d       	.word 0x4d46
    9310:	49 4a       	.word 0x4a49
    9312:	59 4a       	.word 0x4a59
    9314:	54 46       	.word 0x4654
    9316:	50 42       	.word 0x4250
    9318:	41 4d       	.word 0x4d41
    931a:	45 51       	.word 0x5145
    931c:	50 47       	.word 0x4750
    931e:	58 00       	.word 0x58
    9320:	53 54       	.word 0x5453
    9322:	49 4c       	.word 0x4c49
    9324:	4c 53       	.word 0x534c
    9326:	47 43       	.word 0x4347
    9328:	42 57       	.word 0x5742
    932a:	54 52       	.word 0x5254
    932c:	54 56       	.word 0x5654
    932e:	5a 53       	.word 0x535a
    9330:	4a 56       	.word 0x564a
    9332:	49 44       	.word 0x4449
    9334:	52 46       	.word 0x4652
    9336:	50 4c       	.word 0x4c50
    9338:	4a 4f       	.word 0x4f4a
    933a:	4b 55       	.word 0x554b
    933c:	53 49       	.word 0x4953
    933e:	4a 4c       	.word 0x4c4a
    9340:	41 46       	.word 0x4641
    9342:	5a 00       	.word 0x5a
    9344:	45 56       	.word 0x5645
    9346:	45 52       	.word 0x5245
    9348:	59 4b       	.word 0x4b59
    934a:	45 58       	.word 0x5845
    934c:	4d 59       	.word 0x594d
    934e:	5a 4d       	.word 0x4d5a
    9350:	53 43       	.word 0x4353
    9352:	54 56       	.word 0x5654
    9354:	50 41       	.word 0x4150
    9356:	47 4e       	.word 0x4e47
    9358:	44 45       	.word 0x4544
    935a:	46 44       	.word 0x4446
    935c:	48 45       	.word 0x4548
    935e:	52 51       	.word 0x5152
    9360:	4a 48       	.word 0x484a
    9362:	4d 57       	.word 0x574d
    9364:	4e 59       	.word 0x594e
    9366:	58 00       	.word 0x58
    9368:	57 4f       	.word 0x4f57
    936a:	52 4c       	.word 0x4c52
    936c:	44 47       	.word 0x4744
    936e:	57 51       	.word 0x5157
    9370:	41 50       	.word 0x5041
    9372:	4e 57       	.word 0x574e
    9374:	45 4f       	.word 0x4f45
    9376:	4b 4d       	.word 0x4d4b
    9378:	51 51       	.word 0x5151
    937a:	57 52       	.word 0x5257
    937c:	5a 59       	.word 0x595a
    937e:	4a 50       	.word 0x504a
    9380:	44 4c       	.word 0x4c44
    9382:	4a 42       	.word 0x424a
    9384:	49 4e       	.word 0x4e49
    9386:	53 49       	.word 0x4953
    9388:	43 44       	.word 0x4443
    938a:	48 00       	.word 0x48
    938c:	57 52       	.word 0x5257
    938e:	49 54       	.word 0x5449
    9390:	45 47       	.word 0x4745
    9392:	57 4a       	.word 0x4a57
    9394:	58 44       	.word 0x4458
    9396:	4c 5a       	.word 0x5a4c
    9398:	50 4c       	.word 0x4c50
    939a:	58 49       	.word 0x4958
    939c:	52 4a       	.word 0x4a52
    939e:	54 43       	.word 0x4354
    93a0:	49 46       	.word 0x4649
    93a2:	53 54       	.word 0x5453
    93a4:	46 48       	.word 0x4846
    93a6:	42 49       	.word 0x4942
    93a8:	4f 53       	.word 0x534f
    93aa:	51 58       	.word 0x5851
    93ac:	55 4a       	.word 0x4a55
    93ae:	45 00       	.word 0x45
    93b0:	46 4f       	.word 0x4f46
    93b2:	55 4e       	.word 0x4e55
    93b4:	44 5a       	.word 0x5a44
    93b6:	49 4a       	.word 0x4a49
    93b8:	43 45       	.word 0x4543
    93ba:	46 4f       	.word 0x4f46
    93bc:	47 4d       	.word 0x4d47
    93be:	51 59       	.word 0x5951
    93c0:	4e 51       	.word 0x514e
    93c2:	42 56       	.word 0x5642
    93c4:	45 55       	.word 0x5545
    93c6:	4a 5a       	.word 0x5a4a
    93c8:	4e 4f       	.word 0x4f4e
    93ca:	55 57       	.word 0x5755
    93cc:	4a 51       	.word 0x514a
    93ce:	47 4c       	.word 0x4c47
    93d0:	49 44       	.word 0x4449
    93d2:	50 00       	.word 0x50
    93d4:	43 4f       	.word 0x4f43
    93d6:	55 4c       	.word 0x4c55
    93d8:	44 44       	.word 0x4444
    93da:	58 43       	.word 0x4358
    93dc:	55 4a       	.word 0x4a55
    93de:	54 4f       	.word 0x4f54
    93e0:	5a 55       	.word 0x555a
    93e2:	50 51       	.word 0x5150
    93e4:	59 4d       	.word 0x4d59
    93e6:	4b 58       	.word 0x584b
    93e8:	56 55       	.word 0x5556
    93ea:	53 4c       	.word 0x4c53
    93ec:	4b 52       	.word 0x524b
    93ee:	51 56       	.word 0x5651
    93f0:	57 4d       	.word 0x4d57
    93f2:	48 44       	.word 0x4448
    93f4:	56 51       	.word 0x5156
    93f6:	4a 00       	.word 0x4a
    93f8:	54 48       	.word 0x4854
    93fa:	45 53       	.word 0x5345
    93fc:	45 58       	.word 0x5845
    93fe:	54 4b       	.word 0x4b54
    9400:	44 4c       	.word 0x4c44
    9402:	56 47       	.word 0x4756
    9404:	48 49       	.word 0x4948
    9406:	54 50       	.word 0x5054
    9408:	53 45       	.word 0x4553
    940a:	51 49       	.word 0x4951
    940c:	56 54       	.word 0x5456
    940e:	4d 45       	.word 0x454d
    9410:	48 44       	.word 0x4448
    9412:	4f 4e       	.word 0x4e4f
    9414:	53 56       	.word 0x5653
    9416:	59 4d       	.word 0x4d59
    9418:	45 46       	.word 0x4645
    941a:	42 00       	.word 0x42
    941c:	4f 54       	.word 0x544f
    941e:	48 45       	.word 0x4548
    9420:	52 52       	.word 0x5252
    9422:	49 42       	.word 0x4249
    9424:	4f 43       	.word 0x434f
    9426:	45 54       	.word 0x5445
    9428:	4e 52       	.word 0x524e
    942a:	4b 4a       	.word 0x4a4b
    942c:	42 4e       	.word 0x4e42
    942e:	4a 55       	.word 0x554a
    9430:	48 47       	.word 0x4748
    9432:	45 47       	.word 0x4745
    9434:	4a 56       	.word 0x564a
    9436:	57 4b       	.word 0x4b57
    9438:	45 4b       	.word 0x4b45
    943a:	44 56       	.word 0x5644
    943c:	52 50       	.word 0x5052
    943e:	4d 00       	.word 0x4d
    9440:	57 4f       	.word 0x4f57
    9442:	52 4c       	.word 0x4c52
    9444:	44 54       	.word 0x5444
    9446:	58 53       	.word 0x5358
    9448:	55 52       	.word 0x5255
    944a:	57 46       	.word 0x4657
    944c:	57 4f       	.word 0x4f57
    944e:	51 59       	.word 0x5951
    9450:	52 56       	.word 0x5652
    9452:	52 51       	.word 0x5152
    9454:	47 4e       	.word 0x4e47
    9456:	4a 59       	.word 0x594a
    9458:	42 4b       	.word 0x4b42
    945a:	4c 51       	.word 0x514c
    945c:	4f 48       	.word 0x484f
    945e:	58 44       	.word 0x4458
    9460:	45 49       	.word 0x4945
    9462:	51 00       	.word 0x51
    9464:	53 4d       	.word 0x4d53
    9466:	41 4c       	.word 0x4c41
    9468:	4c 49       	.word 0x494c
    946a:	56 52       	.word 0x5256
    946c:	58 53       	.word 0x5358
    946e:	55 58       	.word 0x5855
    9470:	44 43       	.word 0x4344
    9472:	4d 52       	.word 0x524d
    9474:	59 41       	.word 0x4159
    9476:	51 54       	.word 0x5451
    9478:	46 50       	.word 0x5046
    947a:	4a 56       	.word 0x564a
    947c:	50 48       	.word 0x4850
    947e:	46 4c       	.word 0x4c46
    9480:	58 51       	.word 0x5158
    9482:	4c 52       	.word 0x524c
    9484:	4f 42       	.word 0x424f
    9486:	48 00       	.word 0x48
    9488:	54 48       	.word 0x4854
    948a:	45 53       	.word 0x5345
    948c:	45 4b       	.word 0x4b45
    948e:	50 54       	.word 0x5450
    9490:	52 4c       	.word 0x4c52
    9492:	42 48       	.word 0x4842
    9494:	4b 56       	.word 0x564b
    9496:	55 4e       	.word 0x4e55
    9498:	44 51       	.word 0x5144
    949a:	47 4c       	.word 0x4c47
    949c:	45 4a       	.word 0x4a45
    949e:	53 58       	.word 0x5853
    94a0:	41 4d       	.word 0x4d41
    94a2:	53 56       	.word 0x5653
    94a4:	44 57       	.word 0x5744
    94a6:	41 4f       	.word 0x4f41
    94a8:	45 46       	.word 0x4645
    94aa:	4e 00       	.word 0x4e
    94ac:	57 52       	.word 0x5257
    94ae:	49 54       	.word 0x5449
    94b0:	45 56       	.word 0x5645
    94b2:	57 49       	.word 0x4957
    94b4:	58 59       	.word 0x5958
    94b6:	48 57       	.word 0x5748
    94b8:	4b 58       	.word 0x584b
    94ba:	42 47       	.word 0x4742
    94bc:	52 46       	.word 0x4652
    94be:	45 4c       	.word 0x4c45
    94c0:	59 49       	.word 0x4959
    94c2:	50 55       	.word 0x5550
    94c4:	41 44       	.word 0x4441
    94c6:	54 52       	.word 0x5254
    94c8:	4e 4c       	.word 0x4c4e
    94ca:	56 45       	.word 0x4556
    94cc:	41 51       	.word 0x5141
    94ce:	55 00       	.word 0x55
    94d0:	47 52       	.word 0x5247
    94d2:	45 41       	.word 0x4145
    94d4:	54 4c       	.word 0x4c54
    94d6:	4f 47       	.word 0x474f
    94d8:	4d 58       	.word 0x584d
    94da:	56 59       	.word 0x5956
    94dc:	43 4e       	.word 0x4e43
    94de:	52 57       	.word 0x5752
    94e0:	4b 48       	.word 0x484b
    94e2:	56 50       	.word 0x5056
    94e4:	45 42       	.word 0x4245
    94e6:	49 5a       	.word 0x5a49
    94e8:	41 50       	.word 0x5041
    94ea:	57 56       	.word 0x5657
    94ec:	46 57       	.word 0x5746
    94ee:	48 46       	.word 0x4648
    94f0:	53 54       	.word 0x5453
    94f2:	51 00       	.word 0x51
    94f4:	4f 54       	.word 0x544f
    94f6:	48 45       	.word 0x4548
    94f8:	52 46       	.word 0x4652
    94fa:	47 49       	.word 0x4947
    94fc:	4f 44       	.word 0x444f
    94fe:	48 42       	.word 0x4248
    9500:	54 50       	.word 0x5054
    9502:	58 53       	.word 0x5358
    9504:	49 43       	.word 0x4349
    9506:	47 45       	.word 0x4547
    9508:	4c 50       	.word 0x504c
    950a:	48 41       	.word 0x4148
    950c:	44 45       	.word 0x4544
    950e:	4a 49       	.word 0x494a
    9510:	5a 4e       	.word 0x4e5a
    9512:	41 50       	.word 0x5041
    9514:	4b 49       	.word 0x494b
    9516:	52 00       	.word 0x52

00009518 <.LC2>:
    9518:	00 20       	.word 0x2000

00009519 <.LC0>:
	...

00009520 <.LC1>:
    9520:	20 6f       	.word 0x6f20
    9522:	20 20       	.word 0x2020
    9524:	6f 20       	.word 0x206f
    9526:	20 6f       	.word 0x6f20
    9528:	20 20       	.word 0x2020
    952a:	6f 20       	.word 0x206f
    952c:	20 6f       	.word 0x6f20
    952e:	20 00       	.word 0x20
    9530:	00 20       	.word 0x2000

00009531 <.LC3>:
    9531:	00 00       	.word 0
    9533:	00 00       	.word 0
    9535:	00 00       	.word 0
    9537:	00 00       	.word 0
    9539:	00 00       	.word 0
    953b:	00 00       	.word 0
    953d:	00 00       	.word 0
    953f:	00 00       	.word 0
	...

00009542 <.LC0>:
    9542:	20 20       	.word 0x2020
    9544:	20 20       	.word 0x2020
    9546:	20 20       	.word 0x2020
    9548:	20 20       	.word 0x2020
    954a:	20 20       	.word 0x2020
    954c:	20 20       	.word 0x2020
    954e:	20 20       	.word 0x2020
    9550:	20 20       	.word 0x2020
    9552:	20 20       	.word 0x2020
    9554:	20 20       	.word 0x2020
    9556:	20 20       	.word 0x2020
    9558:	20 20       	.word 0x2020
    955a:	20 20       	.word 0x2020
    955c:	20 20       	.word 0x2020
    955e:	20 20       	.word 0x2020
    9560:	20 20       	.word 0x2020
    9562:	20 20       	.word 0x2020
    9564:	20 20       	.word 0x2020
    9566:	20 20       	.word 0x2020
    9568:	20 20       	.word 0x2020
    956a:	20 20       	.word 0x2020
    956c:	20 20       	.word 0x2020
    956e:	20 20       	.word 0x2020
    9570:	20 20       	.word 0x2020
    9572:	20 20       	.word 0x2020
    9574:	20 20       	.word 0x2020
    9576:	20 20       	.word 0x2020
    9578:	20 20       	.word 0x2020
    957a:	00 20       	.word 0x2000

0000957b <.LC1>:
    957b:	00 00       	.word 0
    957d:	00 00       	.word 0
    957f:	00 00       	.word 0
    9581:	00 00       	.word 0
    9583:	00 00       	.word 0
    9585:	00 00       	.word 0
    9587:	00 00       	.word 0
    9589:	00 00       	.word 0
	...

0000958c <.LC2>:
    958c:	7a 79       	.word 0x797a
    958e:	78 77       	.word 0x7778
    9590:	76 75       	.word 0x7576
    9592:	74 73       	.word 0x7374
    9594:	72 71       	.word 0x7172
    9596:	70 6f       	.word 0x6f70
    9598:	6e 6d       	.word 0x6d6e
    959a:	6c 6b       	.word 0x6b6c
    959c:	6a 69       	.word 0x696a
    959e:	68 67       	.word 0x6768
    95a0:	66 65       	.word 0x6566
    95a2:	64 63       	.word 0x6364
    95a4:	62 61       	.word 0x6162
    95a6:	39 38       	.word 0x3839
    95a8:	37 36       	.word 0x3637
    95aa:	35 34       	.word 0x3435
    95ac:	33 32       	.word 0x3233
    95ae:	31 30       	.word 0x3031
    95b0:	31 32       	.word 0x3231
    95b2:	33 34       	.word 0x3433
    95b4:	35 36       	.word 0x3635
    95b6:	37 38       	.word 0x3837
    95b8:	39 61       	.word 0x6139
    95ba:	62 63       	.word 0x6362
    95bc:	64 65       	.word 0x6564
    95be:	66 67       	.word 0x6766
    95c0:	68 69       	.word 0x6968
    95c2:	6a 6b       	.word 0x6b6a
    95c4:	6c 6d       	.word 0x6d6c
    95c6:	6e 6f       	.word 0x6f6e
    95c8:	70 71       	.word 0x7170
    95ca:	72 73       	.word 0x7372
    95cc:	74 75       	.word 0x7574
    95ce:	76 77       	.word 0x7776
    95d0:	78 79       	.word 0x7978
    95d2:	7a 00       	.word 0x7a
Disassembly of section .text:

000015d4 <_main>:
uint16_t counter;

_LCD lcd1;

void main(void) {
    15d4:	62 00 fa    	lnk       #0x62
    15d6:	88 1f 78    	mov.w     w8, [w15++]
    init_elecanisms();
    15d8:	15 0a 07    	rcall     0x2a04 <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    init_ajuart();
    15da:	42 07 07    	rcall     0x2460 <_init_ajuart> <.L0> <.LFB0> <.LFE21> <.Letext0> <.Ltext0>
    // Setup rocker pins as inputs and set pull-up resistors
    toggleSwitchSetup();
    15dc:	4e 02 07    	rcall     0x1a7a <_toggleSwitchSetup> <.LFB9> <.LFE8>

    i2c_init(1e3);
    15de:	80 3e 20    	mov.w     #0x3e8, w0
    15e0:	10 05 07    	rcall     0x2002 <_i2c_init> <.LFB1> <.LFE0>
    lcd_init(&lcd1, 0x06, 'A'); //Setup LCD screen (type A i/o extender)
    15e2:	12 c4 b3    	mov.b     #0x41, w2
    15e4:	61 c0 b3    	mov.b     #0x6, w1
    15e6:	00 05 21    	mov.w     #0x1050, w0
    15e8:	30 03 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
    lcd_clear(&lcd1);  // Clears _LCD objects from previous array
    15ea:	00 05 21    	mov.w     #0x1050, w0
    15ec:	c2 03 07    	rcall     0x1d72 <_lcd_clear> <.LFB8> <.LFE7>

    i2c2_init(157);                      // Initializes I2C on I2C2
    15ee:	d0 09 20    	mov.w     #0x9d, w0
    15f0:	48 06 07    	rcall     0x2282 <_i2c2_init> <.LFB13> <.LFE12>
    I2C2ADD = MODULE_CODEWORD_ADDR>>1;   // Set the device address (7-bit register)
    15f2:	00 01 20    	mov.w     #0x10, w0
    15f4:	d0 10 88    	mov.w     w0, 0x21a
    I2C2MSK = 0;                         // Set mask to 0 (only this address matters)
    15f6:	1c 22 ef    	clr.w     0x21c
    _SI2C2IE = 1;                        // Enable i2c slave interrupt
    15f8:	9a 20 a8    	bset.b    0x9a, #0x1

    rand_val = read_analog(A0); // Set up the seed
    15fa:	50 16 80    	mov.w     0x2ca, w0
    15fc:	45 00 de    	lsr.w     w0, #0x5, w0
    15fe:	61 40 60    	and.b     w0, #0x1, w0
    1600:	00 80 fb    	ze        w0, w0
    1602:	30 0a 07    	rcall     0x2a64 <_read_analog> <.LFB1> <.LFE0>
    1604:	b0 40 88    	mov.w     w0, 0x816

    // Add more random noise
    uint8_t i, j;
    for (i=0; i<20; i++) {
    1606:	00 40 eb    	clr.b     w0
    1608:	00 4f 78    	mov.b     w0, [w14]
    160a:	18 00 37    	bra       0x163c <.L2>

0000160c <.L5>:
        for (j=0; j<read_analog(A0); j++) {
    160c:	00 40 eb    	clr.b     w0
    160e:	10 47 98    	mov.b     w0, [w14+1]
    1610:	0b 00 37    	bra       0x1628 <.L3>

00001612 <.L4>:
            rand_next();
    1612:	58 02 07    	rcall     0x1ac4 <_rand_next> <.LFB10> <.LFE9>
            delay_by_nop(read_analog(A0));
    1614:	50 16 80    	mov.w     0x2ca, w0
    1616:	45 00 de    	lsr.w     w0, #0x5, w0
    1618:	61 40 60    	and.b     w0, #0x1, w0
    161a:	00 80 fb    	ze        w0, w0
    161c:	23 0a 07    	rcall     0x2a64 <_read_analog> <.LFB1> <.LFE0>
    161e:	80 00 eb    	clr.w     w1
    1620:	dd 04 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1622:	1e 40 90    	mov.b     [w14+1], w0
    1624:	00 40 e8    	inc.b     w0, w0
    1626:	10 47 98    	mov.b     w0, [w14+1]

00001628 <.L3>:
    1628:	1e 40 90    	mov.b     [w14+1], w0
    162a:	00 84 fb    	ze        w0, w8
    162c:	50 16 80    	mov.w     0x2ca, w0
    162e:	45 00 de    	lsr.w     w0, #0x5, w0
    1630:	61 40 60    	and.b     w0, #0x1, w0
    1632:	00 80 fb    	ze        w0, w0
    1634:	17 0a 07    	rcall     0x2a64 <_read_analog> <.LFB1> <.LFE0>
    1636:	80 0f 54    	sub.w     w8, w0, [w15]
    1638:	ec ff 39    	bra       NC, 0x1612 <.L4>
    163a:	1e 4f e8    	inc.b     [w14], [w14]

0000163c <.L2>:
    163c:	1e 40 78    	mov.b     [w14], w0
    163e:	f3 4f 50    	sub.b     w0, #0x13, [w15]
    1640:	e5 ff 36    	bra       LEU, 0x160c <.L5>
        }
    }

    U1_putc((uint8_t)rand_val >> 8);
    1642:	b0 40 80    	mov.w     0x816, w0
    1644:	00 40 78    	mov.b     w0, w0
    1646:	00 80 fb    	ze        w0, w0
    1648:	48 80 de    	asr.w     w0, #0x8, w0
    164a:	00 40 78    	mov.b     w0, w0
    164c:	5c 07 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc((uint8_t)rand_val);
    164e:	b0 40 80    	mov.w     0x816, w0
    1650:	00 40 78    	mov.b     w0, w0
    1652:	59 07 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');
    1654:	d0 c0 b3    	mov.b     #0xd, w0
    1656:	57 07 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\n');
    1658:	a0 c0 b3    	mov.b     #0xa, w0
    165a:	55 07 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    165c:	4b 07 07    	rcall     0x24f4 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

    // set codeword and set of letters
    char _codeSet[36];
    for(i=0; i < 36; i++) {
    165e:	00 40 eb    	clr.b     w0
    1660:	00 4f 78    	mov.b     w0, [w14]
    1662:	12 00 37    	bra       0x1688 <.L6>

00001664 <.L7>:
        _codeSet[i] = letterSets[rand_val%15][i];
    1664:	9e 81 fb    	ze        [w14], w3
    1666:	b2 40 80    	mov.w     0x816, w2
    1668:	90 88 28    	mov.w     #0x8889, w0
    166a:	00 10 b8    	mul.uu    w2, w0, w0
    166c:	43 08 de    	lsr.w     w1, #0x3, w0
    166e:	6f 00 b9    	mul.su    w0, #0xf, w0
    1670:	00 00 78    	mov.w     w0, w0
    1672:	00 00 51    	sub.w     w2, w0, w0
    1674:	1e 81 fb    	ze        [w14], w2
    1676:	41 02 20    	mov.w     #0x24, w1
    1678:	01 80 b9    	mul.ss    w0, w1, w0
    167a:	00 00 78    	mov.w     w0, w0
    167c:	02 00 40    	add.w     w0, w2, w0
    167e:	c1 2f 29    	mov.w     #0x92fc, w1
    1680:	e1 40 78    	mov.b     [w1+w0], w1
    1682:	03 00 47    	add.w     w14, w3, w0
    1684:	21 40 98    	mov.b     w1, [w0+2]
    1686:	1e 4f e8    	inc.b     [w14], [w14]

00001688 <.L6>:
    1688:	30 c2 b3    	mov.b     #0x23, w0
    168a:	9e 40 78    	mov.b     [w14], w1
    168c:	80 cf 50    	sub.b     w1, w0, [w15]
    168e:	ea ff 36    	bra       LEU, 0x1664 <.L7>
    }
    codeSet = _codeSet;
    1690:	0e 80 e8    	inc2.w    w14, w0
    1692:	10 40 88    	mov.w     w0, 0x802

    char tmp[7] = " ";
    1694:	00 02 20    	mov.w     #0x20, w0
    1696:	01 00 20    	mov.w     #0x0, w1
    1698:	30 17 98    	mov.w     w0, [w14+38]
    169a:	41 17 98    	mov.w     w1, [w14+40]
    169c:	8e 00 78    	mov.w     w14, w1
    169e:	a1 02 b0    	add.w     #0x2a, w1
    16a0:	00 00 09    	repeat    #0x0
    16a2:	80 18 eb    	clr.w     [w1++]
    16a4:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<5; i++){
    16a6:	00 40 eb    	clr.b     w0
    16a8:	00 4f 78    	mov.b     w0, [w14]
    16aa:	08 00 37    	bra       0x16bc <.L8>

000016ac <.L9>:
        tmp[i] = codeSet[i];
    16ac:	1e 80 fb    	ze        [w14], w0
    16ae:	12 40 80    	mov.w     0x802, w2
    16b0:	9e 80 fb    	ze        [w14], w1
    16b2:	81 00 41    	add.w     w2, w1, w1
    16b4:	91 40 78    	mov.b     [w1], w1
    16b6:	00 00 47    	add.w     w14, w0, w0
    16b8:	61 60 98    	mov.b     w1, [w0+38]
    16ba:	1e 4f e8    	inc.b     [w14], [w14]

000016bc <.L8>:
    16bc:	1e 40 78    	mov.b     [w14], w0
    16be:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    16c0:	f5 ff 36    	bra       LEU, 0x16ac <.L9>
    }
    codeword = tmp;
    16c2:	60 02 20    	mov.w     #0x26, w0
    16c4:	0e 00 40    	add.w     w0, w14, w0
    16c6:	70 40 88    	mov.w     w0, 0x80e

    // setup column sets of letters
    char _set0[7] = " ";
    16c8:	90 51 29    	mov.w     #0x9519, w0
    16ca:	90 40 78    	mov.b     [w0], w1
    16cc:	51 6f 98    	mov.b     w1, [w14+45]
    16ce:	90 40 90    	mov.b     [w0+1], w1
    16d0:	61 6f 98    	mov.b     w1, [w14+46]
    16d2:	8e 00 78    	mov.w     w14, w1
    16d4:	f1 02 b0    	add.w     #0x2f, w1
    16d6:	04 00 09    	repeat    #0x4
    16d8:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<6; i++){
    16da:	00 40 eb    	clr.b     w0
    16dc:	00 4f 78    	mov.b     w0, [w14]
    16de:	09 00 37    	bra       0x16f2 <.L10>

000016e0 <.L11>:
        _set0[i] = codeSet[i+5];
    16e0:	1e 80 fb    	ze        [w14], w0
    16e2:	12 40 80    	mov.w     0x802, w2
    16e4:	9e 80 fb    	ze        [w14], w1
    16e6:	e5 80 40    	add.w     w1, #0x5, w1
    16e8:	81 00 41    	add.w     w2, w1, w1
    16ea:	91 40 78    	mov.b     [w1], w1
    16ec:	00 00 47    	add.w     w14, w0, w0
    16ee:	51 68 98    	mov.b     w1, [w0+45]
    16f0:	1e 4f e8    	inc.b     [w14], [w14]

000016f2 <.L10>:
    16f2:	1e 40 78    	mov.b     [w14], w0
    16f4:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    16f6:	f4 ff 36    	bra       LEU, 0x16e0 <.L11>
    }
    set0 = _set0;
    16f8:	d0 02 20    	mov.w     #0x2d, w0
    16fa:	0e 00 40    	add.w     w0, w14, w0
    16fc:	20 40 88    	mov.w     w0, 0x804

    char _set1[7] = " ";
    16fe:	00 02 20    	mov.w     #0x20, w0
    1700:	01 00 20    	mov.w     #0x0, w1
    1702:	20 1f 98    	mov.w     w0, [w14+52]
    1704:	31 1f 98    	mov.w     w1, [w14+54]
    1706:	8e 00 78    	mov.w     w14, w1
    1708:	81 03 b0    	add.w     #0x38, w1
    170a:	00 00 09    	repeat    #0x0
    170c:	80 18 eb    	clr.w     [w1++]
    170e:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<6; i++){
    1710:	00 40 eb    	clr.b     w0
    1712:	00 4f 78    	mov.b     w0, [w14]
    1714:	09 00 37    	bra       0x1728 <.L12>

00001716 <.L13>:
        _set1[i] = codeSet[i+11];
    1716:	1e 80 fb    	ze        [w14], w0
    1718:	12 40 80    	mov.w     0x802, w2
    171a:	9e 80 fb    	ze        [w14], w1
    171c:	eb 80 40    	add.w     w1, #0xb, w1
    171e:	81 00 41    	add.w     w2, w1, w1
    1720:	91 40 78    	mov.b     [w1], w1
    1722:	00 00 47    	add.w     w14, w0, w0
    1724:	41 70 98    	mov.b     w1, [w0+52]
    1726:	1e 4f e8    	inc.b     [w14], [w14]

00001728 <.L12>:
    1728:	1e 40 78    	mov.b     [w14], w0
    172a:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    172c:	f4 ff 36    	bra       LEU, 0x1716 <.L13>
    }
    set1 = _set1;
    172e:	40 03 20    	mov.w     #0x34, w0
    1730:	0e 00 40    	add.w     w0, w14, w0
    1732:	30 40 88    	mov.w     w0, 0x806

    char _set2[7] = " ";
    1734:	90 51 29    	mov.w     #0x9519, w0
    1736:	90 40 78    	mov.b     [w0], w1
    1738:	31 7f 98    	mov.b     w1, [w14+59]
    173a:	90 40 90    	mov.b     [w0+1], w1
    173c:	41 7f 98    	mov.b     w1, [w14+60]
    173e:	8e 00 78    	mov.w     w14, w1
    1740:	d1 03 b0    	add.w     #0x3d, w1
    1742:	04 00 09    	repeat    #0x4
    1744:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<6; i++){
    1746:	00 40 eb    	clr.b     w0
    1748:	00 4f 78    	mov.b     w0, [w14]
    174a:	09 00 37    	bra       0x175e <.L14>

0000174c <.L15>:
        _set2[i] = codeSet[i+17];
    174c:	1e 80 fb    	ze        [w14], w0
    174e:	12 40 80    	mov.w     0x802, w2
    1750:	9e 80 fb    	ze        [w14], w1
    1752:	f1 80 40    	add.w     w1, #0x11, w1
    1754:	81 00 41    	add.w     w2, w1, w1
    1756:	91 40 78    	mov.b     [w1], w1
    1758:	00 00 47    	add.w     w14, w0, w0
    175a:	31 78 98    	mov.b     w1, [w0+59]
    175c:	1e 4f e8    	inc.b     [w14], [w14]

0000175e <.L14>:
    175e:	1e 40 78    	mov.b     [w14], w0
    1760:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1762:	f4 ff 36    	bra       LEU, 0x174c <.L15>
    }
    set2 = _set2;
    1764:	b0 03 20    	mov.w     #0x3b, w0
    1766:	0e 00 40    	add.w     w0, w14, w0
    1768:	40 40 88    	mov.w     w0, 0x808

    char _set3[7] = " ";
    176a:	00 02 20    	mov.w     #0x20, w0
    176c:	01 00 20    	mov.w     #0x0, w1
    176e:	10 27 98    	mov.w     w0, [w14+66]
    1770:	21 27 98    	mov.w     w1, [w14+68]
    1772:	8e 00 78    	mov.w     w14, w1
    1774:	61 04 b0    	add.w     #0x46, w1
    1776:	00 00 09    	repeat    #0x0
    1778:	80 18 eb    	clr.w     [w1++]
    177a:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<6; i++){
    177c:	00 40 eb    	clr.b     w0
    177e:	00 4f 78    	mov.b     w0, [w14]
    1780:	09 00 37    	bra       0x1794 <.L16>

00001782 <.L17>:
        _set3[i] = codeSet[i+23];
    1782:	1e 80 fb    	ze        [w14], w0
    1784:	12 40 80    	mov.w     0x802, w2
    1786:	9e 80 fb    	ze        [w14], w1
    1788:	f7 80 40    	add.w     w1, #0x17, w1
    178a:	81 00 41    	add.w     w2, w1, w1
    178c:	91 40 78    	mov.b     [w1], w1
    178e:	00 00 47    	add.w     w14, w0, w0
    1790:	21 c0 98    	mov.b     w1, [w0+66]
    1792:	1e 4f e8    	inc.b     [w14], [w14]

00001794 <.L16>:
    1794:	1e 40 78    	mov.b     [w14], w0
    1796:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1798:	f4 ff 36    	bra       LEU, 0x1782 <.L17>
    }
    set3 = _set3;
    179a:	20 04 20    	mov.w     #0x42, w0
    179c:	0e 00 40    	add.w     w0, w14, w0
    179e:	50 40 88    	mov.w     w0, 0x80a

    char _set4[7] = " ";
    17a0:	90 51 29    	mov.w     #0x9519, w0
    17a2:	90 40 78    	mov.b     [w0], w1
    17a4:	11 cf 98    	mov.b     w1, [w14+73]
    17a6:	90 40 90    	mov.b     [w0+1], w1
    17a8:	21 cf 98    	mov.b     w1, [w14+74]
    17aa:	8e 00 78    	mov.w     w14, w1
    17ac:	b1 04 b0    	add.w     #0x4b, w1
    17ae:	04 00 09    	repeat    #0x4
    17b0:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<6; i++){
    17b2:	00 40 eb    	clr.b     w0
    17b4:	00 4f 78    	mov.b     w0, [w14]
    17b6:	09 00 37    	bra       0x17ca <.L18>

000017b8 <.L19>:
        _set4[i] = codeSet[i+29];
    17b8:	1e 80 fb    	ze        [w14], w0
    17ba:	12 40 80    	mov.w     0x802, w2
    17bc:	9e 80 fb    	ze        [w14], w1
    17be:	fd 80 40    	add.w     w1, #0x1d, w1
    17c0:	81 00 41    	add.w     w2, w1, w1
    17c2:	91 40 78    	mov.b     [w1], w1
    17c4:	00 00 47    	add.w     w14, w0, w0
    17c6:	11 c8 98    	mov.b     w1, [w0+73]
    17c8:	1e 4f e8    	inc.b     [w14], [w14]

000017ca <.L18>:
    17ca:	1e 40 78    	mov.b     [w14], w0
    17cc:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    17ce:	f4 ff 36    	bra       LEU, 0x17b8 <.L19>
    }
    set4 = _set4;
    17d0:	90 04 20    	mov.w     #0x49, w0
    17d2:	0e 00 40    	add.w     w0, w14, w0
    17d4:	60 40 88    	mov.w     w0, 0x80c

    // initialize indices of each column
    i0 = rand_val%5;
    17d6:	b2 40 80    	mov.w     0x816, w2
    17d8:	d0 cc 2c    	mov.w     #0xcccd, w0
    17da:	00 10 b8    	mul.uu    w2, w0, w0
    17dc:	42 08 de    	lsr.w     w1, #0x2, w0
    17de:	65 00 b9    	mul.su    w0, #0x5, w0
    17e0:	00 00 78    	mov.w     w0, w0
    17e2:	00 00 51    	sub.w     w2, w0, w0
    17e4:	00 40 78    	mov.b     w0, w0
    17e6:	10 e8 b7    	mov.b     WREG, 0x810
    rand_next();
    17e8:	6d 01 07    	rcall     0x1ac4 <_rand_next> <.LFB10> <.LFE9>
    i1 = rand_val%5;
    17ea:	b2 40 80    	mov.w     0x816, w2
    17ec:	d0 cc 2c    	mov.w     #0xcccd, w0
    17ee:	00 10 b8    	mul.uu    w2, w0, w0
    17f0:	42 08 de    	lsr.w     w1, #0x2, w0
    17f2:	65 00 b9    	mul.su    w0, #0x5, w0
    17f4:	00 00 78    	mov.w     w0, w0
    17f6:	00 00 51    	sub.w     w2, w0, w0
    17f8:	00 40 78    	mov.b     w0, w0
    17fa:	11 e8 b7    	mov.b     WREG, 0x811
    rand_next();
    17fc:	63 01 07    	rcall     0x1ac4 <_rand_next> <.LFB10> <.LFE9>
    i2 = rand_val%5;
    17fe:	b2 40 80    	mov.w     0x816, w2
    1800:	d0 cc 2c    	mov.w     #0xcccd, w0
    1802:	00 10 b8    	mul.uu    w2, w0, w0
    1804:	42 08 de    	lsr.w     w1, #0x2, w0
    1806:	65 00 b9    	mul.su    w0, #0x5, w0
    1808:	00 00 78    	mov.w     w0, w0
    180a:	00 00 51    	sub.w     w2, w0, w0
    180c:	00 40 78    	mov.b     w0, w0
    180e:	12 e8 b7    	mov.b     WREG, 0x812
    rand_next();
    1810:	59 01 07    	rcall     0x1ac4 <_rand_next> <.LFB10> <.LFE9>
    i3 = rand_val%5;
    1812:	b2 40 80    	mov.w     0x816, w2
    1814:	d0 cc 2c    	mov.w     #0xcccd, w0
    1816:	00 10 b8    	mul.uu    w2, w0, w0
    1818:	42 08 de    	lsr.w     w1, #0x2, w0
    181a:	65 00 b9    	mul.su    w0, #0x5, w0
    181c:	00 00 78    	mov.w     w0, w0
    181e:	00 00 51    	sub.w     w2, w0, w0
    1820:	00 40 78    	mov.b     w0, w0
    1822:	13 e8 b7    	mov.b     WREG, 0x813
    rand_next();
    1824:	4f 01 07    	rcall     0x1ac4 <_rand_next> <.LFB10> <.LFE9>
    i4 = rand_val%5;
    1826:	b2 40 80    	mov.w     0x816, w2
    1828:	d0 cc 2c    	mov.w     #0xcccd, w0
    182a:	00 10 b8    	mul.uu    w2, w0, w0
    182c:	42 08 de    	lsr.w     w1, #0x2, w0
    182e:	65 00 b9    	mul.su    w0, #0x5, w0
    1830:	00 00 78    	mov.w     w0, w0
    1832:	00 00 51    	sub.w     w2, w0, w0
    1834:	00 40 78    	mov.b     w0, w0
    1836:	14 e8 b7    	mov.b     WREG, 0x814

    char dispstring[17] = " o  o  o  o  o ";
    1838:	00 52 29    	mov.w     #0x9520, w0
    183a:	01 05 20    	mov.w     #0x50, w1
    183c:	81 00 47    	add.w     w14, w1, w1
    183e:	0f 00 09    	repeat    #0xf
    1840:	b0 58 78    	mov.b     [w0++], [w1++]
    1842:	00 01 b1    	sub.w     #0x10, w0
    1844:	00 40 eb    	clr.b     w0
    1846:	00 e7 98    	mov.b     w0, [w14+96]
    dispptr = dispstring;
    1848:	00 05 20    	mov.w     #0x50, w0
    184a:	0e 00 40    	add.w     w0, w14, w0
    184c:	00 40 88    	mov.w     w0, 0x800
    lcd_print2(&lcd1, dispptr, "");
    184e:	00 40 80    	mov.w     0x800, w0
    1850:	82 51 29    	mov.w     #0x9518, w2
    1852:	80 00 78    	mov.w     w0, w1
    1854:	00 05 21    	mov.w     #0x1050, w0
    1856:	ea 02 07    	rcall     0x1e2c <_lcd_print2> <.LFB13> <.LFE12>

    // Timer 2 Setup
    T2CON = 0x0020;         // set Timer2 period to 10 ms for debounce
    1858:	00 02 20    	mov.w     #0x20, w0
    185a:	80 08 88    	mov.w     w0, 0x110
    PR2 = 0x2710;           // prescaler 16, match value 10000
    185c:	00 71 22    	mov.w     #0x2710, w0
    185e:	60 08 88    	mov.w     w0, 0x10c

    TMR2 = 0;               // set Timer2 to 0
    1860:	06 21 ef    	clr.w     0x106
    IFS0bits.T2IF = 0;      // lower T2 interrupt flag
    1862:	84 e0 a9    	bclr.b    0x84, #0x7
    IEC0bits.T2IE = 1;      // enable T2 interrupt
    1864:	94 e0 a8    	bset.b    0x94, #0x7
    T2CONbits.TON = 0;      // make sure T2 isn't on
    1866:	11 e1 a9    	bclr.b    0x111, #0x7

    state = setup;
    1868:	20 87 21    	mov.w     #0x1872, w0
    186a:	c0 40 88    	mov.w     w0, 0x818

0000186c <.L20>:

    while (1) {
        state();
    186c:	c0 40 80    	mov.w     0x818, w0
    186e:	00 00 01    	call      w0
    }
    1870:	fd ff 37    	bra       0x186c <.L20>

00001872 <_setup>:
}

// STATE MACHINE FUNCTIONS /////////////////////////////////////////////////////

void setup(void) { // Waits for master module to start the game
    1872:	00 00 fa    	lnk       #0x0
    // State Setup
    if (state != last_state) {
    1874:	c1 40 80    	mov.w     0x818, w1
    1876:	d0 40 80    	mov.w     0x81a, w0
    1878:	80 8f 50    	sub.w     w1, w0, [w15]
    187a:	08 00 32    	bra       Z, 0x188c <.L22>
        last_state = state;
    187c:	c0 40 80    	mov.w     0x818, w0
    187e:	d0 40 88    	mov.w     w0, 0x81a
        MODULE_LED_GREEN = ON; delay_by_nop(1);
    1880:	da 22 a8    	bset.b    0x2da, #0x1
    1882:	10 00 20    	mov.w     #0x1, w0
    1884:	01 00 20    	mov.w     #0x0, w1
    1886:	aa 03 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        MODULE_LED_RED = ON;
    1888:	da 02 a8    	bset.b    0x2da, #0x0
        complete_flag = 0;
    188a:	21 68 ef    	clr.b     0x821

0000188c <.L22>:
        // setup state here
    }

    // Perform state tasks

    // Check for state transitions
    // if ((start_flag == 1) || (SW2 == 0)){
    //     state = run;
    // }

    if (start_flag == 1) {
    188c:	24 c8 bf    	mov.b     0x824, WREG
    188e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1890:	02 00 3a    	bra       NZ, 0x1896 <.L23>
        state = run;
    1892:	c0 8a 21    	mov.w     #0x18ac, w0
    1894:	c0 40 88    	mov.w     w0, 0x818

00001896 <.L23>:
    }

    // State Cleanup
    if (state != last_state) {
    1896:	c1 40 80    	mov.w     0x818, w1
    1898:	d0 40 80    	mov.w     0x81a, w0
    189a:	80 8f 50    	sub.w     w1, w0, [w15]
    189c:	05 00 32    	bra       Z, 0x18a8 <.L21>
        // cleanup state here
        MODULE_LED_GREEN = OFF; delay_by_nop(1);
    189e:	da 22 a9    	bclr.b    0x2da, #0x1
    18a0:	10 00 20    	mov.w     #0x1, w0
    18a2:	01 00 20    	mov.w     #0x0, w1
    18a4:	9b 03 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        MODULE_LED_RED = ON;
    18a6:	da 02 a8    	bset.b    0x2da, #0x0

000018a8 <.L21>:
    }
}
    18a8:	00 80 fa    	ulnk      
    18aa:	00 00 06    	return    

000018ac <_run>:

void run(void) { // Plays the game
    18ac:	00 00 fa    	lnk       #0x0
    // State Setup
    if (state != last_state) {
    18ae:	c1 40 80    	mov.w     0x818, w1
    18b0:	d0 40 80    	mov.w     0x81a, w0
    18b2:	80 8f 50    	sub.w     w1, w0, [w15]
    18b4:	07 00 32    	bra       Z, 0x18c4 <.L26>
        last_state = state;
    18b6:	c0 40 80    	mov.w     0x818, w0
    18b8:	d0 40 88    	mov.w     w0, 0x81a
        // setup state here
        LED1 = ON; delay_by_nop(1);
    18ba:	dc e2 a8    	bset.b    0x2dc, #0x7
    18bc:	10 00 20    	mov.w     #0x1, w0
    18be:	01 00 20    	mov.w     #0x0, w1
    18c0:	8d 03 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        MODULE_LED_RED = ON;
    18c2:	da 02 a8    	bset.b    0x2da, #0x0

000018c4 <.L26>:
    }

    // Perform state tasks
    updateDisplay();
    18c4:	aa 00 07    	rcall     0x1a1a <_updateDisplay> <.LFB8> <.LFE5>
    if (SW1 == 0) {
    18c6:	91 16 80    	mov.w     0x2d2, w1
    18c8:	00 00 28    	mov.w     #0x8000, w0
    18ca:	00 80 60    	and.w     w1, w0, w0
    18cc:	00 00 e0    	cp0.w     w0
    18ce:	38 00 3a    	bra       NZ, 0x1940 <.L27>
        if ((set0[i0] == codeword[0]) &&
    18d0:	21 40 80    	mov.w     0x804, w1
    18d2:	10 c8 bf    	mov.b     0x810, WREG
    18d4:	00 80 fb    	ze        w0, w0
    18d6:	00 80 40    	add.w     w1, w0, w0
    18d8:	90 40 78    	mov.b     [w0], w1
    18da:	70 40 80    	mov.w     0x80e, w0
    18dc:	10 40 78    	mov.b     [w0], w0
    18de:	80 cf 50    	sub.b     w1, w0, [w15]
    18e0:	2b 00 3a    	bra       NZ, 0x1938 <.L28>
            (set1[i1] == codeword[1]) &&
    18e2:	31 40 80    	mov.w     0x806, w1
    18e4:	11 c8 bf    	mov.b     0x811, WREG
    18e6:	00 80 fb    	ze        w0, w0
    18e8:	00 80 40    	add.w     w1, w0, w0
    18ea:	90 40 78    	mov.b     [w0], w1
    18ec:	70 40 80    	mov.w     0x80e, w0
    18ee:	00 00 e8    	inc.w     w0, w0
    18f0:	10 40 78    	mov.b     [w0], w0
    18f2:	80 cf 50    	sub.b     w1, w0, [w15]
    18f4:	21 00 3a    	bra       NZ, 0x1938 <.L28>
            (set2[i2] == codeword[2]) &&
    18f6:	41 40 80    	mov.w     0x808, w1
    18f8:	12 c8 bf    	mov.b     0x812, WREG
    18fa:	00 80 fb    	ze        w0, w0
    18fc:	00 80 40    	add.w     w1, w0, w0
    18fe:	90 40 78    	mov.b     [w0], w1
    1900:	70 40 80    	mov.w     0x80e, w0
    1902:	00 80 e8    	inc2.w    w0, w0
    1904:	10 40 78    	mov.b     [w0], w0
    1906:	80 cf 50    	sub.b     w1, w0, [w15]
    1908:	17 00 3a    	bra       NZ, 0x1938 <.L28>
            (set3[i3] == codeword[3]) &&
    190a:	51 40 80    	mov.w     0x80a, w1
    190c:	13 c8 bf    	mov.b     0x813, WREG
    190e:	00 80 fb    	ze        w0, w0
    1910:	00 80 40    	add.w     w1, w0, w0
    1912:	90 40 78    	mov.b     [w0], w1
    1914:	70 40 80    	mov.w     0x80e, w0
    1916:	63 00 40    	add.w     w0, #0x3, w0
    1918:	10 40 78    	mov.b     [w0], w0
    191a:	80 cf 50    	sub.b     w1, w0, [w15]
    191c:	0d 00 3a    	bra       NZ, 0x1938 <.L28>
            (set4[i4] == codeword[4])) {
    191e:	61 40 80    	mov.w     0x80c, w1
    1920:	14 c8 bf    	mov.b     0x814, WREG
    1922:	00 80 fb    	ze        w0, w0
    1924:	00 80 40    	add.w     w1, w0, w0
    1926:	90 40 78    	mov.b     [w0], w1
    1928:	70 40 80    	mov.w     0x80e, w0
    192a:	64 00 40    	add.w     w0, #0x4, w0
    192c:	10 40 78    	mov.b     [w0], w0
    192e:	80 cf 50    	sub.b     w1, w0, [w15]
    1930:	03 00 3a    	bra       NZ, 0x1938 <.L28>
                state = solved;
    1932:	c0 97 21    	mov.w     #0x197c, w0
    1934:	c0 40 88    	mov.w     w0, 0x818
    1936:	04 00 37    	bra       0x1940 <.L27>

00001938 <.L28>:
        } else {
            num_strikes++;
    1938:	22 c8 bf    	mov.b     0x822, WREG
    193a:	00 40 e8    	inc.b     w0, w0
    193c:	22 e8 b7    	mov.b     WREG, 0x822
            LED3 = OFF;
    193e:	ec 22 a9    	bclr.b    0x2ec, #0x1

00001940 <.L27>:
        }
    }
    lcd_print2(&lcd1, dispptr, "");
    1940:	00 40 80    	mov.w     0x800, w0
    1942:	82 51 29    	mov.w     #0x9518, w2
    1944:	80 00 78    	mov.w     w0, w1
    1946:	00 05 21    	mov.w     #0x1050, w0
    1948:	71 02 07    	rcall     0x1e2c <_lcd_print2> <.LFB13> <.LFE12>
    delay_by_nop(30000);
    194a:	00 53 27    	mov.w     #0x7530, w0
    194c:	01 00 20    	mov.w     #0x0, w1
    194e:	46 03 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Check for state transitions
    if (win_flag == 1) {
    1950:	25 c8 bf    	mov.b     0x825, WREG
    1952:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1954:	03 00 3a    	bra       NZ, 0x195c <.L29>
        state = end_win;
    1956:	a0 9c 21    	mov.w     #0x19ca, w0
    1958:	c0 40 88    	mov.w     w0, 0x818
    195a:	05 00 37    	bra       0x1966 <.L30>

0000195c <.L29>:
    } else if (lose_flag == 1) {
    195c:	26 c8 bf    	mov.b     0x826, WREG
    195e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1960:	02 00 3a    	bra       NZ, 0x1966 <.L30>
        state = end_fail;
    1962:	20 9f 21    	mov.w     #0x19f2, w0
    1964:	c0 40 88    	mov.w     w0, 0x818

00001966 <.L30>:
    }

    // State Cleanup
    if (state != last_state) {
    1966:	c1 40 80    	mov.w     0x818, w1
    1968:	d0 40 80    	mov.w     0x81a, w0
    196a:	80 8f 50    	sub.w     w1, w0, [w15]
    196c:	05 00 32    	bra       Z, 0x1978 <.L25>
        // cleanup state here
        LED1=OFF; delay_by_nop(1);
    196e:	dc e2 a9    	bclr.b    0x2dc, #0x7
    1970:	10 00 20    	mov.w     #0x1, w0
    1972:	01 00 20    	mov.w     #0x0, w1
    1974:	33 03 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        MODULE_LED_RED = OFF;
    1976:	da 02 a9    	bclr.b    0x2da, #0x0

00001978 <.L25>:
    }
}
    1978:	00 80 fa    	ulnk      
    197a:	00 00 06    	return    

0000197c <_solved>:

void solved(void) { // The puzzle on this module is finished
    197c:	00 00 fa    	lnk       #0x0
    // State Setup
    if (state != last_state) {
    197e:	c1 40 80    	mov.w     0x818, w1
    1980:	d0 40 80    	mov.w     0x81a, w0
    1982:	80 8f 50    	sub.w     w1, w0, [w15]
    1984:	06 00 32    	bra       Z, 0x1992 <.L33>
        // setup state here
        last_state = state;
    1986:	c0 40 80    	mov.w     0x818, w0
    1988:	d0 40 88    	mov.w     w0, 0x81a
        LED3 = ON;
    198a:	ec 22 a8    	bset.b    0x2ec, #0x1
        complete_flag = 1;
    198c:	10 c0 b3    	mov.b     #0x1, w0
    198e:	21 e8 b7    	mov.b     WREG, 0x821
        MODULE_LED_GREEN = ON;
    1990:	da 22 a8    	bset.b    0x2da, #0x1

00001992 <.L33>:
    }

    // Perform state tasks
    lcd_print2(&lcd1, dispptr, "  --CORRECT--  ");
    1992:	00 40 80    	mov.w     0x800, w0
    1994:	12 53 29    	mov.w     #0x9531, w2
    1996:	80 00 78    	mov.w     w0, w1
    1998:	00 05 21    	mov.w     #0x1050, w0
    199a:	48 02 07    	rcall     0x1e2c <_lcd_print2> <.LFB13> <.LFE12>
    delay_by_nop(30000);
    199c:	00 53 27    	mov.w     #0x7530, w0
    199e:	01 00 20    	mov.w     #0x0, w1
    19a0:	1d 03 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Check for state transitions
    if (win_flag == 1) {
    19a2:	25 c8 bf    	mov.b     0x825, WREG
    19a4:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    19a6:	03 00 3a    	bra       NZ, 0x19ae <.L34>
        state = end_win;
    19a8:	a0 9c 21    	mov.w     #0x19ca, w0
    19aa:	c0 40 88    	mov.w     w0, 0x818
    19ac:	05 00 37    	bra       0x19b8 <.L35>

000019ae <.L34>:
    } else if (lose_flag == 1) {
    19ae:	26 c8 bf    	mov.b     0x826, WREG
    19b0:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    19b2:	02 00 3a    	bra       NZ, 0x19b8 <.L35>
        state = end_fail;
    19b4:	20 9f 21    	mov.w     #0x19f2, w0
    19b6:	c0 40 88    	mov.w     w0, 0x818

000019b8 <.L35>:
    }

    // State Cleanup
    if (state != last_state) {
    19b8:	c1 40 80    	mov.w     0x818, w1
    19ba:	d0 40 80    	mov.w     0x81a, w0
    19bc:	80 8f 50    	sub.w     w1, w0, [w15]
    19be:	03 00 32    	bra       Z, 0x19c6 <.L32>
        // cleanup state here
        LED3 = OFF;
    19c0:	ec 22 a9    	bclr.b    0x2ec, #0x1
        complete_flag = 0;
    19c2:	21 68 ef    	clr.b     0x821
        MODULE_LED_GREEN = OFF;
    19c4:	da 22 a9    	bclr.b    0x2da, #0x1

000019c6 <.L32>:
    }
}
    19c6:	00 80 fa    	ulnk      
    19c8:	00 00 06    	return    

000019ca <_end_win>:

void end_win(void) { // The master module said the game was won
    19ca:	00 00 fa    	lnk       #0x0
    // State Setup
    if (state != last_state) {
    19cc:	c1 40 80    	mov.w     0x818, w1
    19ce:	d0 40 80    	mov.w     0x81a, w0
    19d0:	80 8f 50    	sub.w     w1, w0, [w15]
    19d2:	03 00 32    	bra       Z, 0x19da <.L38>
        last_state = state;
    19d4:	c0 40 80    	mov.w     0x818, w0
    19d6:	d0 40 88    	mov.w     w0, 0x81a
        MODULE_LED_GREEN = ON;
    19d8:	da 22 a8    	bset.b    0x2da, #0x1

000019da <.L38>:
        // setup state here
    }

    // Perform state tasks

    // Check for state transitions
    if (start_flag == 1) {
    19da:	24 c8 bf    	mov.b     0x824, WREG
    19dc:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    19de:	02 00 3a    	bra       NZ, 0x19e4 <.L39>
        state = run;
    19e0:	c0 8a 21    	mov.w     #0x18ac, w0
    19e2:	c0 40 88    	mov.w     w0, 0x818

000019e4 <.L39>:
    }

    // State Cleanup
    if (state != last_state) {
    19e4:	c1 40 80    	mov.w     0x818, w1
    19e6:	d0 40 80    	mov.w     0x81a, w0
    19e8:	80 8f 50    	sub.w     w1, w0, [w15]
    19ea:	01 00 32    	bra       Z, 0x19ee <.L37>
        // cleanup state here
        MODULE_LED_GREEN = OFF;
    19ec:	da 22 a9    	bclr.b    0x2da, #0x1

000019ee <.L37>:
    }
}
    19ee:	00 80 fa    	ulnk      
    19f0:	00 00 06    	return    

000019f2 <_end_fail>:

void end_fail(void) { // The master module said the game was lost
    19f2:	00 00 fa    	lnk       #0x0
    // State Setup
    if (state != last_state) {
    19f4:	c1 40 80    	mov.w     0x818, w1
    19f6:	d0 40 80    	mov.w     0x81a, w0
    19f8:	80 8f 50    	sub.w     w1, w0, [w15]
    19fa:	03 00 32    	bra       Z, 0x1a02 <.L42>
        // setup state here
        last_state = state;
    19fc:	c0 40 80    	mov.w     0x818, w0
    19fe:	d0 40 88    	mov.w     w0, 0x81a
        MODULE_LED_RED = ON;
    1a00:	da 02 a8    	bset.b    0x2da, #0x0

00001a02 <.L42>:
    }

    // Perform state tasks

    // Check for state transitions
    if (start_flag == 1) {
    1a02:	24 c8 bf    	mov.b     0x824, WREG
    1a04:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1a06:	02 00 3a    	bra       NZ, 0x1a0c <.L43>
        state = run;
    1a08:	c0 8a 21    	mov.w     #0x18ac, w0
    1a0a:	c0 40 88    	mov.w     w0, 0x818

00001a0c <.L43>:
    }

    // State Cleanup
    if (state != last_state) {
    1a0c:	c1 40 80    	mov.w     0x818, w1
    1a0e:	d0 40 80    	mov.w     0x81a, w0
    1a10:	80 8f 50    	sub.w     w1, w0, [w15]
    1a12:	01 00 32    	bra       Z, 0x1a16 <.L41>
        // cleanup state here
        MODULE_LED_RED = OFF;
    1a14:	da 02 a9    	bclr.b    0x2da, #0x0

00001a16 <.L41>:
    }
}
    1a16:	00 80 fa    	ulnk      
    1a18:	00 00 06    	return    

00001a1a <_updateDisplay>:

// ISRs ////////////////////////////////////////////////////////////////////////

void __attribute__((interrupt, auto_psv)) _CNInterrupt(void) {
    IFS1bits.CNIF = 0;      // lower INT3 interrupt flag
    TMR2 = 0;                 // reset debounce Timer2
    IFS0bits.T2IF = 0;        // lower Timer2 Interrupt flag
    T2CONbits.TON = 1;        // start Timer2
    LED1 = ON;
}

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    IFS0bits.T2IF = 0;      // lower Timer2 interrupt flag
    T2CONbits.TON = 0;      // turn off timer
    LED1 = OFF;

    // Sample pins and increment/decrement index of character displayed
    if(!D0) {i0 = (i0+1)% LETTERS_PER_COLUMN;} else
    if(!D1) {i0 = (i0 - 1);
        if(i0 > 5) {i0 = LETTERS_PER_COLUMN - 1;}
    }

    if(!D12) {i1 = (i1+1)% LETTERS_PER_COLUMN;} else
    if(!D13) {i1 = (i1 - 1);}
    if(i1 > 5) {i1 += LETTERS_PER_COLUMN;}

    if(!D4) {i2 = (i2+1)% LETTERS_PER_COLUMN;} else
    if(!D5) {i2 = (i2 - 1);}
    if(i2 > 5) {i2 += LETTERS_PER_COLUMN;}

    if(!D6) {i3 = (i3+1)% LETTERS_PER_COLUMN;} else
    if(!D7) {i3 = (i3 - 1);}
    if(i3 > 5) {i3 += LETTERS_PER_COLUMN;}

    if(!D8) {i4 = (i4+1)% LETTERS_PER_COLUMN;} else
    if(!D9) {i4 = (i4 - 1);}
    if(i4 > 5) {i4 += LETTERS_PER_COLUMN;}

    updateDisplay();
}


// HELPER FUNCTIONS ////////////////////////////////////////////////////////////

void updateDisplay(void) {
    1a1a:	00 00 fa    	lnk       #0x0
    dispptr[1] = set0[i0];
    1a1c:	00 40 80    	mov.w     0x800, w0
    1a1e:	00 00 e8    	inc.w     w0, w0
    1a20:	22 40 80    	mov.w     0x804, w2
    1a22:	01 81 20    	mov.w     #0x810, w1
    1a24:	91 40 78    	mov.b     [w1], w1
    1a26:	81 80 fb    	ze        w1, w1
    1a28:	81 00 41    	add.w     w2, w1, w1
    1a2a:	91 40 78    	mov.b     [w1], w1
    1a2c:	01 48 78    	mov.b     w1, [w0]
    dispptr[4] = set1[i1];
    1a2e:	00 40 80    	mov.w     0x800, w0
    1a30:	64 00 40    	add.w     w0, #0x4, w0
    1a32:	32 40 80    	mov.w     0x806, w2
    1a34:	11 81 20    	mov.w     #0x811, w1
    1a36:	91 40 78    	mov.b     [w1], w1
    1a38:	81 80 fb    	ze        w1, w1
    1a3a:	81 00 41    	add.w     w2, w1, w1
    1a3c:	91 40 78    	mov.b     [w1], w1
    1a3e:	01 48 78    	mov.b     w1, [w0]
    dispptr[7] = set2[i2];
    1a40:	00 40 80    	mov.w     0x800, w0
    1a42:	67 00 40    	add.w     w0, #0x7, w0
    1a44:	42 40 80    	mov.w     0x808, w2
    1a46:	21 81 20    	mov.w     #0x812, w1
    1a48:	91 40 78    	mov.b     [w1], w1
    1a4a:	81 80 fb    	ze        w1, w1
    1a4c:	81 00 41    	add.w     w2, w1, w1
    1a4e:	91 40 78    	mov.b     [w1], w1
    1a50:	01 48 78    	mov.b     w1, [w0]
    dispptr[10] = set3[i3];
    1a52:	00 40 80    	mov.w     0x800, w0
    1a54:	6a 00 40    	add.w     w0, #0xa, w0
    1a56:	52 40 80    	mov.w     0x80a, w2
    1a58:	31 81 20    	mov.w     #0x813, w1
    1a5a:	91 40 78    	mov.b     [w1], w1
    1a5c:	81 80 fb    	ze        w1, w1
    1a5e:	81 00 41    	add.w     w2, w1, w1
    1a60:	91 40 78    	mov.b     [w1], w1
    1a62:	01 48 78    	mov.b     w1, [w0]
    dispptr[13] = set4[i4];
    1a64:	00 40 80    	mov.w     0x800, w0
    1a66:	6d 00 40    	add.w     w0, #0xd, w0
    1a68:	62 40 80    	mov.w     0x80c, w2
    1a6a:	41 81 20    	mov.w     #0x814, w1
    1a6c:	91 40 78    	mov.b     [w1], w1
    1a6e:	81 80 fb    	ze        w1, w1
    1a70:	81 00 41    	add.w     w2, w1, w1
    1a72:	91 40 78    	mov.b     [w1], w1
    1a74:	01 48 78    	mov.b     w1, [w0]
}
    1a76:	00 80 fa    	ulnk      
    1a78:	00 00 06    	return    

00001a7a <_toggleSwitchSetup>:

void toggleSwitchSetup(void) {
    1a7a:	00 00 fa    	lnk       #0x0
    // Initialize pins as inputs
    D0_DIR = 1; //D0 as input
    1a7c:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = 1; //D1 as input
    1a7e:	d8 82 a8    	bset.b    0x2d8, #0x4

    D4_DIR = 1; //D4 as input
    1a80:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = 1; //D5 as input
    1a82:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = 1; //D6 as input
    1a84:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = 1; //D7 as input
    1a86:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = 1; //D8 as input
    1a88:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = 1; //D9 as input
    1a8a:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = 0; // D10 and D11 are module LEDs
    1a8c:	d8 02 a9    	bclr.b    0x2d8, #0x0
    D11_DIR = 0;
    1a8e:	d8 22 a9    	bclr.b    0x2d8, #0x1
    D12_DIR = 1;//D12 as input
    1a90:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = 1;//D13 as input
    1a92:	d8 62 a8    	bset.b    0x2d8, #0x3

    D0_PUE = 1; //D0 pullup enable
    1a94:	6f c0 a8    	bset.b    0x6f, #0x6
    D1_PUE = 1; //D1 pullup enable
    1a96:	6f a0 a8    	bset.b    0x6f, #0x5

    D4_PUE = 1; //D4 pullup enable
    1a98:	6f 80 a8    	bset.b    0x6f, #0x4
    D5_PUE = 1; //D5 pullup enable
    1a9a:	76 e0 a8    	bset.b    0x76, #0x7
    D6_PUE = 1; //D6 pullup enable
    1a9c:	74 a0 a8    	bset.b    0x74, #0x5
    D7_PUE = 1; //D7 pullup enable
    1a9e:	75 00 a8    	bset.b    0x75, #0x0
    D8_PUE = 1; //D8 pullup enable
    1aa0:	74 c0 a8    	bset.b    0x74, #0x6
    D9_PUE = 1; //D9 pullup enable
    1aa2:	74 e0 a8    	bset.b    0x74, #0x7
    D12_PUE = 1;//D12 pullup enable
    1aa4:	74 60 a8    	bset.b    0x74, #0x3
    D13_PUE = 1;//D13 pullup enable
    1aa6:	74 80 a8    	bset.b    0x74, #0x4

    D0_CNEN = 1; //D0 interrupt enable
    1aa8:	63 c0 a8    	bset.b    0x63, #0x6
    D1_CNEN = 1; //D1 interrupt enable
    1aaa:	63 a0 a8    	bset.b    0x63, #0x5

    D4_CNEN = 1; //D4 interrupt enable
    1aac:	63 80 a8    	bset.b    0x63, #0x4
    D5_CNEN = 1; //D5 interrupt enable
    1aae:	6a e0 a8    	bset.b    0x6a, #0x7
    D6_CNEN = 1; //D6 interrupt enable
    1ab0:	68 a0 a8    	bset.b    0x68, #0x5
    D7_CNEN = 1; //D7 interrupt enable
    1ab2:	69 00 a8    	bset.b    0x69, #0x0
    D8_CNEN = 1; //D8 interrupt enable
    1ab4:	68 c0 a8    	bset.b    0x68, #0x6
    D9_CNEN = 1; //D9 interrupt enable
    1ab6:	68 e0 a8    	bset.b    0x68, #0x7
    D12_CNEN = 1;//D12 interrupt enable
    1ab8:	68 60 a8    	bset.b    0x68, #0x3
    D13_CNEN = 1;//D13 interrupt enable
    1aba:	68 80 a8    	bset.b    0x68, #0x4

    IFS1bits.CNIF = 0; // lower CN interrupt flag
    1abc:	86 60 a9    	bclr.b    0x86, #0x3
    IEC1bits.CNIE = 1; // Enable CN interrupt module
    1abe:	96 60 a8    	bset.b    0x96, #0x3
}
    1ac0:	00 80 fa    	ulnk      
    1ac2:	00 00 06    	return    

00001ac4 <_rand_next>:

void rand_next(void) {
    1ac4:	02 00 fa    	lnk       #0x2
    uint16_t val;

    // See "A List of Maximum Period NLFSRs" by Elena Dubrova, p. 7
    val = (rand_val ^ (rand_val >> 2) ^ (rand_val >> 13) ^ ((rand_val >> 2) & (rand_val >> 3))) & 1;
    1ac6:	b0 40 80    	mov.w     0x816, w0
    1ac8:	c2 00 de    	lsr.w     w0, #0x2, w1
    1aca:	b0 40 80    	mov.w     0x816, w0
    1acc:	80 80 68    	xor.w     w1, w0, w1
    1ace:	b0 40 80    	mov.w     0x816, w0
    1ad0:	4d 00 de    	lsr.w     w0, #0xd, w0
    1ad2:	80 80 68    	xor.w     w1, w0, w1
    1ad4:	b0 40 80    	mov.w     0x816, w0
    1ad6:	42 01 de    	lsr.w     w0, #0x2, w2
    1ad8:	b0 40 80    	mov.w     0x816, w0
    1ada:	43 00 de    	lsr.w     w0, #0x3, w0
    1adc:	00 00 61    	and.w     w2, w0, w0
    1ade:	00 80 68    	xor.w     w1, w0, w0
    1ae0:	61 0f 60    	and.w     w0, #0x1, [w14]
    rand_val = (rand_val >> 1) | (val << 15);
    1ae2:	b0 40 80    	mov.w     0x816, w0
    1ae4:	80 00 d1    	lsr.w     w0, w1
    1ae6:	1e 00 78    	mov.w     [w14], w0
    1ae8:	4f 00 dd    	sl.w      w0, #0xf, w0
    1aea:	01 00 70    	ior.w     w0, w1, w0
    1aec:	b0 40 88    	mov.w     w0, 0x816
}
    1aee:	00 80 fa    	ulnk      
    1af0:	00 00 06    	return    

00001af2 <___lcd_i2c_write>:
#define DR_READ 0x0B

_LCD lcd[3];

void __lcd_i2c_write(_LCD *self, uint8_t ch) {
    1af2:	04 00 fa    	lnk       #0x4
    1af4:	00 0f 78    	mov.w     w0, [w14]
    1af6:	21 47 98    	mov.b     w1, [w14+2]
    i2c_start();
    1af8:	91 02 07    	rcall     0x201c <_i2c_start> <.LFB2> <.LFE1>
    send_i2c_byte(self->addr_write);
    1afa:	1e 00 78    	mov.w     [w14], w0
    1afc:	10 40 78    	mov.b     [w0], w0
    1afe:	00 80 fb    	ze        w0, w0
    1b00:	dc 02 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ch);
    1b02:	2e 40 90    	mov.b     [w14+2], w0
    1b04:	00 80 fb    	ze        w0, w0
    1b06:	d9 02 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
    reset_i2c_bus();
    1b08:	bd 02 07    	rcall     0x2084 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1b0a:	00 80 fa    	ulnk      
    1b0c:	00 00 06    	return    

00001b0e <___lcd_enablePulse>:

// Pulse enable pin high and then low to shift in 4 bits of data
void __lcd_enablePulse(_LCD *self) {
    1b0e:	02 00 fa    	lnk       #0x2
    1b10:	00 0f 78    	mov.w     w0, [w14]
    self->io_write_val ^= ENABLE_TOGGLE;
    1b12:	1e 00 78    	mov.w     [w14], w0
    1b14:	20 40 90    	mov.b     [w0+2], w0
    1b16:	80 40 78    	mov.b     w0, w1
    1b18:	01 24 a2    	btg.b     w1, #0x2
    1b1a:	1e 00 78    	mov.w     [w14], w0
    1b1c:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1b1e:	1e 00 78    	mov.w     [w14], w0
    1b20:	20 40 90    	mov.b     [w0+2], w0
    1b22:	80 40 78    	mov.b     w0, w1
    1b24:	1e 00 78    	mov.w     [w14], w0
    1b26:	e5 ff 07    	rcall     0x1af2 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    delay_by_nop(100);
    1b28:	40 06 20    	mov.w     #0x64, w0
    1b2a:	01 00 20    	mov.w     #0x0, w1
    1b2c:	57 02 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    self->io_write_val ^= ENABLE_TOGGLE;
    1b2e:	1e 00 78    	mov.w     [w14], w0
    1b30:	20 40 90    	mov.b     [w0+2], w0
    1b32:	80 40 78    	mov.b     w0, w1
    1b34:	01 24 a2    	btg.b     w1, #0x2
    1b36:	1e 00 78    	mov.w     [w14], w0
    1b38:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1b3a:	1e 00 78    	mov.w     [w14], w0
    1b3c:	20 40 90    	mov.b     [w0+2], w0
    1b3e:	80 40 78    	mov.b     w0, w1
    1b40:	1e 00 78    	mov.w     [w14], w0
    1b42:	d7 ff 07    	rcall     0x1af2 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    // delay_by_nop(1000);
}
    1b44:	00 80 fa    	ulnk      
    1b46:	00 00 06    	return    

00001b48 <___lcd_send>:

/* Send 8 bits of data as one 4-bit nibble, shifting in, second 4-bit nibble, and
shifting in */
void __lcd_send(_LCD *self, uint8_t value, uint8_t command) {
    1b48:	06 00 fa    	lnk       #0x6
    1b4a:	10 07 98    	mov.w     w0, [w14+2]
    1b4c:	41 47 98    	mov.b     w1, [w14+4]
    1b4e:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t MS = value & 0x78;
    1b50:	4e 40 90    	mov.b     [w14+4], w0
    1b52:	81 c7 b3    	mov.b     #0x78, w1
    1b54:	01 4f 60    	and.b     w0, w1, [w14]
    uint8_t LS = value << 4;
    1b56:	ce 40 90    	mov.b     [w14+4], w1
    1b58:	40 00 20    	mov.w     #0x4, w0
    1b5a:	00 08 dd    	sl.w      w1, w0, w0
    1b5c:	10 47 98    	mov.b     w0, [w14+1]
    self->io_write_val = command | MS;
    1b5e:	5e 40 90    	mov.b     [w14+5], w0
    1b60:	9e 40 70    	ior.b     w0, [w14], w1
    1b62:	1e 00 90    	mov.w     [w14+2], w0
    1b64:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1b66:	1e 00 90    	mov.w     [w14+2], w0
    1b68:	20 40 90    	mov.b     [w0+2], w0
    1b6a:	80 40 78    	mov.b     w0, w1
    1b6c:	1e 00 90    	mov.w     [w14+2], w0
    1b6e:	c1 ff 07    	rcall     0x1af2 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    __lcd_enablePulse(self);
    1b70:	1e 00 90    	mov.w     [w14+2], w0
    1b72:	cd ff 07    	rcall     0x1b0e <___lcd_enablePulse> <.LFB1> <.LFE0>
    self->io_write_val= command | LS;
    1b74:	de 40 90    	mov.b     [w14+5], w1
    1b76:	1e 40 90    	mov.b     [w14+1], w0
    1b78:	80 c0 70    	ior.b     w1, w0, w1
    1b7a:	1e 00 90    	mov.w     [w14+2], w0
    1b7c:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1b7e:	1e 00 90    	mov.w     [w14+2], w0
    1b80:	20 40 90    	mov.b     [w0+2], w0
    1b82:	80 40 78    	mov.b     w0, w1
    1b84:	1e 00 90    	mov.w     [w14+2], w0
    1b86:	b5 ff 07    	rcall     0x1af2 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    __lcd_enablePulse(self);
    1b88:	1e 00 90    	mov.w     [w14+2], w0
    1b8a:	c1 ff 07    	rcall     0x1b0e <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    1b8c:	00 80 fa    	ulnk      
    1b8e:	00 00 06    	return    

00001b90 <___lcd_send8>:

void __lcd_send8(_LCD *self, uint8_t value, uint8_t command) {
    1b90:	04 00 fa    	lnk       #0x4
    1b92:	00 0f 78    	mov.w     w0, [w14]
    1b94:	21 47 98    	mov.b     w1, [w14+2]
    1b96:	32 47 98    	mov.b     w2, [w14+3]
    value = value << 4;
    1b98:	ae 40 90    	mov.b     [w14+2], w1
    1b9a:	40 00 20    	mov.w     #0x4, w0
    1b9c:	00 08 dd    	sl.w      w1, w0, w0
    1b9e:	20 47 98    	mov.b     w0, [w14+2]
    self->io_write_val = command | value;
    1ba0:	be 40 90    	mov.b     [w14+3], w1
    1ba2:	2e 40 90    	mov.b     [w14+2], w0
    1ba4:	80 c0 70    	ior.b     w1, w0, w1
    1ba6:	1e 00 78    	mov.w     [w14], w0
    1ba8:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    1baa:	1e 00 78    	mov.w     [w14], w0
    1bac:	20 40 90    	mov.b     [w0+2], w0
    1bae:	80 40 78    	mov.b     w0, w1
    1bb0:	1e 00 78    	mov.w     [w14], w0
    1bb2:	9f ff 07    	rcall     0x1af2 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    __lcd_enablePulse(self);
    1bb4:	1e 00 78    	mov.w     [w14], w0
    1bb6:	ab ff 07    	rcall     0x1b0e <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    1bb8:	00 80 fa    	ulnk      
    1bba:	00 00 06    	return    

00001bbc <_init_lcd>:

/* Some code from last year's Spaceteam project that sets up three LCD screens on
 one bus with corresponding IO extender types and hard-wired addresses */
void init_lcd(uint8_t initiator) {
    1bbc:	02 00 fa    	lnk       #0x2
    1bbe:	00 4f 78    	mov.b     w0, [w14]

    i2c_init(1e3);
    1bc0:	80 3e 20    	mov.w     #0x3e8, w0
    1bc2:	1f 02 07    	rcall     0x2002 <_i2c_init> <.LFB1> <.LFE0>

    switch (initiator) {
    1bc4:	1e 80 fb    	ze        [w14], w0
    1bc6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1bc8:	17 00 32    	bra       Z, 0x1bf8 <.L8>
    1bca:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1bcc:	03 00 3c    	bra       GT, 0x1bd4 <.L11>
    1bce:	00 00 e0    	cp0.w     w0
    1bd0:	06 00 32    	bra       Z, 0x1bde <.L7>
    1bd2:	39 00 37    	bra       0x1c46 <.L5>

00001bd4 <.L11>:
    1bd4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1bd6:	1d 00 32    	bra       Z, 0x1c12 <.L9>
    1bd8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1bda:	28 00 32    	bra       Z, 0x1c2c <.L10>
    1bdc:	34 00 37    	bra       0x1c46 <.L5>

00001bde <.L7>:
        case 0: // Central
            lcd_init(&lcd[0], 0x05,'A');
    1bde:	12 c4 b3    	mov.b     #0x41, w2
    1be0:	51 c0 b3    	mov.b     #0x5, w1
    1be2:	00 04 21    	mov.w     #0x1040, w0
    1be4:	32 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x07,'A');
    1be6:	12 c4 b3    	mov.b     #0x41, w2
    1be8:	71 c0 b3    	mov.b     #0x7, w1
    1bea:	50 04 21    	mov.w     #0x1045, w0
    1bec:	2e 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'T');
    1bee:	42 c5 b3    	mov.b     #0x54, w2
    1bf0:	61 c0 b3    	mov.b     #0x6, w1
    1bf2:	a0 04 21    	mov.w     #0x104a, w0
    1bf4:	2a 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            break;
    1bf6:	27 00 37    	bra       0x1c46 <.L5>

00001bf8 <.L8>:
        case 1:
            lcd_init(&lcd[0], 0x07,'A');
    1bf8:	12 c4 b3    	mov.b     #0x41, w2
    1bfa:	71 c0 b3    	mov.b     #0x7, w1
    1bfc:	00 04 21    	mov.w     #0x1040, w0
    1bfe:	25 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'A');
    1c00:	12 c4 b3    	mov.b     #0x41, w2
    1c02:	61 c0 b3    	mov.b     #0x6, w1
    1c04:	a0 04 21    	mov.w     #0x104a, w0
    1c06:	21 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x05,'A');
    1c08:	12 c4 b3    	mov.b     #0x41, w2
    1c0a:	51 c0 b3    	mov.b     #0x5, w1
    1c0c:	50 04 21    	mov.w     #0x1045, w0
    1c0e:	1d 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            break;
    1c10:	1a 00 37    	bra       0x1c46 <.L5>

00001c12 <.L9>:
        case 2:
            lcd_init(&lcd[0], 0x07,'T');
    1c12:	42 c5 b3    	mov.b     #0x54, w2
    1c14:	71 c0 b3    	mov.b     #0x7, w1
    1c16:	00 04 21    	mov.w     #0x1040, w0
    1c18:	18 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    1c1a:	12 c4 b3    	mov.b     #0x41, w2
    1c1c:	61 c0 b3    	mov.b     #0x6, w1
    1c1e:	50 04 21    	mov.w     #0x1045, w0
    1c20:	14 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    1c22:	12 c4 b3    	mov.b     #0x41, w2
    1c24:	51 c0 b3    	mov.b     #0x5, w1
    1c26:	a0 04 21    	mov.w     #0x104a, w0
    1c28:	10 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            break;
    1c2a:	0d 00 37    	bra       0x1c46 <.L5>

00001c2c <.L10>:
        case 3:
            lcd_init(&lcd[0], 0x07,'A');
    1c2c:	12 c4 b3    	mov.b     #0x41, w2
    1c2e:	71 c0 b3    	mov.b     #0x7, w1
    1c30:	00 04 21    	mov.w     #0x1040, w0
    1c32:	0b 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    1c34:	12 c4 b3    	mov.b     #0x41, w2
    1c36:	61 c0 b3    	mov.b     #0x6, w1
    1c38:	50 04 21    	mov.w     #0x1045, w0
    1c3a:	07 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    1c3c:	12 c4 b3    	mov.b     #0x41, w2
    1c3e:	51 c0 b3    	mov.b     #0x5, w1
    1c40:	a0 04 21    	mov.w     #0x104a, w0
    1c42:	03 00 07    	rcall     0x1c4a <_lcd_init> <.LFB5> <.LFE4>
            break;
    1c44:	00 00 00    	nop       

00001c46 <.L5>:
    }
}
    1c46:	00 80 fa    	ulnk      
    1c48:	00 00 06    	return    

00001c4a <_lcd_init>:

// Initializes the LCD screen hardware as per pg. 46 of the datasheet
void lcd_init(_LCD *self, uint8_t addr, char vendor) {
    1c4a:	04 00 fa    	lnk       #0x4
    1c4c:	00 0f 78    	mov.w     w0, [w14]
    1c4e:	21 47 98    	mov.b     w1, [w14+2]
    1c50:	32 47 98    	mov.b     w2, [w14+3]
    switch(vendor){
    1c52:	3e 40 90    	mov.b     [w14+3], w0
    1c54:	00 00 fb    	se        w0, w0
    1c56:	11 04 20    	mov.w     #0x41, w1
    1c58:	81 0f 50    	sub.w     w0, w1, [w15]
    1c5a:	10 00 32    	bra       Z, 0x1c7c <.L14>
    1c5c:	41 05 20    	mov.w     #0x54, w1
    1c5e:	81 0f 50    	sub.w     w0, w1, [w15]
    1c60:	1a 00 3a    	bra       NZ, 0x1c96 <.L13>
        case 'T':// 0x40 == vendor prefix for PCF8574T
            self->addr_write = 0x40 + (addr << 1);
    1c62:	2e 40 90    	mov.b     [w14+2], w0
    1c64:	00 40 40    	add.b     w0, w0, w0
    1c66:	02 c4 b3    	mov.b     #0x40, w2
    1c68:	82 40 40    	add.b     w0, w2, w1
    1c6a:	1e 00 78    	mov.w     [w14], w0
    1c6c:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x40 + (addr << 1)+1;
    1c6e:	2e 40 90    	mov.b     [w14+2], w0
    1c70:	00 40 40    	add.b     w0, w0, w0
    1c72:	12 c4 b3    	mov.b     #0x41, w2
    1c74:	82 40 40    	add.b     w0, w2, w1
    1c76:	1e 00 78    	mov.w     [w14], w0
    1c78:	11 40 98    	mov.b     w1, [w0+1]
            break;
    1c7a:	0d 00 37    	bra       0x1c96 <.L13>

00001c7c <.L14>:
        case 'A':// 0x70 == vendor prefix PCF8574AT
            self->addr_write = 0x70 + (addr << 1);
    1c7c:	2e 40 90    	mov.b     [w14+2], w0
    1c7e:	00 40 40    	add.b     w0, w0, w0
    1c80:	02 c7 b3    	mov.b     #0x70, w2
    1c82:	82 40 40    	add.b     w0, w2, w1
    1c84:	1e 00 78    	mov.w     [w14], w0
    1c86:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x70 + (addr << 1)+1;
    1c88:	2e 40 90    	mov.b     [w14+2], w0
    1c8a:	00 40 40    	add.b     w0, w0, w0
    1c8c:	12 c7 b3    	mov.b     #0x71, w2
    1c8e:	82 40 40    	add.b     w0, w2, w1
    1c90:	1e 00 78    	mov.w     [w14], w0
    1c92:	11 40 98    	mov.b     w1, [w0+1]
            break;
    1c94:	00 00 00    	nop       

00001c96 <.L13>:
    }

    self->display_control = 0x00;
    1c96:	1e 00 78    	mov.w     [w14], w0
    1c98:	80 40 eb    	clr.b     w1
    1c9a:	31 40 98    	mov.b     w1, [w0+3]
    self->display_mode = 0x00;
    1c9c:	1e 00 78    	mov.w     [w14], w0
    1c9e:	80 40 eb    	clr.b     w1
    1ca0:	41 40 98    	mov.b     w1, [w0+4]

    self->io_write_val = 0x00;
    1ca2:	1e 00 78    	mov.w     [w14], w0
    1ca4:	80 40 eb    	clr.b     w1
    1ca6:	21 40 98    	mov.b     w1, [w0+2]

    __lcd_i2c_write(self, 0x00);
    1ca8:	80 40 eb    	clr.b     w1
    1caa:	1e 00 78    	mov.w     [w14], w0
    1cac:	22 ff 07    	rcall     0x1af2 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

    delay_by_nop(15000);
    1cae:	80 a9 23    	mov.w     #0x3a98, w0
    1cb0:	01 00 20    	mov.w     #0x0, w1
    1cb2:	94 01 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Some bullshit according to pg 46
    __lcd_send8(self, 0x03, INTERNAL_WRITE);
    1cb4:	82 c0 b3    	mov.b     #0x8, w2
    1cb6:	31 c0 b3    	mov.b     #0x3, w1
    1cb8:	1e 00 78    	mov.w     [w14], w0
    1cba:	6a ff 07    	rcall     0x1b90 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    1cbc:	80 38 21    	mov.w     #0x1388, w0
    1cbe:	01 00 20    	mov.w     #0x0, w1
    1cc0:	8d 01 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    1cc2:	82 c0 b3    	mov.b     #0x8, w2
    1cc4:	31 c0 b3    	mov.b     #0x3, w1
    1cc6:	1e 00 78    	mov.w     [w14], w0
    1cc8:	63 ff 07    	rcall     0x1b90 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    1cca:	80 38 21    	mov.w     #0x1388, w0
    1ccc:	01 00 20    	mov.w     #0x0, w1
    1cce:	86 01 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    1cd0:	82 c0 b3    	mov.b     #0x8, w2
    1cd2:	31 c0 b3    	mov.b     #0x3, w1
    1cd4:	1e 00 78    	mov.w     [w14], w0
    1cd6:	5c ff 07    	rcall     0x1b90 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    1cd8:	80 38 21    	mov.w     #0x1388, w0
    1cda:	01 00 20    	mov.w     #0x0, w1
    1cdc:	7f 01 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Put it in 4 bit mode
    __lcd_send8(self, 0x02, INTERNAL_WRITE);//0b00110000
    1cde:	82 c0 b3    	mov.b     #0x8, w2
    1ce0:	21 c0 b3    	mov.b     #0x2, w1
    1ce2:	1e 00 78    	mov.w     [w14], w0
    1ce4:	55 ff 07    	rcall     0x1b90 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    1ce6:	80 38 21    	mov.w     #0x1388, w0
    1ce8:	01 00 20    	mov.w     #0x0, w1
    1cea:	78 01 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x28, INTERNAL_WRITE); // Set rows and direction
    1cec:	82 c0 b3    	mov.b     #0x8, w2
    1cee:	81 c2 b3    	mov.b     #0x28, w1
    1cf0:	1e 00 78    	mov.w     [w14], w0
    1cf2:	2a ff 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    1cf4:	20 03 20    	mov.w     #0x32, w0
    1cf6:	01 00 20    	mov.w     #0x0, w1
    1cf8:	71 01 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x80, INTERNAL_WRITE); // Display off, cursor off
    1cfa:	82 c0 b3    	mov.b     #0x8, w2
    1cfc:	01 c8 b3    	mov.b     #0x80, w1
    1cfe:	1e 00 78    	mov.w     [w14], w0
    1d00:	23 ff 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    1d02:	20 03 20    	mov.w     #0x32, w0
    1d04:	01 00 20    	mov.w     #0x0, w1
    1d06:	6a 01 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x01, INTERNAL_WRITE); // Go to home position
    1d08:	82 c0 b3    	mov.b     #0x8, w2
    1d0a:	11 c0 b3    	mov.b     #0x1, w1
    1d0c:	1e 00 78    	mov.w     [w14], w0
    1d0e:	1c ff 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    1d10:	00 7d 20    	mov.w     #0x7d0, w0
    1d12:	01 00 20    	mov.w     #0x0, w1
    1d14:	63 01 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x06, INTERNAL_WRITE); // Set curson direction
    1d16:	82 c0 b3    	mov.b     #0x8, w2
    1d18:	61 c0 b3    	mov.b     #0x6, w1
    1d1a:	1e 00 78    	mov.w     [w14], w0
    1d1c:	15 ff 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(5000);
    1d1e:	80 38 21    	mov.w     #0x1388, w0
    1d20:	01 00 20    	mov.w     #0x0, w1
    1d22:	5c 01 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x0C, INTERNAL_WRITE); // Display on, cursor off
    1d24:	82 c0 b3    	mov.b     #0x8, w2
    1d26:	c1 c0 b3    	mov.b     #0xc, w1
    1d28:	1e 00 78    	mov.w     [w14], w0
    1d2a:	0e ff 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
}
    1d2c:	00 80 fa    	ulnk      
    1d2e:	00 00 06    	return    

00001d30 <_lcd_stop>:

// Stops lcd I2C transfer
void lcd_stop(_LCD *self) {
    1d30:	02 00 fa    	lnk       #0x2
    1d32:	00 0f 78    	mov.w     w0, [w14]
    reset_i2c_bus();
    1d34:	a7 01 07    	rcall     0x2084 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1d36:	00 80 fa    	ulnk      
    1d38:	00 00 06    	return    

00001d3a <_lcd_display>:

// Sends show display command to LCD
void lcd_display(_LCD *self, uint8_t on) {
    1d3a:	04 00 fa    	lnk       #0x4
    1d3c:	00 0f 78    	mov.w     w0, [w14]
    1d3e:	21 47 98    	mov.b     w1, [w14+2]
    if (on) {
    1d40:	2e 40 90    	mov.b     [w14+2], w0
    1d42:	00 04 e0    	cp0.b     w0
    1d44:	07 00 32    	bra       Z, 0x1d54 <.L18>
        self->display_control |= LCD_DISPLAYON;
    1d46:	1e 00 78    	mov.w     [w14], w0
    1d48:	30 40 90    	mov.b     [w0+3], w0
    1d4a:	80 40 78    	mov.b     w0, w1
    1d4c:	01 24 a0    	bset.b    w1, #0x2
    1d4e:	1e 00 78    	mov.w     [w14], w0
    1d50:	31 40 98    	mov.b     w1, [w0+3]
    1d52:	06 00 37    	bra       0x1d60 <.L19>

00001d54 <.L18>:
    } else {
        self->display_control &= ~LCD_DISPLAYON;
    1d54:	1e 00 78    	mov.w     [w14], w0
    1d56:	b0 40 90    	mov.b     [w0+3], w1
    1d58:	b0 cf b3    	mov.b     #0xfb, w0
    1d5a:	80 c0 60    	and.b     w1, w0, w1
    1d5c:	1e 00 78    	mov.w     [w14], w0
    1d5e:	31 40 98    	mov.b     w1, [w0+3]

00001d60 <.L19>:
    }
    __lcd_send(self, self->display_control | LCD_DISPLAYCONTROL, INTERNAL_WRITE);
    1d60:	1e 00 78    	mov.w     [w14], w0
    1d62:	30 40 90    	mov.b     [w0+3], w0
    1d64:	00 34 a0    	bset.b    w0, #0x3
    1d66:	82 c0 b3    	mov.b     #0x8, w2
    1d68:	80 40 78    	mov.b     w0, w1
    1d6a:	1e 00 78    	mov.w     [w14], w0
    1d6c:	ed fe 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
}
    1d6e:	00 80 fa    	ulnk      
    1d70:	00 00 06    	return    

00001d72 <_lcd_clear>:

// Sends clear display command to LCD
void lcd_clear(_LCD *self) {
    1d72:	02 00 fa    	lnk       #0x2
    1d74:	00 0f 78    	mov.w     w0, [w14]
    __lcd_send(self, LCD_CLEARDISPLAY, INTERNAL_WRITE);
    1d76:	82 c0 b3    	mov.b     #0x8, w2
    1d78:	11 c0 b3    	mov.b     #0x1, w1
    1d7a:	1e 00 78    	mov.w     [w14], w0
    1d7c:	e5 fe 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    1d7e:	00 7d 20    	mov.w     #0x7d0, w0
    1d80:	01 00 20    	mov.w     #0x0, w1
    1d82:	2c 01 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1d84:	00 80 fa    	ulnk      
    1d86:	00 00 06    	return    

00001d88 <_lcd_putc>:

// Sends single character to LCD display
void lcd_putc(_LCD *self, char c) {
    1d88:	04 00 fa    	lnk       #0x4
    1d8a:	00 0f 78    	mov.w     w0, [w14]
    1d8c:	21 47 98    	mov.b     w1, [w14+2]
    __lcd_send(self, c, DR_WRITE);
    1d8e:	2e 40 90    	mov.b     [w14+2], w0
    1d90:	92 c0 b3    	mov.b     #0x9, w2
    1d92:	80 40 78    	mov.b     w0, w1
    1d94:	1e 00 78    	mov.w     [w14], w0
    1d96:	d8 fe 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
    // delay_by_nop(1000);
}
    1d98:	00 80 fa    	ulnk      
    1d9a:	00 00 06    	return    

00001d9c <_lcd_goto>:

// Sends commands to move LCD cursor to specified location
void lcd_goto(_LCD *self, uint8_t line, uint8_t col) { //x=col, y=row
    1d9c:	06 00 fa    	lnk       #0x6
    1d9e:	10 07 98    	mov.w     w0, [w14+2]
    1da0:	41 47 98    	mov.b     w1, [w14+4]
    1da2:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t address;
    switch(line) {
    1da4:	4e 40 90    	mov.b     [w14+4], w0
    1da6:	00 80 fb    	ze        w0, w0
    1da8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1daa:	03 00 32    	bra       Z, 0x1db2 <.L24>
    1dac:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1dae:	04 00 32    	bra       Z, 0x1db8 <.L25>
    1db0:	06 00 37    	bra       0x1dbe <.L27>

00001db2 <.L24>:
        case 1:
            address = 0x00;
    1db2:	00 40 eb    	clr.b     w0
    1db4:	00 4f 78    	mov.b     w0, [w14]
            break;
    1db6:	06 00 37    	bra       0x1dc4 <.L26>

00001db8 <.L25>:
        case 2:
            address = 0x40;
    1db8:	00 c4 b3    	mov.b     #0x40, w0
    1dba:	00 4f 78    	mov.b     w0, [w14]
            break;
    1dbc:	03 00 37    	bra       0x1dc4 <.L26>

00001dbe <.L27>:
        default:
            address = 0x00;
    1dbe:	00 40 eb    	clr.b     w0
    1dc0:	00 4f 78    	mov.b     w0, [w14]
            break;
    1dc2:	00 00 00    	nop       

00001dc4 <.L26>:
    }

    address = address+col;
    1dc4:	5e 40 90    	mov.b     [w14+5], w0
    1dc6:	1e 4f 40    	add.b     w0, [w14], [w14]
    __lcd_send(self, LCD_SETDDRAMADDR | address, INTERNAL_WRITE);
    1dc8:	1e 40 78    	mov.b     [w14], w0
    1dca:	00 74 a0    	bset.b    w0, #0x7
    1dcc:	82 c0 b3    	mov.b     #0x8, w2
    1dce:	80 40 78    	mov.b     w0, w1
    1dd0:	1e 00 90    	mov.w     [w14+2], w0
    1dd2:	ba fe 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
}
    1dd4:	00 80 fa    	ulnk      
    1dd6:	00 00 06    	return    

00001dd8 <_lcd_cursor>:


void lcd_cursor(_LCD *self, uint8_t cur) {
    1dd8:	04 00 fa    	lnk       #0x4
    1dda:	00 0f 78    	mov.w     w0, [w14]
    1ddc:	21 47 98    	mov.b     w1, [w14+2]
    switch(cur) {
    1dde:	2e 40 90    	mov.b     [w14+2], w0
    1de0:	00 80 fb    	ze        w0, w0
    1de2:	00 00 e0    	cp0.w     w0
    1de4:	03 00 32    	bra       Z, 0x1dec <.L30>
    1de6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1de8:	06 00 32    	bra       Z, 0x1df6 <.L31>
        case 0:
            __lcd_send(self, 0x0C, INTERNAL_WRITE);
            break;
        case 1:
            __lcd_send(self, 0x0E, INTERNAL_WRITE);
            break;
        default:
            break;
    1dea:	0a 00 37    	bra       0x1e00 <.L28>

00001dec <.L30>:
    1dec:	82 c0 b3    	mov.b     #0x8, w2
    1dee:	c1 c0 b3    	mov.b     #0xc, w1
    1df0:	1e 00 78    	mov.w     [w14], w0
    1df2:	aa fe 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
    1df4:	05 00 37    	bra       0x1e00 <.L28>

00001df6 <.L31>:
    1df6:	82 c0 b3    	mov.b     #0x8, w2
    1df8:	e1 c0 b3    	mov.b     #0xe, w1
    1dfa:	1e 00 78    	mov.w     [w14], w0
    1dfc:	a5 fe 07    	rcall     0x1b48 <___lcd_send> <.LFB2> <.LFE1>
    1dfe:	00 00 00    	nop       

00001e00 <.L28>:
    }
}
    1e00:	00 80 fa    	ulnk      
    1e02:	00 00 06    	return    

00001e04 <_lcd_print1>:

void lcd_print1(_LCD *self, char *str) {
    1e04:	04 00 fa    	lnk       #0x4
    1e06:	00 0f 78    	mov.w     w0, [w14]
    1e08:	11 07 98    	mov.w     w1, [w14+2]
    lcd_clear(self);
    1e0a:	1e 00 78    	mov.w     [w14], w0
    1e0c:	b2 ff 07    	rcall     0x1d72 <_lcd_clear> <.LFB8> <.LFE7>
    while (*str) {
    1e0e:	08 00 37    	bra       0x1e20 <.L34>

00001e10 <.L35>:
        lcd_putc(self, *str);
    1e10:	1e 00 90    	mov.w     [w14+2], w0
    1e12:	10 40 78    	mov.b     [w0], w0
    1e14:	80 40 78    	mov.b     w0, w1
    1e16:	1e 00 78    	mov.w     [w14], w0
    1e18:	b7 ff 07    	rcall     0x1d88 <_lcd_putc> <.LFB9> <.LFE8>
        str++;
    1e1a:	1e 00 90    	mov.w     [w14+2], w0
    1e1c:	00 00 e8    	inc.w     w0, w0
    1e1e:	10 07 98    	mov.w     w0, [w14+2]

00001e20 <.L34>:
    1e20:	1e 00 90    	mov.w     [w14+2], w0
    1e22:	10 40 78    	mov.b     [w0], w0
    1e24:	00 04 e0    	cp0.b     w0
    1e26:	f4 ff 3a    	bra       NZ, 0x1e10 <.L35>
    }
}
    1e28:	00 80 fa    	ulnk      
    1e2a:	00 00 06    	return    

00001e2c <_lcd_print2>:

void lcd_print2(_LCD *self, char* line1, char* line2){
    1e2c:	42 00 fa    	lnk       #0x42
    1e2e:	60 1f 98    	mov.w     w0, [w14+60]
    1e30:	71 1f 98    	mov.w     w1, [w14+62]
    1e32:	02 27 98    	mov.w     w2, [w14+64]
    lcd_clear(self);
    1e34:	6e 18 90    	mov.w     [w14+60], w0
    1e36:	9d ff 07    	rcall     0x1d72 <_lcd_clear> <.LFB8> <.LFE7>
    char str[56] ="                                                        ";
    1e38:	20 54 29    	mov.w     #0x9542, w0
    1e3a:	e4 00 47    	add.w     w14, #0x4, w1
    1e3c:	37 00 09    	repeat    #0x37
    1e3e:	b0 58 78    	mov.b     [w0++], [w1++]
    1e40:	80 03 b1    	sub.w     #0x38, w0
    int i =0;
    1e42:	00 00 eb    	clr.w     w0
    1e44:	00 0f 78    	mov.w     w0, [w14]
    while (*line1){
    1e46:	09 00 37    	bra       0x1e5a <.L37>

00001e48 <.L38>:
        str[i]=*line1;
    1e48:	7e 18 90    	mov.w     [w14+62], w0
    1e4a:	90 40 78    	mov.b     [w0], w1
    1e4c:	64 00 47    	add.w     w14, #0x4, w0
    1e4e:	1e 00 40    	add.w     w0, [w14], w0
    1e50:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    1e52:	1e 0f e8    	inc.w     [w14], [w14]
        line1++;
    1e54:	7e 18 90    	mov.w     [w14+62], w0
    1e56:	00 00 e8    	inc.w     w0, w0
    1e58:	70 1f 98    	mov.w     w0, [w14+62]

00001e5a <.L37>:
    1e5a:	7e 18 90    	mov.w     [w14+62], w0
    1e5c:	10 40 78    	mov.b     [w0], w0
    1e5e:	00 04 e0    	cp0.b     w0
    1e60:	f3 ff 3a    	bra       NZ, 0x1e48 <.L38>
    }
    i =40;
    1e62:	80 02 20    	mov.w     #0x28, w0
    1e64:	00 0f 78    	mov.w     w0, [w14]
    while (*line2){
    1e66:	09 00 37    	bra       0x1e7a <.L39>

00001e68 <.L40>:
        str[i]=*line2;
    1e68:	0e 20 90    	mov.w     [w14+64], w0
    1e6a:	90 40 78    	mov.b     [w0], w1
    1e6c:	64 00 47    	add.w     w14, #0x4, w0
    1e6e:	1e 00 40    	add.w     w0, [w14], w0
    1e70:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    1e72:	1e 0f e8    	inc.w     [w14], [w14]
        line2++;
    1e74:	0e 20 90    	mov.w     [w14+64], w0
    1e76:	00 00 e8    	inc.w     w0, w0
    1e78:	00 27 98    	mov.w     w0, [w14+64]

00001e7a <.L39>:
    1e7a:	0e 20 90    	mov.w     [w14+64], w0
    1e7c:	10 40 78    	mov.b     [w0], w0
    1e7e:	00 04 e0    	cp0.b     w0
    1e80:	f3 ff 3a    	bra       NZ, 0x1e68 <.L40>
    }
    char* strptr=str;
    1e82:	64 00 47    	add.w     w14, #0x4, w0
    1e84:	10 07 98    	mov.w     w0, [w14+2]
    lcd_print1(self,strptr);
    1e86:	9e 00 90    	mov.w     [w14+2], w1
    1e88:	6e 18 90    	mov.w     [w14+60], w0
    1e8a:	bc ff 07    	rcall     0x1e04 <_lcd_print1> <.LFB12> <.LFE11>
}
    1e8c:	00 80 fa    	ulnk      
    1e8e:	00 00 06    	return    

00001e90 <_lcd_print>:

void lcd_print(_LCD *self, char* message) {
    1e90:	30 00 fa    	lnk       #0x30
    1e92:	60 17 98    	mov.w     w0, [w14+44]
    1e94:	71 17 98    	mov.w     w1, [w14+46]
    char newstr1[17] = "                ";
    1e96:	b0 57 29    	mov.w     #0x957b, w0
    1e98:	ea 00 47    	add.w     w14, #0xa, w1
    1e9a:	10 00 09    	repeat    #0x10
    1e9c:	b0 58 78    	mov.b     [w0++], [w1++]
    1e9e:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr1= newstr1;
    1ea0:	6a 0f 47    	add.w     w14, #0xa, [w14]
    char newstr2[17] = "                ";
    1ea2:	b0 57 29    	mov.w     #0x957b, w0
    1ea4:	fb 00 47    	add.w     w14, #0x1b, w1
    1ea6:	10 00 09    	repeat    #0x10
    1ea8:	b0 58 78    	mov.b     [w0++], [w1++]
    1eaa:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr2= newstr2;
    1eac:	7b 00 47    	add.w     w14, #0x1b, w0
    1eae:	10 07 98    	mov.w     w0, [w14+2]
    char* temp1 = newstrptr1;
    1eb0:	9e 00 78    	mov.w     [w14], w1
    1eb2:	31 07 98    	mov.w     w1, [w14+6]
    char* temp2 = newstrptr2;
    1eb4:	9e 00 90    	mov.w     [w14+2], w1
    1eb6:	41 07 98    	mov.w     w1, [w14+8]
    uint8_t i=0;
    1eb8:	00 40 eb    	clr.b     w0
    1eba:	40 47 98    	mov.b     w0, [w14+4]
    while (i <17){
    1ebc:	0f 00 37    	bra       0x1edc <.L42>

00001ebe <.L44>:
        if (*message){
    1ebe:	7e 10 90    	mov.w     [w14+46], w0
    1ec0:	10 40 78    	mov.b     [w0], w0
    1ec2:	00 04 e0    	cp0.b     w0
    1ec4:	08 00 32    	bra       Z, 0x1ed6 <.L43>
            *newstrptr1=*message;
    1ec6:	7e 10 90    	mov.w     [w14+46], w0
    1ec8:	90 40 78    	mov.b     [w0], w1
    1eca:	1e 00 78    	mov.w     [w14], w0
    1ecc:	01 48 78    	mov.b     w1, [w0]
            message++;
    1ece:	7e 10 90    	mov.w     [w14+46], w0
    1ed0:	00 00 e8    	inc.w     w0, w0
    1ed2:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr1++;
    1ed4:	1e 0f e8    	inc.w     [w14], [w14]

00001ed6 <.L43>:
        }
        i++;
    1ed6:	4e 40 90    	mov.b     [w14+4], w0
    1ed8:	00 40 e8    	inc.b     w0, w0
    1eda:	40 47 98    	mov.b     w0, [w14+4]

00001edc <.L42>:
    1edc:	4e 40 90    	mov.b     [w14+4], w0
    1ede:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    1ee0:	ee ff 36    	bra       LEU, 0x1ebe <.L44>
    }
    i=0;
    1ee2:	00 40 eb    	clr.b     w0
    1ee4:	40 47 98    	mov.b     w0, [w14+4]
    message--; //SKETCHY!
    1ee6:	7e 10 90    	mov.w     [w14+46], w0
    1ee8:	00 00 e9    	dec.w     w0, w0
    1eea:	70 17 98    	mov.w     w0, [w14+46]
    while (i <17){
    1eec:	11 00 37    	bra       0x1f10 <.L45>

00001eee <.L47>:
        if (*message){
    1eee:	7e 10 90    	mov.w     [w14+46], w0
    1ef0:	10 40 78    	mov.b     [w0], w0
    1ef2:	00 04 e0    	cp0.b     w0
    1ef4:	0a 00 32    	bra       Z, 0x1f0a <.L46>
            *newstrptr2=*message;
    1ef6:	7e 10 90    	mov.w     [w14+46], w0
    1ef8:	90 40 78    	mov.b     [w0], w1
    1efa:	1e 00 90    	mov.w     [w14+2], w0
    1efc:	01 48 78    	mov.b     w1, [w0]
            message++;
    1efe:	7e 10 90    	mov.w     [w14+46], w0
    1f00:	00 00 e8    	inc.w     w0, w0
    1f02:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr2++;
    1f04:	1e 00 90    	mov.w     [w14+2], w0
    1f06:	00 00 e8    	inc.w     w0, w0
    1f08:	10 07 98    	mov.w     w0, [w14+2]

00001f0a <.L46>:
        }
        i++;
    1f0a:	4e 40 90    	mov.b     [w14+4], w0
    1f0c:	00 40 e8    	inc.b     w0, w0
    1f0e:	40 47 98    	mov.b     w0, [w14+4]

00001f10 <.L45>:
    1f10:	4e 40 90    	mov.b     [w14+4], w0
    1f12:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    1f14:	ec ff 36    	bra       LEU, 0x1eee <.L47>
    }
    lcd_print2(self, temp1, temp2);
    1f16:	4e 01 90    	mov.w     [w14+8], w2
    1f18:	be 00 90    	mov.w     [w14+6], w1
    1f1a:	6e 10 90    	mov.w     [w14+44], w0
    1f1c:	87 ff 07    	rcall     0x1e2c <_lcd_print2> <.LFB13> <.LFE12>
}
    1f1e:	00 80 fa    	ulnk      
    1f20:	00 00 06    	return    

00001f22 <_lcd_broadcast>:

void lcd_broadcast(char* message) {
    1f22:	04 00 fa    	lnk       #0x4
    1f24:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t i;
    for (i = 0; i < 3; i++)
    1f26:	00 40 eb    	clr.b     w0
    1f28:	00 4f 78    	mov.b     w0, [w14]
    1f2a:	08 00 37    	bra       0x1f3c <.L49>

00001f2c <.L50>:
        lcd_print(&lcd[i], message);
    1f2c:	1e 80 fb    	ze        [w14], w0
    1f2e:	65 00 b9    	mul.su    w0, #0x5, w0
    1f30:	80 00 78    	mov.w     w0, w1
    1f32:	00 04 21    	mov.w     #0x1040, w0
    1f34:	00 80 40    	add.w     w1, w0, w0
    1f36:	9e 00 90    	mov.w     [w14+2], w1
    1f38:	ab ff 07    	rcall     0x1e90 <_lcd_print> <.LFB14> <.LFE13>
    1f3a:	1e 4f e8    	inc.b     [w14], [w14]

00001f3c <.L49>:
    1f3c:	1e 40 78    	mov.b     [w14], w0
    1f3e:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1f40:	f5 ff 36    	bra       LEU, 0x1f2c <.L50>
}
    1f42:	00 80 fa    	ulnk      
    1f44:	00 00 06    	return    

00001f46 <_itoa>:

char * itoa (int value, char *result, int base) {
    1f46:	0e 00 fa    	lnk       #0xe
    1f48:	40 07 98    	mov.w     w0, [w14+8]
    1f4a:	51 07 98    	mov.w     w1, [w14+10]
    1f4c:	62 07 98    	mov.w     w2, [w14+12]
    // check that the base if valid
    if (base < 2 || base > 36) { *result = '\0'; return result; }
    1f4e:	6e 00 90    	mov.w     [w14+12], w0
    1f50:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1f52:	04 00 34    	bra       LE, 0x1f5c <.L52>
    1f54:	ee 00 90    	mov.w     [w14+12], w1
    1f56:	40 02 20    	mov.w     #0x24, w0
    1f58:	80 8f 50    	sub.w     w1, w0, [w15]
    1f5a:	05 00 34    	bra       LE, 0x1f66 <.L53>

00001f5c <.L52>:
    1f5c:	5e 00 90    	mov.w     [w14+10], w0
    1f5e:	80 40 eb    	clr.b     w1
    1f60:	01 48 78    	mov.b     w1, [w0]
    1f62:	5e 00 90    	mov.w     [w14+10], w0
    1f64:	39 00 37    	bra       0x1fd8 <.L54>

00001f66 <.L53>:

    char* ptr = result, *ptr1 = result, tmp_char;
    1f66:	de 00 90    	mov.w     [w14+10], w1
    1f68:	01 0f 78    	mov.w     w1, [w14]
    1f6a:	5e 01 90    	mov.w     [w14+10], w2
    1f6c:	12 07 98    	mov.w     w2, [w14+2]

00001f6e <.L55>:
    int tmp_value;

    do {
        tmp_value = value;
    1f6e:	ce 00 90    	mov.w     [w14+8], w1
    1f70:	21 07 98    	mov.w     w1, [w14+4]
        value /= base;
    1f72:	ce 00 90    	mov.w     [w14+8], w1
    1f74:	6e 00 90    	mov.w     [w14+12], w0
    1f76:	00 01 78    	mov.w     w0, w2
    1f78:	11 00 09    	repeat    #0x11
    1f7a:	82 00 d8    	div.sw    w1, w2
    1f7c:	40 07 98    	mov.w     w0, [w14+8]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
    1f7e:	ce 00 90    	mov.w     [w14+8], w1
    1f80:	6e 00 90    	mov.w     [w14+12], w0
    1f82:	00 88 b9    	mul.ss    w1, w0, w0
    1f84:	00 00 78    	mov.w     w0, w0
    1f86:	ae 00 90    	mov.w     [w14+4], w1
    1f88:	00 80 50    	sub.w     w1, w0, w0
    1f8a:	30 02 b0    	add.w     #0x23, w0
    1f8c:	c1 58 29    	mov.w     #0x958c, w1
    1f8e:	e1 40 78    	mov.b     [w1+w0], w1
    1f90:	1e 00 78    	mov.w     [w14], w0
    1f92:	01 48 78    	mov.b     w1, [w0]
    1f94:	1e 0f e8    	inc.w     [w14], [w14]
    } while ( value );
    1f96:	4e 00 90    	mov.w     [w14+8], w0
    1f98:	00 00 e0    	cp0.w     w0
    1f9a:	e9 ff 3a    	bra       NZ, 0x1f6e <.L55>

    // Apply negative sign
    if (tmp_value < 0) *ptr++ = '-';
    1f9c:	2e 00 90    	mov.w     [w14+4], w0
    1f9e:	00 00 e0    	cp0.w     w0
    1fa0:	04 00 3d    	bra       GE, 0x1faa <.L56>
    1fa2:	1e 00 78    	mov.w     [w14], w0
    1fa4:	d1 c2 b3    	mov.b     #0x2d, w1
    1fa6:	01 48 78    	mov.b     w1, [w0]
    1fa8:	1e 0f e8    	inc.w     [w14], [w14]

00001faa <.L56>:
    *ptr-- = '\0';
    1faa:	1e 00 78    	mov.w     [w14], w0
    1fac:	80 40 eb    	clr.b     w1
    1fae:	01 48 78    	mov.b     w1, [w0]
    1fb0:	1e 0f e9    	dec.w     [w14], [w14]
    while (ptr1 < ptr) {
    1fb2:	0e 00 37    	bra       0x1fd0 <.L57>

00001fb4 <.L58>:
        tmp_char = *ptr;
    1fb4:	1e 00 78    	mov.w     [w14], w0
    1fb6:	90 40 78    	mov.b     [w0], w1
    1fb8:	61 47 98    	mov.b     w1, [w14+6]
        *ptr--= *ptr1;
    1fba:	1e 00 90    	mov.w     [w14+2], w0
    1fbc:	90 40 78    	mov.b     [w0], w1
    1fbe:	1e 00 78    	mov.w     [w14], w0
    1fc0:	01 48 78    	mov.b     w1, [w0]
    1fc2:	1e 0f e9    	dec.w     [w14], [w14]
        *ptr1++ = tmp_char;
    1fc4:	1e 00 90    	mov.w     [w14+2], w0
    1fc6:	6e 41 90    	mov.b     [w14+6], w2
    1fc8:	02 48 78    	mov.b     w2, [w0]
    1fca:	1e 00 90    	mov.w     [w14+2], w0
    1fcc:	00 00 e8    	inc.w     w0, w0
    1fce:	10 07 98    	mov.w     w0, [w14+2]

00001fd0 <.L57>:
    1fd0:	1e 00 90    	mov.w     [w14+2], w0
    1fd2:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1fd4:	ef ff 39    	bra       NC, 0x1fb4 <.L58>
    }
    return result;
    1fd6:	5e 00 90    	mov.w     [w14+10], w0

00001fd8 <.L54>:
}
    1fd8:	00 80 fa    	ulnk      
    1fda:	00 00 06    	return    

00001fdc <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    1fdc:	08 00 fa    	lnk       #0x8
    1fde:	20 07 98    	mov.w     w0, [w14+4]
    1fe0:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    1fe2:	60 00 b8    	mul.uu    w0, #0x0, w0
    1fe4:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    1fe6:	05 00 37    	bra       0x1ff2 <.L2>

00001fe8 <.L3>:
        __asm__("nop");
    1fe8:	00 00 00    	nop       
        count +=1;
    1fea:	12 00 20    	mov.w     #0x1, w2
    1fec:	03 00 20    	mov.w     #0x0, w3
    1fee:	1e 0f 41    	add.w     w2, [w14], [w14]
    1ff0:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00001ff2 <.L2>:
    1ff2:	2e 00 90    	mov.w     [w14+4], w0
    1ff4:	be 00 90    	mov.w     [w14+6], w1
    1ff6:	1e 01 be    	mov.d     [w14], w2
    1ff8:	80 0f 51    	sub.w     w2, w0, [w15]
    1ffa:	81 8f 59    	subb.w    w3, w1, [w15]
    1ffc:	f5 ff 39    	bra       NC, 0x1fe8 <.L3>
    }
}
    1ffe:	00 80 fa    	ulnk      
    2000:	00 00 06    	return    

00002002 <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    2002:	04 00 fa    	lnk       #0x4
    2004:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    2006:	1e 00 90    	mov.w     [w14+2], w0
    2008:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    200a:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    200c:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    200e:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    2010:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    2012:	80 13 80    	mov.w     0x270, w0
    2014:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    2016:	36 00 07    	rcall     0x2084 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2018:	00 80 fa    	ulnk      
    201a:	00 00 06    	return    

0000201c <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    201c:	02 00 fa    	lnk       #0x2
   int x = 0;
    201e:	00 00 eb    	clr.w     w0
    2020:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    2022:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    2024:	a0 00 20    	mov.w     #0xa, w0
    2026:	01 00 20    	mov.w     #0x0, w1
    2028:	d9 ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    202a:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    202c:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    202e:	07 00 37    	bra       0x203e <.L6>

00002030 <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    2030:	10 00 20    	mov.w     #0x1, w0
    2032:	01 00 20    	mov.w     #0x0, w1
    2034:	d3 ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    2036:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    2038:	1e 00 78    	mov.w     [w14], w0
    203a:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    203c:	05 00 3c    	bra       GT, 0x2048 <.L9>

0000203e <.L6>:
    203e:	b0 13 80    	mov.w     0x276, w0
    2040:	61 00 60    	and.w     w0, #0x1, w0
    2042:	00 00 e0    	cp0.w     w0
    2044:	f5 ff 3a    	bra       NZ, 0x2030 <.L8>
    2046:	01 00 37    	bra       0x204a <.L7>

00002048 <.L9>:
      break;
    2048:	00 00 00    	nop       

0000204a <.L7>:
   }
   delay_by_nop(2);
    204a:	20 00 20    	mov.w     #0x2, w0
    204c:	01 00 20    	mov.w     #0x0, w1
    204e:	c6 ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2050:	00 80 fa    	ulnk      
    2052:	00 00 06    	return    

00002054 <_i2c_restart>:

void i2c_restart(void){
    2054:	02 00 fa    	lnk       #0x2
   int x = 0;
    2056:	00 00 eb    	clr.w     w0
    2058:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    205a:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    205c:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    205e:	07 00 37    	bra       0x206e <.L11>

00002060 <.L13>:
      delay_by_nop(1);
    2060:	10 00 20    	mov.w     #0x1, w0
    2062:	01 00 20    	mov.w     #0x0, w1
    2064:	bb ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    2066:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    2068:	1e 00 78    	mov.w     [w14], w0
    206a:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    206c:	05 00 3c    	bra       GT, 0x2078 <.L14>

0000206e <.L11>:
    206e:	b0 13 80    	mov.w     0x276, w0
    2070:	62 00 60    	and.w     w0, #0x2, w0
    2072:	00 00 e0    	cp0.w     w0
    2074:	f5 ff 3a    	bra       NZ, 0x2060 <.L13>
    2076:	01 00 37    	bra       0x207a <.L12>

00002078 <.L14>:
    2078:	00 00 00    	nop       

0000207a <.L12>:
   }
   delay_by_nop(2);
    207a:	20 00 20    	mov.w     #0x2, w0
    207c:	01 00 20    	mov.w     #0x0, w1
    207e:	ae ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2080:	00 80 fa    	ulnk      
    2082:	00 00 06    	return    

00002084 <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    2084:	02 00 fa    	lnk       #0x2
   int x = 0;
    2086:	00 00 eb    	clr.w     w0
    2088:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    208a:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    208c:	07 00 37    	bra       0x209c <.L16>

0000208e <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    208e:	10 00 20    	mov.w     #0x1, w0
    2090:	01 00 20    	mov.w     #0x0, w1
    2092:	a4 ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    2094:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    2096:	1e 00 78    	mov.w     [w14], w0
    2098:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    209a:	05 00 3c    	bra       GT, 0x20a6 <.L19>

0000209c <.L16>:
    209c:	b0 13 80    	mov.w     0x276, w0
    209e:	64 00 60    	and.w     w0, #0x4, w0
    20a0:	00 00 e0    	cp0.w     w0
    20a2:	f5 ff 3a    	bra       NZ, 0x208e <.L18>
    20a4:	01 00 37    	bra       0x20a8 <.L17>

000020a6 <.L19>:
    20a6:	00 00 00    	nop       

000020a8 <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    20a8:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    20aa:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    20ac:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    20ae:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    20b0:	40 01 20    	mov.w     #0x14, w0
    20b2:	01 00 20    	mov.w     #0x0, w1
    20b4:	93 ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    20b6:	00 80 fa    	ulnk      
    20b8:	00 00 06    	return    

000020ba <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    20ba:	04 00 fa    	lnk       #0x4
    20bc:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    20be:	00 00 00    	nop       

000020c0 <.L21>:
    20c0:	c0 13 80    	mov.w     0x278, w0
    20c2:	61 00 60    	and.w     w0, #0x1, w0
    20c4:	00 00 e0    	cp0.w     w0
    20c6:	fc ff 3a    	bra       NZ, 0x20c0 <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    20c8:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    20ca:	1e 00 90    	mov.w     [w14+2], w0
    20cc:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    20ce:	00 00 eb    	clr.w     w0
    20d0:	00 0f 78    	mov.w     w0, [w14]
    20d2:	09 00 37    	bra       0x20e6 <.L22>

000020d4 <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    20d4:	c1 13 80    	mov.w     0x278, w1
    20d6:	00 00 24    	mov.w     #0x4000, w0
    20d8:	00 80 60    	and.w     w1, w0, w0
    20da:	00 00 e0    	cp0.w     w0
    20dc:	09 00 32    	bra       Z, 0x20f0 <.L29>
      delay_by_nop(1); }
    20de:	10 00 20    	mov.w     #0x1, w0
    20e0:	01 00 20    	mov.w     #0x0, w1
    20e2:	7c ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    20e4:	1e 0f e8    	inc.w     [w14], [w14]

000020e6 <.L22>:
    20e6:	30 1f 20    	mov.w     #0x1f3, w0
    20e8:	9e 00 78    	mov.w     [w14], w1
    20ea:	80 8f 50    	sub.w     w1, w0, [w15]
    20ec:	f3 ff 34    	bra       LE, 0x20d4 <.L25>
    20ee:	01 00 37    	bra       0x20f2 <.L24>

000020f0 <.L29>:
    20f0:	00 00 00    	nop       

000020f2 <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    20f2:	40 1f 20    	mov.w     #0x1f4, w0
    20f4:	9e 00 78    	mov.w     [w14], w1
    20f6:	80 8f 50    	sub.w     w1, w0, [w15]
    20f8:	02 00 3a    	bra       NZ, 0x20fe <.L26>
        return(1); }    // return 1 to indicate failure
    20fa:	10 c0 b3    	mov.b     #0x1, w0
    20fc:	0c 00 37    	bra       0x2116 <.L27>

000020fe <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    20fe:	c1 13 80    	mov.w     0x278, w1
    2100:	00 00 28    	mov.w     #0x8000, w0
    2102:	00 80 60    	and.w     w1, w0, w0
    2104:	00 00 e0    	cp0.w     w0
    2106:	03 00 32    	bra       Z, 0x210e <.L28>
      reset_i2c_bus();
    2108:	bd ff 07    	rcall     0x2084 <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    210a:	10 c0 b3    	mov.b     #0x1, w0
    210c:	04 00 37    	bra       0x2116 <.L27>

0000210e <.L28>:

   delay_by_nop(2);
    210e:	20 00 20    	mov.w     #0x2, w0
    2110:	01 00 20    	mov.w     #0x0, w1
    2112:	64 ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    2114:	00 40 eb    	clr.b     w0

00002116 <.L27>:
}
    2116:	00 80 fa    	ulnk      
    2118:	00 00 06    	return    

0000211a <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    211a:	04 00 fa    	lnk       #0x4
   int i = 0;
    211c:	00 00 eb    	clr.w     w0
    211e:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2120:	00 40 eb    	clr.b     w0
    2122:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    2124:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    2126:	05 00 37    	bra       0x2132 <.L31>

00002128 <.L33>:
      i ++;
    2128:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    212a:	00 7d 20    	mov.w     #0x7d0, w0
    212c:	9e 00 78    	mov.w     [w14], w1
    212e:	80 8f 50    	sub.w     w1, w0, [w15]
    2130:	05 00 3c    	bra       GT, 0x213c <.L34>

00002132 <.L31>:
    2132:	c0 13 80    	mov.w     0x278, w0
    2134:	62 00 60    	and.w     w0, #0x2, w0
    2136:	00 00 e0    	cp0.w     w0
    2138:	f7 ff 32    	bra       Z, 0x2128 <.L33>
    213a:	01 00 37    	bra       0x213e <.L32>

0000213c <.L34>:
    213c:	00 00 00    	nop       

0000213e <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    213e:	80 13 80    	mov.w     0x270, w0
    2140:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    2142:	2e 40 90    	mov.b     [w14+2], w0
}
    2144:	00 80 fa    	ulnk      
    2146:	00 00 06    	return    

00002148 <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    2148:	04 00 fa    	lnk       #0x4
   int i = 0;
    214a:	00 00 eb    	clr.w     w0
    214c:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    214e:	00 40 eb    	clr.b     w0
    2150:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    2152:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    2154:	05 00 37    	bra       0x2160 <.L36>

00002156 <.L38>:
      i++;
    2156:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2158:	00 7d 20    	mov.w     #0x7d0, w0
    215a:	9e 00 78    	mov.w     [w14], w1
    215c:	80 8f 50    	sub.w     w1, w0, [w15]
    215e:	05 00 3c    	bra       GT, 0x216a <.L39>

00002160 <.L36>:
    2160:	c0 13 80    	mov.w     0x278, w0
    2162:	62 00 60    	and.w     w0, #0x2, w0
    2164:	00 00 e0    	cp0.w     w0
    2166:	f7 ff 32    	bra       Z, 0x2156 <.L38>
    2168:	01 00 37    	bra       0x216c <.L37>

0000216a <.L39>:
    216a:	00 00 00    	nop       

0000216c <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    216c:	80 13 80    	mov.w     0x270, w0
    216e:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    2170:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    2172:	a0 00 20    	mov.w     #0xa, w0
    2174:	01 00 20    	mov.w     #0x0, w1
    2176:	32 ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2178:	2e 40 90    	mov.b     [w14+2], w0
}
    217a:	00 80 fa    	ulnk      
    217c:	00 00 06    	return    

0000217e <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    217e:	04 00 fa    	lnk       #0x4
   int i = 0;
    2180:	00 00 eb    	clr.w     w0
    2182:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2184:	00 40 eb    	clr.b     w0
    2186:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    2188:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    218a:	05 00 37    	bra       0x2196 <.L41>

0000218c <.L43>:
      i++;
    218c:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    218e:	00 7d 20    	mov.w     #0x7d0, w0
    2190:	9e 00 78    	mov.w     [w14], w1
    2192:	80 8f 50    	sub.w     w1, w0, [w15]
    2194:	05 00 3c    	bra       GT, 0x21a0 <.L44>

00002196 <.L41>:
    2196:	c0 13 80    	mov.w     0x278, w0
    2198:	62 00 60    	and.w     w0, #0x2, w0
    219a:	00 00 e0    	cp0.w     w0
    219c:	f7 ff 32    	bra       Z, 0x218c <.L43>
    219e:	01 00 37    	bra       0x21a2 <.L42>

000021a0 <.L44>:
    21a0:	00 00 00    	nop       

000021a2 <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    21a2:	80 13 80    	mov.w     0x270, w0
    21a4:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    21a6:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    21a8:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    21aa:	a0 00 20    	mov.w     #0xa, w0
    21ac:	01 00 20    	mov.w     #0x0, w1
    21ae:	16 ff 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    21b0:	2e 40 90    	mov.b     [w14+2], w0
}
    21b2:	00 80 fa    	ulnk      
    21b4:	00 00 06    	return    

000021b6 <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    21b6:	04 00 fa    	lnk       #0x4
    21b8:	00 4f 78    	mov.b     w0, [w14]
    21ba:	11 47 98    	mov.b     w1, [w14+1]
    21bc:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    21be:	2e ff 07    	rcall     0x201c <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    21c0:	1e 00 fb    	se        [w14], w0
    21c2:	80 00 78    	mov.w     w0, w1
    21c4:	e0 ff 2f    	mov.w     #0xfffe, w0
    21c6:	00 80 60    	and.w     w1, w0, w0
    21c8:	78 ff 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    21ca:	1e 40 90    	mov.b     [w14+1], w0
    21cc:	00 00 fb    	se        w0, w0
    21ce:	75 ff 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    21d0:	2e 40 90    	mov.b     [w14+2], w0
    21d2:	00 00 fb    	se        w0, w0
    21d4:	72 ff 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    21d6:	56 ff 07    	rcall     0x2084 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    21d8:	00 80 fa    	ulnk      
    21da:	00 00 06    	return    

000021dc <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    21dc:	04 00 fa    	lnk       #0x4
    21de:	20 47 98    	mov.b     w0, [w14+2]
    21e0:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    21e2:	1c ff 07    	rcall     0x201c <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    21e4:	2e 40 90    	mov.b     [w14+2], w0
    21e6:	00 00 fb    	se        w0, w0
    21e8:	68 ff 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    21ea:	3e 40 90    	mov.b     [w14+3], w0
    21ec:	00 00 fb    	se        w0, w0
    21ee:	65 ff 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    21f0:	a0 00 20    	mov.w     #0xa, w0
    21f2:	01 00 20    	mov.w     #0x0, w1
    21f4:	f3 fe 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   i2c_restart();
    21f6:	2e ff 07    	rcall     0x2054 <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    21f8:	2e 40 90    	mov.b     [w14+2], w0
    21fa:	00 04 a0    	bset.b    w0, #0x0
    21fc:	00 00 fb    	se        w0, w0
    21fe:	5d ff 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    2200:	8c ff 07    	rcall     0x211a <_i2c_read> <.LFB6> <.LFE5>
    2202:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    2204:	3f ff 07    	rcall     0x2084 <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    2206:	1e 40 78    	mov.b     [w14], w0
}
    2208:	00 80 fa    	ulnk      
    220a:	00 00 06    	return    

0000220c <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is there, 0 means it is not there
unsigned char I2Cpoll(char addr){
    220c:	04 00 fa    	lnk       #0x4
    220e:	20 47 98    	mov.b     w0, [w14+2]
    unsigned char temp = 0;
    2210:	00 40 eb    	clr.b     w0
    2212:	00 4f 78    	mov.b     w0, [w14]
    i2c_start();
    2214:	03 ff 07    	rcall     0x201c <_i2c_start> <.LFB2> <.LFE1>
    temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    2216:	2e 40 90    	mov.b     [w14+2], w0
    2218:	00 00 fb    	se        w0, w0
    221a:	80 00 78    	mov.w     w0, w1
    221c:	e0 ff 2f    	mov.w     #0xfffe, w0
    221e:	00 80 60    	and.w     w1, w0, w0
    2220:	4c ff 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
    2222:	00 4f 78    	mov.b     w0, [w14]
    reset_i2c_bus();
    2224:	2f ff 07    	rcall     0x2084 <_reset_i2c_bus> <.LFB4> <.LFE3>
    if (temp == 0) {
    2226:	1e 40 78    	mov.b     [w14], w0
    2228:	00 04 e0    	cp0.b     w0
    222a:	02 00 3a    	bra       NZ, 0x2230 <.L48>
        return 1; // We found it, no error
    222c:	10 c0 b3    	mov.b     #0x1, w0
    222e:	01 00 37    	bra       0x2232 <.L49>

00002230 <.L48>:
    } else return 0;
    2230:	00 40 eb    	clr.b     w0

00002232 <.L49>:
}
    2232:	00 80 fa    	ulnk      
    2234:	00 00 06    	return    

00002236 <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    2236:	08 00 fa    	lnk       #0x8
    2238:	20 47 98    	mov.b     w0, [w14+2]
    223a:	21 07 98    	mov.w     w1, [w14+4]
    223c:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    223e:	00 40 eb    	clr.b     w0
    2240:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    2242:	ec fe 07    	rcall     0x201c <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    2244:	2e 40 90    	mov.b     [w14+2], w0
    2246:	00 00 fb    	se        w0, w0
    2248:	80 00 78    	mov.w     w0, w1
    224a:	e0 ff 2f    	mov.w     #0xfffe, w0
    224c:	00 80 60    	and.w     w1, w0, w0
    224e:	35 ff 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
    2250:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    2252:	00 40 eb    	clr.b     w0
    2254:	10 47 98    	mov.b     w0, [w14+1]
    2256:	0d 00 37    	bra       0x2272 <.L51>

00002258 <.L52>:
    err |= send_i2c_byte(dat[j]);
    2258:	1e 40 90    	mov.b     [w14+1], w0
    225a:	00 80 fb    	ze        w0, w0
    225c:	ae 00 90    	mov.w     [w14+4], w1
    225e:	00 80 40    	add.w     w1, w0, w0
    2260:	10 40 78    	mov.b     [w0], w0
    2262:	00 00 fb    	se        w0, w0
    2264:	2a ff 07    	rcall     0x20ba <_send_i2c_byte> <.LFB5> <.LFE4>
    2266:	9e 40 78    	mov.b     [w14], w1
    2268:	01 40 70    	ior.b     w0, w1, w0
    226a:	00 4f 78    	mov.b     w0, [w14]
    226c:	1e 40 90    	mov.b     [w14+1], w0
    226e:	00 40 e8    	inc.b     w0, w0
    2270:	10 47 98    	mov.b     w0, [w14+1]

00002272 <.L51>:
    2272:	9e 40 90    	mov.b     [w14+1], w1
    2274:	6e 40 90    	mov.b     [w14+6], w0
    2276:	80 cf 50    	sub.b     w1, w0, [w15]
    2278:	ef ff 39    	bra       NC, 0x2258 <.L52>
  }
  reset_i2c_bus();
    227a:	04 ff 07    	rcall     0x2084 <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    227c:	1e 40 78    	mov.b     [w14], w0
}
    227e:	00 80 fa    	ulnk      
    2280:	00 00 06    	return    

00002282 <_i2c2_init>:

////////////////////////////////////////////////////////////////////////////////
// I2C2 ////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// initiates I2C3 module to baud rate BRG
void i2c2_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    2282:	04 00 fa    	lnk       #0x4
    2284:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C2BRG = BRG;           // Sets freq to 100kHz
    2286:	1e 00 90    	mov.w     [w14+2], w0
    2288:	a0 10 88    	mov.w     w0, 0x214
   I2C2CONbits.I2CEN = 0;	// Disable I2C Mode
    228a:	17 e2 a9    	bclr.b    0x217, #0x7
   I2C2CONbits.DISSLW = 1;	// Disable slew rate control
    228c:	17 22 a8    	bset.b    0x217, #0x1
   IFS3bits.MI2C2IF = 0;	 // Clear Interrupt
    228e:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2CONbits.I2CEN = 1;	// Enable I2C Mode
    2290:	17 e2 a8    	bset.b    0x217, #0x7
   temp = I2C2RCV;	 // read buffer to clear buffer full
    2292:	80 10 80    	mov.w     0x210, w0
    2294:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    2296:	f6 fe 07    	rcall     0x2084 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2298:	00 80 fa    	ulnk      
    229a:	00 00 06    	return    

0000229c <_i2c2_start>:

//function iniates a start condition on bus
void i2c2_start(void){
    229c:	02 00 fa    	lnk       #0x2
   int x = 0;
    229e:	00 00 eb    	clr.w     w0
    22a0:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.ACKDT = 0;	//Reset any previous Ack
    22a2:	16 a2 a9    	bclr.b    0x216, #0x5
   delay_by_nop(10);
    22a4:	a0 00 20    	mov.w     #0xa, w0
    22a6:	01 00 20    	mov.w     #0x0, w1
    22a8:	99 fe 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C2CONbits.SEN = 1;	//Initiate Start condition
    22aa:	16 02 a8    	bset.b    0x216, #0x0
   __asm__("nop");
    22ac:	00 00 00    	nop       

   while (I2C2CONbits.SEN){    //the hardware will automatically clear Start Bit
    22ae:	07 00 37    	bra       0x22be <.L55>

000022b0 <.L57>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    22b0:	10 00 20    	mov.w     #0x1, w0
    22b2:	01 00 20    	mov.w     #0x0, w1
    22b4:	93 fe 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    22b6:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    22b8:	1e 00 78    	mov.w     [w14], w0
    22ba:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    22bc:	05 00 3c    	bra       GT, 0x22c8 <.L58>

000022be <.L55>:
    22be:	b0 10 80    	mov.w     0x216, w0
    22c0:	61 00 60    	and.w     w0, #0x1, w0
    22c2:	00 00 e0    	cp0.w     w0
    22c4:	f5 ff 3a    	bra       NZ, 0x22b0 <.L57>
    22c6:	01 00 37    	bra       0x22ca <.L56>

000022c8 <.L58>:
      break;
    22c8:	00 00 00    	nop       

000022ca <.L56>:
   }
   delay_by_nop(2);
    22ca:	20 00 20    	mov.w     #0x2, w0
    22cc:	01 00 20    	mov.w     #0x0, w1
    22ce:	86 fe 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    22d0:	00 80 fa    	ulnk      
    22d2:	00 00 06    	return    

000022d4 <_i2c2_restart>:

void i2c2_restart(void){
    22d4:	02 00 fa    	lnk       #0x2
   int x = 0;
    22d6:	00 00 eb    	clr.w     w0
    22d8:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.RSEN = 1;	//Initiate restart condition
    22da:	16 22 a8    	bset.b    0x216, #0x1
   __asm__("nop");
    22dc:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C2CONbits.RSEN){
    22de:	07 00 37    	bra       0x22ee <.L60>

000022e0 <.L62>:
      delay_by_nop(1);
    22e0:	10 00 20    	mov.w     #0x1, w0
    22e2:	01 00 20    	mov.w     #0x0, w1
    22e4:	7b fe 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    22e6:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    22e8:	1e 00 78    	mov.w     [w14], w0
    22ea:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    22ec:	05 00 3c    	bra       GT, 0x22f8 <.L63>

000022ee <.L60>:
    22ee:	b0 10 80    	mov.w     0x216, w0
    22f0:	62 00 60    	and.w     w0, #0x2, w0
    22f2:	00 00 e0    	cp0.w     w0
    22f4:	f5 ff 3a    	bra       NZ, 0x22e0 <.L62>
    22f6:	01 00 37    	bra       0x22fa <.L61>

000022f8 <.L63>:
    22f8:	00 00 00    	nop       

000022fa <.L61>:
   }
   delay_by_nop(2);
    22fa:	20 00 20    	mov.w     #0x2, w0
    22fc:	01 00 20    	mov.w     #0x0, w1
    22fe:	6e fe 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2300:	00 80 fa    	ulnk      
    2302:	00 00 06    	return    

00002304 <_reset_i2c2_bus>:


//Resets the I2C bus to Idle
void reset_i2c2_bus(void){
    2304:	02 00 fa    	lnk       #0x2
   int x = 0;
    2306:	00 00 eb    	clr.w     w0
    2308:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.PEN = 1;     //initiate stop bit
    230a:	16 42 a8    	bset.b    0x216, #0x2
   while (I2C2CONbits.PEN) {     //wait for hardware clear of stop bit
    230c:	07 00 37    	bra       0x231c <.L65>

0000230e <.L67>:
      // delay_by_nop(1);
      delay_by_nop(1);
    230e:	10 00 20    	mov.w     #0x1, w0
    2310:	01 00 20    	mov.w     #0x0, w1
    2312:	64 fe 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    2314:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    2316:	1e 00 78    	mov.w     [w14], w0
    2318:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    231a:	05 00 3c    	bra       GT, 0x2326 <.L68>

0000231c <.L65>:
    231c:	b0 10 80    	mov.w     0x216, w0
    231e:	64 00 60    	and.w     w0, #0x4, w0
    2320:	00 00 e0    	cp0.w     w0
    2322:	f5 ff 3a    	bra       NZ, 0x230e <.L67>
    2324:	01 00 37    	bra       0x2328 <.L66>

00002326 <.L68>:
    2326:	00 00 00    	nop       

00002328 <.L66>:
   }

   I2C2CONbits.RCEN = 0;
    2328:	16 62 a9    	bclr.b    0x216, #0x3
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    232a:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2STATbits.IWCOL = 0;
    232c:	18 e2 a9    	bclr.b    0x218, #0x7
   I2C2STATbits.BCL = 0;
    232e:	19 42 a9    	bclr.b    0x219, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    2330:	40 01 20    	mov.w     #0x14, w0
    2332:	01 00 20    	mov.w     #0x0, w1
    2334:	53 fe 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2336:	00 80 fa    	ulnk      
    2338:	00 00 06    	return    

0000233a <_send_i2c2_byte>:


//basic I2C byte send
char send_i2c2_byte(int data){
    233a:	04 00 fa    	lnk       #0x4
    233c:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C2STATbits.TBF) { }
    233e:	00 00 00    	nop       

00002340 <.L70>:
    2340:	c0 10 80    	mov.w     0x218, w0
    2342:	61 00 60    	and.w     w0, #0x1, w0
    2344:	00 00 e0    	cp0.w     w0
    2346:	fc ff 3a    	bra       NZ, 0x2340 <.L70>
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    2348:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2TRN = data; // load the outgoing data byte
    234a:	1e 00 90    	mov.w     [w14+2], w0
    234c:	90 10 88    	mov.w     w0, 0x212

   for (i=0; i<500; i++){           // wait for transmission
    234e:	00 00 eb    	clr.w     w0
    2350:	00 0f 78    	mov.w     w0, [w14]
    2352:	09 00 37    	bra       0x2366 <.L71>

00002354 <.L74>:
      if (!I2C2STATbits.TRSTAT) break; // if master transmit not in progress break
    2354:	c1 10 80    	mov.w     0x218, w1
    2356:	00 00 24    	mov.w     #0x4000, w0
    2358:	00 80 60    	and.w     w1, w0, w0
    235a:	00 00 e0    	cp0.w     w0
    235c:	09 00 32    	bra       Z, 0x2370 <.L78>
      delay_by_nop(1); }
    235e:	10 00 20    	mov.w     #0x1, w0
    2360:	01 00 20    	mov.w     #0x0, w1
    2362:	3c fe 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2364:	1e 0f e8    	inc.w     [w14], [w14]

00002366 <.L71>:
    2366:	30 1f 20    	mov.w     #0x1f3, w0
    2368:	9e 00 78    	mov.w     [w14], w1
    236a:	80 8f 50    	sub.w     w1, w0, [w15]
    236c:	f3 ff 34    	bra       LE, 0x2354 <.L74>
    236e:	01 00 37    	bra       0x2372 <.L73>

00002370 <.L78>:
    2370:	00 00 00    	nop       

00002372 <.L73>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    2372:	40 1f 20    	mov.w     #0x1f4, w0
    2374:	9e 00 78    	mov.w     [w14], w1
    2376:	80 8f 50    	sub.w     w1, w0, [w15]
    2378:	02 00 3a    	bra       NZ, 0x237e <.L75>
        return(1); }    // return 1 to indicate failure
    237a:	10 c0 b3    	mov.b     #0x1, w0
    237c:	0c 00 37    	bra       0x2396 <.L76>

0000237e <.L75>:

   if (I2C2STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    237e:	c1 10 80    	mov.w     0x218, w1
    2380:	00 00 28    	mov.w     #0x8000, w0
    2382:	00 80 60    	and.w     w1, w0, w0
    2384:	00 00 e0    	cp0.w     w0
    2386:	03 00 32    	bra       Z, 0x238e <.L77>
      reset_i2c2_bus();
    2388:	bd ff 07    	rcall     0x2304 <_reset_i2c2_bus> <.LFB16> <.LFE15>
      return(1); }            // abort if not found
    238a:	10 c0 b3    	mov.b     #0x1, w0
    238c:	04 00 37    	bra       0x2396 <.L76>

0000238e <.L77>:

   delay_by_nop(2);
    238e:	20 00 20    	mov.w     #0x2, w0
    2390:	01 00 20    	mov.w     #0x0, w1
    2392:	24 fe 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    2394:	00 40 eb    	clr.b     w0

00002396 <.L76>:
}
    2396:	00 80 fa    	ulnk      
    2398:	00 00 06    	return    

0000239a <_i2c2_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c2_read(void){
    239a:	04 00 fa    	lnk       #0x4
   int i = 0;
    239c:	00 00 eb    	clr.w     w0
    239e:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    23a0:	00 40 eb    	clr.b     w0
    23a2:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    23a4:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {           //if no response, break
    23a6:	05 00 37    	bra       0x23b2 <.L80>

000023a8 <.L82>:
      i ++;
    23a8:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    23aa:	00 7d 20    	mov.w     #0x7d0, w0
    23ac:	9e 00 78    	mov.w     [w14], w1
    23ae:	80 8f 50    	sub.w     w1, w0, [w15]
    23b0:	05 00 3c    	bra       GT, 0x23bc <.L83>

000023b2 <.L80>:
    23b2:	c0 10 80    	mov.w     0x218, w0
    23b4:	62 00 60    	and.w     w0, #0x2, w0
    23b6:	00 00 e0    	cp0.w     w0
    23b8:	f7 ff 32    	bra       Z, 0x23a8 <.L82>
    23ba:	01 00 37    	bra       0x23be <.L81>

000023bc <.L83>:
    23bc:	00 00 00    	nop       

000023be <.L81>:

   data = I2C2RCV;       //get data from I2C2RCV register
    23be:	80 10 80    	mov.w     0x210, w0
    23c0:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    23c2:	2e 40 90    	mov.b     [w14+2], w0
}
    23c4:	00 80 fa    	ulnk      
    23c6:	00 00 06    	return    

000023c8 <_i2c2_read_ack>:


//function reads data, returns the read data, with ack
char i2c2_read_ack(void){	//does not reset bus!!!
    23c8:	04 00 fa    	lnk       #0x4
   int i = 0;
    23ca:	00 00 eb    	clr.w     w0
    23cc:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    23ce:	00 40 eb    	clr.b     w0
    23d0:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    23d2:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    23d4:	05 00 37    	bra       0x23e0 <.L85>

000023d6 <.L87>:
      i++;
    23d6:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    23d8:	00 7d 20    	mov.w     #0x7d0, w0
    23da:	9e 00 78    	mov.w     [w14], w1
    23dc:	80 8f 50    	sub.w     w1, w0, [w15]
    23de:	05 00 3c    	bra       GT, 0x23ea <.L88>

000023e0 <.L85>:
    23e0:	c0 10 80    	mov.w     0x218, w0
    23e2:	62 00 60    	and.w     w0, #0x2, w0
    23e4:	00 00 e0    	cp0.w     w0
    23e6:	f7 ff 32    	bra       Z, 0x23d6 <.L87>
    23e8:	01 00 37    	bra       0x23ec <.L86>

000023ea <.L88>:
    23ea:	00 00 00    	nop       

000023ec <.L86>:

   data = I2C2RCV;               //get data from I2C2RCV register
    23ec:	80 10 80    	mov.w     0x210, w0
    23ee:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKEN = 1;        //start ACK generation
    23f0:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    23f2:	a0 00 20    	mov.w     #0xa, w0
    23f4:	01 00 20    	mov.w     #0x0, w1
    23f6:	f2 fd 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    23f8:	2e 40 90    	mov.b     [w14+2], w0
}
    23fa:	00 80 fa    	ulnk      
    23fc:	00 00 06    	return    

000023fe <_i2c2_read_nack>:

char i2c2_read_nack(void){	//does not reset bus!!!
    23fe:	04 00 fa    	lnk       #0x4
   int i = 0;
    2400:	00 00 eb    	clr.w     w0
    2402:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2404:	00 40 eb    	clr.b     w0
    2406:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    2408:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    240a:	05 00 37    	bra       0x2416 <.L90>

0000240c <.L92>:
      i++;
    240c:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    240e:	00 7d 20    	mov.w     #0x7d0, w0
    2410:	9e 00 78    	mov.w     [w14], w1
    2412:	80 8f 50    	sub.w     w1, w0, [w15]
    2414:	05 00 3c    	bra       GT, 0x2420 <.L93>

00002416 <.L90>:
    2416:	c0 10 80    	mov.w     0x218, w0
    2418:	62 00 60    	and.w     w0, #0x2, w0
    241a:	00 00 e0    	cp0.w     w0
    241c:	f7 ff 32    	bra       Z, 0x240c <.L92>
    241e:	01 00 37    	bra       0x2422 <.L91>

00002420 <.L93>:
    2420:	00 00 00    	nop       

00002422 <.L91>:

   data = I2C2RCV;               //get data from I2C2RCV register
    2422:	80 10 80    	mov.w     0x210, w0
    2424:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    2426:	16 a2 a8    	bset.b    0x216, #0x5
   I2C2CONbits.ACKEN = 1;        //start ack generation
    2428:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    242a:	a0 00 20    	mov.w     #0xa, w0
    242c:	01 00 20    	mov.w     #0x0, w1
    242e:	d6 fd 07    	rcall     0x1fdc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2430:	2e 40 90    	mov.b     [w14+2], w0
}
    2432:	00 80 fa    	ulnk      
    2434:	00 00 06    	return    

00002436 <_I2C2poll>:

// function checks if device at addr i bus
// 1 means it is not there, 0 means it is not there
unsigned char I2C2poll(char addr){
    2436:	04 00 fa    	lnk       #0x4
    2438:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    243a:	00 40 eb    	clr.b     w0
    243c:	00 4f 78    	mov.b     w0, [w14]
   i2c2_start();
    243e:	2e ff 07    	rcall     0x229c <_i2c2_start> <.LFB14> <.LFE13>
   temp = send_i2c2_byte((addr) & (0xfffe)); // set /W bit
    2440:	2e 40 90    	mov.b     [w14+2], w0
    2442:	00 00 fb    	se        w0, w0
    2444:	80 00 78    	mov.w     w0, w1
    2446:	e0 ff 2f    	mov.w     #0xfffe, w0
    2448:	00 80 60    	and.w     w1, w0, w0
    244a:	77 ff 07    	rcall     0x233a <_send_i2c2_byte> <.LFB17> <.LFE16>
    244c:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c2_bus();
    244e:	5a ff 07    	rcall     0x2304 <_reset_i2c2_bus> <.LFB16> <.LFE15>
   if (temp == 0) {
    2450:	1e 40 78    	mov.b     [w14], w0
    2452:	00 04 e0    	cp0.b     w0
    2454:	02 00 3a    	bra       NZ, 0x245a <.L95>
       return 1; // We found it, no error
    2456:	10 c0 b3    	mov.b     #0x1, w0
    2458:	01 00 37    	bra       0x245c <.L96>

0000245a <.L95>:
   } else return 0;
    245a:	00 40 eb    	clr.b     w0

0000245c <.L96>:
}
    245c:	00 80 fa    	ulnk      
    245e:	00 00 06    	return    

00002460 <_init_ajuart>:
uint8_t U1TXbuffer[U1_TX_BUFFER_LENGTH];
uint8_t U1RXbuffer[U1_RX_BUFFER_LENGTH];
uint16_t U1_tx_threshold;

void init_ajuart(void) {
    2460:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure audio jack UART pins and connect them to UART1
    AJ_TX_DIR = OUT; AJ_TX = 1;
    2462:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    2464:	f2 c2 a8    	bset.b    0x2f2, #0x6
    AJ_RX_DIR = IN;
    2466:	f0 e2 a8    	bset.b    0x2f0, #0x7

    RPOR = (uint8_t *)&RPOR0;
    2468:	00 6c 20    	mov.w     #0x6c0, w0
    246a:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    246c:	00 68 20    	mov.w     #0x680, w0
    246e:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    2470:	11 3a 80    	mov.w     0x742, w1
    2472:	f0 0b 20    	mov.w     #0xbf, w0
    2474:	00 81 60    	and.w     w1, w0, w2
    2476:	60 04 20    	mov.w     #0x46, w0
    2478:	71 05 20    	mov.w     #0x57, w1
    247a:	23 74 20    	mov.w     #0x742, w3
    247c:	80 49 78    	mov.b     w0, [w3]
    247e:	81 49 78    	mov.b     w1, [w3]
    2480:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = AJ_RX_RP;
    2482:	1e 00 90    	mov.w     [w14+2], w0
    2484:	40 02 b0    	add.w     #0x24, w0
    2486:	a1 c1 b3    	mov.b     #0x1a, w1
    2488:	01 48 78    	mov.b     w1, [w0]
    RPOR[AJ_TX_RP] = U1TX_RP;
    248a:	9e 00 78    	mov.w     [w14], w1
    248c:	75 80 40    	add.w     w1, #0x15, w0
    248e:	31 c0 b3    	mov.b     #0x3, w1
    2490:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    2492:	10 3a 80    	mov.w     0x742, w0
    2494:	00 01 78    	mov.w     w0, w2
    2496:	02 60 a0    	bset.w    w2, #0x6
    2498:	60 04 20    	mov.w     #0x46, w0
    249a:	71 05 20    	mov.w     #0x57, w1
    249c:	23 74 20    	mov.w     #0x742, w3
    249e:	80 49 78    	mov.b     w0, [w3]
    24a0:	81 49 78    	mov.b     w1, [w3]
    24a2:	82 49 78    	mov.b     w2, [w3]

    U1MODE = 0x0008;                // configure UART1 for transmission at
    24a4:	80 00 20    	mov.w     #0x8, w0
    24a6:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;                 //   115,200 baud, no parity, 1 stop bit
    24a8:	20 02 20    	mov.w     #0x22, w0
    24aa:	40 11 88    	mov.w     w0, 0x228

    U1_tx_buffer.data = U1TXbuffer;
    24ac:	00 84 20    	mov.w     #0x840, w0
    24ae:	60 41 88    	mov.w     w0, 0x82c
    U1_tx_buffer.length = U1_TX_BUFFER_LENGTH;
    24b0:	00 40 20    	mov.w     #0x400, w0
    24b2:	70 41 88    	mov.w     w0, 0x82e
    U1_tx_buffer.head = 0;
    24b4:	00 00 eb    	clr.w     w0
    24b6:	80 41 88    	mov.w     w0, 0x830
    U1_tx_buffer.tail = 0;
    24b8:	00 00 eb    	clr.w     w0
    24ba:	90 41 88    	mov.w     w0, 0x832
    U1_tx_buffer.count = 0;
    24bc:	00 00 eb    	clr.w     w0
    24be:	a0 41 88    	mov.w     w0, 0x834
    U1_tx_threshold = 3 * U1_TX_BUFFER_LENGTH / 4;
    24c0:	00 30 20    	mov.w     #0x300, w0
    24c2:	50 41 88    	mov.w     w0, 0x82a

    U1_rx_buffer.data = U1RXbuffer;
    24c4:	00 c4 20    	mov.w     #0xc40, w0
    24c6:	b0 41 88    	mov.w     w0, 0x836
    U1_rx_buffer.length = U1_RX_BUFFER_LENGTH;
    24c8:	00 40 20    	mov.w     #0x400, w0
    24ca:	c0 41 88    	mov.w     w0, 0x838
    U1_rx_buffer.head = 0;
    24cc:	00 00 eb    	clr.w     w0
    24ce:	d0 41 88    	mov.w     w0, 0x83a
    U1_rx_buffer.tail = 0;
    24d0:	00 00 eb    	clr.w     w0
    24d2:	e0 41 88    	mov.w     w0, 0x83c
    U1_rx_buffer.count = 0;
    24d4:	00 00 eb    	clr.w     w0
    24d6:	f0 41 88    	mov.w     w0, 0x83e

    U1STAbits.UTXISEL1 = 0;         // set UART1 UTXISEL<1:0> = 01, TX interrupt
    24d8:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;         //   when all transmit operations are done
    24da:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    24dc:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;            // enable UART1 TX interrupt
    24de:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    24e0:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;            // enable UART1 RX interrupt
    24e2:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;          // enable UART1 module
    24e4:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
    24e6:	23 42 a8    	bset.b    0x223, #0x2
}
    24e8:	00 80 fa    	ulnk      
    24ea:	00 00 06    	return    

000024ec <_U1_in_waiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
        disable_interrupts();
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
        U1_tx_buffer.head++;
        if (U1_tx_buffer.head == U1_tx_buffer.length)
            U1_tx_buffer.head = 0;
        U1_tx_buffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    24ec:	00 00 fa    	lnk       #0x0
    return U1_rx_buffer.count;
    24ee:	f0 41 80    	mov.w     0x83e, w0
}
    24f0:	00 80 fa    	ulnk      
    24f2:	00 00 06    	return    

000024f4 <_U1_flush_tx_buffer>:

void U1_flush_tx_buffer(void) {
    24f4:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    24f6:	11 11 80    	mov.w     0x222, w1
    24f8:	00 40 20    	mov.w     #0x400, w0
    24fa:	00 80 60    	and.w     w1, w0, w0
    24fc:	00 00 e0    	cp0.w     w0
    24fe:	01 00 3a    	bra       NZ, 0x2502 <.L15>
        U1STAbits.UTXEN = 1;        //   enable it
    2500:	23 42 a8    	bset.b    0x223, #0x2

00002502 <.L15>:
}
    2502:	00 80 fa    	ulnk      
    2504:	00 00 06    	return    

00002506 <_U1_putc>:

void U1_putc(uint8_t ch) {
    2506:	02 00 fa    	lnk       #0x2
    2508:	00 4f 78    	mov.b     w0, [w14]
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}
    250a:	00 00 00    	nop       

0000250c <.L18>:
    250c:	a1 41 80    	mov.w     0x834, w1
    250e:	70 41 80    	mov.w     0x82e, w0
    2510:	80 8f 50    	sub.w     w1, w0, [w15]
    2512:	fc ff 32    	bra       Z, 0x250c <.L18>

    disable_interrupts();
    2514:	ff 3f fc    	disi      #0x3fff
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    2516:	61 41 80    	mov.w     0x82c, w1
    2518:	90 41 80    	mov.w     0x832, w0
    251a:	00 80 40    	add.w     w1, w0, w0
    251c:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    251e:	90 41 80    	mov.w     0x832, w0
    2520:	00 00 e8    	inc.w     w0, w0
    2522:	90 41 88    	mov.w     w0, 0x832
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    2524:	91 41 80    	mov.w     0x832, w1
    2526:	70 41 80    	mov.w     0x82e, w0
    2528:	80 8f 50    	sub.w     w1, w0, [w15]
    252a:	02 00 3a    	bra       NZ, 0x2530 <.L19>
        U1_tx_buffer.tail = 0;
    252c:	00 00 eb    	clr.w     w0
    252e:	90 41 88    	mov.w     w0, 0x832

00002530 <.L19>:
    U1_tx_buffer.count++;
    2530:	a0 41 80    	mov.w     0x834, w0
    2532:	00 00 e8    	inc.w     w0, w0
    2534:	a0 41 88    	mov.w     w0, 0x834
    enable_interrupts();
    2536:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    2538:	a1 41 80    	mov.w     0x834, w1
    253a:	50 41 80    	mov.w     0x82a, w0
    253c:	80 8f 50    	sub.w     w1, w0, [w15]
    253e:	01 00 39    	bra       NC, 0x2542 <.L17>
        U1STAbits.UTXEN = 1;
    2540:	23 42 a8    	bset.b    0x223, #0x2

00002542 <.L17>:
}
    2542:	00 80 fa    	ulnk      
    2544:	00 00 06    	return    

00002546 <_U1_getc>:

uint8_t U1_getc(void) {
    2546:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    2548:	00 00 00    	nop       

0000254a <.L22>:
    254a:	f0 41 80    	mov.w     0x83e, w0
    254c:	00 00 e0    	cp0.w     w0
    254e:	fd ff 32    	bra       Z, 0x254a <.L22>

    disable_interrupts();
    2550:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    2552:	b1 41 80    	mov.w     0x836, w1
    2554:	d0 41 80    	mov.w     0x83a, w0
    2556:	00 80 40    	add.w     w1, w0, w0
    2558:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    255a:	d0 41 80    	mov.w     0x83a, w0
    255c:	00 00 e8    	inc.w     w0, w0
    255e:	d0 41 88    	mov.w     w0, 0x83a
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    2560:	d1 41 80    	mov.w     0x83a, w1
    2562:	c0 41 80    	mov.w     0x838, w0
    2564:	80 8f 50    	sub.w     w1, w0, [w15]
    2566:	02 00 3a    	bra       NZ, 0x256c <.L23>
        U1_rx_buffer.head = 0;
    2568:	00 00 eb    	clr.w     w0
    256a:	d0 41 88    	mov.w     w0, 0x83a

0000256c <.L23>:
    U1_rx_buffer.count--;
    256c:	f0 41 80    	mov.w     0x83e, w0
    256e:	00 00 e9    	dec.w     w0, w0
    2570:	f0 41 88    	mov.w     w0, 0x83e
    enable_interrupts();
    2572:	52 20 ef    	clr.w     0x52

    return ch;
    2574:	1e 40 78    	mov.b     [w14], w0
}
    2576:	00 80 fa    	ulnk      
    2578:	00 00 06    	return    

0000257a <_U1_puts>:

void U1_puts(uint8_t *str) {
    257a:	02 00 fa    	lnk       #0x2
    257c:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    257e:	04 00 37    	bra       0x2588 <.L25>

00002580 <.L26>:
        U1_putc(*str++);
    2580:	1e 00 78    	mov.w     [w14], w0
    2582:	10 40 78    	mov.b     [w0], w0
    2584:	1e 0f e8    	inc.w     [w14], [w14]
    2586:	bf ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>

00002588 <.L25>:
    2588:	1e 00 78    	mov.w     [w14], w0
    258a:	10 40 78    	mov.b     [w0], w0
    258c:	00 04 e0    	cp0.b     w0
    258e:	f8 ff 3a    	bra       NZ, 0x2580 <.L26>
    U1_flush_tx_buffer();
    2590:	b1 ff 07    	rcall     0x24f4 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    2592:	00 80 fa    	ulnk      
    2594:	00 00 06    	return    

00002596 <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    2596:	04 00 fa    	lnk       #0x4
    2598:	00 0f 78    	mov.w     w0, [w14]
    259a:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    259c:	1e 00 90    	mov.w     [w14+2], w0
    259e:	00 00 e0    	cp0.w     w0
    25a0:	1a 00 32    	bra       Z, 0x25d6 <.L32>
        return;

    if (len == 1) {
    25a2:	1e 00 90    	mov.w     [w14+2], w0
    25a4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25a6:	04 00 3a    	bra       NZ, 0x25b0 <.L30>
        *str = '\0';
    25a8:	1e 00 78    	mov.w     [w14], w0
    25aa:	80 40 eb    	clr.b     w1
    25ac:	01 48 78    	mov.b     w1, [w0]
        return;
    25ae:	14 00 37    	bra       0x25d8 <.L27>

000025b0 <.L30>:
    }

    while (1) {
        *str = U1_getc();
    25b0:	ca ff 07    	rcall     0x2546 <_U1_getc> <.LFB6> <.LFE5>
    25b2:	9e 00 78    	mov.w     [w14], w1
    25b4:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    25b6:	1e 00 78    	mov.w     [w14], w0
    25b8:	10 40 78    	mov.b     [w0], w0
    25ba:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    25bc:	08 00 32    	bra       Z, 0x25ce <.L31>
    25be:	1e 00 90    	mov.w     [w14+2], w0
    25c0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25c2:	05 00 32    	bra       Z, 0x25ce <.L31>
            break;
        str++;
    25c4:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    25c6:	1e 00 90    	mov.w     [w14+2], w0
    25c8:	00 00 e9    	dec.w     w0, w0
    25ca:	10 07 98    	mov.w     w0, [w14+2]
    }
    25cc:	f1 ff 37    	bra       0x25b0 <.L30>

000025ce <.L31>:
    *str = '\0';
    25ce:	1e 00 78    	mov.w     [w14], w0
    25d0:	80 40 eb    	clr.b     w1
    25d2:	01 48 78    	mov.b     w1, [w0]
    25d4:	01 00 37    	bra       0x25d8 <.L27>

000025d6 <.L32>:
    25d6:	00 00 00    	nop       

000025d8 <.L27>:
}
    25d8:	00 80 fa    	ulnk      
    25da:	00 00 06    	return    

000025dc <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    25dc:	08 00 fa    	lnk       #0x8
    25de:	20 07 98    	mov.w     w0, [w14+4]
    25e0:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    25e2:	3e 00 90    	mov.w     [w14+6], w0
    25e4:	00 00 e0    	cp0.w     w0
    25e6:	6f 00 32    	bra       Z, 0x26c6 <.L46>
        return;

    if (len == 1) {
    25e8:	3e 00 90    	mov.w     [w14+6], w0
    25ea:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25ec:	04 00 3a    	bra       NZ, 0x25f6 <.L36>
        *str = '\0';
    25ee:	2e 00 90    	mov.w     [w14+4], w0
    25f0:	80 40 eb    	clr.b     w1
    25f2:	01 48 78    	mov.b     w1, [w0]
        return;
    25f4:	69 00 37    	bra       0x26c8 <.L33>

000025f6 <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    25f6:	b0 c1 b3    	mov.b     #0x1b, w0
    25f8:	86 ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    25fa:	70 c3 b3    	mov.b     #0x37, w0
    25fc:	84 ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    25fe:	7a ff 07    	rcall     0x24f4 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    2600:	ae 00 90    	mov.w     [w14+4], w1
    2602:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    2604:	be 00 90    	mov.w     [w14+6], w1
    2606:	01 0f 78    	mov.w     w1, [w14]
    2608:	03 00 37    	bra       0x2610 <.L45>

0000260a <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    260a:	00 00 00    	nop       
    260c:	01 00 37    	bra       0x2610 <.L45>

0000260e <.L48>:
    260e:	00 00 00    	nop       

00002610 <.L45>:
    2610:	9a ff 07    	rcall     0x2546 <_U1_getc> <.LFB6> <.LFE5>
    2612:	ae 00 90    	mov.w     [w14+4], w1
    2614:	80 48 78    	mov.b     w0, [w1]
    2616:	2e 00 90    	mov.w     [w14+4], w0
    2618:	10 40 78    	mov.b     [w0], w0
    261a:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    261c:	09 00 3a    	bra       NZ, 0x2630 <.L37>
    *str = '\0';                            // terminarte the string with null
    261e:	2e 00 90    	mov.w     [w14+4], w0
    2620:	80 40 eb    	clr.b     w1
    2622:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    2624:	a0 c0 b3    	mov.b     #0xa, w0
    2626:	6f ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    2628:	d0 c0 b3    	mov.b     #0xd, w0
    262a:	6d ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    262c:	63 ff 07    	rcall     0x24f4 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    262e:	4c 00 37    	bra       0x26c8 <.L33>

00002630 <.L37>:
    2630:	2e 00 90    	mov.w     [w14+4], w0
    2632:	10 40 78    	mov.b     [w0], w0
    2634:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2636:	10 00 3a    	bra       NZ, 0x2658 <.L38>
    2638:	b0 c1 b3    	mov.b     #0x1b, w0
    263a:	65 ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    263c:	80 c3 b3    	mov.b     #0x38, w0
    263e:	63 ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    2640:	b0 c1 b3    	mov.b     #0x1b, w0
    2642:	61 ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    2644:	b0 c5 b3    	mov.b     #0x5b, w0
    2646:	5f ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    2648:	b0 c4 b3    	mov.b     #0x4b, w0
    264a:	5d ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    264c:	53 ff 07    	rcall     0x24f4 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    264e:	9e 00 90    	mov.w     [w14+2], w1
    2650:	21 07 98    	mov.w     w1, [w14+4]
    2652:	be 00 90    	mov.w     [w14+6], w1
    2654:	01 0f 78    	mov.w     w1, [w14]
    2656:	36 00 37    	bra       0x26c4 <.L39>

00002658 <.L38>:
    2658:	2e 00 90    	mov.w     [w14+4], w0
    265a:	10 40 78    	mov.b     [w0], w0
    265c:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    265e:	05 00 32    	bra       Z, 0x266a <.L40>
    2660:	2e 00 90    	mov.w     [w14+4], w0
    2662:	90 40 78    	mov.b     [w0], w1
    2664:	f0 c7 b3    	mov.b     #0x7f, w0
    2666:	80 cf 50    	sub.b     w1, w0, [w15]
    2668:	14 00 3a    	bra       NZ, 0x2692 <.L41>

0000266a <.L40>:
    266a:	ae 00 90    	mov.w     [w14+4], w1
    266c:	1e 00 90    	mov.w     [w14+2], w0
    266e:	80 8f 50    	sub.w     w1, w0, [w15]
    2670:	0c 00 36    	bra       LEU, 0x268a <.L42>
    2672:	80 c0 b3    	mov.b     #0x8, w0
    2674:	48 ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    2676:	00 c2 b3    	mov.b     #0x20, w0
    2678:	46 ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    267a:	80 c0 b3    	mov.b     #0x8, w0
    267c:	44 ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    267e:	3a ff 07    	rcall     0x24f4 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2680:	2e 00 90    	mov.w     [w14+4], w0
    2682:	00 00 e9    	dec.w     w0, w0
    2684:	20 07 98    	mov.w     w0, [w14+4]
    2686:	1e 0f e8    	inc.w     [w14], [w14]
    2688:	03 00 37    	bra       0x2690 <.L43>

0000268a <.L42>:
    268a:	70 c0 b3    	mov.b     #0x7, w0
    268c:	3c ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    268e:	32 ff 07    	rcall     0x24f4 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

00002690 <.L43>:
    2690:	19 00 37    	bra       0x26c4 <.L39>

00002692 <.L41>:
    2692:	1e 00 78    	mov.w     [w14], w0
    2694:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2696:	04 00 3a    	bra       NZ, 0x26a0 <.L44>
    2698:	70 c0 b3    	mov.b     #0x7, w0
    269a:	35 ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    269c:	2b ff 07    	rcall     0x24f4 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    269e:	12 00 37    	bra       0x26c4 <.L39>

000026a0 <.L44>:
    26a0:	2e 00 90    	mov.w     [w14+4], w0
    26a2:	10 40 78    	mov.b     [w0], w0
    26a4:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    26a6:	b1 ff 36    	bra       LEU, 0x260a <.L47>
    26a8:	2e 00 90    	mov.w     [w14+4], w0
    26aa:	90 40 78    	mov.b     [w0], w1
    26ac:	e0 c7 b3    	mov.b     #0x7e, w0
    26ae:	80 cf 50    	sub.b     w1, w0, [w15]
    26b0:	ae ff 3e    	bra       GTU, 0x260e <.L48>
    26b2:	2e 00 90    	mov.w     [w14+4], w0
    26b4:	10 40 78    	mov.b     [w0], w0
    26b6:	27 ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    26b8:	1d ff 07    	rcall     0x24f4 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    26ba:	2e 00 90    	mov.w     [w14+4], w0
    26bc:	00 00 e8    	inc.w     w0, w0
    26be:	20 07 98    	mov.w     w0, [w14+4]
    26c0:	1e 0f e9    	dec.w     [w14], [w14]
    26c2:	a6 ff 37    	bra       0x2610 <.L45>

000026c4 <.L39>:
    26c4:	a5 ff 37    	bra       0x2610 <.L45>

000026c6 <.L46>:
    26c6:	00 00 00    	nop       

000026c8 <.L33>:
}
    26c8:	00 80 fa    	ulnk      
    26ca:	00 00 06    	return    

000026cc <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    26cc:	08 00 fa    	lnk       #0x8
    26ce:	10 07 98    	mov.w     w0, [w14+2]
    26d0:	21 07 98    	mov.w     w1, [w14+4]
    26d2:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    26d4:	1e 00 90    	mov.w     [w14+2], w0
    26d6:	60 00 40    	add.w     w0, #0x0, w0
    26d8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    26da:	10 00 3e    	bra       GTU, 0x26fc <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    26dc:	00 00 eb    	clr.w     w0
    26de:	00 0f 78    	mov.w     w0, [w14]
    26e0:	07 00 37    	bra       0x26f0 <.L52>

000026e2 <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    26e2:	2e 00 90    	mov.w     [w14+4], w0
    26e4:	10 40 78    	mov.b     [w0], w0
    26e6:	ae 00 90    	mov.w     [w14+4], w1
    26e8:	81 00 e8    	inc.w     w1, w1
    26ea:	21 07 98    	mov.w     w1, [w14+4]
    26ec:	0c ff 07    	rcall     0x2506 <_U1_putc> <.LFB5> <.LFE4>
    26ee:	1e 0f e8    	inc.w     [w14], [w14]

000026f0 <.L52>:
    26f0:	9e 00 78    	mov.w     [w14], w1
    26f2:	3e 00 90    	mov.w     [w14+6], w0
    26f4:	80 8f 50    	sub.w     w1, w0, [w15]
    26f6:	f5 ff 39    	bra       NC, 0x26e2 <.L53>
            U1_flush_tx_buffer();
    26f8:	fd fe 07    	rcall     0x24f4 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    26fa:	01 00 37    	bra       0x26fe <.L54>

000026fc <.L55>:
        default:
            break;
    26fc:	00 00 00    	nop       

000026fe <.L54>:
    }
    return len;
    26fe:	3e 00 90    	mov.w     [w14+6], w0
}
    2700:	00 80 fa    	ulnk      
    2702:	00 00 06    	return    
Disassembly of section .isr.text:

00002704 <__CNInterrupt>:
    2704:	32 00 f8    	push      0x32
    2706:	34 00 f8    	push      0x34
    2708:	88 1f 78    	mov.w     w8, [w15++]
    270a:	18 00 20    	mov.w     #0x1, w8
    270c:	a8 01 88    	mov.w     w8, 0x34
    270e:	08 20 20    	mov.w     #0x200, w8
    2710:	98 01 88    	mov.w     w8, 0x32
    2712:	4f 04 78    	mov.w     [--w15], w8
    2714:	00 00 fa    	lnk       #0x0
    2716:	86 60 a9    	bclr.b    0x86, #0x3
    2718:	06 21 ef    	clr.w     0x106
    271a:	84 e0 a9    	bclr.b    0x84, #0x7
    271c:	11 e1 a8    	bset.b    0x111, #0x7
    271e:	dc e2 a8    	bset.b    0x2dc, #0x7
    2720:	00 80 fa    	ulnk      
    2722:	34 00 f9    	pop       0x34
    2724:	32 00 f9    	pop       0x32
    2726:	00 40 06    	retfie    

00002728 <__T2Interrupt>:
    2728:	36 00 f8    	push      0x36
    272a:	80 9f be    	mov.d     w0, [w15++]
    272c:	82 9f be    	mov.d     w2, [w15++]
    272e:	84 9f be    	mov.d     w4, [w15++]
    2730:	86 9f be    	mov.d     w6, [w15++]
    2732:	32 00 f8    	push      0x32
    2734:	34 00 f8    	push      0x34
    2736:	10 00 20    	mov.w     #0x1, w0
    2738:	a0 01 88    	mov.w     w0, 0x34
    273a:	00 20 20    	mov.w     #0x200, w0
    273c:	90 01 88    	mov.w     w0, 0x32
    273e:	00 00 fa    	lnk       #0x0
    2740:	84 e0 a9    	bclr.b    0x84, #0x7
    2742:	11 e1 a9    	bclr.b    0x111, #0x7
    2744:	dc e2 a9    	bclr.b    0x2dc, #0x7
    2746:	d1 16 80    	mov.w     0x2da, w1
    2748:	00 02 20    	mov.w     #0x20, w0
    274a:	00 80 60    	and.w     w1, w0, w0
    274c:	00 00 e0    	cp0.w     w0
    274e:	0b 00 3a    	bra       NZ, 0x2766 <.L47>
    2750:	10 c8 bf    	mov.b     0x810, WREG
    2752:	00 80 fb    	ze        w0, w0
    2754:	80 00 e8    	inc.w     w0, w1
    2756:	60 00 20    	mov.w     #0x6, w0
    2758:	00 01 78    	mov.w     w0, w2
    275a:	11 00 09    	repeat    #0x11
    275c:	82 00 d8    	div.sw    w1, w2
    275e:	80 00 fd    	exch      w0, w1
    2760:	00 40 78    	mov.b     w0, w0
    2762:	10 e8 b7    	mov.b     WREG, 0x810
    2764:	0c 00 37    	bra       0x277e <.L48>

00002766 <.L47>:
    2766:	d0 16 80    	mov.w     0x2da, w0
    2768:	70 00 60    	and.w     w0, #0x10, w0
    276a:	00 00 e0    	cp0.w     w0
    276c:	08 00 3a    	bra       NZ, 0x277e <.L48>
    276e:	10 c8 bf    	mov.b     0x810, WREG
    2770:	00 40 e9    	dec.b     w0, w0
    2772:	10 e8 b7    	mov.b     WREG, 0x810
    2774:	10 c8 bf    	mov.b     0x810, WREG
    2776:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    2778:	02 00 36    	bra       LEU, 0x277e <.L48>
    277a:	50 c0 b3    	mov.b     #0x5, w0
    277c:	10 e8 b7    	mov.b     WREG, 0x810

0000277e <.L48>:
    277e:	d0 16 80    	mov.w     0x2da, w0
    2780:	64 00 60    	and.w     w0, #0x4, w0
    2782:	00 00 e0    	cp0.w     w0
    2784:	0b 00 3a    	bra       NZ, 0x279c <.L49>
    2786:	11 c8 bf    	mov.b     0x811, WREG
    2788:	00 80 fb    	ze        w0, w0
    278a:	80 00 e8    	inc.w     w0, w1
    278c:	60 00 20    	mov.w     #0x6, w0
    278e:	00 01 78    	mov.w     w0, w2
    2790:	11 00 09    	repeat    #0x11
    2792:	82 00 d8    	div.sw    w1, w2
    2794:	80 00 fd    	exch      w0, w1
    2796:	00 40 78    	mov.b     w0, w0
    2798:	11 e8 b7    	mov.b     WREG, 0x811
    279a:	07 00 37    	bra       0x27aa <.L50>

0000279c <.L49>:
    279c:	d0 16 80    	mov.w     0x2da, w0
    279e:	68 00 60    	and.w     w0, #0x8, w0
    27a0:	00 00 e0    	cp0.w     w0
    27a2:	03 00 3a    	bra       NZ, 0x27aa <.L50>
    27a4:	11 c8 bf    	mov.b     0x811, WREG
    27a6:	00 40 e9    	dec.b     w0, w0
    27a8:	11 e8 b7    	mov.b     WREG, 0x811

000027aa <.L50>:
    27aa:	11 c8 bf    	mov.b     0x811, WREG
    27ac:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    27ae:	03 00 36    	bra       LEU, 0x27b6 <.L51>
    27b0:	11 c8 bf    	mov.b     0x811, WREG
    27b2:	66 40 40    	add.b     w0, #0x6, w0
    27b4:	11 e8 b7    	mov.b     WREG, 0x811

000027b6 <.L51>:
    27b6:	51 16 80    	mov.w     0x2ca, w1
    27b8:	00 00 28    	mov.w     #0x8000, w0
    27ba:	00 80 60    	and.w     w1, w0, w0
    27bc:	00 00 e0    	cp0.w     w0
    27be:	0b 00 3a    	bra       NZ, 0x27d6 <.L52>
    27c0:	12 c8 bf    	mov.b     0x812, WREG
    27c2:	00 80 fb    	ze        w0, w0
    27c4:	80 00 e8    	inc.w     w0, w1
    27c6:	60 00 20    	mov.w     #0x6, w0
    27c8:	00 01 78    	mov.w     w0, w2
    27ca:	11 00 09    	repeat    #0x11
    27cc:	82 00 d8    	div.sw    w1, w2
    27ce:	80 00 fd    	exch      w0, w1
    27d0:	00 40 78    	mov.b     w0, w0
    27d2:	12 e8 b7    	mov.b     WREG, 0x812
    27d4:	07 00 37    	bra       0x27e4 <.L53>

000027d6 <.L52>:
    27d6:	50 17 80    	mov.w     0x2ea, w0
    27d8:	68 00 60    	and.w     w0, #0x8, w0
    27da:	00 00 e0    	cp0.w     w0
    27dc:	03 00 3a    	bra       NZ, 0x27e4 <.L53>
    27de:	12 c8 bf    	mov.b     0x812, WREG
    27e0:	00 40 e9    	dec.b     w0, w0
    27e2:	12 e8 b7    	mov.b     WREG, 0x812

000027e4 <.L53>:
    27e4:	12 c8 bf    	mov.b     0x812, WREG
    27e6:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    27e8:	03 00 36    	bra       LEU, 0x27f0 <.L54>
    27ea:	12 c8 bf    	mov.b     0x812, WREG
    27ec:	66 40 40    	add.b     w0, #0x6, w0
    27ee:	12 e8 b7    	mov.b     WREG, 0x812

000027f0 <.L54>:
    27f0:	d1 16 80    	mov.w     0x2da, w1
    27f2:	00 10 20    	mov.w     #0x100, w0
    27f4:	00 80 60    	and.w     w1, w0, w0
    27f6:	00 00 e0    	cp0.w     w0
    27f8:	0b 00 3a    	bra       NZ, 0x2810 <.L55>
    27fa:	13 c8 bf    	mov.b     0x813, WREG
    27fc:	00 80 fb    	ze        w0, w0
    27fe:	80 00 e8    	inc.w     w0, w1
    2800:	60 00 20    	mov.w     #0x6, w0
    2802:	00 01 78    	mov.w     w0, w2
    2804:	11 00 09    	repeat    #0x11
    2806:	82 00 d8    	div.sw    w1, w2
    2808:	80 00 fd    	exch      w0, w1
    280a:	00 40 78    	mov.b     w0, w0
    280c:	13 e8 b7    	mov.b     WREG, 0x813
    280e:	08 00 37    	bra       0x2820 <.L56>

00002810 <.L55>:
    2810:	d1 16 80    	mov.w     0x2da, w1
    2812:	00 80 20    	mov.w     #0x800, w0
    2814:	00 80 60    	and.w     w1, w0, w0
    2816:	00 00 e0    	cp0.w     w0
    2818:	03 00 3a    	bra       NZ, 0x2820 <.L56>
    281a:	13 c8 bf    	mov.b     0x813, WREG
    281c:	00 40 e9    	dec.b     w0, w0
    281e:	13 e8 b7    	mov.b     WREG, 0x813

00002820 <.L56>:
    2820:	13 c8 bf    	mov.b     0x813, WREG
    2822:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    2824:	03 00 36    	bra       LEU, 0x282c <.L57>
    2826:	13 c8 bf    	mov.b     0x813, WREG
    2828:	66 40 40    	add.b     w0, #0x6, w0
    282a:	13 e8 b7    	mov.b     WREG, 0x813

0000282c <.L57>:
    282c:	d1 16 80    	mov.w     0x2da, w1
    282e:	00 20 20    	mov.w     #0x200, w0
    2830:	00 80 60    	and.w     w1, w0, w0
    2832:	00 00 e0    	cp0.w     w0
    2834:	0b 00 3a    	bra       NZ, 0x284c <.L58>
    2836:	14 c8 bf    	mov.b     0x814, WREG
    2838:	00 80 fb    	ze        w0, w0
    283a:	80 00 e8    	inc.w     w0, w1
    283c:	60 00 20    	mov.w     #0x6, w0
    283e:	00 01 78    	mov.w     w0, w2
    2840:	11 00 09    	repeat    #0x11
    2842:	82 00 d8    	div.sw    w1, w2
    2844:	80 00 fd    	exch      w0, w1
    2846:	00 40 78    	mov.b     w0, w0
    2848:	14 e8 b7    	mov.b     WREG, 0x814
    284a:	08 00 37    	bra       0x285c <.L59>

0000284c <.L58>:
    284c:	d1 16 80    	mov.w     0x2da, w1
    284e:	00 40 20    	mov.w     #0x400, w0
    2850:	00 80 60    	and.w     w1, w0, w0
    2852:	00 00 e0    	cp0.w     w0
    2854:	03 00 3a    	bra       NZ, 0x285c <.L59>
    2856:	14 c8 bf    	mov.b     0x814, WREG
    2858:	00 40 e9    	dec.b     w0, w0
    285a:	14 e8 b7    	mov.b     WREG, 0x814

0000285c <.L59>:
    285c:	14 c8 bf    	mov.b     0x814, WREG
    285e:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    2860:	03 00 36    	bra       LEU, 0x2868 <.L60>
    2862:	14 c8 bf    	mov.b     0x814, WREG
    2864:	66 40 40    	add.b     w0, #0x6, w0
    2866:	14 e8 b7    	mov.b     WREG, 0x814

00002868 <.L60>:
    2868:	d8 f8 07    	rcall     0x1a1a <_updateDisplay> <.LFB8> <.LFE5>
    286a:	00 80 fa    	ulnk      
    286c:	34 00 f9    	pop       0x34
    286e:	32 00 f9    	pop       0x32
    2870:	4f 03 be    	mov.d     [--w15], w6
    2872:	4f 02 be    	mov.d     [--w15], w4
    2874:	4f 01 be    	mov.d     [--w15], w2
    2876:	4f 00 be    	mov.d     [--w15], w0
    2878:	36 00 f9    	pop       0x36
    287a:	00 40 06    	retfie    

0000287c <__SI2C2Interrupt>:
    287c:	80 9f be    	mov.d     w0, [w15++]
    287e:	32 00 f8    	push      0x32
    2880:	34 00 f8    	push      0x34
    2882:	10 00 20    	mov.w     #0x1, w0
    2884:	a0 01 88    	mov.w     w0, 0x34
    2886:	00 20 20    	mov.w     #0x200, w0
    2888:	90 01 88    	mov.w     w0, 0x32
    288a:	02 00 fa    	lnk       #0x2
    288c:	8a 20 a9    	bclr.b    0x8a, #0x1
    288e:	40 41 80    	mov.w     0x828, w0
    2890:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2892:	23 00 32    	bra       Z, 0x28da <.L4>
    2894:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2896:	03 00 39    	bra       NC, 0x289e <.L3>
    2898:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    289a:	50 00 32    	bra       Z, 0x293c <.L5>
    289c:	51 00 37    	bra       0x2940 <.L18>

0000289e <.L3>:
    289e:	80 10 80    	mov.w     0x210, w0
    28a0:	00 4f 78    	mov.b     w0, [w14]
    28a2:	c0 10 80    	mov.w     0x218, w0
    28a4:	64 00 60    	and.w     w0, #0x4, w0
    28a6:	00 00 e0    	cp0.w     w0
    28a8:	15 00 32    	bra       Z, 0x28d4 <.L6>
    28aa:	21 c8 bf    	mov.b     0x821, WREG
    28ac:	00 80 fb    	ze        w0, w0
    28ae:	47 00 dd    	sl.w      w0, #0x7, w0
    28b0:	80 40 78    	mov.b     w0, w1
    28b2:	22 c8 bf    	mov.b     0x822, WREG
    28b4:	00 80 fb    	ze        w0, w0
    28b6:	67 00 60    	and.w     w0, #0x7, w0
    28b8:	44 00 dd    	sl.w      w0, #0x4, w0
    28ba:	00 40 78    	mov.b     w0, w0
    28bc:	80 c0 70    	ior.b     w1, w0, w1
    28be:	23 c8 bf    	mov.b     0x823, WREG
    28c0:	6f 40 60    	and.b     w0, #0xf, w0
    28c2:	00 c0 70    	ior.b     w1, w0, w0
    28c4:	1e e8 b7    	mov.b     WREG, 0x81e
    28c6:	1e c8 bf    	mov.b     0x81e, WREG
    28c8:	00 80 fb    	ze        w0, w0
    28ca:	90 10 88    	mov.w     w0, 0x212
    28cc:	17 82 a8    	bset.b    0x217, #0x4
    28ce:	20 00 20    	mov.w     #0x2, w0
    28d0:	40 41 88    	mov.w     w0, 0x828
    28d2:	37 00 37    	bra       0x2942 <.L1>

000028d4 <.L6>:
    28d4:	10 00 20    	mov.w     #0x1, w0
    28d6:	40 41 88    	mov.w     w0, 0x828
    28d8:	34 00 37    	bra       0x2942 <.L1>

000028da <.L4>:
    28da:	80 10 80    	mov.w     0x210, w0
    28dc:	00 40 78    	mov.b     w0, w0
    28de:	1f e8 b7    	mov.b     WREG, 0x81f
    28e0:	1f c8 bf    	mov.b     0x81f, WREG
    28e2:	00 80 fb    	ze        w0, w0
    28e4:	45 00 de    	lsr.w     w0, #0x5, w0
    28e6:	00 40 78    	mov.b     w0, w0
    28e8:	00 80 fb    	ze        w0, w0
    28ea:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    28ec:	0f 00 32    	bra       Z, 0x290c <.L12>
    28ee:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    28f0:	05 00 3c    	bra       GT, 0x28fc <.L16>
    28f2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    28f4:	16 00 32    	bra       Z, 0x2922 <.L10>
    28f6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    28f8:	17 00 32    	bra       Z, 0x2928 <.L11>
    28fa:	19 00 37    	bra       0x292e <.L9>

000028fc <.L16>:
    28fc:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    28fe:	0a 00 32    	bra       Z, 0x2914 <.L14>
    2900:	11 10 20    	mov.w     #0x101, w1
    2902:	81 0f 50    	sub.w     w0, w1, [w15]
    2904:	18 00 32    	bra       Z, 0x2936 <.L19>
    2906:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    2908:	09 00 32    	bra       Z, 0x291c <.L13>
    290a:	11 00 37    	bra       0x292e <.L9>

0000290c <.L12>:
    290c:	1f c8 bf    	mov.b     0x81f, WREG
    290e:	7f 40 60    	and.b     w0, #0x1f, w0
    2910:	20 e8 b7    	mov.b     WREG, 0x820
    2912:	12 00 37    	bra       0x2938 <.L17>

00002914 <.L14>:
    2914:	1f c8 bf    	mov.b     0x81f, WREG
    2916:	7f 40 60    	and.b     w0, #0x1f, w0
    2918:	22 e8 b7    	mov.b     WREG, 0x822
    291a:	0e 00 37    	bra       0x2938 <.L17>

0000291c <.L13>:
    291c:	10 c0 b3    	mov.b     #0x1, w0
    291e:	24 e8 b7    	mov.b     WREG, 0x824
    2920:	0b 00 37    	bra       0x2938 <.L17>

00002922 <.L10>:
    2922:	10 c0 b3    	mov.b     #0x1, w0
    2924:	25 e8 b7    	mov.b     WREG, 0x825
    2926:	08 00 37    	bra       0x2938 <.L17>

00002928 <.L11>:
    2928:	10 c0 b3    	mov.b     #0x1, w0
    292a:	26 e8 b7    	mov.b     WREG, 0x826
    292c:	05 00 37    	bra       0x2938 <.L17>

0000292e <.L9>:
    292e:	23 c8 bf    	mov.b     0x823, WREG
    2930:	00 40 e8    	inc.b     w0, w0
    2932:	23 e8 b7    	mov.b     WREG, 0x823
    2934:	01 00 37    	bra       0x2938 <.L17>

00002936 <.L19>:
    2936:	00 00 00    	nop       

00002938 <.L17>:
    2938:	28 28 ef    	clr.w     0x828
    293a:	03 00 37    	bra       0x2942 <.L1>

0000293c <.L5>:
    293c:	28 28 ef    	clr.w     0x828
    293e:	01 00 37    	bra       0x2942 <.L1>

00002940 <.L18>:
    2940:	28 28 ef    	clr.w     0x828

00002942 <.L1>:
    2942:	00 80 fa    	ulnk      
    2944:	34 00 f9    	pop       0x34
    2946:	32 00 f9    	pop       0x32
    2948:	4f 00 be    	mov.d     [--w15], w0
    294a:	00 40 06    	retfie    

0000294c <__U1TXInterrupt>:
    294c:	80 9f be    	mov.d     w0, [w15++]
    294e:	32 00 f8    	push      0x32
    2950:	34 00 f8    	push      0x34
    2952:	10 00 20    	mov.w     #0x1, w0
    2954:	a0 01 88    	mov.w     w0, 0x34
    2956:	00 20 20    	mov.w     #0x200, w0
    2958:	90 01 88    	mov.w     w0, 0x32
    295a:	02 00 fa    	lnk       #0x2
    295c:	85 80 a9    	bclr.b    0x85, #0x4
    295e:	a0 41 80    	mov.w     0x834, w0
    2960:	00 00 e0    	cp0.w     w0
    2962:	17 00 3a    	bra       NZ, 0x2992 <.L8>
    2964:	23 42 a9    	bclr.b    0x223, #0x2
    2966:	16 00 37    	bra       0x2994 <.L4>

00002968 <.L7>:
    2968:	ff 3f fc    	disi      #0x3fff
    296a:	61 41 80    	mov.w     0x82c, w1
    296c:	80 41 80    	mov.w     0x830, w0
    296e:	00 80 40    	add.w     w1, w0, w0
    2970:	10 4f 78    	mov.b     [w0], [w14]
    2972:	80 41 80    	mov.w     0x830, w0
    2974:	00 00 e8    	inc.w     w0, w0
    2976:	80 41 88    	mov.w     w0, 0x830
    2978:	81 41 80    	mov.w     0x830, w1
    297a:	70 41 80    	mov.w     0x82e, w0
    297c:	80 8f 50    	sub.w     w1, w0, [w15]
    297e:	02 00 3a    	bra       NZ, 0x2984 <.L5>
    2980:	00 00 eb    	clr.w     w0
    2982:	80 41 88    	mov.w     w0, 0x830

00002984 <.L5>:
    2984:	a0 41 80    	mov.w     0x834, w0
    2986:	00 00 e9    	dec.w     w0, w0
    2988:	a0 41 88    	mov.w     w0, 0x834
    298a:	52 20 ef    	clr.w     0x52
    298c:	1e 80 fb    	ze        [w14], w0
    298e:	20 11 88    	mov.w     w0, 0x224
    2990:	01 00 37    	bra       0x2994 <.L4>

00002992 <.L8>:
    2992:	00 00 00    	nop       

00002994 <.L4>:
    2994:	11 11 80    	mov.w     0x222, w1
    2996:	00 20 20    	mov.w     #0x200, w0
    2998:	00 80 60    	and.w     w1, w0, w0
    299a:	00 00 e0    	cp0.w     w0
    299c:	03 00 3a    	bra       NZ, 0x29a4 <.L2>
    299e:	a0 41 80    	mov.w     0x834, w0
    29a0:	00 00 e0    	cp0.w     w0
    29a2:	e2 ff 3a    	bra       NZ, 0x2968 <.L7>

000029a4 <.L2>:
    29a4:	00 80 fa    	ulnk      
    29a6:	34 00 f9    	pop       0x34
    29a8:	32 00 f9    	pop       0x32
    29aa:	4f 00 be    	mov.d     [--w15], w0
    29ac:	00 40 06    	retfie    

000029ae <__U1RXInterrupt>:
    29ae:	80 9f be    	mov.d     w0, [w15++]
    29b0:	32 00 f8    	push      0x32
    29b2:	34 00 f8    	push      0x34
    29b4:	10 00 20    	mov.w     #0x1, w0
    29b6:	a0 01 88    	mov.w     w0, 0x34
    29b8:	00 20 20    	mov.w     #0x200, w0
    29ba:	90 01 88    	mov.w     w0, 0x32
    29bc:	00 00 fa    	lnk       #0x0
    29be:	85 60 a9    	bclr.b    0x85, #0x3
    29c0:	14 00 37    	bra       0x29ea <.L10>

000029c2 <.L13>:
    29c2:	ff 3f fc    	disi      #0x3fff
    29c4:	b1 41 80    	mov.w     0x836, w1
    29c6:	e0 41 80    	mov.w     0x83c, w0
    29c8:	00 80 40    	add.w     w1, w0, w0
    29ca:	31 11 80    	mov.w     0x226, w1
    29cc:	81 40 78    	mov.b     w1, w1
    29ce:	01 48 78    	mov.b     w1, [w0]
    29d0:	e0 41 80    	mov.w     0x83c, w0
    29d2:	00 00 e8    	inc.w     w0, w0
    29d4:	e0 41 88    	mov.w     w0, 0x83c
    29d6:	e1 41 80    	mov.w     0x83c, w1
    29d8:	c0 41 80    	mov.w     0x838, w0
    29da:	80 8f 50    	sub.w     w1, w0, [w15]
    29dc:	02 00 3a    	bra       NZ, 0x29e2 <.L11>
    29de:	00 00 eb    	clr.w     w0
    29e0:	e0 41 88    	mov.w     w0, 0x83c

000029e2 <.L11>:
    29e2:	f0 41 80    	mov.w     0x83e, w0
    29e4:	00 00 e8    	inc.w     w0, w0
    29e6:	f0 41 88    	mov.w     w0, 0x83e
    29e8:	52 20 ef    	clr.w     0x52

000029ea <.L10>:
    29ea:	10 11 80    	mov.w     0x222, w0
    29ec:	61 00 60    	and.w     w0, #0x1, w0
    29ee:	00 00 e0    	cp0.w     w0
    29f0:	04 00 32    	bra       Z, 0x29fa <.L9>
    29f2:	f1 41 80    	mov.w     0x83e, w1
    29f4:	c0 41 80    	mov.w     0x838, w0
    29f6:	80 8f 50    	sub.w     w1, w0, [w15]
    29f8:	e4 ff 3a    	bra       NZ, 0x29c2 <.L13>

000029fa <.L9>:
    29fa:	00 80 fa    	ulnk      
    29fc:	34 00 f9    	pop       0x34
    29fe:	32 00 f9    	pop       0x32
    2a00:	4f 00 be    	mov.d     [--w15], w0
    2a02:	00 40 06    	retfie    
Disassembly of section .text:

00002a04 <_init_elecanisms>:
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}
    2a04:	00 00 fa    	lnk       #0x0
    2a06:	00 10 20    	mov.w     #0x100, w0
    2a08:	20 3a 88    	mov.w     w0, 0x744
    2a0a:	d8 a2 a8    	bset.b    0x2d8, #0x5
    2a0c:	d8 82 a8    	bset.b    0x2d8, #0x4
    2a0e:	e8 82 a8    	bset.b    0x2e8, #0x4
    2a10:	e8 a2 a8    	bset.b    0x2e8, #0x5
    2a12:	c9 e2 a8    	bset.b    0x2c9, #0x7
    2a14:	e8 62 a8    	bset.b    0x2e8, #0x3
    2a16:	d9 02 a8    	bset.b    0x2d9, #0x0
    2a18:	d9 62 a8    	bset.b    0x2d9, #0x3
    2a1a:	d9 22 a8    	bset.b    0x2d9, #0x1
    2a1c:	d9 42 a8    	bset.b    0x2d9, #0x2
    2a1e:	d8 02 a8    	bset.b    0x2d8, #0x0
    2a20:	d8 22 a8    	bset.b    0x2d8, #0x1
    2a22:	d8 42 a8    	bset.b    0x2d8, #0x2
    2a24:	d8 62 a8    	bset.b    0x2d8, #0x3
    2a26:	c8 a2 a8    	bset.b    0x2c8, #0x5
    2a28:	c8 82 a8    	bset.b    0x2c8, #0x4
    2a2a:	c8 62 a8    	bset.b    0x2c8, #0x3
    2a2c:	c8 42 a8    	bset.b    0x2c8, #0x2
    2a2e:	c8 22 a8    	bset.b    0x2c8, #0x1
    2a30:	c8 02 a8    	bset.b    0x2c8, #0x0
    2a32:	f0 03 20    	mov.w     #0x3f, w0
    2a34:	10 27 88    	mov.w     w0, 0x4e2
    2a36:	e4 24 ef    	clr.w     0x4e4
    2a38:	e6 24 ef    	clr.w     0x4e6
    2a3a:	ea 24 ef    	clr.w     0x4ea
    2a3c:	ec 24 ef    	clr.w     0x4ec
    2a3e:	00 0e 20    	mov.w     #0xe0, w0
    2a40:	00 19 88    	mov.w     w0, 0x320
    2a42:	22 23 ef    	clr.w     0x322
    2a44:	00 c4 20    	mov.w     #0xc40, w0
    2a46:	20 19 88    	mov.w     w0, 0x324
    2a48:	50 00 20    	mov.w     #0x5, w0
    2a4a:	40 19 88    	mov.w     w0, 0x328
    2a4c:	21 e3 a8    	bset.b    0x321, #0x7
    2a4e:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    2a50:	dc e2 a9    	bclr.b    0x2dc, #0x7
    2a52:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2a54:	ec 02 a9    	bclr.b    0x2ec, #0x0
    2a56:	e8 22 a9    	bclr.b    0x2e8, #0x1
    2a58:	ec 22 a9    	bclr.b    0x2ec, #0x1
    2a5a:	d1 e2 a8    	bset.b    0x2d1, #0x7
    2a5c:	d1 82 a8    	bset.b    0x2d1, #0x4
    2a5e:	c9 82 a8    	bset.b    0x2c9, #0x4
    2a60:	00 80 fa    	ulnk      
    2a62:	00 00 06    	return    

00002a64 <_read_analog>:
    2a64:	02 00 fa    	lnk       #0x2
    2a66:	00 0f 78    	mov.w     w0, [w14]
    2a68:	9e 00 78    	mov.w     [w14], w1
    2a6a:	41 19 88    	mov.w     w1, 0x328
    2a6c:	20 23 a8    	bset.b    0x320, #0x1
    2a6e:	00 00 00    	nop       

00002a70 <.L3>:
    2a70:	00 19 80    	mov.w     0x320, w0
    2a72:	61 00 60    	and.w     w0, #0x1, w0
    2a74:	00 00 e0    	cp0.w     w0
    2a76:	fc ff 32    	bra       Z, 0x2a70 <.L3>
    2a78:	00 18 80    	mov.w     0x300, w0
    2a7a:	00 80 fa    	ulnk      
    2a7c:	00 00 06    	return    

00002a7e <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    2a7e:	02 00 fa    	lnk       #0x2
    2a80:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    2a82:	1e 00 78    	mov.w     [w14], w0
    2a84:	48 00 de    	lsr.w     w0, #0x8, w0
    2a86:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    2a88:	1e 00 78    	mov.w     [w14], w0
    2a8a:	44 00 de    	lsr.w     w0, #0x4, w0
    2a8c:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    2a8e:	1e 00 78    	mov.w     [w14], w0
    2a90:	42 00 de    	lsr.w     w0, #0x2, w0
    2a92:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    2a94:	1e 00 78    	mov.w     [w14], w0
    2a96:	00 00 d1    	lsr.w     w0, w0
    2a98:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    2a9a:	1e 00 78    	mov.w     [w14], w0
    2a9c:	00 40 78    	mov.b     w0, w0
    2a9e:	61 40 60    	and.b     w0, #0x1, w0
}
    2aa0:	00 80 fa    	ulnk      
    2aa2:	00 00 06    	return    
Disassembly of section .dinit:

00002aa4 <.dinit>:
    2aa4:	50 10 00    	nop       
    2aa6:	06 00 00    	nop       
    2aa8:	80 00 00    	nop       
    2aaa:	00 08 00    	nop       
    2aac:	1e 00 00    	nop       
    2aae:	80 00 00    	nop       
    2ab0:	40 10 00    	nop       
    2ab2:	10 00 00    	nop       
    2ab4:	80 00 00    	nop       
    2ab6:	1e 08 00    	nop       
    2ab8:	0c 00 00    	nop       
    2aba:	80 00 00    	nop       
    2abc:	2c 08 00    	nop       
    2abe:	14 08 00    	nop       
    2ac0:	80 00 00    	nop       
    2ac2:	2a 08 00    	nop       
    2ac4:	02 00 00    	nop       
    2ac6:	80 00 00    	nop       
    2ac8:	00 00 00    	nop       
Disassembly of section .isr:

00002aca <__DefaultInterrupt>:
    2aca:	00 40 da    	break     
    2acc:	00 00 fe    	reset     
