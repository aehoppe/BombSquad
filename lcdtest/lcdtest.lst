
lcdtest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	4a 4e 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	4a 4e 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	4a 4e 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	4a 4e 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	4a 4e 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	4a 4e 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	4a 4e 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	4a 4e 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	4a 4e 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	4a 4e 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	4a 4e 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	4a 4e 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	4a 4e 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	4a 4e 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	4a 4e 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	4a 4e 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	4a 4e 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	4a 4e 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	4a 4e 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	4a 4e 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	4a 4e 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	4a 4e 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	4a 4e 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	4a 4e 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	4a 4e 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	4a 4e 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	4a 4e 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	4a 4e 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	4a 4e 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	4a 4e 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	4a 4e 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	4a 4e 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	4a 4e 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	4a 4e 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	4a 4e 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	4a 4e 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	4a 4e 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	4a 4e 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	4a 4e 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	4a 4e 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	4a 4e 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	4a 4e 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	4a 4e 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	4a 4e 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	4a 4e 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	4a 4e 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	4a 4e 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	4a 4e 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	4a 4e 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	4a 4e 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	4a 4e 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	4a 4e 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	4a 4e 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	4a 4e 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	4a 4e 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	4a 4e 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	4a 4e 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	4a 4e 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	4a 4e 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	af d8 20    	mov.w     #0xd8a, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	c4 00 07    	rcall     0x12ae <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	80 c3 24    	mov.w     #0x4c38, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	de 45 02    	call      0x45de <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	20 11 20    	mov.w     #0x112, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	d6 34 04    	goto      0x34d6 <___digitalRead>
    1216:	00 00 00 
    1218:	92 34 04    	goto      0x3492 <___digitalWrite>
    121a:	00 00 00 
    121c:	f8 34 04    	goto      0x34f8 <___analogRead>
    121e:	00 00 00 
    1220:	5a 1b 04    	goto      0x1b5a <___putc_nobuffer>
    1222:	00 00 00 
    1224:	9c 1b 04    	goto      0x1b9c <___putc_buffer>
    1226:	00 00 00 
    1228:	7e 1b 04    	goto      0x1b7e <___getc_nobuffer>
    122a:	00 00 00 
    122c:	8a 1c 04    	goto      0x1c8a <___getc_buffer>
    122e:	00 00 00 
    1230:	fa 2f 04    	goto      0x2ffa <___pwmWrite>
    1232:	00 00 00 
    1234:	cc 2f 04    	goto      0x2fcc <___pwmRead>
    1236:	00 00 00 
    1238:	64 30 04    	goto      0x3064 <___servoWrite>
    123a:	00 00 00 
    123c:	32 30 04    	goto      0x3032 <___servoRead>
    123e:	00 00 00 
    1240:	ca 18 04    	goto      0x18ca <_closeall>
    1242:	00 00 00 
    1244:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    1246:	00 00 00 

00001248 <_close>:
    1248:	0a 00 fa    	lnk       #0xa
    124a:	11 00 20    	mov.w     #0x1, w1
    124c:	b1 bf 9f    	mov.w     w1, [w15-10]
    124e:	c0 bf 9f    	mov.w     w0, [w15-8]
    1250:	6a 80 57    	sub.w     w15, #0xa, w0
    1252:	f0 03 07    	rcall     0x1a34 <_doclose>
    1254:	4f b8 97    	mov.w     [w15-8], w0
    1256:	00 80 fa    	ulnk      
    1258:	00 00 06    	return    

0000125a <_remove>:
    125a:	0a 00 fa    	lnk       #0xa
    125c:	51 00 20    	mov.w     #0x5, w1
    125e:	b1 bf 9f    	mov.w     w1, [w15-10]
    1260:	c0 bf 9f    	mov.w     w0, [w15-8]
    1262:	6a 80 57    	sub.w     w15, #0xa, w0
    1264:	e9 03 07    	rcall     0x1a38 <_doremove>
    1266:	5f b8 97    	mov.w     [w15-6], w0
    1268:	00 80 fa    	ulnk      
    126a:	00 00 06    	return    

0000126c <_sbrk>:
    126c:	88 9f be    	mov.d     w8, [w15++]
    126e:	80 04 78    	mov.w     w0, w9
    1270:	40 6c 80    	mov.w     0xd88, w0
    1272:	00 00 e0    	cp0.w     w0
    1274:	04 00 3a    	bra       NZ, 0x127e <.L2>
    1276:	0e 00 07    	rcall     0x1294 <_brk>
    1278:	00 84 eb    	setm.w    w8
    127a:	00 00 e0    	cp0.w     w0
    127c:	08 00 35    	bra       LT, 0x128e <.L3>

0000127e <.L2>:
    127e:	48 6c 80    	mov.w     0xd88, w8
    1280:	09 00 e0    	cp0.w     w9
    1282:	05 00 32    	bra       Z, 0x128e <.L3>
    1284:	09 00 44    	add.w     w8, w9, w0
    1286:	06 00 07    	rcall     0x1294 <_brk>
    1288:	00 00 e0    	cp0.w     w0
    128a:	01 00 3d    	bra       GE, 0x128e <.L3>
    128c:	00 84 eb    	setm.w    w8

0000128e <.L3>:
    128e:	08 00 78    	mov.w     w8, w0
    1290:	4f 04 be    	mov.d     [--w15], w8
    1292:	00 00 06    	return    

00001294 <_brk>:
    1294:	80 00 78    	mov.w     w0, w1
    1296:	01 00 e0    	cp0.w     w1
    1298:	03 00 3a    	bra       NZ, 0x12a0 <.L2>
    129a:	00 00 20    	mov.w     #0x0, w0
    129c:	40 6c 88    	mov.w     w0, 0xd88
    129e:	00 00 05    	retlw.w   #0x0, w0

000012a0 <.L2>:
    12a0:	00 80 eb    	setm.w    w0
    12a2:	02 00 20    	mov.w     #0x0, w2
    12a4:	82 8f 50    	sub.w     w1, w2, [w15]
    12a6:	02 00 3e    	bra       GTU, 0x12ac <.L3>
    12a8:	41 6c 88    	mov.w     w1, 0xd88
    12aa:	00 00 eb    	clr.w     w0

000012ac <.L3>:
    12ac:	00 00 06    	return    

000012ae <__crt_start_mode>:
    12ae:	00 00 05    	retlw.w   #0x0, w0

000012b0 <___subsf3>:
    12b0:	03 f0 a2    	btg.w     w3, #0xf

000012b2 <___addsf3>:
    12b2:	88 9f be    	mov.d     w8, [w15++]
    12b4:	8a 9f be    	mov.d     w10, [w15++]
    12b6:	8c 1f 78    	mov.w     w12, [w15++]
    12b8:	f7 00 07    	rcall     0x14a8 <__funpack2>
    12ba:	fe 00 33    	bra       N, 0x14b8 <__fPropagateNaN>
    12bc:	64 50 e1    	cp.w      w10, #0x4
    12be:	4f 00 32    	bra       Z, 0x135e <aisinfinite>

000012c0 <checkspecialb>:
    12c0:	64 20 e1    	cp.w      w4, #0x4
    12c2:	52 00 32    	bra       Z, 0x1368 <return2>
    12c4:	03 82 6c    	xor.w     w9, w3, w4
    12c6:	07 00 3b    	bra       NN, 0x12d6 <getsign>
    12c8:	09 05 d0    	sl.w      w9, w10
    12ca:	03 06 d0    	sl.w      w3, w12
    12cc:	82 0f 54    	sub.w     w8, w2, [w15]
    12ce:	0c 06 5d    	subb.w    w10, w12, w12
    12d0:	02 00 39    	bra       NC, 0x12d6 <getsign>
    12d2:	02 00 32    	bra       Z, 0x12d8 <gotsign>
    12d4:	89 01 78    	mov.w     w9, w3

000012d6 <getsign>:
    12d6:	03 06 78    	mov.w     w3, w12

000012d8 <gotsign>:
    12d8:	85 82 55    	sub.w     w11, w5, w5
    12da:	04 00 3d    	bra       GE, 0x12e4 <expcanonical>
    12dc:	00 03 fd    	exch      w0, w6
    12de:	81 03 fd    	exch      w1, w7
    12e0:	85 02 ea    	neg.w     w5, w5
    12e2:	8b 85 42    	add.w     w5, w11, w11

000012e4 <expcanonical>:
    12e4:	84 0f 72    	ior.w     w4, w4, [w15]
    12e6:	02 00 3b    	bra       NN, 0x12ec <nonegate>
    12e8:	60 00 10    	subr.w    w0, #0x0, w0
    12ea:	e0 80 18    	subbr.w   w1, #0x0, w1

000012ec <nonegate>:
    12ec:	60 11 b8    	mul.uu    w2, #0x0, w2
    12ee:	00 05 eb    	clr.w     w10
    12f0:	7a 28 e1    	cp.w      w5, #0x1a
    12f2:	0a 00 39    	bra       NC, 0x1308 <aligniter>
    12f4:	06 00 78    	mov.w     w6, w0
    12f6:	c7 5d dd    	sl.w      w11, #0x7, w11
    12f8:	f7 07 b2    	and.w     #0x7f, w7
    12fa:	87 80 75    	ior.w     w11, w7, w1
    12fc:	2d 00 37    	bra       0x1358 <signoff>

000012fe <align>:
    12fe:	82 81 71    	ior.w     w3, w2, w3
    1300:	0a 01 78    	mov.w     w10, w2
    1302:	61 05 60    	and.w     w0, #0x1, w10
    1304:	81 80 d1    	asr.w     w1, w1
    1306:	00 80 d3    	rrc.w     w0, w0

00001308 <aligniter>:
    1308:	85 02 e9    	dec.w     w5, w5
    130a:	f9 ff 3b    	bra       NN, 0x12fe <align>

0000130c <aligned>:
    130c:	06 04 40    	add.w     w0, w6, w8
    130e:	87 84 48    	addc.w    w1, w7, w9
    1310:	02 00 3b    	bra       NN, 0x1316 <normalizesum>
    1312:	60 04 14    	subr.w    w8, #0x0, w8
    1314:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001316 <normalizesum>:
    1316:	09 88 a3    	btst.z    w9, #0x8
    1318:	07 00 32    	bra       Z, 0x1328 <checknormal>
    131a:	8a 81 71    	ior.w     w3, w10, w3
    131c:	82 81 71    	ior.w     w3, w2, w3
    131e:	61 01 64    	and.w     w8, #0x1, w2
    1320:	89 04 d1    	lsr.w     w9, w9
    1322:	08 84 d3    	rrc.w     w8, w8
    1324:	8b 05 e8    	inc.w     w11, w11
    1326:	17 00 37    	bra       0x1356 <round>

00001328 <checknormal>:
    1328:	09 78 a3    	btst.z    w9, #0x7
    132a:	13 00 3a    	bra       NZ, 0x1352 <discardguard>

0000132c <underflow>:
    132c:	0b 00 e0    	cp0.w     w11
    132e:	13 00 34    	bra       LE, 0x1356 <round>
    1330:	8b 05 e9    	dec.w     w11, w11
    1332:	08 04 44    	add.w     w8, w8, w8
    1334:	89 84 4c    	addc.w    w9, w9, w9
    1336:	0a 44 74    	ior.b     w8, w10, w8
    1338:	09 78 a3    	btst.z    w9, #0x7
    133a:	0d 00 3a    	bra       NZ, 0x1356 <round>

0000133c <normalizeloop>:
    133c:	0b 00 e0    	cp0.w     w11
    133e:	07 00 34    	bra       LE, 0x134e <normalizeexit>
    1340:	8b 05 e9    	dec.w     w11, w11
    1342:	08 04 44    	add.w     w8, w8, w8
    1344:	89 84 4c    	addc.w    w9, w9, w9
    1346:	01 00 3a    	bra       NZ, 0x134a <normalizetest>
    1348:	0b 00 20    	mov.w     #0x0, w11

0000134a <normalizetest>:
    134a:	09 78 a3    	btst.z    w9, #0x7
    134c:	f7 ff 32    	bra       Z, 0x133c <normalizeloop>

0000134e <normalizeexit>:
    134e:	00 01 eb    	clr.w     w2
    1350:	02 00 37    	bra       0x1356 <round>

00001352 <discardguard>:
    1352:	82 81 71    	ior.w     w3, w2, w3
    1354:	0a 01 78    	mov.w     w10, w2

00001356 <round>:
    1356:	6d 00 07    	rcall     0x1432 <__fpack>

00001358 <signoff>:
    1358:	0c f0 a7    	btsc.w    w12, #0xf
    135a:	01 f0 a0    	bset.w    w1, #0xf
    135c:	b6 00 37    	bra       0x14ca <__fbopExit>

0000135e <aisinfinite>:
    135e:	64 20 e1    	cp.w      w4, #0x4
    1360:	02 00 3a    	bra       NZ, 0x1366 <return8>
    1362:	83 8f 6c    	xor.w     w9, w3, [w15]
    1364:	b6 00 33    	bra       N, 0x14d2 <__fbopReturnNaN>

00001366 <return8>:
    1366:	08 01 be    	mov.d     w8, w2

00001368 <return2>:
    1368:	02 00 be    	mov.d     w2, w0
    136a:	af 00 37    	bra       0x14ca <__fbopExit>

0000136c <___divsf3>:
    136c:	88 9f be    	mov.d     w8, [w15++]
    136e:	8a 9f be    	mov.d     w10, [w15++]
    1370:	8c 1f 78    	mov.w     w12, [w15++]
    1372:	9a 00 07    	rcall     0x14a8 <__funpack2>
    1374:	a1 00 33    	bra       N, 0x14b8 <__fPropagateNaN>
    1376:	03 86 6c    	xor.w     w9, w3, w12
    1378:	64 50 e1    	cp.w      w10, #0x4
    137a:	2e 00 32    	bra       Z, 0x13d8 <aisinfinite>
    137c:	64 20 e1    	cp.w      w4, #0x4
    137e:	33 00 32    	bra       Z, 0x13e6 <returnZero>
    1380:	61 50 e1    	cp.w      w10, #0x1
    1382:	2f 00 32    	bra       Z, 0x13e2 <aiszero>
    1384:	61 20 e1    	cp.w      w4, #0x1
    1386:	31 00 32    	bra       Z, 0x13ea <returnInf>

00001388 <finitenonzero>:
    1388:	85 85 55    	sub.w     w11, w5, w11
    138a:	eb 07 b0    	add.w     #0x7e, w11
    138c:	09 00 20    	mov.w     #0x0, w9
    138e:	08 04 20    	mov.w     #0x40, w8
    1390:	05 00 37    	bra       0x139c <diventry>

00001392 <divnext>:
    1392:	08 04 44    	add.w     w8, w8, w8
    1394:	89 84 4c    	addc.w    w9, w9, w9
    1396:	0a 00 31    	bra       C, 0x13ac <divdone> <formsticky>

00001398 <divloop>:
    1398:	06 03 43    	add.w     w6, w6, w6
    139a:	87 83 4b    	addc.w    w7, w7, w7

0000139c <diventry>:
    139c:	00 01 53    	sub.w     w6, w0, w2
    139e:	81 81 5b    	subb.w    w7, w1, w3
    13a0:	f8 ff 33    	bra       N, 0x1392 <divnext>
    13a2:	02 03 be    	mov.d     w2, w6
    13a4:	08 00 a0    	bset.w    w8, #0x0
    13a6:	08 04 44    	add.w     w8, w8, w8
    13a8:	89 84 4c    	addc.w    w9, w9, w9
    13aa:	f6 ff 39    	bra       NC, 0x1398 <divloop>

000013ac <divdone>:
    13ac:	c6 39 dd    	sl.w      w7, #0x6, w3
    13ae:	83 01 73    	ior.w     w6, w3, w3
    13b0:	01 00 32    	bra       Z, 0x13b4 <stickyok>
    13b2:	13 00 20    	mov.w     #0x1, w3

000013b4 <stickyok>:
    13b4:	89 04 d1    	lsr.w     w9, w9
    13b6:	08 84 d3    	rrc.w     w8, w8
    13b8:	09 98 a3    	btst.z    w9, #0x9
    13ba:	05 00 32    	bra       Z, 0x13c6 <guardused>
    13bc:	08 00 a7    	btsc.w    w8, #0x0
    13be:	03 00 a0    	bset.w    w3, #0x0
    13c0:	89 04 d1    	lsr.w     w9, w9
    13c2:	08 84 d3    	rrc.w     w8, w8
    13c4:	8b 05 e8    	inc.w     w11, w11

000013c6 <guardused>:
    13c6:	89 04 d1    	lsr.w     w9, w9
    13c8:	08 84 d3    	rrc.w     w8, w8
    13ca:	00 01 eb    	clr.w     w2
    13cc:	02 81 d2    	rlc.w     w2, w2
    13ce:	31 00 07    	rcall     0x1432 <__fpack>

000013d0 <return0>:
    13d0:	01 f0 a1    	bclr.w    w1, #0xf
    13d2:	0c f0 a7    	btsc.w    w12, #0xf
    13d4:	01 f0 a0    	bset.w    w1, #0xf
    13d6:	79 00 37    	bra       0x14ca <__fbopExit>

000013d8 <aisinfinite>:
    13d8:	64 20 e1    	cp.w      w4, #0x4
    13da:	7b 00 32    	bra       Z, 0x14d2 <__fbopReturnNaN>

000013dc <return8>:
    13dc:	08 01 be    	mov.d     w8, w2

000013de <return2>:
    13de:	02 00 be    	mov.d     w2, w0
    13e0:	f7 ff 37    	bra       0x13d0 <return0>

000013e2 <aiszero>:
    13e2:	61 20 e1    	cp.w      w4, #0x1
    13e4:	76 00 32    	bra       Z, 0x14d2 <__fbopReturnNaN>

000013e6 <returnZero>:
    13e6:	60 00 b8    	mul.uu    w0, #0x0, w0
    13e8:	f3 ff 37    	bra       0x13d0 <return0>

000013ea <returnInf>:
    13ea:	00 00 20    	mov.w     #0x0, w0
    13ec:	01 f8 27    	mov.w     #0x7f80, w1
    13ee:	f0 ff 37    	bra       0x13d0 <return0>

000013f0 <___eqsf2>:
    13f0:	14 00 20    	mov.w     #0x1, w4
    13f2:	b6 00 37    	bra       0x1560 <__fcompare>

000013f4 <___gesf2>:
    13f4:	f4 ff 2f    	mov.w     #0xffff, w4
    13f6:	b4 00 37    	bra       0x1560 <__fcompare>

000013f8 <___fixunssfsi>:
    13f8:	00 01 be    	mov.d     w0, w2
    13fa:	41 00 07    	rcall     0x147e <__funpack>
    13fc:	04 70 a7    	btsc.w    w4, #0x7
    13fe:	03 f0 a1    	bclr.w    w3, #0xf
    1400:	03 f8 a3    	btst.z    w3, #0xf
    1402:	13 00 3a    	bra       NZ, 0x142a <returnzero>
    1404:	65 09 b1    	sub.w     #0x96, w5
    1406:	10 00 32    	bra       Z, 0x1428 <exit>
    1408:	09 00 35    	bra       LT, 0x141c <shiftright>
    140a:	69 28 e1    	cp.w      w5, #0x9
    140c:	02 00 35    	bra       LT, 0x1412 <shiftleft>
    140e:	01 00 28    	mov.w     #0x8000, w1
    1410:	00 00 05    	retlw.w   #0x0, w0

00001412 <shiftleft>:
    1412:	00 00 40    	add.w     w0, w0, w0
    1414:	81 80 48    	addc.w    w1, w1, w1
    1416:	85 02 e9    	dec.w     w5, w5
    1418:	fc ff 3a    	bra       NZ, 0x1412 <shiftleft>
    141a:	00 00 06    	return    

0000141c <shiftright>:
    141c:	f8 8f 42    	add.w     w5, #0x18, [w15]
    141e:	05 00 35    	bra       LT, 0x142a <returnzero>

00001420 <shiftrightloop>:
    1420:	81 00 d1    	lsr.w     w1, w1
    1422:	00 80 d3    	rrc.w     w0, w0
    1424:	85 02 e8    	inc.w     w5, w5
    1426:	fc ff 3a    	bra       NZ, 0x1420 <shiftrightloop>

00001428 <exit>:
    1428:	00 00 06    	return    

0000142a <returnzero>:
    142a:	80 00 eb    	clr.w     w1
    142c:	00 00 05    	retlw.w   #0x0, w0

0000142e <___floatunsisf>:
    142e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1430:	b2 00 37    	bra       0x1596 <___floatundisf>

00001432 <__fpack>:
    1432:	81 00 20    	mov.w     #0x8, w1
    1434:	61 80 55    	sub.w     w11, #0x1, w0
    1436:	0b 00 3d    	bra       GE, 0x144e <notsubnormal>
    1438:	0b 00 20    	mov.w     #0x0, w11
    143a:	61 fe 2f    	mov.w     #0xffe6, w1
    143c:	01 00 e1    	cp.w      w0, w1
    143e:	1d 00 34    	bra       LE, 0x147a <zerosig>

00001440 <subnormal>:
    1440:	82 81 71    	ior.w     w3, w2, w3
    1442:	61 01 64    	and.w     w8, #0x1, w2
    1444:	89 04 d1    	lsr.w     w9, w9
    1446:	08 84 d3    	rrc.w     w8, w8
    1448:	00 00 e8    	inc.w     w0, w0
    144a:	fa ff 3a    	bra       NZ, 0x1440 <subnormal>
    144c:	71 00 20    	mov.w     #0x7, w1

0000144e <notsubnormal>:
    144e:	61 00 64    	and.w     w8, #0x1, w0
    1450:	03 00 70    	ior.w     w0, w3, w0
    1452:	02 00 60    	and.w     w0, w2, w0
    1454:	09 00 32    	bra       Z, 0x1468 <packupandgo>
    1456:	61 04 44    	add.w     w8, #0x1, w8
    1458:	e0 84 4c    	addc.w    w9, #0x0, w9
    145a:	09 88 a5    	btst.z    w9, w1
    145c:	05 00 32    	bra       Z, 0x1468 <packupandgo>
    145e:	8b 05 e8    	inc.w     w11, w11
    1460:	68 08 e1    	cp.w      w1, #0x8
    1462:	02 00 3a    	bra       NZ, 0x1468 <packupandgo>
    1464:	89 04 d1    	lsr.w     w9, w9
    1466:	08 84 d3    	rrc.w     w8, w8

00001468 <packupandgo>:
    1468:	f2 0f 20    	mov.w     #0xff, w2
    146a:	02 58 e1    	cp.w      w11, w2
    146c:	05 00 3d    	bra       GE, 0x1478 <overflow>
    146e:	c7 5d dd    	sl.w      w11, #0x7, w11
    1470:	f9 07 b2    	and.w     #0x7f, w9
    1472:	89 80 75    	ior.w     w11, w9, w1
    1474:	08 00 78    	mov.w     w8, w0
    1476:	00 00 06    	return    

00001478 <overflow>:
    1478:	0b f8 27    	mov.w     #0x7f80, w11

0000147a <zerosig>:
    147a:	8b 00 78    	mov.w     w11, w1
    147c:	00 00 05    	retlw.w   #0x0, w0

0000147e <__funpack>:
    147e:	c7 0a de    	lsr.w     w1, #0x7, w5
    1480:	f1 07 b2    	and.w     #0x7f, w1
    1482:	f5 0f b2    	and.w     #0xff, w5
    1484:	08 00 32    	bra       Z, 0x1496 <zeroorsub>
    1486:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1488:	02 00 32    	bra       Z, 0x148e <nanorinf>

0000148a <finitereturn>:
    148a:	01 70 a0    	bset.w    w1, #0x7
    148c:	24 00 05    	retlw.w   #0x2, w4

0000148e <nanorinf>:
    148e:	81 0f 70    	ior.w     w0, w1, [w15]
    1490:	01 00 32    	bra       Z, 0x1494 <infinite>
    1492:	04 08 05    	retlw.w   #0x80, w4

00001494 <infinite>:
    1494:	44 00 05    	retlw.w   #0x4, w4

00001496 <zeroorsub>:
    1496:	81 0f 70    	ior.w     w0, w1, [w15]
    1498:	02 00 3a    	bra       NZ, 0x149e <subnormal>
    149a:	14 00 05    	retlw.w   #0x1, w4

0000149c <normalize>:
    149c:	85 02 e9    	dec.w     w5, w5

0000149e <subnormal>:
    149e:	00 00 40    	add.w     w0, w0, w0
    14a0:	81 c0 48    	addc.b    w1, w1, w1
    14a2:	fc ff 3b    	bra       NN, 0x149c <normalize>
    14a4:	01 70 a0    	bset.w    w1, #0x7
    14a6:	24 00 05    	retlw.w   #0x2, w4

000014a8 <__funpack2>:
    14a8:	00 04 be    	mov.d     w0, w8
    14aa:	e9 ff 07    	rcall     0x147e <__funpack>
    14ac:	00 03 be    	mov.d     w0, w6
    14ae:	04 05 be    	mov.d     w4, w10
    14b0:	02 00 be    	mov.d     w2, w0
    14b2:	e5 ff 07    	rcall     0x147e <__funpack>
    14b4:	84 4f 75    	ior.b     w10, w4, [w15]
    14b6:	00 00 06    	return    

000014b8 <__fPropagateNaN>:
    14b8:	02 00 be    	mov.d     w2, w0
    14ba:	64 50 e1    	cp.w      w10, #0x4
    14bc:	05 00 36    	bra       LEU, 0x14c8 <return0>
    14be:	64 20 e1    	cp.w      w4, #0x4
    14c0:	02 00 36    	bra       LEU, 0x14c6 <return8>
    14c2:	09 68 a3    	btst.z    w9, #0x6
    14c4:	01 00 3a    	bra       NZ, 0x14c8 <return0>

000014c6 <return8>:
    14c6:	08 00 be    	mov.d     w8, w0

000014c8 <return0>:
    14c8:	01 60 a0    	bset.w    w1, #0x6

000014ca <__fbopExit>:
    14ca:	4f 06 78    	mov.w     [--w15], w12
    14cc:	4f 05 be    	mov.d     [--w15], w10
    14ce:	4f 04 be    	mov.d     [--w15], w8
    14d0:	00 00 06    	return    

000014d2 <__fbopReturnNaN>:
    14d2:	f0 ff 2f    	mov.w     #0xffff, w0
    14d4:	f1 ff 27    	mov.w     #0x7fff, w1
    14d6:	f9 ff 37    	bra       0x14ca <__fbopExit>

000014d8 <___mulsf3>:
    14d8:	88 9f be    	mov.d     w8, [w15++]
    14da:	8a 9f be    	mov.d     w10, [w15++]
    14dc:	8c 1f 78    	mov.w     w12, [w15++]
    14de:	e4 ff 07    	rcall     0x14a8 <__funpack2>
    14e0:	eb ff 33    	bra       N, 0x14b8 <__fPropagateNaN>
    14e2:	03 86 6c    	xor.w     w9, w3, w12
    14e4:	64 50 e1    	cp.w      w10, #0x4
    14e6:	24 00 32    	bra       Z, 0x1530 <aisinfinite>
    14e8:	64 20 e1    	cp.w      w4, #0x4
    14ea:	27 00 32    	bra       Z, 0x153a <bisinfinite>
    14ec:	61 50 e1    	cp.w      w10, #0x1
    14ee:	22 00 32    	bra       Z, 0x1534 <return8>
    14f0:	61 20 e1    	cp.w      w4, #0x1
    14f2:	21 00 32    	bra       Z, 0x1536 <return2>
    14f4:	8b 85 42    	add.w     w5, w11, w11
    14f6:	eb 07 b1    	sub.w     #0x7e, w11
    14f8:	01 34 b8    	mul.uu    w6, w1, w8
    14fa:	00 3a b8    	mul.uu    w7, w0, w4
    14fc:	08 04 42    	add.w     w4, w8, w8
    14fe:	89 84 4a    	addc.w    w5, w9, w9
    1500:	01 3a b8    	mul.uu    w7, w1, w4
    1502:	00 30 b8    	mul.uu    w6, w0, w0
    1504:	88 80 40    	add.w     w1, w8, w1
    1506:	09 01 4a    	addc.w    w4, w9, w2
    1508:	04 00 33    	bra       N, 0x1512 <formsticky>
    150a:	00 00 40    	add.w     w0, w0, w0
    150c:	81 80 48    	addc.w    w1, w1, w1
    150e:	02 01 49    	addc.w    w2, w2, w2
    1510:	8b 05 e9    	dec.w     w11, w11

00001512 <formsticky>:
    1512:	c9 09 dd    	sl.w      w1, #0x9, w3
    1514:	83 01 70    	ior.w     w0, w3, w3
    1516:	01 00 32    	bra       Z, 0x151a <formRandSig>
    1518:	13 00 20    	mov.w     #0x1, w3

0000151a <formRandSig>:
    151a:	c8 14 de    	lsr.w     w2, #0x8, w9
    151c:	48 14 dd    	sl.w      w2, #0x8, w8
    151e:	47 09 de    	lsr.w     w1, #0x7, w2
    1520:	12 00 b2    	and.w     #0x1, w2
    1522:	c8 08 de    	lsr.w     w1, #0x8, w1
    1524:	08 84 70    	ior.w     w1, w8, w8
    1526:	85 ff 07    	rcall     0x1432 <__fpack>

00001528 <return0>:
    1528:	01 f0 a1    	bclr.w    w1, #0xf
    152a:	0c f0 a7    	btsc.w    w12, #0xf
    152c:	01 f0 a0    	bset.w    w1, #0xf
    152e:	cd ff 37    	bra       0x14ca <__fbopExit>

00001530 <aisinfinite>:
    1530:	61 20 e1    	cp.w      w4, #0x1
    1532:	cf ff 32    	bra       Z, 0x14d2 <__fbopReturnNaN>

00001534 <return8>:
    1534:	08 01 be    	mov.d     w8, w2

00001536 <return2>:
    1536:	02 00 be    	mov.d     w2, w0
    1538:	f7 ff 37    	bra       0x1528 <return0> <.Ldebug_info0>

0000153a <bisinfinite>:
    153a:	61 50 e1    	cp.w      w10, #0x1
    153c:	fc ff 3a    	bra       NZ, 0x1536 <return2>
    153e:	c9 ff 37    	bra       0x14d2 <__fbopReturnNaN>

00001540 <___udivsi3>:
    1540:	60 22 b8    	mul.uu    w4, #0x0, w4
    1542:	06 02 20    	mov.w     #0x20, w6

00001544 <nextbit>:
    1544:	00 00 d0    	sl.w      w0, w0
    1546:	81 80 d2    	rlc.w     w1, w1
    1548:	04 82 d2    	rlc.w     w4, w4
    154a:	85 82 d2    	rlc.w     w5, w5
    154c:	00 00 a0    	bset.w    w0, #0x0
    154e:	02 02 52    	sub.w     w4, w2, w4
    1550:	83 82 5a    	subb.w    w5, w3, w5
    1552:	03 00 31    	bra       C, 0x155a <iterate>
    1554:	02 02 42    	add.w     w4, w2, w4
    1556:	83 82 4a    	addc.w    w5, w3, w5
    1558:	00 00 a1    	bclr.w    w0, #0x0

0000155a <iterate>:
    155a:	06 03 e9    	dec.w     w6, w6
    155c:	f3 ff 3a    	bra       NZ, 0x1544 <nextbit>
    155e:	00 00 06    	return    

00001560 <__fcompare>:
    1560:	88 9f be    	mov.d     w8, [w15++]
    1562:	8a 9f be    	mov.d     w10, [w15++]
    1564:	84 1f 78    	mov.w     w4, [w15++]
    1566:	a0 ff 07    	rcall     0x14a8 <__funpack2>
    1568:	4f 00 78    	mov.w     [--w15], w0
    156a:	11 00 33    	bra       N, 0x158e <exit>
    156c:	f0 ff 2f    	mov.w     #0xffff, w0
    156e:	83 8f 6c    	xor.w     w9, w3, [w15]
    1570:	06 00 3b    	bra       NN, 0x157e <comparemag>
    1572:	04 05 65    	and.w     w10, w4, w10
    1574:	0a 00 a7    	btsc.w    w10, #0x0
    1576:	08 00 37    	bra       0x1588 <returnEqual>
    1578:	09 f0 a6    	btss.w    w9, #0xf
    157a:	10 00 20    	mov.w     #0x1, w0
    157c:	08 00 37    	bra       0x158e <exit>

0000157e <comparemag>:
    157e:	82 0f 54    	sub.w     w8, w2, [w15]
    1580:	83 8f 5c    	subb.w    w9, w3, [w15]
    1582:	03 00 39    	bra       NC, 0x158a <adjust>
    1584:	10 00 20    	mov.w     #0x1, w0
    1586:	01 00 3e    	bra       GTU, 0x158a <adjust>

00001588 <returnEqual>:
    1588:	00 00 20    	mov.w     #0x0, w0

0000158a <adjust>:
    158a:	09 f0 a7    	btsc.w    w9, #0xf
    158c:	00 00 ea    	neg.w     w0, w0

0000158e <exit>:
    158e:	4f 05 be    	mov.d     [--w15], w10
    1590:	4f 04 be    	mov.d     [--w15], w8
    1592:	00 00 e0    	cp0.w     w0
    1594:	00 00 06    	return    

00001596 <___floatundisf>:
    1596:	88 9f be    	mov.d     w8, [w15++]
    1598:	8a 9f be    	mov.d     w10, [w15++]
    159a:	00 82 70    	ior.w     w1, w0, w4
    159c:	04 02 71    	ior.w     w2, w4, w4
    159e:	04 82 71    	ior.w     w3, w4, w4
    15a0:	26 00 32    	bra       Z, 0x15ee <return0>
    15a2:	00 04 be    	mov.d     w0, w8
    15a4:	02 00 be    	mov.d     w2, w0
    15a6:	60 11 b8    	mul.uu    w2, #0x0, w2
    15a8:	6b 09 20    	mov.w     #0x96, w11
    15aa:	95 02 20    	mov.w     #0x29, w5
    15ac:	01 82 cf    	ff1l      w1, w4
    15ae:	0a 00 39    	bra       NC, 0x15c4 <fixshift>
    15b0:	05 41 b1    	sub.b     #0x10, w5
    15b2:	00 82 cf    	ff1l      w0, w4
    15b4:	07 00 39    	bra       NC, 0x15c4 <fixshift>
    15b6:	05 41 b1    	sub.b     #0x10, w5
    15b8:	09 82 cf    	ff1l      w9, w4
    15ba:	04 00 39    	bra       NC, 0x15c4 <fixshift>
    15bc:	05 41 b1    	sub.b     #0x10, w5
    15be:	08 82 cf    	ff1l      w8, w4
    15c0:	01 00 39    	bra       NC, 0x15c4 <fixshift>
    15c2:	05 41 b1    	sub.b     #0x10, w5

000015c4 <fixshift>:
    15c4:	05 42 52    	sub.b     w4, w5, w4
    15c6:	12 00 32    	bra       Z, 0x15ec <round>
    15c8:	0a 00 3b    	bra       NN, 0x15de <shiftleft>

000015ca <shiftright>:
    15ca:	82 81 71    	ior.w     w3, w2, w3
    15cc:	61 01 64    	and.w     w8, #0x1, w2
    15ce:	81 00 d1    	lsr.w     w1, w1
    15d0:	00 80 d3    	rrc.w     w0, w0
    15d2:	89 84 d3    	rrc.w     w9, w9
    15d4:	08 84 d3    	rrc.w     w8, w8
    15d6:	8b 05 e8    	inc.w     w11, w11
    15d8:	04 42 e8    	inc.b     w4, w4
    15da:	f7 ff 3a    	bra       NZ, 0x15ca <shiftright>
    15dc:	07 00 37    	bra       0x15ec <round>

000015de <shiftleft>:
    15de:	08 04 44    	add.w     w8, w8, w8
    15e0:	89 84 4c    	addc.w    w9, w9, w9
    15e2:	00 00 48    	addc.w    w0, w0, w0
    15e4:	81 80 48    	addc.w    w1, w1, w1
    15e6:	8b 05 e9    	dec.w     w11, w11
    15e8:	04 42 e9    	dec.b     w4, w4
    15ea:	f9 ff 3a    	bra       NZ, 0x15de <shiftleft>

000015ec <round>:
    15ec:	22 ff 07    	rcall     0x1432 <__fpack>

000015ee <return0>:
    15ee:	4f 05 be    	mov.d     [--w15], w10
    15f0:	4f 04 be    	mov.d     [--w15], w8
    15f2:	00 00 06    	return    

000015f4 <_puts>:
    15f4:	61 bd 20    	mov.w     #0xbd6, w1
    15f6:	70 00 07    	rcall     0x16d8 <_fputs>
    15f8:	80 00 78    	mov.w     w0, w1
    15fa:	00 80 eb    	setm.w    w0
    15fc:	01 00 e0    	cp0.w     w1
    15fe:	04 00 35    	bra       LT, 0x1608 <.L2>
    1600:	61 bd 20    	mov.w     #0xbd6, w1
    1602:	a0 00 20    	mov.w     #0xa, w0
    1604:	08 00 07    	rcall     0x1616 <_fputc>
    1606:	4f 80 de    	asr.w     w0, #0xf, w0

00001608 <.L2>:
    1608:	00 00 06    	return    

0000160a <_strcpy>:
    160a:	00 01 78    	mov.w     w0, w2

0000160c <.L2>:
    160c:	b1 41 78    	mov.b     [w1++], w3
    160e:	03 59 78    	mov.b     w3, [w2++]
    1610:	03 04 e0    	cp0.b     w3
    1612:	fc ff 3a    	bra       NZ, 0x160c <.L2>
    1614:	00 00 06    	return    

00001616 <_fputc>:
    1616:	88 9f be    	mov.d     w8, [w15++]
    1618:	8a 1f 78    	mov.w     w10, [w15++]
    161a:	00 04 be    	mov.d     w0, w8
    161c:	c9 00 90    	mov.w     [w9+8], w1
    161e:	69 00 90    	mov.w     [w9+12], w0
    1620:	80 8f 50    	sub.w     w1, w0, [w15]
    1622:	05 00 39    	bra       NC, 0x162e <.L2>
    1624:	09 00 78    	mov.w     w9, w0
    1626:	b7 00 07    	rcall     0x1796 <__Fwprep>
    1628:	80 80 eb    	setm.w    w1
    162a:	00 00 e0    	cp0.w     w0
    162c:	16 00 35    	bra       LT, 0x165a <.L3>

0000162e <.L2>:
    162e:	08 45 78    	mov.b     w8, w10
    1630:	49 00 90    	mov.w     [w9+8], w0
    1632:	08 58 78    	mov.b     w8, [w0++]
    1634:	c0 04 98    	mov.w     w0, [w9+8]
    1636:	19 00 78    	mov.w     [w9], w0
    1638:	00 b8 a3    	btst.z    w0, #0xb
    163a:	04 00 3a    	bra       NZ, 0x1644 <.L4>
    163c:	00 a8 a3    	btst.z    w0, #0xa
    163e:	07 00 32    	bra       Z, 0x164e <.L5>
    1640:	ea 4f 54    	sub.b     w8, #0xa, [w15]
    1642:	05 00 3a    	bra       NZ, 0x164e <.L5>

00001644 <.L4>:
    1644:	09 00 78    	mov.w     w9, w0
    1646:	0d 00 07    	rcall     0x1662 <__DNKfflush>
    1648:	80 80 eb    	setm.w    w1
    164a:	00 00 e0    	cp0.w     w0
    164c:	06 00 3a    	bra       NZ, 0x165a <.L3>

0000164e <.L5>:
    164e:	00 c0 20    	mov.w     #0xc00, w0
    1650:	19 00 60    	and.w     w0, [w9], w0
    1652:	02 00 32    	bra       Z, 0x1658 <.L6>
    1654:	49 00 90    	mov.w     [w9+8], w0
    1656:	e0 04 98    	mov.w     w0, [w9+12]

00001658 <.L6>:
    1658:	8a 80 fb    	ze        w10, w1

0000165a <.L3>:
    165a:	01 00 78    	mov.w     w1, w0
    165c:	4f 05 78    	mov.w     [--w15], w10
    165e:	4f 04 be    	mov.d     [--w15], w8
    1660:	00 00 06    	return    

00001662 <__DNKfflush>:
    1662:	88 9f be    	mov.d     w8, [w15++]
    1664:	8a 1f 78    	mov.w     w10, [w15++]
    1666:	00 04 78    	mov.w     w0, w8
    1668:	08 00 e0    	cp0.w     w8
    166a:	0d 00 3a    	bra       NZ, 0x1686 <.L2>
    166c:	48 c2 20    	mov.w     #0xc24, w8
    166e:	70 05 44    	add.w     w8, #0x10, w10
    1670:	80 04 eb    	clr.w     w9

00001672 <.L4>:
    1672:	58 00 78    	mov.w     [++w8], w0
    1674:	00 00 e0    	cp0.w     w0
    1676:	04 00 32    	bra       Z, 0x1680 <.L3>
    1678:	f4 ff 07    	rcall     0x1662 <__DNKfflush>
    167a:	00 00 e0    	cp0.w     w0
    167c:	01 00 3d    	bra       GE, 0x1680 <.L3>
    167e:	80 84 eb    	setm.w    w9

00001680 <.L3>:
    1680:	8a 0f 54    	sub.w     w8, w10, [w15]
    1682:	f7 ff 3a    	bra       NZ, 0x1672 <.L4>
    1684:	25 00 37    	bra       0x16d0 <.L5>

00001686 <.L2>:
    1686:	00 00 22    	mov.w     #0x2000, w0
    1688:	18 00 60    	and.w     w0, [w8], w0
    168a:	80 04 eb    	clr.w     w9
    168c:	21 00 32    	bra       Z, 0x16d0 <.L5>
    168e:	a8 04 90    	mov.w     [w8+4], w9
    1690:	0f 00 37    	bra       0x16b0 <.L6>

00001692 <.L8>:
    1692:	09 01 51    	sub.w     w2, w9, w2
    1694:	38 40 90    	mov.b     [w8+3], w0
    1696:	00 00 fb    	se        w0, w0
    1698:	89 00 78    	mov.w     w9, w1
    169a:	52 03 07    	rcall     0x1d40 <_write> <.LFB14> <.LFE5>
    169c:	00 00 e0    	cp0.w     w0
    169e:	07 00 3c    	bra       GT, 0x16ae <.L7>
    16a0:	28 00 90    	mov.w     [w8+4], w0
    16a2:	40 04 98    	mov.w     w0, [w8+8]
    16a4:	60 04 98    	mov.w     w0, [w8+12]
    16a6:	50 0c 98    	mov.w     w0, [w8+26]
    16a8:	18 90 a0    	bset.w    [w8], #0x9
    16aa:	80 84 eb    	setm.w    w9
    16ac:	11 00 37    	bra       0x16d0 <.L5>

000016ae <.L7>:
    16ae:	80 84 44    	add.w     w9, w0, w9

000016b0 <.L6>:
    16b0:	48 01 90    	mov.w     [w8+8], w2
    16b2:	82 8f 54    	sub.w     w9, w2, [w15]
    16b4:	ee ff 39    	bra       NC, 0x1692 <.L8>
    16b6:	28 00 90    	mov.w     [w8+4], w0
    16b8:	40 04 98    	mov.w     w0, [w8+8]
    16ba:	98 00 78    	mov.w     [w8], w1
    16bc:	02 c0 20    	mov.w     #0xc00, w2
    16be:	02 81 60    	and.w     w1, w2, w2
    16c0:	01 00 3a    	bra       NZ, 0x16c4 <.L9>
    16c2:	38 00 90    	mov.w     [w8+6], w0

000016c4 <.L9>:
    16c4:	01 e8 a3    	btst.z    w1, #0xe
    16c6:	02 00 32    	bra       Z, 0x16cc <.L10>
    16c8:	60 04 98    	mov.w     w0, [w8+12]
    16ca:	01 00 37    	bra       0x16ce <.L13>

000016cc <.L10>:
    16cc:	50 0c 98    	mov.w     w0, [w8+26]

000016ce <.L13>:
    16ce:	80 04 eb    	clr.w     w9

000016d0 <.L5>:
    16d0:	09 00 78    	mov.w     w9, w0
    16d2:	4f 05 78    	mov.w     [--w15], w10
    16d4:	4f 04 be    	mov.d     [--w15], w8
    16d6:	00 00 06    	return    

000016d8 <_fputs>:
    16d8:	88 9f be    	mov.d     w8, [w15++]
    16da:	8a 9f be    	mov.d     w10, [w15++]
    16dc:	80 04 78    	mov.w     w0, w9
    16de:	01 04 78    	mov.w     w1, w8
    16e0:	2c 00 37    	bra       0x173a <.L2>

000016e2 <.L9>:
    16e2:	c8 00 90    	mov.w     [w8+8], w1
    16e4:	68 00 90    	mov.w     [w8+12], w0
    16e6:	80 8f 50    	sub.w     w1, w0, [w15]
    16e8:	04 00 39    	bra       NC, 0x16f2 <.L3>
    16ea:	08 00 78    	mov.w     w8, w0
    16ec:	54 00 07    	rcall     0x1796 <__Fwprep>
    16ee:	00 00 e0    	cp0.w     w0
    16f0:	37 00 35    	bra       LT, 0x1760 <.L13>

000016f2 <.L3>:
    16f2:	00 40 20    	mov.w     #0x400, w0
    16f4:	18 00 60    	and.w     w0, [w8], w0
    16f6:	09 00 32    	bra       Z, 0x170a <.L5>
    16f8:	a1 00 20    	mov.w     #0xa, w1
    16fa:	09 00 78    	mov.w     w9, w0
    16fc:	42 00 07    	rcall     0x1782 <_strrchr>
    16fe:	80 05 78    	mov.w     w0, w11
    1700:	0b 00 e0    	cp0.w     w11
    1702:	03 00 32    	bra       Z, 0x170a <.L5>
    1704:	61 85 14    	subr.w    w9, #0x1, w10
    1706:	0a 85 45    	add.w     w11, w10, w10
    1708:	04 00 37    	bra       0x1712 <.L6>

0000170a <.L5>:
    170a:	09 00 78    	mov.w     w9, w0
    170c:	34 00 07    	rcall     0x1776 <_strlen>
    170e:	00 05 78    	mov.w     w0, w10
    1710:	80 05 eb    	clr.w     w11

00001712 <.L6>:
    1712:	48 00 90    	mov.w     [w8+8], w0
    1714:	e8 00 90    	mov.w     [w8+12], w1
    1716:	80 80 50    	sub.w     w1, w0, w1
    1718:	8a 8f 50    	sub.w     w1, w10, [w15]
    171a:	02 00 31    	bra       C, 0x1720 <.L7>
    171c:	01 05 78    	mov.w     w1, w10
    171e:	80 05 eb    	clr.w     w11

00001720 <.L7>:
    1720:	0a 01 78    	mov.w     w10, w2
    1722:	89 00 78    	mov.w     w9, w1
    1724:	21 00 07    	rcall     0x1768 <_memcpy>
    1726:	48 00 90    	mov.w     [w8+8], w0
    1728:	0a 00 40    	add.w     w0, w10, w0
    172a:	40 04 98    	mov.w     w0, [w8+8]
    172c:	0b 00 e0    	cp0.w     w11
    172e:	04 00 32    	bra       Z, 0x1738 <.L8>
    1730:	08 00 78    	mov.w     w8, w0
    1732:	97 ff 07    	rcall     0x1662 <__DNKfflush>
    1734:	00 00 e0    	cp0.w     w0
    1736:	14 00 3a    	bra       NZ, 0x1760 <.L13>

00001738 <.L8>:
    1738:	8a 84 44    	add.w     w9, w10, w9

0000173a <.L2>:
    173a:	19 04 e0    	cp0.b     [w9]
    173c:	d2 ff 3a    	bra       NZ, 0x16e2 <.L9>
    173e:	00 80 20    	mov.w     #0x800, w0
    1740:	18 00 60    	and.w     w0, [w8], w0
    1742:	06 00 32    	bra       Z, 0x1750 <.L10>
    1744:	08 00 78    	mov.w     w8, w0
    1746:	8d ff 07    	rcall     0x1662 <__DNKfflush>
    1748:	80 00 78    	mov.w     w0, w1
    174a:	00 80 eb    	setm.w    w0
    174c:	01 00 e0    	cp0.w     w1
    174e:	09 00 3a    	bra       NZ, 0x1762 <.L4>

00001750 <.L10>:
    1750:	01 c0 20    	mov.w     #0xc00, w1
    1752:	98 80 60    	and.w     w1, [w8], w1
    1754:	00 00 eb    	clr.w     w0
    1756:	05 00 32    	bra       Z, 0x1762 <.L4>
    1758:	48 00 90    	mov.w     [w8+8], w0
    175a:	60 04 98    	mov.w     w0, [w8+12]
    175c:	00 00 eb    	clr.w     w0
    175e:	01 00 37    	bra       0x1762 <.L4>

00001760 <.L13>:
    1760:	00 80 eb    	setm.w    w0

00001762 <.L4>:
    1762:	4f 05 be    	mov.d     [--w15], w10
    1764:	4f 04 be    	mov.d     [--w15], w8
    1766:	00 00 06    	return    

00001768 <_memcpy>:
    1768:	80 01 78    	mov.w     w0, w3
    176a:	02 00 37    	bra       0x1770 <.L2>

0000176c <.L3>:
    176c:	b1 59 78    	mov.b     [w1++], [w3++]
    176e:	02 01 e9    	dec.w     w2, w2

00001770 <.L2>:
    1770:	02 00 e0    	cp0.w     w2
    1772:	fc ff 3a    	bra       NZ, 0x176c <.L3>
    1774:	00 00 06    	return    

00001776 <_strlen>:
    1776:	80 00 78    	mov.w     w0, w1

00001778 <.L2>:
    1778:	01 01 78    	mov.w     w1, w2
    177a:	31 04 e0    	cp0.b     [w1++]
    177c:	fd ff 3a    	bra       NZ, 0x1778 <.L2>
    177e:	00 00 51    	sub.w     w2, w0, w0
    1780:	00 00 06    	return    

00001782 <_strrchr>:
    1782:	00 01 eb    	clr.w     w2

00001784 <.L3>:
    1784:	00 02 78    	mov.w     w0, w4
    1786:	b0 41 78    	mov.b     [w0++], w3
    1788:	81 cf 51    	sub.b     w3, w1, [w15]
    178a:	01 00 3a    	bra       NZ, 0x178e <.L2>
    178c:	04 01 78    	mov.w     w4, w2

0000178e <.L2>:
    178e:	03 04 e0    	cp0.b     w3
    1790:	f9 ff 3a    	bra       NZ, 0x1784 <.L3>
    1792:	02 00 78    	mov.w     w2, w0
    1794:	00 00 06    	return    

00001796 <__Fwprep>:
    1796:	88 9f be    	mov.d     w8, [w15++]
    1798:	8a 1f 78    	mov.w     w10, [w15++]
    179a:	00 04 78    	mov.w     w0, w8
    179c:	c8 00 90    	mov.w     [w8+8], w1
    179e:	68 01 90    	mov.w     [w8+12], w2
    17a0:	00 00 eb    	clr.w     w0
    17a2:	82 8f 50    	sub.w     w1, w2, [w15]
    17a4:	3c 00 39    	bra       NC, 0x181e <.L2>
    17a6:	18 00 78    	mov.w     [w8], w0
    17a8:	22 00 29    	mov.w     #0x9002, w2
    17aa:	02 01 60    	and.w     w0, w2, w2
    17ac:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    17ae:	07 00 32    	bra       Z, 0x17be <.L3>
    17b0:	01 20 24    	mov.w     #0x4200, w1
    17b2:	00 00 e0    	cp0.w     w0
    17b4:	01 00 3d    	bra       GE, 0x17b8 <.L4>
    17b6:	01 20 20    	mov.w     #0x200, w1

000017b8 <.L4>:
    17b8:	00 8c 70    	ior.w     w1, w0, [w8]
    17ba:	00 80 eb    	setm.w    w0
    17bc:	30 00 37    	bra       0x181e <.L2>

000017be <.L3>:
    17be:	02 00 26    	mov.w     #0x6000, w2
    17c0:	02 00 60    	and.w     w0, w2, w0
    17c2:	82 0f 50    	sub.w     w0, w2, [w15]
    17c4:	09 00 3a    	bra       NZ, 0x17d8 <.L5>
    17c6:	38 00 90    	mov.w     [w8+6], w0
    17c8:	80 8f 50    	sub.w     w1, w0, [w15]
    17ca:	06 00 39    	bra       NC, 0x17d8 <.L5>
    17cc:	08 00 78    	mov.w     w8, w0
    17ce:	49 ff 07    	rcall     0x1662 <__DNKfflush>
    17d0:	80 00 78    	mov.w     w0, w1
    17d2:	00 80 eb    	setm.w    w0
    17d4:	01 00 e0    	cp0.w     w1
    17d6:	23 00 3a    	bra       NZ, 0x181e <.L2>

000017d8 <.L5>:
    17d8:	18 05 78    	mov.w     [w8], w10
    17da:	00 c0 20    	mov.w     #0xc00, w0
    17dc:	00 00 65    	and.w     w10, w0, w0
    17de:	18 00 3a    	bra       NZ, 0x1810 <.L6>
    17e0:	a8 04 90    	mov.w     [w8+4], w9
    17e2:	60 02 20    	mov.w     #0x26, w0
    17e4:	08 00 40    	add.w     w0, w8, w0
    17e6:	80 8f 54    	sub.w     w9, w0, [w15]
    17e8:	13 00 3a    	bra       NZ, 0x1810 <.L6>
    17ea:	00 20 20    	mov.w     #0x200, w0
    17ec:	ef 00 07    	rcall     0x19cc <_malloc>
    17ee:	20 04 98    	mov.w     w0, [w8+4]
    17f0:	00 00 e0    	cp0.w     w0
    17f2:	05 00 3a    	bra       NZ, 0x17fe <.L7>
    17f4:	29 04 98    	mov.w     w9, [w8+4]
    17f6:	49 04 98    	mov.w     w9, [w8+8]
    17f8:	89 04 e8    	inc.w     w9, w9
    17fa:	39 04 98    	mov.w     w9, [w8+6]
    17fc:	08 00 37    	bra       0x180e <.L11>

000017fe <.L7>:
    17fe:	0a 60 a0    	bset.w    w10, #0x6
    1800:	0a 0c 78    	mov.w     w10, [w8]
    1802:	40 04 98    	mov.w     w0, [w8+8]
    1804:	01 20 20    	mov.w     #0x200, w1
    1806:	80 80 40    	add.w     w1, w0, w1
    1808:	31 04 98    	mov.w     w1, [w8+6]
    180a:	40 0c 98    	mov.w     w0, [w8+24]
    180c:	50 0c 98    	mov.w     w0, [w8+26]

0000180e <.L11>:
    180e:	0c 00 07    	rcall     0x1828 <__Closreg>

00001810 <.L6>:
    1810:	28 00 90    	mov.w     [w8+4], w0
    1812:	50 04 98    	mov.w     w0, [w8+10]
    1814:	38 00 90    	mov.w     [w8+6], w0
    1816:	60 04 98    	mov.w     w0, [w8+12]
    1818:	00 00 26    	mov.w     #0x6000, w0
    181a:	18 0c 70    	ior.w     w0, [w8], [w8]
    181c:	00 00 eb    	clr.w     w0

0000181e <.L2>:
    181e:	4f 05 78    	mov.w     [--w15], w10
    1820:	4f 04 be    	mov.d     [--w15], w8
    1822:	00 00 06    	return    

00001824 <_closeallreg>:
    1824:	a0 8c 21    	mov.w     #0x18ca, w0
    1826:	61 00 37    	bra       0x18ea <__Atexit>

00001828 <__Closreg>:
    1828:	88 1f 78    	mov.w     w8, [w15++]
    182a:	48 d8 20    	mov.w     #0xd84, w8
    182c:	18 04 e0    	cp0.b     [w8]
    182e:	03 00 3a    	bra       NZ, 0x1836 <.L2>
    1830:	f9 ff 07    	rcall     0x1824 <_closeallreg>
    1832:	20 c0 b3    	mov.b     #0x2, w0
    1834:	00 4c 78    	mov.b     w0, [w8]

00001836 <.L2>:
    1836:	4f 04 78    	mov.w     [--w15], w8
    1838:	00 00 06    	return    

0000183a <_fclose>:
    183a:	88 9f be    	mov.d     w8, [w15++]
    183c:	00 04 78    	mov.w     w0, w8
    183e:	08 00 78    	mov.w     w8, w0
    1840:	10 ff 07    	rcall     0x1662 <__DNKfflush>
    1842:	80 04 78    	mov.w     w0, w9
    1844:	00 04 20    	mov.w     #0x40, w0
    1846:	18 00 60    	and.w     w0, [w8], w0
    1848:	02 00 32    	bra       Z, 0x184e <.L5>
    184a:	28 00 90    	mov.w     [w8+4], w0
    184c:	5a 00 07    	rcall     0x1902 <_free>

0000184e <.L5>:
    184e:	00 00 eb    	clr.w     w0
    1850:	20 04 98    	mov.w     w0, [w8+4]
    1852:	38 40 90    	mov.b     [w8+3], w0
    1854:	00 04 e0    	cp0.b     w0
    1856:	05 00 35    	bra       LT, 0x1862 <.L6>
    1858:	00 00 fb    	se        w0, w0
    185a:	f6 fc 07    	rcall     0x1248 <_close>
    185c:	00 00 e0    	cp0.w     w0
    185e:	01 00 32    	bra       Z, 0x1862 <.L6>
    1860:	80 84 eb    	setm.w    w9

00001862 <.L6>:
    1862:	18 10 90    	mov.w     [w8+34], w0
    1864:	00 00 e0    	cp0.w     w0
    1866:	08 00 32    	bra       Z, 0x1878 <.L7>
    1868:	f8 fc 07    	rcall     0x125a <_remove>
    186a:	00 00 e0    	cp0.w     w0
    186c:	01 00 32    	bra       Z, 0x1870 <.L8>
    186e:	80 84 eb    	setm.w    w9

00001870 <.L8>:
    1870:	18 10 90    	mov.w     [w8+34], w0
    1872:	47 00 07    	rcall     0x1902 <_free>
    1874:	00 00 eb    	clr.w     w0
    1876:	10 14 98    	mov.w     w0, [w8+34]

00001878 <.L7>:
    1878:	00 08 20    	mov.w     #0x80, w0
    187a:	18 00 60    	and.w     w0, [w8], w0
    187c:	15 00 32    	bra       Z, 0x18a8 <.L9>
    187e:	00 01 eb    	clr.w     w2
    1880:	60 00 b8    	mul.uu    w0, #0x0, w0

00001882 <.L12>:
    1882:	63 c2 20    	mov.w     #0xc26, w3
    1884:	02 02 d0    	sl.w      w2, w4
    1886:	63 02 7a    	mov.w     [w3+w4], w4
    1888:	88 0f 52    	sub.w     w4, w8, [w15]
    188a:	05 00 3a    	bra       NZ, 0x1896 <.L10>
    188c:	00 00 40    	add.w     w0, w0, w0
    188e:	81 80 48    	addc.w    w1, w1, w1
    1890:	00 80 41    	add.w     w3, w0, w0
    1892:	00 08 eb    	clr.w     [w0]
    1894:	06 00 37    	bra       0x18a2 <.L11>

00001896 <.L10>:
    1896:	61 00 40    	add.w     w0, #0x1, w0
    1898:	e0 80 48    	addc.w    w1, #0x0, w1
    189a:	02 01 e8    	inc.w     w2, w2
    189c:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    189e:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    18a0:	f0 ff 3a    	bra       NZ, 0x1882 <.L12>

000018a2 <.L11>:
    18a2:	08 00 78    	mov.w     w8, w0
    18a4:	2e 00 07    	rcall     0x1902 <_free>
    18a6:	0e 00 37    	bra       0x18c4 <.L13>

000018a8 <.L9>:
    18a8:	00 0c 78    	mov.w     w0, [w8]
    18aa:	00 c0 eb    	setm.b    w0
    18ac:	30 44 98    	mov.b     w0, [w8+3]
    18ae:	60 02 20    	mov.w     #0x26, w0
    18b0:	08 00 40    	add.w     w0, w8, w0
    18b2:	20 04 98    	mov.w     w0, [w8+4]
    18b4:	40 04 98    	mov.w     w0, [w8+8]
    18b6:	50 04 98    	mov.w     w0, [w8+10]
    18b8:	40 0c 98    	mov.w     w0, [w8+24]
    18ba:	60 04 98    	mov.w     w0, [w8+12]
    18bc:	50 0c 98    	mov.w     w0, [w8+26]
    18be:	70 04 98    	mov.w     w0, [w8+14]
    18c0:	76 00 44    	add.w     w8, #0x16, w0
    18c2:	00 0c 98    	mov.w     w0, [w8+16]

000018c4 <.L13>:
    18c4:	09 00 78    	mov.w     w9, w0
    18c6:	4f 04 be    	mov.d     [--w15], w8
    18c8:	00 00 06    	return    

000018ca <_closeall>:
    18ca:	88 1f 78    	mov.w     w8, [w15++]
    18cc:	00 04 eb    	clr.w     w8

000018ce <.L18>:
    18ce:	61 40 b8    	mul.uu    w8, #0x1, w0
    18d0:	e2 ff 2f    	mov.w     #0xfffe, w2
    18d2:	f3 ff 2f    	mov.w     #0xffff, w3
    18d4:	b3 00 07    	rcall     0x1a3c <___mulp32eds3> <___mulp32peds3> <___mulsi3>
    18d6:	42 c3 20    	mov.w     #0xc34, w2
    18d8:	62 00 78    	mov.w     [w2+w0], w0
    18da:	00 00 e0    	cp0.w     w0
    18dc:	01 00 32    	bra       Z, 0x18e0 <.L17>
    18de:	ad ff 07    	rcall     0x183a <_fclose>

000018e0 <.L17>:
    18e0:	08 04 e8    	inc.w     w8, w8
    18e2:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    18e4:	f4 ff 3a    	bra       NZ, 0x18ce <.L18>
    18e6:	4f 04 78    	mov.w     [--w15], w8
    18e8:	00 00 06    	return    

000018ea <__Atexit>:
    18ea:	01 00 20    	mov.w     #0x0, w1
    18ec:	01 00 e0    	cp0.w     w1
    18ee:	08 00 32    	bra       Z, 0x1900 <.L1>
    18f0:	01 00 80    	mov.w     0x0, w1
    18f2:	01 00 e0    	cp0.w     w1
    18f4:	05 00 32    	bra       Z, 0x1900 <.L1>
    18f6:	81 00 e9    	dec.w     w1, w1
    18f8:	01 00 88    	mov.w     w1, 0x0
    18fa:	81 00 d0    	sl.w      w1, w1
    18fc:	02 00 80    	mov.w     0x0, w2
    18fe:	00 b1 78    	mov.w     w0, [w2+w1]

00001900 <.L1>:
    1900:	00 00 06    	return    

00001902 <_free>:
    1902:	00 00 e0    	cp0.w     w0
    1904:	2f 00 32    	bra       Z, 0x1964 <.L1>
    1906:	c0 01 78    	mov.w     [--w0], w3
    1908:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    190a:	2c 00 36    	bra       LEU, 0x1964 <.L1>
    190c:	03 08 a3    	btst.z    w3, #0x0
    190e:	2a 00 3a    	bra       NZ, 0x1964 <.L1>
    1910:	11 6c 80    	mov.w     0xd82, w1
    1912:	01 00 e0    	cp0.w     w1
    1914:	02 00 32    	bra       Z, 0x191a <.L3>
    1916:	81 0f 50    	sub.w     w0, w1, [w15]
    1918:	04 00 31    	bra       C, 0x1922 <.L7>

0000191a <.L3>:
    191a:	11 00 98    	mov.w     w1, [w0+2]
    191c:	10 6c 88    	mov.w     w0, 0xd82
    191e:	16 00 37    	bra       0x194c <.L5>

00001920 <.L11>:
    1920:	82 00 78    	mov.w     w2, w1

00001922 <.L7>:
    1922:	11 01 90    	mov.w     [w1+2], w2
    1924:	02 00 e0    	cp0.w     w2
    1926:	02 00 32    	bra       Z, 0x192c <.L6>
    1928:	80 0f 51    	sub.w     w2, w0, [w15]
    192a:	fa ff 39    	bra       NC, 0x1920 <.L11>

0000192c <.L6>:
    192c:	11 02 78    	mov.w     [w1], w4
    192e:	84 82 40    	add.w     w1, w4, w5
    1930:	85 0f 50    	sub.w     w0, w5, [w15]
    1932:	18 00 39    	bra       NC, 0x1964 <.L1>
    1934:	80 8f 52    	sub.w     w5, w0, [w15]
    1936:	03 00 3a    	bra       NZ, 0x193e <.L8>
    1938:	83 08 42    	add.w     w4, w3, [w1]
    193a:	01 00 78    	mov.w     w1, w0
    193c:	07 00 37    	bra       0x194c <.L5>

0000193e <.L8>:
    193e:	02 00 e0    	cp0.w     w2
    1940:	03 00 32    	bra       Z, 0x1948 <.L9>
    1942:	83 01 40    	add.w     w0, w3, w3
    1944:	83 0f 51    	sub.w     w2, w3, [w15]
    1946:	0e 00 39    	bra       NC, 0x1964 <.L1>

00001948 <.L9>:
    1948:	12 00 98    	mov.w     w2, [w0+2]
    194a:	90 00 98    	mov.w     w0, [w1+2]

0000194c <.L5>:
    194c:	90 00 90    	mov.w     [w0+2], w1
    194e:	01 00 e0    	cp0.w     w1
    1950:	09 00 32    	bra       Z, 0x1964 <.L1>
    1952:	10 01 40    	add.w     w0, [w0], w2
    1954:	82 8f 50    	sub.w     w1, w2, [w15]
    1956:	06 00 3a    	bra       NZ, 0x1964 <.L1>
    1958:	02 d8 20    	mov.w     #0xd80, w2
    195a:	00 09 eb    	clr.w     [w2]
    195c:	10 01 78    	mov.w     [w0], w2
    195e:	11 08 41    	add.w     w2, [w1], [w0]
    1960:	91 00 90    	mov.w     [w1+2], w1
    1962:	11 00 98    	mov.w     w1, [w0+2]

00001964 <.L1>:
    1964:	00 00 06    	return    

00001966 <_findmem>:
    1966:	88 9f be    	mov.d     w8, [w15++]
    1968:	00 04 78    	mov.w     w0, w8

0000196a <.L14>:
    196a:	01 6c 80    	mov.w     0xd80, w1
    196c:	01 00 e0    	cp0.w     w1
    196e:	02 00 32    	bra       Z, 0x1974 <.L2>
    1970:	01 00 78    	mov.w     w1, w0
    1972:	0d 00 37    	bra       0x198e <.L3>

00001974 <.L2>:
    1974:	11 6c 80    	mov.w     0xd82, w1
    1976:	20 d8 20    	mov.w     #0xd82, w0
    1978:	04 00 37    	bra       0x1982 <.L4>

0000197a <.L6>:
    197a:	91 0f 54    	sub.w     w8, [w1], [w15]
    197c:	25 00 36    	bra       LEU, 0x19c8 <.L5>
    197e:	01 80 e8    	inc2.w    w1, w0
    1980:	91 00 90    	mov.w     [w1+2], w1

00001982 <.L4>:
    1982:	01 00 e0    	cp0.w     w1
    1984:	fa ff 3a    	bra       NZ, 0x197a <.L6>
    1986:	10 00 37    	bra       0x19a8 <.L7>

00001988 <.L8>:
    1988:	92 0f 54    	sub.w     w8, [w2], [w15]
    198a:	1e 00 36    	bra       LEU, 0x19c8 <.L5>
    198c:	02 80 e8    	inc2.w    w2, w0

0000198e <.L3>:
    198e:	10 01 78    	mov.w     [w0], w2
    1990:	02 00 e0    	cp0.w     w2
    1992:	fa ff 3a    	bra       NZ, 0x1988 <.L8>
    1994:	11 01 78    	mov.w     [w1], w2
    1996:	11 6c 80    	mov.w     0xd82, w1
    1998:	20 d8 20    	mov.w     #0xd82, w0
    199a:	04 00 37    	bra       0x19a4 <.L9>

0000199c <.L10>:
    199c:	91 0f 54    	sub.w     w8, [w1], [w15]
    199e:	14 00 36    	bra       LEU, 0x19c8 <.L5>
    19a0:	01 80 e8    	inc2.w    w1, w0
    19a2:	91 00 90    	mov.w     [w1+2], w1

000019a4 <.L9>:
    19a4:	82 8f 50    	sub.w     w1, w2, [w15]
    19a6:	fa ff 3a    	bra       NZ, 0x199c <.L10>

000019a8 <.L7>:
    19a8:	39 6c 80    	mov.w     0xd86, w9

000019aa <.L13>:
    19aa:	88 8f 54    	sub.w     w9, w8, [w15]
    19ac:	01 00 31    	bra       C, 0x19b0 <.L11>
    19ae:	88 04 78    	mov.w     w8, w9

000019b0 <.L11>:
    19b0:	09 00 78    	mov.w     w9, w0
    19b2:	36 00 07    	rcall     0x1a20 <__Getmem>
    19b4:	00 00 e0    	cp0.w     w0
    19b6:	04 00 3a    	bra       NZ, 0x19c0 <.L12>
    19b8:	88 8f 54    	sub.w     w9, w8, [w15]
    19ba:	05 00 32    	bra       Z, 0x19c6 <.L15>
    19bc:	89 04 d1    	lsr.w     w9, w9
    19be:	f5 ff 37    	bra       0x19aa <.L13>

000019c0 <.L12>:
    19c0:	09 18 78    	mov.w     w9, [w0++]
    19c2:	9f ff 07    	rcall     0x1902 <_free>
    19c4:	d2 ff 37    	bra       0x196a <.L14>

000019c6 <.L15>:
    19c6:	00 00 eb    	clr.w     w0

000019c8 <.L5>:
    19c8:	4f 04 be    	mov.d     [--w15], w8
    19ca:	00 00 06    	return    

000019cc <_malloc>:
    19cc:	88 1f 78    	mov.w     w8, [w15++]
    19ce:	63 04 40    	add.w     w0, #0x3, w8
    19d0:	08 00 a1    	bclr.w    w8, #0x0
    19d2:	80 00 eb    	clr.w     w1
    19d4:	80 0f 54    	sub.w     w8, w0, [w15]
    19d6:	21 00 36    	bra       LEU, 0x1a1a <.L17>
    19d8:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    19da:	01 00 3e    	bra       GTU, 0x19de <.L18>
    19dc:	48 00 20    	mov.w     #0x4, w8

000019de <.L18>:
    19de:	08 00 78    	mov.w     w8, w0
    19e0:	c2 ff 07    	rcall     0x1966 <_findmem>
    19e2:	80 00 eb    	clr.w     w1
    19e4:	00 00 e0    	cp0.w     w0
    19e6:	19 00 32    	bra       Z, 0x1a1a <.L17>
    19e8:	90 00 78    	mov.w     [w0], w1
    19ea:	91 01 78    	mov.w     [w1], w3
    19ec:	64 81 51    	sub.w     w3, #0x4, w2
    19ee:	88 0f 51    	sub.w     w2, w8, [w15]
    19f0:	03 00 31    	bra       C, 0x19f8 <.L19>
    19f2:	11 01 90    	mov.w     [w1+2], w2
    19f4:	02 08 78    	mov.w     w2, [w0]
    19f6:	07 00 37    	bra       0x1a06 <.L20>

000019f8 <.L19>:
    19f8:	08 81 40    	add.w     w1, w8, w2
    19fa:	02 08 78    	mov.w     w2, [w0]
    19fc:	91 01 90    	mov.w     [w1+2], w3
    19fe:	13 01 98    	mov.w     w3, [w2+2]
    1a00:	10 01 78    	mov.w     [w0], w2
    1a02:	11 09 14    	subr.w    w8, [w1], [w2]
    1a04:	88 08 78    	mov.w     w8, [w1]

00001a06 <.L20>:
    1a06:	10 01 78    	mov.w     [w0], w2
    1a08:	00 00 eb    	clr.w     w0
    1a0a:	02 00 e0    	cp0.w     w2
    1a0c:	04 00 32    	bra       Z, 0x1a16 <.L21>
    1a0e:	92 01 90    	mov.w     [w2+2], w3
    1a10:	03 00 e0    	cp0.w     w3
    1a12:	01 00 32    	bra       Z, 0x1a16 <.L21>
    1a14:	02 80 e8    	inc2.w    w2, w0

00001a16 <.L21>:
    1a16:	00 6c 88    	mov.w     w0, 0xd80
    1a18:	81 80 e8    	inc2.w    w1, w1

00001a1a <.L17>:
    1a1a:	01 00 78    	mov.w     w1, w0
    1a1c:	4f 04 78    	mov.w     [--w15], w8
    1a1e:	00 00 06    	return    

00001a20 <__Getmem>:
    1a20:	80 00 78    	mov.w     w0, w1
    1a22:	00 00 eb    	clr.w     w0
    1a24:	01 00 e0    	cp0.w     w1
    1a26:	05 00 34    	bra       LE, 0x1a32 <.L2>
    1a28:	01 00 78    	mov.w     w1, w0
    1a2a:	20 fc 07    	rcall     0x126c <_sbrk>
    1a2c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1a2e:	01 00 3a    	bra       NZ, 0x1a32 <.L2>
    1a30:	00 00 eb    	clr.w     w0

00001a32 <.L2>:
    1a32:	00 00 06    	return    

00001a34 <_doclose>:
    1a34:	00 c0 da    	.pword 0xdac000
    1a36:	00 00 06    	return    

00001a38 <_doremove>:
    1a38:	00 c0 da    	.pword 0xdac000
    1a3a:	00 00 06    	return    

00001a3c <___mulp32eds3>:
    1a3c:	02 0a b9    	mul.su    w1, w2, w4
    1a3e:	00 1b b9    	mul.su    w3, w0, w6
    1a40:	02 00 b8    	mul.uu    w0, w2, w0
    1a42:	81 00 42    	add.w     w4, w1, w1
    1a44:	81 00 43    	add.w     w6, w1, w1
    1a46:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	3e 4d 04    	goto      0x4d3e <__T1Interrupt>
    1026:	00 00 00 
    1028:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	6c 4d 04    	goto      0x4d6c <__T2Interrupt>
    1032:	00 00 00 
    1034:	9a 4d 04    	goto      0x4d9a <__T3Interrupt>
    1036:	00 00 00 
    1038:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	f6 4a 04    	goto      0x4af6 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	c8 4a 04    	goto      0x4ac8 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	c8 4d 04    	goto      0x4dc8 <__T4Interrupt>
    1072:	00 00 00 
    1074:	f6 4d 04    	goto      0x4df6 <__T5Interrupt>
    1076:	00 00 00 
    1078:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	52 4b 04    	goto      0x4b52 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	24 4b 04    	goto      0x4b24 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	ae 4b 04    	goto      0x4bae <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	80 4b 04    	goto      0x4b80 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	0a 4c 04    	goto      0x4c0a <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	dc 4b 04    	goto      0x4bdc <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	4a 4e 04    	goto      0x4e4a <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009a48 <.LC0>:
    9a48:	5f 5f       	.word 0x5f5f
    9a4a:	5f 5f       	.word 0x5f5f
    9a4c:	5f 5f       	.word 0x5f5f
    9a4e:	5f 5f       	.word 0x5f5f
    9a50:	5f 5f       	.word 0x5f5f
    9a52:	5f 5f       	.word 0x5f5f
    9a54:	0d 00       	.word 0xd

00009a56 <.LC1>:
    9a56:	53 70       	.word 0x7053
    9a58:	61 72       	.word 0x7261
    9a5a:	6b 20       	.word 0x206b
    9a5c:	53 63       	.word 0x6353
    9a5e:	72 61       	.word 0x6172
    9a60:	6d 62       	.word 0x626d
    9a62:	6c 65       	.word 0x656c
    9a64:	72 00       	.word 0x72
    9a66:	00 53       	.word 0x5300

00009a67 <.LC2>:
    9a67:	00 00       	.word 0
    9a69:	00 00       	.word 0
    9a6b:	00 00       	.word 0
    9a6d:	00 00       	.word 0
    9a6f:	00 00       	.word 0
    9a71:	00 00       	.word 0
    9a73:	00 00       	.word 0
    9a75:	00 00       	.word 0
	...

00009a78 <.LC3>:
    9a78:	50 68       	.word 0x6850
    9a7a:	6f 74       	.word 0x746f
    9a7c:	6f 20       	.word 0x206f
    9a7e:	53 70       	.word 0x7053
    9a80:	72 69       	.word 0x6972
    9a82:	6e 6b       	.word 0x6b6e
    9a84:	6c 65       	.word 0x656c
    9a86:	72 00       	.word 0x72
    9a88:	00 45       	.word 0x4500

00009a89 <.LC4>:
    9a89:	00 00       	.word 0
    9a8b:	00 00       	.word 0
    9a8d:	00 00       	.word 0
    9a8f:	00 00       	.word 0
    9a91:	00 00       	.word 0
    9a93:	00 00       	.word 0
    9a95:	00 00       	.word 0
    9a97:	00 00       	.word 0
	...

00009a9a <.LC5>:
    9a9a:	44 65       	.word 0x6544
    9a9c:	70 74       	.word 0x7470
    9a9e:	68 20       	.word 0x2068
    9aa0:	53 61       	.word 0x6153
    9aa2:	6e 69       	.word 0x696e
    9aa4:	74 69       	.word 0x6974
    9aa6:	7a 65       	.word 0x657a
    9aa8:	72 00       	.word 0x72
    9aaa:	00 49       	.word 0x4900

00009aab <.LC6>:
    9aab:	00 00       	.word 0
    9aad:	00 00       	.word 0
    9aaf:	00 00       	.word 0
    9ab1:	00 00       	.word 0
    9ab3:	00 00       	.word 0
	...

00009abc <.LC0>:
    9abc:	20 20       	.word 0x2020
    9abe:	20 20       	.word 0x2020
    9ac0:	20 20       	.word 0x2020
    9ac2:	20 20       	.word 0x2020
    9ac4:	20 20       	.word 0x2020
    9ac6:	20 20       	.word 0x2020
    9ac8:	20 20       	.word 0x2020
    9aca:	20 20       	.word 0x2020
	...

00009acd <.LC1>:
	...

00009ace <.LC2>:
    9ace:	20 20       	.word 0x2020
    9ad0:	20 20       	.word 0x2020
    9ad2:	20 20       	.word 0x2020
    9ad4:	20 20       	.word 0x2020
    9ad6:	20 20       	.word 0x2020
    9ad8:	20 20       	.word 0x2020
    9ada:	20 20       	.word 0x2020
    9adc:	20 20       	.word 0x2020
    9ade:	20 20       	.word 0x2020
    9ae0:	20 20       	.word 0x2020
    9ae2:	20 20       	.word 0x2020
    9ae4:	20 20       	.word 0x2020
    9ae6:	20 20       	.word 0x2020
    9ae8:	20 20       	.word 0x2020
    9aea:	20 20       	.word 0x2020
    9aec:	20 20       	.word 0x2020
    9aee:	00 50       	.word 0x5000

00009aef <.LC3>:
    9aef:	00 00       	.word 0
    9af1:	00 00       	.word 0
    9af3:	00 00       	.word 0

00009af5 <.LC4>:
    9af5:	00 00       	.word 0
    9af7:	00 00       	.word 0
	...

00009afa <.LC5>:
    9afa:	41 63       	.word 0x6341
    9afc:	74 69       	.word 0x6974
    9afe:	76 61       	.word 0x6176
    9b00:	74 65       	.word 0x6574
    9b02:	20 00       	.word 0x20

00009b04 <.LC6>:
    9b04:	44 65       	.word 0x6544
    9b06:	61 63       	.word 0x6361
    9b08:	74 69       	.word 0x6974
    9b0a:	76 61       	.word 0x6176
    9b0c:	74 65       	.word 0x6574
    9b0e:	20 00       	.word 0x20

00009b10 <.LC0>:
    9b10:	20 20       	.word 0x2020
    9b12:	20 20       	.word 0x2020
    9b14:	20 20       	.word 0x2020
    9b16:	20 20       	.word 0x2020
    9b18:	20 20       	.word 0x2020
    9b1a:	20 20       	.word 0x2020
    9b1c:	20 20       	.word 0x2020
    9b1e:	20 20       	.word 0x2020
    9b20:	20 20       	.word 0x2020
    9b22:	20 20       	.word 0x2020
    9b24:	20 20       	.word 0x2020
    9b26:	20 20       	.word 0x2020
    9b28:	20 20       	.word 0x2020
    9b2a:	20 20       	.word 0x2020
    9b2c:	20 20       	.word 0x2020
    9b2e:	20 20       	.word 0x2020
    9b30:	20 20       	.word 0x2020
    9b32:	20 20       	.word 0x2020
    9b34:	20 20       	.word 0x2020
    9b36:	20 20       	.word 0x2020
    9b38:	20 20       	.word 0x2020
    9b3a:	20 20       	.word 0x2020
    9b3c:	20 20       	.word 0x2020
    9b3e:	20 20       	.word 0x2020
    9b40:	20 20       	.word 0x2020
    9b42:	20 20       	.word 0x2020
    9b44:	20 20       	.word 0x2020
    9b46:	20 20       	.word 0x2020
    9b48:	00 20       	.word 0x2000

00009b49 <.LC1>:
    9b49:	00 00       	.word 0
    9b4b:	00 00       	.word 0
    9b4d:	00 00       	.word 0
    9b4f:	00 00       	.word 0
    9b51:	00 00       	.word 0
    9b53:	00 00       	.word 0
    9b55:	00 00       	.word 0
    9b57:	00 00       	.word 0
	...
Disassembly of section .text:

00001b5a <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1b5a:	04 00 fa    	lnk       #0x4
    1b5c:	00 0f 78    	mov.w     w0, [w14]
    1b5e:	21 47 98    	mov.b     w1, [w14+2]
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    1b60:	00 00 00    	nop       

00001b62 <.L2>:
    1b62:	1e 00 78    	mov.w     [w14], w0
    1b64:	10 00 90    	mov.w     [w0+2], w0
    1b66:	90 00 78    	mov.w     [w0], w1
    1b68:	00 20 20    	mov.w     #0x200, w0
    1b6a:	00 80 60    	and.w     w1, w0, w0
    1b6c:	00 00 e0    	cp0.w     w0
    1b6e:	f9 ff 3a    	bra       NZ, 0x1b62 <.L2>
    *(self->UxTXREG) = (uint16_t)ch;
    1b70:	1e 00 78    	mov.w     [w14], w0
    1b72:	20 00 90    	mov.w     [w0+4], w0
    1b74:	ae 40 90    	mov.b     [w14+2], w1
    1b76:	81 80 fb    	ze        w1, w1
    1b78:	01 08 78    	mov.w     w1, [w0]
}
    1b7a:	00 80 fa    	ulnk      
    1b7c:	00 00 06    	return    

00001b7e <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1b7e:	02 00 fa    	lnk       #0x2
    1b80:	00 0f 78    	mov.w     w0, [w14]
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    1b82:	00 00 00    	nop       

00001b84 <.L4>:
    1b84:	1e 00 78    	mov.w     [w14], w0
    1b86:	10 00 90    	mov.w     [w0+2], w0
    1b88:	10 00 78    	mov.w     [w0], w0
    1b8a:	61 00 60    	and.w     w0, #0x1, w0
    1b8c:	00 00 e0    	cp0.w     w0
    1b8e:	fa ff 32    	bra       Z, 0x1b84 <.L4>
    return (uint8_t)(*(self->UxRXREG));
    1b90:	1e 00 78    	mov.w     [w14], w0
    1b92:	30 00 90    	mov.w     [w0+6], w0
    1b94:	10 00 78    	mov.w     [w0], w0
    1b96:	00 40 78    	mov.b     w0, w0
}
    1b98:	00 80 fa    	ulnk      
    1b9a:	00 00 06    	return    

00001b9c <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1b9c:	04 00 fa    	lnk       #0x4
    1b9e:	00 0f 78    	mov.w     w0, [w14]
    1ba0:	21 47 98    	mov.b     w1, [w14+2]
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    1ba2:	00 00 00    	nop       

00001ba4 <.L6>:
    1ba4:	1e 00 78    	mov.w     [w14], w0
    1ba6:	d0 10 90    	mov.w     [w0+42], w1
    1ba8:	1e 00 78    	mov.w     [w14], w0
    1baa:	20 10 90    	mov.w     [w0+36], w0
    1bac:	80 8f 50    	sub.w     w1, w0, [w15]
    1bae:	fa ff 32    	bra       Z, 0x1ba4 <.L6>
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    1bb0:	1e 00 78    	mov.w     [w14], w0
    1bb2:	90 10 90    	mov.w     [w0+34], w1
    1bb4:	1e 00 78    	mov.w     [w14], w0
    1bb6:	40 10 90    	mov.w     [w0+40], w0
    1bb8:	00 80 40    	add.w     w1, w0, w0
    1bba:	ae 40 90    	mov.b     [w14+2], w1
    1bbc:	01 48 78    	mov.b     w1, [w0]
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    1bbe:	1e 00 78    	mov.w     [w14], w0
    1bc0:	40 10 90    	mov.w     [w0+40], w0
    1bc2:	80 00 e8    	inc.w     w0, w1
    1bc4:	1e 00 78    	mov.w     [w14], w0
    1bc6:	20 10 90    	mov.w     [w0+36], w0
    1bc8:	00 01 78    	mov.w     w0, w2
    1bca:	11 00 09    	repeat    #0x11
    1bcc:	82 80 d8    	div.uw    w1, w2
    1bce:	80 00 fd    	exch      w0, w1
    1bd0:	80 00 78    	mov.w     w0, w1
    1bd2:	1e 00 78    	mov.w     [w14], w0
    1bd4:	41 10 98    	mov.w     w1, [w0+40]
    self->TXbuffer.count++;
    1bd6:	1e 00 78    	mov.w     [w14], w0
    1bd8:	50 10 90    	mov.w     [w0+42], w0
    1bda:	80 00 e8    	inc.w     w0, w1
    1bdc:	1e 00 78    	mov.w     [w14], w0
    1bde:	51 10 98    	mov.w     w1, [w0+42]
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    1be0:	1e 00 78    	mov.w     [w14], w0
    1be2:	d0 10 90    	mov.w     [w0+42], w1
    1be4:	1e 00 78    	mov.w     [w14], w0
    1be6:	30 18 90    	mov.w     [w0+54], w0
    1be8:	80 8f 50    	sub.w     w1, w0, [w15]
    1bea:	07 00 39    	bra       NC, 0x1bfa <.L5>
        bitset(self->UxSTA, 10);                    // enough, enable data
    1bec:	1e 00 78    	mov.w     [w14], w0
    1bee:	10 00 90    	mov.w     [w0+2], w0
    1bf0:	9e 00 78    	mov.w     [w14], w1
    1bf2:	91 00 90    	mov.w     [w1+2], w1
    1bf4:	91 00 78    	mov.w     [w1], w1
    1bf6:	01 a0 a0    	bset.w    w1, #0xa
    1bf8:	01 08 78    	mov.w     w1, [w0]

00001bfa <.L5>:
                                                    // transmission
}
    1bfa:	00 80 fa    	ulnk      
    1bfc:	00 00 06    	return    

00001bfe <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    1bfe:	04 00 fa    	lnk       #0x4
    1c00:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1c02:	1e 00 90    	mov.w     [w14+2], w0
    1c04:	50 00 90    	mov.w     [w0+10], w0
    1c06:	9e 00 90    	mov.w     [w14+2], w1
    1c08:	d1 00 90    	mov.w     [w1+10], w1
    1c0a:	11 01 78    	mov.w     [w1], w2
    1c0c:	9e 00 90    	mov.w     [w14+2], w1
    1c0e:	e1 48 90    	mov.b     [w1+14], w1
    1c10:	81 80 fb    	ze        w1, w1
    1c12:	13 00 20    	mov.w     #0x1, w3
    1c14:	81 18 dd    	sl.w      w3, w1, w1
    1c16:	81 80 ea    	com.w     w1, w1
    1c18:	81 00 61    	and.w     w2, w1, w1
    1c1a:	01 08 78    	mov.w     w1, [w0]
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    1c1c:	1e 00 90    	mov.w     [w14+2], w0
    1c1e:	50 10 90    	mov.w     [w0+42], w0
    1c20:	00 00 e0    	cp0.w     w0
    1c22:	25 00 3a    	bra       NZ, 0x1c6e <.L13>
        bitclear(self->UxSTA, 10);      // disable data transmission
    1c24:	1e 00 90    	mov.w     [w14+2], w0
    1c26:	10 00 90    	mov.w     [w0+2], w0
    1c28:	9e 00 90    	mov.w     [w14+2], w1
    1c2a:	91 00 90    	mov.w     [w1+2], w1
    1c2c:	11 01 78    	mov.w     [w1], w2
    1c2e:	f1 bf 2f    	mov.w     #0xfbff, w1
    1c30:	81 00 61    	and.w     w2, w1, w1
    1c32:	01 08 78    	mov.w     w1, [w0]
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    1c34:	1d 00 37    	bra       0x1c70 <.L10>

00001c36 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1c36:	1e 00 90    	mov.w     [w14+2], w0
    1c38:	90 10 90    	mov.w     [w0+34], w1
    1c3a:	1e 00 90    	mov.w     [w14+2], w0
    1c3c:	30 10 90    	mov.w     [w0+38], w0
    1c3e:	00 80 40    	add.w     w1, w0, w0
    1c40:	10 4f 78    	mov.b     [w0], [w14]
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    1c42:	1e 00 90    	mov.w     [w14+2], w0
    1c44:	30 10 90    	mov.w     [w0+38], w0
    1c46:	80 00 e8    	inc.w     w0, w1
    1c48:	1e 00 90    	mov.w     [w14+2], w0
    1c4a:	20 10 90    	mov.w     [w0+36], w0
    1c4c:	00 01 78    	mov.w     w0, w2
    1c4e:	11 00 09    	repeat    #0x11
    1c50:	82 80 d8    	div.uw    w1, w2
    1c52:	80 00 fd    	exch      w0, w1
    1c54:	80 00 78    	mov.w     w0, w1
    1c56:	1e 00 90    	mov.w     [w14+2], w0
    1c58:	31 10 98    	mov.w     w1, [w0+38]
        self->TXbuffer.count--;
    1c5a:	1e 00 90    	mov.w     [w14+2], w0
    1c5c:	50 10 90    	mov.w     [w0+42], w0
    1c5e:	80 00 e9    	dec.w     w0, w1
    1c60:	1e 00 90    	mov.w     [w14+2], w0
    1c62:	51 10 98    	mov.w     w1, [w0+42]
        *(self->UxTXREG) = (uint16_t)ch;
    1c64:	1e 00 90    	mov.w     [w14+2], w0
    1c66:	20 00 90    	mov.w     [w0+4], w0
    1c68:	9e 80 fb    	ze        [w14], w1
    1c6a:	01 08 78    	mov.w     w1, [w0]
    1c6c:	01 00 37    	bra       0x1c70 <.L10>

00001c6e <.L13>:
    1c6e:	00 00 00    	nop       

00001c70 <.L10>:
    1c70:	1e 00 90    	mov.w     [w14+2], w0
    1c72:	10 00 90    	mov.w     [w0+2], w0
    1c74:	90 00 78    	mov.w     [w0], w1
    1c76:	00 20 20    	mov.w     #0x200, w0
    1c78:	00 80 60    	and.w     w1, w0, w0
    1c7a:	00 00 e0    	cp0.w     w0
    1c7c:	04 00 3a    	bra       NZ, 0x1c86 <.L8>
    1c7e:	1e 00 90    	mov.w     [w14+2], w0
    1c80:	50 10 90    	mov.w     [w0+42], w0
    1c82:	00 00 e0    	cp0.w     w0
    1c84:	d8 ff 3a    	bra       NZ, 0x1c36 <.L12>

00001c86 <.L8>:
    }
}
    1c86:	00 80 fa    	ulnk      
    1c88:	00 00 06    	return    

00001c8a <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1c8a:	04 00 fa    	lnk       #0x4
    1c8c:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1c8e:	00 00 00    	nop       

00001c90 <.L15>:
    1c90:	1e 00 90    	mov.w     [w14+2], w0
    1c92:	20 18 90    	mov.w     [w0+52], w0
    1c94:	00 00 e0    	cp0.w     w0
    1c96:	fc ff 32    	bra       Z, 0x1c90 <.L15>
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1c98:	1e 00 90    	mov.w     [w14+2], w0
    1c9a:	e0 10 90    	mov.w     [w0+44], w1
    1c9c:	1e 00 90    	mov.w     [w14+2], w0
    1c9e:	00 18 90    	mov.w     [w0+48], w0
    1ca0:	00 80 40    	add.w     w1, w0, w0
    1ca2:	10 4f 78    	mov.b     [w0], [w14]
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    1ca4:	1e 00 90    	mov.w     [w14+2], w0
    1ca6:	00 18 90    	mov.w     [w0+48], w0
    1ca8:	80 00 e8    	inc.w     w0, w1
    1caa:	1e 00 90    	mov.w     [w14+2], w0
    1cac:	70 10 90    	mov.w     [w0+46], w0
    1cae:	00 01 78    	mov.w     w0, w2
    1cb0:	11 00 09    	repeat    #0x11
    1cb2:	82 80 d8    	div.uw    w1, w2
    1cb4:	80 00 fd    	exch      w0, w1
    1cb6:	80 00 78    	mov.w     w0, w1
    1cb8:	1e 00 90    	mov.w     [w14+2], w0
    1cba:	01 18 98    	mov.w     w1, [w0+48]
    self->RXbuffer.count--;
    1cbc:	1e 00 90    	mov.w     [w14+2], w0
    1cbe:	20 18 90    	mov.w     [w0+52], w0
    1cc0:	80 00 e9    	dec.w     w0, w1
    1cc2:	1e 00 90    	mov.w     [w14+2], w0
    1cc4:	21 18 98    	mov.w     w1, [w0+52]
    return ch;
    1cc6:	1e 40 78    	mov.b     [w14], w0
}
    1cc8:	00 80 fa    	ulnk      
    1cca:	00 00 06    	return    

00001ccc <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    1ccc:	02 00 fa    	lnk       #0x2
    1cce:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1cd0:	1e 00 78    	mov.w     [w14], w0
    1cd2:	50 00 90    	mov.w     [w0+10], w0
    1cd4:	9e 00 78    	mov.w     [w14], w1
    1cd6:	d1 00 90    	mov.w     [w1+10], w1
    1cd8:	11 01 78    	mov.w     [w1], w2
    1cda:	9e 00 78    	mov.w     [w14], w1
    1cdc:	f1 48 90    	mov.b     [w1+15], w1
    1cde:	81 80 fb    	ze        w1, w1
    1ce0:	13 00 20    	mov.w     #0x1, w3
    1ce2:	81 18 dd    	sl.w      w3, w1, w1
    1ce4:	81 80 ea    	com.w     w1, w1
    1ce6:	81 00 61    	and.w     w2, w1, w1
    1ce8:	01 08 78    	mov.w     w1, [w0]
    while ((bitread(self->UxSTA, 0)==1) && 
    1cea:	1b 00 37    	bra       0x1d22 <.L17>

00001cec <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    1cec:	1e 00 78    	mov.w     [w14], w0
    1cee:	e0 10 90    	mov.w     [w0+44], w1
    1cf0:	1e 00 78    	mov.w     [w14], w0
    1cf2:	10 18 90    	mov.w     [w0+50], w0
    1cf4:	00 80 40    	add.w     w1, w0, w0
    1cf6:	9e 00 78    	mov.w     [w14], w1
    1cf8:	b1 00 90    	mov.w     [w1+6], w1
    1cfa:	91 00 78    	mov.w     [w1], w1
    1cfc:	81 40 78    	mov.b     w1, w1
    1cfe:	01 48 78    	mov.b     w1, [w0]
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    1d00:	1e 00 78    	mov.w     [w14], w0
    1d02:	10 18 90    	mov.w     [w0+50], w0
    1d04:	80 00 e8    	inc.w     w0, w1
    1d06:	1e 00 78    	mov.w     [w14], w0
    1d08:	70 10 90    	mov.w     [w0+46], w0
    1d0a:	00 01 78    	mov.w     w0, w2
    1d0c:	11 00 09    	repeat    #0x11
    1d0e:	82 80 d8    	div.uw    w1, w2
    1d10:	80 00 fd    	exch      w0, w1
    1d12:	80 00 78    	mov.w     w0, w1
    1d14:	1e 00 78    	mov.w     [w14], w0
    1d16:	11 18 98    	mov.w     w1, [w0+50]
        self->RXbuffer.count++;
    1d18:	1e 00 78    	mov.w     [w14], w0
    1d1a:	20 18 90    	mov.w     [w0+52], w0
    1d1c:	80 00 e8    	inc.w     w0, w1
    1d1e:	1e 00 78    	mov.w     [w14], w0
    1d20:	21 18 98    	mov.w     w1, [w0+52]

00001d22 <.L17>:
    1d22:	1e 00 78    	mov.w     [w14], w0
    1d24:	10 00 90    	mov.w     [w0+2], w0
    1d26:	10 00 78    	mov.w     [w0], w0
    1d28:	61 00 60    	and.w     w0, #0x1, w0
    1d2a:	00 40 78    	mov.b     w0, w0
    1d2c:	00 04 e0    	cp0.b     w0
    1d2e:	06 00 32    	bra       Z, 0x1d3c <.L16>
    1d30:	1e 00 78    	mov.w     [w14], w0
    1d32:	a0 18 90    	mov.w     [w0+52], w1
    1d34:	1e 00 78    	mov.w     [w14], w0
    1d36:	70 10 90    	mov.w     [w0+46], w0
    1d38:	80 8f 50    	sub.w     w1, w0, [w15]
    1d3a:	d8 ff 3a    	bra       NZ, 0x1cec <.L19>

00001d3c <.L16>:
    }
}
    1d3c:	00 80 fa    	ulnk      
    1d3e:	00 00 06    	return    

00001d40 <_write>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    __serviceTxInterrupt(&uart1);
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    __serviceRxInterrupt(&uart1);
}

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    __serviceTxInterrupt(&uart2);
}

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    __serviceRxInterrupt(&uart2);
}

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    __serviceTxInterrupt(&uart3);
}

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    __serviceRxInterrupt(&uart3);
}

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    __serviceTxInterrupt(&uart4);
}

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    __serviceRxInterrupt(&uart4);
}

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    1d40:	08 00 fa    	lnk       #0x8
    1d42:	10 07 98    	mov.w     w0, [w14+2]
    1d44:	21 07 98    	mov.w     w1, [w14+4]
    1d46:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    1d48:	1e 00 90    	mov.w     [w14+2], w0
    1d4a:	00 00 e0    	cp0.w     w0
    1d4c:	25 00 35    	bra       LT, 0x1d98 <.L37>
    1d4e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1d50:	03 00 34    	bra       LE, 0x1d58 <.L30>
    1d52:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1d54:	11 00 32    	bra       Z, 0x1d78 <.L31>
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    1d56:	21 00 37    	bra       0x1d9a <.L34>

00001d58 <.L30>:
    1d58:	00 00 eb    	clr.w     w0
    1d5a:	00 0f 78    	mov.w     w0, [w14]
    1d5c:	08 00 37    	bra       0x1d6e <.L32>

00001d5e <.L33>:
    1d5e:	2e 00 90    	mov.w     [w14+4], w0
    1d60:	90 40 78    	mov.b     [w0], w1
    1d62:	2e 00 90    	mov.w     [w14+4], w0
    1d64:	00 00 e8    	inc.w     w0, w0
    1d66:	20 07 98    	mov.w     w0, [w14+4]
    1d68:	80 41 80    	mov.w     0x830, w0
    1d6a:	48 04 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    1d6c:	1e 0f e8    	inc.w     [w14], [w14]

00001d6e <.L32>:
    1d6e:	9e 00 78    	mov.w     [w14], w1
    1d70:	3e 00 90    	mov.w     [w14+6], w0
    1d72:	80 8f 50    	sub.w     w1, w0, [w15]
    1d74:	f4 ff 39    	bra       NC, 0x1d5e <.L33>
    1d76:	11 00 37    	bra       0x1d9a <.L34>

00001d78 <.L31>:
    1d78:	00 00 eb    	clr.w     w0
    1d7a:	00 0f 78    	mov.w     w0, [w14]
    1d7c:	08 00 37    	bra       0x1d8e <.L35>

00001d7e <.L36>:
    1d7e:	2e 00 90    	mov.w     [w14+4], w0
    1d80:	90 40 78    	mov.b     [w0], w1
    1d82:	2e 00 90    	mov.w     [w14+4], w0
    1d84:	00 00 e8    	inc.w     w0, w0
    1d86:	20 07 98    	mov.w     w0, [w14+4]
    1d88:	90 41 80    	mov.w     0x832, w0
    1d8a:	38 04 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    1d8c:	1e 0f e8    	inc.w     [w14], [w14]

00001d8e <.L35>:
    1d8e:	9e 00 78    	mov.w     [w14], w1
    1d90:	3e 00 90    	mov.w     [w14+6], w0
    1d92:	80 8f 50    	sub.w     w1, w0, [w15]
    1d94:	f4 ff 39    	bra       NC, 0x1d7e <.L36>
    1d96:	01 00 37    	bra       0x1d9a <.L34>

00001d98 <.L37>:
    1d98:	00 00 00    	nop       

00001d9a <.L34>:
    }
    return len;
    1d9a:	3e 00 90    	mov.w     [w14+6], w0
}
    1d9c:	00 80 fa    	ulnk      
    1d9e:	00 00 06    	return    

00001da0 <_init_uart>:

void init_uart(void) {
    1da0:	00 00 fa    	lnk       #0x0
    init_pin();
    1da2:	b8 0b 07    	rcall     0x3514 <_init_pin> <.LFB3> <.LFE2>

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    1da4:	40 6d 20    	mov.w     #0x6d4, w0
    1da6:	80 1f 78    	mov.w     w0, [w15++]
    1da8:	57 01 20    	mov.w     #0x15, w7
    1daa:	86 c0 b3    	mov.b     #0x8, w6
    1dac:	80 82 eb    	setm.w    w5
    1dae:	64 c0 b3    	mov.b     #0x6, w4
    1db0:	80 01 eb    	clr.w     w3
    1db2:	02 2f 20    	mov.w     #0x2f0, w2
    1db4:	21 2f 20    	mov.w     #0x2f2, w1
    1db6:	00 ae 20    	mov.w     #0xae0, w0
    1db8:	c1 0c 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    1dba:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    1dbc:	a0 6d 20    	mov.w     #0x6da, w0
    1dbe:	80 1f 78    	mov.w     w0, [w15++]
    1dc0:	a7 01 20    	mov.w     #0x1a, w7
    1dc2:	00 43 eb    	clr.b     w6
    1dc4:	80 82 eb    	setm.w    w5
    1dc6:	74 c0 b3    	mov.b     #0x7, w4
    1dc8:	80 01 eb    	clr.w     w3
    1dca:	02 2f 20    	mov.w     #0x2f0, w2
    1dcc:	21 2f 20    	mov.w     #0x2f2, w1
    1dce:	60 af 20    	mov.w     #0xaf6, w0
    1dd0:	b5 0c 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    1dd2:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    1dd4:	40 00 20    	mov.w     #0x4, w0
    1dd6:	80 1f 78    	mov.w     w0, [w15++]
    1dd8:	30 00 20    	mov.w     #0x3, w0
    1dda:	80 1f 78    	mov.w     w0, [w15++]
    1ddc:	80 c0 b3    	mov.b     #0x8, w0
    1dde:	80 1f 78    	mov.w     w0, [w15++]
    1de0:	00 40 eb    	clr.b     w0
    1de2:	80 1f 78    	mov.w     w0, [w15++]
    1de4:	40 6a 20    	mov.w     #0x6a4, w0
    1de6:	80 1f 78    	mov.w     w0, [w15++]
    1de8:	40 6a 20    	mov.w     #0x6a4, w0
    1dea:	80 1f 78    	mov.w     w0, [w15++]
    1dec:	b0 c0 b3    	mov.b     #0xb, w0
    1dee:	80 1f 78    	mov.w     w0, [w15++]
    1df0:	c0 c0 b3    	mov.b     #0xc, w0
    1df2:	80 1f 78    	mov.w     w0, [w15++]
    1df4:	47 09 20    	mov.w     #0x94, w7
    1df6:	46 08 20    	mov.w     #0x84, w6
    1df8:	85 22 20    	mov.w     #0x228, w5
    1dfa:	64 22 20    	mov.w     #0x226, w4
    1dfc:	43 22 20    	mov.w     #0x224, w3
    1dfe:	22 22 20    	mov.w     #0x222, w2
    1e00:	01 22 20    	mov.w     #0x220, w1
    1e02:	00 9f 20    	mov.w     #0x9f0, w0
    1e04:	6b 00 07    	rcall     0x1edc <_uart_init> <.LFB16> <.LFE15>
    1e06:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    1e08:	60 00 20    	mov.w     #0x6, w0
    1e0a:	80 1f 78    	mov.w     w0, [w15++]
    1e0c:	50 00 20    	mov.w     #0x5, w0
    1e0e:	80 1f 78    	mov.w     w0, [w15++]
    1e10:	80 c0 b3    	mov.b     #0x8, w0
    1e12:	80 1f 78    	mov.w     w0, [w15++]
    1e14:	00 40 eb    	clr.b     w0
    1e16:	80 1f 78    	mov.w     w0, [w15++]
    1e18:	60 6a 20    	mov.w     #0x6a6, w0
    1e1a:	80 1f 78    	mov.w     w0, [w15++]
    1e1c:	60 6a 20    	mov.w     #0x6a6, w0
    1e1e:	80 1f 78    	mov.w     w0, [w15++]
    1e20:	e0 c0 b3    	mov.b     #0xe, w0
    1e22:	80 1f 78    	mov.w     w0, [w15++]
    1e24:	f0 c0 b3    	mov.b     #0xf, w0
    1e26:	80 1f 78    	mov.w     w0, [w15++]
    1e28:	67 09 20    	mov.w     #0x96, w7
    1e2a:	66 08 20    	mov.w     #0x86, w6
    1e2c:	85 23 20    	mov.w     #0x238, w5
    1e2e:	64 23 20    	mov.w     #0x236, w4
    1e30:	43 23 20    	mov.w     #0x234, w3
    1e32:	22 23 20    	mov.w     #0x232, w2
    1e34:	01 23 20    	mov.w     #0x230, w1
    1e36:	c0 a2 20    	mov.w     #0xa2c, w0
    1e38:	51 00 07    	rcall     0x1edc <_uart_init> <.LFB16> <.LFE15>
    1e3a:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    1e3c:	d0 01 20    	mov.w     #0x1d, w0
    1e3e:	80 1f 78    	mov.w     w0, [w15++]
    1e40:	c0 01 20    	mov.w     #0x1c, w0
    1e42:	80 1f 78    	mov.w     w0, [w15++]
    1e44:	80 c0 b3    	mov.b     #0x8, w0
    1e46:	80 1f 78    	mov.w     w0, [w15++]
    1e48:	80 c0 b3    	mov.b     #0x8, w0
    1e4a:	80 1f 78    	mov.w     w0, [w15++]
    1e4c:	a0 6a 20    	mov.w     #0x6aa, w0
    1e4e:	80 1f 78    	mov.w     w0, [w15++]
    1e50:	20 6a 20    	mov.w     #0x6a2, w0
    1e52:	80 1f 78    	mov.w     w0, [w15++]
    1e54:	20 c0 b3    	mov.b     #0x2, w0
    1e56:	80 1f 78    	mov.w     w0, [w15++]
    1e58:	30 c0 b3    	mov.b     #0x3, w0
    1e5a:	80 1f 78    	mov.w     w0, [w15++]
    1e5c:	e7 09 20    	mov.w     #0x9e, w7
    1e5e:	e6 08 20    	mov.w     #0x8e, w6
    1e60:	85 25 20    	mov.w     #0x258, w5
    1e62:	64 25 20    	mov.w     #0x256, w4
    1e64:	43 25 20    	mov.w     #0x254, w3
    1e66:	22 25 20    	mov.w     #0x252, w2
    1e68:	01 25 20    	mov.w     #0x250, w1
    1e6a:	80 a6 20    	mov.w     #0xa68, w0
    1e6c:	37 00 07    	rcall     0x1edc <_uart_init> <.LFB16> <.LFE15>
    1e6e:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    1e70:	f0 01 20    	mov.w     #0x1f, w0
    1e72:	80 1f 78    	mov.w     w0, [w15++]
    1e74:	e0 01 20    	mov.w     #0x1e, w0
    1e76:	80 1f 78    	mov.w     w0, [w15++]
    1e78:	80 c0 b3    	mov.b     #0x8, w0
    1e7a:	80 1f 78    	mov.w     w0, [w15++]
    1e7c:	00 40 eb    	clr.b     w0
    1e7e:	80 1f 78    	mov.w     w0, [w15++]
    1e80:	60 6b 20    	mov.w     #0x6b6, w0
    1e82:	80 1f 78    	mov.w     w0, [w15++]
    1e84:	60 6b 20    	mov.w     #0x6b6, w0
    1e86:	80 1f 78    	mov.w     w0, [w15++]
    1e88:	80 c0 b3    	mov.b     #0x8, w0
    1e8a:	80 1f 78    	mov.w     w0, [w15++]
    1e8c:	90 c0 b3    	mov.b     #0x9, w0
    1e8e:	80 1f 78    	mov.w     w0, [w15++]
    1e90:	e7 09 20    	mov.w     #0x9e, w7
    1e92:	e6 08 20    	mov.w     #0x8e, w6
    1e94:	85 2b 20    	mov.w     #0x2b8, w5
    1e96:	64 2b 20    	mov.w     #0x2b6, w4
    1e98:	43 2b 20    	mov.w     #0x2b4, w3
    1e9a:	22 2b 20    	mov.w     #0x2b2, w2
    1e9c:	01 2b 20    	mov.w     #0x2b0, w1
    1e9e:	40 aa 20    	mov.w     #0xaa4, w0
    1ea0:	1d 00 07    	rcall     0x1edc <_uart_init> <.LFB16> <.LFE15>
    1ea2:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    1ea4:	00 00 eb    	clr.w     w0
    1ea6:	80 1f 78    	mov.w     w0, [w15++]
    1ea8:	00 00 eb    	clr.w     w0
    1eaa:	80 1f 78    	mov.w     w0, [w15++]
    1eac:	00 00 eb    	clr.w     w0
    1eae:	80 1f 78    	mov.w     w0, [w15++]
    1eb0:	00 00 eb    	clr.w     w0
    1eb2:	80 1f 78    	mov.w     w0, [w15++]
    1eb4:	00 00 eb    	clr.w     w0
    1eb6:	80 1f 78    	mov.w     w0, [w15++]
    1eb8:	10 00 20    	mov.w     #0x1, w0
    1eba:	80 1f 78    	mov.w     w0, [w15++]
    1ebc:	e5 c4 b3    	mov.b     #0x4e, w5
    1ebe:	06 00 20    	mov.w     #0x0, w6
    1ec0:	67 69 24    	mov.w     #0x4696, w7
    1ec2:	00 02 eb    	clr.w     w4
    1ec4:	80 01 eb    	clr.w     w3
    1ec6:	62 af 20    	mov.w     #0xaf6, w2
    1ec8:	01 ae 20    	mov.w     #0xae0, w1
    1eca:	00 9f 20    	mov.w     #0x9f0, w0
    1ecc:	72 00 07    	rcall     0x1fb2 <_uart_open> <.LFB17> <.LFE16>
    1ece:	ec 87 57    	sub.w     w15, #0xc, w15
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1ed0:	00 9f 20    	mov.w     #0x9f0, w0
    1ed2:	80 41 88    	mov.w     w0, 0x830
    _stderr = &uart1;
    1ed4:	00 9f 20    	mov.w     #0x9f0, w0
    1ed6:	90 41 88    	mov.w     w0, 0x832
}
    1ed8:	00 80 fa    	ulnk      
    1eda:	00 00 06    	return    

00001edc <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1edc:	10 00 fa    	lnk       #0x10
    1ede:	00 0f 78    	mov.w     w0, [w14]
    1ee0:	11 07 98    	mov.w     w1, [w14+2]
    1ee2:	22 07 98    	mov.w     w2, [w14+4]
    1ee4:	33 07 98    	mov.w     w3, [w14+6]
    1ee6:	44 07 98    	mov.w     w4, [w14+8]
    1ee8:	55 07 98    	mov.w     w5, [w14+10]
    1eea:	66 07 98    	mov.w     w6, [w14+12]
    1eec:	77 07 98    	mov.w     w7, [w14+14]
    self->UxMODE = UxMODE;
    1eee:	1e 00 78    	mov.w     [w14], w0
    1ef0:	9e 00 90    	mov.w     [w14+2], w1
    1ef2:	01 08 78    	mov.w     w1, [w0]
    self->UxSTA = UxSTA;
    1ef4:	1e 00 78    	mov.w     [w14], w0
    1ef6:	ae 00 90    	mov.w     [w14+4], w1
    1ef8:	11 00 98    	mov.w     w1, [w0+2]
    self->UxTXREG = UxTXREG;
    1efa:	1e 00 78    	mov.w     [w14], w0
    1efc:	be 00 90    	mov.w     [w14+6], w1
    1efe:	21 00 98    	mov.w     w1, [w0+4]
    self->UxRXREG = UxRXREG;
    1f00:	1e 00 78    	mov.w     [w14], w0
    1f02:	ce 00 90    	mov.w     [w14+8], w1
    1f04:	31 00 98    	mov.w     w1, [w0+6]
    self->UxBRG = UxBRG;
    1f06:	1e 00 78    	mov.w     [w14], w0
    1f08:	de 00 90    	mov.w     [w14+10], w1
    1f0a:	41 00 98    	mov.w     w1, [w0+8]
    self->IFSy = IFSy;
    1f0c:	1e 00 78    	mov.w     [w14], w0
    1f0e:	ee 00 90    	mov.w     [w14+12], w1
    1f10:	51 00 98    	mov.w     w1, [w0+10]
    self->IECy = IECy;
    1f12:	1e 00 78    	mov.w     [w14], w0
    1f14:	fe 00 90    	mov.w     [w14+14], w1
    1f16:	61 00 98    	mov.w     w1, [w0+12]
    self->UxTXIF = UxTXIF;
    1f18:	1e 00 78    	mov.w     [w14], w0
    1f1a:	8e f8 97    	mov.b     [w14-8], w1
    1f1c:	61 48 98    	mov.b     w1, [w0+14]
    self->UxRXIF = UxRXIF;
    1f1e:	1e 00 78    	mov.w     [w14], w0
    1f20:	ee f0 97    	mov.b     [w14-10], w1
    1f22:	71 48 98    	mov.b     w1, [w0+15]
    self->RXrpinr = RXrpinr;
    1f24:	1e 00 78    	mov.w     [w14], w0
    1f26:	ae b8 97    	mov.w     [w14-12], w1
    1f28:	01 08 98    	mov.w     w1, [w0+16]
    self->CTSrpinr = CTSrpinr;
    1f2a:	1e 00 78    	mov.w     [w14], w0
    1f2c:	9e b8 97    	mov.w     [w14-14], w1
    1f2e:	11 08 98    	mov.w     w1, [w0+18]
    self->RXrpshift = RXrpshift;
    1f30:	1e 00 78    	mov.w     [w14], w0
    1f32:	8e f0 97    	mov.b     [w14-16], w1
    1f34:	41 50 98    	mov.b     w1, [w0+20]
    self->CTSrpshift = CTSrpshift;
    1f36:	1e 00 78    	mov.w     [w14], w0
    1f38:	ee e8 97    	mov.b     [w14-18], w1
    1f3a:	51 50 98    	mov.b     w1, [w0+21]
    self->TXrpnum = TXrpnum;
    1f3c:	1e 00 78    	mov.w     [w14], w0
    1f3e:	ee b0 97    	mov.w     [w14-20], w1
    1f40:	31 08 98    	mov.w     w1, [w0+22]
    self->RTSrpnum = RTSrpnum;
    1f42:	1e 00 78    	mov.w     [w14], w0
    1f44:	de b0 97    	mov.w     [w14-22], w1
    1f46:	41 08 98    	mov.w     w1, [w0+24]
    self->TX = NULL;
    1f48:	1e 00 78    	mov.w     [w14], w0
    1f4a:	80 00 eb    	clr.w     w1
    1f4c:	51 08 98    	mov.w     w1, [w0+26]
    self->RX = NULL;
    1f4e:	1e 00 78    	mov.w     [w14], w0
    1f50:	80 00 eb    	clr.w     w1
    1f52:	61 08 98    	mov.w     w1, [w0+28]
    self->RTS = NULL;
    1f54:	1e 00 78    	mov.w     [w14], w0
    1f56:	80 00 eb    	clr.w     w1
    1f58:	71 08 98    	mov.w     w1, [w0+30]
    self->CTS = NULL;
    1f5a:	1e 00 78    	mov.w     [w14], w0
    1f5c:	80 00 eb    	clr.w     w1
    1f5e:	01 10 98    	mov.w     w1, [w0+32]
    self->TXbuffer.data = NULL;
    1f60:	1e 00 78    	mov.w     [w14], w0
    1f62:	80 00 eb    	clr.w     w1
    1f64:	11 10 98    	mov.w     w1, [w0+34]
    self->TXbuffer.length = 0;
    1f66:	1e 00 78    	mov.w     [w14], w0
    1f68:	80 00 eb    	clr.w     w1
    1f6a:	21 10 98    	mov.w     w1, [w0+36]
    self->TXbuffer.head = 0;
    1f6c:	1e 00 78    	mov.w     [w14], w0
    1f6e:	80 00 eb    	clr.w     w1
    1f70:	31 10 98    	mov.w     w1, [w0+38]
    self->TXbuffer.tail = 0;
    1f72:	1e 00 78    	mov.w     [w14], w0
    1f74:	80 00 eb    	clr.w     w1
    1f76:	41 10 98    	mov.w     w1, [w0+40]
    self->TXbuffer.count = 0;
    1f78:	1e 00 78    	mov.w     [w14], w0
    1f7a:	80 00 eb    	clr.w     w1
    1f7c:	51 10 98    	mov.w     w1, [w0+42]
    self->RXbuffer.data = NULL;
    1f7e:	1e 00 78    	mov.w     [w14], w0
    1f80:	80 00 eb    	clr.w     w1
    1f82:	61 10 98    	mov.w     w1, [w0+44]
    self->RXbuffer.length = 0;
    1f84:	1e 00 78    	mov.w     [w14], w0
    1f86:	80 00 eb    	clr.w     w1
    1f88:	71 10 98    	mov.w     w1, [w0+46]
    self->RXbuffer.head = 0;
    1f8a:	1e 00 78    	mov.w     [w14], w0
    1f8c:	80 00 eb    	clr.w     w1
    1f8e:	01 18 98    	mov.w     w1, [w0+48]
    self->RXbuffer.tail = 0;
    1f90:	1e 00 78    	mov.w     [w14], w0
    1f92:	80 00 eb    	clr.w     w1
    1f94:	11 18 98    	mov.w     w1, [w0+50]
    self->RXbuffer.count = 0;
    1f96:	1e 00 78    	mov.w     [w14], w0
    1f98:	80 00 eb    	clr.w     w1
    1f9a:	21 18 98    	mov.w     w1, [w0+52]
    self->TXthreshold = 1;
    1f9c:	1e 00 78    	mov.w     [w14], w0
    1f9e:	11 00 20    	mov.w     #0x1, w1
    1fa0:	31 18 98    	mov.w     w1, [w0+54]
    self->putc = NULL;
    1fa2:	1e 00 78    	mov.w     [w14], w0
    1fa4:	80 00 eb    	clr.w     w1
    1fa6:	41 18 98    	mov.w     w1, [w0+56]
    self->getc = NULL;
    1fa8:	1e 00 78    	mov.w     [w14], w0
    1faa:	80 00 eb    	clr.w     w1
    1fac:	51 18 98    	mov.w     w1, [w0+58]
}
    1fae:	00 80 fa    	ulnk      
    1fb0:	00 00 06    	return    

00001fb2 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1fb2:	10 00 fa    	lnk       #0x10
    1fb4:	88 1f 78    	mov.w     w8, [w15++]
    1fb6:	00 0f 78    	mov.w     w0, [w14]
    1fb8:	11 07 98    	mov.w     w1, [w14+2]
    1fba:	22 07 98    	mov.w     w2, [w14+4]
    1fbc:	33 07 98    	mov.w     w3, [w14+6]
    1fbe:	44 07 98    	mov.w     w4, [w14+8]
    1fc0:	56 07 98    	mov.w     w6, [w14+10]
    1fc2:	67 07 98    	mov.w     w7, [w14+12]
    1fc4:	65 4f 98    	mov.b     w5, [w14+14]
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1fc6:	1e 00 78    	mov.w     [w14], w0
    1fc8:	10 00 78    	mov.w     [w0], w0
    1fca:	80 00 eb    	clr.w     w1
    1fcc:	01 08 78    	mov.w     w1, [w0]
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1fce:	1e 00 90    	mov.w     [w14+2], w0
    1fd0:	60 00 90    	mov.w     [w0+12], w0
    1fd2:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1fd4:	0b 02 32    	bra       Z, 0x23ec <.L73>
    1fd6:	2e 00 90    	mov.w     [w14+4], w0
    1fd8:	60 00 90    	mov.w     [w0+12], w0
    1fda:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1fdc:	09 02 32    	bra       Z, 0x23f0 <.L74>
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1fde:	1e 00 90    	mov.w     [w14+2], w0
    1fe0:	00 08 90    	mov.w     [w0+16], w0
    1fe2:	00 00 e0    	cp0.w     w0
    1fe4:	69 00 3a    	bra       NZ, 0x20b8 <.L44>
    1fe6:	2e 00 90    	mov.w     [w14+4], w0
    1fe8:	00 08 90    	mov.w     [w0+16], w0
    1fea:	00 00 e0    	cp0.w     w0
    1fec:	65 00 3a    	bra       NZ, 0x20b8 <.L44>
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1fee:	1e 00 90    	mov.w     [w14+2], w0
    1ff0:	f8 0b 07    	rcall     0x37e2 <_pin_digitalOut> <.LFB6> <.LFE5>
        pin_set(TX);
    1ff2:	1e 00 90    	mov.w     [w14+2], w0
    1ff4:	53 0c 07    	rcall     0x389c <_pin_set> <.LFB8> <.LFE7>
        pin_digitalIn(RX);
    1ff6:	2e 00 90    	mov.w     [w14+4], w0
    1ff8:	cd 0b 07    	rcall     0x3794 <_pin_digitalIn> <.LFB5> <.LFE4>
        self->TX = TX;
    1ffa:	1e 00 78    	mov.w     [w14], w0
    1ffc:	9e 00 90    	mov.w     [w14+2], w1
    1ffe:	51 08 98    	mov.w     w1, [w0+26]
        TX->owner = (void *)self;
    2000:	1e 00 90    	mov.w     [w14+2], w0
    2002:	9e 00 78    	mov.w     [w14], w1
    2004:	01 08 98    	mov.w     w1, [w0+16]
        TX->write = NULL;
    2006:	1e 00 90    	mov.w     [w14+2], w0
    2008:	80 00 eb    	clr.w     w1
    200a:	11 08 98    	mov.w     w1, [w0+18]
        TX->read = NULL;
    200c:	1e 00 90    	mov.w     [w14+2], w0
    200e:	80 00 eb    	clr.w     w1
    2010:	21 08 98    	mov.w     w1, [w0+20]
        self->RX = RX;
    2012:	1e 00 78    	mov.w     [w14], w0
    2014:	ae 00 90    	mov.w     [w14+4], w1
    2016:	61 08 98    	mov.w     w1, [w0+28]
        RX->owner = (void *)self;
    2018:	2e 00 90    	mov.w     [w14+4], w0
    201a:	9e 00 78    	mov.w     [w14], w1
    201c:	01 08 98    	mov.w     w1, [w0+16]
        RX->write = NULL;
    201e:	2e 00 90    	mov.w     [w14+4], w0
    2020:	80 00 eb    	clr.w     w1
    2022:	11 08 98    	mov.w     w1, [w0+18]
        RX->read = NULL;
    2024:	2e 00 90    	mov.w     [w14+4], w0
    2026:	80 00 eb    	clr.w     w1
    2028:	21 08 98    	mov.w     w1, [w0+20]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    202a:	11 3a 80    	mov.w     0x742, w1
    202c:	f0 0b 20    	mov.w     #0xbf, w0
    202e:	00 81 60    	and.w     w1, w0, w2
    2030:	60 04 20    	mov.w     #0x46, w0
    2032:	71 05 20    	mov.w     #0x57, w1
    2034:	23 74 20    	mov.w     #0x742, w3
    2036:	80 49 78    	mov.b     w0, [w3]
    2038:	81 49 78    	mov.b     w1, [w3]
    203a:	82 49 78    	mov.b     w2, [w3]
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    203c:	1e 00 90    	mov.w     [w14+2], w0
    203e:	70 00 90    	mov.w     [w0+14], w0
    2040:	9e 00 90    	mov.w     [w14+2], w1
    2042:	f1 00 90    	mov.w     [w1+14], w1
    2044:	11 01 78    	mov.w     [w1], w2
    2046:	9e 00 90    	mov.w     [w14+2], w1
    2048:	a1 48 90    	mov.b     [w1+10], w1
    204a:	81 80 fb    	ze        w1, w1
    204c:	f3 03 20    	mov.w     #0x3f, w3
    204e:	81 18 dd    	sl.w      w3, w1, w1
    2050:	81 80 ea    	com.w     w1, w1
    2052:	81 00 61    	and.w     w2, w1, w1
    2054:	01 08 78    	mov.w     w1, [w0]
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    2056:	1e 00 90    	mov.w     [w14+2], w0
    2058:	70 00 90    	mov.w     [w0+14], w0
    205a:	9e 00 90    	mov.w     [w14+2], w1
    205c:	f1 00 90    	mov.w     [w1+14], w1
    205e:	11 01 78    	mov.w     [w1], w2
    2060:	9e 00 78    	mov.w     [w14], w1
    2062:	b1 09 90    	mov.w     [w1+22], w3
    2064:	9e 00 90    	mov.w     [w14+2], w1
    2066:	a1 48 90    	mov.b     [w1+10], w1
    2068:	81 80 fb    	ze        w1, w1
    206a:	81 18 dd    	sl.w      w3, w1, w1
    206c:	82 80 70    	ior.w     w1, w2, w1
    206e:	01 08 78    	mov.w     w1, [w0]
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    2070:	1e 00 78    	mov.w     [w14], w0
    2072:	00 08 90    	mov.w     [w0+16], w0
    2074:	9e 00 78    	mov.w     [w14], w1
    2076:	81 08 90    	mov.w     [w1+16], w1
    2078:	11 01 78    	mov.w     [w1], w2
    207a:	9e 00 78    	mov.w     [w14], w1
    207c:	c1 50 90    	mov.b     [w1+20], w1
    207e:	81 80 fb    	ze        w1, w1
    2080:	f3 03 20    	mov.w     #0x3f, w3
    2082:	81 18 dd    	sl.w      w3, w1, w1
    2084:	81 80 ea    	com.w     w1, w1
    2086:	81 00 61    	and.w     w2, w1, w1
    2088:	01 08 78    	mov.w     w1, [w0]
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    208a:	1e 00 78    	mov.w     [w14], w0
    208c:	00 08 90    	mov.w     [w0+16], w0
    208e:	9e 00 78    	mov.w     [w14], w1
    2090:	81 08 90    	mov.w     [w1+16], w1
    2092:	11 01 78    	mov.w     [w1], w2
    2094:	ae 00 90    	mov.w     [w14+4], w1
    2096:	e1 01 90    	mov.w     [w1+12], w3
    2098:	9e 00 78    	mov.w     [w14], w1
    209a:	c1 50 90    	mov.b     [w1+20], w1
    209c:	81 80 fb    	ze        w1, w1
    209e:	81 18 dd    	sl.w      w3, w1, w1
    20a0:	82 80 70    	ior.w     w1, w2, w1
    20a2:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    20a4:	10 3a 80    	mov.w     0x742, w0
    20a6:	00 01 78    	mov.w     w0, w2
    20a8:	02 60 a0    	bset.w    w2, #0x6
    20aa:	60 04 20    	mov.w     #0x46, w0
    20ac:	71 05 20    	mov.w     #0x57, w1
    20ae:	23 74 20    	mov.w     #0x742, w3
    20b0:	80 49 78    	mov.b     w0, [w3]
    20b2:	81 49 78    	mov.b     w1, [w3]
    20b4:	82 49 78    	mov.b     w2, [w3]
    20b6:	0a 00 37    	bra       0x20cc <.L45>

000020b8 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    20b8:	1e 00 78    	mov.w     [w14], w0
    20ba:	d0 08 90    	mov.w     [w0+26], w1
    20bc:	1e 00 90    	mov.w     [w14+2], w0
    20be:	80 8f 50    	sub.w     w1, w0, [w15]
    20c0:	99 01 3a    	bra       NZ, 0x23f4 <.L75>
    20c2:	1e 00 78    	mov.w     [w14], w0
    20c4:	e0 08 90    	mov.w     [w0+28], w1
    20c6:	2e 00 90    	mov.w     [w14+4], w0
    20c8:	80 8f 50    	sub.w     w1, w0, [w15]
    20ca:	96 01 3a    	bra       NZ, 0x23f8 <.L76>

000020cc <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    20cc:	3e 00 90    	mov.w     [w14+6], w0
    20ce:	00 00 e0    	cp0.w     w0
    20d0:	87 00 32    	bra       Z, 0x21e0 <.L47>
    20d2:	4e 00 90    	mov.w     [w14+8], w0
    20d4:	00 00 e0    	cp0.w     w0
    20d6:	84 00 32    	bra       Z, 0x21e0 <.L47>
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    20d8:	3e 00 90    	mov.w     [w14+6], w0
    20da:	60 00 90    	mov.w     [w0+12], w0
    20dc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    20de:	8e 01 32    	bra       Z, 0x23fc <.L77>
    20e0:	4e 00 90    	mov.w     [w14+8], w0
    20e2:	60 00 90    	mov.w     [w0+12], w0
    20e4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    20e6:	8c 01 32    	bra       Z, 0x2400 <.L78>
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    20e8:	3e 00 90    	mov.w     [w14+6], w0
    20ea:	00 08 90    	mov.w     [w0+16], w0
    20ec:	00 00 e0    	cp0.w     w0
    20ee:	69 00 3a    	bra       NZ, 0x21c2 <.L50>
    20f0:	4e 00 90    	mov.w     [w14+8], w0
    20f2:	00 08 90    	mov.w     [w0+16], w0
    20f4:	00 00 e0    	cp0.w     w0
    20f6:	65 00 3a    	bra       NZ, 0x21c2 <.L50>
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    20f8:	3e 00 90    	mov.w     [w14+6], w0
    20fa:	73 0b 07    	rcall     0x37e2 <_pin_digitalOut> <.LFB6> <.LFE5>
            pin_set(RTS);
    20fc:	3e 00 90    	mov.w     [w14+6], w0
    20fe:	ce 0b 07    	rcall     0x389c <_pin_set> <.LFB8> <.LFE7>
            pin_digitalIn(CTS);
    2100:	4e 00 90    	mov.w     [w14+8], w0
    2102:	48 0b 07    	rcall     0x3794 <_pin_digitalIn> <.LFB5> <.LFE4>
            self->RTS = RTS;
    2104:	1e 00 78    	mov.w     [w14], w0
    2106:	be 00 90    	mov.w     [w14+6], w1
    2108:	71 08 98    	mov.w     w1, [w0+30]
            RTS->owner = (void *)self;
    210a:	3e 00 90    	mov.w     [w14+6], w0
    210c:	9e 00 78    	mov.w     [w14], w1
    210e:	01 08 98    	mov.w     w1, [w0+16]
            RTS->write = NULL;
    2110:	3e 00 90    	mov.w     [w14+6], w0
    2112:	80 00 eb    	clr.w     w1
    2114:	11 08 98    	mov.w     w1, [w0+18]
            RTS->read = NULL;
    2116:	3e 00 90    	mov.w     [w14+6], w0
    2118:	80 00 eb    	clr.w     w1
    211a:	21 08 98    	mov.w     w1, [w0+20]
            self->CTS = CTS;
    211c:	1e 00 78    	mov.w     [w14], w0
    211e:	ce 00 90    	mov.w     [w14+8], w1
    2120:	01 10 98    	mov.w     w1, [w0+32]
            CTS->owner = (void *)self;
    2122:	4e 00 90    	mov.w     [w14+8], w0
    2124:	9e 00 78    	mov.w     [w14], w1
    2126:	01 08 98    	mov.w     w1, [w0+16]
            CTS->write = NULL;
    2128:	4e 00 90    	mov.w     [w14+8], w0
    212a:	80 00 eb    	clr.w     w1
    212c:	11 08 98    	mov.w     w1, [w0+18]
            CTS->read = NULL;
    212e:	4e 00 90    	mov.w     [w14+8], w0
    2130:	80 00 eb    	clr.w     w1
    2132:	21 08 98    	mov.w     w1, [w0+20]
            __builtin_write_OSCCONL(OSCCON&0xBF);
    2134:	11 3a 80    	mov.w     0x742, w1
    2136:	f0 0b 20    	mov.w     #0xbf, w0
    2138:	00 81 60    	and.w     w1, w0, w2
    213a:	60 04 20    	mov.w     #0x46, w0
    213c:	71 05 20    	mov.w     #0x57, w1
    213e:	23 74 20    	mov.w     #0x742, w3
    2140:	80 49 78    	mov.b     w0, [w3]
    2142:	81 49 78    	mov.b     w1, [w3]
    2144:	82 49 78    	mov.b     w2, [w3]
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    2146:	3e 00 90    	mov.w     [w14+6], w0
    2148:	70 00 90    	mov.w     [w0+14], w0
    214a:	be 00 90    	mov.w     [w14+6], w1
    214c:	f1 00 90    	mov.w     [w1+14], w1
    214e:	11 01 78    	mov.w     [w1], w2
    2150:	be 00 90    	mov.w     [w14+6], w1
    2152:	a1 48 90    	mov.b     [w1+10], w1
    2154:	81 80 fb    	ze        w1, w1
    2156:	f3 03 20    	mov.w     #0x3f, w3
    2158:	81 18 dd    	sl.w      w3, w1, w1
    215a:	81 80 ea    	com.w     w1, w1
    215c:	81 00 61    	and.w     w2, w1, w1
    215e:	01 08 78    	mov.w     w1, [w0]
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    2160:	3e 00 90    	mov.w     [w14+6], w0
    2162:	70 00 90    	mov.w     [w0+14], w0
    2164:	be 00 90    	mov.w     [w14+6], w1
    2166:	f1 00 90    	mov.w     [w1+14], w1
    2168:	11 01 78    	mov.w     [w1], w2
    216a:	9e 00 78    	mov.w     [w14], w1
    216c:	c1 09 90    	mov.w     [w1+24], w3
    216e:	be 00 90    	mov.w     [w14+6], w1
    2170:	a1 48 90    	mov.b     [w1+10], w1
    2172:	81 80 fb    	ze        w1, w1
    2174:	81 18 dd    	sl.w      w3, w1, w1
    2176:	82 80 70    	ior.w     w1, w2, w1
    2178:	01 08 78    	mov.w     w1, [w0]
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    217a:	1e 00 78    	mov.w     [w14], w0
    217c:	10 08 90    	mov.w     [w0+18], w0
    217e:	9e 00 78    	mov.w     [w14], w1
    2180:	91 08 90    	mov.w     [w1+18], w1
    2182:	11 01 78    	mov.w     [w1], w2
    2184:	9e 00 78    	mov.w     [w14], w1
    2186:	d1 50 90    	mov.b     [w1+21], w1
    2188:	81 80 fb    	ze        w1, w1
    218a:	f3 03 20    	mov.w     #0x3f, w3
    218c:	81 18 dd    	sl.w      w3, w1, w1
    218e:	81 80 ea    	com.w     w1, w1
    2190:	81 00 61    	and.w     w2, w1, w1
    2192:	01 08 78    	mov.w     w1, [w0]
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    2194:	1e 00 78    	mov.w     [w14], w0
    2196:	10 08 90    	mov.w     [w0+18], w0
    2198:	9e 00 78    	mov.w     [w14], w1
    219a:	91 08 90    	mov.w     [w1+18], w1
    219c:	11 01 78    	mov.w     [w1], w2
    219e:	ce 00 90    	mov.w     [w14+8], w1
    21a0:	e1 01 90    	mov.w     [w1+12], w3
    21a2:	9e 00 78    	mov.w     [w14], w1
    21a4:	d1 50 90    	mov.b     [w1+21], w1
    21a6:	81 80 fb    	ze        w1, w1
    21a8:	81 18 dd    	sl.w      w3, w1, w1
    21aa:	82 80 70    	ior.w     w1, w2, w1
    21ac:	01 08 78    	mov.w     w1, [w0]
            __builtin_write_OSCCONL(OSCCON|0x40);
    21ae:	10 3a 80    	mov.w     0x742, w0
    21b0:	00 01 78    	mov.w     w0, w2
    21b2:	02 60 a0    	bset.w    w2, #0x6
    21b4:	60 04 20    	mov.w     #0x46, w0
    21b6:	71 05 20    	mov.w     #0x57, w1
    21b8:	23 74 20    	mov.w     #0x742, w3
    21ba:	80 49 78    	mov.b     w0, [w3]
    21bc:	81 49 78    	mov.b     w1, [w3]
    21be:	82 49 78    	mov.b     w2, [w3]
    21c0:	0a 00 37    	bra       0x21d6 <.L51>

000021c2 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    21c2:	1e 00 78    	mov.w     [w14], w0
    21c4:	f0 08 90    	mov.w     [w0+30], w1
    21c6:	3e 00 90    	mov.w     [w14+6], w0
    21c8:	80 8f 50    	sub.w     w1, w0, [w15]
    21ca:	1c 01 3a    	bra       NZ, 0x2404 <.L79>
    21cc:	1e 00 78    	mov.w     [w14], w0
    21ce:	80 10 90    	mov.w     [w0+32], w1
    21d0:	4e 00 90    	mov.w     [w14+8], w0
    21d2:	80 8f 50    	sub.w     w1, w0, [w15]
    21d4:	19 01 3a    	bra       NZ, 0x2408 <.L80>

000021d6 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    21d6:	1e 00 78    	mov.w     [w14], w0
    21d8:	10 00 78    	mov.w     [w0], w0
    21da:	01 20 20    	mov.w     #0x200, w1
    21dc:	01 08 78    	mov.w     w1, [w0]
    21de:	06 00 37    	bra       0x21ec <.L53>

000021e0 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    21e0:	3e 00 90    	mov.w     [w14+6], w0
    21e2:	00 00 e0    	cp0.w     w0
    21e4:	13 01 3a    	bra       NZ, 0x240c <.L81>
    21e6:	4e 00 90    	mov.w     [w14+8], w0
    21e8:	00 00 e0    	cp0.w     w0
    21ea:	12 01 3a    	bra       NZ, 0x2410 <.L82>

000021ec <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    21ec:	18 c0 b3    	mov.b     #0x1, w8
    21ee:	02 40 22    	mov.w     #0x2400, w2
    21f0:	43 a7 24    	mov.w     #0x4a74, w3
    21f2:	5e 00 90    	mov.w     [w14+10], w0
    21f4:	ee 00 90    	mov.w     [w14+12], w1
    21f6:	fe f8 07    	rcall     0x13f4 <___gesf2> <___gtsf2>
    21f8:	00 00 e0    	cp0.w     w0
    21fa:	01 00 3c    	bra       GT, 0x21fe <.L55>
    21fc:	00 44 eb    	clr.b     w8

000021fe <.L55>:
    21fe:	08 04 e0    	cp0.b     w8
    2200:	04 00 32    	bra       Z, 0x220a <.L56>
        baudrate = FCY/4.;
    2202:	00 40 22    	mov.w     #0x2400, w0
    2204:	41 a7 24    	mov.w     #0x4a74, w1
    2206:	50 07 98    	mov.w     w0, [w14+10]
    2208:	61 07 98    	mov.w     w1, [w14+12]

0000220a <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    220a:	18 c0 b3    	mov.b     #0x1, w8
    220c:	02 40 22    	mov.w     #0x2400, w2
    220e:	43 17 24    	mov.w     #0x4174, w3
    2210:	5e 00 90    	mov.w     [w14+10], w0
    2212:	ee 00 90    	mov.w     [w14+12], w1
    2214:	ed f8 07    	rcall     0x13f0 <___eqsf2> <___lesf2> <___ltsf2>
    2216:	00 00 e0    	cp0.w     w0
    2218:	01 00 35    	bra       LT, 0x221c <.L57>
    221a:	00 44 eb    	clr.b     w8

0000221c <.L57>:
    221c:	08 04 e0    	cp0.b     w8
    221e:	04 00 32    	bra       Z, 0x2228 <.L58>
        baudrate = FCY/(16.*65536.);
    2220:	00 40 22    	mov.w     #0x2400, w0
    2222:	41 17 24    	mov.w     #0x4174, w1
    2224:	50 07 98    	mov.w     w0, [w14+10]
    2226:	61 07 98    	mov.w     w1, [w14+12]

00002228 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2228:	18 c0 b3    	mov.b     #0x1, w8
    222a:	02 40 22    	mov.w     #0x2400, w2
    222c:	43 27 24    	mov.w     #0x4274, w3
    222e:	5e 00 90    	mov.w     [w14+10], w0
    2230:	ee 00 90    	mov.w     [w14+12], w1
    2232:	de f8 07    	rcall     0x13f0 <___eqsf2> <___lesf2> <___ltsf2>
    2234:	00 00 e0    	cp0.w     w0
    2236:	01 00 34    	bra       LE, 0x223a <.L59>
    2238:	00 44 eb    	clr.b     w8

0000223a <.L59>:
    223a:	08 04 e0    	cp0.b     w8
    223c:	0f 00 32    	bra       Z, 0x225c <.L60>
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    223e:	1e 00 78    	mov.w     [w14], w0
    2240:	40 04 90    	mov.w     [w0+8], w8
    2242:	5e 01 90    	mov.w     [w14+10], w2
    2244:	ee 01 90    	mov.w     [w14+12], w3
    2246:	00 40 22    	mov.w     #0x2400, w0
    2248:	41 97 24    	mov.w     #0x4974, w1
    224a:	90 f8 07    	rcall     0x136c <___divsf3>
    224c:	02 00 20    	mov.w     #0x0, w2
    224e:	03 f0 23    	mov.w     #0x3f00, w3
    2250:	30 f8 07    	rcall     0x12b2 <___addsf3>
    2252:	d2 f8 07    	rcall     0x13f8 <___fixunssfsi>
    2254:	00 00 78    	mov.w     w0, w0
    2256:	00 00 e9    	dec.w     w0, w0
    2258:	00 0c 78    	mov.w     w0, [w8]
    225a:	15 00 37    	bra       0x2286 <.L61>

0000225c <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    225c:	1e 00 78    	mov.w     [w14], w0
    225e:	10 00 78    	mov.w     [w0], w0
    2260:	9e 00 78    	mov.w     [w14], w1
    2262:	91 00 78    	mov.w     [w1], w1
    2264:	91 00 78    	mov.w     [w1], w1
    2266:	01 30 a0    	bset.w    w1, #0x3
    2268:	01 08 78    	mov.w     w1, [w0]
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    226a:	1e 00 78    	mov.w     [w14], w0
    226c:	40 04 90    	mov.w     [w0+8], w8
    226e:	5e 01 90    	mov.w     [w14+10], w2
    2270:	ee 01 90    	mov.w     [w14+12], w3
    2272:	00 40 22    	mov.w     #0x2400, w0
    2274:	41 a7 24    	mov.w     #0x4a74, w1
    2276:	7a f8 07    	rcall     0x136c <___divsf3>
    2278:	02 00 20    	mov.w     #0x0, w2
    227a:	03 f0 23    	mov.w     #0x3f00, w3
    227c:	1a f8 07    	rcall     0x12b2 <___addsf3>
    227e:	bc f8 07    	rcall     0x13f8 <___fixunssfsi>
    2280:	00 00 78    	mov.w     w0, w0
    2282:	00 00 e9    	dec.w     w0, w0
    2284:	00 0c 78    	mov.w     w0, [w8]

00002286 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2286:	ee 48 90    	mov.b     [w14+14], w1
    2288:	50 c4 b3    	mov.b     #0x45, w0
    228a:	80 cf 50    	sub.b     w1, w0, [w15]
    228c:	04 00 32    	bra       Z, 0x2296 <.L62>
    228e:	ee 48 90    	mov.b     [w14+14], w1
    2290:	50 c6 b3    	mov.b     #0x65, w0
    2292:	80 cf 50    	sub.b     w1, w0, [w15]
    2294:	08 00 3a    	bra       NZ, 0x22a6 <.L63>

00002296 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2296:	1e 00 78    	mov.w     [w14], w0
    2298:	10 00 78    	mov.w     [w0], w0
    229a:	9e 00 78    	mov.w     [w14], w1
    229c:	91 00 78    	mov.w     [w1], w1
    229e:	91 00 78    	mov.w     [w1], w1
    22a0:	01 10 a0    	bset.w    w1, #0x1
    22a2:	01 08 78    	mov.w     w1, [w0]
    22a4:	18 00 37    	bra       0x22d6 <.L64>

000022a6 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    22a6:	ee 48 90    	mov.b     [w14+14], w1
    22a8:	f0 c4 b3    	mov.b     #0x4f, w0
    22aa:	80 cf 50    	sub.b     w1, w0, [w15]
    22ac:	04 00 32    	bra       Z, 0x22b6 <.L65>
    22ae:	ee 48 90    	mov.b     [w14+14], w1
    22b0:	f0 c6 b3    	mov.b     #0x6f, w0
    22b2:	80 cf 50    	sub.b     w1, w0, [w15]
    22b4:	08 00 3a    	bra       NZ, 0x22c6 <.L66>

000022b6 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    22b6:	1e 00 78    	mov.w     [w14], w0
    22b8:	10 00 78    	mov.w     [w0], w0
    22ba:	9e 00 78    	mov.w     [w14], w1
    22bc:	91 00 78    	mov.w     [w1], w1
    22be:	91 00 78    	mov.w     [w1], w1
    22c0:	01 20 a0    	bset.w    w1, #0x2
    22c2:	01 08 78    	mov.w     w1, [w0]
    22c4:	08 00 37    	bra       0x22d6 <.L64>

000022c6 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    22c6:	ee 48 90    	mov.b     [w14+14], w1
    22c8:	e0 c4 b3    	mov.b     #0x4e, w0
    22ca:	80 cf 50    	sub.b     w1, w0, [w15]
    22cc:	04 00 32    	bra       Z, 0x22d6 <.L64>
    22ce:	ee 48 90    	mov.b     [w14+14], w1
    22d0:	e0 c6 b3    	mov.b     #0x6e, w0
    22d2:	80 cf 50    	sub.b     w1, w0, [w15]
    22d4:	9f 00 3a    	bra       NZ, 0x2414 <.L83>

000022d6 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    22d6:	4e b8 97    	mov.w     [w14-8], w0
    22d8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    22da:	08 00 3a    	bra       NZ, 0x22ec <.L67>
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    22dc:	1e 00 78    	mov.w     [w14], w0
    22de:	10 00 78    	mov.w     [w0], w0
    22e0:	9e 00 78    	mov.w     [w14], w1
    22e2:	91 00 78    	mov.w     [w1], w1
    22e4:	91 00 78    	mov.w     [w1], w1
    22e6:	01 00 a0    	bset.w    w1, #0x0
    22e8:	01 08 78    	mov.w     w1, [w0]
    22ea:	03 00 37    	bra       0x22f2 <.L68>

000022ec <.L67>:
    } else if (stopbits!=1) {
    22ec:	4e b8 97    	mov.w     [w14-8], w0
    22ee:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    22f0:	93 00 3a    	bra       NZ, 0x2418 <.L84>

000022f2 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    22f2:	2e b8 97    	mov.w     [w14-12], w0
    22f4:	00 00 e0    	cp0.w     w0
    22f6:	04 00 3a    	bra       NZ, 0x2300 <.L69>
        self->putc = __putc_nobuffer;
    22f8:	1e 00 78    	mov.w     [w14], w0
    22fa:	a1 b5 21    	mov.w     #0x1b5a, w1
    22fc:	41 18 98    	mov.w     w1, [w0+56]
    22fe:	35 00 37    	bra       0x236a <.L70>

00002300 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2300:	1e 00 78    	mov.w     [w14], w0
    2302:	10 00 90    	mov.w     [w0+2], w0
    2304:	9e 00 78    	mov.w     [w14], w1
    2306:	91 00 90    	mov.w     [w1+2], w1
    2308:	91 00 78    	mov.w     [w1], w1
    230a:	01 d0 a0    	bset.w    w1, #0xd
    230c:	01 08 78    	mov.w     w1, [w0]
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    230e:	1e 00 78    	mov.w     [w14], w0
    2310:	ae b8 97    	mov.w     [w14-12], w1
    2312:	11 10 98    	mov.w     w1, [w0+34]
        self->TXbuffer.length = TXbufferlen;
    2314:	1e 00 78    	mov.w     [w14], w0
    2316:	9e b8 97    	mov.w     [w14-14], w1
    2318:	21 10 98    	mov.w     w1, [w0+36]
        self->TXbuffer.head = 0;
    231a:	1e 00 78    	mov.w     [w14], w0
    231c:	80 00 eb    	clr.w     w1
    231e:	31 10 98    	mov.w     w1, [w0+38]
        self->TXbuffer.tail = 0;
    2320:	1e 00 78    	mov.w     [w14], w0
    2322:	80 00 eb    	clr.w     w1
    2324:	41 10 98    	mov.w     w1, [w0+40]
        self->TXbuffer.count = 0;
    2326:	1e 00 78    	mov.w     [w14], w0
    2328:	80 00 eb    	clr.w     w1
    232a:	51 10 98    	mov.w     w1, [w0+42]
        self->TXthreshold = TXthreshold;
    232c:	1e 00 78    	mov.w     [w14], w0
    232e:	be b8 97    	mov.w     [w14-10], w1
    2330:	31 18 98    	mov.w     w1, [w0+54]
        self->putc = __putc_buffer;
    2332:	1e 00 78    	mov.w     [w14], w0
    2334:	c1 b9 21    	mov.w     #0x1b9c, w1
    2336:	41 18 98    	mov.w     w1, [w0+56]
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2338:	1e 00 78    	mov.w     [w14], w0
    233a:	50 00 90    	mov.w     [w0+10], w0
    233c:	9e 00 78    	mov.w     [w14], w1
    233e:	d1 00 90    	mov.w     [w1+10], w1
    2340:	11 01 78    	mov.w     [w1], w2
    2342:	9e 00 78    	mov.w     [w14], w1
    2344:	e1 48 90    	mov.b     [w1+14], w1
    2346:	81 80 fb    	ze        w1, w1
    2348:	13 00 20    	mov.w     #0x1, w3
    234a:	81 18 dd    	sl.w      w3, w1, w1
    234c:	81 80 ea    	com.w     w1, w1
    234e:	81 00 61    	and.w     w2, w1, w1
    2350:	01 08 78    	mov.w     w1, [w0]
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2352:	1e 00 78    	mov.w     [w14], w0
    2354:	60 00 90    	mov.w     [w0+12], w0
    2356:	9e 00 78    	mov.w     [w14], w1
    2358:	e1 00 90    	mov.w     [w1+12], w1
    235a:	11 01 78    	mov.w     [w1], w2
    235c:	9e 00 78    	mov.w     [w14], w1
    235e:	e1 48 90    	mov.b     [w1+14], w1
    2360:	81 80 fb    	ze        w1, w1
    2362:	13 00 20    	mov.w     #0x1, w3
    2364:	81 18 dd    	sl.w      w3, w1, w1
    2366:	82 80 70    	ior.w     w1, w2, w1
    2368:	01 08 78    	mov.w     w1, [w0]

0000236a <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    236a:	0e b8 97    	mov.w     [w14-16], w0
    236c:	00 00 e0    	cp0.w     w0
    236e:	04 00 3a    	bra       NZ, 0x2378 <.L71>
        self->getc = __getc_nobuffer;
    2370:	1e 00 78    	mov.w     [w14], w0
    2372:	e1 b7 21    	mov.w     #0x1b7e, w1
    2374:	51 18 98    	mov.w     w1, [w0+58]
    2376:	2b 00 37    	bra       0x23ce <.L72>

00002378 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2378:	1e 00 78    	mov.w     [w14], w0
    237a:	8e b8 97    	mov.w     [w14-16], w1
    237c:	61 10 98    	mov.w     w1, [w0+44]
        self->RXbuffer.length = RXbufferlen;
    237e:	1e 00 78    	mov.w     [w14], w0
    2380:	fe b0 97    	mov.w     [w14-18], w1
    2382:	71 10 98    	mov.w     w1, [w0+46]
        self->RXbuffer.head = 0;
    2384:	1e 00 78    	mov.w     [w14], w0
    2386:	80 00 eb    	clr.w     w1
    2388:	01 18 98    	mov.w     w1, [w0+48]
        self->RXbuffer.tail = 0;
    238a:	1e 00 78    	mov.w     [w14], w0
    238c:	80 00 eb    	clr.w     w1
    238e:	11 18 98    	mov.w     w1, [w0+50]
        self->RXbuffer.count = 0;
    2390:	1e 00 78    	mov.w     [w14], w0
    2392:	80 00 eb    	clr.w     w1
    2394:	21 18 98    	mov.w     w1, [w0+52]
        self->getc = __getc_buffer;
    2396:	1e 00 78    	mov.w     [w14], w0
    2398:	a1 c8 21    	mov.w     #0x1c8a, w1
    239a:	51 18 98    	mov.w     w1, [w0+58]
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    239c:	1e 00 78    	mov.w     [w14], w0
    239e:	50 00 90    	mov.w     [w0+10], w0
    23a0:	9e 00 78    	mov.w     [w14], w1
    23a2:	d1 00 90    	mov.w     [w1+10], w1
    23a4:	11 01 78    	mov.w     [w1], w2
    23a6:	9e 00 78    	mov.w     [w14], w1
    23a8:	f1 48 90    	mov.b     [w1+15], w1
    23aa:	81 80 fb    	ze        w1, w1
    23ac:	13 00 20    	mov.w     #0x1, w3
    23ae:	81 18 dd    	sl.w      w3, w1, w1
    23b0:	81 80 ea    	com.w     w1, w1
    23b2:	81 00 61    	and.w     w2, w1, w1
    23b4:	01 08 78    	mov.w     w1, [w0]
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    23b6:	1e 00 78    	mov.w     [w14], w0
    23b8:	60 00 90    	mov.w     [w0+12], w0
    23ba:	9e 00 78    	mov.w     [w14], w1
    23bc:	e1 00 90    	mov.w     [w1+12], w1
    23be:	11 01 78    	mov.w     [w1], w2
    23c0:	9e 00 78    	mov.w     [w14], w1
    23c2:	f1 48 90    	mov.b     [w1+15], w1
    23c4:	81 80 fb    	ze        w1, w1
    23c6:	13 00 20    	mov.w     #0x1, w3
    23c8:	81 18 dd    	sl.w      w3, w1, w1
    23ca:	82 80 70    	ior.w     w1, w2, w1
    23cc:	01 08 78    	mov.w     w1, [w0]

000023ce <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    23ce:	1e 00 78    	mov.w     [w14], w0
    23d0:	10 00 78    	mov.w     [w0], w0
    23d2:	9e 00 78    	mov.w     [w14], w1
    23d4:	91 00 78    	mov.w     [w1], w1
    23d6:	91 00 78    	mov.w     [w1], w1
    23d8:	01 f0 a0    	bset.w    w1, #0xf
    23da:	01 08 78    	mov.w     w1, [w0]
    bitset(self->UxSTA, 10);    // Enable data transmission
    23dc:	1e 00 78    	mov.w     [w14], w0
    23de:	10 00 90    	mov.w     [w0+2], w0
    23e0:	9e 00 78    	mov.w     [w14], w1
    23e2:	91 00 90    	mov.w     [w1+2], w1
    23e4:	91 00 78    	mov.w     [w1], w1
    23e6:	01 a0 a0    	bset.w    w1, #0xa
    23e8:	01 08 78    	mov.w     w1, [w0]
    23ea:	17 00 37    	bra       0x241a <.L40>

000023ec <.L73>:
    23ec:	00 00 00    	nop       
    23ee:	15 00 37    	bra       0x241a <.L40>

000023f0 <.L74>:
    23f0:	00 00 00    	nop       
    23f2:	13 00 37    	bra       0x241a <.L40>

000023f4 <.L75>:
    23f4:	00 00 00    	nop       
    23f6:	11 00 37    	bra       0x241a <.L40>

000023f8 <.L76>:
    23f8:	00 00 00    	nop       
    23fa:	0f 00 37    	bra       0x241a <.L40>

000023fc <.L77>:
    23fc:	00 00 00    	nop       
    23fe:	0d 00 37    	bra       0x241a <.L40>

00002400 <.L78>:
    2400:	00 00 00    	nop       
    2402:	0b 00 37    	bra       0x241a <.L40>

00002404 <.L79>:
    2404:	00 00 00    	nop       
    2406:	09 00 37    	bra       0x241a <.L40>

00002408 <.L80>:
    2408:	00 00 00    	nop       
    240a:	07 00 37    	bra       0x241a <.L40>

0000240c <.L81>:
    240c:	00 00 00    	nop       
    240e:	05 00 37    	bra       0x241a <.L40>

00002410 <.L82>:
    2410:	00 00 00    	nop       
    2412:	03 00 37    	bra       0x241a <.L40>

00002414 <.L83>:
    2414:	00 00 00    	nop       
    2416:	01 00 37    	bra       0x241a <.L40>

00002418 <.L84>:
    2418:	00 00 00    	nop       

0000241a <.L40>:
}
    241a:	4f 04 78    	mov.w     [--w15], w8
    241c:	00 80 fa    	ulnk      
    241e:	00 00 06    	return    

00002420 <_uart_close>:

void uart_close(_UART *self) {
    2420:	02 00 fa    	lnk       #0x2
    2422:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2424:	1e 00 78    	mov.w     [w14], w0
    2426:	10 00 90    	mov.w     [w0+2], w0
    2428:	9e 00 78    	mov.w     [w14], w1
    242a:	91 00 90    	mov.w     [w1+2], w1
    242c:	11 01 78    	mov.w     [w1], w2
    242e:	f1 bf 2f    	mov.w     #0xfbff, w1
    2430:	81 00 61    	and.w     w2, w1, w1
    2432:	01 08 78    	mov.w     w1, [w0]
    *(self->UxMODE) = 0;        // Disable UART module
    2434:	1e 00 78    	mov.w     [w14], w0
    2436:	10 00 78    	mov.w     [w0], w0
    2438:	80 00 eb    	clr.w     w1
    243a:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    243c:	1e 00 78    	mov.w     [w14], w0
    243e:	60 00 90    	mov.w     [w0+12], w0
    2440:	9e 00 78    	mov.w     [w14], w1
    2442:	e1 00 90    	mov.w     [w1+12], w1
    2444:	11 01 78    	mov.w     [w1], w2
    2446:	9e 00 78    	mov.w     [w14], w1
    2448:	e1 48 90    	mov.b     [w1+14], w1
    244a:	81 80 fb    	ze        w1, w1
    244c:	13 00 20    	mov.w     #0x1, w3
    244e:	81 18 dd    	sl.w      w3, w1, w1
    2450:	81 80 ea    	com.w     w1, w1
    2452:	81 00 61    	and.w     w2, w1, w1
    2454:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2456:	1e 00 78    	mov.w     [w14], w0
    2458:	60 00 90    	mov.w     [w0+12], w0
    245a:	9e 00 78    	mov.w     [w14], w1
    245c:	e1 00 90    	mov.w     [w1+12], w1
    245e:	11 01 78    	mov.w     [w1], w2
    2460:	9e 00 78    	mov.w     [w14], w1
    2462:	f1 48 90    	mov.b     [w1+15], w1
    2464:	81 80 fb    	ze        w1, w1
    2466:	13 00 20    	mov.w     #0x1, w3
    2468:	81 18 dd    	sl.w      w3, w1, w1
    246a:	81 80 ea    	com.w     w1, w1
    246c:	81 00 61    	and.w     w2, w1, w1
    246e:	01 08 78    	mov.w     w1, [w0]
    self->putc = NULL;
    2470:	1e 00 78    	mov.w     [w14], w0
    2472:	80 00 eb    	clr.w     w1
    2474:	41 18 98    	mov.w     w1, [w0+56]
    self->getc = NULL;
    2476:	1e 00 78    	mov.w     [w14], w0
    2478:	80 00 eb    	clr.w     w1
    247a:	51 18 98    	mov.w     w1, [w0+58]
    if (self->TX) {
    247c:	1e 00 78    	mov.w     [w14], w0
    247e:	50 08 90    	mov.w     [w0+26], w0
    2480:	00 00 e0    	cp0.w     w0
    2482:	2f 00 32    	bra       Z, 0x24e2 <.L86>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2484:	11 3a 80    	mov.w     0x742, w1
    2486:	f0 0b 20    	mov.w     #0xbf, w0
    2488:	00 81 60    	and.w     w1, w0, w2
    248a:	60 04 20    	mov.w     #0x46, w0
    248c:	71 05 20    	mov.w     #0x57, w1
    248e:	23 74 20    	mov.w     #0x742, w3
    2490:	80 49 78    	mov.b     w0, [w3]
    2492:	81 49 78    	mov.b     w1, [w3]
    2494:	82 49 78    	mov.b     w2, [w3]
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2496:	1e 00 78    	mov.w     [w14], w0
    2498:	50 08 90    	mov.w     [w0+26], w0
    249a:	70 00 90    	mov.w     [w0+14], w0
    249c:	9e 00 78    	mov.w     [w14], w1
    249e:	d1 08 90    	mov.w     [w1+26], w1
    24a0:	f1 00 90    	mov.w     [w1+14], w1
    24a2:	11 01 78    	mov.w     [w1], w2
    24a4:	9e 00 78    	mov.w     [w14], w1
    24a6:	d1 08 90    	mov.w     [w1+26], w1
    24a8:	a1 48 90    	mov.b     [w1+10], w1
    24aa:	81 80 fb    	ze        w1, w1
    24ac:	f3 03 20    	mov.w     #0x3f, w3
    24ae:	81 18 dd    	sl.w      w3, w1, w1
    24b0:	81 80 ea    	com.w     w1, w1
    24b2:	81 00 61    	and.w     w2, w1, w1
    24b4:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    24b6:	10 3a 80    	mov.w     0x742, w0
    24b8:	00 01 78    	mov.w     w0, w2
    24ba:	02 60 a0    	bset.w    w2, #0x6
    24bc:	60 04 20    	mov.w     #0x46, w0
    24be:	71 05 20    	mov.w     #0x57, w1
    24c0:	23 74 20    	mov.w     #0x742, w3
    24c2:	80 49 78    	mov.b     w0, [w3]
    24c4:	81 49 78    	mov.b     w1, [w3]
    24c6:	82 49 78    	mov.b     w2, [w3]
        self->TX->owner = NULL;
    24c8:	1e 00 78    	mov.w     [w14], w0
    24ca:	50 08 90    	mov.w     [w0+26], w0
    24cc:	80 00 eb    	clr.w     w1
    24ce:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->TX);
    24d0:	1e 00 78    	mov.w     [w14], w0
    24d2:	50 08 90    	mov.w     [w0+26], w0
    24d4:	86 09 07    	rcall     0x37e2 <_pin_digitalOut> <.LFB6> <.LFE5>
        pin_set(self->TX);
    24d6:	1e 00 78    	mov.w     [w14], w0
    24d8:	50 08 90    	mov.w     [w0+26], w0
    24da:	e0 09 07    	rcall     0x389c <_pin_set> <.LFB8> <.LFE7>
        self->TX = NULL;
    24dc:	1e 00 78    	mov.w     [w14], w0
    24de:	80 00 eb    	clr.w     w1
    24e0:	51 08 98    	mov.w     w1, [w0+26]

000024e2 <.L86>:
    }
    if (self->RX) {
    24e2:	1e 00 78    	mov.w     [w14], w0
    24e4:	60 08 90    	mov.w     [w0+28], w0
    24e6:	00 00 e0    	cp0.w     w0
    24e8:	28 00 32    	bra       Z, 0x253a <.L87>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    24ea:	11 3a 80    	mov.w     0x742, w1
    24ec:	f0 0b 20    	mov.w     #0xbf, w0
    24ee:	00 81 60    	and.w     w1, w0, w2
    24f0:	60 04 20    	mov.w     #0x46, w0
    24f2:	71 05 20    	mov.w     #0x57, w1
    24f4:	23 74 20    	mov.w     #0x742, w3
    24f6:	80 49 78    	mov.b     w0, [w3]
    24f8:	81 49 78    	mov.b     w1, [w3]
    24fa:	82 49 78    	mov.b     w2, [w3]
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    24fc:	1e 00 78    	mov.w     [w14], w0
    24fe:	00 08 90    	mov.w     [w0+16], w0
    2500:	9e 00 78    	mov.w     [w14], w1
    2502:	81 08 90    	mov.w     [w1+16], w1
    2504:	11 01 78    	mov.w     [w1], w2
    2506:	9e 00 78    	mov.w     [w14], w1
    2508:	c1 50 90    	mov.b     [w1+20], w1
    250a:	81 80 fb    	ze        w1, w1
    250c:	f3 03 20    	mov.w     #0x3f, w3
    250e:	81 18 dd    	sl.w      w3, w1, w1
    2510:	82 80 70    	ior.w     w1, w2, w1
    2512:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2514:	10 3a 80    	mov.w     0x742, w0
    2516:	00 01 78    	mov.w     w0, w2
    2518:	02 60 a0    	bset.w    w2, #0x6
    251a:	60 04 20    	mov.w     #0x46, w0
    251c:	71 05 20    	mov.w     #0x57, w1
    251e:	23 74 20    	mov.w     #0x742, w3
    2520:	80 49 78    	mov.b     w0, [w3]
    2522:	81 49 78    	mov.b     w1, [w3]
    2524:	82 49 78    	mov.b     w2, [w3]
        self->RX->owner = NULL;
    2526:	1e 00 78    	mov.w     [w14], w0
    2528:	60 08 90    	mov.w     [w0+28], w0
    252a:	80 00 eb    	clr.w     w1
    252c:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalIn(self->RX);
    252e:	1e 00 78    	mov.w     [w14], w0
    2530:	60 08 90    	mov.w     [w0+28], w0
    2532:	30 09 07    	rcall     0x3794 <_pin_digitalIn> <.LFB5> <.LFE4>
        self->RX = NULL;
    2534:	1e 00 78    	mov.w     [w14], w0
    2536:	80 00 eb    	clr.w     w1
    2538:	61 08 98    	mov.w     w1, [w0+28]

0000253a <.L87>:
    }
    if (self->RTS) {
    253a:	1e 00 78    	mov.w     [w14], w0
    253c:	70 08 90    	mov.w     [w0+30], w0
    253e:	00 00 e0    	cp0.w     w0
    2540:	2f 00 32    	bra       Z, 0x25a0 <.L88>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2542:	11 3a 80    	mov.w     0x742, w1
    2544:	f0 0b 20    	mov.w     #0xbf, w0
    2546:	00 81 60    	and.w     w1, w0, w2
    2548:	60 04 20    	mov.w     #0x46, w0
    254a:	71 05 20    	mov.w     #0x57, w1
    254c:	23 74 20    	mov.w     #0x742, w3
    254e:	80 49 78    	mov.b     w0, [w3]
    2550:	81 49 78    	mov.b     w1, [w3]
    2552:	82 49 78    	mov.b     w2, [w3]
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2554:	1e 00 78    	mov.w     [w14], w0
    2556:	70 08 90    	mov.w     [w0+30], w0
    2558:	70 00 90    	mov.w     [w0+14], w0
    255a:	9e 00 78    	mov.w     [w14], w1
    255c:	f1 08 90    	mov.w     [w1+30], w1
    255e:	f1 00 90    	mov.w     [w1+14], w1
    2560:	11 01 78    	mov.w     [w1], w2
    2562:	9e 00 78    	mov.w     [w14], w1
    2564:	f1 08 90    	mov.w     [w1+30], w1
    2566:	a1 48 90    	mov.b     [w1+10], w1
    2568:	81 80 fb    	ze        w1, w1
    256a:	f3 03 20    	mov.w     #0x3f, w3
    256c:	81 18 dd    	sl.w      w3, w1, w1
    256e:	81 80 ea    	com.w     w1, w1
    2570:	81 00 61    	and.w     w2, w1, w1
    2572:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2574:	10 3a 80    	mov.w     0x742, w0
    2576:	00 01 78    	mov.w     w0, w2
    2578:	02 60 a0    	bset.w    w2, #0x6
    257a:	60 04 20    	mov.w     #0x46, w0
    257c:	71 05 20    	mov.w     #0x57, w1
    257e:	23 74 20    	mov.w     #0x742, w3
    2580:	80 49 78    	mov.b     w0, [w3]
    2582:	81 49 78    	mov.b     w1, [w3]
    2584:	82 49 78    	mov.b     w2, [w3]
        self->RTS->owner = NULL;
    2586:	1e 00 78    	mov.w     [w14], w0
    2588:	70 08 90    	mov.w     [w0+30], w0
    258a:	80 00 eb    	clr.w     w1
    258c:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->RTS);
    258e:	1e 00 78    	mov.w     [w14], w0
    2590:	70 08 90    	mov.w     [w0+30], w0
    2592:	27 09 07    	rcall     0x37e2 <_pin_digitalOut> <.LFB6> <.LFE5>
        pin_set(self->RTS);
    2594:	1e 00 78    	mov.w     [w14], w0
    2596:	70 08 90    	mov.w     [w0+30], w0
    2598:	81 09 07    	rcall     0x389c <_pin_set> <.LFB8> <.LFE7>
        self->RTS = NULL;
    259a:	1e 00 78    	mov.w     [w14], w0
    259c:	80 00 eb    	clr.w     w1
    259e:	71 08 98    	mov.w     w1, [w0+30]

000025a0 <.L88>:
    }
    if (self->CTS) {
    25a0:	1e 00 78    	mov.w     [w14], w0
    25a2:	00 10 90    	mov.w     [w0+32], w0
    25a4:	00 00 e0    	cp0.w     w0
    25a6:	28 00 32    	bra       Z, 0x25f8 <.L85>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    25a8:	11 3a 80    	mov.w     0x742, w1
    25aa:	f0 0b 20    	mov.w     #0xbf, w0
    25ac:	00 81 60    	and.w     w1, w0, w2
    25ae:	60 04 20    	mov.w     #0x46, w0
    25b0:	71 05 20    	mov.w     #0x57, w1
    25b2:	23 74 20    	mov.w     #0x742, w3
    25b4:	80 49 78    	mov.b     w0, [w3]
    25b6:	81 49 78    	mov.b     w1, [w3]
    25b8:	82 49 78    	mov.b     w2, [w3]
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    25ba:	1e 00 78    	mov.w     [w14], w0
    25bc:	10 08 90    	mov.w     [w0+18], w0
    25be:	9e 00 78    	mov.w     [w14], w1
    25c0:	91 08 90    	mov.w     [w1+18], w1
    25c2:	11 01 78    	mov.w     [w1], w2
    25c4:	9e 00 78    	mov.w     [w14], w1
    25c6:	d1 50 90    	mov.b     [w1+21], w1
    25c8:	81 80 fb    	ze        w1, w1
    25ca:	f3 03 20    	mov.w     #0x3f, w3
    25cc:	81 18 dd    	sl.w      w3, w1, w1
    25ce:	82 80 70    	ior.w     w1, w2, w1
    25d0:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    25d2:	10 3a 80    	mov.w     0x742, w0
    25d4:	00 01 78    	mov.w     w0, w2
    25d6:	02 60 a0    	bset.w    w2, #0x6
    25d8:	60 04 20    	mov.w     #0x46, w0
    25da:	71 05 20    	mov.w     #0x57, w1
    25dc:	23 74 20    	mov.w     #0x742, w3
    25de:	80 49 78    	mov.b     w0, [w3]
    25e0:	81 49 78    	mov.b     w1, [w3]
    25e2:	82 49 78    	mov.b     w2, [w3]
        self->CTS->owner = NULL;
    25e4:	1e 00 78    	mov.w     [w14], w0
    25e6:	00 10 90    	mov.w     [w0+32], w0
    25e8:	80 00 eb    	clr.w     w1
    25ea:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalIn(self->CTS);
    25ec:	1e 00 78    	mov.w     [w14], w0
    25ee:	00 10 90    	mov.w     [w0+32], w0
    25f0:	d1 08 07    	rcall     0x3794 <_pin_digitalIn> <.LFB5> <.LFE4>
        self->CTS = NULL;
    25f2:	1e 00 78    	mov.w     [w14], w0
    25f4:	80 00 eb    	clr.w     w1
    25f6:	01 10 98    	mov.w     w1, [w0+32]

000025f8 <.L85>:
    }
}
    25f8:	00 80 fa    	ulnk      
    25fa:	00 00 06    	return    

000025fc <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    25fc:	04 00 fa    	lnk       #0x4
    25fe:	00 0f 78    	mov.w     w0, [w14]
    2600:	21 47 98    	mov.b     w1, [w14+2]
    if (self->putc)
    2602:	1e 00 78    	mov.w     [w14], w0
    2604:	40 18 90    	mov.w     [w0+56], w0
    2606:	00 00 e0    	cp0.w     w0
    2608:	05 00 32    	bra       Z, 0x2614 <.L90>
        self->putc(self, ch);
    260a:	1e 00 78    	mov.w     [w14], w0
    260c:	40 19 90    	mov.w     [w0+56], w2
    260e:	ae 40 90    	mov.b     [w14+2], w1
    2610:	1e 00 78    	mov.w     [w14], w0
    2612:	02 00 01    	call      w2

00002614 <.L90>:
}
    2614:	00 80 fa    	ulnk      
    2616:	00 00 06    	return    

00002618 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2618:	02 00 fa    	lnk       #0x2
    261a:	00 0f 78    	mov.w     w0, [w14]
    if (self->getc)
    261c:	1e 00 78    	mov.w     [w14], w0
    261e:	50 18 90    	mov.w     [w0+58], w0
    2620:	00 00 e0    	cp0.w     w0
    2622:	05 00 32    	bra       Z, 0x262e <.L93>
        return self->getc(self);
    2624:	1e 00 78    	mov.w     [w14], w0
    2626:	d0 18 90    	mov.w     [w0+58], w1
    2628:	1e 00 78    	mov.w     [w14], w0
    262a:	01 00 01    	call      w1
    262c:	01 00 37    	bra       0x2630 <.L94>

0000262e <.L93>:
    else
        return 0xFF;
    262e:	00 c0 eb    	setm.b    w0

00002630 <.L94>:
}
    2630:	00 80 fa    	ulnk      
    2632:	00 00 06    	return    

00002634 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2634:	02 00 fa    	lnk       #0x2
    2636:	00 0f 78    	mov.w     w0, [w14]
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2638:	1e 00 78    	mov.w     [w14], w0
    263a:	10 00 90    	mov.w     [w0+2], w0
    263c:	90 00 78    	mov.w     [w0], w1
    263e:	00 40 20    	mov.w     #0x400, w0
    2640:	00 80 60    	and.w     w1, w0, w0
    2642:	00 00 e0    	cp0.w     w0
    2644:	07 00 3a    	bra       NZ, 0x2654 <.L95>
        bitset(self->UxSTA, 10);        //   enable data transmission
    2646:	1e 00 78    	mov.w     [w14], w0
    2648:	10 00 90    	mov.w     [w0+2], w0
    264a:	9e 00 78    	mov.w     [w14], w1
    264c:	91 00 90    	mov.w     [w1+2], w1
    264e:	91 00 78    	mov.w     [w1], w1
    2650:	01 a0 a0    	bset.w    w1, #0xa
    2652:	01 08 78    	mov.w     w1, [w0]

00002654 <.L95>:
}
    2654:	00 80 fa    	ulnk      
    2656:	00 00 06    	return    

00002658 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2658:	04 00 fa    	lnk       #0x4
    265a:	00 0f 78    	mov.w     w0, [w14]
    265c:	11 07 98    	mov.w     w1, [w14+2]
    while (*str)
    265e:	08 00 37    	bra       0x2670 <.L98>

00002660 <.L99>:
        uart_putc(self, *str++);
    2660:	1e 00 90    	mov.w     [w14+2], w0
    2662:	10 40 78    	mov.b     [w0], w0
    2664:	9e 00 90    	mov.w     [w14+2], w1
    2666:	81 00 e8    	inc.w     w1, w1
    2668:	11 07 98    	mov.w     w1, [w14+2]
    266a:	80 40 78    	mov.b     w0, w1
    266c:	1e 00 78    	mov.w     [w14], w0
    266e:	c6 ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>

00002670 <.L98>:
    2670:	1e 00 90    	mov.w     [w14+2], w0
    2672:	10 40 78    	mov.b     [w0], w0
    2674:	00 04 e0    	cp0.b     w0
    2676:	f4 ff 3a    	bra       NZ, 0x2660 <.L99>
    uart_flushTxBuffer(self);
    2678:	1e 00 78    	mov.w     [w14], w0
    267a:	dc ff 07    	rcall     0x2634 <_uart_flushTxBuffer> <.LFB21> <.LFE20>
}
    267c:	00 80 fa    	ulnk      
    267e:	00 00 06    	return    

00002680 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2680:	0a 00 fa    	lnk       #0xa
    2682:	20 07 98    	mov.w     w0, [w14+4]
    2684:	31 07 98    	mov.w     w1, [w14+6]
    2686:	42 07 98    	mov.w     w2, [w14+8]
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2688:	4e 00 90    	mov.w     [w14+8], w0
    268a:	00 00 e0    	cp0.w     w0
    268c:	87 00 32    	bra       Z, 0x279c <.L113>
        return;

    if (len==1) {
    268e:	4e 00 90    	mov.w     [w14+8], w0
    2690:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2692:	04 00 3a    	bra       NZ, 0x269c <.L103>
        *str = '\0';
    2694:	3e 00 90    	mov.w     [w14+6], w0
    2696:	80 40 eb    	clr.b     w1
    2698:	01 48 78    	mov.b     w1, [w0]
        return;
    269a:	81 00 37    	bra       0x279e <.L100>

0000269c <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    269c:	b1 c1 b3    	mov.b     #0x1b, w1
    269e:	2e 00 90    	mov.w     [w14+4], w0
    26a0:	ad ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    uart_putc(self, '7');
    26a2:	71 c3 b3    	mov.b     #0x37, w1
    26a4:	2e 00 90    	mov.w     [w14+4], w0
    26a6:	aa ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    uart_flushTxBuffer(self);
    26a8:	2e 00 90    	mov.w     [w14+4], w0
    26aa:	c4 ff 07    	rcall     0x2634 <_uart_flushTxBuffer> <.LFB21> <.LFE20>
    start = str;
    26ac:	be 00 90    	mov.w     [w14+6], w1
    26ae:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    26b0:	ce 00 90    	mov.w     [w14+8], w1
    26b2:	01 0f 78    	mov.w     w1, [w14]
    26b4:	03 00 37    	bra       0x26bc <.L112>

000026b6 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    26b6:	00 00 00    	nop       
    26b8:	01 00 37    	bra       0x26bc <.L112>

000026ba <.L115>:
    26ba:	00 00 00    	nop       

000026bc <.L112>:
    26bc:	2e 00 90    	mov.w     [w14+4], w0
    26be:	ac ff 07    	rcall     0x2618 <_uart_getc> <.LFB20> <.LFE19>
    26c0:	be 00 90    	mov.w     [w14+6], w1
    26c2:	80 48 78    	mov.b     w0, [w1]
    26c4:	3e 00 90    	mov.w     [w14+6], w0
    26c6:	10 40 78    	mov.b     [w0], w0
    26c8:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    26ca:	0c 00 3a    	bra       NZ, 0x26e4 <.L104>
    *str = '\0';                            // Terminarte the string with null
    26cc:	3e 00 90    	mov.w     [w14+6], w0
    26ce:	80 40 eb    	clr.b     w1
    26d0:	01 48 78    	mov.b     w1, [w0]
    uart_putc(self, '\n');                  // Send newline and
    26d2:	a1 c0 b3    	mov.b     #0xa, w1
    26d4:	2e 00 90    	mov.w     [w14+4], w0
    26d6:	92 ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    uart_putc(self, '\r');                  //   carriage return
    26d8:	d1 c0 b3    	mov.b     #0xd, w1
    26da:	2e 00 90    	mov.w     [w14+4], w0
    26dc:	8f ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    uart_flushTxBuffer(self);
    26de:	2e 00 90    	mov.w     [w14+4], w0
    26e0:	a9 ff 07    	rcall     0x2634 <_uart_flushTxBuffer> <.LFB21> <.LFE20>
    26e2:	5d 00 37    	bra       0x279e <.L100>

000026e4 <.L104>:
    26e4:	3e 00 90    	mov.w     [w14+6], w0
    26e6:	10 40 78    	mov.b     [w0], w0
    26e8:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    26ea:	16 00 3a    	bra       NZ, 0x2718 <.L105>
    26ec:	b1 c1 b3    	mov.b     #0x1b, w1
    26ee:	2e 00 90    	mov.w     [w14+4], w0
    26f0:	85 ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    26f2:	81 c3 b3    	mov.b     #0x38, w1
    26f4:	2e 00 90    	mov.w     [w14+4], w0
    26f6:	82 ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    26f8:	b1 c1 b3    	mov.b     #0x1b, w1
    26fa:	2e 00 90    	mov.w     [w14+4], w0
    26fc:	7f ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    26fe:	b1 c5 b3    	mov.b     #0x5b, w1
    2700:	2e 00 90    	mov.w     [w14+4], w0
    2702:	7c ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    2704:	b1 c4 b3    	mov.b     #0x4b, w1
    2706:	2e 00 90    	mov.w     [w14+4], w0
    2708:	79 ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    270a:	2e 00 90    	mov.w     [w14+4], w0
    270c:	93 ff 07    	rcall     0x2634 <_uart_flushTxBuffer> <.LFB21> <.LFE20>
    270e:	9e 00 90    	mov.w     [w14+2], w1
    2710:	31 07 98    	mov.w     w1, [w14+6]
    2712:	ce 00 90    	mov.w     [w14+8], w1
    2714:	01 0f 78    	mov.w     w1, [w14]
    2716:	41 00 37    	bra       0x279a <.L106>

00002718 <.L105>:
    2718:	3e 00 90    	mov.w     [w14+6], w0
    271a:	10 40 78    	mov.b     [w0], w0
    271c:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    271e:	05 00 32    	bra       Z, 0x272a <.L107>
    2720:	3e 00 90    	mov.w     [w14+6], w0
    2722:	90 40 78    	mov.b     [w0], w1
    2724:	f0 c7 b3    	mov.b     #0x7f, w0
    2726:	80 cf 50    	sub.b     w1, w0, [w15]
    2728:	1a 00 3a    	bra       NZ, 0x275e <.L108>

0000272a <.L107>:
    272a:	be 00 90    	mov.w     [w14+6], w1
    272c:	1e 00 90    	mov.w     [w14+2], w0
    272e:	80 8f 50    	sub.w     w1, w0, [w15]
    2730:	10 00 36    	bra       LEU, 0x2752 <.L109>
    2732:	81 c0 b3    	mov.b     #0x8, w1
    2734:	2e 00 90    	mov.w     [w14+4], w0
    2736:	62 ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    2738:	01 c2 b3    	mov.b     #0x20, w1
    273a:	2e 00 90    	mov.w     [w14+4], w0
    273c:	5f ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    273e:	81 c0 b3    	mov.b     #0x8, w1
    2740:	2e 00 90    	mov.w     [w14+4], w0
    2742:	5c ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    2744:	2e 00 90    	mov.w     [w14+4], w0
    2746:	76 ff 07    	rcall     0x2634 <_uart_flushTxBuffer> <.LFB21> <.LFE20>
    2748:	3e 00 90    	mov.w     [w14+6], w0
    274a:	00 00 e9    	dec.w     w0, w0
    274c:	30 07 98    	mov.w     w0, [w14+6]
    274e:	1e 0f e8    	inc.w     [w14], [w14]
    2750:	05 00 37    	bra       0x275c <.L110>

00002752 <.L109>:
    2752:	71 c0 b3    	mov.b     #0x7, w1
    2754:	2e 00 90    	mov.w     [w14+4], w0
    2756:	52 ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    2758:	2e 00 90    	mov.w     [w14+4], w0
    275a:	6c ff 07    	rcall     0x2634 <_uart_flushTxBuffer> <.LFB21> <.LFE20>

0000275c <.L110>:
    275c:	1e 00 37    	bra       0x279a <.L106>

0000275e <.L108>:
    275e:	1e 00 78    	mov.w     [w14], w0
    2760:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2762:	06 00 3a    	bra       NZ, 0x2770 <.L111>
    2764:	71 c0 b3    	mov.b     #0x7, w1
    2766:	2e 00 90    	mov.w     [w14+4], w0
    2768:	49 ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    276a:	2e 00 90    	mov.w     [w14+4], w0
    276c:	63 ff 07    	rcall     0x2634 <_uart_flushTxBuffer> <.LFB21> <.LFE20>
    276e:	15 00 37    	bra       0x279a <.L106>

00002770 <.L111>:
    2770:	3e 00 90    	mov.w     [w14+6], w0
    2772:	10 40 78    	mov.b     [w0], w0
    2774:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2776:	9f ff 36    	bra       LEU, 0x26b6 <.L114>
    2778:	3e 00 90    	mov.w     [w14+6], w0
    277a:	90 40 78    	mov.b     [w0], w1
    277c:	e0 c7 b3    	mov.b     #0x7e, w0
    277e:	80 cf 50    	sub.b     w1, w0, [w15]
    2780:	9c ff 3e    	bra       GTU, 0x26ba <.L115>
    2782:	3e 00 90    	mov.w     [w14+6], w0
    2784:	10 40 78    	mov.b     [w0], w0
    2786:	80 40 78    	mov.b     w0, w1
    2788:	2e 00 90    	mov.w     [w14+4], w0
    278a:	38 ff 07    	rcall     0x25fc <_uart_putc> <.LFB19> <.LFE18>
    278c:	2e 00 90    	mov.w     [w14+4], w0
    278e:	52 ff 07    	rcall     0x2634 <_uart_flushTxBuffer> <.LFB21> <.LFE20>
    2790:	3e 00 90    	mov.w     [w14+6], w0
    2792:	00 00 e8    	inc.w     w0, w0
    2794:	30 07 98    	mov.w     w0, [w14+6]
    2796:	1e 0f e9    	dec.w     [w14], [w14]
    2798:	91 ff 37    	bra       0x26bc <.L112>

0000279a <.L106>:
    279a:	90 ff 37    	bra       0x26bc <.L112>

0000279c <.L113>:
    279c:	00 00 00    	nop       

0000279e <.L100>:
}
    279e:	00 80 fa    	ulnk      
    27a0:	00 00 06    	return    

000027a2 <_strm_CamelCase>:
    27a2:	04 00 fa    	lnk       #0x4
    27a4:	00 0f 78    	mov.w     w0, [w14]
    27a6:	21 47 98    	mov.b     w1, [w14+2]
    27a8:	32 47 98    	mov.b     w2, [w14+3]
    27aa:	14 00 37    	bra       0x27d4 <.L2>

000027ac <.L4>:
    27ac:	1e 00 78    	mov.w     [w14], w0
    27ae:	90 40 78    	mov.b     [w0], w1
    27b0:	00 c6 b3    	mov.b     #0x60, w0
    27b2:	80 cf 50    	sub.b     w1, w0, [w15]
    27b4:	0e 00 34    	bra       LE, 0x27d2 <.L3>
    27b6:	1e 00 78    	mov.w     [w14], w0
    27b8:	90 40 78    	mov.b     [w0], w1
    27ba:	a0 c7 b3    	mov.b     #0x7a, w0
    27bc:	80 cf 50    	sub.b     w1, w0, [w15]
    27be:	09 00 3c    	bra       GT, 0x27d2 <.L3>
    27c0:	1e 00 78    	mov.w     [w14], w0
    27c2:	10 40 78    	mov.b     [w0], w0
    27c4:	80 40 78    	mov.b     w0, w1
    27c6:	00 ce b3    	mov.b     #0xe0, w0
    27c8:	00 c0 40    	add.b     w1, w0, w0
    27ca:	80 40 78    	mov.b     w0, w1
    27cc:	1e 00 78    	mov.w     [w14], w0
    27ce:	01 48 78    	mov.b     w1, [w0]
    27d0:	1e 0f e8    	inc.w     [w14], [w14]

000027d2 <.L3>:
    27d2:	1e 0f e8    	inc.w     [w14], [w14]

000027d4 <.L2>:
    27d4:	1e 00 78    	mov.w     [w14], w0
    27d6:	10 40 78    	mov.b     [w0], w0
    27d8:	00 04 e0    	cp0.b     w0
    27da:	e8 ff 3a    	bra       NZ, 0x27ac <.L4>
    27dc:	00 80 fa    	ulnk      
    27de:	00 00 06    	return    

000027e0 <_strm_Caesar>:
    27e0:	04 00 fa    	lnk       #0x4
    27e2:	00 0f 78    	mov.w     w0, [w14]
    27e4:	21 47 98    	mov.b     w1, [w14+2]
    27e6:	32 47 98    	mov.b     w2, [w14+3]
    27e8:	1b 00 37    	bra       0x2820 <.L6>

000027ea <.L7>:
    27ea:	1e 0f e8    	inc.w     [w14], [w14]
    27ec:	1e 00 e9    	dec.w     [w14], w0
    27ee:	90 40 78    	mov.b     [w0], w1
    27f0:	00 c2 b3    	mov.b     #0x20, w0
    27f2:	80 cf 50    	sub.b     w1, w0, [w15]
    27f4:	15 00 32    	bra       Z, 0x2820 <.L6>
    27f6:	1e 00 78    	mov.w     [w14], w0
    27f8:	90 40 78    	mov.b     [w0], w1
    27fa:	00 c4 b3    	mov.b     #0x40, w0
    27fc:	80 cf 50    	sub.b     w1, w0, [w15]
    27fe:	10 00 34    	bra       LE, 0x2820 <.L6>
    2800:	1e 00 78    	mov.w     [w14], w0
    2802:	90 40 78    	mov.b     [w0], w1
    2804:	a0 c7 b3    	mov.b     #0x7a, w0
    2806:	80 cf 50    	sub.b     w1, w0, [w15]
    2808:	0b 00 3c    	bra       GT, 0x2820 <.L6>
    280a:	1e 00 78    	mov.w     [w14], w0
    280c:	10 40 78    	mov.b     [w0], w0
    280e:	80 40 78    	mov.b     w0, w1
    2810:	3e 40 90    	mov.b     [w14+3], w0
    2812:	00 c0 40    	add.b     w1, w0, w0
    2814:	80 40 78    	mov.b     w0, w1
    2816:	1e 00 78    	mov.w     [w14], w0
    2818:	01 48 78    	mov.b     w1, [w0]
    281a:	2e 40 90    	mov.b     [w14+2], w0
    281c:	00 80 fb    	ze        w0, w0
    281e:	1e 0f 40    	add.w     w0, [w14], [w14]

00002820 <.L6>:
    2820:	1e 00 78    	mov.w     [w14], w0
    2822:	10 40 78    	mov.b     [w0], w0
    2824:	00 04 e0    	cp0.b     w0
    2826:	e1 ff 3a    	bra       NZ, 0x27ea <.L7>
    2828:	00 80 fa    	ulnk      
    282a:	00 00 06    	return    

0000282c <_strm_Brnrd>:
    282c:	1c 00 fa    	lnk       #0x1c
    282e:	40 0f 98    	mov.w     w0, [w14+24]
    2830:	21 5f 98    	mov.b     w1, [w14+26]
    2832:	32 5f 98    	mov.b     w2, [w14+27]
    2834:	c0 ab 29    	mov.w     #0x9abc, w0
    2836:	e6 00 47    	add.w     w14, #0x6, w1
    2838:	10 00 09    	repeat    #0x10
    283a:	b0 58 78    	mov.b     [w0++], [w1++]
    283c:	10 01 b1    	sub.w     #0x11, w0
    283e:	66 0f 47    	add.w     w14, #0x6, [w14]
    2840:	9e 00 78    	mov.w     [w14], w1
    2842:	11 07 98    	mov.w     w1, [w14+2]
    2844:	ce 08 90    	mov.w     [w14+24], w1
    2846:	21 07 98    	mov.w     w1, [w14+4]
    2848:	3e 00 37    	bra       0x28c6 <.L9>

0000284a <.L12>:
    284a:	4e 08 90    	mov.w     [w14+24], w0
    284c:	90 40 78    	mov.b     [w0], w1
    284e:	10 c6 b3    	mov.b     #0x61, w0
    2850:	80 cf 50    	sub.b     w1, w0, [w15]
    2852:	2d 00 32    	bra       Z, 0x28ae <.L10>
    2854:	4e 08 90    	mov.w     [w14+24], w0
    2856:	90 40 78    	mov.b     [w0], w1
    2858:	50 c6 b3    	mov.b     #0x65, w0
    285a:	80 cf 50    	sub.b     w1, w0, [w15]
    285c:	28 00 32    	bra       Z, 0x28ae <.L10>
    285e:	4e 08 90    	mov.w     [w14+24], w0
    2860:	90 40 78    	mov.b     [w0], w1
    2862:	90 c6 b3    	mov.b     #0x69, w0
    2864:	80 cf 50    	sub.b     w1, w0, [w15]
    2866:	23 00 32    	bra       Z, 0x28ae <.L10>
    2868:	4e 08 90    	mov.w     [w14+24], w0
    286a:	90 40 78    	mov.b     [w0], w1
    286c:	f0 c6 b3    	mov.b     #0x6f, w0
    286e:	80 cf 50    	sub.b     w1, w0, [w15]
    2870:	1e 00 32    	bra       Z, 0x28ae <.L10>
    2872:	4e 08 90    	mov.w     [w14+24], w0
    2874:	90 40 78    	mov.b     [w0], w1
    2876:	50 c7 b3    	mov.b     #0x75, w0
    2878:	80 cf 50    	sub.b     w1, w0, [w15]
    287a:	19 00 32    	bra       Z, 0x28ae <.L10>
    287c:	4e 08 90    	mov.w     [w14+24], w0
    287e:	90 40 78    	mov.b     [w0], w1
    2880:	10 c4 b3    	mov.b     #0x41, w0
    2882:	80 cf 50    	sub.b     w1, w0, [w15]
    2884:	14 00 32    	bra       Z, 0x28ae <.L10>
    2886:	4e 08 90    	mov.w     [w14+24], w0
    2888:	90 40 78    	mov.b     [w0], w1
    288a:	50 c4 b3    	mov.b     #0x45, w0
    288c:	80 cf 50    	sub.b     w1, w0, [w15]
    288e:	0f 00 32    	bra       Z, 0x28ae <.L10>
    2890:	4e 08 90    	mov.w     [w14+24], w0
    2892:	90 40 78    	mov.b     [w0], w1
    2894:	90 c4 b3    	mov.b     #0x49, w0
    2896:	80 cf 50    	sub.b     w1, w0, [w15]
    2898:	0a 00 32    	bra       Z, 0x28ae <.L10>
    289a:	4e 08 90    	mov.w     [w14+24], w0
    289c:	90 40 78    	mov.b     [w0], w1
    289e:	f0 c4 b3    	mov.b     #0x4f, w0
    28a0:	80 cf 50    	sub.b     w1, w0, [w15]
    28a2:	05 00 32    	bra       Z, 0x28ae <.L10>
    28a4:	4e 08 90    	mov.w     [w14+24], w0
    28a6:	90 40 78    	mov.b     [w0], w1
    28a8:	50 c5 b3    	mov.b     #0x55, w0
    28aa:	80 cf 50    	sub.b     w1, w0, [w15]
    28ac:	04 00 3a    	bra       NZ, 0x28b6 <.L11>

000028ae <.L10>:
    28ae:	4e 08 90    	mov.w     [w14+24], w0
    28b0:	00 00 e8    	inc.w     w0, w0
    28b2:	40 0f 98    	mov.w     w0, [w14+24]
    28b4:	08 00 37    	bra       0x28c6 <.L9>

000028b6 <.L11>:
    28b6:	4e 08 90    	mov.w     [w14+24], w0
    28b8:	90 40 78    	mov.b     [w0], w1
    28ba:	1e 00 78    	mov.w     [w14], w0
    28bc:	01 48 78    	mov.b     w1, [w0]
    28be:	4e 08 90    	mov.w     [w14+24], w0
    28c0:	00 00 e8    	inc.w     w0, w0
    28c2:	40 0f 98    	mov.w     w0, [w14+24]
    28c4:	1e 0f e8    	inc.w     [w14], [w14]

000028c6 <.L9>:
    28c6:	4e 08 90    	mov.w     [w14+24], w0
    28c8:	10 40 78    	mov.b     [w0], w0
    28ca:	00 04 e0    	cp0.b     w0
    28cc:	be ff 3a    	bra       NZ, 0x284a <.L12>
    28ce:	9e 00 90    	mov.w     [w14+2], w1
    28d0:	2e 00 90    	mov.w     [w14+4], w0
    28d2:	9b f6 07    	rcall     0x160a <_strcpy>
    28d4:	00 80 fa    	ulnk      
    28d6:	00 00 06    	return    

000028d8 <_strm_Leet>:
    28d8:	04 00 fa    	lnk       #0x4
    28da:	00 0f 78    	mov.w     w0, [w14]
    28dc:	21 47 98    	mov.b     w1, [w14+2]
    28de:	32 47 98    	mov.b     w2, [w14+3]
    28e0:	62 00 37    	bra       0x29a6 <.L14>

000028e2 <.L29>:
    28e2:	1e 00 78    	mov.w     [w14], w0
    28e4:	90 40 78    	mov.b     [w0], w1
    28e6:	10 c4 b3    	mov.b     #0x41, w0
    28e8:	80 cf 50    	sub.b     w1, w0, [w15]
    28ea:	05 00 32    	bra       Z, 0x28f6 <.L15>
    28ec:	1e 00 78    	mov.w     [w14], w0
    28ee:	90 40 78    	mov.b     [w0], w1
    28f0:	10 c6 b3    	mov.b     #0x61, w0
    28f2:	80 cf 50    	sub.b     w1, w0, [w15]
    28f4:	04 00 3a    	bra       NZ, 0x28fe <.L16>

000028f6 <.L15>:
    28f6:	1e 00 78    	mov.w     [w14], w0
    28f8:	41 c3 b3    	mov.b     #0x34, w1
    28fa:	01 48 78    	mov.b     w1, [w0]
    28fc:	53 00 37    	bra       0x29a4 <.L17>

000028fe <.L16>:
    28fe:	1e 00 78    	mov.w     [w14], w0
    2900:	90 40 78    	mov.b     [w0], w1
    2902:	50 c4 b3    	mov.b     #0x45, w0
    2904:	80 cf 50    	sub.b     w1, w0, [w15]
    2906:	05 00 32    	bra       Z, 0x2912 <.L18>
    2908:	1e 00 78    	mov.w     [w14], w0
    290a:	90 40 78    	mov.b     [w0], w1
    290c:	50 c6 b3    	mov.b     #0x65, w0
    290e:	80 cf 50    	sub.b     w1, w0, [w15]
    2910:	04 00 3a    	bra       NZ, 0x291a <.L19>

00002912 <.L18>:
    2912:	1e 00 78    	mov.w     [w14], w0
    2914:	31 c3 b3    	mov.b     #0x33, w1
    2916:	01 48 78    	mov.b     w1, [w0]
    2918:	45 00 37    	bra       0x29a4 <.L17>

0000291a <.L19>:
    291a:	1e 00 78    	mov.w     [w14], w0
    291c:	90 40 78    	mov.b     [w0], w1
    291e:	70 c4 b3    	mov.b     #0x47, w0
    2920:	80 cf 50    	sub.b     w1, w0, [w15]
    2922:	05 00 32    	bra       Z, 0x292e <.L20>
    2924:	1e 00 78    	mov.w     [w14], w0
    2926:	90 40 78    	mov.b     [w0], w1
    2928:	70 c6 b3    	mov.b     #0x67, w0
    292a:	80 cf 50    	sub.b     w1, w0, [w15]
    292c:	04 00 3a    	bra       NZ, 0x2936 <.L21>

0000292e <.L20>:
    292e:	1e 00 78    	mov.w     [w14], w0
    2930:	61 c3 b3    	mov.b     #0x36, w1
    2932:	01 48 78    	mov.b     w1, [w0]
    2934:	37 00 37    	bra       0x29a4 <.L17>

00002936 <.L21>:
    2936:	1e 00 78    	mov.w     [w14], w0
    2938:	90 40 78    	mov.b     [w0], w1
    293a:	c0 c4 b3    	mov.b     #0x4c, w0
    293c:	80 cf 50    	sub.b     w1, w0, [w15]
    293e:	05 00 32    	bra       Z, 0x294a <.L22>
    2940:	1e 00 78    	mov.w     [w14], w0
    2942:	90 40 78    	mov.b     [w0], w1
    2944:	c0 c6 b3    	mov.b     #0x6c, w0
    2946:	80 cf 50    	sub.b     w1, w0, [w15]
    2948:	04 00 3a    	bra       NZ, 0x2952 <.L23>

0000294a <.L22>:
    294a:	1e 00 78    	mov.w     [w14], w0
    294c:	11 c3 b3    	mov.b     #0x31, w1
    294e:	01 48 78    	mov.b     w1, [w0]
    2950:	29 00 37    	bra       0x29a4 <.L17>

00002952 <.L23>:
    2952:	1e 00 78    	mov.w     [w14], w0
    2954:	90 40 78    	mov.b     [w0], w1
    2956:	f0 c4 b3    	mov.b     #0x4f, w0
    2958:	80 cf 50    	sub.b     w1, w0, [w15]
    295a:	05 00 32    	bra       Z, 0x2966 <.L24>
    295c:	1e 00 78    	mov.w     [w14], w0
    295e:	90 40 78    	mov.b     [w0], w1
    2960:	f0 c6 b3    	mov.b     #0x6f, w0
    2962:	80 cf 50    	sub.b     w1, w0, [w15]
    2964:	04 00 3a    	bra       NZ, 0x296e <.L25>

00002966 <.L24>:
    2966:	1e 00 78    	mov.w     [w14], w0
    2968:	01 c3 b3    	mov.b     #0x30, w1
    296a:	01 48 78    	mov.b     w1, [w0]
    296c:	1b 00 37    	bra       0x29a4 <.L17>

0000296e <.L25>:
    296e:	1e 00 78    	mov.w     [w14], w0
    2970:	90 40 78    	mov.b     [w0], w1
    2972:	30 c5 b3    	mov.b     #0x53, w0
    2974:	80 cf 50    	sub.b     w1, w0, [w15]
    2976:	05 00 32    	bra       Z, 0x2982 <.L26>
    2978:	1e 00 78    	mov.w     [w14], w0
    297a:	90 40 78    	mov.b     [w0], w1
    297c:	30 c7 b3    	mov.b     #0x73, w0
    297e:	80 cf 50    	sub.b     w1, w0, [w15]
    2980:	04 00 3a    	bra       NZ, 0x298a <.L27>

00002982 <.L26>:
    2982:	1e 00 78    	mov.w     [w14], w0
    2984:	51 c3 b3    	mov.b     #0x35, w1
    2986:	01 48 78    	mov.b     w1, [w0]
    2988:	0d 00 37    	bra       0x29a4 <.L17>

0000298a <.L27>:
    298a:	1e 00 78    	mov.w     [w14], w0
    298c:	90 40 78    	mov.b     [w0], w1
    298e:	40 c5 b3    	mov.b     #0x54, w0
    2990:	80 cf 50    	sub.b     w1, w0, [w15]
    2992:	05 00 32    	bra       Z, 0x299e <.L28>
    2994:	1e 00 78    	mov.w     [w14], w0
    2996:	90 40 78    	mov.b     [w0], w1
    2998:	40 c7 b3    	mov.b     #0x74, w0
    299a:	80 cf 50    	sub.b     w1, w0, [w15]
    299c:	03 00 3a    	bra       NZ, 0x29a4 <.L17>

0000299e <.L28>:
    299e:	1e 00 78    	mov.w     [w14], w0
    29a0:	71 c3 b3    	mov.b     #0x37, w1
    29a2:	01 48 78    	mov.b     w1, [w0]

000029a4 <.L17>:
    29a4:	1e 0f e8    	inc.w     [w14], [w14]

000029a6 <.L14>:
    29a6:	1e 00 78    	mov.w     [w14], w0
    29a8:	10 40 78    	mov.b     [w0], w0
    29aa:	00 04 e0    	cp0.b     w0
    29ac:	9a ff 3a    	bra       NZ, 0x28e2 <.L29>
    29ae:	00 80 fa    	ulnk      
    29b0:	00 00 06    	return    

000029b2 <_strm_Pig>:
    29b2:	3c 00 fa    	lnk       #0x3c
    29b4:	40 1f 98    	mov.w     w0, [w14+56]
    29b6:	21 7f 98    	mov.b     w1, [w14+58]
    29b8:	32 7f 98    	mov.b     w2, [w14+59]
    29ba:	4e 18 90    	mov.w     [w14+56], w0
    29bc:	d6 02 07    	rcall     0x2f6a <_strm_Length> <.LFB13> <.LFE12>
    29be:	40 4f 98    	mov.b     w0, [w14+12]
    29c0:	72 00 47    	add.w     w14, #0x12, w0
    29c2:	80 00 78    	mov.w     w0, w1
    29c4:	4e 18 90    	mov.w     [w14+56], w0
    29c6:	9f 02 07    	rcall     0x2f06 <_strm_Spaces> <.LFB12> <.LFE11>
    29c8:	50 4f 98    	mov.b     w0, [w14+13]
    29ca:	4e 48 90    	mov.b     [w14+12], w0
    29cc:	80 80 fb    	ze        w0, w1
    29ce:	5e 48 90    	mov.b     [w14+13], w0
    29d0:	00 80 fb    	ze        w0, w0
    29d2:	00 00 e8    	inc.w     w0, w0
    29d4:	00 00 40    	add.w     w0, w0, w0
    29d6:	00 80 40    	add.w     w1, w0, w0
    29d8:	f0 0f 50    	sub.w     w0, #0x10, [w15]
    29da:	bc 00 3c    	bra       GT, 0x2b54 <.L30> <.LBE2>

000029dc <.LBB2>:
    29dc:	c0 ab 29    	mov.w     #0x9abc, w0
    29de:	61 02 20    	mov.w     #0x26, w1
    29e0:	81 00 47    	add.w     w14, w1, w1
    29e2:	10 00 09    	repeat    #0x10
    29e4:	b0 58 78    	mov.b     [w0++], [w1++]
    29e6:	10 01 b1    	sub.w     #0x11, w0
    29e8:	61 02 20    	mov.w     #0x26, w1
    29ea:	01 0f 47    	add.w     w14, w1, [w14]
    29ec:	60 02 20    	mov.w     #0x26, w0
    29ee:	0e 00 40    	add.w     w0, w14, w0
    29f0:	70 07 98    	mov.w     w0, [w14+14]
    29f2:	10 c0 b3    	mov.b     #0x1, w0
    29f4:	20 47 98    	mov.b     w0, [w14+2]
    29f6:	ce 18 90    	mov.w     [w14+56], w1
    29f8:	21 07 98    	mov.w     w1, [w14+4]
    29fa:	ce 18 90    	mov.w     [w14+56], w1
    29fc:	01 0f 98    	mov.w     w1, [w14+16]
    29fe:	00 40 eb    	clr.b     w0
    2a00:	60 47 98    	mov.b     w0, [w14+6]
    2a02:	00 40 eb    	clr.b     w0
    2a04:	70 47 98    	mov.b     w0, [w14+7]
    2a06:	5d 00 37    	bra       0x2ac2 <.L32>

00002a08 <.L42>:
    2a08:	2e 40 90    	mov.b     [w14+2], w0
    2a0a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2a0c:	07 00 3a    	bra       NZ, 0x2a1c <.L33>
    2a0e:	2e 00 90    	mov.w     [w14+4], w0
    2a10:	90 40 78    	mov.b     [w0], w1
    2a12:	31 47 98    	mov.b     w1, [w14+3]
    2a14:	00 40 eb    	clr.b     w0
    2a16:	20 47 98    	mov.b     w0, [w14+2]
    2a18:	00 40 eb    	clr.b     w0
    2a1a:	60 47 98    	mov.b     w0, [w14+6]

00002a1c <.L33>:
    2a1c:	4e 18 90    	mov.w     [w14+56], w0
    2a1e:	90 40 78    	mov.b     [w0], w1
    2a20:	00 c2 b3    	mov.b     #0x20, w0
    2a22:	80 cf 50    	sub.b     w1, w0, [w15]
    2a24:	48 00 3a    	bra       NZ, 0x2ab6 <.L34> <.LBE3>

00002a26 <.LBB3>:
    2a26:	00 40 eb    	clr.b     w0
    2a28:	00 4f 98    	mov.b     w0, [w14+8]
    2a2a:	11 00 37    	bra       0x2a4e <.L35>

00002a2c <.L37>:
    2a2c:	2e 00 90    	mov.w     [w14+4], w0
    2a2e:	00 00 e8    	inc.w     w0, w0
    2a30:	20 07 98    	mov.w     w0, [w14+4]
    2a32:	2e 00 90    	mov.w     [w14+4], w0
    2a34:	90 40 78    	mov.b     [w0], w1
    2a36:	1e 00 78    	mov.w     [w14], w0
    2a38:	01 48 78    	mov.b     w1, [w0]
    2a3a:	7e 40 90    	mov.b     [w14+7], w0
    2a3c:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    2a3e:	04 00 3e    	bra       GTU, 0x2a48 <.L36>
    2a40:	1e 0f e8    	inc.w     [w14], [w14]
    2a42:	7e 40 90    	mov.b     [w14+7], w0
    2a44:	00 40 e8    	inc.b     w0, w0
    2a46:	70 47 98    	mov.b     w0, [w14+7]

00002a48 <.L36>:
    2a48:	0e 48 90    	mov.b     [w14+8], w0
    2a4a:	00 40 e8    	inc.b     w0, w0
    2a4c:	00 4f 98    	mov.b     w0, [w14+8]

00002a4e <.L35>:
    2a4e:	0e 48 90    	mov.b     [w14+8], w0
    2a50:	80 80 fb    	ze        w0, w1
    2a52:	6e 40 90    	mov.b     [w14+6], w0
    2a54:	00 80 fb    	ze        w0, w0
    2a56:	00 00 e9    	dec.w     w0, w0
    2a58:	80 8f 50    	sub.w     w1, w0, [w15]
    2a5a:	e8 ff 35    	bra       LT, 0x2a2c <.L37>
    2a5c:	1e 00 78    	mov.w     [w14], w0
    2a5e:	be 40 90    	mov.b     [w14+3], w1
    2a60:	01 48 78    	mov.b     w1, [w0]
    2a62:	7e 40 90    	mov.b     [w14+7], w0
    2a64:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    2a66:	04 00 3e    	bra       GTU, 0x2a70 <.L38>
    2a68:	1e 0f e8    	inc.w     [w14], [w14]
    2a6a:	7e 40 90    	mov.b     [w14+7], w0
    2a6c:	00 40 e8    	inc.b     w0, w0
    2a6e:	70 47 98    	mov.b     w0, [w14+7]

00002a70 <.L38>:
    2a70:	1e 00 78    	mov.w     [w14], w0
    2a72:	11 c6 b3    	mov.b     #0x61, w1
    2a74:	01 48 78    	mov.b     w1, [w0]
    2a76:	7e 40 90    	mov.b     [w14+7], w0
    2a78:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    2a7a:	04 00 3e    	bra       GTU, 0x2a84 <.L39>
    2a7c:	1e 0f e8    	inc.w     [w14], [w14]
    2a7e:	7e 40 90    	mov.b     [w14+7], w0
    2a80:	00 40 e8    	inc.b     w0, w0
    2a82:	70 47 98    	mov.b     w0, [w14+7]

00002a84 <.L39>:
    2a84:	1e 00 78    	mov.w     [w14], w0
    2a86:	91 c7 b3    	mov.b     #0x79, w1
    2a88:	01 48 78    	mov.b     w1, [w0]
    2a8a:	7e 40 90    	mov.b     [w14+7], w0
    2a8c:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    2a8e:	04 00 3e    	bra       GTU, 0x2a98 <.L40>
    2a90:	1e 0f e8    	inc.w     [w14], [w14]
    2a92:	7e 40 90    	mov.b     [w14+7], w0
    2a94:	00 40 e8    	inc.b     w0, w0
    2a96:	70 47 98    	mov.b     w0, [w14+7]

00002a98 <.L40>:
    2a98:	1e 00 78    	mov.w     [w14], w0
    2a9a:	01 c2 b3    	mov.b     #0x20, w1
    2a9c:	01 48 78    	mov.b     w1, [w0]
    2a9e:	7e 40 90    	mov.b     [w14+7], w0
    2aa0:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    2aa2:	04 00 3e    	bra       GTU, 0x2aac <.L41>
    2aa4:	1e 0f e8    	inc.w     [w14], [w14]
    2aa6:	7e 40 90    	mov.b     [w14+7], w0
    2aa8:	00 40 e8    	inc.b     w0, w0
    2aaa:	70 47 98    	mov.b     w0, [w14+7]

00002aac <.L41>:
    2aac:	10 c0 b3    	mov.b     #0x1, w0
    2aae:	20 47 98    	mov.b     w0, [w14+2]
    2ab0:	2e 00 90    	mov.w     [w14+4], w0
    2ab2:	00 80 e8    	inc2.w    w0, w0
    2ab4:	20 07 98    	mov.w     w0, [w14+4]

00002ab6 <.L34>:
    2ab6:	4e 18 90    	mov.w     [w14+56], w0
    2ab8:	00 00 e8    	inc.w     w0, w0
    2aba:	40 1f 98    	mov.w     w0, [w14+56]
    2abc:	6e 40 90    	mov.b     [w14+6], w0
    2abe:	00 40 e8    	inc.b     w0, w0
    2ac0:	60 47 98    	mov.b     w0, [w14+6]

00002ac2 <.L32>:
    2ac2:	4e 18 90    	mov.w     [w14+56], w0
    2ac4:	10 40 78    	mov.b     [w0], w0
    2ac6:	00 04 e0    	cp0.b     w0
    2ac8:	9f ff 3a    	bra       NZ, 0x2a08 <.L42>
    2aca:	00 00 eb    	clr.w     w0
    2acc:	50 07 98    	mov.w     w0, [w14+10]
    2ace:	11 00 37    	bra       0x2af2 <.L43>

00002ad0 <.L45>:
    2ad0:	2e 00 90    	mov.w     [w14+4], w0
    2ad2:	00 00 e8    	inc.w     w0, w0
    2ad4:	20 07 98    	mov.w     w0, [w14+4]
    2ad6:	2e 00 90    	mov.w     [w14+4], w0
    2ad8:	90 40 78    	mov.b     [w0], w1
    2ada:	1e 00 78    	mov.w     [w14], w0
    2adc:	01 48 78    	mov.b     w1, [w0]
    2ade:	7e 40 90    	mov.b     [w14+7], w0
    2ae0:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    2ae2:	04 00 3e    	bra       GTU, 0x2aec <.L44>
    2ae4:	1e 0f e8    	inc.w     [w14], [w14]
    2ae6:	7e 40 90    	mov.b     [w14+7], w0
    2ae8:	00 40 e8    	inc.b     w0, w0
    2aea:	70 47 98    	mov.b     w0, [w14+7]

00002aec <.L44>:
    2aec:	5e 00 90    	mov.w     [w14+10], w0
    2aee:	00 00 e8    	inc.w     w0, w0
    2af0:	50 07 98    	mov.w     w0, [w14+10]

00002af2 <.L43>:
    2af2:	6e 40 90    	mov.b     [w14+6], w0
    2af4:	00 80 fb    	ze        w0, w0
    2af6:	80 00 e9    	dec.w     w0, w1
    2af8:	5e 00 90    	mov.w     [w14+10], w0
    2afa:	80 8f 50    	sub.w     w1, w0, [w15]
    2afc:	e9 ff 3c    	bra       GT, 0x2ad0 <.L45>
    2afe:	1e 00 78    	mov.w     [w14], w0
    2b00:	be 40 90    	mov.b     [w14+3], w1
    2b02:	01 48 78    	mov.b     w1, [w0]
    2b04:	7e 40 90    	mov.b     [w14+7], w0
    2b06:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    2b08:	04 00 3e    	bra       GTU, 0x2b12 <.L46>
    2b0a:	1e 0f e8    	inc.w     [w14], [w14]
    2b0c:	7e 40 90    	mov.b     [w14+7], w0
    2b0e:	00 40 e8    	inc.b     w0, w0
    2b10:	70 47 98    	mov.b     w0, [w14+7]

00002b12 <.L46>:
    2b12:	1e 00 78    	mov.w     [w14], w0
    2b14:	11 c6 b3    	mov.b     #0x61, w1
    2b16:	01 48 78    	mov.b     w1, [w0]
    2b18:	7e 40 90    	mov.b     [w14+7], w0
    2b1a:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    2b1c:	04 00 3e    	bra       GTU, 0x2b26 <.L47>
    2b1e:	1e 0f e8    	inc.w     [w14], [w14]
    2b20:	7e 40 90    	mov.b     [w14+7], w0
    2b22:	00 40 e8    	inc.b     w0, w0
    2b24:	70 47 98    	mov.b     w0, [w14+7]

00002b26 <.L47>:
    2b26:	1e 00 78    	mov.w     [w14], w0
    2b28:	91 c7 b3    	mov.b     #0x79, w1
    2b2a:	01 48 78    	mov.b     w1, [w0]
    2b2c:	7e 40 90    	mov.b     [w14+7], w0
    2b2e:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    2b30:	04 00 3e    	bra       GTU, 0x2b3a <.L48>
    2b32:	1e 0f e8    	inc.w     [w14], [w14]
    2b34:	7e 40 90    	mov.b     [w14+7], w0
    2b36:	00 40 e8    	inc.b     w0, w0
    2b38:	70 47 98    	mov.b     w0, [w14+7]

00002b3a <.L48>:
    2b3a:	1e 00 78    	mov.w     [w14], w0
    2b3c:	01 c2 b3    	mov.b     #0x20, w1
    2b3e:	01 48 78    	mov.b     w1, [w0]
    2b40:	7e 40 90    	mov.b     [w14+7], w0
    2b42:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    2b44:	04 00 3e    	bra       GTU, 0x2b4e <.L49>
    2b46:	1e 0f e8    	inc.w     [w14], [w14]
    2b48:	7e 40 90    	mov.b     [w14+7], w0
    2b4a:	00 40 e8    	inc.b     w0, w0
    2b4c:	70 47 98    	mov.b     w0, [w14+7]

00002b4e <.L49>:
    2b4e:	fe 00 90    	mov.w     [w14+14], w1
    2b50:	0e 08 90    	mov.w     [w14+16], w0
    2b52:	5b f5 07    	rcall     0x160a <_strcpy>

00002b54 <.L30>:
    2b54:	00 80 fa    	ulnk      
    2b56:	00 00 06    	return    

00002b58 <_strm_Missing>:
    2b58:	1e 00 fa    	lnk       #0x1e
    2b5a:	50 0f 98    	mov.w     w0, [w14+26]
    2b5c:	41 5f 98    	mov.b     w1, [w14+28]
    2b5e:	52 5f 98    	mov.b     w2, [w14+29]
    2b60:	c0 ab 29    	mov.w     #0x9abc, w0
    2b62:	e8 00 47    	add.w     w14, #0x8, w1
    2b64:	10 00 09    	repeat    #0x10
    2b66:	b0 58 78    	mov.b     [w0++], [w1++]
    2b68:	10 01 b1    	sub.w     #0x11, w0
    2b6a:	68 0f 47    	add.w     w14, #0x8, [w14]
    2b6c:	1e 01 78    	mov.w     [w14], w2
    2b6e:	22 07 98    	mov.w     w2, [w14+4]
    2b70:	de 08 90    	mov.w     [w14+26], w1
    2b72:	31 07 98    	mov.w     w1, [w14+6]
    2b74:	10 c0 b3    	mov.b     #0x1, w0
    2b76:	20 47 98    	mov.b     w0, [w14+2]
    2b78:	25 00 37    	bra       0x2bc4 <.L51>

00002b7a <.L54>:
    2b7a:	2e 40 90    	mov.b     [w14+2], w0
    2b7c:	80 80 fb    	ze        w0, w1
    2b7e:	4e 58 90    	mov.b     [w14+28], w0
    2b80:	00 80 fb    	ze        w0, w0
    2b82:	00 01 78    	mov.w     w0, w2
    2b84:	11 00 09    	repeat    #0x11
    2b86:	82 80 d8    	div.uw    w1, w2
    2b88:	80 00 fd    	exch      w0, w1
    2b8a:	00 40 78    	mov.b     w0, w0
    2b8c:	00 04 e0    	cp0.b     w0
    2b8e:	0f 00 3a    	bra       NZ, 0x2bae <.L52>
    2b90:	5e 08 90    	mov.w     [w14+26], w0
    2b92:	90 40 78    	mov.b     [w0], w1
    2b94:	00 c2 b3    	mov.b     #0x20, w0
    2b96:	80 cf 50    	sub.b     w1, w0, [w15]
    2b98:	12 00 32    	bra       Z, 0x2bbe <.L53>
    2b9a:	5e 08 90    	mov.w     [w14+26], w0
    2b9c:	00 00 e9    	dec.w     w0, w0
    2b9e:	90 40 78    	mov.b     [w0], w1
    2ba0:	00 c2 b3    	mov.b     #0x20, w0
    2ba2:	80 cf 50    	sub.b     w1, w0, [w15]
    2ba4:	0c 00 32    	bra       Z, 0x2bbe <.L53>
    2ba6:	5e 08 90    	mov.w     [w14+26], w0
    2ba8:	00 00 e8    	inc.w     w0, w0
    2baa:	50 0f 98    	mov.w     w0, [w14+26]
    2bac:	08 00 37    	bra       0x2bbe <.L53>

00002bae <.L52>:
    2bae:	5e 08 90    	mov.w     [w14+26], w0
    2bb0:	90 40 78    	mov.b     [w0], w1
    2bb2:	1e 00 78    	mov.w     [w14], w0
    2bb4:	01 48 78    	mov.b     w1, [w0]
    2bb6:	5e 08 90    	mov.w     [w14+26], w0
    2bb8:	00 00 e8    	inc.w     w0, w0
    2bba:	50 0f 98    	mov.w     w0, [w14+26]
    2bbc:	1e 0f e8    	inc.w     [w14], [w14]

00002bbe <.L53>:
    2bbe:	2e 40 90    	mov.b     [w14+2], w0
    2bc0:	00 40 e8    	inc.b     w0, w0
    2bc2:	20 47 98    	mov.b     w0, [w14+2]

00002bc4 <.L51>:
    2bc4:	5e 08 90    	mov.w     [w14+26], w0
    2bc6:	10 40 78    	mov.b     [w0], w0
    2bc8:	00 04 e0    	cp0.b     w0
    2bca:	d7 ff 3a    	bra       NZ, 0x2b7a <.L54>
    2bcc:	ae 00 90    	mov.w     [w14+4], w1
    2bce:	3e 00 90    	mov.w     [w14+6], w0
    2bd0:	1c f5 07    	rcall     0x160a <_strcpy>
    2bd2:	00 80 fa    	ulnk      
    2bd4:	00 00 06    	return    

00002bd6 <_strm_Reverse>:
    2bd6:	1e 00 fa    	lnk       #0x1e
    2bd8:	50 0f 98    	mov.w     w0, [w14+26]
    2bda:	41 5f 98    	mov.b     w1, [w14+28]
    2bdc:	52 5f 98    	mov.b     w2, [w14+29]
    2bde:	00 40 eb    	clr.b     w0
    2be0:	00 4f 78    	mov.b     w0, [w14]
    2be2:	c0 ab 29    	mov.w     #0x9abc, w0
    2be4:	e8 00 47    	add.w     w14, #0x8, w1
    2be6:	10 00 09    	repeat    #0x10
    2be8:	b0 58 78    	mov.b     [w0++], [w1++]
    2bea:	10 01 b1    	sub.w     #0x11, w0
    2bec:	68 00 47    	add.w     w14, #0x8, w0
    2bee:	10 07 98    	mov.w     w0, [w14+2]
    2bf0:	9e 00 90    	mov.w     [w14+2], w1
    2bf2:	21 07 98    	mov.w     w1, [w14+4]
    2bf4:	de 08 90    	mov.w     [w14+26], w1
    2bf6:	31 07 98    	mov.w     w1, [w14+6]
    2bf8:	04 00 37    	bra       0x2c02 <.L56>

00002bfa <.L57>:
    2bfa:	5e 08 90    	mov.w     [w14+26], w0
    2bfc:	00 00 e8    	inc.w     w0, w0
    2bfe:	50 0f 98    	mov.w     w0, [w14+26]
    2c00:	1e 4f e8    	inc.b     [w14], [w14]

00002c02 <.L56>:
    2c02:	5e 08 90    	mov.w     [w14+26], w0
    2c04:	10 40 78    	mov.b     [w0], w0
    2c06:	00 04 e0    	cp0.b     w0
    2c08:	f8 ff 3a    	bra       NZ, 0x2bfa <.L57>
    2c0a:	be 00 90    	mov.w     [w14+6], w1
    2c0c:	51 0f 98    	mov.w     w1, [w14+26]
    2c0e:	1e 80 fb    	ze        [w14], w0
    2c10:	00 00 e9    	dec.w     w0, w0
    2c12:	9e 00 90    	mov.w     [w14+2], w1
    2c14:	00 80 40    	add.w     w1, w0, w0
    2c16:	10 07 98    	mov.w     w0, [w14+2]
    2c18:	0a 00 37    	bra       0x2c2e <.L58>

00002c1a <.L59>:
    2c1a:	5e 08 90    	mov.w     [w14+26], w0
    2c1c:	90 40 78    	mov.b     [w0], w1
    }
    str=temp2;
    newstrptr+=len-1;
    while(*str){
        *newstrptr=*str;
    2c1e:	1e 00 90    	mov.w     [w14+2], w0
    2c20:	01 48 78    	mov.b     w1, [w0]
        newstrptr--;
    2c22:	1e 00 90    	mov.w     [w14+2], w0
    2c24:	00 00 e9    	dec.w     w0, w0
    2c26:	10 07 98    	mov.w     w0, [w14+2]
        str++;
    2c28:	5e 08 90    	mov.w     [w14+26], w0
    2c2a:	00 00 e8    	inc.w     w0, w0
    2c2c:	50 0f 98    	mov.w     w0, [w14+26]

00002c2e <.L58>:
    2c2e:	5e 08 90    	mov.w     [w14+26], w0
    2c30:	10 40 78    	mov.b     [w0], w0
    2c32:	00 04 e0    	cp0.b     w0
    2c34:	f2 ff 3a    	bra       NZ, 0x2c1a <.L59>
    }
    strcpy(temp2,temp1);  
    2c36:	ae 00 90    	mov.w     [w14+4], w1
    2c38:	3e 00 90    	mov.w     [w14+6], w0
    2c3a:	e7 f4 07    	rcall     0x160a <_strcpy>
}
    2c3c:	00 80 fa    	ulnk      
    2c3e:	00 00 06    	return    

00002c40 <_strm_Scramble>:


void strm_Scramble(char* str,uint8_t a, uint8_t b){
    2c40:	04 00 fa    	lnk       #0x4
    2c42:	00 0f 78    	mov.w     w0, [w14]
    2c44:	21 47 98    	mov.b     w1, [w14+2]
    2c46:	32 47 98    	mov.b     w2, [w14+3]
    //to do, 
}
    2c48:	00 80 fa    	ulnk      
    2c4a:	00 00 06    	return    

00002c4c <_strm_Nada>:

void strm_Nada(char* str,uint8_t a, uint8_t b){
    2c4c:	04 00 fa    	lnk       #0x4
    2c4e:	00 0f 78    	mov.w     w0, [w14]
    2c50:	21 47 98    	mov.b     w1, [w14+2]
    2c52:	32 47 98    	mov.b     w2, [w14+3]
    //nothing
}
    2c54:	00 80 fa    	ulnk      
    2c56:	00 00 06    	return    

00002c58 <_strm_genPush>:

void strm_genPush(char* command, char* name, uint8_t number){
    2c58:	38 00 fa    	lnk       #0x38
    2c5a:	10 1f 98    	mov.w     w0, [w14+50]
    2c5c:	21 1f 98    	mov.w     w1, [w14+52]
    2c5e:	62 77 98    	mov.b     w2, [w14+54]
    char* numb;
    if (number > 0){
    2c60:	6e 70 90    	mov.b     [w14+54], w0
    2c62:	00 04 e0    	cp0.b     w0
    2c64:	07 00 32    	bra       Z, 0x2c74 <.L63>
        numb=numbers_word[number];
    2c66:	22 d1 20    	mov.w     #0xd12, w2
    2c68:	6e 70 90    	mov.b     [w14+54], w0
    2c6a:	00 80 fb    	ze        w0, w0
    2c6c:	67 00 b9    	mul.su    w0, #0x7, w0
    2c6e:	00 00 78    	mov.w     w0, w0
    2c70:	00 0f 41    	add.w     w2, w0, [w14]
    2c72:	02 00 37    	bra       0x2c78 <.L64>

00002c74 <.L63>:
    }
    else{
        numb="";
    2c74:	d0 ac 29    	mov.w     #0x9acd, w0
    2c76:	00 0f 78    	mov.w     w0, [w14]

00002c78 <.L64>:
    }
    char newstr[33] = "                                ";
    2c78:	e0 ac 29    	mov.w     #0x9ace, w0
    2c7a:	ea 00 47    	add.w     w14, #0xa, w1
    2c7c:	20 00 09    	repeat    #0x20
    2c7e:	b0 58 78    	mov.b     [w0++], [w1++]
    2c80:	10 02 b1    	sub.w     #0x21, w0
    char push[6]="Push ";
    2c82:	f0 ae 29    	mov.w     #0x9aef, w0
    2c84:	b1 02 20    	mov.w     #0x2b, w1
    2c86:	81 00 47    	add.w     w14, w1, w1
    2c88:	05 00 09    	repeat    #0x5
    2c8a:	b0 58 78    	mov.b     [w0++], [w1++]
    2c8c:	60 00 b1    	sub.w     #0x6, w0
    char* pushptr =push;
    2c8e:	b0 02 20    	mov.w     #0x2b, w0
    2c90:	0e 00 40    	add.w     w0, w14, w0
    2c92:	10 07 98    	mov.w     w0, [w14+2]
    char* newstrptr= newstr;
    2c94:	6a 00 47    	add.w     w14, #0xa, w0
    2c96:	20 07 98    	mov.w     w0, [w14+4]
    char* temp1 = newstrptr;
    2c98:	ae 00 90    	mov.w     [w14+4], w1
    2c9a:	31 07 98    	mov.w     w1, [w14+6]
    char* temp2 = command;
    2c9c:	9e 18 90    	mov.w     [w14+50], w1
    2c9e:	41 07 98    	mov.w     w1, [w14+8]
    while(*pushptr){
    2ca0:	0a 00 37    	bra       0x2cb6 <.L65>

00002ca2 <.L66>:
        *newstrptr=*pushptr;
    2ca2:	1e 00 90    	mov.w     [w14+2], w0
    2ca4:	90 40 78    	mov.b     [w0], w1
    2ca6:	2e 00 90    	mov.w     [w14+4], w0
    2ca8:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2caa:	2e 00 90    	mov.w     [w14+4], w0
    2cac:	00 00 e8    	inc.w     w0, w0
    2cae:	20 07 98    	mov.w     w0, [w14+4]
        pushptr++;
    2cb0:	1e 00 90    	mov.w     [w14+2], w0
    2cb2:	00 00 e8    	inc.w     w0, w0
    2cb4:	10 07 98    	mov.w     w0, [w14+2]

00002cb6 <.L65>:
    2cb6:	1e 00 90    	mov.w     [w14+2], w0
    2cb8:	10 40 78    	mov.b     [w0], w0
    2cba:	00 04 e0    	cp0.b     w0
    2cbc:	f2 ff 3a    	bra       NZ, 0x2ca2 <.L66>
    }
    while(*name){
    2cbe:	0a 00 37    	bra       0x2cd4 <.L67>

00002cc0 <.L68>:
        *newstrptr=*name;
    2cc0:	2e 18 90    	mov.w     [w14+52], w0
    2cc2:	90 40 78    	mov.b     [w0], w1
    2cc4:	2e 00 90    	mov.w     [w14+4], w0
    2cc6:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2cc8:	2e 00 90    	mov.w     [w14+4], w0
    2cca:	00 00 e8    	inc.w     w0, w0
    2ccc:	20 07 98    	mov.w     w0, [w14+4]
        name++;
    2cce:	2e 18 90    	mov.w     [w14+52], w0
    2cd0:	00 00 e8    	inc.w     w0, w0
    2cd2:	20 1f 98    	mov.w     w0, [w14+52]

00002cd4 <.L67>:
    2cd4:	2e 18 90    	mov.w     [w14+52], w0
    2cd6:	10 40 78    	mov.b     [w0], w0
    2cd8:	00 04 e0    	cp0.b     w0
    2cda:	f2 ff 3a    	bra       NZ, 0x2cc0 <.L68>
    }
    if (number >0){
    2cdc:	6e 70 90    	mov.b     [w14+54], w0
    2cde:	00 04 e0    	cp0.b     w0
    2ce0:	10 00 32    	bra       Z, 0x2d02 <.L72>
        *newstrptr=' ';
    2ce2:	2e 00 90    	mov.w     [w14+4], w0
    2ce4:	01 c2 b3    	mov.b     #0x20, w1
    2ce6:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;   
    2ce8:	2e 00 90    	mov.w     [w14+4], w0
    2cea:	00 00 e8    	inc.w     w0, w0
    2cec:	20 07 98    	mov.w     w0, [w14+4]
    }

    while(*numb){
    2cee:	0a 00 37    	bra       0x2d04 <.L70>

00002cf0 <.L71>:
        *newstrptr=*numb;
    2cf0:	1e 00 78    	mov.w     [w14], w0
    2cf2:	90 40 78    	mov.b     [w0], w1
    2cf4:	2e 00 90    	mov.w     [w14+4], w0
    2cf6:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2cf8:	2e 00 90    	mov.w     [w14+4], w0
    2cfa:	00 00 e8    	inc.w     w0, w0
    2cfc:	20 07 98    	mov.w     w0, [w14+4]
        numb++;
    2cfe:	1e 0f e8    	inc.w     [w14], [w14]
    2d00:	01 00 37    	bra       0x2d04 <.L70>

00002d02 <.L72>:
    2d02:	00 00 00    	nop       

00002d04 <.L70>:
    2d04:	1e 00 78    	mov.w     [w14], w0
    2d06:	10 40 78    	mov.b     [w0], w0
    2d08:	00 04 e0    	cp0.b     w0
    2d0a:	f2 ff 3a    	bra       NZ, 0x2cf0 <.L71>
    }
    *newstrptr='!';
    2d0c:	2e 00 90    	mov.w     [w14+4], w0
    2d0e:	11 c2 b3    	mov.b     #0x21, w1
    2d10:	01 48 78    	mov.b     w1, [w0]
    newstrptr++;
    2d12:	2e 00 90    	mov.w     [w14+4], w0
    2d14:	00 00 e8    	inc.w     w0, w0
    2d16:	20 07 98    	mov.w     w0, [w14+4]
    strcpy(temp2,temp1);
    2d18:	be 00 90    	mov.w     [w14+6], w1
    2d1a:	4e 00 90    	mov.w     [w14+8], w0
    2d1c:	76 f4 07    	rcall     0x160a <_strcpy>
}
    2d1e:	00 80 fa    	ulnk      
    2d20:	00 00 06    	return    

00002d22 <_strm_genSet>:

void strm_genSet(char* command, char* name, uint8_t value){
    2d22:	3e 00 fa    	lnk       #0x3e
    2d24:	40 1f 98    	mov.w     w0, [w14+56]
    2d26:	51 1f 98    	mov.w     w1, [w14+58]
    2d28:	42 7f 98    	mov.b     w2, [w14+60]
    char newstr[33] = "                                ";
    2d2a:	e0 ac 29    	mov.w     #0x9ace, w0
    2d2c:	ec 00 47    	add.w     w14, #0xc, w1
    2d2e:	20 00 09    	repeat    #0x20
    2d30:	b0 58 78    	mov.b     [w0++], [w1++]
    2d32:	10 02 b1    	sub.w     #0x21, w0
    char set[5]="Set ";
    2d34:	50 af 29    	mov.w     #0x9af5, w0
    2d36:	d1 02 20    	mov.w     #0x2d, w1
    2d38:	81 00 47    	add.w     w14, w1, w1
    2d3a:	04 00 09    	repeat    #0x4
    2d3c:	b0 58 78    	mov.b     [w0++], [w1++]
    2d3e:	50 00 b1    	sub.w     #0x5, w0
    char to[5]=" to ";
    2d40:	00 42 27    	mov.w     #0x7420, w0
    2d42:	f1 06 22    	mov.w     #0x206f, w1
    2d44:	10 1f 98    	mov.w     w0, [w14+50]
    2d46:	21 1f 98    	mov.w     w1, [w14+52]
    2d48:	00 40 eb    	clr.b     w0
    2d4a:	60 77 98    	mov.b     w0, [w14+54]
    char* val=numbers_word[value];
    2d4c:	22 d1 20    	mov.w     #0xd12, w2
    2d4e:	4e 78 90    	mov.b     [w14+60], w0
    2d50:	00 80 fb    	ze        w0, w0
    2d52:	67 00 b9    	mul.su    w0, #0x7, w0
    2d54:	00 00 78    	mov.w     w0, w0
    2d56:	00 0f 41    	add.w     w2, w0, [w14]
    char* setptr =set;
    2d58:	d0 02 20    	mov.w     #0x2d, w0
    2d5a:	0e 00 40    	add.w     w0, w14, w0
    2d5c:	10 07 98    	mov.w     w0, [w14+2]
    char* toptr =to;
    2d5e:	20 03 20    	mov.w     #0x32, w0
    2d60:	0e 00 40    	add.w     w0, w14, w0
    2d62:	20 07 98    	mov.w     w0, [w14+4]
    char* newstrptr= newstr;
    2d64:	6c 00 47    	add.w     w14, #0xc, w0
    2d66:	30 07 98    	mov.w     w0, [w14+6]
    char* temp1 = newstrptr;
    2d68:	be 00 90    	mov.w     [w14+6], w1
    2d6a:	41 07 98    	mov.w     w1, [w14+8]
    char* temp2 = command;
    2d6c:	ce 18 90    	mov.w     [w14+56], w1
    2d6e:	51 07 98    	mov.w     w1, [w14+10]
    while(*setptr){
    2d70:	0a 00 37    	bra       0x2d86 <.L74>

00002d72 <.L75>:
        *newstrptr=*setptr;
    2d72:	1e 00 90    	mov.w     [w14+2], w0
    2d74:	90 40 78    	mov.b     [w0], w1
    2d76:	3e 00 90    	mov.w     [w14+6], w0
    2d78:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2d7a:	3e 00 90    	mov.w     [w14+6], w0
    2d7c:	00 00 e8    	inc.w     w0, w0
    2d7e:	30 07 98    	mov.w     w0, [w14+6]
        setptr++;
    2d80:	1e 00 90    	mov.w     [w14+2], w0
    2d82:	00 00 e8    	inc.w     w0, w0
    2d84:	10 07 98    	mov.w     w0, [w14+2]

00002d86 <.L74>:
    2d86:	1e 00 90    	mov.w     [w14+2], w0
    2d88:	10 40 78    	mov.b     [w0], w0
    2d8a:	00 04 e0    	cp0.b     w0
    2d8c:	f2 ff 3a    	bra       NZ, 0x2d72 <.L75>
    }
    while(*name){
    2d8e:	0a 00 37    	bra       0x2da4 <.L76>

00002d90 <.L77>:
        *newstrptr=*name;
    2d90:	5e 18 90    	mov.w     [w14+58], w0
    2d92:	90 40 78    	mov.b     [w0], w1
    2d94:	3e 00 90    	mov.w     [w14+6], w0
    2d96:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2d98:	3e 00 90    	mov.w     [w14+6], w0
    2d9a:	00 00 e8    	inc.w     w0, w0
    2d9c:	30 07 98    	mov.w     w0, [w14+6]
        name++;
    2d9e:	5e 18 90    	mov.w     [w14+58], w0
    2da0:	00 00 e8    	inc.w     w0, w0
    2da2:	50 1f 98    	mov.w     w0, [w14+58]

00002da4 <.L76>:
    2da4:	5e 18 90    	mov.w     [w14+58], w0
    2da6:	10 40 78    	mov.b     [w0], w0
    2da8:	00 04 e0    	cp0.b     w0
    2daa:	f2 ff 3a    	bra       NZ, 0x2d90 <.L77>
    }
    while(*toptr){
    2dac:	0a 00 37    	bra       0x2dc2 <.L78>

00002dae <.L79>:
        *newstrptr=*toptr;
    2dae:	2e 00 90    	mov.w     [w14+4], w0
    2db0:	90 40 78    	mov.b     [w0], w1
    2db2:	3e 00 90    	mov.w     [w14+6], w0
    2db4:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2db6:	3e 00 90    	mov.w     [w14+6], w0
    2db8:	00 00 e8    	inc.w     w0, w0
    2dba:	30 07 98    	mov.w     w0, [w14+6]
        toptr++;
    2dbc:	2e 00 90    	mov.w     [w14+4], w0
    2dbe:	00 00 e8    	inc.w     w0, w0
    2dc0:	20 07 98    	mov.w     w0, [w14+4]

00002dc2 <.L78>:
    2dc2:	2e 00 90    	mov.w     [w14+4], w0
    2dc4:	10 40 78    	mov.b     [w0], w0
    2dc6:	00 04 e0    	cp0.b     w0
    2dc8:	f2 ff 3a    	bra       NZ, 0x2dae <.L79>
    }
    while(*val){
    2dca:	08 00 37    	bra       0x2ddc <.L80>

00002dcc <.L81>:
        *newstrptr=*val;
    2dcc:	1e 00 78    	mov.w     [w14], w0
    2dce:	90 40 78    	mov.b     [w0], w1
    2dd0:	3e 00 90    	mov.w     [w14+6], w0
    2dd2:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2dd4:	3e 00 90    	mov.w     [w14+6], w0
    2dd6:	00 00 e8    	inc.w     w0, w0
    2dd8:	30 07 98    	mov.w     w0, [w14+6]
        val++;
    2dda:	1e 0f e8    	inc.w     [w14], [w14]

00002ddc <.L80>:
    2ddc:	1e 00 78    	mov.w     [w14], w0
    2dde:	10 40 78    	mov.b     [w0], w0
    2de0:	00 04 e0    	cp0.b     w0
    2de2:	f4 ff 3a    	bra       NZ, 0x2dcc <.L81>
    }
    *newstrptr='!';
    2de4:	3e 00 90    	mov.w     [w14+6], w0
    2de6:	11 c2 b3    	mov.b     #0x21, w1
    2de8:	01 48 78    	mov.b     w1, [w0]
    newstrptr++;
    2dea:	3e 00 90    	mov.w     [w14+6], w0
    2dec:	00 00 e8    	inc.w     w0, w0
    2dee:	30 07 98    	mov.w     w0, [w14+6]
    strcpy(temp2,temp1);
    2df0:	ce 00 90    	mov.w     [w14+8], w1
    2df2:	5e 00 90    	mov.w     [w14+10], w0
    2df4:	0a f4 07    	rcall     0x160a <_strcpy>
}
    2df6:	00 80 fa    	ulnk      
    2df8:	00 00 06    	return    

00002dfa <_strm_genAct>:

void strm_genAct(char* command, char* name, uint8_t number, uint8_t action){
    2dfa:	4a 00 fa    	lnk       #0x4a
    2dfc:	20 27 98    	mov.w     w0, [w14+68]
    2dfe:	31 27 98    	mov.w     w1, [w14+70]
    2e00:	02 cf 98    	mov.b     w2, [w14+72]
    2e02:	13 cf 98    	mov.b     w3, [w14+73]
    char* numb;
    if (number > 0){
    2e04:	0e c8 90    	mov.b     [w14+72], w0
    2e06:	00 04 e0    	cp0.b     w0
    2e08:	07 00 32    	bra       Z, 0x2e18 <.L83>
        numb=numbers_word[number];
    2e0a:	22 d1 20    	mov.w     #0xd12, w2
    2e0c:	0e c8 90    	mov.b     [w14+72], w0
    2e0e:	00 80 fb    	ze        w0, w0
    2e10:	67 00 b9    	mul.su    w0, #0x7, w0
    2e12:	00 00 78    	mov.w     w0, w0
    2e14:	00 0f 41    	add.w     w2, w0, [w14]
    2e16:	02 00 37    	bra       0x2e1c <.L84>

00002e18 <.L83>:
    }
    else{
        numb="";
    2e18:	d0 ac 29    	mov.w     #0x9acd, w0
    2e1a:	00 0f 78    	mov.w     w0, [w14]

00002e1c <.L84>:
    }
    char newstr[33] = "                                ";
    2e1c:	e0 ac 29    	mov.w     #0x9ace, w0
    2e1e:	ec 00 47    	add.w     w14, #0xc, w1
    2e20:	20 00 09    	repeat    #0x20
    2e22:	b0 58 78    	mov.b     [w0++], [w1++]
    2e24:	10 02 b1    	sub.w     #0x21, w0
    char act[10]="Activate ";
    2e26:	a0 af 29    	mov.w     #0x9afa, w0
    2e28:	d1 02 20    	mov.w     #0x2d, w1
    2e2a:	81 00 47    	add.w     w14, w1, w1
    2e2c:	09 00 09    	repeat    #0x9
    2e2e:	b0 58 78    	mov.b     [w0++], [w1++]
    2e30:	a0 00 b1    	sub.w     #0xa, w0
    char deact[12]="Deactivate ";
    2e32:	40 b0 29    	mov.w     #0x9b04, w0
    2e34:	71 03 20    	mov.w     #0x37, w1
    2e36:	81 00 47    	add.w     w14, w1, w1
    2e38:	0b 00 09    	repeat    #0xb
    2e3a:	b0 58 78    	mov.b     [w0++], [w1++]
    2e3c:	c0 00 b1    	sub.w     #0xc, w0
    char* actptr =act;
    2e3e:	d0 02 20    	mov.w     #0x2d, w0
    2e40:	0e 00 40    	add.w     w0, w14, w0
    2e42:	10 07 98    	mov.w     w0, [w14+2]
    char* deactptr=deact;
    2e44:	70 03 20    	mov.w     #0x37, w0
    2e46:	0e 00 40    	add.w     w0, w14, w0
    2e48:	20 07 98    	mov.w     w0, [w14+4]
    char* newstrptr= newstr;
    2e4a:	6c 00 47    	add.w     w14, #0xc, w0
    2e4c:	30 07 98    	mov.w     w0, [w14+6]
    char* temp1 = newstrptr;
    2e4e:	be 00 90    	mov.w     [w14+6], w1
    2e50:	41 07 98    	mov.w     w1, [w14+8]
    char* temp2 = command;
    2e52:	ae 20 90    	mov.w     [w14+68], w1
    2e54:	51 07 98    	mov.w     w1, [w14+10]

    if (action==1){
    2e56:	1e c8 90    	mov.b     [w14+73], w0
    2e58:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2e5a:	0f 00 3a    	bra       NZ, 0x2e7a <.L85>
    while(*actptr){
    2e5c:	0a 00 37    	bra       0x2e72 <.L86>

00002e5e <.L87>:
        *newstrptr=*actptr;
    2e5e:	1e 00 90    	mov.w     [w14+2], w0
    2e60:	90 40 78    	mov.b     [w0], w1
    2e62:	3e 00 90    	mov.w     [w14+6], w0
    2e64:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2e66:	3e 00 90    	mov.w     [w14+6], w0
    2e68:	00 00 e8    	inc.w     w0, w0
    2e6a:	30 07 98    	mov.w     w0, [w14+6]
        actptr++;
    2e6c:	1e 00 90    	mov.w     [w14+2], w0
    2e6e:	00 00 e8    	inc.w     w0, w0
    2e70:	10 07 98    	mov.w     w0, [w14+2]

00002e72 <.L86>:
    2e72:	1e 00 90    	mov.w     [w14+2], w0
    2e74:	10 40 78    	mov.b     [w0], w0
    2e76:	00 04 e0    	cp0.b     w0
    2e78:	f2 ff 3a    	bra       NZ, 0x2e5e <.L87>

00002e7a <.L85>:
    }
    }
    if (action==0){
    2e7a:	1e c8 90    	mov.b     [w14+73], w0
    2e7c:	00 04 e0    	cp0.b     w0
    2e7e:	1b 00 3a    	bra       NZ, 0x2eb6 <.L96>
    while(*deactptr){
    2e80:	0a 00 37    	bra       0x2e96 <.L89>

00002e82 <.L90>:
        *newstrptr=*deactptr;
    2e82:	2e 00 90    	mov.w     [w14+4], w0
    2e84:	90 40 78    	mov.b     [w0], w1
    2e86:	3e 00 90    	mov.w     [w14+6], w0
    2e88:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2e8a:	3e 00 90    	mov.w     [w14+6], w0
    2e8c:	00 00 e8    	inc.w     w0, w0
    2e8e:	30 07 98    	mov.w     w0, [w14+6]
        deactptr++;
    2e90:	2e 00 90    	mov.w     [w14+4], w0
    2e92:	00 00 e8    	inc.w     w0, w0
    2e94:	20 07 98    	mov.w     w0, [w14+4]

00002e96 <.L89>:
    2e96:	2e 00 90    	mov.w     [w14+4], w0
    2e98:	10 40 78    	mov.b     [w0], w0
    2e9a:	00 04 e0    	cp0.b     w0
    2e9c:	f2 ff 3a    	bra       NZ, 0x2e82 <.L90>
    }
    }
    while(*name){
    2e9e:	0c 00 37    	bra       0x2eb8 <.L91>

00002ea0 <.L92>:
        *newstrptr=*name;
    2ea0:	3e 20 90    	mov.w     [w14+70], w0
    2ea2:	90 40 78    	mov.b     [w0], w1
    2ea4:	3e 00 90    	mov.w     [w14+6], w0
    2ea6:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2ea8:	3e 00 90    	mov.w     [w14+6], w0
    2eaa:	00 00 e8    	inc.w     w0, w0
    2eac:	30 07 98    	mov.w     w0, [w14+6]
        name++;
    2eae:	3e 20 90    	mov.w     [w14+70], w0
    2eb0:	00 00 e8    	inc.w     w0, w0
    2eb2:	30 27 98    	mov.w     w0, [w14+70]
    2eb4:	01 00 37    	bra       0x2eb8 <.L91>

00002eb6 <.L96>:
    2eb6:	00 00 00    	nop       

00002eb8 <.L91>:
    2eb8:	3e 20 90    	mov.w     [w14+70], w0
    2eba:	10 40 78    	mov.b     [w0], w0
    2ebc:	00 04 e0    	cp0.b     w0
    2ebe:	f0 ff 3a    	bra       NZ, 0x2ea0 <.L92>
    }
    if (numb > 0) {
    2ec0:	1e 00 78    	mov.w     [w14], w0
    2ec2:	00 00 e0    	cp0.w     w0
    2ec4:	10 00 32    	bra       Z, 0x2ee6 <.L97>
        *newstrptr=' ';
    2ec6:	3e 00 90    	mov.w     [w14+6], w0
    2ec8:	01 c2 b3    	mov.b     #0x20, w1
    2eca:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2ecc:	3e 00 90    	mov.w     [w14+6], w0
    2ece:	00 00 e8    	inc.w     w0, w0
    2ed0:	30 07 98    	mov.w     w0, [w14+6]
    }
    while(*numb){
    2ed2:	0a 00 37    	bra       0x2ee8 <.L94>

00002ed4 <.L95>:
        *newstrptr=*numb;
    2ed4:	1e 00 78    	mov.w     [w14], w0
    2ed6:	90 40 78    	mov.b     [w0], w1
    2ed8:	3e 00 90    	mov.w     [w14+6], w0
    2eda:	01 48 78    	mov.b     w1, [w0]
        newstrptr++;
    2edc:	3e 00 90    	mov.w     [w14+6], w0
    2ede:	00 00 e8    	inc.w     w0, w0
    2ee0:	30 07 98    	mov.w     w0, [w14+6]
        numb++;
    2ee2:	1e 0f e8    	inc.w     [w14], [w14]
    2ee4:	01 00 37    	bra       0x2ee8 <.L94>

00002ee6 <.L97>:
    2ee6:	00 00 00    	nop       

00002ee8 <.L94>:
    2ee8:	1e 00 78    	mov.w     [w14], w0
    2eea:	10 40 78    	mov.b     [w0], w0
    2eec:	00 04 e0    	cp0.b     w0
    2eee:	f2 ff 3a    	bra       NZ, 0x2ed4 <.L95>
    }
    *newstrptr='!';
    2ef0:	3e 00 90    	mov.w     [w14+6], w0
    2ef2:	11 c2 b3    	mov.b     #0x21, w1
    2ef4:	01 48 78    	mov.b     w1, [w0]
    newstrptr++;
    2ef6:	3e 00 90    	mov.w     [w14+6], w0
    2ef8:	00 00 e8    	inc.w     w0, w0
    2efa:	30 07 98    	mov.w     w0, [w14+6]
    strcpy(temp2,temp1);
    2efc:	ce 00 90    	mov.w     [w14+8], w1
    2efe:	5e 00 90    	mov.w     [w14+10], w0
    2f00:	84 f3 07    	rcall     0x160a <_strcpy>
}
    2f02:	00 80 fa    	ulnk      
    2f04:	00 00 06    	return    

00002f06 <_strm_Spaces>:
 
uint8_t strm_Spaces(char* string, uint8_t* space_loc){
    2f06:	06 00 fa    	lnk       #0x6
    2f08:	10 07 98    	mov.w     w0, [w14+2]
    2f0a:	21 07 98    	mov.w     w1, [w14+4]
    uint8_t space_num=0;
    2f0c:	00 40 eb    	clr.b     w0
    2f0e:	00 4f 78    	mov.b     w0, [w14]
    uint8_t i;
    for (i = 0; i < 32; i++){
    2f10:	00 40 eb    	clr.b     w0
    2f12:	10 47 98    	mov.b     w0, [w14+1]
    2f14:	24 00 37    	bra       0x2f5e <.L99>

00002f16 <.L102>:
        if (*string){
    2f16:	1e 00 90    	mov.w     [w14+2], w0
    2f18:	10 40 78    	mov.b     [w0], w0
    2f1a:	00 04 e0    	cp0.b     w0
    2f1c:	1d 00 32    	bra       Z, 0x2f58 <.L100>
            if (*string==' '){
    2f1e:	1e 00 90    	mov.w     [w14+2], w0
    2f20:	90 40 78    	mov.b     [w0], w1
    2f22:	00 c2 b3    	mov.b     #0x20, w0
    2f24:	80 cf 50    	sub.b     w1, w0, [w15]
    2f26:	15 00 3a    	bra       NZ, 0x2f52 <.L101>
                string++;
    2f28:	1e 00 90    	mov.w     [w14+2], w0
    2f2a:	00 00 e8    	inc.w     w0, w0
    2f2c:	10 07 98    	mov.w     w0, [w14+2]
                if(*string != ' '){
    2f2e:	1e 00 90    	mov.w     [w14+2], w0
    2f30:	90 40 78    	mov.b     [w0], w1
    2f32:	00 c2 b3    	mov.b     #0x20, w0
    2f34:	80 cf 50    	sub.b     w1, w0, [w15]
    2f36:	0d 00 32    	bra       Z, 0x2f52 <.L101>
                    if (*string){                 
    2f38:	1e 00 90    	mov.w     [w14+2], w0
    2f3a:	10 40 78    	mov.b     [w0], w0
    2f3c:	00 04 e0    	cp0.b     w0
    2f3e:	09 00 32    	bra       Z, 0x2f52 <.L101>
                         space_loc[space_num]=i;
    2f40:	1e 80 fb    	ze        [w14], w0
    2f42:	ae 00 90    	mov.w     [w14+4], w1
    2f44:	00 80 40    	add.w     w1, w0, w0
    2f46:	9e 40 90    	mov.b     [w14+1], w1
    2f48:	01 48 78    	mov.b     w1, [w0]
                         space_num++;
    2f4a:	1e 4f e8    	inc.b     [w14], [w14]
                         string--;
    2f4c:	1e 00 90    	mov.w     [w14+2], w0
    2f4e:	00 00 e9    	dec.w     w0, w0
    2f50:	10 07 98    	mov.w     w0, [w14+2]

00002f52 <.L101>:
                    }
                }
            }
            string++;
    2f52:	1e 00 90    	mov.w     [w14+2], w0
    2f54:	00 00 e8    	inc.w     w0, w0
    2f56:	10 07 98    	mov.w     w0, [w14+2]

00002f58 <.L100>:
    2f58:	1e 40 90    	mov.b     [w14+1], w0
    2f5a:	00 40 e8    	inc.b     w0, w0
    2f5c:	10 47 98    	mov.b     w0, [w14+1]

00002f5e <.L99>:
    2f5e:	1e 40 90    	mov.b     [w14+1], w0
    2f60:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2f62:	d9 ff 36    	bra       LEU, 0x2f16 <.L102>
        }
    }
    return space_num;
    2f64:	1e 40 78    	mov.b     [w14], w0
}  
    2f66:	00 80 fa    	ulnk      
    2f68:	00 00 06    	return    

00002f6a <_strm_Length>:

uint8_t strm_Length(char* string){
    2f6a:	04 00 fa    	lnk       #0x4
    2f6c:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t len=0;
    2f6e:	00 40 eb    	clr.b     w0
    2f70:	00 4f 78    	mov.b     w0, [w14]
    uint8_t i;
    for (i = 0; i < 33; i++){
    2f72:	00 40 eb    	clr.b     w0
    2f74:	10 47 98    	mov.b     w0, [w14+1]
    2f76:	23 00 37    	bra       0x2fbe <.L104>

00002f78 <.L110>:
        if (*string){
    2f78:	1e 00 90    	mov.w     [w14+2], w0
    2f7a:	10 40 78    	mov.b     [w0], w0
    2f7c:	00 04 e0    	cp0.b     w0
    2f7e:	1c 00 32    	bra       Z, 0x2fb8 <.L105>
            if (*string==' '){
    2f80:	1e 00 90    	mov.w     [w14+2], w0
    2f82:	90 40 78    	mov.b     [w0], w1
    2f84:	00 c2 b3    	mov.b     #0x20, w0
    2f86:	80 cf 50    	sub.b     w1, w0, [w15]
    2f88:	13 00 3a    	bra       NZ, 0x2fb0 <.L106>
                string++;
    2f8a:	1e 00 90    	mov.w     [w14+2], w0
    2f8c:	00 00 e8    	inc.w     w0, w0
    2f8e:	10 07 98    	mov.w     w0, [w14+2]
                if(*string == ' '){
    2f90:	1e 00 90    	mov.w     [w14+2], w0
    2f92:	90 40 78    	mov.b     [w0], w1
    2f94:	00 c2 b3    	mov.b     #0x20, w0
    2f96:	80 cf 50    	sub.b     w1, w0, [w15]
    2f98:	02 00 3a    	bra       NZ, 0x2f9e <.L107>
                    return len;
    2f9a:	1e 40 78    	mov.b     [w14], w0
    2f9c:	15 00 37    	bra       0x2fc8 <.L108>

00002f9e <.L107>:
                }
                else if (!*string){                
    2f9e:	1e 00 90    	mov.w     [w14+2], w0
    2fa0:	10 40 78    	mov.b     [w0], w0
    2fa2:	00 04 e0    	cp0.b     w0
    2fa4:	02 00 3a    	bra       NZ, 0x2faa <.L109>
                    return len;
    2fa6:	1e 40 78    	mov.b     [w14], w0
    2fa8:	0f 00 37    	bra       0x2fc8 <.L108>

00002faa <.L109>:
                }
                string--;
    2faa:	1e 00 90    	mov.w     [w14+2], w0
    2fac:	00 00 e9    	dec.w     w0, w0
    2fae:	10 07 98    	mov.w     w0, [w14+2]

00002fb0 <.L106>:
            }
            
            len++;
    2fb0:	1e 4f e8    	inc.b     [w14], [w14]
            string++;
    2fb2:	1e 00 90    	mov.w     [w14+2], w0
    2fb4:	00 00 e8    	inc.w     w0, w0
    2fb6:	10 07 98    	mov.w     w0, [w14+2]

00002fb8 <.L105>:
    2fb8:	1e 40 90    	mov.b     [w14+1], w0
    2fba:	00 40 e8    	inc.b     w0, w0
    2fbc:	10 47 98    	mov.b     w0, [w14+1]

00002fbe <.L104>:
    2fbe:	9e 40 90    	mov.b     [w14+1], w1
    2fc0:	00 c2 b3    	mov.b     #0x20, w0
    2fc2:	80 cf 50    	sub.b     w1, w0, [w15]
    2fc4:	d9 ff 36    	bra       LEU, 0x2f78 <.L110>
        }
    }
    return len;
    2fc6:	1e 40 78    	mov.b     [w14], w0

00002fc8 <.L108>:
}  
    2fc8:	00 80 fa    	ulnk      
    2fca:	00 00 06    	return    

00002fcc <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    2fcc:	08 00 fa    	lnk       #0x8
    2fce:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2fd0:	3e 00 90    	mov.w     [w14+6], w0
    2fd2:	00 08 90    	mov.w     [w0+16], w0
    2fd4:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    2fd6:	00 00 eb    	clr.w     w0
    2fd8:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxR);
    2fda:	1e 00 78    	mov.w     [w14], w0
    2fdc:	30 00 90    	mov.w     [w0+6], w0
    2fde:	10 00 78    	mov.w     [w0], w0
    2fe0:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    2fe2:	1e 02 90    	mov.w     [w14+2], w4
    2fe4:	ae 02 90    	mov.w     [w14+4], w5
    2fe6:	1e 00 78    	mov.w     [w14], w0
    2fe8:	20 00 90    	mov.w     [w0+4], w0
    2fea:	10 00 78    	mov.w     [w0], w0
    2fec:	80 00 eb    	clr.w     w1
    2fee:	00 01 be    	mov.d     w0, w2
    2ff0:	04 00 be    	mov.d     w4, w0
    2ff2:	a6 f2 07    	rcall     0x1540 <___udivsi3>
    2ff4:	00 00 78    	mov.w     w0, w0
}
    2ff6:	00 80 fa    	ulnk      
    2ff8:	00 00 06    	return    

00002ffa <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    2ffa:	0a 00 fa    	lnk       #0xa
    2ffc:	30 07 98    	mov.w     w0, [w14+6]
    2ffe:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3000:	3e 00 90    	mov.w     [w14+6], w0
    3002:	00 08 90    	mov.w     [w0+16], w0
    3004:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    3006:	4e 00 90    	mov.w     [w14+8], w0
    3008:	61 01 b8    	mul.uu    w0, #0x1, w2
    300a:	1e 00 78    	mov.w     [w14], w0
    300c:	20 00 90    	mov.w     [w0+4], w0
    300e:	10 00 78    	mov.w     [w0], w0
    3010:	80 00 eb    	clr.w     w1
    3012:	00 9a b9    	mul.ss    w3, w0, w4
    3014:	04 02 78    	mov.w     w4, w4
    3016:	02 8b b9    	mul.ss    w1, w2, w6
    3018:	86 02 78    	mov.w     w6, w5
    301a:	05 02 42    	add.w     w4, w5, w4
    301c:	00 10 b8    	mul.uu    w2, w0, w0
    301e:	01 02 42    	add.w     w4, w1, w4
    3020:	84 00 78    	mov.w     w4, w1
    3022:	10 07 98    	mov.w     w0, [w14+2]
    3024:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxR) = temp.w[1];
    3026:	1e 00 78    	mov.w     [w14], w0
    3028:	30 00 90    	mov.w     [w0+6], w0
    302a:	ae 00 90    	mov.w     [w14+4], w1
    302c:	01 08 78    	mov.w     w1, [w0]
}
    302e:	00 80 fa    	ulnk      
    3030:	00 00 06    	return    

00003032 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    3032:	08 00 fa    	lnk       #0x8
    3034:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3036:	3e 00 90    	mov.w     [w14+6], w0
    3038:	00 08 90    	mov.w     [w0+16], w0
    303a:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    303c:	00 00 eb    	clr.w     w0
    303e:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    3040:	1e 00 78    	mov.w     [w14], w0
    3042:	20 00 90    	mov.w     [w0+4], w0
    3044:	90 00 78    	mov.w     [w0], w1
    3046:	1e 00 78    	mov.w     [w14], w0
    3048:	60 00 90    	mov.w     [w0+12], w0
    304a:	00 80 50    	sub.w     w1, w0, w0
    304c:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    304e:	1e 02 90    	mov.w     [w14+2], w4
    3050:	ae 02 90    	mov.w     [w14+4], w5
    3052:	1e 00 78    	mov.w     [w14], w0
    3054:	70 00 90    	mov.w     [w0+14], w0
    3056:	80 00 eb    	clr.w     w1
    3058:	00 01 be    	mov.d     w0, w2
    305a:	04 00 be    	mov.d     w4, w0
    305c:	71 f2 07    	rcall     0x1540 <___udivsi3>
    305e:	00 00 78    	mov.w     w0, w0
}
    3060:	00 80 fa    	ulnk      
    3062:	00 00 06    	return    

00003064 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    3064:	0a 00 fa    	lnk       #0xa
    3066:	30 07 98    	mov.w     w0, [w14+6]
    3068:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    306a:	3e 00 90    	mov.w     [w14+6], w0
    306c:	00 08 90    	mov.w     [w0+16], w0
    306e:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    3070:	4e 00 90    	mov.w     [w14+8], w0
    3072:	61 01 b8    	mul.uu    w0, #0x1, w2
    3074:	1e 00 78    	mov.w     [w14], w0
    3076:	70 00 90    	mov.w     [w0+14], w0
    3078:	80 00 eb    	clr.w     w1
    307a:	00 9a b9    	mul.ss    w3, w0, w4
    307c:	04 02 78    	mov.w     w4, w4
    307e:	02 8b b9    	mul.ss    w1, w2, w6
    3080:	86 02 78    	mov.w     w6, w5
    3082:	05 02 42    	add.w     w4, w5, w4
    3084:	00 10 b8    	mul.uu    w2, w0, w0
    3086:	01 02 42    	add.w     w4, w1, w4
    3088:	84 00 78    	mov.w     w4, w1
    308a:	10 07 98    	mov.w     w0, [w14+2]
    308c:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    308e:	1e 00 78    	mov.w     [w14], w0
    3090:	20 00 90    	mov.w     [w0+4], w0
    3092:	9e 00 78    	mov.w     [w14], w1
    3094:	61 01 90    	mov.w     [w1+12], w2
    3096:	ae 00 90    	mov.w     [w14+4], w1
    3098:	81 00 41    	add.w     w2, w1, w1
    309a:	01 08 78    	mov.w     w1, [w0]
}
    309c:	00 80 fa    	ulnk      
    309e:	00 00 06    	return    

000030a0 <_init_oc>:

void init_oc(void) {
    30a0:	00 00 fa    	lnk       #0x0
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    30a2:	26 01 20    	mov.w     #0x12, w6
    30a4:	85 19 20    	mov.w     #0x198, w5
    30a6:	64 19 20    	mov.w     #0x196, w4
    30a8:	43 19 20    	mov.w     #0x194, w3
    30aa:	22 19 20    	mov.w     #0x192, w2
    30ac:	01 19 20    	mov.w     #0x190, w1
    30ae:	c0 b0 20    	mov.w     #0xb0c, w0
    30b0:	42 00 07    	rcall     0x3136 <_oc_init> <.LFB5> <.LFE4>
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    30b2:	36 01 20    	mov.w     #0x13, w6
    30b4:	25 1a 20    	mov.w     #0x1a2, w5
    30b6:	04 1a 20    	mov.w     #0x1a0, w4
    30b8:	e3 19 20    	mov.w     #0x19e, w3
    30ba:	c2 19 20    	mov.w     #0x19c, w2
    30bc:	a1 19 20    	mov.w     #0x19a, w1
    30be:	e0 b1 20    	mov.w     #0xb1e, w0
    30c0:	3a 00 07    	rcall     0x3136 <_oc_init> <.LFB5> <.LFE4>
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    30c2:	46 01 20    	mov.w     #0x14, w6
    30c4:	c5 1a 20    	mov.w     #0x1ac, w5
    30c6:	a4 1a 20    	mov.w     #0x1aa, w4
    30c8:	83 1a 20    	mov.w     #0x1a8, w3
    30ca:	62 1a 20    	mov.w     #0x1a6, w2
    30cc:	41 1a 20    	mov.w     #0x1a4, w1
    30ce:	00 b3 20    	mov.w     #0xb30, w0
    30d0:	32 00 07    	rcall     0x3136 <_oc_init> <.LFB5> <.LFE4>
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    30d2:	56 01 20    	mov.w     #0x15, w6
    30d4:	65 1b 20    	mov.w     #0x1b6, w5
    30d6:	44 1b 20    	mov.w     #0x1b4, w4
    30d8:	23 1b 20    	mov.w     #0x1b2, w3
    30da:	02 1b 20    	mov.w     #0x1b0, w2
    30dc:	e1 1a 20    	mov.w     #0x1ae, w1
    30de:	20 b4 20    	mov.w     #0xb42, w0
    30e0:	2a 00 07    	rcall     0x3136 <_oc_init> <.LFB5> <.LFE4>
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    30e2:	66 01 20    	mov.w     #0x16, w6
    30e4:	05 1c 20    	mov.w     #0x1c0, w5
    30e6:	e4 1b 20    	mov.w     #0x1be, w4
    30e8:	c3 1b 20    	mov.w     #0x1bc, w3
    30ea:	a2 1b 20    	mov.w     #0x1ba, w2
    30ec:	81 1b 20    	mov.w     #0x1b8, w1
    30ee:	40 b5 20    	mov.w     #0xb54, w0
    30f0:	22 00 07    	rcall     0x3136 <_oc_init> <.LFB5> <.LFE4>
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    30f2:	76 01 20    	mov.w     #0x17, w6
    30f4:	a5 1c 20    	mov.w     #0x1ca, w5
    30f6:	84 1c 20    	mov.w     #0x1c8, w4
    30f8:	63 1c 20    	mov.w     #0x1c6, w3
    30fa:	42 1c 20    	mov.w     #0x1c4, w2
    30fc:	21 1c 20    	mov.w     #0x1c2, w1
    30fe:	60 b6 20    	mov.w     #0xb66, w0
    3100:	1a 00 07    	rcall     0x3136 <_oc_init> <.LFB5> <.LFE4>
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    3102:	86 01 20    	mov.w     #0x18, w6
    3104:	45 1d 20    	mov.w     #0x1d4, w5
    3106:	24 1d 20    	mov.w     #0x1d2, w4
    3108:	03 1d 20    	mov.w     #0x1d0, w3
    310a:	e2 1c 20    	mov.w     #0x1ce, w2
    310c:	c1 1c 20    	mov.w     #0x1cc, w1
    310e:	80 b7 20    	mov.w     #0xb78, w0
    3110:	12 00 07    	rcall     0x3136 <_oc_init> <.LFB5> <.LFE4>
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    3112:	96 01 20    	mov.w     #0x19, w6
    3114:	e5 1d 20    	mov.w     #0x1de, w5
    3116:	c4 1d 20    	mov.w     #0x1dc, w4
    3118:	a3 1d 20    	mov.w     #0x1da, w3
    311a:	82 1d 20    	mov.w     #0x1d8, w2
    311c:	61 1d 20    	mov.w     #0x1d6, w1
    311e:	a0 b8 20    	mov.w     #0xb8a, w0
    3120:	0a 00 07    	rcall     0x3136 <_oc_init> <.LFB5> <.LFE4>
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    3122:	36 02 20    	mov.w     #0x23, w6
    3124:	85 1e 20    	mov.w     #0x1e8, w5
    3126:	64 1e 20    	mov.w     #0x1e6, w4
    3128:	43 1e 20    	mov.w     #0x1e4, w3
    312a:	22 1e 20    	mov.w     #0x1e2, w2
    312c:	01 1e 20    	mov.w     #0x1e0, w1
    312e:	c0 b9 20    	mov.w     #0xb9c, w0
    3130:	02 00 07    	rcall     0x3136 <_oc_init> <.LFB5> <.LFE4>
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    3132:	00 80 fa    	ulnk      
    3134:	00 00 06    	return    

00003136 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    3136:	0e 00 fa    	lnk       #0xe
    3138:	00 0f 78    	mov.w     w0, [w14]
    313a:	11 07 98    	mov.w     w1, [w14+2]
    313c:	22 07 98    	mov.w     w2, [w14+4]
    313e:	33 07 98    	mov.w     w3, [w14+6]
    3140:	44 07 98    	mov.w     w4, [w14+8]
    3142:	55 07 98    	mov.w     w5, [w14+10]
    3144:	66 07 98    	mov.w     w6, [w14+12]
    self->OCxCON1 = OCxCON1;
    3146:	1e 00 78    	mov.w     [w14], w0
    3148:	9e 00 90    	mov.w     [w14+2], w1
    314a:	01 08 78    	mov.w     w1, [w0]
    self->OCxCON2 = OCxCON2;
    314c:	1e 00 78    	mov.w     [w14], w0
    314e:	ae 00 90    	mov.w     [w14+4], w1
    3150:	11 00 98    	mov.w     w1, [w0+2]
    self->OCxRS = OCxRS;
    3152:	1e 00 78    	mov.w     [w14], w0
    3154:	be 00 90    	mov.w     [w14+6], w1
    3156:	21 00 98    	mov.w     w1, [w0+4]
    self->OCxR = OCxR;
    3158:	1e 00 78    	mov.w     [w14], w0
    315a:	ce 00 90    	mov.w     [w14+8], w1
    315c:	31 00 98    	mov.w     w1, [w0+6]
    self->OCxTMR = OCxTMR;
    315e:	1e 00 78    	mov.w     [w14], w0
    3160:	de 00 90    	mov.w     [w14+10], w1
    3162:	41 00 98    	mov.w     w1, [w0+8]
    self->servooffset = (uint16_t)(1e-3*FCY);
    3164:	1e 00 78    	mov.w     [w14], w0
    3166:	01 e8 23    	mov.w     #0x3e80, w1
    3168:	61 00 98    	mov.w     w1, [w0+12]
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    316a:	1e 00 78    	mov.w     [w14], w0
    316c:	01 e8 23    	mov.w     #0x3e80, w1
    316e:	71 00 98    	mov.w     w1, [w0+14]
    self->rpnum = rpnum;
    3170:	1e 00 78    	mov.w     [w14], w0
    3172:	ee 00 90    	mov.w     [w14+12], w1
    3174:	51 00 98    	mov.w     w1, [w0+10]
    self->pin = NULL;
    3176:	1e 00 78    	mov.w     [w14], w0
    3178:	80 00 eb    	clr.w     w1
    317a:	01 08 98    	mov.w     w1, [w0+16]
}
    317c:	00 80 fa    	ulnk      
    317e:	00 00 06    	return    

00003180 <_oc_free>:

void oc_free(_OC *self) {
    3180:	02 00 fa    	lnk       #0x2
    3182:	00 0f 78    	mov.w     w0, [w14]
    if (self->pin) {
    3184:	1e 00 78    	mov.w     [w14], w0
    3186:	00 08 90    	mov.w     [w0+16], w0
    3188:	00 00 e0    	cp0.w     w0
    318a:	2f 00 32    	bra       Z, 0x31ea <.L8>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    318c:	11 3a 80    	mov.w     0x742, w1
    318e:	f0 0b 20    	mov.w     #0xbf, w0
    3190:	00 81 60    	and.w     w1, w0, w2
    3192:	60 04 20    	mov.w     #0x46, w0
    3194:	71 05 20    	mov.w     #0x57, w1
    3196:	23 74 20    	mov.w     #0x742, w3
    3198:	80 49 78    	mov.b     w0, [w3]
    319a:	81 49 78    	mov.b     w1, [w3]
    319c:	82 49 78    	mov.b     w2, [w3]
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    319e:	1e 00 78    	mov.w     [w14], w0
    31a0:	00 08 90    	mov.w     [w0+16], w0
    31a2:	70 00 90    	mov.w     [w0+14], w0
    31a4:	9e 00 78    	mov.w     [w14], w1
    31a6:	81 08 90    	mov.w     [w1+16], w1
    31a8:	f1 00 90    	mov.w     [w1+14], w1
    31aa:	11 01 78    	mov.w     [w1], w2
    31ac:	9e 00 78    	mov.w     [w14], w1
    31ae:	81 08 90    	mov.w     [w1+16], w1
    31b0:	a1 48 90    	mov.b     [w1+10], w1
    31b2:	81 80 fb    	ze        w1, w1
    31b4:	f3 03 20    	mov.w     #0x3f, w3
    31b6:	81 18 dd    	sl.w      w3, w1, w1
    31b8:	81 80 ea    	com.w     w1, w1
    31ba:	81 00 61    	and.w     w2, w1, w1
    31bc:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    31be:	10 3a 80    	mov.w     0x742, w0
    31c0:	00 01 78    	mov.w     w0, w2
    31c2:	02 60 a0    	bset.w    w2, #0x6
    31c4:	60 04 20    	mov.w     #0x46, w0
    31c6:	71 05 20    	mov.w     #0x57, w1
    31c8:	23 74 20    	mov.w     #0x742, w3
    31ca:	80 49 78    	mov.b     w0, [w3]
    31cc:	81 49 78    	mov.b     w1, [w3]
    31ce:	82 49 78    	mov.b     w2, [w3]
        self->pin->owner = NULL;
    31d0:	1e 00 78    	mov.w     [w14], w0
    31d2:	00 08 90    	mov.w     [w0+16], w0
    31d4:	80 00 eb    	clr.w     w1
    31d6:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->pin);
    31d8:	1e 00 78    	mov.w     [w14], w0
    31da:	00 08 90    	mov.w     [w0+16], w0
    31dc:	02 03 07    	rcall     0x37e2 <_pin_digitalOut> <.LFB6> <.LFE5>
        pin_clear(self->pin);
    31de:	1e 00 78    	mov.w     [w14], w0
    31e0:	00 08 90    	mov.w     [w0+16], w0
    31e2:	71 03 07    	rcall     0x38c6 <_pin_clear> <.LFB9> <.LFE8>
        self->pin = NULL;
    31e4:	1e 00 78    	mov.w     [w14], w0
    31e6:	80 00 eb    	clr.w     w1
    31e8:	01 08 98    	mov.w     w1, [w0+16]

000031ea <.L8>:
    }
    *(self->OCxCON1) = 0;
    31ea:	1e 00 78    	mov.w     [w14], w0
    31ec:	10 00 78    	mov.w     [w0], w0
    31ee:	80 00 eb    	clr.w     w1
    31f0:	01 08 78    	mov.w     w1, [w0]
    *(self->OCxCON2) = 0;
    31f2:	1e 00 78    	mov.w     [w14], w0
    31f4:	10 00 90    	mov.w     [w0+2], w0
    31f6:	80 00 eb    	clr.w     w1
    31f8:	01 08 78    	mov.w     w1, [w0]
}
    31fa:	00 80 fa    	ulnk      
    31fc:	00 00 06    	return    

000031fe <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    31fe:	10 00 fa    	lnk       #0x10
    3200:	20 07 98    	mov.w     w0, [w14+4]
    3202:	31 07 98    	mov.w     w1, [w14+6]
    3204:	42 07 98    	mov.w     w2, [w14+8]
    3206:	54 07 98    	mov.w     w4, [w14+10]
    3208:	65 07 98    	mov.w     w5, [w14+12]
    320a:	73 07 98    	mov.w     w3, [w14+14]
    WORD32 temp;

    if (timer) {
    320c:	4e 00 90    	mov.w     [w14+8], w0
    320e:	00 00 e0    	cp0.w     w0
    3210:	1c 00 32    	bra       Z, 0x324a <.L10>
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    3212:	2e 00 90    	mov.w     [w14+4], w0
    3214:	10 00 78    	mov.w     [w0], w0
    3216:	ce 00 90    	mov.w     [w14+8], w1
    3218:	e1 00 90    	mov.w     [w1+12], w1
    321a:	ca 08 dd    	sl.w      w1, #0xa, w1
    321c:	61 00 b3    	ior.w     #0x6, w1
    321e:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    3220:	2e 00 90    	mov.w     [w14+4], w0
    3222:	10 00 90    	mov.w     [w0+2], w0
    3224:	f1 01 20    	mov.w     #0x1f, w1
    3226:	01 08 78    	mov.w     w1, [w0]
        timer_setFreq(timer, freq);
    3228:	5e 01 90    	mov.w     [w14+10], w2
    322a:	ee 01 90    	mov.w     [w14+12], w3
    322c:	4e 00 90    	mov.w     [w14+8], w0
    322e:	c0 04 07    	rcall     0x3bb0 <_timer_setFreq> <.LFB10> <.LFE9>
        *(self->OCxRS) = *(timer->PRx);
    3230:	2e 00 90    	mov.w     [w14+4], w0
    3232:	20 00 90    	mov.w     [w0+4], w0
    3234:	ce 00 90    	mov.w     [w14+8], w1
    3236:	91 00 90    	mov.w     [w1+2], w1
    3238:	91 00 78    	mov.w     [w1], w1
    323a:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxTMR) = 0;
    323c:	2e 00 90    	mov.w     [w14+4], w0
    323e:	40 00 90    	mov.w     [w0+8], w0
    3240:	80 00 eb    	clr.w     w1
    3242:	01 08 78    	mov.w     w1, [w0]
        timer_start(timer);
    3244:	4e 00 90    	mov.w     [w14+8], w0
    3246:	e9 04 07    	rcall     0x3c1a <_timer_start> <.LFB13> <.LFE12>
    3248:	04 00 37    	bra       0x3252 <.L11>

0000324a <.L10>:
    } else {
        oc_freq(self, freq);
    324a:	5e 01 90    	mov.w     [w14+10], w2
    324c:	ee 01 90    	mov.w     [w14+12], w3
    324e:	2e 00 90    	mov.w     [w14+4], w0
    3250:	5b 00 07    	rcall     0x3308 <_oc_freq> <.LFB8> <.LFE7>

00003252 <.L11>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    3252:	7e 00 90    	mov.w     [w14+14], w0
    3254:	61 01 b8    	mul.uu    w0, #0x1, w2
    3256:	2e 00 90    	mov.w     [w14+4], w0
    3258:	20 00 90    	mov.w     [w0+4], w0
    325a:	10 00 78    	mov.w     [w0], w0
    325c:	80 00 eb    	clr.w     w1
    325e:	00 9a b9    	mul.ss    w3, w0, w4
    3260:	04 02 78    	mov.w     w4, w4
    3262:	02 8b b9    	mul.ss    w1, w2, w6
    3264:	86 02 78    	mov.w     w6, w5
    3266:	05 02 42    	add.w     w4, w5, w4
    3268:	00 10 b8    	mul.uu    w2, w0, w0
    326a:	01 02 42    	add.w     w4, w1, w4
    326c:	84 00 78    	mov.w     w4, w1
    326e:	00 8f be    	mov.d     w0, [w14]
    *(self->OCxR) = temp.w[1];
    3270:	2e 00 90    	mov.w     [w14+4], w0
    3272:	30 00 90    	mov.w     [w0+6], w0
    3274:	9e 00 90    	mov.w     [w14+2], w1
    3276:	01 08 78    	mov.w     w1, [w0]
    self->pin->write = __pwmWrite;
    3278:	2e 00 90    	mov.w     [w14+4], w0
    327a:	00 08 90    	mov.w     [w0+16], w0
    327c:	a1 ff 22    	mov.w     #0x2ffa, w1
    327e:	11 08 98    	mov.w     w1, [w0+18]
    self->pin->read = __pwmRead;
    3280:	2e 00 90    	mov.w     [w14+4], w0
    3282:	00 08 90    	mov.w     [w0+16], w0
    3284:	c1 fc 22    	mov.w     #0x2fcc, w1
    3286:	21 08 98    	mov.w     w1, [w0+20]

    if (pin->rpnum==-1)
    3288:	3e 00 90    	mov.w     [w14+6], w0
    328a:	60 00 90    	mov.w     [w0+12], w0
    328c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    328e:	37 00 32    	bra       Z, 0x32fe <.L15>
        return;
    if (pin->owner==NULL) {
    3290:	3e 00 90    	mov.w     [w14+6], w0
    3292:	00 08 90    	mov.w     [w0+16], w0
    3294:	00 00 e0    	cp0.w     w0
    3296:	35 00 3a    	bra       NZ, 0x3302 <.L16>
        self->pin = pin;
    3298:	2e 00 90    	mov.w     [w14+4], w0
    329a:	be 00 90    	mov.w     [w14+6], w1
    329c:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    329e:	3e 00 90    	mov.w     [w14+6], w0
    32a0:	ae 00 90    	mov.w     [w14+4], w1
    32a2:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    32a4:	11 3a 80    	mov.w     0x742, w1
    32a6:	f0 0b 20    	mov.w     #0xbf, w0
    32a8:	00 81 60    	and.w     w1, w0, w2
    32aa:	60 04 20    	mov.w     #0x46, w0
    32ac:	71 05 20    	mov.w     #0x57, w1
    32ae:	23 74 20    	mov.w     #0x742, w3
    32b0:	80 49 78    	mov.b     w0, [w3]
    32b2:	81 49 78    	mov.b     w1, [w3]
    32b4:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    32b6:	3e 00 90    	mov.w     [w14+6], w0
    32b8:	70 00 90    	mov.w     [w0+14], w0
    32ba:	be 00 90    	mov.w     [w14+6], w1
    32bc:	f1 00 90    	mov.w     [w1+14], w1
    32be:	11 01 78    	mov.w     [w1], w2
    32c0:	be 00 90    	mov.w     [w14+6], w1
    32c2:	a1 48 90    	mov.b     [w1+10], w1
    32c4:	81 80 fb    	ze        w1, w1
    32c6:	f3 03 20    	mov.w     #0x3f, w3
    32c8:	81 18 dd    	sl.w      w3, w1, w1
    32ca:	81 80 ea    	com.w     w1, w1
    32cc:	81 00 61    	and.w     w2, w1, w1
    32ce:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    32d0:	3e 00 90    	mov.w     [w14+6], w0
    32d2:	70 00 90    	mov.w     [w0+14], w0
    32d4:	be 00 90    	mov.w     [w14+6], w1
    32d6:	f1 00 90    	mov.w     [w1+14], w1
    32d8:	11 01 78    	mov.w     [w1], w2
    32da:	ae 00 90    	mov.w     [w14+4], w1
    32dc:	d1 01 90    	mov.w     [w1+10], w3
    32de:	be 00 90    	mov.w     [w14+6], w1
    32e0:	a1 48 90    	mov.b     [w1+10], w1
    32e2:	81 80 fb    	ze        w1, w1
    32e4:	81 18 dd    	sl.w      w3, w1, w1
    32e6:	82 80 70    	ior.w     w1, w2, w1
    32e8:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    32ea:	10 3a 80    	mov.w     0x742, w0
    32ec:	00 01 78    	mov.w     w0, w2
    32ee:	02 60 a0    	bset.w    w2, #0x6
    32f0:	60 04 20    	mov.w     #0x46, w0
    32f2:	71 05 20    	mov.w     #0x57, w1
    32f4:	23 74 20    	mov.w     #0x742, w3
    32f6:	80 49 78    	mov.b     w0, [w3]
    32f8:	81 49 78    	mov.b     w1, [w3]
    32fa:	82 49 78    	mov.b     w2, [w3]
    32fc:	03 00 37    	bra       0x3304 <.L9>

000032fe <.L15>:
    32fe:	00 00 00    	nop       
    3300:	01 00 37    	bra       0x3304 <.L9>

00003302 <.L16>:
    } else if (pin->owner!=(void *)self) {
        return;
    3302:	00 00 00    	nop       

00003304 <.L9>:
    }
}
    3304:	00 80 fa    	ulnk      
    3306:	00 00 06    	return    

00003308 <_oc_freq>:

void oc_freq(_OC *self, float freq) {
    3308:	06 00 fa    	lnk       #0x6
    330a:	88 1f 78    	mov.w     w8, [w15++]
    330c:	00 0f 78    	mov.w     w0, [w14]
    330e:	12 07 98    	mov.w     w2, [w14+2]
    3310:	23 07 98    	mov.w     w3, [w14+4]
    *(self->OCxCON1) = 0x1C06;
    3312:	1e 00 78    	mov.w     [w14], w0
    3314:	10 00 78    	mov.w     [w0], w0
    3316:	61 c0 21    	mov.w     #0x1c06, w1
    3318:	01 08 78    	mov.w     w1, [w0]
    // 0001_1100_0000_0110
    *(self->OCxCON2) = 0x001F;
    331a:	1e 00 78    	mov.w     [w14], w0
    331c:	10 00 90    	mov.w     [w0+2], w0
    331e:	f1 01 20    	mov.w     #0x1f, w1
    3320:	01 08 78    	mov.w     w1, [w0]
    // 0000_0000_0001_1111
    if (freq<(FCY/65536.))
    3322:	18 c0 b3    	mov.b     #0x1, w8
    3324:	02 40 22    	mov.w     #0x2400, w2
    3326:	43 37 24    	mov.w     #0x4374, w3
    3328:	1e 00 90    	mov.w     [w14+2], w0
    332a:	ae 00 90    	mov.w     [w14+4], w1
    332c:	61 f0 07    	rcall     0x13f0 <___eqsf2> <___lesf2> <___ltsf2>
    332e:	00 00 e0    	cp0.w     w0
    3330:	01 00 35    	bra       LT, 0x3334 <.L18>
    3332:	00 44 eb    	clr.b     w8

00003334 <.L18>:
    3334:	08 04 e0    	cp0.b     w8
    3336:	05 00 32    	bra       Z, 0x3342 <.L19>
        *(self->OCxRS) = 0xFFFF;
    3338:	1e 00 78    	mov.w     [w14], w0
    333a:	20 00 90    	mov.w     [w0+4], w0
    333c:	80 80 eb    	setm.w    w1
    333e:	01 08 78    	mov.w     w1, [w0]
    3340:	0d 00 37    	bra       0x335c <.L17>

00003342 <.L19>:
    else
        *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    3342:	1e 00 78    	mov.w     [w14], w0
    3344:	20 04 90    	mov.w     [w0+4], w8
    3346:	1e 01 90    	mov.w     [w14+2], w2
    3348:	ae 01 90    	mov.w     [w14+4], w3
    334a:	00 40 22    	mov.w     #0x2400, w0
    334c:	41 b7 24    	mov.w     #0x4b74, w1
    334e:	0e f0 07    	rcall     0x136c <___divsf3>
    3350:	02 00 20    	mov.w     #0x0, w2
    3352:	03 f8 23    	mov.w     #0x3f80, w3
    3354:	ad ef 07    	rcall     0x12b0 <___subsf3>
    3356:	50 f0 07    	rcall     0x13f8 <___fixunssfsi>
    3358:	00 00 78    	mov.w     w0, w0
    335a:	00 0c 78    	mov.w     w0, [w8]

0000335c <.L17>:
}
    335c:	4f 04 78    	mov.w     [--w15], w8
    335e:	00 80 fa    	ulnk      
    3360:	00 00 06    	return    

00003362 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    3362:	14 00 fa    	lnk       #0x14
    3364:	20 07 98    	mov.w     w0, [w14+4]
    3366:	31 07 98    	mov.w     w1, [w14+6]
    3368:	42 07 98    	mov.w     w2, [w14+8]
    336a:	54 07 98    	mov.w     w4, [w14+10]
    336c:	65 07 98    	mov.w     w5, [w14+12]
    336e:	76 07 98    	mov.w     w6, [w14+14]
    3370:	07 0f 98    	mov.w     w7, [w14+16]
    3372:	13 0f 98    	mov.w     w3, [w14+18]
    WORD32 temp;

    if (pin->rpnum==-1)
    3374:	3e 00 90    	mov.w     [w14+6], w0
    3376:	60 00 90    	mov.w     [w0+12], w0
    3378:	e1 0f 40    	add.w     w0, #0x1, [w15]
    337a:	86 00 32    	bra       Z, 0x3488 <.L26>
        return;
    if (pin->owner==NULL) {
    337c:	3e 00 90    	mov.w     [w14+6], w0
    337e:	00 08 90    	mov.w     [w0+16], w0
    3380:	00 00 e0    	cp0.w     w0
    3382:	33 00 3a    	bra       NZ, 0x33ea <.L24>
        self->pin = pin;
    3384:	2e 00 90    	mov.w     [w14+4], w0
    3386:	be 00 90    	mov.w     [w14+6], w1
    3388:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    338a:	3e 00 90    	mov.w     [w14+6], w0
    338c:	ae 00 90    	mov.w     [w14+4], w1
    338e:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3390:	11 3a 80    	mov.w     0x742, w1
    3392:	f0 0b 20    	mov.w     #0xbf, w0
    3394:	00 81 60    	and.w     w1, w0, w2
    3396:	60 04 20    	mov.w     #0x46, w0
    3398:	71 05 20    	mov.w     #0x57, w1
    339a:	23 74 20    	mov.w     #0x742, w3
    339c:	80 49 78    	mov.b     w0, [w3]
    339e:	81 49 78    	mov.b     w1, [w3]
    33a0:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    33a2:	3e 00 90    	mov.w     [w14+6], w0
    33a4:	70 00 90    	mov.w     [w0+14], w0
    33a6:	be 00 90    	mov.w     [w14+6], w1
    33a8:	f1 00 90    	mov.w     [w1+14], w1
    33aa:	11 01 78    	mov.w     [w1], w2
    33ac:	be 00 90    	mov.w     [w14+6], w1
    33ae:	a1 48 90    	mov.b     [w1+10], w1
    33b0:	81 80 fb    	ze        w1, w1
    33b2:	f3 03 20    	mov.w     #0x3f, w3
    33b4:	81 18 dd    	sl.w      w3, w1, w1
    33b6:	81 80 ea    	com.w     w1, w1
    33b8:	81 00 61    	and.w     w2, w1, w1
    33ba:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    33bc:	3e 00 90    	mov.w     [w14+6], w0
    33be:	70 00 90    	mov.w     [w0+14], w0
    33c0:	be 00 90    	mov.w     [w14+6], w1
    33c2:	f1 00 90    	mov.w     [w1+14], w1
    33c4:	11 01 78    	mov.w     [w1], w2
    33c6:	ae 00 90    	mov.w     [w14+4], w1
    33c8:	d1 01 90    	mov.w     [w1+10], w3
    33ca:	be 00 90    	mov.w     [w14+6], w1
    33cc:	a1 48 90    	mov.b     [w1+10], w1
    33ce:	81 80 fb    	ze        w1, w1
    33d0:	81 18 dd    	sl.w      w3, w1, w1
    33d2:	82 80 70    	ior.w     w1, w2, w1
    33d4:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    33d6:	10 3a 80    	mov.w     0x742, w0
    33d8:	00 01 78    	mov.w     w0, w2
    33da:	02 60 a0    	bset.w    w2, #0x6
    33dc:	60 04 20    	mov.w     #0x46, w0
    33de:	71 05 20    	mov.w     #0x57, w1
    33e0:	23 74 20    	mov.w     #0x742, w3
    33e2:	80 49 78    	mov.b     w0, [w3]
    33e4:	81 49 78    	mov.b     w1, [w3]
    33e6:	82 49 78    	mov.b     w2, [w3]
    33e8:	05 00 37    	bra       0x33f4 <.L25>

000033ea <.L24>:
    } else if (pin->owner!=(void *)self) {
    33ea:	3e 00 90    	mov.w     [w14+6], w0
    33ec:	80 08 90    	mov.w     [w0+16], w1
    33ee:	2e 00 90    	mov.w     [w14+4], w0
    33f0:	80 8f 50    	sub.w     w1, w0, [w15]
    33f2:	4c 00 3a    	bra       NZ, 0x348c <.L27>

000033f4 <.L25>:
        return;
    }
    if (timer) {
    33f4:	4e 00 90    	mov.w     [w14+8], w0
    33f6:	00 00 e0    	cp0.w     w0
    33f8:	4a 00 32    	bra       Z, 0x348e <.L21>
        self->servooffset = (uint16_t)(FCY*min_width);
    33fa:	02 40 22    	mov.w     #0x2400, w2
    33fc:	43 b7 24    	mov.w     #0x4b74, w3
    33fe:	7e 00 90    	mov.w     [w14+14], w0
    3400:	8e 08 90    	mov.w     [w14+16], w1
    3402:	6a f0 07    	rcall     0x14d8 <___mulsf3>
    3404:	f9 ef 07    	rcall     0x13f8 <___fixunssfsi>
    3406:	80 00 78    	mov.w     w0, w1
    3408:	2e 00 90    	mov.w     [w14+4], w0
    340a:	61 00 98    	mov.w     w1, [w0+12]
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    340c:	7e 01 90    	mov.w     [w14+14], w2
    340e:	8e 09 90    	mov.w     [w14+16], w3
    3410:	3e b8 97    	mov.w     [w14-10], w0
    3412:	ce b8 97    	mov.w     [w14-8], w1
    3414:	4d ef 07    	rcall     0x12b0 <___subsf3>
    3416:	02 40 22    	mov.w     #0x2400, w2
    3418:	43 b7 24    	mov.w     #0x4b74, w3
    341a:	5e f0 07    	rcall     0x14d8 <___mulsf3>
    341c:	ed ef 07    	rcall     0x13f8 <___fixunssfsi>
    341e:	80 00 78    	mov.w     w0, w1
    3420:	2e 00 90    	mov.w     [w14+4], w0
    3422:	71 00 98    	mov.w     w1, [w0+14]
        *(self->OCxCON1) = 0x1C0F;
    3424:	2e 00 90    	mov.w     [w14+4], w0
    3426:	10 00 78    	mov.w     [w0], w0
    3428:	f1 c0 21    	mov.w     #0x1c0f, w1
    342a:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    342c:	2e 00 90    	mov.w     [w14+4], w0
    342e:	10 00 90    	mov.w     [w0+2], w0
    3430:	ce 00 90    	mov.w     [w14+8], w1
    3432:	f1 00 90    	mov.w     [w1+14], w1
    3434:	01 70 a0    	bset.w    w1, #0x7
    3436:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxR) = 1;
    3438:	2e 00 90    	mov.w     [w14+4], w0
    343a:	30 00 90    	mov.w     [w0+6], w0
    343c:	11 00 20    	mov.w     #0x1, w1
    343e:	01 08 78    	mov.w     w1, [w0]
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    3440:	1e 08 90    	mov.w     [w14+18], w0
    3442:	61 01 b8    	mul.uu    w0, #0x1, w2
    3444:	2e 00 90    	mov.w     [w14+4], w0
    3446:	70 00 90    	mov.w     [w0+14], w0
    3448:	80 00 eb    	clr.w     w1
    344a:	00 9a b9    	mul.ss    w3, w0, w4
    344c:	04 02 78    	mov.w     w4, w4
    344e:	02 8b b9    	mul.ss    w1, w2, w6
    3450:	86 02 78    	mov.w     w6, w5
    3452:	05 02 42    	add.w     w4, w5, w4
    3454:	00 10 b8    	mul.uu    w2, w0, w0
    3456:	01 02 42    	add.w     w4, w1, w4
    3458:	84 00 78    	mov.w     w4, w1
    345a:	00 8f be    	mov.d     w0, [w14]
        *(self->OCxRS) = self->servooffset+temp.w[1];
    345c:	2e 00 90    	mov.w     [w14+4], w0
    345e:	20 00 90    	mov.w     [w0+4], w0
    3460:	ae 00 90    	mov.w     [w14+4], w1
    3462:	61 01 90    	mov.w     [w1+12], w2
    3464:	9e 00 90    	mov.w     [w14+2], w1
    3466:	81 00 41    	add.w     w2, w1, w1
    3468:	01 08 78    	mov.w     w1, [w0]
        timer_setPeriod(timer, interval);
    346a:	5e 01 90    	mov.w     [w14+10], w2
    346c:	ee 01 90    	mov.w     [w14+12], w3
    346e:	4e 00 90    	mov.w     [w14+8], w0
    3470:	05 03 07    	rcall     0x3a7c <_timer_setPeriod> <.LFB8> <.LFE7>
        timer_start(timer);
    3472:	4e 00 90    	mov.w     [w14+8], w0
    3474:	d2 03 07    	rcall     0x3c1a <_timer_start> <.LFB13> <.LFE12>
        self->pin->write = __servoWrite;
    3476:	2e 00 90    	mov.w     [w14+4], w0
    3478:	00 08 90    	mov.w     [w0+16], w0
    347a:	41 06 23    	mov.w     #0x3064, w1
    347c:	11 08 98    	mov.w     w1, [w0+18]
        self->pin->read = __servoRead;
    347e:	2e 00 90    	mov.w     [w14+4], w0
    3480:	00 08 90    	mov.w     [w0+16], w0
    3482:	21 03 23    	mov.w     #0x3032, w1
    3484:	21 08 98    	mov.w     w1, [w0+20]
    3486:	03 00 37    	bra       0x348e <.L21>

00003488 <.L26>:
    3488:	00 00 00    	nop       
    348a:	01 00 37    	bra       0x348e <.L21>

0000348c <.L27>:
    348c:	00 00 00    	nop       

0000348e <.L21>:
    }
}
    348e:	00 80 fa    	ulnk      
    3490:	00 00 06    	return    

00003492 <___digitalWrite>:
    3492:	04 00 fa    	lnk       #0x4
    3494:	00 0f 78    	mov.w     w0, [w14]
    3496:	11 07 98    	mov.w     w1, [w14+2]
    3498:	1e 00 90    	mov.w     [w14+2], w0
    349a:	00 00 e0    	cp0.w     w0
    349c:	0d 00 32    	bra       Z, 0x34b8 <.L2>
    349e:	1e 00 78    	mov.w     [w14], w0
    34a0:	10 00 78    	mov.w     [w0], w0
    34a2:	9e 00 78    	mov.w     [w14], w1
    34a4:	91 00 78    	mov.w     [w1], w1
    34a6:	11 01 78    	mov.w     [w1], w2
    34a8:	9e 00 78    	mov.w     [w14], w1
    34aa:	e1 40 90    	mov.b     [w1+6], w1
    34ac:	81 80 fb    	ze        w1, w1
    34ae:	13 00 20    	mov.w     #0x1, w3
    34b0:	81 18 dd    	sl.w      w3, w1, w1
    34b2:	82 80 70    	ior.w     w1, w2, w1
    34b4:	01 08 78    	mov.w     w1, [w0]
    34b6:	0d 00 37    	bra       0x34d2 <.L1>

000034b8 <.L2>:
    34b8:	1e 00 78    	mov.w     [w14], w0
    34ba:	10 00 78    	mov.w     [w0], w0
    34bc:	9e 00 78    	mov.w     [w14], w1
    34be:	91 00 78    	mov.w     [w1], w1
    34c0:	11 01 78    	mov.w     [w1], w2
    34c2:	9e 00 78    	mov.w     [w14], w1
    34c4:	e1 40 90    	mov.b     [w1+6], w1
    34c6:	81 80 fb    	ze        w1, w1
    34c8:	13 00 20    	mov.w     #0x1, w3
    34ca:	81 18 dd    	sl.w      w3, w1, w1
    34cc:	81 80 ea    	com.w     w1, w1
    34ce:	81 00 61    	and.w     w2, w1, w1
    34d0:	01 08 78    	mov.w     w1, [w0]

000034d2 <.L1>:
    34d2:	00 80 fa    	ulnk      
    34d4:	00 00 06    	return    

000034d6 <___digitalRead>:
    34d6:	02 00 fa    	lnk       #0x2
    34d8:	00 0f 78    	mov.w     w0, [w14]
    34da:	1e 00 78    	mov.w     [w14], w0
    34dc:	10 00 78    	mov.w     [w0], w0
    34de:	90 00 78    	mov.w     [w0], w1
    34e0:	1e 00 78    	mov.w     [w14], w0
    34e2:	60 40 90    	mov.b     [w0+6], w0
    34e4:	00 80 fb    	ze        w0, w0
    34e6:	12 00 20    	mov.w     #0x1, w2
    34e8:	00 10 dd    	sl.w      w2, w0, w0
    34ea:	00 80 60    	and.w     w1, w0, w0
    34ec:	00 f0 a7    	btsc.w    w0, #0xf
    34ee:	00 00 ea    	neg.w     w0, w0
    34f0:	00 00 ea    	neg.w     w0, w0
    34f2:	4f 00 de    	lsr.w     w0, #0xf, w0
    34f4:	00 80 fa    	ulnk      
    34f6:	00 00 06    	return    

000034f8 <___analogRead>:
    34f8:	02 00 fa    	lnk       #0x2
    34fa:	00 0f 78    	mov.w     w0, [w14]
    34fc:	1e 00 78    	mov.w     [w14], w0
    34fe:	40 00 90    	mov.w     [w0+8], w0
    3500:	40 19 88    	mov.w     w0, 0x328
    3502:	20 23 a8    	bset.b    0x320, #0x1
    3504:	00 00 00    	nop       

00003506 <.L6>:
    3506:	00 19 80    	mov.w     0x320, w0
    3508:	61 00 60    	and.w     w0, #0x1, w0
    350a:	00 00 e0    	cp0.w     w0
    350c:	fc ff 32    	bra       Z, 0x3506 <.L6>
    350e:	00 18 80    	mov.w     0x300, w0
    3510:	00 80 fa    	ulnk      
    3512:	00 00 06    	return    

00003514 <_init_pin>:
    3514:	02 00 fa    	lnk       #0x2
    3516:	40 6d 20    	mov.w     #0x6d4, w0
    3518:	80 1f 78    	mov.w     w0, [w15++]
    351a:	47 01 20    	mov.w     #0x14, w7
    351c:	00 43 eb    	clr.b     w6
    351e:	80 82 eb    	setm.w    w5
    3520:	54 c0 b3    	mov.b     #0x5, w4
    3522:	80 01 eb    	clr.w     w3
    3524:	82 2d 20    	mov.w     #0x2d8, w2
    3526:	a1 2d 20    	mov.w     #0x2da, w1
    3528:	80 83 20    	mov.w     #0x838, w0
    352a:	08 01 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    352c:	8f 87 e9    	dec2.w    w15, w15
    352e:	80 6d 20    	mov.w     #0x6d8, w0
    3530:	80 1f 78    	mov.w     w0, [w15++]
    3532:	97 01 20    	mov.w     #0x19, w7
    3534:	86 c0 b3    	mov.b     #0x8, w6
    3536:	80 82 eb    	setm.w    w5
    3538:	44 c0 b3    	mov.b     #0x4, w4
    353a:	80 01 eb    	clr.w     w3
    353c:	82 2d 20    	mov.w     #0x2d8, w2
    353e:	a1 2d 20    	mov.w     #0x2da, w1
    3540:	e0 84 20    	mov.w     #0x84e, w0
    3542:	fc 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    3544:	8f 87 e9    	dec2.w    w15, w15
    3546:	a0 6c 20    	mov.w     #0x6ca, w0
    3548:	80 1f 78    	mov.w     w0, [w15++]
    354a:	a7 00 20    	mov.w     #0xa, w7
    354c:	00 43 eb    	clr.b     w6
    354e:	80 82 eb    	setm.w    w5
    3550:	44 c0 b3    	mov.b     #0x4, w4
    3552:	80 01 eb    	clr.w     w3
    3554:	82 2e 20    	mov.w     #0x2e8, w2
    3556:	a1 2e 20    	mov.w     #0x2ea, w1
    3558:	40 86 20    	mov.w     #0x864, w0
    355a:	f0 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    355c:	8f 87 e9    	dec2.w    w15, w15
    355e:	00 6d 20    	mov.w     #0x6d0, w0
    3560:	80 1f 78    	mov.w     w0, [w15++]
    3562:	17 01 20    	mov.w     #0x11, w7
    3564:	86 c0 b3    	mov.b     #0x8, w6
    3566:	80 82 eb    	setm.w    w5
    3568:	54 c0 b3    	mov.b     #0x5, w4
    356a:	80 01 eb    	clr.w     w3
    356c:	82 2e 20    	mov.w     #0x2e8, w2
    356e:	a1 2e 20    	mov.w     #0x2ea, w1
    3570:	a0 87 20    	mov.w     #0x87a, w0
    3572:	e4 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    3574:	8f 87 e9    	dec2.w    w15, w15
    3576:	c0 6d 20    	mov.w     #0x6dc, w0
    3578:	80 1f 78    	mov.w     w0, [w15++]
    357a:	d7 01 20    	mov.w     #0x1d, w7
    357c:	86 c0 b3    	mov.b     #0x8, w6
    357e:	f5 00 20    	mov.w     #0xf, w5
    3580:	f4 c0 b3    	mov.b     #0xf, w4
    3582:	23 4e 20    	mov.w     #0x4e2, w3
    3584:	82 2c 20    	mov.w     #0x2c8, w2
    3586:	a1 2c 20    	mov.w     #0x2ca, w1
    3588:	00 89 20    	mov.w     #0x890, w0
    358a:	d8 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    358c:	8f 87 e9    	dec2.w    w15, w15
    358e:	00 6d 20    	mov.w     #0x6d0, w0
    3590:	80 1f 78    	mov.w     w0, [w15++]
    3592:	07 01 20    	mov.w     #0x10, w7
    3594:	00 43 eb    	clr.b     w6
    3596:	80 82 eb    	setm.w    w5
    3598:	34 c0 b3    	mov.b     #0x3, w4
    359a:	80 01 eb    	clr.w     w3
    359c:	82 2e 20    	mov.w     #0x2e8, w2
    359e:	a1 2e 20    	mov.w     #0x2ea, w1
    35a0:	60 8a 20    	mov.w     #0x8a6, w0
    35a2:	cc 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    35a4:	8f 87 e9    	dec2.w    w15, w15
    35a6:	20 6c 20    	mov.w     #0x6c2, w0
    35a8:	80 1f 78    	mov.w     w0, [w15++]
    35aa:	27 00 20    	mov.w     #0x2, w7
    35ac:	00 43 eb    	clr.b     w6
    35ae:	80 82 eb    	setm.w    w5
    35b0:	84 c0 b3    	mov.b     #0x8, w4
    35b2:	80 01 eb    	clr.w     w3
    35b4:	82 2d 20    	mov.w     #0x2d8, w2
    35b6:	a1 2d 20    	mov.w     #0x2da, w1
    35b8:	c0 8b 20    	mov.w     #0x8bc, w0
    35ba:	c0 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    35bc:	8f 87 e9    	dec2.w    w15, w15
    35be:	c0 6c 20    	mov.w     #0x6cc, w0
    35c0:	80 1f 78    	mov.w     w0, [w15++]
    35c2:	c7 00 20    	mov.w     #0xc, w7
    35c4:	00 43 eb    	clr.b     w6
    35c6:	80 82 eb    	setm.w    w5
    35c8:	b4 c0 b3    	mov.b     #0xb, w4
    35ca:	80 01 eb    	clr.w     w3
    35cc:	82 2d 20    	mov.w     #0x2d8, w2
    35ce:	a1 2d 20    	mov.w     #0x2da, w1
    35d0:	20 8d 20    	mov.w     #0x8d2, w0
    35d2:	b4 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    35d4:	8f 87 e9    	dec2.w    w15, w15
    35d6:	40 6c 20    	mov.w     #0x6c4, w0
    35d8:	80 1f 78    	mov.w     w0, [w15++]
    35da:	47 00 20    	mov.w     #0x4, w7
    35dc:	00 43 eb    	clr.b     w6
    35de:	80 82 eb    	setm.w    w5
    35e0:	94 c0 b3    	mov.b     #0x9, w4
    35e2:	80 01 eb    	clr.w     w3
    35e4:	82 2d 20    	mov.w     #0x2d8, w2
    35e6:	a1 2d 20    	mov.w     #0x2da, w1
    35e8:	80 8e 20    	mov.w     #0x8e8, w0
    35ea:	a8 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    35ec:	8f 87 e9    	dec2.w    w15, w15
    35ee:	20 6c 20    	mov.w     #0x6c2, w0
    35f0:	80 1f 78    	mov.w     w0, [w15++]
    35f2:	37 00 20    	mov.w     #0x3, w7
    35f4:	86 c0 b3    	mov.b     #0x8, w6
    35f6:	80 82 eb    	setm.w    w5
    35f8:	a4 c0 b3    	mov.b     #0xa, w4
    35fa:	80 01 eb    	clr.w     w3
    35fc:	82 2d 20    	mov.w     #0x2d8, w2
    35fe:	a1 2d 20    	mov.w     #0x2da, w1
    3600:	e0 8f 20    	mov.w     #0x8fe, w0
    3602:	9c 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    3604:	8f 87 e9    	dec2.w    w15, w15
    3606:	a0 6c 20    	mov.w     #0x6ca, w0
    3608:	80 1f 78    	mov.w     w0, [w15++]
    360a:	b7 00 20    	mov.w     #0xb, w7
    360c:	86 c0 b3    	mov.b     #0x8, w6
    360e:	80 82 eb    	setm.w    w5
    3610:	00 42 eb    	clr.b     w4
    3612:	80 01 eb    	clr.w     w3
    3614:	82 2d 20    	mov.w     #0x2d8, w2
    3616:	a1 2d 20    	mov.w     #0x2da, w1
    3618:	40 91 20    	mov.w     #0x914, w0
    361a:	90 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    361c:	8f 87 e9    	dec2.w    w15, w15
    361e:	80 6d 20    	mov.w     #0x6d8, w0
    3620:	80 1f 78    	mov.w     w0, [w15++]
    3622:	87 01 20    	mov.w     #0x18, w7
    3624:	00 43 eb    	clr.b     w6
    3626:	80 82 eb    	setm.w    w5
    3628:	14 c0 b3    	mov.b     #0x1, w4
    362a:	80 01 eb    	clr.w     w3
    362c:	82 2d 20    	mov.w     #0x2d8, w2
    362e:	a1 2d 20    	mov.w     #0x2da, w1
    3630:	a0 92 20    	mov.w     #0x92a, w0
    3632:	84 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    3634:	8f 87 e9    	dec2.w    w15, w15
    3636:	60 6d 20    	mov.w     #0x6d6, w0
    3638:	80 1f 78    	mov.w     w0, [w15++]
    363a:	77 01 20    	mov.w     #0x17, w7
    363c:	86 c0 b3    	mov.b     #0x8, w6
    363e:	80 82 eb    	setm.w    w5
    3640:	24 c0 b3    	mov.b     #0x2, w4
    3642:	80 01 eb    	clr.w     w3
    3644:	82 2d 20    	mov.w     #0x2d8, w2
    3646:	a1 2d 20    	mov.w     #0x2da, w1
    3648:	00 94 20    	mov.w     #0x940, w0
    364a:	78 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    364c:	8f 87 e9    	dec2.w    w15, w15
    364e:	60 6d 20    	mov.w     #0x6d6, w0
    3650:	80 1f 78    	mov.w     w0, [w15++]
    3652:	67 01 20    	mov.w     #0x16, w7
    3654:	00 43 eb    	clr.b     w6
    3656:	80 82 eb    	setm.w    w5
    3658:	34 c0 b3    	mov.b     #0x3, w4
    365a:	80 01 eb    	clr.w     w3
    365c:	82 2d 20    	mov.w     #0x2d8, w2
    365e:	a1 2d 20    	mov.w     #0x2da, w1
    3660:	60 95 20    	mov.w     #0x956, w0
    3662:	6c 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    3664:	8f 87 e9    	dec2.w    w15, w15
    3666:	00 6c 20    	mov.w     #0x6c0, w0
    3668:	80 1f 78    	mov.w     w0, [w15++]
    366a:	80 03 eb    	clr.w     w7
    366c:	00 43 eb    	clr.b     w6
    366e:	80 02 eb    	clr.w     w5
    3670:	00 42 eb    	clr.b     w4
    3672:	23 4e 20    	mov.w     #0x4e2, w3
    3674:	82 2c 20    	mov.w     #0x2c8, w2
    3676:	a1 2c 20    	mov.w     #0x2ca, w1
    3678:	a0 9d 20    	mov.w     #0x9da, w0
    367a:	60 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    367c:	8f 87 e9    	dec2.w    w15, w15
    367e:	00 6c 20    	mov.w     #0x6c0, w0
    3680:	80 1f 78    	mov.w     w0, [w15++]
    3682:	17 00 20    	mov.w     #0x1, w7
    3684:	86 c0 b3    	mov.b     #0x8, w6
    3686:	15 00 20    	mov.w     #0x1, w5
    3688:	14 c0 b3    	mov.b     #0x1, w4
    368a:	23 4e 20    	mov.w     #0x4e2, w3
    368c:	82 2c 20    	mov.w     #0x2c8, w2
    368e:	a1 2c 20    	mov.w     #0x2ca, w1
    3690:	40 9c 20    	mov.w     #0x9c4, w0
    3692:	54 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    3694:	8f 87 e9    	dec2.w    w15, w15
    3696:	c0 6c 20    	mov.w     #0x6cc, w0
    3698:	80 1f 78    	mov.w     w0, [w15++]
    369a:	d7 00 20    	mov.w     #0xd, w7
    369c:	86 c0 b3    	mov.b     #0x8, w6
    369e:	25 00 20    	mov.w     #0x2, w5
    36a0:	24 c0 b3    	mov.b     #0x2, w4
    36a2:	23 4e 20    	mov.w     #0x4e2, w3
    36a4:	82 2c 20    	mov.w     #0x2c8, w2
    36a6:	a1 2c 20    	mov.w     #0x2ca, w1
    36a8:	e0 9a 20    	mov.w     #0x9ae, w0
    36aa:	48 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    36ac:	8f 87 e9    	dec2.w    w15, w15
    36ae:	00 00 eb    	clr.w     w0
    36b0:	80 1f 78    	mov.w     w0, [w15++]
    36b2:	80 83 eb    	setm.w    w7
    36b4:	00 43 eb    	clr.b     w6
    36b6:	35 00 20    	mov.w     #0x3, w5
    36b8:	34 c0 b3    	mov.b     #0x3, w4
    36ba:	23 4e 20    	mov.w     #0x4e2, w3
    36bc:	82 2c 20    	mov.w     #0x2c8, w2
    36be:	a1 2c 20    	mov.w     #0x2ca, w1
    36c0:	80 99 20    	mov.w     #0x998, w0
    36c2:	3c 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    36c4:	8f 87 e9    	dec2.w    w15, w15
    36c6:	c0 6d 20    	mov.w     #0x6dc, w0
    36c8:	80 1f 78    	mov.w     w0, [w15++]
    36ca:	c7 01 20    	mov.w     #0x1c, w7
    36cc:	00 43 eb    	clr.b     w6
    36ce:	45 00 20    	mov.w     #0x4, w5
    36d0:	44 c0 b3    	mov.b     #0x4, w4
    36d2:	23 4e 20    	mov.w     #0x4e2, w3
    36d4:	82 2c 20    	mov.w     #0x2c8, w2
    36d6:	a1 2c 20    	mov.w     #0x2ca, w1
    36d8:	20 98 20    	mov.w     #0x982, w0
    36da:	30 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    36dc:	8f 87 e9    	dec2.w    w15, w15
    36de:	20 6d 20    	mov.w     #0x6d2, w0
    36e0:	80 1f 78    	mov.w     w0, [w15++]
    36e2:	27 01 20    	mov.w     #0x12, w7
    36e4:	00 43 eb    	clr.b     w6
    36e6:	55 00 20    	mov.w     #0x5, w5
    36e8:	54 c0 b3    	mov.b     #0x5, w4
    36ea:	23 4e 20    	mov.w     #0x4e2, w3
    36ec:	82 2c 20    	mov.w     #0x2c8, w2
    36ee:	a1 2c 20    	mov.w     #0x2ca, w1
    36f0:	c0 96 20    	mov.w     #0x96c, w0
    36f2:	24 00 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    36f4:	8f 87 e9    	dec2.w    w15, w15
    36f6:	00 00 eb    	clr.w     w0
    36f8:	00 0f 78    	mov.w     w0, [w14]
    36fa:	07 00 37    	bra       0x370a <.L8>

000036fc <.L9>:
    36fc:	1e 00 78    	mov.w     [w14], w0
    36fe:	76 00 b9    	mul.su    w0, #0x16, w0
    3700:	80 00 78    	mov.w     w0, w1
    3702:	80 83 20    	mov.w     #0x838, w0
    3704:	00 80 40    	add.w     w1, w0, w0
    3706:	46 00 07    	rcall     0x3794 <_pin_digitalIn> <.LFB5> <.LFE4>
    3708:	1e 0f e8    	inc.w     [w14], [w14]

0000370a <.L8>:
    370a:	1e 00 78    	mov.w     [w14], w0
    370c:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    370e:	f6 ff 36    	bra       LEU, 0x36fc <.L9>
    3710:	00 00 eb    	clr.w     w0
    3712:	00 0f 78    	mov.w     w0, [w14]
    3714:	07 00 37    	bra       0x3724 <.L10>

00003716 <.L11>:
    3716:	1e 00 78    	mov.w     [w14], w0
    3718:	76 00 b9    	mul.su    w0, #0x16, w0
    371a:	80 00 78    	mov.w     w0, w1
    371c:	c0 96 20    	mov.w     #0x96c, w0
    371e:	00 80 40    	add.w     w1, w0, w0
    3720:	95 00 07    	rcall     0x384c <_pin_analogIn> <.LFB7> <.LFE6>
    3722:	1e 0f e8    	inc.w     [w14], [w14]

00003724 <.L10>:
    3724:	1e 00 78    	mov.w     [w14], w0
    3726:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3728:	f6 ff 36    	bra       LEU, 0x3716 <.L11>
    372a:	00 2e 20    	mov.w     #0x2e0, w0
    372c:	00 19 88    	mov.w     w0, 0x320
    372e:	22 23 ef    	clr.w     0x322
    3730:	00 c4 20    	mov.w     #0xc40, w0
    3732:	20 19 88    	mov.w     w0, 0x324
    3734:	28 23 ef    	clr.w     0x328
    3736:	21 e3 a8    	bset.b    0x321, #0x7
    3738:	00 80 fa    	ulnk      
    373a:	00 00 06    	return    

0000373c <_pin_init>:
    373c:	10 00 fa    	lnk       #0x10
    373e:	00 0f 78    	mov.w     w0, [w14]
    3740:	11 07 98    	mov.w     w1, [w14+2]
    3742:	22 07 98    	mov.w     w2, [w14+4]
    3744:	33 07 98    	mov.w     w3, [w14+6]
    3746:	04 4f 98    	mov.b     w4, [w14+8]
    3748:	55 07 98    	mov.w     w5, [w14+10]
    374a:	46 4f 98    	mov.b     w6, [w14+12]
    374c:	77 07 98    	mov.w     w7, [w14+14]
    374e:	1e 00 78    	mov.w     [w14], w0
    3750:	9e 00 90    	mov.w     [w14+2], w1
    3752:	01 08 78    	mov.w     w1, [w0]
    3754:	1e 00 78    	mov.w     [w14], w0
    3756:	ae 00 90    	mov.w     [w14+4], w1
    3758:	11 00 98    	mov.w     w1, [w0+2]
    375a:	1e 00 78    	mov.w     [w14], w0
    375c:	be 00 90    	mov.w     [w14+6], w1
    375e:	21 00 98    	mov.w     w1, [w0+4]
    3760:	1e 00 78    	mov.w     [w14], w0
    3762:	8e 48 90    	mov.b     [w14+8], w1
    3764:	61 40 98    	mov.b     w1, [w0+6]
    3766:	1e 00 78    	mov.w     [w14], w0
    3768:	de 00 90    	mov.w     [w14+10], w1
    376a:	41 00 98    	mov.w     w1, [w0+8]
    376c:	1e 00 78    	mov.w     [w14], w0
    376e:	ce 48 90    	mov.b     [w14+12], w1
    3770:	21 48 98    	mov.b     w1, [w0+10]
    3772:	fe 00 90    	mov.w     [w14+14], w1
    3774:	1e 00 78    	mov.w     [w14], w0
    3776:	61 00 98    	mov.w     w1, [w0+12]
    3778:	1e 00 78    	mov.w     [w14], w0
    377a:	ce b8 97    	mov.w     [w14-8], w1
    377c:	71 00 98    	mov.w     w1, [w0+14]
    377e:	1e 00 78    	mov.w     [w14], w0
    3780:	80 00 eb    	clr.w     w1
    3782:	01 08 98    	mov.w     w1, [w0+16]
    3784:	1e 00 78    	mov.w     [w14], w0
    3786:	80 00 eb    	clr.w     w1
    3788:	11 08 98    	mov.w     w1, [w0+18]
    378a:	1e 00 78    	mov.w     [w14], w0
    378c:	80 00 eb    	clr.w     w1
    378e:	21 08 98    	mov.w     w1, [w0+20]
    3790:	00 80 fa    	ulnk      
    3792:	00 00 06    	return    

00003794 <_pin_digitalIn>:
    3794:	02 00 fa    	lnk       #0x2
    3796:	00 0f 78    	mov.w     w0, [w14]
    3798:	1e 00 78    	mov.w     [w14], w0
    379a:	20 00 90    	mov.w     [w0+4], w0
    379c:	00 00 e0    	cp0.w     w0
    379e:	0d 00 32    	bra       Z, 0x37ba <.L14>
    37a0:	1e 00 78    	mov.w     [w14], w0
    37a2:	20 00 90    	mov.w     [w0+4], w0
    37a4:	9e 00 78    	mov.w     [w14], w1
    37a6:	a1 00 90    	mov.w     [w1+4], w1
    37a8:	11 01 78    	mov.w     [w1], w2
    37aa:	9e 00 78    	mov.w     [w14], w1
    37ac:	e1 40 90    	mov.b     [w1+6], w1
    37ae:	81 80 fb    	ze        w1, w1
    37b0:	13 00 20    	mov.w     #0x1, w3
    37b2:	81 18 dd    	sl.w      w3, w1, w1
    37b4:	81 80 ea    	com.w     w1, w1
    37b6:	81 00 61    	and.w     w2, w1, w1
    37b8:	01 08 78    	mov.w     w1, [w0]

000037ba <.L14>:
    37ba:	1e 00 78    	mov.w     [w14], w0
    37bc:	10 00 90    	mov.w     [w0+2], w0
    37be:	9e 00 78    	mov.w     [w14], w1
    37c0:	91 00 90    	mov.w     [w1+2], w1
    37c2:	11 01 78    	mov.w     [w1], w2
    37c4:	9e 00 78    	mov.w     [w14], w1
    37c6:	e1 40 90    	mov.b     [w1+6], w1
    37c8:	81 80 fb    	ze        w1, w1
    37ca:	13 00 20    	mov.w     #0x1, w3
    37cc:	81 18 dd    	sl.w      w3, w1, w1
    37ce:	82 80 70    	ior.w     w1, w2, w1
    37d0:	01 08 78    	mov.w     w1, [w0]
    37d2:	1e 00 78    	mov.w     [w14], w0
    37d4:	80 00 eb    	clr.w     w1
    37d6:	11 08 98    	mov.w     w1, [w0+18]
    37d8:	1e 00 78    	mov.w     [w14], w0
    37da:	61 4d 23    	mov.w     #0x34d6, w1
    37dc:	21 08 98    	mov.w     w1, [w0+20]
    37de:	00 80 fa    	ulnk      
    37e0:	00 00 06    	return    

000037e2 <_pin_digitalOut>:
    37e2:	02 00 fa    	lnk       #0x2
    37e4:	00 0f 78    	mov.w     w0, [w14]
    37e6:	1e 00 78    	mov.w     [w14], w0
    37e8:	20 00 90    	mov.w     [w0+4], w0
    37ea:	00 00 e0    	cp0.w     w0
    37ec:	0d 00 32    	bra       Z, 0x3808 <.L16>
    37ee:	1e 00 78    	mov.w     [w14], w0
    37f0:	20 00 90    	mov.w     [w0+4], w0
    37f2:	9e 00 78    	mov.w     [w14], w1
    37f4:	a1 00 90    	mov.w     [w1+4], w1
    37f6:	11 01 78    	mov.w     [w1], w2
    37f8:	9e 00 78    	mov.w     [w14], w1
    37fa:	e1 40 90    	mov.b     [w1+6], w1
    37fc:	81 80 fb    	ze        w1, w1
    37fe:	13 00 20    	mov.w     #0x1, w3
    3800:	81 18 dd    	sl.w      w3, w1, w1
    3802:	81 80 ea    	com.w     w1, w1
    3804:	81 00 61    	and.w     w2, w1, w1
    3806:	01 08 78    	mov.w     w1, [w0]

00003808 <.L16>:
    3808:	1e 00 78    	mov.w     [w14], w0
    380a:	10 00 78    	mov.w     [w0], w0
    380c:	9e 00 78    	mov.w     [w14], w1
    380e:	91 00 78    	mov.w     [w1], w1
    3810:	11 01 78    	mov.w     [w1], w2
    3812:	9e 00 78    	mov.w     [w14], w1
    3814:	e1 40 90    	mov.b     [w1+6], w1
    3816:	81 80 fb    	ze        w1, w1
    3818:	13 00 20    	mov.w     #0x1, w3
    381a:	81 18 dd    	sl.w      w3, w1, w1
    381c:	81 80 ea    	com.w     w1, w1
    381e:	81 00 61    	and.w     w2, w1, w1
    3820:	01 08 78    	mov.w     w1, [w0]
    3822:	1e 00 78    	mov.w     [w14], w0
    3824:	10 00 90    	mov.w     [w0+2], w0
    3826:	9e 00 78    	mov.w     [w14], w1
    3828:	91 00 90    	mov.w     [w1+2], w1
    382a:	11 01 78    	mov.w     [w1], w2
    382c:	9e 00 78    	mov.w     [w14], w1
    382e:	e1 40 90    	mov.b     [w1+6], w1
    3830:	81 80 fb    	ze        w1, w1
    3832:	13 00 20    	mov.w     #0x1, w3
    3834:	81 18 dd    	sl.w      w3, w1, w1
    3836:	81 80 ea    	com.w     w1, w1
    3838:	81 00 61    	and.w     w2, w1, w1
    383a:	01 08 78    	mov.w     w1, [w0]
    383c:	1e 00 78    	mov.w     [w14], w0
    383e:	21 49 23    	mov.w     #0x3492, w1
    3840:	11 08 98    	mov.w     w1, [w0+18]
    3842:	1e 00 78    	mov.w     [w14], w0
    3844:	61 4d 23    	mov.w     #0x34d6, w1
    3846:	21 08 98    	mov.w     w1, [w0+20]
    3848:	00 80 fa    	ulnk      
    384a:	00 00 06    	return    

0000384c <_pin_analogIn>:
    384c:	02 00 fa    	lnk       #0x2
    384e:	00 0f 78    	mov.w     w0, [w14]
    3850:	1e 00 78    	mov.w     [w14], w0
    3852:	20 00 90    	mov.w     [w0+4], w0
    3854:	00 00 e0    	cp0.w     w0
    3856:	1f 00 32    	bra       Z, 0x3896 <.L20>
    3858:	1e 00 78    	mov.w     [w14], w0
    385a:	10 00 90    	mov.w     [w0+2], w0
    385c:	9e 00 78    	mov.w     [w14], w1
    385e:	91 00 90    	mov.w     [w1+2], w1
    3860:	11 01 78    	mov.w     [w1], w2
    3862:	9e 00 78    	mov.w     [w14], w1
    3864:	e1 40 90    	mov.b     [w1+6], w1
    3866:	81 80 fb    	ze        w1, w1
    3868:	13 00 20    	mov.w     #0x1, w3
    386a:	81 18 dd    	sl.w      w3, w1, w1
    386c:	82 80 70    	ior.w     w1, w2, w1
    386e:	01 08 78    	mov.w     w1, [w0]
    3870:	1e 00 78    	mov.w     [w14], w0
    3872:	20 00 90    	mov.w     [w0+4], w0
    3874:	9e 00 78    	mov.w     [w14], w1
    3876:	a1 00 90    	mov.w     [w1+4], w1
    3878:	11 01 78    	mov.w     [w1], w2
    387a:	9e 00 78    	mov.w     [w14], w1
    387c:	e1 40 90    	mov.b     [w1+6], w1
    387e:	81 80 fb    	ze        w1, w1
    3880:	13 00 20    	mov.w     #0x1, w3
    3882:	81 18 dd    	sl.w      w3, w1, w1
    3884:	82 80 70    	ior.w     w1, w2, w1
    3886:	01 08 78    	mov.w     w1, [w0]
    3888:	1e 00 78    	mov.w     [w14], w0
    388a:	80 00 eb    	clr.w     w1
    388c:	11 08 98    	mov.w     w1, [w0+18]
    388e:	1e 00 78    	mov.w     [w14], w0
    3890:	81 4f 23    	mov.w     #0x34f8, w1
    3892:	21 08 98    	mov.w     w1, [w0+20]
    3894:	01 00 37    	bra       0x3898 <.L17>

00003896 <.L20>:
    3896:	00 00 00    	nop       

00003898 <.L17>:
    3898:	00 80 fa    	ulnk      
    389a:	00 00 06    	return    

0000389c <_pin_set>:
    389c:	02 00 fa    	lnk       #0x2
    389e:	00 0f 78    	mov.w     w0, [w14]
    38a0:	1e 00 78    	mov.w     [w14], w0
    38a2:	90 08 90    	mov.w     [w0+18], w1
    38a4:	20 49 23    	mov.w     #0x3492, w0
    38a6:	80 8f 50    	sub.w     w1, w0, [w15]
    38a8:	0c 00 3a    	bra       NZ, 0x38c2 <.L21>
    38aa:	1e 00 78    	mov.w     [w14], w0
    38ac:	10 00 78    	mov.w     [w0], w0
    38ae:	9e 00 78    	mov.w     [w14], w1
    38b0:	91 00 78    	mov.w     [w1], w1
    38b2:	11 01 78    	mov.w     [w1], w2
    38b4:	9e 00 78    	mov.w     [w14], w1
    38b6:	e1 40 90    	mov.b     [w1+6], w1
    38b8:	81 80 fb    	ze        w1, w1
    38ba:	13 00 20    	mov.w     #0x1, w3
    38bc:	81 18 dd    	sl.w      w3, w1, w1
    38be:	82 80 70    	ior.w     w1, w2, w1
    38c0:	01 08 78    	mov.w     w1, [w0]

000038c2 <.L21>:
    38c2:	00 80 fa    	ulnk      
    38c4:	00 00 06    	return    

000038c6 <_pin_clear>:
    38c6:	02 00 fa    	lnk       #0x2
    38c8:	00 0f 78    	mov.w     w0, [w14]
    38ca:	1e 00 78    	mov.w     [w14], w0
    38cc:	90 08 90    	mov.w     [w0+18], w1
    38ce:	20 49 23    	mov.w     #0x3492, w0
    38d0:	80 8f 50    	sub.w     w1, w0, [w15]
    38d2:	0d 00 3a    	bra       NZ, 0x38ee <.L23>
    38d4:	1e 00 78    	mov.w     [w14], w0
    38d6:	10 00 78    	mov.w     [w0], w0
    38d8:	9e 00 78    	mov.w     [w14], w1
    38da:	91 00 78    	mov.w     [w1], w1
    38dc:	11 01 78    	mov.w     [w1], w2
    38de:	9e 00 78    	mov.w     [w14], w1
    38e0:	e1 40 90    	mov.b     [w1+6], w1
    38e2:	81 80 fb    	ze        w1, w1
    38e4:	13 00 20    	mov.w     #0x1, w3
    38e6:	81 18 dd    	sl.w      w3, w1, w1
    38e8:	81 80 ea    	com.w     w1, w1
    38ea:	81 00 61    	and.w     w2, w1, w1
    38ec:	01 08 78    	mov.w     w1, [w0]

000038ee <.L23>:
    38ee:	00 80 fa    	ulnk      
    38f0:	00 00 06    	return    

000038f2 <_pin_toggle>:
    38f2:	02 00 fa    	lnk       #0x2
    38f4:	00 0f 78    	mov.w     w0, [w14]
    38f6:	1e 00 78    	mov.w     [w14], w0
    38f8:	90 08 90    	mov.w     [w0+18], w1
    38fa:	20 49 23    	mov.w     #0x3492, w0
    38fc:	80 8f 50    	sub.w     w1, w0, [w15]
    38fe:	0c 00 3a    	bra       NZ, 0x3918 <.L25>
    3900:	1e 00 78    	mov.w     [w14], w0
    3902:	10 00 78    	mov.w     [w0], w0
    3904:	9e 00 78    	mov.w     [w14], w1
    3906:	91 00 78    	mov.w     [w1], w1
    3908:	11 01 78    	mov.w     [w1], w2
    390a:	9e 00 78    	mov.w     [w14], w1
    390c:	e1 40 90    	mov.b     [w1+6], w1
    390e:	81 80 fb    	ze        w1, w1
    3910:	13 00 20    	mov.w     #0x1, w3
    3912:	81 18 dd    	sl.w      w3, w1, w1
    3914:	81 00 69    	xor.w     w2, w1, w1
    3916:	01 08 78    	mov.w     w1, [w0]

00003918 <.L25>:
    3918:	00 80 fa    	ulnk      
    391a:	00 00 06    	return    

0000391c <_pin_write>:
    391c:	04 00 fa    	lnk       #0x4
    391e:	00 0f 78    	mov.w     w0, [w14]
    3920:	11 07 98    	mov.w     w1, [w14+2]
    3922:	1e 00 78    	mov.w     [w14], w0
    3924:	10 08 90    	mov.w     [w0+18], w0
    3926:	00 00 e0    	cp0.w     w0
    3928:	05 00 32    	bra       Z, 0x3934 <.L27>
    392a:	1e 00 78    	mov.w     [w14], w0
    392c:	10 09 90    	mov.w     [w0+18], w2
    392e:	9e 00 90    	mov.w     [w14+2], w1
    3930:	1e 00 78    	mov.w     [w14], w0
    3932:	02 00 01    	call      w2

00003934 <.L27>:
    3934:	00 80 fa    	ulnk      
    3936:	00 00 06    	return    

00003938 <_pin_read>:
    3938:	02 00 fa    	lnk       #0x2
    393a:	00 0f 78    	mov.w     w0, [w14]
    393c:	1e 00 78    	mov.w     [w14], w0
    393e:	20 08 90    	mov.w     [w0+20], w0
    3940:	00 00 e0    	cp0.w     w0
    3942:	05 00 32    	bra       Z, 0x394e <.L30>
    3944:	1e 00 78    	mov.w     [w14], w0
    3946:	a0 08 90    	mov.w     [w0+20], w1
    3948:	1e 00 78    	mov.w     [w14], w0
    394a:	01 00 01    	call      w1
    394c:	01 00 37    	bra       0x3950 <.L31>

0000394e <.L30>:
    394e:	00 80 eb    	setm.w    w0

00003950 <.L31>:
    3950:	00 80 fa    	ulnk      
    3952:	00 00 06    	return    

00003954 <_timer_serviceInterrupt>:
    3954:	02 00 fa    	lnk       #0x2
    3956:	00 0f 78    	mov.w     w0, [w14]

float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    timer_lower(self);
    3958:	1e 00 78    	mov.w     [w14], w0
    395a:	8d 01 07    	rcall     0x3c76 <_timer_lower> <.LFB16> <.LFE15>
    if (self->every) {
    395c:	1e 00 78    	mov.w     [w14], w0
    395e:	10 08 90    	mov.w     [w0+18], w0
    3960:	00 00 e0    	cp0.w     w0
    3962:	05 00 32    	bra       Z, 0x396e <.L2>
        self->every(self);
    3964:	1e 00 78    	mov.w     [w14], w0
    3966:	90 08 90    	mov.w     [w0+18], w1
    3968:	1e 00 78    	mov.w     [w14], w0
    396a:	01 00 01    	call      w1
    396c:	1a 00 37    	bra       0x39a2 <.L1>

0000396e <.L2>:
    } else if (self->after) {
    396e:	1e 00 78    	mov.w     [w14], w0
    3970:	20 08 90    	mov.w     [w0+20], w0
    3972:	00 00 e0    	cp0.w     w0
    3974:	14 00 32    	bra       Z, 0x399e <.L4>
        if (self->aftercount) {
    3976:	1e 00 78    	mov.w     [w14], w0
    3978:	00 08 90    	mov.w     [w0+16], w0
    397a:	00 00 e0    	cp0.w     w0
    397c:	0a 00 32    	bra       Z, 0x3992 <.L5>
            self->after(self);
    397e:	1e 00 78    	mov.w     [w14], w0
    3980:	a0 08 90    	mov.w     [w0+20], w1
    3982:	1e 00 78    	mov.w     [w14], w0
    3984:	01 00 01    	call      w1
            self->aftercount--;
    3986:	1e 00 78    	mov.w     [w14], w0
    3988:	00 08 90    	mov.w     [w0+16], w0
    398a:	80 00 e9    	dec.w     w0, w1
    398c:	1e 00 78    	mov.w     [w14], w0
    398e:	01 08 98    	mov.w     w1, [w0+16]
    3990:	08 00 37    	bra       0x39a2 <.L1>

00003992 <.L5>:
        } else {
            timer_disableInterrupt(self);
    3992:	1e 00 78    	mov.w     [w14], w0
    3994:	98 01 07    	rcall     0x3cc6 <_timer_disableInterrupt> <.LFB19> <.LFE18>
            self->after = NULL;
    3996:	1e 00 78    	mov.w     [w14], w0
    3998:	80 00 eb    	clr.w     w1
    399a:	21 08 98    	mov.w     w1, [w0+20]
    399c:	02 00 37    	bra       0x39a2 <.L1>

0000399e <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    399e:	1e 00 78    	mov.w     [w14], w0
    39a0:	92 01 07    	rcall     0x3cc6 <_timer_disableInterrupt> <.LFB19> <.LFE18>

000039a2 <.L1>:
    }
}
    39a2:	00 80 fa    	ulnk      
    39a4:	00 00 06    	return    

000039a6 <_init_timer>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    timer_serviceInterrupt(&timer1);
}

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    timer_serviceInterrupt(&timer2);
}

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    timer_serviceInterrupt(&timer3);
}

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    timer_serviceInterrupt(&timer4);
}

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    timer_serviceInterrupt(&timer5);
}

void init_timer(void) {
    39a6:	00 00 fa    	lnk       #0x0
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1,
    39a8:	b0 00 20    	mov.w     #0xb, w0
    39aa:	80 1f 78    	mov.w     w0, [w15++]
    39ac:	47 00 20    	mov.w     #0x4, w7
    39ae:	36 c0 b3    	mov.b     #0x3, w6
    39b0:	45 09 20    	mov.w     #0x94, w5
    39b2:	44 08 20    	mov.w     #0x84, w4
    39b4:	03 10 20    	mov.w     #0x100, w3
    39b6:	22 10 20    	mov.w     #0x102, w2
    39b8:	41 10 20    	mov.w     #0x104, w1
    39ba:	60 c3 20    	mov.w     #0xc36, w0
    39bc:	33 00 07    	rcall     0x3a24 <_timer_init> <.LFB7> <.LFE6>
    39be:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2,
    39c0:	c0 00 20    	mov.w     #0xc, w0
    39c2:	80 1f 78    	mov.w     w0, [w15++]
    39c4:	80 03 eb    	clr.w     w7
    39c6:	76 c0 b3    	mov.b     #0x7, w6
    39c8:	45 09 20    	mov.w     #0x94, w5
    39ca:	44 08 20    	mov.w     #0x84, w4
    39cc:	63 10 20    	mov.w     #0x106, w3
    39ce:	c2 10 20    	mov.w     #0x10c, w2
    39d0:	01 11 20    	mov.w     #0x110, w1
    39d2:	c0 c4 20    	mov.w     #0xc4c, w0
    39d4:	27 00 07    	rcall     0x3a24 <_timer_init> <.LFB7> <.LFE6>
    39d6:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3,
    39d8:	d0 00 20    	mov.w     #0xd, w0
    39da:	80 1f 78    	mov.w     w0, [w15++]
    39dc:	17 00 20    	mov.w     #0x1, w7
    39de:	86 c0 b3    	mov.b     #0x8, w6
    39e0:	45 09 20    	mov.w     #0x94, w5
    39e2:	44 08 20    	mov.w     #0x84, w4
    39e4:	a3 10 20    	mov.w     #0x10a, w3
    39e6:	e2 10 20    	mov.w     #0x10e, w2
    39e8:	21 11 20    	mov.w     #0x112, w1
    39ea:	20 c6 20    	mov.w     #0xc62, w0
    39ec:	1b 00 07    	rcall     0x3a24 <_timer_init> <.LFB7> <.LFE6>
    39ee:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4,
    39f0:	e0 00 20    	mov.w     #0xe, w0
    39f2:	80 1f 78    	mov.w     w0, [w15++]
    39f4:	27 00 20    	mov.w     #0x2, w7
    39f6:	b6 c0 b3    	mov.b     #0xb, w6
    39f8:	65 09 20    	mov.w     #0x96, w5
    39fa:	64 08 20    	mov.w     #0x86, w4
    39fc:	43 11 20    	mov.w     #0x114, w3
    39fe:	a2 11 20    	mov.w     #0x11a, w2
    3a00:	e1 11 20    	mov.w     #0x11e, w1
    3a02:	80 c7 20    	mov.w     #0xc78, w0
    3a04:	0f 00 07    	rcall     0x3a24 <_timer_init> <.LFB7> <.LFE6>
    3a06:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5,
    3a08:	f0 00 20    	mov.w     #0xf, w0
    3a0a:	80 1f 78    	mov.w     w0, [w15++]
    3a0c:	37 00 20    	mov.w     #0x3, w7
    3a0e:	c6 c0 b3    	mov.b     #0xc, w6
    3a10:	65 09 20    	mov.w     #0x96, w5
    3a12:	64 08 20    	mov.w     #0x86, w4
    3a14:	83 11 20    	mov.w     #0x118, w3
    3a16:	c2 11 20    	mov.w     #0x11c, w2
    3a18:	01 12 20    	mov.w     #0x120, w1
    3a1a:	e0 c8 20    	mov.w     #0xc8e, w0
    3a1c:	03 00 07    	rcall     0x3a24 <_timer_init> <.LFB7> <.LFE6>
    3a1e:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    3a20:	00 80 fa    	ulnk      
    3a22:	00 00 06    	return    

00003a24 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx,
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy,
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    3a24:	10 00 fa    	lnk       #0x10
    3a26:	00 0f 78    	mov.w     w0, [w14]
    3a28:	11 07 98    	mov.w     w1, [w14+2]
    3a2a:	22 07 98    	mov.w     w2, [w14+4]
    3a2c:	33 07 98    	mov.w     w3, [w14+6]
    3a2e:	44 07 98    	mov.w     w4, [w14+8]
    3a30:	55 07 98    	mov.w     w5, [w14+10]
    3a32:	46 4f 98    	mov.b     w6, [w14+12]
    3a34:	77 07 98    	mov.w     w7, [w14+14]
    self->TxCON = TxCON;
    3a36:	1e 00 78    	mov.w     [w14], w0
    3a38:	9e 00 90    	mov.w     [w14+2], w1
    3a3a:	01 08 78    	mov.w     w1, [w0]
    self->PRx = PRx;
    3a3c:	1e 00 78    	mov.w     [w14], w0
    3a3e:	ae 00 90    	mov.w     [w14+4], w1
    3a40:	11 00 98    	mov.w     w1, [w0+2]
    self->TMRx = TMRx;
    3a42:	1e 00 78    	mov.w     [w14], w0
    3a44:	be 00 90    	mov.w     [w14+6], w1
    3a46:	21 00 98    	mov.w     w1, [w0+4]
    self->IFSy = IFSy;
    3a48:	1e 00 78    	mov.w     [w14], w0
    3a4a:	ce 00 90    	mov.w     [w14+8], w1
    3a4c:	31 00 98    	mov.w     w1, [w0+6]
    self->IECy = IECy;
    3a4e:	1e 00 78    	mov.w     [w14], w0
    3a50:	de 00 90    	mov.w     [w14+10], w1
    3a52:	41 00 98    	mov.w     w1, [w0+8]
    self->flagbit = flagbit;
    3a54:	1e 00 78    	mov.w     [w14], w0
    3a56:	ce 48 90    	mov.b     [w14+12], w1
    3a58:	21 48 98    	mov.b     w1, [w0+10]
    self->octselnum = octselnum;
    3a5a:	1e 00 78    	mov.w     [w14], w0
    3a5c:	fe 00 90    	mov.w     [w14+14], w1
    3a5e:	61 00 98    	mov.w     w1, [w0+12]
    self->ocsyncselnum = ocsyncselnum;
    3a60:	1e 00 78    	mov.w     [w14], w0
    3a62:	ce b8 97    	mov.w     [w14-8], w1
    3a64:	71 00 98    	mov.w     w1, [w0+14]
    self->aftercount = 0;
    3a66:	1e 00 78    	mov.w     [w14], w0
    3a68:	80 00 eb    	clr.w     w1
    3a6a:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    3a6c:	1e 00 78    	mov.w     [w14], w0
    3a6e:	80 00 eb    	clr.w     w1
    3a70:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    3a72:	1e 00 78    	mov.w     [w14], w0
    3a74:	80 00 eb    	clr.w     w1
    3a76:	21 08 98    	mov.w     w1, [w0+20]
}
    3a78:	00 80 fa    	ulnk      
    3a7a:	00 00 06    	return    

00003a7c <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    3a7c:	06 00 fa    	lnk       #0x6
    3a7e:	88 1f 78    	mov.w     w8, [w15++]
    3a80:	00 0f 78    	mov.w     w0, [w14]
    3a82:	12 07 98    	mov.w     w2, [w14+2]
    3a84:	23 07 98    	mov.w     w3, [w14+4]
    if (period>(256.*65536.*TCY)) {
    3a86:	18 c0 b3    	mov.b     #0x1, w8
    3a88:	d2 7b 23    	mov.w     #0x37bd, w2
    3a8a:	63 f8 23    	mov.w     #0x3f86, w3
    3a8c:	1e 00 90    	mov.w     [w14+2], w0
    3a8e:	ae 00 90    	mov.w     [w14+4], w1
    3a90:	b1 ec 07    	rcall     0x13f4 <___gesf2> <___gtsf2>
    3a92:	00 00 e0    	cp0.w     w0
    3a94:	01 00 3c    	bra       GT, 0x3a98 <.L14>
    3a96:	00 44 eb    	clr.b     w8

00003a98 <.L14>:
    3a98:	08 04 e0    	cp0.b     w8
    3a9a:	69 00 3a    	bra       NZ, 0x3b6e <.L23>
        return;
    } else if (period>(64.*65536.*TCY)) {
    3a9c:	18 c0 b3    	mov.b     #0x1, w8
    3a9e:	d2 7b 23    	mov.w     #0x37bd, w2
    3aa0:	63 e8 23    	mov.w     #0x3e86, w3
    3aa2:	1e 00 90    	mov.w     [w14+2], w0
    3aa4:	ae 00 90    	mov.w     [w14+4], w1
    3aa6:	a6 ec 07    	rcall     0x13f4 <___gesf2> <___gtsf2>
    3aa8:	00 00 e0    	cp0.w     w0
    3aaa:	01 00 3c    	bra       GT, 0x3aae <.L17>
    3aac:	00 44 eb    	clr.b     w8

00003aae <.L17>:
    3aae:	08 04 e0    	cp0.b     w8
    3ab0:	12 00 32    	bra       Z, 0x3ad6 <.L18>
        timer_stop(self);
    3ab2:	1e 00 78    	mov.w     [w14], w0
    3ab4:	c3 00 07    	rcall     0x3c3c <_timer_stop> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0030);
    3ab6:	1e 00 78    	mov.w     [w14], w0
    3ab8:	10 00 78    	mov.w     [w0], w0
    3aba:	01 03 20    	mov.w     #0x30, w1
    3abc:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    3abe:	1e 00 78    	mov.w     [w14], w0
    3ac0:	10 04 90    	mov.w     [w0+2], w8
    3ac2:	02 40 22    	mov.w     #0x2400, w2
    3ac4:	43 77 24    	mov.w     #0x4774, w3
    3ac6:	1e 00 90    	mov.w     [w14+2], w0
    3ac8:	ae 00 90    	mov.w     [w14+4], w1
    3aca:	06 ed 07    	rcall     0x14d8 <___mulsf3>
    3acc:	95 ec 07    	rcall     0x13f8 <___fixunssfsi>
    3ace:	00 00 78    	mov.w     w0, w0
    3ad0:	00 00 e9    	dec.w     w0, w0
    3ad2:	00 0c 78    	mov.w     w0, [w8]
    3ad4:	4d 00 37    	bra       0x3b70 <.L13>

00003ad6 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    3ad6:	18 c0 b3    	mov.b     #0x1, w8
    3ad8:	d2 7b 23    	mov.w     #0x37bd, w2
    3ada:	63 d0 23    	mov.w     #0x3d06, w3
    3adc:	1e 00 90    	mov.w     [w14+2], w0
    3ade:	ae 00 90    	mov.w     [w14+4], w1
    3ae0:	89 ec 07    	rcall     0x13f4 <___gesf2> <___gtsf2>
    3ae2:	00 00 e0    	cp0.w     w0
    3ae4:	01 00 3c    	bra       GT, 0x3ae8 <.L19>
    3ae6:	00 44 eb    	clr.b     w8

00003ae8 <.L19>:
    3ae8:	08 04 e0    	cp0.b     w8
    3aea:	12 00 32    	bra       Z, 0x3b10 <.L20>
        timer_stop(self);
    3aec:	1e 00 78    	mov.w     [w14], w0
    3aee:	a6 00 07    	rcall     0x3c3c <_timer_stop> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0020);
    3af0:	1e 00 78    	mov.w     [w14], w0
    3af2:	10 00 78    	mov.w     [w0], w0
    3af4:	01 02 20    	mov.w     #0x20, w1
    3af6:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    3af8:	1e 00 78    	mov.w     [w14], w0
    3afa:	10 04 90    	mov.w     [w0+2], w8
    3afc:	02 40 22    	mov.w     #0x2400, w2
    3afe:	43 87 24    	mov.w     #0x4874, w3
    3b00:	1e 00 90    	mov.w     [w14+2], w0
    3b02:	ae 00 90    	mov.w     [w14+4], w1
    3b04:	e9 ec 07    	rcall     0x14d8 <___mulsf3>
    3b06:	78 ec 07    	rcall     0x13f8 <___fixunssfsi>
    3b08:	00 00 78    	mov.w     w0, w0
    3b0a:	00 00 e9    	dec.w     w0, w0
    3b0c:	00 0c 78    	mov.w     w0, [w8]
    3b0e:	30 00 37    	bra       0x3b70 <.L13>

00003b10 <.L20>:
    } else if (period>(65536.*TCY)) {
    3b10:	18 c0 b3    	mov.b     #0x1, w8
    3b12:	d2 7b 23    	mov.w     #0x37bd, w2
    3b14:	63 b8 23    	mov.w     #0x3b86, w3
    3b16:	1e 00 90    	mov.w     [w14+2], w0
    3b18:	ae 00 90    	mov.w     [w14+4], w1
    3b1a:	6c ec 07    	rcall     0x13f4 <___gesf2> <___gtsf2>
    3b1c:	00 00 e0    	cp0.w     w0
    3b1e:	01 00 3c    	bra       GT, 0x3b22 <.L21>
    3b20:	00 44 eb    	clr.b     w8

00003b22 <.L21>:
    3b22:	08 04 e0    	cp0.b     w8
    3b24:	12 00 32    	bra       Z, 0x3b4a <.L22>
        timer_stop(self);
    3b26:	1e 00 78    	mov.w     [w14], w0
    3b28:	89 00 07    	rcall     0x3c3c <_timer_stop> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0010);
    3b2a:	1e 00 78    	mov.w     [w14], w0
    3b2c:	10 00 78    	mov.w     [w0], w0
    3b2e:	01 01 20    	mov.w     #0x10, w1
    3b30:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3b32:	1e 00 78    	mov.w     [w14], w0
    3b34:	10 04 90    	mov.w     [w0+2], w8
    3b36:	02 40 22    	mov.w     #0x2400, w2
    3b38:	43 9f 24    	mov.w     #0x49f4, w3
    3b3a:	1e 00 90    	mov.w     [w14+2], w0
    3b3c:	ae 00 90    	mov.w     [w14+4], w1
    3b3e:	cc ec 07    	rcall     0x14d8 <___mulsf3>
    3b40:	5b ec 07    	rcall     0x13f8 <___fixunssfsi>
    3b42:	00 00 78    	mov.w     w0, w0
    3b44:	00 00 e9    	dec.w     w0, w0
    3b46:	00 0c 78    	mov.w     w0, [w8]
    3b48:	13 00 37    	bra       0x3b70 <.L13>

00003b4a <.L22>:
    } else {
        timer_stop(self);
    3b4a:	1e 00 78    	mov.w     [w14], w0
    3b4c:	77 00 07    	rcall     0x3c3c <_timer_stop> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0000);
    3b4e:	1e 00 78    	mov.w     [w14], w0
    3b50:	10 00 78    	mov.w     [w0], w0
    3b52:	80 00 eb    	clr.w     w1
    3b54:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    3b56:	1e 00 78    	mov.w     [w14], w0
    3b58:	10 04 90    	mov.w     [w0+2], w8
    3b5a:	02 40 22    	mov.w     #0x2400, w2
    3b5c:	43 b7 24    	mov.w     #0x4b74, w3
    3b5e:	1e 00 90    	mov.w     [w14+2], w0
    3b60:	ae 00 90    	mov.w     [w14+4], w1
    3b62:	ba ec 07    	rcall     0x14d8 <___mulsf3>
    3b64:	49 ec 07    	rcall     0x13f8 <___fixunssfsi>
    3b66:	00 00 78    	mov.w     w0, w0
    3b68:	00 00 e9    	dec.w     w0, w0
    3b6a:	00 0c 78    	mov.w     w0, [w8]
    3b6c:	01 00 37    	bra       0x3b70 <.L13>

00003b6e <.L23>:
    3b6e:	00 00 00    	nop       

00003b70 <.L13>:
    }
}
    3b70:	4f 04 78    	mov.w     [--w15], w8
    3b72:	00 80 fa    	ulnk      
    3b74:	00 00 06    	return    

00003b76 <_timer_period>:

float timer_period(_TIMER *self) {
    3b76:	04 00 fa    	lnk       #0x4
    3b78:	88 9f be    	mov.d     w8, [w15++]
    3b7a:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3b7c:	1e 00 90    	mov.w     [w14+2], w0
    3b7e:	10 00 78    	mov.w     [w0], w0
    3b80:	90 00 78    	mov.w     [w0], w1
    3b82:	00 03 20    	mov.w     #0x30, w0
    3b84:	00 80 60    	and.w     w1, w0, w0
    3b86:	44 00 de    	lsr.w     w0, #0x4, w0
    3b88:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3b8a:	1e 00 78    	mov.w     [w14], w0
    3b8c:	c2 00 dd    	sl.w      w0, #0x2, w1
    3b8e:	00 d7 20    	mov.w     #0xd70, w0
    3b90:	00 80 40    	add.w     w1, w0, w0
    3b92:	10 04 be    	mov.d     [w0], w8
    3b94:	1e 00 90    	mov.w     [w14+2], w0
    3b96:	10 00 90    	mov.w     [w0+2], w0
    3b98:	10 00 78    	mov.w     [w0], w0
    3b9a:	80 00 eb    	clr.w     w1
    3b9c:	48 ec 07    	rcall     0x142e <___floatunsisf>
    3b9e:	02 00 20    	mov.w     #0x0, w2
    3ba0:	03 f8 23    	mov.w     #0x3f80, w3
    3ba2:	87 eb 07    	rcall     0x12b2 <___addsf3>
    3ba4:	00 01 be    	mov.d     w0, w2
    3ba6:	08 00 be    	mov.d     w8, w0
    3ba8:	97 ec 07    	rcall     0x14d8 <___mulsf3>
}
    3baa:	4f 04 be    	mov.d     [--w15], w8
    3bac:	00 80 fa    	ulnk      
    3bae:	00 00 06    	return    

00003bb0 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    3bb0:	06 00 fa    	lnk       #0x6
    3bb2:	00 0f 78    	mov.w     w0, [w14]
    3bb4:	12 07 98    	mov.w     w2, [w14+2]
    3bb6:	23 07 98    	mov.w     w3, [w14+4]
    timer_setPeriod(self, 1./freq);
    3bb8:	1e 01 90    	mov.w     [w14+2], w2
    3bba:	ae 01 90    	mov.w     [w14+4], w3
    3bbc:	00 00 20    	mov.w     #0x0, w0
    3bbe:	01 f8 23    	mov.w     #0x3f80, w1
    3bc0:	d5 eb 07    	rcall     0x136c <___divsf3>
    3bc2:	00 01 be    	mov.d     w0, w2
    3bc4:	1e 00 78    	mov.w     [w14], w0
    3bc6:	5a ff 07    	rcall     0x3a7c <_timer_setPeriod> <.LFB8> <.LFE7>
}
    3bc8:	00 80 fa    	ulnk      
    3bca:	00 00 06    	return    

00003bcc <_timer_freq>:

float timer_freq(_TIMER *self) {
    3bcc:	02 00 fa    	lnk       #0x2
    3bce:	00 0f 78    	mov.w     w0, [w14]
    return 1./timer_period(self);
    3bd0:	1e 00 78    	mov.w     [w14], w0
    3bd2:	d1 ff 07    	rcall     0x3b76 <_timer_period> <.LFB9> <.LFE8>
    3bd4:	00 01 be    	mov.d     w0, w2
    3bd6:	00 00 20    	mov.w     #0x0, w0
    3bd8:	01 f8 23    	mov.w     #0x3f80, w1
    3bda:	c8 eb 07    	rcall     0x136c <___divsf3>
}
    3bdc:	00 80 fa    	ulnk      
    3bde:	00 00 06    	return    

00003be0 <_timer_time>:

float timer_time(_TIMER *self) {
    3be0:	04 00 fa    	lnk       #0x4
    3be2:	88 9f be    	mov.d     w8, [w15++]
    3be4:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3be6:	1e 00 90    	mov.w     [w14+2], w0
    3be8:	10 00 78    	mov.w     [w0], w0
    3bea:	90 00 78    	mov.w     [w0], w1
    3bec:	00 03 20    	mov.w     #0x30, w0
    3bee:	00 80 60    	and.w     w1, w0, w0
    3bf0:	44 00 de    	lsr.w     w0, #0x4, w0
    3bf2:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3bf4:	1e 00 78    	mov.w     [w14], w0
    3bf6:	c2 00 dd    	sl.w      w0, #0x2, w1
    3bf8:	00 d7 20    	mov.w     #0xd70, w0
    3bfa:	00 80 40    	add.w     w1, w0, w0
    3bfc:	10 04 be    	mov.d     [w0], w8
    3bfe:	1e 00 90    	mov.w     [w14+2], w0
    3c00:	10 00 90    	mov.w     [w0+2], w0
    3c02:	10 00 78    	mov.w     [w0], w0
    3c04:	80 00 eb    	clr.w     w1
    3c06:	13 ec 07    	rcall     0x142e <___floatunsisf>
    3c08:	02 00 20    	mov.w     #0x0, w2
    3c0a:	03 f8 23    	mov.w     #0x3f80, w3
    3c0c:	52 eb 07    	rcall     0x12b2 <___addsf3>
    3c0e:	00 01 be    	mov.d     w0, w2
    3c10:	08 00 be    	mov.d     w8, w0
    3c12:	62 ec 07    	rcall     0x14d8 <___mulsf3>
}
    3c14:	4f 04 be    	mov.d     [--w15], w8
    3c16:	00 80 fa    	ulnk      
    3c18:	00 00 06    	return    

00003c1a <_timer_start>:

void timer_start(_TIMER *self) {
    3c1a:	02 00 fa    	lnk       #0x2
    3c1c:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    3c1e:	1e 00 78    	mov.w     [w14], w0
    3c20:	2a 00 07    	rcall     0x3c76 <_timer_lower> <.LFB16> <.LFE15>
    poke(self->TMRx, 0);
    3c22:	1e 00 78    	mov.w     [w14], w0
    3c24:	20 00 90    	mov.w     [w0+4], w0
    3c26:	80 00 eb    	clr.w     w1
    3c28:	01 08 78    	mov.w     w1, [w0]
    bitset(self->TxCON, 15);
    3c2a:	1e 00 78    	mov.w     [w14], w0
    3c2c:	10 00 78    	mov.w     [w0], w0
    3c2e:	9e 00 78    	mov.w     [w14], w1
    3c30:	91 00 78    	mov.w     [w1], w1
    3c32:	91 00 78    	mov.w     [w1], w1
    3c34:	01 f0 a0    	bset.w    w1, #0xf
    3c36:	01 08 78    	mov.w     w1, [w0]
}
    3c38:	00 80 fa    	ulnk      
    3c3a:	00 00 06    	return    

00003c3c <_timer_stop>:

void timer_stop(_TIMER *self) {
    3c3c:	02 00 fa    	lnk       #0x2
    3c3e:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->TxCON, 15);
    3c40:	1e 00 78    	mov.w     [w14], w0
    3c42:	10 00 78    	mov.w     [w0], w0
    3c44:	9e 00 78    	mov.w     [w14], w1
    3c46:	91 00 78    	mov.w     [w1], w1
    3c48:	11 01 78    	mov.w     [w1], w2
    3c4a:	f1 ff 27    	mov.w     #0x7fff, w1
    3c4c:	81 00 61    	and.w     w2, w1, w1
    3c4e:	01 08 78    	mov.w     w1, [w0]
}
    3c50:	00 80 fa    	ulnk      
    3c52:	00 00 06    	return    

00003c54 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    3c54:	02 00 fa    	lnk       #0x2
    3c56:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->IFSy, self->flagbit);
    3c58:	1e 00 78    	mov.w     [w14], w0
    3c5a:	30 00 90    	mov.w     [w0+6], w0
    3c5c:	90 00 78    	mov.w     [w0], w1
    3c5e:	1e 00 78    	mov.w     [w14], w0
    3c60:	20 48 90    	mov.b     [w0+10], w0
    3c62:	00 80 fb    	ze        w0, w0
    3c64:	12 00 20    	mov.w     #0x1, w2
    3c66:	00 10 dd    	sl.w      w2, w0, w0
    3c68:	00 80 60    	and.w     w1, w0, w0
    3c6a:	00 f0 a7    	btsc.w    w0, #0xf
    3c6c:	00 00 ea    	neg.w     w0, w0
    3c6e:	00 00 ea    	neg.w     w0, w0
    3c70:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    3c72:	00 80 fa    	ulnk      
    3c74:	00 00 06    	return    

00003c76 <_timer_lower>:

void timer_lower(_TIMER *self) {
    3c76:	02 00 fa    	lnk       #0x2
    3c78:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IFSy, self->flagbit);
    3c7a:	1e 00 78    	mov.w     [w14], w0
    3c7c:	30 00 90    	mov.w     [w0+6], w0
    3c7e:	9e 00 78    	mov.w     [w14], w1
    3c80:	b1 00 90    	mov.w     [w1+6], w1
    3c82:	11 01 78    	mov.w     [w1], w2
    3c84:	9e 00 78    	mov.w     [w14], w1
    3c86:	a1 48 90    	mov.b     [w1+10], w1
    3c88:	81 80 fb    	ze        w1, w1
    3c8a:	13 00 20    	mov.w     #0x1, w3
    3c8c:	81 18 dd    	sl.w      w3, w1, w1
    3c8e:	81 80 ea    	com.w     w1, w1
    3c90:	81 00 61    	and.w     w2, w1, w1
    3c92:	01 08 78    	mov.w     w1, [w0]
}
    3c94:	00 80 fa    	ulnk      
    3c96:	00 00 06    	return    

00003c98 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3c98:	02 00 fa    	lnk       #0x2
    3c9a:	00 0f 78    	mov.w     w0, [w14]
    return peek(self->TMRx);
    3c9c:	1e 00 78    	mov.w     [w14], w0
    3c9e:	20 00 90    	mov.w     [w0+4], w0
    3ca0:	10 00 78    	mov.w     [w0], w0
}
    3ca2:	00 80 fa    	ulnk      
    3ca4:	00 00 06    	return    

00003ca6 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    3ca6:	02 00 fa    	lnk       #0x2
    3ca8:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->IECy, self->flagbit);
    3caa:	1e 00 78    	mov.w     [w14], w0
    3cac:	40 00 90    	mov.w     [w0+8], w0
    3cae:	9e 00 78    	mov.w     [w14], w1
    3cb0:	c1 00 90    	mov.w     [w1+8], w1
    3cb2:	11 01 78    	mov.w     [w1], w2
    3cb4:	9e 00 78    	mov.w     [w14], w1
    3cb6:	a1 48 90    	mov.b     [w1+10], w1
    3cb8:	81 80 fb    	ze        w1, w1
    3cba:	13 00 20    	mov.w     #0x1, w3
    3cbc:	81 18 dd    	sl.w      w3, w1, w1
    3cbe:	82 80 70    	ior.w     w1, w2, w1
    3cc0:	01 08 78    	mov.w     w1, [w0]
}
    3cc2:	00 80 fa    	ulnk      
    3cc4:	00 00 06    	return    

00003cc6 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3cc6:	02 00 fa    	lnk       #0x2
    3cc8:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IECy, self->flagbit);
    3cca:	1e 00 78    	mov.w     [w14], w0
    3ccc:	40 00 90    	mov.w     [w0+8], w0
    3cce:	9e 00 78    	mov.w     [w14], w1
    3cd0:	c1 00 90    	mov.w     [w1+8], w1
    3cd2:	11 01 78    	mov.w     [w1], w2
    3cd4:	9e 00 78    	mov.w     [w14], w1
    3cd6:	a1 48 90    	mov.b     [w1+10], w1
    3cd8:	81 80 fb    	ze        w1, w1
    3cda:	13 00 20    	mov.w     #0x1, w3
    3cdc:	81 18 dd    	sl.w      w3, w1, w1
    3cde:	81 80 ea    	com.w     w1, w1
    3ce0:	81 00 61    	and.w     w2, w1, w1
    3ce2:	01 08 78    	mov.w     w1, [w0]
}
    3ce4:	00 80 fa    	ulnk      
    3ce6:	00 00 06    	return    

00003ce8 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3ce8:	08 00 fa    	lnk       #0x8
    3cea:	00 0f 78    	mov.w     w0, [w14]
    3cec:	12 07 98    	mov.w     w2, [w14+2]
    3cee:	23 07 98    	mov.w     w3, [w14+4]
    3cf0:	31 07 98    	mov.w     w1, [w14+6]
    timer_disableInterrupt(self);
    3cf2:	1e 00 78    	mov.w     [w14], w0
    3cf4:	e8 ff 07    	rcall     0x3cc6 <_timer_disableInterrupt> <.LFB19> <.LFE18>
    timer_setPeriod(self, interval);
    3cf6:	1e 01 90    	mov.w     [w14+2], w2
    3cf8:	ae 01 90    	mov.w     [w14+4], w3
    3cfa:	1e 00 78    	mov.w     [w14], w0
    3cfc:	bf fe 07    	rcall     0x3a7c <_timer_setPeriod> <.LFB8> <.LFE7>
    self->aftercount = 0;
    3cfe:	1e 00 78    	mov.w     [w14], w0
    3d00:	80 00 eb    	clr.w     w1
    3d02:	01 08 98    	mov.w     w1, [w0+16]
    self->every = callback;
    3d04:	1e 00 78    	mov.w     [w14], w0
    3d06:	be 00 90    	mov.w     [w14+6], w1
    3d08:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    3d0a:	1e 00 78    	mov.w     [w14], w0
    3d0c:	80 00 eb    	clr.w     w1
    3d0e:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    3d10:	1e 00 78    	mov.w     [w14], w0
    3d12:	c9 ff 07    	rcall     0x3ca6 <_timer_enableInterrupt> <.LFB18> <.LFE17>
    timer_start(self);
    3d14:	1e 00 78    	mov.w     [w14], w0
    3d16:	81 ff 07    	rcall     0x3c1a <_timer_start> <.LFB13> <.LFE12>
}
    3d18:	00 80 fa    	ulnk      
    3d1a:	00 00 06    	return    

00003d1c <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times,
                 void (*callback)(_TIMER *self)) {
    3d1c:	0a 00 fa    	lnk       #0xa
    3d1e:	00 0f 78    	mov.w     w0, [w14]
    3d20:	12 07 98    	mov.w     w2, [w14+2]
    3d22:	23 07 98    	mov.w     w3, [w14+4]
    3d24:	31 07 98    	mov.w     w1, [w14+6]
    3d26:	44 07 98    	mov.w     w4, [w14+8]
    timer_disableInterrupt(self);
    3d28:	1e 00 78    	mov.w     [w14], w0
    3d2a:	cd ff 07    	rcall     0x3cc6 <_timer_disableInterrupt> <.LFB19> <.LFE18>
    timer_setPeriod(self, delay);
    3d2c:	1e 01 90    	mov.w     [w14+2], w2
    3d2e:	ae 01 90    	mov.w     [w14+4], w3
    3d30:	1e 00 78    	mov.w     [w14], w0
    3d32:	a4 fe 07    	rcall     0x3a7c <_timer_setPeriod> <.LFB8> <.LFE7>
    self->aftercount = num_times;
    3d34:	1e 00 78    	mov.w     [w14], w0
    3d36:	be 00 90    	mov.w     [w14+6], w1
    3d38:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    3d3a:	1e 00 78    	mov.w     [w14], w0
    3d3c:	80 00 eb    	clr.w     w1
    3d3e:	11 08 98    	mov.w     w1, [w0+18]
    self->after = callback;
    3d40:	1e 00 78    	mov.w     [w14], w0
    3d42:	ce 00 90    	mov.w     [w14+8], w1
    3d44:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    3d46:	1e 00 78    	mov.w     [w14], w0
    3d48:	ae ff 07    	rcall     0x3ca6 <_timer_enableInterrupt> <.LFB18> <.LFE17>
    timer_start(self);
    3d4a:	1e 00 78    	mov.w     [w14], w0
    3d4c:	66 ff 07    	rcall     0x3c1a <_timer_start> <.LFB13> <.LFE12>
}
    3d4e:	00 80 fa    	ulnk      
    3d50:	00 00 06    	return    

00003d52 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    3d52:	02 00 fa    	lnk       #0x2
    3d54:	00 0f 78    	mov.w     w0, [w14]
    timer_disableInterrupt(self);
    3d56:	1e 00 78    	mov.w     [w14], w0
    3d58:	b6 ff 07    	rcall     0x3cc6 <_timer_disableInterrupt> <.LFB19> <.LFE18>
    timer_lower(self);
    3d5a:	1e 00 78    	mov.w     [w14], w0
    3d5c:	8c ff 07    	rcall     0x3c76 <_timer_lower> <.LFB16> <.LFE15>
    timer_stop(self);
    3d5e:	1e 00 78    	mov.w     [w14], w0
    3d60:	6d ff 07    	rcall     0x3c3c <_timer_stop> <.LFB14> <.LFE13>
    self->aftercount = 0;
    3d62:	1e 00 78    	mov.w     [w14], w0
    3d64:	80 00 eb    	clr.w     w1
    3d66:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    3d68:	1e 00 78    	mov.w     [w14], w0
    3d6a:	80 00 eb    	clr.w     w1
    3d6c:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    3d6e:	1e 00 78    	mov.w     [w14], w0
    3d70:	80 00 eb    	clr.w     w1
    3d72:	21 08 98    	mov.w     w1, [w0+20]
}
    3d74:	00 80 fa    	ulnk      
    3d76:	00 00 06    	return    

00003d78 <_timer_initDelayMicro>:

void timer_initDelayMicro(_TIMER *timer) {
    3d78:	02 00 fa    	lnk       #0x2
    3d7a:	00 0f 78    	mov.w     w0, [w14]
    timerDelay = timer;
    3d7c:	9e 00 78    	mov.w     [w14], w1
    3d7e:	b1 41 88    	mov.w     w1, 0x836
    timer_setPeriod(timerDelay, 1e-6);
    3d80:	b0 41 80    	mov.w     0x836, w0
    3d82:	d2 7b 23    	mov.w     #0x37bd, w2
    3d84:	63 58 23    	mov.w     #0x3586, w3
    3d86:	7a fe 07    	rcall     0x3a7c <_timer_setPeriod> <.LFB8> <.LFE7>
    timer_start(timerDelay);
    3d88:	b0 41 80    	mov.w     0x836, w0
    3d8a:	47 ff 07    	rcall     0x3c1a <_timer_start> <.LFB13> <.LFE12>
}
    3d8c:	00 80 fa    	ulnk      
    3d8e:	00 00 06    	return    

00003d90 <_timer_delayMicro>:

void timer_delayMicro(uint16_t usec) {
    3d90:	04 00 fa    	lnk       #0x4
    3d92:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t count = 0;
    3d94:	00 00 eb    	clr.w     w0
    3d96:	00 0f 78    	mov.w     w0, [w14]
    while (count < usec) {
    3d98:	07 00 37    	bra       0x3da8 <.L40>

00003d9a <.L41>:
        if (timer_flag(timerDelay)) {
    3d9a:	b0 41 80    	mov.w     0x836, w0
    3d9c:	5b ff 07    	rcall     0x3c54 <_timer_flag> <.LFB15> <.LFE14>
    3d9e:	00 00 e0    	cp0.w     w0
    3da0:	03 00 32    	bra       Z, 0x3da8 <.L40>
            timer_lower(timerDelay);
    3da2:	b0 41 80    	mov.w     0x836, w0
    3da4:	68 ff 07    	rcall     0x3c76 <_timer_lower> <.LFB16> <.LFE15>
            count +=1;
    3da6:	1e 0f e8    	inc.w     [w14], [w14]

00003da8 <.L40>:
    3da8:	1e 00 90    	mov.w     [w14+2], w0
    3daa:	9e 00 78    	mov.w     [w14], w1
    3dac:	80 8f 50    	sub.w     w1, w0, [w15]
    3dae:	f5 ff 39    	bra       NC, 0x3d9a <.L41>
        }
    }
}
    3db0:	00 80 fa    	ulnk      
    3db2:	00 00 06    	return    

00003db4 <___lcd_i2c_write>:
    3db4:	04 00 fa    	lnk       #0x4
    3db6:	00 0f 78    	mov.w     w0, [w14]
    3db8:	21 47 98    	mov.b     w1, [w14+2]
    3dba:	a0 41 80    	mov.w     0x834, w0
    3dbc:	39 03 07    	rcall     0x4430 <_i2c_start> <.LFB4> <.LFE3>
    3dbe:	1e 00 78    	mov.w     [w14], w0
    3dc0:	90 40 78    	mov.b     [w0], w1
    3dc2:	a0 41 80    	mov.w     0x834, w0
    3dc4:	b1 03 07    	rcall     0x4528 <_i2c_putc> <.LFB10> <.LFE9>
    3dc6:	a0 41 80    	mov.w     0x834, w0
    3dc8:	9d 03 07    	rcall     0x4504 <_i2c_idle> <.LFB9> <.LFE8>
    3dca:	a0 41 80    	mov.w     0x834, w0
    3dcc:	ae 40 90    	mov.b     [w14+2], w1
    3dce:	ac 03 07    	rcall     0x4528 <_i2c_putc> <.LFB10> <.LFE9>
    3dd0:	a0 41 80    	mov.w     0x834, w0
    3dd2:	98 03 07    	rcall     0x4504 <_i2c_idle> <.LFB9> <.LFE8>
    3dd4:	a0 41 80    	mov.w     0x834, w0
    3dd6:	84 03 07    	rcall     0x44e0 <_i2c_stop> <.LFB8> <.LFE7>
    3dd8:	00 80 fa    	ulnk      
    3dda:	00 00 06    	return    

00003ddc <___lcd_enablePulse>:
    3ddc:	02 00 fa    	lnk       #0x2
    3dde:	00 0f 78    	mov.w     w0, [w14]
    3de0:	1e 00 78    	mov.w     [w14], w0
    3de2:	20 40 90    	mov.b     [w0+2], w0
    3de4:	80 40 78    	mov.b     w0, w1
    3de6:	01 24 a2    	btg.b     w1, #0x2
    3de8:	1e 00 78    	mov.w     [w14], w0
    3dea:	21 40 98    	mov.b     w1, [w0+2]
    3dec:	1e 00 78    	mov.w     [w14], w0
    3dee:	20 40 90    	mov.b     [w0+2], w0
    3df0:	80 40 78    	mov.b     w0, w1
    3df2:	1e 00 78    	mov.w     [w14], w0
    3df4:	df ff 07    	rcall     0x3db4 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE24> <.Letext0> <.Ltext0>
    3df6:	40 06 20    	mov.w     #0x64, w0
    3df8:	cb ff 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    3dfa:	1e 00 78    	mov.w     [w14], w0
    3dfc:	20 40 90    	mov.b     [w0+2], w0
    3dfe:	80 40 78    	mov.b     w0, w1
    3e00:	01 24 a2    	btg.b     w1, #0x2
    3e02:	1e 00 78    	mov.w     [w14], w0
    3e04:	21 40 98    	mov.b     w1, [w0+2]
    3e06:	1e 00 78    	mov.w     [w14], w0
    3e08:	20 40 90    	mov.b     [w0+2], w0
    3e0a:	80 40 78    	mov.b     w0, w1
    3e0c:	1e 00 78    	mov.w     [w14], w0
    3e0e:	d2 ff 07    	rcall     0x3db4 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE24> <.Letext0> <.Ltext0>
    3e10:	00 80 fa    	ulnk      
    3e12:	00 00 06    	return    

00003e14 <___lcd_send>:
    3e14:	06 00 fa    	lnk       #0x6
    3e16:	10 07 98    	mov.w     w0, [w14+2]
    3e18:	41 47 98    	mov.b     w1, [w14+4]
    3e1a:	52 47 98    	mov.b     w2, [w14+5]
    3e1c:	4e 40 90    	mov.b     [w14+4], w0
    3e1e:	81 c7 b3    	mov.b     #0x78, w1
    3e20:	01 4f 60    	and.b     w0, w1, [w14]
    3e22:	ce 40 90    	mov.b     [w14+4], w1
    3e24:	40 00 20    	mov.w     #0x4, w0
    3e26:	00 08 dd    	sl.w      w1, w0, w0
    3e28:	10 47 98    	mov.b     w0, [w14+1]
    3e2a:	5e 40 90    	mov.b     [w14+5], w0
    3e2c:	9e 40 70    	ior.b     w0, [w14], w1
    3e2e:	1e 00 90    	mov.w     [w14+2], w0
    3e30:	21 40 98    	mov.b     w1, [w0+2]
    3e32:	1e 00 90    	mov.w     [w14+2], w0
    3e34:	20 40 90    	mov.b     [w0+2], w0
    3e36:	80 40 78    	mov.b     w0, w1
    3e38:	1e 00 90    	mov.w     [w14+2], w0
    3e3a:	bc ff 07    	rcall     0x3db4 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE24> <.Letext0> <.Ltext0>
    3e3c:	1e 00 90    	mov.w     [w14+2], w0
    3e3e:	ce ff 07    	rcall     0x3ddc <___lcd_enablePulse> <.LFB1> <.LFE0>
    3e40:	de 40 90    	mov.b     [w14+5], w1
    3e42:	1e 40 90    	mov.b     [w14+1], w0
    3e44:	80 c0 70    	ior.b     w1, w0, w1
    3e46:	1e 00 90    	mov.w     [w14+2], w0
    3e48:	21 40 98    	mov.b     w1, [w0+2]
    3e4a:	1e 00 90    	mov.w     [w14+2], w0
    3e4c:	20 40 90    	mov.b     [w0+2], w0
    3e4e:	80 40 78    	mov.b     w0, w1
    3e50:	1e 00 90    	mov.w     [w14+2], w0
    3e52:	b0 ff 07    	rcall     0x3db4 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE24> <.Letext0> <.Ltext0>
    3e54:	1e 00 90    	mov.w     [w14+2], w0
    3e56:	c2 ff 07    	rcall     0x3ddc <___lcd_enablePulse> <.LFB1> <.LFE0>
    3e58:	00 80 fa    	ulnk      
    3e5a:	00 00 06    	return    

00003e5c <___lcd_send8>:
    3e5c:	04 00 fa    	lnk       #0x4
    3e5e:	00 0f 78    	mov.w     w0, [w14]
    3e60:	21 47 98    	mov.b     w1, [w14+2]
    3e62:	32 47 98    	mov.b     w2, [w14+3]
    3e64:	ae 40 90    	mov.b     [w14+2], w1
    3e66:	40 00 20    	mov.w     #0x4, w0
    3e68:	00 08 dd    	sl.w      w1, w0, w0
    3e6a:	20 47 98    	mov.b     w0, [w14+2]
    3e6c:	be 40 90    	mov.b     [w14+3], w1
    3e6e:	2e 40 90    	mov.b     [w14+2], w0
    3e70:	80 c0 70    	ior.b     w1, w0, w1
    3e72:	1e 00 78    	mov.w     [w14], w0
    3e74:	21 40 98    	mov.b     w1, [w0+2]
    3e76:	1e 00 78    	mov.w     [w14], w0
    3e78:	20 40 90    	mov.b     [w0+2], w0
    3e7a:	80 40 78    	mov.b     w0, w1
    3e7c:	1e 00 78    	mov.w     [w14], w0
    3e7e:	9a ff 07    	rcall     0x3db4 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE24> <.Letext0> <.Ltext0>
    3e80:	1e 00 78    	mov.w     [w14], w0
    3e82:	ac ff 07    	rcall     0x3ddc <___lcd_enablePulse> <.LFB1> <.LFE0>
    3e84:	00 80 fa    	ulnk      
    3e86:	00 00 06    	return    

00003e88 <_init_lcd>:
    3e88:	02 00 fa    	lnk       #0x2
    3e8a:	00 4f 78    	mov.b     w0, [w14]
    3e8c:	00 cd 20    	mov.w     #0xcd0, w0
    3e8e:	a0 41 88    	mov.w     w0, 0x834
    3e90:	a0 41 80    	mov.w     0x834, w0
    3e92:	02 00 20    	mov.w     #0x0, w2
    3e94:	a3 47 24    	mov.w     #0x447a, w3
    3e96:	36 02 07    	rcall     0x4304 <_i2c_open> <.LFB2> <.LFE1>
    3e98:	1e 80 fb    	ze        [w14], w0
    3e9a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3e9c:	17 00 32    	bra       Z, 0x3ecc <.L8>
    3e9e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3ea0:	03 00 3c    	bra       GT, 0x3ea8 <.L11>
    3ea2:	00 00 e0    	cp0.w     w0
    3ea4:	06 00 32    	bra       Z, 0x3eb2 <.L7>
    3ea6:	39 00 37    	bra       0x3f1a <.L5>

00003ea8 <.L11>:
    3ea8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3eaa:	1d 00 32    	bra       Z, 0x3ee6 <.L9>
    3eac:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3eae:	28 00 32    	bra       Z, 0x3f00 <.L10>
    3eb0:	34 00 37    	bra       0x3f1a <.L5>

00003eb2 <.L7>:
    3eb2:	12 c4 b3    	mov.b     #0x41, w2
    3eb4:	51 c0 b3    	mov.b     #0x5, w1
    3eb6:	00 d6 20    	mov.w     #0xd60, w0
    3eb8:	32 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3eba:	12 c4 b3    	mov.b     #0x41, w2
    3ebc:	71 c0 b3    	mov.b     #0x7, w1
    3ebe:	50 d6 20    	mov.w     #0xd65, w0
    3ec0:	2e 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3ec2:	42 c5 b3    	mov.b     #0x54, w2
    3ec4:	61 c0 b3    	mov.b     #0x6, w1
    3ec6:	a0 d6 20    	mov.w     #0xd6a, w0
    3ec8:	2a 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3eca:	27 00 37    	bra       0x3f1a <.L5>

00003ecc <.L8>:
    3ecc:	12 c4 b3    	mov.b     #0x41, w2
    3ece:	71 c0 b3    	mov.b     #0x7, w1
    3ed0:	00 d6 20    	mov.w     #0xd60, w0
    3ed2:	25 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3ed4:	12 c4 b3    	mov.b     #0x41, w2
    3ed6:	61 c0 b3    	mov.b     #0x6, w1
    3ed8:	a0 d6 20    	mov.w     #0xd6a, w0
    3eda:	21 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3edc:	12 c4 b3    	mov.b     #0x41, w2
    3ede:	51 c0 b3    	mov.b     #0x5, w1
    3ee0:	50 d6 20    	mov.w     #0xd65, w0
    3ee2:	1d 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3ee4:	1a 00 37    	bra       0x3f1a <.L5>

00003ee6 <.L9>:
    3ee6:	42 c5 b3    	mov.b     #0x54, w2
    3ee8:	71 c0 b3    	mov.b     #0x7, w1
    3eea:	00 d6 20    	mov.w     #0xd60, w0
    3eec:	18 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3eee:	12 c4 b3    	mov.b     #0x41, w2
    3ef0:	61 c0 b3    	mov.b     #0x6, w1
    3ef2:	50 d6 20    	mov.w     #0xd65, w0
    3ef4:	14 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3ef6:	12 c4 b3    	mov.b     #0x41, w2
    3ef8:	51 c0 b3    	mov.b     #0x5, w1
    3efa:	a0 d6 20    	mov.w     #0xd6a, w0
    3efc:	10 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3efe:	0d 00 37    	bra       0x3f1a <.L5>

00003f00 <.L10>:
    3f00:	12 c4 b3    	mov.b     #0x41, w2
    3f02:	71 c0 b3    	mov.b     #0x7, w1
    3f04:	00 d6 20    	mov.w     #0xd60, w0
    3f06:	0b 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3f08:	12 c4 b3    	mov.b     #0x41, w2
    3f0a:	61 c0 b3    	mov.b     #0x6, w1
    3f0c:	50 d6 20    	mov.w     #0xd65, w0
    3f0e:	07 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3f10:	12 c4 b3    	mov.b     #0x41, w2
    3f12:	51 c0 b3    	mov.b     #0x5, w1
    3f14:	a0 d6 20    	mov.w     #0xd6a, w0
    3f16:	03 00 07    	rcall     0x3f1e <_lcd_init> <.LFB5> <.LFE4>
    3f18:	00 00 00    	nop       

00003f1a <.L5>:
    3f1a:	00 80 fa    	ulnk      
    3f1c:	00 00 06    	return    

00003f1e <_lcd_init>:
    3f1e:	04 00 fa    	lnk       #0x4
    3f20:	00 0f 78    	mov.w     w0, [w14]
    3f22:	21 47 98    	mov.b     w1, [w14+2]
    3f24:	32 47 98    	mov.b     w2, [w14+3]
    3f26:	3e 40 90    	mov.b     [w14+3], w0
    3f28:	00 00 fb    	se        w0, w0
    3f2a:	11 04 20    	mov.w     #0x41, w1
    3f2c:	81 0f 50    	sub.w     w0, w1, [w15]
    3f2e:	10 00 32    	bra       Z, 0x3f50 <.L14>
    3f30:	41 05 20    	mov.w     #0x54, w1
    3f32:	81 0f 50    	sub.w     w0, w1, [w15]
    3f34:	1a 00 3a    	bra       NZ, 0x3f6a <.L13>
    3f36:	2e 40 90    	mov.b     [w14+2], w0
    3f38:	00 40 40    	add.b     w0, w0, w0
    3f3a:	02 c4 b3    	mov.b     #0x40, w2
    3f3c:	82 40 40    	add.b     w0, w2, w1
    3f3e:	1e 00 78    	mov.w     [w14], w0
    3f40:	01 48 78    	mov.b     w1, [w0]
    3f42:	2e 40 90    	mov.b     [w14+2], w0
    3f44:	00 40 40    	add.b     w0, w0, w0
    3f46:	12 c4 b3    	mov.b     #0x41, w2
    3f48:	82 40 40    	add.b     w0, w2, w1
    3f4a:	1e 00 78    	mov.w     [w14], w0
    3f4c:	11 40 98    	mov.b     w1, [w0+1]
    3f4e:	0d 00 37    	bra       0x3f6a <.L13>

00003f50 <.L14>:
    3f50:	2e 40 90    	mov.b     [w14+2], w0
    3f52:	00 40 40    	add.b     w0, w0, w0
    3f54:	02 c7 b3    	mov.b     #0x70, w2
    3f56:	82 40 40    	add.b     w0, w2, w1
    3f58:	1e 00 78    	mov.w     [w14], w0
    3f5a:	01 48 78    	mov.b     w1, [w0]
    3f5c:	2e 40 90    	mov.b     [w14+2], w0
    3f5e:	00 40 40    	add.b     w0, w0, w0
    3f60:	12 c7 b3    	mov.b     #0x71, w2
    3f62:	82 40 40    	add.b     w0, w2, w1
    3f64:	1e 00 78    	mov.w     [w14], w0
    3f66:	11 40 98    	mov.b     w1, [w0+1]
    3f68:	00 00 00    	nop       

00003f6a <.L13>:
    3f6a:	1e 00 78    	mov.w     [w14], w0
    3f6c:	80 40 eb    	clr.b     w1
    3f6e:	31 40 98    	mov.b     w1, [w0+3]
    3f70:	1e 00 78    	mov.w     [w14], w0
    3f72:	80 40 eb    	clr.b     w1
    3f74:	41 40 98    	mov.b     w1, [w0+4]
    3f76:	1e 00 78    	mov.w     [w14], w0
    3f78:	80 40 eb    	clr.b     w1
    3f7a:	21 40 98    	mov.b     w1, [w0+2]
    3f7c:	80 40 eb    	clr.b     w1
    3f7e:	1e 00 78    	mov.w     [w14], w0
    3f80:	19 ff 07    	rcall     0x3db4 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE24> <.Letext0> <.Ltext0>
    3f82:	80 a9 23    	mov.w     #0x3a98, w0
    3f84:	05 ff 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    3f86:	82 c0 b3    	mov.b     #0x8, w2
    3f88:	31 c0 b3    	mov.b     #0x3, w1
    3f8a:	1e 00 78    	mov.w     [w14], w0
    3f8c:	67 ff 07    	rcall     0x3e5c <___lcd_send8> <.LFB3> <.LFE2>
    3f8e:	80 38 21    	mov.w     #0x1388, w0
    3f90:	ff fe 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    3f92:	82 c0 b3    	mov.b     #0x8, w2
    3f94:	31 c0 b3    	mov.b     #0x3, w1
    3f96:	1e 00 78    	mov.w     [w14], w0
    3f98:	61 ff 07    	rcall     0x3e5c <___lcd_send8> <.LFB3> <.LFE2>
    3f9a:	80 38 21    	mov.w     #0x1388, w0
    3f9c:	f9 fe 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    3f9e:	82 c0 b3    	mov.b     #0x8, w2
    3fa0:	31 c0 b3    	mov.b     #0x3, w1
    3fa2:	1e 00 78    	mov.w     [w14], w0
    3fa4:	5b ff 07    	rcall     0x3e5c <___lcd_send8> <.LFB3> <.LFE2>
    3fa6:	80 38 21    	mov.w     #0x1388, w0
    3fa8:	f3 fe 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    3faa:	82 c0 b3    	mov.b     #0x8, w2
    3fac:	21 c0 b3    	mov.b     #0x2, w1
    3fae:	1e 00 78    	mov.w     [w14], w0
    3fb0:	55 ff 07    	rcall     0x3e5c <___lcd_send8> <.LFB3> <.LFE2>
    3fb2:	80 38 21    	mov.w     #0x1388, w0
    3fb4:	ed fe 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    3fb6:	82 c0 b3    	mov.b     #0x8, w2
    3fb8:	81 c2 b3    	mov.b     #0x28, w1
    3fba:	1e 00 78    	mov.w     [w14], w0
    3fbc:	2b ff 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    3fbe:	20 03 20    	mov.w     #0x32, w0
    3fc0:	e7 fe 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    3fc2:	82 c0 b3    	mov.b     #0x8, w2
    3fc4:	01 c8 b3    	mov.b     #0x80, w1
    3fc6:	1e 00 78    	mov.w     [w14], w0
    3fc8:	25 ff 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    3fca:	20 03 20    	mov.w     #0x32, w0
    3fcc:	e1 fe 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    3fce:	82 c0 b3    	mov.b     #0x8, w2
    3fd0:	11 c0 b3    	mov.b     #0x1, w1
    3fd2:	1e 00 78    	mov.w     [w14], w0
    3fd4:	1f ff 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    3fd6:	00 7d 20    	mov.w     #0x7d0, w0
    3fd8:	db fe 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    3fda:	82 c0 b3    	mov.b     #0x8, w2
    3fdc:	61 c0 b3    	mov.b     #0x6, w1
    3fde:	1e 00 78    	mov.w     [w14], w0
    3fe0:	19 ff 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    3fe2:	80 38 21    	mov.w     #0x1388, w0
    3fe4:	d5 fe 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    3fe6:	82 c0 b3    	mov.b     #0x8, w2
    3fe8:	c1 c0 b3    	mov.b     #0xc, w1
    3fea:	1e 00 78    	mov.w     [w14], w0
    3fec:	13 ff 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    3fee:	00 80 fa    	ulnk      
    3ff0:	00 00 06    	return    

00003ff2 <_lcd_stop>:
    3ff2:	02 00 fa    	lnk       #0x2
    3ff4:	00 0f 78    	mov.w     w0, [w14]
    3ff6:	a0 41 80    	mov.w     0x834, w0
    3ff8:	73 02 07    	rcall     0x44e0 <_i2c_stop> <.LFB8> <.LFE7>
    3ffa:	00 80 fa    	ulnk      
    3ffc:	00 00 06    	return    

00003ffe <_lcd_display>:
    3ffe:	04 00 fa    	lnk       #0x4
    4000:	00 0f 78    	mov.w     w0, [w14]
    4002:	21 47 98    	mov.b     w1, [w14+2]
    4004:	2e 40 90    	mov.b     [w14+2], w0
    4006:	00 04 e0    	cp0.b     w0
    4008:	07 00 32    	bra       Z, 0x4018 <.L18>
    400a:	1e 00 78    	mov.w     [w14], w0
    400c:	30 40 90    	mov.b     [w0+3], w0
    400e:	80 40 78    	mov.b     w0, w1
    4010:	01 24 a0    	bset.b    w1, #0x2
    4012:	1e 00 78    	mov.w     [w14], w0
    4014:	31 40 98    	mov.b     w1, [w0+3]
    4016:	06 00 37    	bra       0x4024 <.L19>

00004018 <.L18>:
    4018:	1e 00 78    	mov.w     [w14], w0
    401a:	b0 40 90    	mov.b     [w0+3], w1
    401c:	b0 cf b3    	mov.b     #0xfb, w0
    401e:	80 c0 60    	and.b     w1, w0, w1
    4020:	1e 00 78    	mov.w     [w14], w0
    4022:	31 40 98    	mov.b     w1, [w0+3]

00004024 <.L19>:
    4024:	1e 00 78    	mov.w     [w14], w0
    4026:	30 40 90    	mov.b     [w0+3], w0
    4028:	00 34 a0    	bset.b    w0, #0x3
    402a:	82 c0 b3    	mov.b     #0x8, w2
    402c:	80 40 78    	mov.b     w0, w1
    402e:	1e 00 78    	mov.w     [w14], w0
    4030:	f1 fe 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    4032:	00 80 fa    	ulnk      
    4034:	00 00 06    	return    

00004036 <_lcd_clear>:
    4036:	02 00 fa    	lnk       #0x2
    4038:	00 0f 78    	mov.w     w0, [w14]
    403a:	82 c0 b3    	mov.b     #0x8, w2
    403c:	11 c0 b3    	mov.b     #0x1, w1
    403e:	1e 00 78    	mov.w     [w14], w0
    4040:	e9 fe 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    4042:	00 7d 20    	mov.w     #0x7d0, w0
    4044:	a5 fe 07    	rcall     0x3d90 <_timer_delayMicro> <.LFB24> <.LFE23>
    4046:	00 80 fa    	ulnk      
    4048:	00 00 06    	return    

0000404a <_lcd_putc>:
    404a:	04 00 fa    	lnk       #0x4
    404c:	00 0f 78    	mov.w     w0, [w14]
    404e:	21 47 98    	mov.b     w1, [w14+2]
    4050:	2e 40 90    	mov.b     [w14+2], w0
    4052:	92 c0 b3    	mov.b     #0x9, w2
    4054:	80 40 78    	mov.b     w0, w1
    4056:	1e 00 78    	mov.w     [w14], w0
    4058:	dd fe 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    405a:	00 80 fa    	ulnk      
    405c:	00 00 06    	return    

0000405e <_lcd_goto>:
    405e:	06 00 fa    	lnk       #0x6
    4060:	10 07 98    	mov.w     w0, [w14+2]
    4062:	41 47 98    	mov.b     w1, [w14+4]
    4064:	52 47 98    	mov.b     w2, [w14+5]
    4066:	4e 40 90    	mov.b     [w14+4], w0
    4068:	00 80 fb    	ze        w0, w0
    406a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    406c:	03 00 32    	bra       Z, 0x4074 <.L24>
    406e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4070:	04 00 32    	bra       Z, 0x407a <.L25>
    4072:	06 00 37    	bra       0x4080 <.L27>

00004074 <.L24>:
    4074:	00 40 eb    	clr.b     w0
    4076:	00 4f 78    	mov.b     w0, [w14]
    4078:	06 00 37    	bra       0x4086 <.L26>

0000407a <.L25>:
    407a:	00 c4 b3    	mov.b     #0x40, w0
    407c:	00 4f 78    	mov.b     w0, [w14]
    407e:	03 00 37    	bra       0x4086 <.L26>

00004080 <.L27>:
    4080:	00 40 eb    	clr.b     w0
    4082:	00 4f 78    	mov.b     w0, [w14]
    4084:	00 00 00    	nop       

00004086 <.L26>:
    4086:	5e 40 90    	mov.b     [w14+5], w0
    4088:	1e 4f 40    	add.b     w0, [w14], [w14]
    408a:	1e 40 78    	mov.b     [w14], w0
    408c:	00 74 a0    	bset.b    w0, #0x7
    408e:	82 c0 b3    	mov.b     #0x8, w2
    4090:	80 40 78    	mov.b     w0, w1
    4092:	1e 00 90    	mov.w     [w14+2], w0
    4094:	bf fe 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    4096:	00 80 fa    	ulnk      
    4098:	00 00 06    	return    

0000409a <_lcd_cursor>:
    409a:	04 00 fa    	lnk       #0x4
    409c:	00 0f 78    	mov.w     w0, [w14]
    409e:	21 47 98    	mov.b     w1, [w14+2]
    40a0:	2e 40 90    	mov.b     [w14+2], w0
    40a2:	00 80 fb    	ze        w0, w0
    40a4:	00 00 e0    	cp0.w     w0
    40a6:	03 00 32    	bra       Z, 0x40ae <.L30>
    40a8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    40aa:	06 00 32    	bra       Z, 0x40b8 <.L31>
    40ac:	0a 00 37    	bra       0x40c2 <.L28>

000040ae <.L30>:
    40ae:	82 c0 b3    	mov.b     #0x8, w2
    40b0:	c1 c0 b3    	mov.b     #0xc, w1
    40b2:	1e 00 78    	mov.w     [w14], w0
    40b4:	af fe 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    40b6:	05 00 37    	bra       0x40c2 <.L28>

000040b8 <.L31>:
    40b8:	82 c0 b3    	mov.b     #0x8, w2
    40ba:	e1 c0 b3    	mov.b     #0xe, w1
    40bc:	1e 00 78    	mov.w     [w14], w0
    40be:	aa fe 07    	rcall     0x3e14 <___lcd_send> <.LFB2> <.LFE1>
    40c0:	00 00 00    	nop       

000040c2 <.L28>:
    40c2:	00 80 fa    	ulnk      
    40c4:	00 00 06    	return    

000040c6 <_lcd_print1>:
    40c6:	04 00 fa    	lnk       #0x4
    40c8:	00 0f 78    	mov.w     w0, [w14]
    40ca:	11 07 98    	mov.w     w1, [w14+2]
    40cc:	1e 00 78    	mov.w     [w14], w0
    40ce:	b3 ff 07    	rcall     0x4036 <_lcd_clear> <.LFB8> <.LFE7>
    40d0:	08 00 37    	bra       0x40e2 <.L34>

000040d2 <.L35>:
    40d2:	1e 00 90    	mov.w     [w14+2], w0
    40d4:	10 40 78    	mov.b     [w0], w0
    40d6:	80 40 78    	mov.b     w0, w1
    40d8:	1e 00 78    	mov.w     [w14], w0
    40da:	b7 ff 07    	rcall     0x404a <_lcd_putc> <.LFB9> <.LFE8>
    40dc:	1e 00 90    	mov.w     [w14+2], w0
    40de:	00 00 e8    	inc.w     w0, w0
    40e0:	10 07 98    	mov.w     w0, [w14+2]

000040e2 <.L34>:
    40e2:	1e 00 90    	mov.w     [w14+2], w0
    40e4:	10 40 78    	mov.b     [w0], w0
    40e6:	00 04 e0    	cp0.b     w0
    40e8:	f4 ff 3a    	bra       NZ, 0x40d2 <.L35>
    40ea:	00 80 fa    	ulnk      
    40ec:	00 00 06    	return    

000040ee <_lcd_print2>:
    40ee:	42 00 fa    	lnk       #0x42
    40f0:	60 1f 98    	mov.w     w0, [w14+60]
    40f2:	71 1f 98    	mov.w     w1, [w14+62]
    40f4:	02 27 98    	mov.w     w2, [w14+64]
    40f6:	6e 18 90    	mov.w     [w14+60], w0
    40f8:	9e ff 07    	rcall     0x4036 <_lcd_clear> <.LFB8> <.LFE7>
    40fa:	00 b1 29    	mov.w     #0x9b10, w0
    40fc:	e4 00 47    	add.w     w14, #0x4, w1
    40fe:	37 00 09    	repeat    #0x37
    4100:	b0 58 78    	mov.b     [w0++], [w1++]
    4102:	80 03 b1    	sub.w     #0x38, w0
    4104:	00 00 eb    	clr.w     w0
    4106:	00 0f 78    	mov.w     w0, [w14]
    4108:	09 00 37    	bra       0x411c <.L37>

0000410a <.L38>:
    410a:	7e 18 90    	mov.w     [w14+62], w0
    410c:	90 40 78    	mov.b     [w0], w1
    410e:	64 00 47    	add.w     w14, #0x4, w0
    4110:	1e 00 40    	add.w     w0, [w14], w0
    4112:	01 48 78    	mov.b     w1, [w0]
    4114:	1e 0f e8    	inc.w     [w14], [w14]
    4116:	7e 18 90    	mov.w     [w14+62], w0
    4118:	00 00 e8    	inc.w     w0, w0
    411a:	70 1f 98    	mov.w     w0, [w14+62]

0000411c <.L37>:
    411c:	7e 18 90    	mov.w     [w14+62], w0
    411e:	10 40 78    	mov.b     [w0], w0
    4120:	00 04 e0    	cp0.b     w0
    4122:	f3 ff 3a    	bra       NZ, 0x410a <.L38>
    4124:	80 02 20    	mov.w     #0x28, w0
    4126:	00 0f 78    	mov.w     w0, [w14]
    4128:	09 00 37    	bra       0x413c <.L39>

0000412a <.L40>:
    412a:	0e 20 90    	mov.w     [w14+64], w0
    412c:	90 40 78    	mov.b     [w0], w1
    412e:	64 00 47    	add.w     w14, #0x4, w0
    4130:	1e 00 40    	add.w     w0, [w14], w0
    4132:	01 48 78    	mov.b     w1, [w0]
    4134:	1e 0f e8    	inc.w     [w14], [w14]
    4136:	0e 20 90    	mov.w     [w14+64], w0
    4138:	00 00 e8    	inc.w     w0, w0
    413a:	00 27 98    	mov.w     w0, [w14+64]

0000413c <.L39>:
    413c:	0e 20 90    	mov.w     [w14+64], w0
    413e:	10 40 78    	mov.b     [w0], w0
    4140:	00 04 e0    	cp0.b     w0
    4142:	f3 ff 3a    	bra       NZ, 0x412a <.L40>
    4144:	64 00 47    	add.w     w14, #0x4, w0
    4146:	10 07 98    	mov.w     w0, [w14+2]
    4148:	9e 00 90    	mov.w     [w14+2], w1
    414a:	6e 18 90    	mov.w     [w14+60], w0
    414c:	bc ff 07    	rcall     0x40c6 <_lcd_print1> <.LFB12> <.LFE11>
    414e:	00 80 fa    	ulnk      
    4150:	00 00 06    	return    

00004152 <_lcd_print>:
    4152:	30 00 fa    	lnk       #0x30
    4154:	60 17 98    	mov.w     w0, [w14+44]
    4156:	71 17 98    	mov.w     w1, [w14+46]
    4158:	90 b4 29    	mov.w     #0x9b49, w0
    415a:	ea 00 47    	add.w     w14, #0xa, w1
    415c:	10 00 09    	repeat    #0x10
    415e:	b0 58 78    	mov.b     [w0++], [w1++]
    4160:	10 01 b1    	sub.w     #0x11, w0
    4162:	6a 0f 47    	add.w     w14, #0xa, [w14]
    4164:	90 b4 29    	mov.w     #0x9b49, w0
    4166:	fb 00 47    	add.w     w14, #0x1b, w1
    4168:	10 00 09    	repeat    #0x10
    416a:	b0 58 78    	mov.b     [w0++], [w1++]
    416c:	10 01 b1    	sub.w     #0x11, w0
    416e:	7b 00 47    	add.w     w14, #0x1b, w0
    4170:	10 07 98    	mov.w     w0, [w14+2]
    4172:	9e 00 78    	mov.w     [w14], w1
    4174:	31 07 98    	mov.w     w1, [w14+6]
    4176:	9e 00 90    	mov.w     [w14+2], w1
    4178:	41 07 98    	mov.w     w1, [w14+8]
    417a:	00 40 eb    	clr.b     w0
    417c:	40 47 98    	mov.b     w0, [w14+4]
    417e:	0f 00 37    	bra       0x419e <.L42>

00004180 <.L44>:
    4180:	7e 10 90    	mov.w     [w14+46], w0
    4182:	10 40 78    	mov.b     [w0], w0
    4184:	00 04 e0    	cp0.b     w0
    4186:	08 00 32    	bra       Z, 0x4198 <.L43>
    4188:	7e 10 90    	mov.w     [w14+46], w0
    418a:	90 40 78    	mov.b     [w0], w1
    418c:	1e 00 78    	mov.w     [w14], w0
    418e:	01 48 78    	mov.b     w1, [w0]
    4190:	7e 10 90    	mov.w     [w14+46], w0
    4192:	00 00 e8    	inc.w     w0, w0
    4194:	70 17 98    	mov.w     w0, [w14+46]
    4196:	1e 0f e8    	inc.w     [w14], [w14]

00004198 <.L43>:
    4198:	4e 40 90    	mov.b     [w14+4], w0
    419a:	00 40 e8    	inc.b     w0, w0
    419c:	40 47 98    	mov.b     w0, [w14+4]

0000419e <.L42>:
    419e:	4e 40 90    	mov.b     [w14+4], w0
    41a0:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    41a2:	ee ff 36    	bra       LEU, 0x4180 <.L44>
    41a4:	00 40 eb    	clr.b     w0
    41a6:	40 47 98    	mov.b     w0, [w14+4]
    41a8:	7e 10 90    	mov.w     [w14+46], w0
    41aa:	00 00 e9    	dec.w     w0, w0
    41ac:	70 17 98    	mov.w     w0, [w14+46]
    41ae:	11 00 37    	bra       0x41d2 <.L45>

000041b0 <.L47>:
    41b0:	7e 10 90    	mov.w     [w14+46], w0
    41b2:	10 40 78    	mov.b     [w0], w0
    41b4:	00 04 e0    	cp0.b     w0
    41b6:	0a 00 32    	bra       Z, 0x41cc <.L46>
    41b8:	7e 10 90    	mov.w     [w14+46], w0
    41ba:	90 40 78    	mov.b     [w0], w1
    41bc:	1e 00 90    	mov.w     [w14+2], w0
    41be:	01 48 78    	mov.b     w1, [w0]
    41c0:	7e 10 90    	mov.w     [w14+46], w0
    41c2:	00 00 e8    	inc.w     w0, w0
    41c4:	70 17 98    	mov.w     w0, [w14+46]
    41c6:	1e 00 90    	mov.w     [w14+2], w0
    41c8:	00 00 e8    	inc.w     w0, w0
    41ca:	10 07 98    	mov.w     w0, [w14+2]

000041cc <.L46>:
    41cc:	4e 40 90    	mov.b     [w14+4], w0
    41ce:	00 40 e8    	inc.b     w0, w0
    41d0:	40 47 98    	mov.b     w0, [w14+4]

000041d2 <.L45>:
    41d2:	4e 40 90    	mov.b     [w14+4], w0
    41d4:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    41d6:	ec ff 36    	bra       LEU, 0x41b0 <.L47>
    41d8:	4e 01 90    	mov.w     [w14+8], w2
    41da:	be 00 90    	mov.w     [w14+6], w1
    41dc:	6e 10 90    	mov.w     [w14+44], w0
    41de:	87 ff 07    	rcall     0x40ee <_lcd_print2> <.LFB13> <.LFE12>
    41e0:	00 80 fa    	ulnk      
    41e2:	00 00 06    	return    

000041e4 <_lcd_broadcast>:
    41e4:	04 00 fa    	lnk       #0x4
    41e6:	10 07 98    	mov.w     w0, [w14+2]
    41e8:	00 40 eb    	clr.b     w0
    41ea:	00 4f 78    	mov.b     w0, [w14]
    41ec:	08 00 37    	bra       0x41fe <.L49>

000041ee <.L50>:
    41ee:	1e 80 fb    	ze        [w14], w0
    41f0:	65 00 b9    	mul.su    w0, #0x5, w0
    41f2:	80 00 78    	mov.w     w0, w1
    41f4:	00 d6 20    	mov.w     #0xd60, w0
    41f6:	00 80 40    	add.w     w1, w0, w0
    41f8:	9e 00 90    	mov.w     [w14+2], w1
    41fa:	ab ff 07    	rcall     0x4152 <_lcd_print> <.LFB14> <.LFE13>
    41fc:	1e 4f e8    	inc.b     [w14], [w14]

000041fe <.L49>:
    41fe:	1e 40 78    	mov.b     [w14], w0
    4200:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    4202:	f5 ff 36    	bra       LEU, 0x41ee <.L50>
    4204:	00 80 fa    	ulnk      
    4206:	00 00 06    	return    

00004208 <_init_i2c>:

_I2C i2c1, i2c2, i2c3;
_PIN SCL3, SDA3;

void init_i2c(void) {
    4208:	00 00 fa    	lnk       #0x0
    init_pin();
    420a:	84 f9 07    	rcall     0x3514 <_init_pin> <.LFB3> <.LFE2>

    pin_init(&SDA3, (uint16_t *)&PORTE, (uint16_t *)&TRISE, 
    420c:	00 00 eb    	clr.w     w0
    420e:	80 1f 78    	mov.w     w0, [w15++]
    4210:	80 83 eb    	setm.w    w7
    4212:	00 43 eb    	clr.b     w6
    4214:	80 82 eb    	setm.w    w5
    4216:	74 c0 b3    	mov.b     #0x7, w4
    4218:	80 01 eb    	clr.w     w3
    421a:	02 2e 20    	mov.w     #0x2e0, w2
    421c:	21 2e 20    	mov.w     #0x2e2, w1
    421e:	c0 cf 20    	mov.w     #0xcfc, w0
    4220:	8d fa 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    4222:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 7, -1, 0, -1, (uint16_t *)NULL);
    pin_init(&SCL3, (uint16_t *)&PORTE, (uint16_t *)&TRISE, 
    4224:	00 00 eb    	clr.w     w0
    4226:	80 1f 78    	mov.w     w0, [w15++]
    4228:	80 83 eb    	setm.w    w7
    422a:	00 43 eb    	clr.b     w6
    422c:	80 82 eb    	setm.w    w5
    422e:	64 c0 b3    	mov.b     #0x6, w4
    4230:	80 01 eb    	clr.w     w3
    4232:	02 2e 20    	mov.w     #0x2e0, w2
    4234:	21 2e 20    	mov.w     #0x2e2, w1
    4236:	60 ce 20    	mov.w     #0xce6, w0
    4238:	81 fa 07    	rcall     0x373c <_pin_init> <.LFB4> <.LFE3>
    423a:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 6, -1, 0, -1, (uint16_t *)NULL);

    i2c_init(&i2c1, (uint16_t *)&I2C1RCV, (uint16_t *)&I2C1TRN, 
    423c:	e0 8f 20    	mov.w     #0x8fe, w0
    423e:	80 1f 78    	mov.w     w0, [w15++]
    4240:	80 8e 20    	mov.w     #0x8e8, w0
    4242:	80 1f 78    	mov.w     w0, [w15++]
    4244:	10 c0 b3    	mov.b     #0x1, w0
    4246:	80 1f 78    	mov.w     w0, [w15++]
    4248:	60 08 20    	mov.w     #0x86, w0
    424a:	80 1f 78    	mov.w     w0, [w15++]
    424c:	c7 20 20    	mov.w     #0x20c, w7
    424e:	a6 20 20    	mov.w     #0x20a, w6
    4250:	85 20 20    	mov.w     #0x208, w5
    4252:	64 20 20    	mov.w     #0x206, w4
    4254:	43 20 20    	mov.w     #0x204, w3
    4256:	22 20 20    	mov.w     #0x202, w2
    4258:	01 20 20    	mov.w     #0x200, w1
    425a:	40 ca 20    	mov.w     #0xca4, w0
    425c:	27 00 07    	rcall     0x42ac <_i2c_init> <.LFB1> <.LFE0>
    425e:	e8 87 57    	sub.w     w15, #0x8, w15
             (uint16_t *)&I2C1BRG, (uint16_t *)&I2C1CON, 
             (uint16_t *)&I2C1STAT, (uint16_t *)&I2C1ADD, 
             (uint16_t *)&I2C1MSK, (uint16_t *)&IFS1, 1, 
             &D[8], &D[9]);
    i2c_init(&i2c2, (uint16_t *)&I2C2RCV, (uint16_t *)&I2C2TRN, 
    4260:	a0 87 20    	mov.w     #0x87a, w0
    4262:	80 1f 78    	mov.w     w0, [w15++]
    4264:	40 86 20    	mov.w     #0x864, w0
    4266:	80 1f 78    	mov.w     w0, [w15++]
    4268:	20 c0 b3    	mov.b     #0x2, w0
    426a:	80 1f 78    	mov.w     w0, [w15++]
    426c:	a0 08 20    	mov.w     #0x8a, w0
    426e:	80 1f 78    	mov.w     w0, [w15++]
    4270:	c7 21 20    	mov.w     #0x21c, w7
    4272:	a6 21 20    	mov.w     #0x21a, w6
    4274:	85 21 20    	mov.w     #0x218, w5
    4276:	64 21 20    	mov.w     #0x216, w4
    4278:	43 21 20    	mov.w     #0x214, w3
    427a:	22 21 20    	mov.w     #0x212, w2
    427c:	01 21 20    	mov.w     #0x210, w1
    427e:	a0 cb 20    	mov.w     #0xcba, w0
    4280:	15 00 07    	rcall     0x42ac <_i2c_init> <.LFB1> <.LFE0>
    4282:	e8 87 57    	sub.w     w15, #0x8, w15
             (uint16_t *)&I2C2BRG, (uint16_t *)&I2C2CON, 
             (uint16_t *)&I2C2STAT, (uint16_t *)&I2C2ADD, 
             (uint16_t *)&I2C2MSK, (uint16_t *)&IFS3, 2, 
             &D[2], &D[3]);
    i2c_init(&i2c3, (uint16_t *)&I2C3RCV, (uint16_t *)&I2C3TRN, 
    4284:	60 ce 20    	mov.w     #0xce6, w0
    4286:	80 1f 78    	mov.w     w0, [w15++]
    4288:	c0 cf 20    	mov.w     #0xcfc, w0
    428a:	80 1f 78    	mov.w     w0, [w15++]
    428c:	50 c0 b3    	mov.b     #0x5, w0
    428e:	80 1f 78    	mov.w     w0, [w15++]
    4290:	e0 08 20    	mov.w     #0x8e, w0
    4292:	80 1f 78    	mov.w     w0, [w15++]
    4294:	c7 27 20    	mov.w     #0x27c, w7
    4296:	a6 27 20    	mov.w     #0x27a, w6
    4298:	85 27 20    	mov.w     #0x278, w5
    429a:	64 27 20    	mov.w     #0x276, w4
    429c:	43 27 20    	mov.w     #0x274, w3
    429e:	22 27 20    	mov.w     #0x272, w2
    42a0:	01 27 20    	mov.w     #0x270, w1
    42a2:	00 cd 20    	mov.w     #0xcd0, w0
    42a4:	03 00 07    	rcall     0x42ac <_i2c_init> <.LFB1> <.LFE0>
    42a6:	e8 87 57    	sub.w     w15, #0x8, w15
             (uint16_t *)&I2C3BRG, (uint16_t *)&I2C3CON, 
             (uint16_t *)&I2C3STAT, (uint16_t *)&I2C3ADD, 
             (uint16_t *)&I2C3MSK, (uint16_t *)&IFS5, 5, 
             &SDA3, &SCL3);
}
    42a8:	00 80 fa    	ulnk      
    42aa:	00 00 06    	return    

000042ac <_i2c_init>:

void i2c_init(_I2C *self, uint16_t *I2CxRCV, uint16_t *I2CxTRN, 
              uint16_t *I2CxBRG, uint16_t *I2CxCON, 
              uint16_t *I2CxSTAT, uint16_t *I2CxADD, 
              uint16_t *I2CxMSK, uint16_t *IFSy, 
              uint8_t MI2CxIF, _PIN *SDA, _PIN *SCL) {
    42ac:	10 00 fa    	lnk       #0x10
    42ae:	00 0f 78    	mov.w     w0, [w14]
    42b0:	11 07 98    	mov.w     w1, [w14+2]
    42b2:	22 07 98    	mov.w     w2, [w14+4]
    42b4:	33 07 98    	mov.w     w3, [w14+6]
    42b6:	44 07 98    	mov.w     w4, [w14+8]
    42b8:	55 07 98    	mov.w     w5, [w14+10]
    42ba:	66 07 98    	mov.w     w6, [w14+12]
    42bc:	77 07 98    	mov.w     w7, [w14+14]
    self->I2CxRCV = I2CxRCV;
    42be:	1e 00 78    	mov.w     [w14], w0
    42c0:	9e 00 90    	mov.w     [w14+2], w1
    42c2:	01 08 78    	mov.w     w1, [w0]
    self->I2CxTRN = I2CxTRN;
    42c4:	1e 00 78    	mov.w     [w14], w0
    42c6:	ae 00 90    	mov.w     [w14+4], w1
    42c8:	11 00 98    	mov.w     w1, [w0+2]
    self->I2CxBRG = I2CxBRG;
    42ca:	1e 00 78    	mov.w     [w14], w0
    42cc:	be 00 90    	mov.w     [w14+6], w1
    42ce:	21 00 98    	mov.w     w1, [w0+4]
    self->I2CxCON = I2CxCON;
    42d0:	1e 00 78    	mov.w     [w14], w0
    42d2:	ce 00 90    	mov.w     [w14+8], w1
    42d4:	31 00 98    	mov.w     w1, [w0+6]
    self->I2CxSTAT = I2CxSTAT;
    42d6:	1e 00 78    	mov.w     [w14], w0
    42d8:	de 00 90    	mov.w     [w14+10], w1
    42da:	41 00 98    	mov.w     w1, [w0+8]
    self->I2CxADD = I2CxADD;
    42dc:	1e 00 78    	mov.w     [w14], w0
    42de:	ee 00 90    	mov.w     [w14+12], w1
    42e0:	51 00 98    	mov.w     w1, [w0+10]
    self->I2CxMSK = I2CxMSK;
    42e2:	1e 00 78    	mov.w     [w14], w0
    42e4:	fe 00 90    	mov.w     [w14+14], w1
    42e6:	61 00 98    	mov.w     w1, [w0+12]
    self->IFSy = IFSy;
    42e8:	1e 00 78    	mov.w     [w14], w0
    42ea:	ce b8 97    	mov.w     [w14-8], w1
    42ec:	71 00 98    	mov.w     w1, [w0+14]
    self->MI2CxIF = MI2CxIF;
    42ee:	1e 00 78    	mov.w     [w14], w0
    42f0:	ee f0 97    	mov.b     [w14-10], w1
    42f2:	01 50 98    	mov.b     w1, [w0+16]
    self->SDA = SDA;
    42f4:	1e 00 78    	mov.w     [w14], w0
    42f6:	ae b8 97    	mov.w     [w14-12], w1
    42f8:	11 08 98    	mov.w     w1, [w0+18]
    self->SCL = SCL;
    42fa:	1e 00 78    	mov.w     [w14], w0
    42fc:	9e b8 97    	mov.w     [w14-14], w1
    42fe:	21 08 98    	mov.w     w1, [w0+20]
}
    4300:	00 80 fa    	ulnk      
    4302:	00 00 06    	return    

00004304 <_i2c_open>:

void i2c_open(_I2C *self, float freq) {
    4304:	06 00 fa    	lnk       #0x6
    4306:	88 1f 78    	mov.w     w8, [w15++]
    4308:	00 0f 78    	mov.w     w0, [w14]
    430a:	12 07 98    	mov.w     w2, [w14+2]
    430c:	23 07 98    	mov.w     w3, [w14+4]
    uint16_t temp;

    // Disable I2C module
    *(self->I2CxCON) = 0;
    430e:	1e 00 78    	mov.w     [w14], w0
    4310:	30 00 90    	mov.w     [w0+6], w0
    4312:	80 00 eb    	clr.w     w1
    4314:	01 08 78    	mov.w     w1, [w0]
    *(self->I2CxSTAT) = 0;
    4316:	1e 00 78    	mov.w     [w14], w0
    4318:	40 00 90    	mov.w     [w0+8], w0
    431a:	80 00 eb    	clr.w     w1
    431c:	01 08 78    	mov.w     w1, [w0]
    if ((self->SDA->owner==NULL) && (self->SCL->owner==NULL)) {
    431e:	1e 00 78    	mov.w     [w14], w0
    4320:	10 08 90    	mov.w     [w0+18], w0
    4322:	00 08 90    	mov.w     [w0+16], w0
    4324:	00 00 e0    	cp0.w     w0
    4326:	5a 00 3a    	bra       NZ, 0x43dc <.L11>
    4328:	1e 00 78    	mov.w     [w14], w0
    432a:	20 08 90    	mov.w     [w0+20], w0
    432c:	00 08 90    	mov.w     [w0+16], w0
    432e:	00 00 e0    	cp0.w     w0
    4330:	57 00 3a    	bra       NZ, 0x43e0 <.L12>
        // Both SDA and SCL are available, so assign to the I2C module
        pin_digitalIn(self->SDA);
    4332:	1e 00 78    	mov.w     [w14], w0
    4334:	10 08 90    	mov.w     [w0+18], w0
    4336:	2e fa 07    	rcall     0x3794 <_pin_digitalIn> <.LFB5> <.LFE4>
        pin_digitalIn(self->SCL);
    4338:	1e 00 78    	mov.w     [w14], w0
    433a:	20 08 90    	mov.w     [w0+20], w0
    433c:	2b fa 07    	rcall     0x3794 <_pin_digitalIn> <.LFB5> <.LFE4>
        self->SDA->owner = (void *)self;
    433e:	1e 00 78    	mov.w     [w14], w0
    4340:	10 08 90    	mov.w     [w0+18], w0
    4342:	9e 00 78    	mov.w     [w14], w1
    4344:	01 08 98    	mov.w     w1, [w0+16]
        self->SDA->write = NULL;
    4346:	1e 00 78    	mov.w     [w14], w0
    4348:	10 08 90    	mov.w     [w0+18], w0
    434a:	80 00 eb    	clr.w     w1
    434c:	11 08 98    	mov.w     w1, [w0+18]
        self->SDA->read = NULL;
    434e:	1e 00 78    	mov.w     [w14], w0
    4350:	10 08 90    	mov.w     [w0+18], w0
    4352:	80 00 eb    	clr.w     w1
    4354:	21 08 98    	mov.w     w1, [w0+20]
        self->SCL->owner = (void *)self;
    4356:	1e 00 78    	mov.w     [w14], w0
    4358:	20 08 90    	mov.w     [w0+20], w0
    435a:	9e 00 78    	mov.w     [w14], w1
    435c:	01 08 98    	mov.w     w1, [w0+16]
        self->SCL->write = NULL;
    435e:	1e 00 78    	mov.w     [w14], w0
    4360:	20 08 90    	mov.w     [w0+20], w0
    4362:	80 00 eb    	clr.w     w1
    4364:	11 08 98    	mov.w     w1, [w0+18]
        self->SCL->read = NULL;
    4366:	1e 00 78    	mov.w     [w14], w0
    4368:	20 08 90    	mov.w     [w0+20], w0
    436a:	80 00 eb    	clr.w     w1
    436c:	21 08 98    	mov.w     w1, [w0+20]
    } else {
        return; // At least one of SDA and SCL are being used by another 
                // peripheral
    }
    // Clip freq to be in allowable range of values
    if (freq<(FCY/(256.+(FCY/10e6))))
    436e:	18 c0 b3    	mov.b     #0x1, w8
    4370:	d2 fc 29    	mov.w     #0x9fcd, w2
    4372:	23 77 24    	mov.w     #0x4772, w3
    4374:	1e 00 90    	mov.w     [w14+2], w0
    4376:	ae 00 90    	mov.w     [w14+4], w1
    4378:	3b e8 07    	rcall     0x13f0 <___eqsf2> <___lesf2> <___ltsf2>
    437a:	00 00 e0    	cp0.w     w0
    437c:	01 00 35    	bra       LT, 0x4380 <.L5>
    437e:	00 44 eb    	clr.b     w8

00004380 <.L5>:
    4380:	08 04 e0    	cp0.b     w8
    4382:	04 00 32    	bra       Z, 0x438c <.L7>
        freq = FCY/(256.+(FCY/10e6));
    4384:	d0 fc 29    	mov.w     #0x9fcd, w0
    4386:	21 77 24    	mov.w     #0x4772, w1
    4388:	10 07 98    	mov.w     w0, [w14+2]
    438a:	21 07 98    	mov.w     w1, [w14+4]

0000438c <.L7>:
    if (freq>(FCY/(4.+(FCY/10e6))))
    438c:	18 c0 b3    	mov.b     #0x1, w8
    438e:	c2 2d 26    	mov.w     #0x62dc, w2
    4390:	e3 a2 24    	mov.w     #0x4a2e, w3
    4392:	1e 00 90    	mov.w     [w14+2], w0
    4394:	ae 00 90    	mov.w     [w14+4], w1
    4396:	2e e8 07    	rcall     0x13f4 <___gesf2> <___gtsf2>
    4398:	00 00 e0    	cp0.w     w0
    439a:	01 00 3c    	bra       GT, 0x439e <.L9>
    439c:	00 44 eb    	clr.b     w8

0000439e <.L9>:
    439e:	08 04 e0    	cp0.b     w8
    43a0:	04 00 32    	bra       Z, 0x43aa <.L10>
        freq = FCY/(4.+(FCY/10e6));
    43a2:	c0 2d 26    	mov.w     #0x62dc, w0
    43a4:	e1 a2 24    	mov.w     #0x4a2e, w1
    43a6:	10 07 98    	mov.w     w0, [w14+2]
    43a8:	21 07 98    	mov.w     w1, [w14+4]

000043aa <.L10>:
    // Compute BRG value to obtain closest value to that specified
    *(self->I2CxBRG) = (uint16_t)((FCY/freq)-(FCY/10e6)+0.5)-1;
    43aa:	1e 00 78    	mov.w     [w14], w0
    43ac:	20 04 90    	mov.w     [w0+4], w8
    43ae:	1e 01 90    	mov.w     [w14+2], w2
    43b0:	ae 01 90    	mov.w     [w14+4], w3
    43b2:	00 40 22    	mov.w     #0x2400, w0
    43b4:	41 b7 24    	mov.w     #0x4b74, w1
    43b6:	da e7 07    	rcall     0x136c <___divsf3>
    43b8:	d2 cc 2c    	mov.w     #0xcccd, w2
    43ba:	c3 fc 23    	mov.w     #0x3fcc, w3
    43bc:	79 e7 07    	rcall     0x12b0 <___subsf3>
    43be:	02 00 20    	mov.w     #0x0, w2
    43c0:	03 f0 23    	mov.w     #0x3f00, w3
    43c2:	77 e7 07    	rcall     0x12b2 <___addsf3>
    43c4:	19 e8 07    	rcall     0x13f8 <___fixunssfsi>
    43c6:	00 00 78    	mov.w     w0, w0
    43c8:	00 00 e9    	dec.w     w0, w0
    43ca:	00 0c 78    	mov.w     w0, [w8]
    bitset(self->I2CxCON, 15);  // Set I2Cx enable bit
    43cc:	1e 00 78    	mov.w     [w14], w0
    43ce:	30 00 90    	mov.w     [w0+6], w0
    43d0:	9e 00 78    	mov.w     [w14], w1
    43d2:	b1 00 90    	mov.w     [w1+6], w1
    43d4:	91 00 78    	mov.w     [w1], w1
    43d6:	01 f0 a0    	bset.w    w1, #0xf
    43d8:	01 08 78    	mov.w     w1, [w0]
    43da:	03 00 37    	bra       0x43e2 <.L3>

000043dc <.L11>:
    43dc:	00 00 00    	nop       
    43de:	01 00 37    	bra       0x43e2 <.L3>

000043e0 <.L12>:
    43e0:	00 00 00    	nop       

000043e2 <.L3>:
}
    43e2:	4f 04 78    	mov.w     [--w15], w8
    43e4:	00 80 fa    	ulnk      
    43e6:	00 00 06    	return    

000043e8 <_i2c_close>:

void i2c_close(_I2C *self) {
    43e8:	02 00 fa    	lnk       #0x2
    43ea:	00 0f 78    	mov.w     w0, [w14]
    *(self->I2CxCON) = 0;
    43ec:	1e 00 78    	mov.w     [w14], w0
    43ee:	30 00 90    	mov.w     [w0+6], w0
    43f0:	80 00 eb    	clr.w     w1
    43f2:	01 08 78    	mov.w     w1, [w0]
    *(self->I2CxSTAT) = 0;
    43f4:	1e 00 78    	mov.w     [w14], w0
    43f6:	40 00 90    	mov.w     [w0+8], w0
    43f8:	80 00 eb    	clr.w     w1
    43fa:	01 08 78    	mov.w     w1, [w0]
    if (self->SDA->owner==(void *)self) {
    43fc:	1e 00 78    	mov.w     [w14], w0
    43fe:	10 08 90    	mov.w     [w0+18], w0
    4400:	00 08 90    	mov.w     [w0+16], w0
    4402:	9e 0f 50    	sub.w     w0, [w14], [w15]
    4404:	07 00 3a    	bra       NZ, 0x4414 <.L14>
        pin_digitalIn(self->SDA);
    4406:	1e 00 78    	mov.w     [w14], w0
    4408:	10 08 90    	mov.w     [w0+18], w0
    440a:	c4 f9 07    	rcall     0x3794 <_pin_digitalIn> <.LFB5> <.LFE4>
        self->SDA->owner = NULL;
    440c:	1e 00 78    	mov.w     [w14], w0
    440e:	10 08 90    	mov.w     [w0+18], w0
    4410:	80 00 eb    	clr.w     w1
    4412:	01 08 98    	mov.w     w1, [w0+16]

00004414 <.L14>:
    }
    if (self->SCL->owner==(void *)self) {
    4414:	1e 00 78    	mov.w     [w14], w0
    4416:	20 08 90    	mov.w     [w0+20], w0
    4418:	00 08 90    	mov.w     [w0+16], w0
    441a:	9e 0f 50    	sub.w     w0, [w14], [w15]
    441c:	07 00 3a    	bra       NZ, 0x442c <.L13>
        pin_digitalIn(self->SCL);
    441e:	1e 00 78    	mov.w     [w14], w0
    4420:	20 08 90    	mov.w     [w0+20], w0
    4422:	b8 f9 07    	rcall     0x3794 <_pin_digitalIn> <.LFB5> <.LFE4>
        self->SCL->owner = NULL;
    4424:	1e 00 78    	mov.w     [w14], w0
    4426:	20 08 90    	mov.w     [w0+20], w0
    4428:	80 00 eb    	clr.w     w1
    442a:	01 08 98    	mov.w     w1, [w0+16]

0000442c <.L13>:
    }
}
    442c:	00 80 fa    	ulnk      
    442e:	00 00 06    	return    

00004430 <_i2c_start>:

void i2c_start(_I2C *self) {
    4430:	02 00 fa    	lnk       #0x2
    4432:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->I2CxCON, 0);   // Initiate a Start condition on I2Cx
    4434:	1e 00 78    	mov.w     [w14], w0
    4436:	30 00 90    	mov.w     [w0+6], w0
    4438:	9e 00 78    	mov.w     [w14], w1
    443a:	b1 00 90    	mov.w     [w1+6], w1
    443c:	91 00 78    	mov.w     [w1], w1
    443e:	01 00 a0    	bset.w    w1, #0x0
    4440:	01 08 78    	mov.w     w1, [w0]
    while (bitread(self->I2CxCON, 0)==1) {}     // Wait until Start condition
    4442:	00 00 00    	nop       

00004444 <.L17>:
    4444:	1e 00 78    	mov.w     [w14], w0
    4446:	30 00 90    	mov.w     [w0+6], w0
    4448:	10 00 78    	mov.w     [w0], w0
    444a:	61 00 60    	and.w     w0, #0x1, w0
    444c:	00 40 78    	mov.b     w0, w0
    444e:	00 04 e0    	cp0.b     w0
    4450:	f9 ff 3a    	bra       NZ, 0x4444 <.L17>
                                                //   clears
}
    4452:	00 80 fa    	ulnk      
    4454:	00 00 06    	return    

00004456 <_i2c_restart>:

void i2c_restart(_I2C *self) {
    4456:	02 00 fa    	lnk       #0x2
    4458:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->I2CxCON, 1);   // Initiate a Repeated Start condition on I2Cx
    445a:	1e 00 78    	mov.w     [w14], w0
    445c:	30 00 90    	mov.w     [w0+6], w0
    445e:	9e 00 78    	mov.w     [w14], w1
    4460:	b1 00 90    	mov.w     [w1+6], w1
    4462:	91 00 78    	mov.w     [w1], w1
    4464:	01 10 a0    	bset.w    w1, #0x1
    4466:	01 08 78    	mov.w     w1, [w0]
    while (bitread(self->I2CxCON, 1)==1) {}     // Wait until Repeated Start
    4468:	00 00 00    	nop       

0000446a <.L19>:
    446a:	1e 00 78    	mov.w     [w14], w0
    446c:	30 00 90    	mov.w     [w0+6], w0
    446e:	10 00 78    	mov.w     [w0], w0
    4470:	62 00 60    	and.w     w0, #0x2, w0
    4472:	00 00 e0    	cp0.w     w0
    4474:	fa ff 3a    	bra       NZ, 0x446a <.L19>
                                                //   condition clears
}
    4476:	00 80 fa    	ulnk      
    4478:	00 00 06    	return    

0000447a <_i2c_ack>:

void i2c_ack(_I2C *self) {
    447a:	02 00 fa    	lnk       #0x2
    447c:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->I2CxCON, 5); // Send ACK during Acknowledge
    447e:	1e 00 78    	mov.w     [w14], w0
    4480:	30 00 90    	mov.w     [w0+6], w0
    4482:	9e 00 78    	mov.w     [w14], w1
    4484:	b1 00 90    	mov.w     [w1+6], w1
    4486:	11 01 78    	mov.w     [w1], w2
    4488:	f1 fd 2f    	mov.w     #0xffdf, w1
    448a:	81 00 61    	and.w     w2, w1, w1
    448c:	01 08 78    	mov.w     w1, [w0]
    bitset(self->I2CxCON, 4);   // Initiate an Acknowledge condition on I2Cx
    448e:	1e 00 78    	mov.w     [w14], w0
    4490:	30 00 90    	mov.w     [w0+6], w0
    4492:	9e 00 78    	mov.w     [w14], w1
    4494:	b1 00 90    	mov.w     [w1+6], w1
    4496:	91 00 78    	mov.w     [w1], w1
    4498:	01 40 a0    	bset.w    w1, #0x4
    449a:	01 08 78    	mov.w     w1, [w0]
    while (bitread(self->I2CxCON, 4)==1) {}     // Wait until Acknowledge
    449c:	00 00 00    	nop       

0000449e <.L21>:
    449e:	1e 00 78    	mov.w     [w14], w0
    44a0:	30 00 90    	mov.w     [w0+6], w0
    44a2:	10 00 78    	mov.w     [w0], w0
    44a4:	70 00 60    	and.w     w0, #0x10, w0
    44a6:	00 00 e0    	cp0.w     w0
    44a8:	fa ff 3a    	bra       NZ, 0x449e <.L21>
                                                //   condition clears
}
    44aa:	00 80 fa    	ulnk      
    44ac:	00 00 06    	return    

000044ae <_i2c_nak>:

void i2c_nak(_I2C *self) {
    44ae:	02 00 fa    	lnk       #0x2
    44b0:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->I2CxCON, 5);   // Send NACK during Acknowledge
    44b2:	1e 00 78    	mov.w     [w14], w0
    44b4:	30 00 90    	mov.w     [w0+6], w0
    44b6:	9e 00 78    	mov.w     [w14], w1
    44b8:	b1 00 90    	mov.w     [w1+6], w1
    44ba:	91 00 78    	mov.w     [w1], w1
    44bc:	01 50 a0    	bset.w    w1, #0x5
    44be:	01 08 78    	mov.w     w1, [w0]
    bitset(self->I2CxCON, 4);   // Initiate an Acknowldege condition on I2Cx
    44c0:	1e 00 78    	mov.w     [w14], w0
    44c2:	30 00 90    	mov.w     [w0+6], w0
    44c4:	9e 00 78    	mov.w     [w14], w1
    44c6:	b1 00 90    	mov.w     [w1+6], w1
    44c8:	91 00 78    	mov.w     [w1], w1
    44ca:	01 40 a0    	bset.w    w1, #0x4
    44cc:	01 08 78    	mov.w     w1, [w0]
    while (bitread(self->I2CxCON, 4)==1) {}     // Wait until Acknowledge
    44ce:	00 00 00    	nop       

000044d0 <.L23>:
    44d0:	1e 00 78    	mov.w     [w14], w0
    44d2:	30 00 90    	mov.w     [w0+6], w0
    44d4:	10 00 78    	mov.w     [w0], w0
    44d6:	70 00 60    	and.w     w0, #0x10, w0
    44d8:	00 00 e0    	cp0.w     w0
    44da:	fa ff 3a    	bra       NZ, 0x44d0 <.L23>
                                                //   condition clears
}
    44dc:	00 80 fa    	ulnk      
    44de:	00 00 06    	return    

000044e0 <_i2c_stop>:

void i2c_stop(_I2C *self) {
    44e0:	02 00 fa    	lnk       #0x2
    44e2:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->I2CxCON, 2);   // Initiate a Stop condition on I2Cx
    44e4:	1e 00 78    	mov.w     [w14], w0
    44e6:	30 00 90    	mov.w     [w0+6], w0
    44e8:	9e 00 78    	mov.w     [w14], w1
    44ea:	b1 00 90    	mov.w     [w1+6], w1
    44ec:	91 00 78    	mov.w     [w1], w1
    44ee:	01 20 a0    	bset.w    w1, #0x2
    44f0:	01 08 78    	mov.w     w1, [w0]
    while (bitread(self->I2CxCON, 2)==1) {}     // Wait until Stop condition
    44f2:	00 00 00    	nop       

000044f4 <.L25>:
    44f4:	1e 00 78    	mov.w     [w14], w0
    44f6:	30 00 90    	mov.w     [w0+6], w0
    44f8:	10 00 78    	mov.w     [w0], w0
    44fa:	64 00 60    	and.w     w0, #0x4, w0
    44fc:	00 00 e0    	cp0.w     w0
    44fe:	fa ff 3a    	bra       NZ, 0x44f4 <.L25>
                                                //   clears
}
    4500:	00 80 fa    	ulnk      
    4502:	00 00 06    	return    

00004504 <_i2c_idle>:

void i2c_idle(_I2C *self) {
    4504:	02 00 fa    	lnk       #0x2
    4506:	00 0f 78    	mov.w     w0, [w14]
    while (((*(self->I2CxCON))&0x1F) ||         // Wait until Start, Restart, 
    4508:	00 00 00    	nop       

0000450a <.L27>:
    450a:	1e 00 78    	mov.w     [w14], w0
    450c:	30 00 90    	mov.w     [w0+6], w0
    450e:	10 00 78    	mov.w     [w0], w0
    4510:	7f 00 60    	and.w     w0, #0x1f, w0
    4512:	00 00 e0    	cp0.w     w0
    4514:	fa ff 3a    	bra       NZ, 0x450a <.L27>
           (bitread(self->I2CxSTAT, 14)==1)) {} //   Stop, Receive, Acknowledge, 
    4516:	1e 00 78    	mov.w     [w14], w0
    4518:	40 00 90    	mov.w     [w0+8], w0
    451a:	90 00 78    	mov.w     [w0], w1
    451c:	00 00 24    	mov.w     #0x4000, w0
    451e:	00 80 60    	and.w     w1, w0, w0
    4520:	00 00 e0    	cp0.w     w0
    4522:	f3 ff 3a    	bra       NZ, 0x450a <.L27>
                                                //   and Transmit conditions
                                                //   are all clear on I2Cx
}
    4524:	00 80 fa    	ulnk      
    4526:	00 00 06    	return    

00004528 <_i2c_putc>:

uint8_t i2c_putc(_I2C *self, uint8_t ch) {
    4528:	04 00 fa    	lnk       #0x4
    452a:	00 0f 78    	mov.w     w0, [w14]
    452c:	21 47 98    	mov.b     w1, [w14+2]
    bitclear(self->IFSy, self->MI2CxIF);    // Lower master I2Cx interrupt flag
    452e:	1e 00 78    	mov.w     [w14], w0
    4530:	70 00 90    	mov.w     [w0+14], w0
    4532:	9e 00 78    	mov.w     [w14], w1
    4534:	f1 00 90    	mov.w     [w1+14], w1
    4536:	11 01 78    	mov.w     [w1], w2
    4538:	9e 00 78    	mov.w     [w14], w1
    453a:	81 50 90    	mov.b     [w1+16], w1
    453c:	81 80 fb    	ze        w1, w1
    453e:	13 00 20    	mov.w     #0x1, w3
    4540:	81 18 dd    	sl.w      w3, w1, w1
    4542:	81 80 ea    	com.w     w1, w1
    4544:	81 00 61    	and.w     w2, w1, w1
    4546:	01 08 78    	mov.w     w1, [w0]
    *(self->I2CxTRN) = (uint16_t)ch;        // Initiate I2Cx data transmission
    4548:	1e 00 78    	mov.w     [w14], w0
    454a:	10 00 90    	mov.w     [w0+2], w0
    454c:	ae 40 90    	mov.b     [w14+2], w1
    454e:	81 80 fb    	ze        w1, w1
    4550:	01 08 78    	mov.w     w1, [w0]
    while (bitread(self->I2CxSTAT, 0)==1) {}    // Wait until tranmit completes 
    4552:	00 00 00    	nop       

00004554 <.L29>:
    4554:	1e 00 78    	mov.w     [w14], w0
    4556:	40 00 90    	mov.w     [w0+8], w0
    4558:	10 00 78    	mov.w     [w0], w0
    455a:	61 00 60    	and.w     w0, #0x1, w0
    455c:	00 40 78    	mov.b     w0, w0
    455e:	00 04 e0    	cp0.b     w0
    4560:	f9 ff 3a    	bra       NZ, 0x4554 <.L29>
                                                //   (8 clock cycles on SCLx)
    while (bitread(self->IFSy, self->MI2CxIF)==0) {}    // Wait for 9th clock
    4562:	00 00 00    	nop       

00004564 <.L30>:
    4564:	1e 00 78    	mov.w     [w14], w0
    4566:	70 00 90    	mov.w     [w0+14], w0
    4568:	90 00 78    	mov.w     [w0], w1
    456a:	1e 00 78    	mov.w     [w14], w0
    456c:	00 50 90    	mov.b     [w0+16], w0
    456e:	00 80 fb    	ze        w0, w0
    4570:	12 00 20    	mov.w     #0x1, w2
    4572:	00 10 dd    	sl.w      w2, w0, w0
    4574:	00 80 60    	and.w     w1, w0, w0
    4576:	00 00 e0    	cp0.w     w0
    4578:	f5 ff 32    	bra       Z, 0x4564 <.L30>
                                                        //   cycle on SCLx
    bitclear(self->IFSy, self->MI2CxIF);    // Lower master I2Cx interrupt flag
    457a:	1e 00 78    	mov.w     [w14], w0
    457c:	70 00 90    	mov.w     [w0+14], w0
    457e:	9e 00 78    	mov.w     [w14], w1
    4580:	f1 00 90    	mov.w     [w1+14], w1
    4582:	11 01 78    	mov.w     [w1], w2
    4584:	9e 00 78    	mov.w     [w14], w1
    4586:	81 50 90    	mov.b     [w1+16], w1
    4588:	81 80 fb    	ze        w1, w1
    458a:	13 00 20    	mov.w     #0x1, w3
    458c:	81 18 dd    	sl.w      w3, w1, w1
    458e:	81 80 ea    	com.w     w1, w1
    4590:	81 00 61    	and.w     w2, w1, w1
    4592:	01 08 78    	mov.w     w1, [w0]
    return bitread(self->I2CxSTAT, 15);     // Return ACKSTAT bit of I2CxSTAT
    4594:	1e 00 78    	mov.w     [w14], w0
    4596:	40 00 90    	mov.w     [w0+8], w0
    4598:	10 00 78    	mov.w     [w0], w0
    459a:	4f 00 de    	lsr.w     w0, #0xf, w0
    459c:	00 40 78    	mov.b     w0, w0
}
    459e:	00 80 fa    	ulnk      
    45a0:	00 00 06    	return    

000045a2 <_i2c_getc>:

uint8_t i2c_getc(_I2C *self) {
    45a2:	02 00 fa    	lnk       #0x2
    45a4:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->I2CxCON, 3);       // Initiate a Receive on I2Cx
    45a6:	1e 00 78    	mov.w     [w14], w0
    45a8:	30 00 90    	mov.w     [w0+6], w0
    45aa:	9e 00 78    	mov.w     [w14], w1
    45ac:	b1 00 90    	mov.w     [w1+6], w1
    45ae:	91 00 78    	mov.w     [w1], w1
    45b0:	01 30 a0    	bset.w    w1, #0x3
    45b2:	01 08 78    	mov.w     w1, [w0]
    while (bitread(self->I2CxCON, 3)==1) {}     // Wait until Receive condition 
    45b4:	00 00 00    	nop       

000045b6 <.L32>:
    45b6:	1e 00 78    	mov.w     [w14], w0
    45b8:	30 00 90    	mov.w     [w0+6], w0
    45ba:	10 00 78    	mov.w     [w0], w0
    45bc:	68 00 60    	and.w     w0, #0x8, w0
    45be:	00 00 e0    	cp0.w     w0
    45c0:	fa ff 3a    	bra       NZ, 0x45b6 <.L32>
                                                //   clears on I2Cx
    bitclear(self->I2CxSTAT, 6);                // Clear I2COV bit
    45c2:	1e 00 78    	mov.w     [w14], w0
    45c4:	40 00 90    	mov.w     [w0+8], w0
    45c6:	9e 00 78    	mov.w     [w14], w1
    45c8:	c1 00 90    	mov.w     [w1+8], w1
    45ca:	11 01 78    	mov.w     [w1], w2
    45cc:	f1 fb 2f    	mov.w     #0xffbf, w1
    45ce:	81 00 61    	and.w     w2, w1, w1
    45d0:	01 08 78    	mov.w     w1, [w0]
    return (uint8_t)(*(self->I2CxRCV));         // Return the received byte
    45d2:	1e 00 78    	mov.w     [w14], w0
    45d4:	10 00 78    	mov.w     [w0], w0
    45d6:	10 00 78    	mov.w     [w0], w0
    45d8:	00 40 78    	mov.b     w0, w0
}
    45da:	00 80 fa    	ulnk      
    45dc:	00 00 06    	return    

000045de <_main>:
    45de:	d6 00 fa    	lnk       #0xd6
    45e0:	00 10 20    	mov.w     #0x100, w0
    45e2:	20 3a 88    	mov.w     w0, 0x744
    45e4:	6d 01 07    	rcall     0x48c0 <_init_ui> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    45e6:	96 f7 07    	rcall     0x3514 <_init_pin> <.LFB3> <.LFE2>
    45e8:	db eb 07    	rcall     0x1da0 <_init_uart> <.LFB15> <.LFE14>
    45ea:	0e fe 07    	rcall     0x4208 <_init_i2c> <.L0> <.LFB0> <.LFE15> <.Letext0> <.Ltext0>
    45ec:	dc f9 07    	rcall     0x39a6 <_init_timer> <.LFB6> <.LFE0>
    45ee:	e0 c8 20    	mov.w     #0xc8e, w0
    45f0:	c3 fb 07    	rcall     0x3d78 <_timer_initDelayMicro> <.LFB23> <.LFE22>
    45f2:	30 c0 b3    	mov.b     #0x3, w0
    45f4:	49 fc 07    	rcall     0x3e88 <_init_lcd> <.LFB4> <.LFE3>
    45f6:	00 d6 20    	mov.w     #0xd60, w0
    45f8:	1e fd 07    	rcall     0x4036 <_lcd_clear> <.LFB8> <.LFE7>
    45fa:	50 d6 20    	mov.w     #0xd65, w0
    45fc:	1c fd 07    	rcall     0x4036 <_lcd_clear> <.LFB8> <.LFE7>
    45fe:	a0 d6 20    	mov.w     #0xd6a, w0
    4600:	1a fd 07    	rcall     0x4036 <_lcd_clear> <.LFB8> <.LFE7>
    4602:	80 a4 29    	mov.w     #0x9a48, w0
    4604:	f7 e7 07    	rcall     0x15f4 <_puts>
    4606:	60 a5 29    	mov.w     #0x9a56, w0
    4608:	ec 00 47    	add.w     w14, #0xc, w1
    460a:	0f 00 09    	repeat    #0xf
    460c:	b0 58 78    	mov.b     [w0++], [w1++]
    460e:	00 01 b1    	sub.w     #0x10, w0
    4610:	00 40 eb    	clr.b     w0
    4612:	40 5f 98    	mov.b     w0, [w14+28]
    4614:	6c 0f 47    	add.w     w14, #0xc, [w14]
    4616:	70 a6 29    	mov.w     #0x9a67, w0
    4618:	fd 00 47    	add.w     w14, #0x1d, w1
    461a:	0f 00 09    	repeat    #0xf
    461c:	b0 58 78    	mov.b     [w0++], [w1++]
    461e:	00 01 b1    	sub.w     #0x10, w0
    4620:	00 40 eb    	clr.b     w0
    4622:	50 6f 98    	mov.b     w0, [w14+45]
    4624:	7d 00 47    	add.w     w14, #0x1d, w0
    4626:	10 07 98    	mov.w     w0, [w14+2]
    4628:	80 a7 29    	mov.w     #0x9a78, w0
    462a:	e1 02 20    	mov.w     #0x2e, w1
    462c:	81 00 47    	add.w     w14, w1, w1
    462e:	0f 00 09    	repeat    #0xf
    4630:	b0 58 78    	mov.b     [w0++], [w1++]
    4632:	00 01 b1    	sub.w     #0x10, w0
    4634:	00 40 eb    	clr.b     w0
    4636:	60 7f 98    	mov.b     w0, [w14+62]
    4638:	e0 02 20    	mov.w     #0x2e, w0
    463a:	0e 00 40    	add.w     w0, w14, w0
    463c:	20 07 98    	mov.w     w0, [w14+4]
    463e:	90 a8 29    	mov.w     #0x9a89, w0
    4640:	f1 03 20    	mov.w     #0x3f, w1
    4642:	81 00 47    	add.w     w14, w1, w1
    4644:	0f 00 09    	repeat    #0xf
    4646:	b0 58 78    	mov.b     [w0++], [w1++]
    4648:	00 01 b1    	sub.w     #0x10, w0
    464a:	00 40 eb    	clr.b     w0
    464c:	70 cf 98    	mov.b     w0, [w14+79]
    464e:	f0 03 20    	mov.w     #0x3f, w0
    4650:	0e 00 40    	add.w     w0, w14, w0
    4652:	30 07 98    	mov.w     w0, [w14+6]
    4654:	a0 a9 29    	mov.w     #0x9a9a, w0
    4656:	01 05 20    	mov.w     #0x50, w1
    4658:	81 00 47    	add.w     w14, w1, w1
    465a:	0f 00 09    	repeat    #0xf
    465c:	b0 58 78    	mov.b     [w0++], [w1++]
    465e:	00 01 b1    	sub.w     #0x10, w0
    4660:	00 40 eb    	clr.b     w0
    4662:	00 e7 98    	mov.b     w0, [w14+96]
    4664:	00 05 20    	mov.w     #0x50, w0
    4666:	0e 00 40    	add.w     w0, w14, w0
    4668:	40 07 98    	mov.w     w0, [w14+8]
    466a:	b0 aa 29    	mov.w     #0x9aab, w0
    466c:	11 06 20    	mov.w     #0x61, w1
    466e:	81 00 47    	add.w     w14, w1, w1
    4670:	0b 00 09    	repeat    #0xb
    4672:	b0 58 78    	mov.b     [w0++], [w1++]
    4674:	c0 00 b1    	sub.w     #0xc, w0
    4676:	8e 00 78    	mov.w     w14, w1
    4678:	d1 06 b0    	add.w     #0x6d, w1
    467a:	04 00 09    	repeat    #0x4
    467c:	80 58 eb    	clr.b     [w1++]
    467e:	10 06 20    	mov.w     #0x61, w0
    4680:	0e 00 40    	add.w     w0, w14, w0
    4682:	50 07 98    	mov.w     w0, [w14+10]
    4684:	a2 00 20    	mov.w     #0xa, w2
    4686:	21 00 20    	mov.w     #0x2, w1
    4688:	1e 00 78    	mov.w     [w14], w0
    468a:	da f2 07    	rcall     0x2c40 <_strm_Scramble> <.LFB7> <.LFE6>
    468c:	a2 00 20    	mov.w     #0xa, w2
    468e:	21 00 20    	mov.w     #0x2, w1
    4690:	1e 00 90    	mov.w     [w14+2], w0
    4692:	d6 f2 07    	rcall     0x2c40 <_strm_Scramble> <.LFB7> <.LFE6>
    4694:	a2 00 20    	mov.w     #0xa, w2
    4696:	21 00 20    	mov.w     #0x2, w1
    4698:	2e 00 90    	mov.w     [w14+4], w0
    469a:	d2 f2 07    	rcall     0x2c40 <_strm_Scramble> <.LFB7> <.LFE6>
    469c:	a2 00 20    	mov.w     #0xa, w2
    469e:	21 00 20    	mov.w     #0x2, w1
    46a0:	3e 00 90    	mov.w     [w14+6], w0
    46a2:	ce f2 07    	rcall     0x2c40 <_strm_Scramble> <.LFB7> <.LFE6>
    46a4:	a2 00 20    	mov.w     #0xa, w2
    46a6:	21 00 20    	mov.w     #0x2, w1
    46a8:	4e 00 90    	mov.w     [w14+8], w0
    46aa:	ca f2 07    	rcall     0x2c40 <_strm_Scramble> <.LFB7> <.LFE6>
    46ac:	a2 00 20    	mov.w     #0xa, w2
    46ae:	21 00 20    	mov.w     #0x2, w1
    46b0:	5e 00 90    	mov.w     [w14+10], w0
    46b2:	c6 f2 07    	rcall     0x2c40 <_strm_Scramble> <.LFB7> <.LFE6>
    46b4:	1e 01 90    	mov.w     [w14+2], w2
    46b6:	9e 00 78    	mov.w     [w14], w1
    46b8:	00 d6 20    	mov.w     #0xd60, w0
    46ba:	19 fd 07    	rcall     0x40ee <_lcd_print2> <.LFB13> <.LFE12>
    46bc:	3e 01 90    	mov.w     [w14+6], w2
    46be:	ae 00 90    	mov.w     [w14+4], w1
    46c0:	50 d6 20    	mov.w     #0xd65, w0
    46c2:	15 fd 07    	rcall     0x40ee <_lcd_print2> <.LFB13> <.LFE12>
    46c4:	5e 01 90    	mov.w     [w14+10], w2
    46c6:	ce 00 90    	mov.w     [w14+8], w1
    46c8:	a0 d6 20    	mov.w     #0xd6a, w0
    46ca:	11 fd 07    	rcall     0x40ee <_lcd_print2> <.LFB13> <.LFE12>
    46cc:	8e 00 78    	mov.w     w14, w1
    46ce:	21 07 b0    	add.w     #0x72, w1
    46d0:	30 00 09    	repeat    #0x30
    46d2:	80 18 eb    	clr.w     [w1++]
    46d4:	80 58 eb    	clr.b     [w1++]
    46d6:	00 03 20    	mov.w     #0x30, w0
    46d8:	10 3f 98    	mov.w     w0, [w14+114]
    46da:	00 40 eb    	clr.b     w0
    46dc:	40 f7 98    	mov.b     w0, [w14+116]
    46de:	50 07 20    	mov.w     #0x75, w0
    46e0:	0e 00 40    	add.w     w0, w14, w0
    46e2:	11 c3 b3    	mov.b     #0x31, w1
    46e4:	01 48 78    	mov.b     w1, [w0]
    46e6:	00 00 e8    	inc.w     w0, w0
    46e8:	80 40 eb    	clr.b     w1
    46ea:	01 48 78    	mov.b     w1, [w0]
    46ec:	00 00 e8    	inc.w     w0, w0
    46ee:	80 40 eb    	clr.b     w1
    46f0:	01 48 78    	mov.b     w1, [w0]
    46f2:	00 00 e8    	inc.w     w0, w0
    46f4:	20 03 20    	mov.w     #0x32, w0
    46f6:	40 3f 98    	mov.w     w0, [w14+120]
    46f8:	00 40 eb    	clr.b     w0
    46fa:	20 ff 98    	mov.b     w0, [w14+122]
    46fc:	b0 07 20    	mov.w     #0x7b, w0
    46fe:	0e 00 40    	add.w     w0, w14, w0
    4700:	31 c3 b3    	mov.b     #0x33, w1
    4702:	01 48 78    	mov.b     w1, [w0]
    4704:	00 00 e8    	inc.w     w0, w0
    4706:	80 40 eb    	clr.b     w1
    4708:	01 48 78    	mov.b     w1, [w0]
    470a:	00 00 e8    	inc.w     w0, w0
    470c:	80 40 eb    	clr.b     w1
    470e:	01 48 78    	mov.b     w1, [w0]
    4710:	00 00 e8    	inc.w     w0, w0
    4712:	40 03 20    	mov.w     #0x34, w0
    4714:	70 3f 98    	mov.w     w0, [w14+126]
    4716:	00 40 eb    	clr.b     w0
    4718:	00 47 99    	mov.b     w0, [w14+128]
    471a:	10 08 20    	mov.w     #0x81, w0
    471c:	0e 00 40    	add.w     w0, w14, w0
    471e:	51 c3 b3    	mov.b     #0x35, w1
    4720:	01 48 78    	mov.b     w1, [w0]
    4722:	00 00 e8    	inc.w     w0, w0
    4724:	80 40 eb    	clr.b     w1
    4726:	01 48 78    	mov.b     w1, [w0]
    4728:	00 00 e8    	inc.w     w0, w0
    472a:	80 40 eb    	clr.b     w1
    472c:	01 48 78    	mov.b     w1, [w0]
    472e:	00 00 e8    	inc.w     w0, w0
    4730:	60 03 20    	mov.w     #0x36, w0
    4732:	20 87 98    	mov.w     w0, [w14+132]
    4734:	00 40 eb    	clr.b     w0
    4736:	60 47 99    	mov.b     w0, [w14+134]
    4738:	70 08 20    	mov.w     #0x87, w0
    473a:	0e 00 40    	add.w     w0, w14, w0
    473c:	71 c3 b3    	mov.b     #0x37, w1
    473e:	01 48 78    	mov.b     w1, [w0]
    4740:	00 00 e8    	inc.w     w0, w0
    4742:	80 40 eb    	clr.b     w1
    4744:	01 48 78    	mov.b     w1, [w0]
    4746:	00 00 e8    	inc.w     w0, w0
    4748:	80 40 eb    	clr.b     w1
    474a:	01 48 78    	mov.b     w1, [w0]
    474c:	00 00 e8    	inc.w     w0, w0
    474e:	80 03 20    	mov.w     #0x38, w0
    4750:	50 87 98    	mov.w     w0, [w14+138]
    4752:	00 40 eb    	clr.b     w0
    4754:	40 4f 99    	mov.b     w0, [w14+140]
    4756:	d0 08 20    	mov.w     #0x8d, w0
    4758:	0e 00 40    	add.w     w0, w14, w0
    475a:	91 c3 b3    	mov.b     #0x39, w1
    475c:	01 48 78    	mov.b     w1, [w0]
    475e:	00 00 e8    	inc.w     w0, w0
    4760:	80 40 eb    	clr.b     w1
    4762:	01 48 78    	mov.b     w1, [w0]
    4764:	00 00 e8    	inc.w     w0, w0
    4766:	80 40 eb    	clr.b     w1
    4768:	01 48 78    	mov.b     w1, [w0]
    476a:	00 00 e8    	inc.w     w0, w0
    476c:	10 03 23    	mov.w     #0x3031, w0
    476e:	00 8f 98    	mov.w     w0, [w14+144]
    4770:	00 40 eb    	clr.b     w0
    4772:	20 57 99    	mov.b     w0, [w14+146]
    4774:	30 09 20    	mov.w     #0x93, w0
    4776:	0e 00 40    	add.w     w0, w14, w0
    4778:	11 c3 b3    	mov.b     #0x31, w1
    477a:	01 48 78    	mov.b     w1, [w0]
    477c:	00 00 e8    	inc.w     w0, w0
    477e:	11 c3 b3    	mov.b     #0x31, w1
    4780:	01 48 78    	mov.b     w1, [w0]
    4782:	00 00 e8    	inc.w     w0, w0
    4784:	80 40 eb    	clr.b     w1
    4786:	01 48 78    	mov.b     w1, [w0]
    4788:	00 00 e8    	inc.w     w0, w0
    478a:	10 23 23    	mov.w     #0x3231, w0
    478c:	30 8f 98    	mov.w     w0, [w14+150]
    478e:	00 40 eb    	clr.b     w0
    4790:	00 5f 99    	mov.b     w0, [w14+152]
    4792:	90 09 20    	mov.w     #0x99, w0
    4794:	0e 00 40    	add.w     w0, w14, w0
    4796:	11 c3 b3    	mov.b     #0x31, w1
    4798:	01 48 78    	mov.b     w1, [w0]
    479a:	00 00 e8    	inc.w     w0, w0
    479c:	31 c3 b3    	mov.b     #0x33, w1
    479e:	01 48 78    	mov.b     w1, [w0]
    47a0:	00 00 e8    	inc.w     w0, w0
    47a2:	80 40 eb    	clr.b     w1
    47a4:	01 48 78    	mov.b     w1, [w0]
    47a6:	00 00 e8    	inc.w     w0, w0
    47a8:	10 43 23    	mov.w     #0x3431, w0
    47aa:	60 8f 98    	mov.w     w0, [w14+156]
    47ac:	00 40 eb    	clr.b     w0
    47ae:	60 5f 99    	mov.b     w0, [w14+158]
    47b0:	f0 09 20    	mov.w     #0x9f, w0
    47b2:	0e 00 40    	add.w     w0, w14, w0
    47b4:	11 c3 b3    	mov.b     #0x31, w1
    47b6:	01 48 78    	mov.b     w1, [w0]
    47b8:	00 00 e8    	inc.w     w0, w0
    47ba:	51 c3 b3    	mov.b     #0x35, w1
    47bc:	01 48 78    	mov.b     w1, [w0]
    47be:	00 00 e8    	inc.w     w0, w0
    47c0:	80 40 eb    	clr.b     w1
    47c2:	01 48 78    	mov.b     w1, [w0]
    47c4:	00 00 e8    	inc.w     w0, w0
    47c6:	10 63 23    	mov.w     #0x3631, w0
    47c8:	10 97 98    	mov.w     w0, [w14+162]
    47ca:	00 40 eb    	clr.b     w0
    47cc:	40 67 99    	mov.b     w0, [w14+164]
    47ce:	50 0a 20    	mov.w     #0xa5, w0
    47d0:	0e 00 40    	add.w     w0, w14, w0
    47d2:	11 c3 b3    	mov.b     #0x31, w1
    47d4:	01 48 78    	mov.b     w1, [w0]
    47d6:	00 00 e8    	inc.w     w0, w0
    47d8:	71 c3 b3    	mov.b     #0x37, w1
    47da:	01 48 78    	mov.b     w1, [w0]
    47dc:	00 00 e8    	inc.w     w0, w0
    47de:	80 40 eb    	clr.b     w1
    47e0:	01 48 78    	mov.b     w1, [w0]
    47e2:	00 00 e8    	inc.w     w0, w0
    47e4:	10 83 23    	mov.w     #0x3831, w0
    47e6:	40 97 98    	mov.w     w0, [w14+168]
    47e8:	00 40 eb    	clr.b     w0
    47ea:	20 6f 99    	mov.b     w0, [w14+170]
    47ec:	b0 0a 20    	mov.w     #0xab, w0
    47ee:	0e 00 40    	add.w     w0, w14, w0
    47f0:	11 c3 b3    	mov.b     #0x31, w1
    47f2:	01 48 78    	mov.b     w1, [w0]
    47f4:	00 00 e8    	inc.w     w0, w0
    47f6:	91 c3 b3    	mov.b     #0x39, w1
    47f8:	01 48 78    	mov.b     w1, [w0]
    47fa:	00 00 e8    	inc.w     w0, w0
    47fc:	80 40 eb    	clr.b     w1
    47fe:	01 48 78    	mov.b     w1, [w0]
    4800:	00 00 e8    	inc.w     w0, w0
    4802:	20 03 23    	mov.w     #0x3032, w0
    4804:	70 97 98    	mov.w     w0, [w14+174]
    4806:	00 40 eb    	clr.b     w0
    4808:	00 77 99    	mov.b     w0, [w14+176]
    480a:	10 0b 20    	mov.w     #0xb1, w0
    480c:	0e 00 40    	add.w     w0, w14, w0
    480e:	21 c3 b3    	mov.b     #0x32, w1
    4810:	01 48 78    	mov.b     w1, [w0]
    4812:	00 00 e8    	inc.w     w0, w0
    4814:	11 c3 b3    	mov.b     #0x31, w1
    4816:	01 48 78    	mov.b     w1, [w0]
    4818:	00 00 e8    	inc.w     w0, w0
    481a:	80 40 eb    	clr.b     w1
    481c:	01 48 78    	mov.b     w1, [w0]
    481e:	00 00 e8    	inc.w     w0, w0
    4820:	20 23 23    	mov.w     #0x3232, w0
    4822:	20 9f 98    	mov.w     w0, [w14+180]
    4824:	00 40 eb    	clr.b     w0
    4826:	60 77 99    	mov.b     w0, [w14+182]
    4828:	70 0b 20    	mov.w     #0xb7, w0
    482a:	0e 00 40    	add.w     w0, w14, w0
    482c:	21 c3 b3    	mov.b     #0x32, w1
    482e:	01 48 78    	mov.b     w1, [w0]
    4830:	00 00 e8    	inc.w     w0, w0
    4832:	31 c3 b3    	mov.b     #0x33, w1
    4834:	01 48 78    	mov.b     w1, [w0]
    4836:	00 00 e8    	inc.w     w0, w0
    4838:	80 40 eb    	clr.b     w1
    483a:	01 48 78    	mov.b     w1, [w0]
    483c:	00 00 e8    	inc.w     w0, w0
    483e:	20 43 23    	mov.w     #0x3432, w0
    4840:	50 9f 98    	mov.w     w0, [w14+186]
    4842:	00 40 eb    	clr.b     w0
    4844:	40 7f 99    	mov.b     w0, [w14+188]
    4846:	d0 0b 20    	mov.w     #0xbd, w0
    4848:	0e 00 40    	add.w     w0, w14, w0
    484a:	21 c3 b3    	mov.b     #0x32, w1
    484c:	01 48 78    	mov.b     w1, [w0]
    484e:	00 00 e8    	inc.w     w0, w0
    4850:	51 c3 b3    	mov.b     #0x35, w1
    4852:	01 48 78    	mov.b     w1, [w0]
    4854:	00 00 e8    	inc.w     w0, w0
    4856:	80 40 eb    	clr.b     w1
    4858:	01 48 78    	mov.b     w1, [w0]
    485a:	00 00 e8    	inc.w     w0, w0
    485c:	20 63 23    	mov.w     #0x3632, w0
    485e:	00 a7 98    	mov.w     w0, [w14+192]
    4860:	00 40 eb    	clr.b     w0
    4862:	20 c7 99    	mov.b     w0, [w14+194]
    4864:	30 0c 20    	mov.w     #0xc3, w0
    4866:	0e 00 40    	add.w     w0, w14, w0
    4868:	21 c3 b3    	mov.b     #0x32, w1
    486a:	01 48 78    	mov.b     w1, [w0]
    486c:	00 00 e8    	inc.w     w0, w0
    486e:	71 c3 b3    	mov.b     #0x37, w1
    4870:	01 48 78    	mov.b     w1, [w0]
    4872:	00 00 e8    	inc.w     w0, w0
    4874:	80 40 eb    	clr.b     w1
    4876:	01 48 78    	mov.b     w1, [w0]
    4878:	00 00 e8    	inc.w     w0, w0
    487a:	20 83 23    	mov.w     #0x3832, w0
    487c:	30 a7 98    	mov.w     w0, [w14+198]
    487e:	00 40 eb    	clr.b     w0
    4880:	00 cf 99    	mov.b     w0, [w14+200]
    4882:	90 0c 20    	mov.w     #0xc9, w0
    4884:	0e 00 40    	add.w     w0, w14, w0
    4886:	21 c3 b3    	mov.b     #0x32, w1
    4888:	01 48 78    	mov.b     w1, [w0]
    488a:	00 00 e8    	inc.w     w0, w0
    488c:	91 c3 b3    	mov.b     #0x39, w1
    488e:	01 48 78    	mov.b     w1, [w0]
    4890:	00 00 e8    	inc.w     w0, w0
    4892:	80 40 eb    	clr.b     w1
    4894:	01 48 78    	mov.b     w1, [w0]
    4896:	00 00 e8    	inc.w     w0, w0
    4898:	30 03 23    	mov.w     #0x3033, w0
    489a:	60 a7 98    	mov.w     w0, [w14+204]
    489c:	00 40 eb    	clr.b     w0
    489e:	60 cf 99    	mov.b     w0, [w14+206]
    48a0:	f0 0c 20    	mov.w     #0xcf, w0
    48a2:	0e 00 40    	add.w     w0, w14, w0
    48a4:	31 c3 b3    	mov.b     #0x33, w1
    48a6:	01 48 78    	mov.b     w1, [w0]
    48a8:	00 00 e8    	inc.w     w0, w0
    48aa:	11 c3 b3    	mov.b     #0x31, w1
    48ac:	01 48 78    	mov.b     w1, [w0]
    48ae:	00 00 e8    	inc.w     w0, w0
    48b0:	80 40 eb    	clr.b     w1
    48b2:	01 48 78    	mov.b     w1, [w0]
    48b4:	00 00 e8    	inc.w     w0, w0
    48b6:	30 23 23    	mov.w     #0x3233, w0
    48b8:	10 af 98    	mov.w     w0, [w14+210]
    48ba:	00 40 eb    	clr.b     w0
    48bc:	40 d7 99    	mov.b     w0, [w14+212]

000048be <.L2>:
    48be:	ff ff 37    	bra       .

000048c0 <_init_ui>:
    48c0:	00 00 fa    	lnk       #0x0
    48c2:	74 c0 b3    	mov.b     #0x7, w4
    48c4:	63 4e 20    	mov.w     #0x4e6, w3
    48c6:	82 2d 20    	mov.w     #0x2d8, w2
    48c8:	a1 2d 20    	mov.w     #0x2da, w1
    48ca:	00 80 20    	mov.w     #0x800, w0
    48cc:	20 00 07    	rcall     0x490e <_led_init> <.LFB1> <.LFE0>
    48ce:	00 42 eb    	clr.b     w4
    48d0:	a3 4e 20    	mov.w     #0x4ea, w3
    48d2:	82 2e 20    	mov.w     #0x2e8, w2
    48d4:	a1 2e 20    	mov.w     #0x2ea, w1
    48d6:	80 80 20    	mov.w     #0x808, w0
    48d8:	1a 00 07    	rcall     0x490e <_led_init> <.LFB1> <.LFE0>
    48da:	14 c0 b3    	mov.b     #0x1, w4
    48dc:	a3 4e 20    	mov.w     #0x4ea, w3
    48de:	82 2e 20    	mov.w     #0x2e8, w2
    48e0:	a1 2e 20    	mov.w     #0x2ea, w1
    48e2:	00 81 20    	mov.w     #0x810, w0
    48e4:	14 00 07    	rcall     0x490e <_led_init> <.LFB1> <.LFE0>
    48e6:	f4 c0 b3    	mov.b     #0xf, w4
    48e8:	43 4e 20    	mov.w     #0x4e4, w3
    48ea:	02 2d 20    	mov.w     #0x2d0, w2
    48ec:	21 2d 20    	mov.w     #0x2d2, w1
    48ee:	80 81 20    	mov.w     #0x818, w0
    48f0:	ad 00 07    	rcall     0x4a4c <_sw_init> <.LFB7> <.LFE6>
    48f2:	c4 c0 b3    	mov.b     #0xc, w4
    48f4:	43 4e 20    	mov.w     #0x4e4, w3
    48f6:	02 2d 20    	mov.w     #0x2d0, w2
    48f8:	21 2d 20    	mov.w     #0x2d2, w1
    48fa:	00 82 20    	mov.w     #0x820, w0
    48fc:	a7 00 07    	rcall     0x4a4c <_sw_init> <.LFB7> <.LFE6>
    48fe:	c4 c0 b3    	mov.b     #0xc, w4
    4900:	23 4e 20    	mov.w     #0x4e2, w3
    4902:	82 2c 20    	mov.w     #0x2c8, w2
    4904:	a1 2c 20    	mov.w     #0x2ca, w1
    4906:	80 82 20    	mov.w     #0x828, w0
    4908:	a1 00 07    	rcall     0x4a4c <_sw_init> <.LFB7> <.LFE6>
    490a:	00 80 fa    	ulnk      
    490c:	00 00 06    	return    

0000490e <_led_init>:
    490e:	0a 00 fa    	lnk       #0xa
    4910:	00 0f 78    	mov.w     w0, [w14]
    4912:	11 07 98    	mov.w     w1, [w14+2]
    4914:	22 07 98    	mov.w     w2, [w14+4]
    4916:	33 07 98    	mov.w     w3, [w14+6]
    4918:	04 4f 98    	mov.b     w4, [w14+8]
    491a:	1e 00 78    	mov.w     [w14], w0
    491c:	9e 00 90    	mov.w     [w14+2], w1
    491e:	01 08 78    	mov.w     w1, [w0]
    4920:	1e 00 78    	mov.w     [w14], w0
    4922:	ae 00 90    	mov.w     [w14+4], w1
    4924:	11 00 98    	mov.w     w1, [w0+2]
    4926:	1e 00 78    	mov.w     [w14], w0
    4928:	be 00 90    	mov.w     [w14+6], w1
    492a:	21 00 98    	mov.w     w1, [w0+4]
    492c:	1e 00 78    	mov.w     [w14], w0
    492e:	8e 48 90    	mov.b     [w14+8], w1
    4930:	61 40 98    	mov.b     w1, [w0+6]
    4932:	1e 00 78    	mov.w     [w14], w0
    4934:	20 00 90    	mov.w     [w0+4], w0
    4936:	9e 00 78    	mov.w     [w14], w1
    4938:	a1 00 90    	mov.w     [w1+4], w1
    493a:	11 01 78    	mov.w     [w1], w2
    493c:	9e 00 78    	mov.w     [w14], w1
    493e:	e1 40 90    	mov.b     [w1+6], w1
    4940:	81 80 fb    	ze        w1, w1
    4942:	13 00 20    	mov.w     #0x1, w3
    4944:	81 18 dd    	sl.w      w3, w1, w1
    4946:	81 80 ea    	com.w     w1, w1
    4948:	81 00 61    	and.w     w2, w1, w1
    494a:	01 08 78    	mov.w     w1, [w0]
    494c:	1e 00 78    	mov.w     [w14], w0
    494e:	10 00 78    	mov.w     [w0], w0
    4950:	9e 00 78    	mov.w     [w14], w1
    4952:	91 00 78    	mov.w     [w1], w1
    4954:	11 01 78    	mov.w     [w1], w2
    4956:	9e 00 78    	mov.w     [w14], w1
    4958:	e1 40 90    	mov.b     [w1+6], w1
    495a:	81 80 fb    	ze        w1, w1
    495c:	13 00 20    	mov.w     #0x1, w3
    495e:	81 18 dd    	sl.w      w3, w1, w1
    4960:	81 80 ea    	com.w     w1, w1
    4962:	81 00 61    	and.w     w2, w1, w1
    4964:	01 08 78    	mov.w     w1, [w0]
    4966:	1e 00 78    	mov.w     [w14], w0
    4968:	10 00 90    	mov.w     [w0+2], w0
    496a:	9e 00 78    	mov.w     [w14], w1
    496c:	91 00 90    	mov.w     [w1+2], w1
    496e:	11 01 78    	mov.w     [w1], w2
    4970:	9e 00 78    	mov.w     [w14], w1
    4972:	e1 40 90    	mov.b     [w1+6], w1
    4974:	81 80 fb    	ze        w1, w1
    4976:	13 00 20    	mov.w     #0x1, w3
    4978:	81 18 dd    	sl.w      w3, w1, w1
    497a:	81 80 ea    	com.w     w1, w1
    497c:	81 00 61    	and.w     w2, w1, w1
    497e:	01 08 78    	mov.w     w1, [w0]
    4980:	00 80 fa    	ulnk      
    4982:	00 00 06    	return    

00004984 <_led_on>:
    4984:	02 00 fa    	lnk       #0x2
    4986:	00 0f 78    	mov.w     w0, [w14]
    4988:	1e 00 78    	mov.w     [w14], w0
    498a:	10 00 78    	mov.w     [w0], w0
    498c:	9e 00 78    	mov.w     [w14], w1
    498e:	91 00 78    	mov.w     [w1], w1
    4990:	11 01 78    	mov.w     [w1], w2
    4992:	9e 00 78    	mov.w     [w14], w1
    4994:	e1 40 90    	mov.b     [w1+6], w1
    4996:	81 80 fb    	ze        w1, w1
    4998:	13 00 20    	mov.w     #0x1, w3
    499a:	81 18 dd    	sl.w      w3, w1, w1
    499c:	82 80 70    	ior.w     w1, w2, w1
    499e:	01 08 78    	mov.w     w1, [w0]
    49a0:	00 80 fa    	ulnk      
    49a2:	00 00 06    	return    

000049a4 <_led_off>:
    49a4:	02 00 fa    	lnk       #0x2
    49a6:	00 0f 78    	mov.w     w0, [w14]
    49a8:	1e 00 78    	mov.w     [w14], w0
    49aa:	10 00 78    	mov.w     [w0], w0
    49ac:	9e 00 78    	mov.w     [w14], w1
    49ae:	91 00 78    	mov.w     [w1], w1
    49b0:	11 01 78    	mov.w     [w1], w2
    49b2:	9e 00 78    	mov.w     [w14], w1
    bitset(self->port, self->bit);
}

void led_off(_LED *self) {
    bitclear(self->port, self->bit);
    49b4:	e1 40 90    	mov.b     [w1+6], w1
    49b6:	81 80 fb    	ze        w1, w1
    49b8:	13 00 20    	mov.w     #0x1, w3
    49ba:	81 18 dd    	sl.w      w3, w1, w1
    49bc:	81 80 ea    	com.w     w1, w1
    49be:	81 00 61    	and.w     w2, w1, w1
    49c0:	01 08 78    	mov.w     w1, [w0]
}
    49c2:	00 80 fa    	ulnk      
    49c4:	00 00 06    	return    

000049c6 <_led_toggle>:

void led_toggle(_LED *self) {
    49c6:	02 00 fa    	lnk       #0x2
    49c8:	00 0f 78    	mov.w     w0, [w14]
    bitflip(self->port, self->bit);
    49ca:	1e 00 78    	mov.w     [w14], w0
    49cc:	10 00 78    	mov.w     [w0], w0
    49ce:	9e 00 78    	mov.w     [w14], w1
    49d0:	91 00 78    	mov.w     [w1], w1
    49d2:	11 01 78    	mov.w     [w1], w2
    49d4:	9e 00 78    	mov.w     [w14], w1
    49d6:	e1 40 90    	mov.b     [w1+6], w1
    49d8:	81 80 fb    	ze        w1, w1
    49da:	13 00 20    	mov.w     #0x1, w3
    49dc:	81 18 dd    	sl.w      w3, w1, w1
    49de:	81 00 69    	xor.w     w2, w1, w1
    49e0:	01 08 78    	mov.w     w1, [w0]
}
    49e2:	00 80 fa    	ulnk      
    49e4:	00 00 06    	return    

000049e6 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    49e6:	04 00 fa    	lnk       #0x4
    49e8:	00 0f 78    	mov.w     w0, [w14]
    49ea:	11 07 98    	mov.w     w1, [w14+2]
    if (val)
    49ec:	1e 00 90    	mov.w     [w14+2], w0
    49ee:	00 00 e0    	cp0.w     w0
    49f0:	0d 00 32    	bra       Z, 0x4a0c <.L7>
        bitset(self->port, self->bit);
    49f2:	1e 00 78    	mov.w     [w14], w0
    49f4:	10 00 78    	mov.w     [w0], w0
    49f6:	9e 00 78    	mov.w     [w14], w1
    49f8:	91 00 78    	mov.w     [w1], w1
    49fa:	11 01 78    	mov.w     [w1], w2
    49fc:	9e 00 78    	mov.w     [w14], w1
    49fe:	e1 40 90    	mov.b     [w1+6], w1
    4a00:	81 80 fb    	ze        w1, w1
    4a02:	13 00 20    	mov.w     #0x1, w3
    4a04:	81 18 dd    	sl.w      w3, w1, w1
    4a06:	82 80 70    	ior.w     w1, w2, w1
    4a08:	01 08 78    	mov.w     w1, [w0]
    4a0a:	0d 00 37    	bra       0x4a26 <.L6>

00004a0c <.L7>:
    else
        bitclear(self->port, self->bit);
    4a0c:	1e 00 78    	mov.w     [w14], w0
    4a0e:	10 00 78    	mov.w     [w0], w0
    4a10:	9e 00 78    	mov.w     [w14], w1
    4a12:	91 00 78    	mov.w     [w1], w1
    4a14:	11 01 78    	mov.w     [w1], w2
    4a16:	9e 00 78    	mov.w     [w14], w1
    4a18:	e1 40 90    	mov.b     [w1+6], w1
    4a1a:	81 80 fb    	ze        w1, w1
    4a1c:	13 00 20    	mov.w     #0x1, w3
    4a1e:	81 18 dd    	sl.w      w3, w1, w1
    4a20:	81 80 ea    	com.w     w1, w1
    4a22:	81 00 61    	and.w     w2, w1, w1
    4a24:	01 08 78    	mov.w     w1, [w0]

00004a26 <.L6>:
}
    4a26:	00 80 fa    	ulnk      
    4a28:	00 00 06    	return    

00004a2a <_led_read>:

uint16_t led_read(_LED *self) {
    4a2a:	02 00 fa    	lnk       #0x2
    4a2c:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    4a2e:	1e 00 78    	mov.w     [w14], w0
    4a30:	10 00 78    	mov.w     [w0], w0
    4a32:	90 00 78    	mov.w     [w0], w1
    4a34:	1e 00 78    	mov.w     [w14], w0
    4a36:	60 40 90    	mov.b     [w0+6], w0
    4a38:	00 80 fb    	ze        w0, w0
    4a3a:	12 00 20    	mov.w     #0x1, w2
    4a3c:	00 10 dd    	sl.w      w2, w0, w0
    4a3e:	00 80 60    	and.w     w1, w0, w0
    4a40:	00 f0 a7    	btsc.w    w0, #0xf
    4a42:	00 00 ea    	neg.w     w0, w0
    4a44:	00 00 ea    	neg.w     w0, w0
    4a46:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    4a48:	00 80 fa    	ulnk      
    4a4a:	00 00 06    	return    

00004a4c <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    4a4c:	0a 00 fa    	lnk       #0xa
    4a4e:	00 0f 78    	mov.w     w0, [w14]
    4a50:	11 07 98    	mov.w     w1, [w14+2]
    4a52:	22 07 98    	mov.w     w2, [w14+4]
    4a54:	33 07 98    	mov.w     w3, [w14+6]
    4a56:	04 4f 98    	mov.b     w4, [w14+8]
    self->port = port;
    4a58:	1e 00 78    	mov.w     [w14], w0
    4a5a:	9e 00 90    	mov.w     [w14+2], w1
    4a5c:	01 08 78    	mov.w     w1, [w0]
    self->tris = tris;
    4a5e:	1e 00 78    	mov.w     [w14], w0
    4a60:	ae 00 90    	mov.w     [w14+4], w1
    4a62:	11 00 98    	mov.w     w1, [w0+2]
    self->ans = ans;
    4a64:	1e 00 78    	mov.w     [w14], w0
    4a66:	be 00 90    	mov.w     [w14+6], w1
    4a68:	21 00 98    	mov.w     w1, [w0+4]
    self->bit = bit;
    4a6a:	1e 00 78    	mov.w     [w14], w0
    4a6c:	8e 48 90    	mov.b     [w14+8], w1
    4a6e:	61 40 98    	mov.b     w1, [w0+6]

    bitclear(self->ans, self->bit);
    4a70:	1e 00 78    	mov.w     [w14], w0
    4a72:	20 00 90    	mov.w     [w0+4], w0
    4a74:	9e 00 78    	mov.w     [w14], w1
    4a76:	a1 00 90    	mov.w     [w1+4], w1
    4a78:	11 01 78    	mov.w     [w1], w2
    4a7a:	9e 00 78    	mov.w     [w14], w1
    4a7c:	e1 40 90    	mov.b     [w1+6], w1
    4a7e:	81 80 fb    	ze        w1, w1
    4a80:	13 00 20    	mov.w     #0x1, w3
    4a82:	81 18 dd    	sl.w      w3, w1, w1
    4a84:	81 80 ea    	com.w     w1, w1
    4a86:	81 00 61    	and.w     w2, w1, w1
    4a88:	01 08 78    	mov.w     w1, [w0]
    bitset(self->tris, self->bit);
    4a8a:	1e 00 78    	mov.w     [w14], w0
    4a8c:	10 00 90    	mov.w     [w0+2], w0
    4a8e:	9e 00 78    	mov.w     [w14], w1
    4a90:	91 00 90    	mov.w     [w1+2], w1
    4a92:	11 01 78    	mov.w     [w1], w2
    4a94:	9e 00 78    	mov.w     [w14], w1
    4a96:	e1 40 90    	mov.b     [w1+6], w1
    4a98:	81 80 fb    	ze        w1, w1
    4a9a:	13 00 20    	mov.w     #0x1, w3
    4a9c:	81 18 dd    	sl.w      w3, w1, w1
    4a9e:	82 80 70    	ior.w     w1, w2, w1
    4aa0:	01 08 78    	mov.w     w1, [w0]
}
    4aa2:	00 80 fa    	ulnk      
    4aa4:	00 00 06    	return    

00004aa6 <_sw_read>:

uint16_t sw_read(_SW *self) {
    4aa6:	02 00 fa    	lnk       #0x2
    4aa8:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    4aaa:	1e 00 78    	mov.w     [w14], w0
    4aac:	10 00 78    	mov.w     [w0], w0
    4aae:	90 00 78    	mov.w     [w0], w1
    4ab0:	1e 00 78    	mov.w     [w14], w0
    4ab2:	60 40 90    	mov.b     [w0+6], w0
    4ab4:	00 80 fb    	ze        w0, w0
    4ab6:	12 00 20    	mov.w     #0x1, w2
    4ab8:	00 10 dd    	sl.w      w2, w0, w0
    4aba:	00 80 60    	and.w     w1, w0, w0
    4abc:	00 f0 a7    	btsc.w    w0, #0xf
    4abe:	00 00 ea    	neg.w     w0, w0
    4ac0:	00 00 ea    	neg.w     w0, w0
    4ac2:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    4ac4:	00 80 fa    	ulnk      
    4ac6:	00 00 06    	return    
Disassembly of section .isr.text:

00004ac8 <__U1TXInterrupt>:
        self->RXbuffer.count++;
    }
}

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    4ac8:	36 00 f8    	push      0x36
    4aca:	80 9f be    	mov.d     w0, [w15++]
    4acc:	82 9f be    	mov.d     w2, [w15++]
    4ace:	84 9f be    	mov.d     w4, [w15++]
    4ad0:	86 9f be    	mov.d     w6, [w15++]
    4ad2:	32 00 f8    	push      0x32
    4ad4:	34 00 f8    	push      0x34
    4ad6:	10 00 20    	mov.w     #0x1, w0
    4ad8:	a0 01 88    	mov.w     w0, 0x34
    4ada:	00 20 20    	mov.w     #0x200, w0
    4adc:	90 01 88    	mov.w     w0, 0x32
    4ade:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart1);
    4ae0:	00 9f 20    	mov.w     #0x9f0, w0
    4ae2:	8d e8 07    	rcall     0x1bfe <___serviceTxInterrupt> <.LFB3> <.LFE2>
}
    4ae4:	00 80 fa    	ulnk      
    4ae6:	34 00 f9    	pop       0x34
    4ae8:	32 00 f9    	pop       0x32
    4aea:	4f 03 be    	mov.d     [--w15], w6
    4aec:	4f 02 be    	mov.d     [--w15], w4
    4aee:	4f 01 be    	mov.d     [--w15], w2
    4af0:	4f 00 be    	mov.d     [--w15], w0
    4af2:	36 00 f9    	pop       0x36
    4af4:	00 40 06    	retfie    

00004af6 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    4af6:	36 00 f8    	push      0x36
    4af8:	80 9f be    	mov.d     w0, [w15++]
    4afa:	82 9f be    	mov.d     w2, [w15++]
    4afc:	84 9f be    	mov.d     w4, [w15++]
    4afe:	86 9f be    	mov.d     w6, [w15++]
    4b00:	32 00 f8    	push      0x32
    4b02:	34 00 f8    	push      0x34
    4b04:	10 00 20    	mov.w     #0x1, w0
    4b06:	a0 01 88    	mov.w     w0, 0x34
    4b08:	00 20 20    	mov.w     #0x200, w0
    4b0a:	90 01 88    	mov.w     w0, 0x32
    4b0c:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart1);
    4b0e:	00 9f 20    	mov.w     #0x9f0, w0
    4b10:	dd e8 07    	rcall     0x1ccc <___serviceRxInterrupt> <.LFB5> <.LFE4>
}
    4b12:	00 80 fa    	ulnk      
    4b14:	34 00 f9    	pop       0x34
    4b16:	32 00 f9    	pop       0x32
    4b18:	4f 03 be    	mov.d     [--w15], w6
    4b1a:	4f 02 be    	mov.d     [--w15], w4
    4b1c:	4f 01 be    	mov.d     [--w15], w2
    4b1e:	4f 00 be    	mov.d     [--w15], w0
    4b20:	36 00 f9    	pop       0x36
    4b22:	00 40 06    	retfie    

00004b24 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    4b24:	36 00 f8    	push      0x36
    4b26:	80 9f be    	mov.d     w0, [w15++]
    4b28:	82 9f be    	mov.d     w2, [w15++]
    4b2a:	84 9f be    	mov.d     w4, [w15++]
    4b2c:	86 9f be    	mov.d     w6, [w15++]
    4b2e:	32 00 f8    	push      0x32
    4b30:	34 00 f8    	push      0x34
    4b32:	10 00 20    	mov.w     #0x1, w0
    4b34:	a0 01 88    	mov.w     w0, 0x34
    4b36:	00 20 20    	mov.w     #0x200, w0
    4b38:	90 01 88    	mov.w     w0, 0x32
    4b3a:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart2);
    4b3c:	c0 a2 20    	mov.w     #0xa2c, w0
    4b3e:	5f e8 07    	rcall     0x1bfe <___serviceTxInterrupt> <.LFB3> <.LFE2>
}
    4b40:	00 80 fa    	ulnk      
    4b42:	34 00 f9    	pop       0x34
    4b44:	32 00 f9    	pop       0x32
    4b46:	4f 03 be    	mov.d     [--w15], w6
    4b48:	4f 02 be    	mov.d     [--w15], w4
    4b4a:	4f 01 be    	mov.d     [--w15], w2
    4b4c:	4f 00 be    	mov.d     [--w15], w0
    4b4e:	36 00 f9    	pop       0x36
    4b50:	00 40 06    	retfie    

00004b52 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    4b52:	36 00 f8    	push      0x36
    4b54:	80 9f be    	mov.d     w0, [w15++]
    4b56:	82 9f be    	mov.d     w2, [w15++]
    4b58:	84 9f be    	mov.d     w4, [w15++]
    4b5a:	86 9f be    	mov.d     w6, [w15++]
    4b5c:	32 00 f8    	push      0x32
    4b5e:	34 00 f8    	push      0x34
    4b60:	10 00 20    	mov.w     #0x1, w0
    4b62:	a0 01 88    	mov.w     w0, 0x34
    4b64:	00 20 20    	mov.w     #0x200, w0
    4b66:	90 01 88    	mov.w     w0, 0x32
    4b68:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart2);
    4b6a:	c0 a2 20    	mov.w     #0xa2c, w0
    4b6c:	af e8 07    	rcall     0x1ccc <___serviceRxInterrupt> <.LFB5> <.LFE4>
}
    4b6e:	00 80 fa    	ulnk      
    4b70:	34 00 f9    	pop       0x34
    4b72:	32 00 f9    	pop       0x32
    4b74:	4f 03 be    	mov.d     [--w15], w6
    4b76:	4f 02 be    	mov.d     [--w15], w4
    4b78:	4f 01 be    	mov.d     [--w15], w2
    4b7a:	4f 00 be    	mov.d     [--w15], w0
    4b7c:	36 00 f9    	pop       0x36
    4b7e:	00 40 06    	retfie    

00004b80 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    4b80:	36 00 f8    	push      0x36
    4b82:	80 9f be    	mov.d     w0, [w15++]
    4b84:	82 9f be    	mov.d     w2, [w15++]
    4b86:	84 9f be    	mov.d     w4, [w15++]
    4b88:	86 9f be    	mov.d     w6, [w15++]
    4b8a:	32 00 f8    	push      0x32
    4b8c:	34 00 f8    	push      0x34
    4b8e:	10 00 20    	mov.w     #0x1, w0
    4b90:	a0 01 88    	mov.w     w0, 0x34
    4b92:	00 20 20    	mov.w     #0x200, w0
    4b94:	90 01 88    	mov.w     w0, 0x32
    4b96:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart3);
    4b98:	80 a6 20    	mov.w     #0xa68, w0
    4b9a:	31 e8 07    	rcall     0x1bfe <___serviceTxInterrupt> <.LFB3> <.LFE2>
}
    4b9c:	00 80 fa    	ulnk      
    4b9e:	34 00 f9    	pop       0x34
    4ba0:	32 00 f9    	pop       0x32
    4ba2:	4f 03 be    	mov.d     [--w15], w6
    4ba4:	4f 02 be    	mov.d     [--w15], w4
    4ba6:	4f 01 be    	mov.d     [--w15], w2
    4ba8:	4f 00 be    	mov.d     [--w15], w0
    4baa:	36 00 f9    	pop       0x36
    4bac:	00 40 06    	retfie    

00004bae <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    4bae:	36 00 f8    	push      0x36
    4bb0:	80 9f be    	mov.d     w0, [w15++]
    4bb2:	82 9f be    	mov.d     w2, [w15++]
    4bb4:	84 9f be    	mov.d     w4, [w15++]
    4bb6:	86 9f be    	mov.d     w6, [w15++]
    4bb8:	32 00 f8    	push      0x32
    4bba:	34 00 f8    	push      0x34
    4bbc:	10 00 20    	mov.w     #0x1, w0
    4bbe:	a0 01 88    	mov.w     w0, 0x34
    4bc0:	00 20 20    	mov.w     #0x200, w0
    4bc2:	90 01 88    	mov.w     w0, 0x32
    4bc4:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart3);
    4bc6:	80 a6 20    	mov.w     #0xa68, w0
    4bc8:	81 e8 07    	rcall     0x1ccc <___serviceRxInterrupt> <.LFB5> <.LFE4>
}
    4bca:	00 80 fa    	ulnk      
    4bcc:	34 00 f9    	pop       0x34
    4bce:	32 00 f9    	pop       0x32
    4bd0:	4f 03 be    	mov.d     [--w15], w6
    4bd2:	4f 02 be    	mov.d     [--w15], w4
    4bd4:	4f 01 be    	mov.d     [--w15], w2
    4bd6:	4f 00 be    	mov.d     [--w15], w0
    4bd8:	36 00 f9    	pop       0x36
    4bda:	00 40 06    	retfie    

00004bdc <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    4bdc:	36 00 f8    	push      0x36
    4bde:	80 9f be    	mov.d     w0, [w15++]
    4be0:	82 9f be    	mov.d     w2, [w15++]
    4be2:	84 9f be    	mov.d     w4, [w15++]
    4be4:	86 9f be    	mov.d     w6, [w15++]
    4be6:	32 00 f8    	push      0x32
    4be8:	34 00 f8    	push      0x34
    4bea:	10 00 20    	mov.w     #0x1, w0
    4bec:	a0 01 88    	mov.w     w0, 0x34
    4bee:	00 20 20    	mov.w     #0x200, w0
    4bf0:	90 01 88    	mov.w     w0, 0x32
    4bf2:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart4);
    4bf4:	40 aa 20    	mov.w     #0xaa4, w0
    4bf6:	03 e8 07    	rcall     0x1bfe <___serviceTxInterrupt> <.LFB3> <.LFE2>
}
    4bf8:	00 80 fa    	ulnk      
    4bfa:	34 00 f9    	pop       0x34
    4bfc:	32 00 f9    	pop       0x32
    4bfe:	4f 03 be    	mov.d     [--w15], w6
    4c00:	4f 02 be    	mov.d     [--w15], w4
    4c02:	4f 01 be    	mov.d     [--w15], w2
    4c04:	4f 00 be    	mov.d     [--w15], w0
    4c06:	36 00 f9    	pop       0x36
    4c08:	00 40 06    	retfie    

00004c0a <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    4c0a:	36 00 f8    	push      0x36
    4c0c:	80 9f be    	mov.d     w0, [w15++]
    4c0e:	82 9f be    	mov.d     w2, [w15++]
    4c10:	84 9f be    	mov.d     w4, [w15++]
    4c12:	86 9f be    	mov.d     w6, [w15++]
    4c14:	32 00 f8    	push      0x32
    4c16:	34 00 f8    	push      0x34
    4c18:	10 00 20    	mov.w     #0x1, w0
    4c1a:	a0 01 88    	mov.w     w0, 0x34
    4c1c:	00 20 20    	mov.w     #0x200, w0
    4c1e:	90 01 88    	mov.w     w0, 0x32
    4c20:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart4);
    4c22:	40 aa 20    	mov.w     #0xaa4, w0
    4c24:	53 e8 07    	rcall     0x1ccc <___serviceRxInterrupt> <.LFB5> <.LFE4>
}
    4c26:	00 80 fa    	ulnk      
    4c28:	34 00 f9    	pop       0x34
    4c2a:	32 00 f9    	pop       0x32
    4c2c:	4f 03 be    	mov.d     [--w15], w6
    4c2e:	4f 02 be    	mov.d     [--w15], w4
    4c30:	4f 01 be    	mov.d     [--w15], w2
    4c32:	4f 00 be    	mov.d     [--w15], w0
    4c34:	36 00 f9    	pop       0x36
    4c36:	00 40 06    	retfie    
Disassembly of section .dinit:

00004c38 <.dinit>:
    4c38:	12 0d 00    	nop       
    4c3a:	4e 00 00    	nop       
    4c3c:	82 00 00    	nop       
    4c3e:	5a 65 72    	ior.b     w4, [++w10], [--w10]
    4c40:	6f 00 00    	nop       
    4c42:	00 4f 6e    	xor.b     w12, w0, [w14]
    4c44:	65 00 00    	nop       
    4c46:	00 00 54    	sub.w     w8, w0, w0
    4c48:	77 6f 00    	nop       
    4c4a:	00 00 00    	nop       
    4c4c:	54 68 72    	ior.b     w4, [++w4], [++w0]
    4c4e:	65 65 00    	nop       
    4c50:	00 46 6f    	xor.b     w14, w0, w12
    4c52:	75 72 00    	nop       
    4c54:	00 00 46    	add.w     w12, w0, w0
    4c56:	69 76 65    	.pword 0x657669
    4c58:	00 00 00    	nop       
    4c5a:	53 69 78    	mov.b     [++w3], [++w2]
    4c5c:	00 00 00    	nop       
    4c5e:	00 53 65    	and.b     w10, w0, [w6--]
    4c60:	76 65 6e    	xor.b     w12, #0x16, [--w10]
    4c62:	00 00 45    	add.w     w10, w0, w0
    4c64:	69 67 68    	xor.b     w0, #0x9, [--w14]
    4c66:	74 00 00    	nop       
    4c68:	4e 69 6e    	xor.b     w12, [--w14], [++w2]
    4c6a:	65 00 00    	nop       
    4c6c:	00 54 65    	and.b     w10, w0, [w8--]
    4c6e:	6e 00 00    	nop       
    4c70:	00 00 00    	nop       
    4c72:	00 08 00    	nop       
    4c74:	30 00 00    	nop       
    4c76:	80 00 00    	nop       
    4c78:	60 0d 00    	nop       
    4c7a:	10 00 00    	nop       
    4c7c:	80 00 00    	nop       
    4c7e:	34 08 00    	nop       
    4c80:	02 00 00    	nop       
    4c82:	80 00 00    	nop       
    4c84:	38 08 00    	nop       
    4c86:	b8 01 00    	nop       
    4c88:	80 00 00    	nop       
    4c8a:	f0 09 00    	nop       
    4c8c:	1c 01 00    	nop       
    4c8e:	80 00 00    	nop       
    4c90:	30 08 00    	nop       
    4c92:	04 00 00    	nop       
    4c94:	80 00 00    	nop       
    4c96:	70 0d 00    	nop       
    4c98:	10 00 00    	nop       
    4c9a:	82 00 00    	nop       
    4c9c:	bd 37 86    	mov.w     0xc6f6, w13
    4c9e:	33 bd 37    	bra       0xffffc706
    4ca0:	06 35 bd    	subr.w    0x1506
    4ca2:	37 86 36    	bra       LEU, 0xffff5912
    4ca4:	bd 37 86    	mov.w     0xc6f6, w13
    4ca6:	37 00 00    	nop       
    4ca8:	36 0c 00    	nop       
    4caa:	6e 00 00    	nop       
    4cac:	80 00 00    	nop       
    4cae:	36 08 00    	nop       
    4cb0:	02 00 00    	nop       
    4cb2:	80 00 00    	nop       
    4cb4:	a4 0c 00    	nop       
    4cb6:	6e 00 00    	nop       
    4cb8:	80 00 00    	nop       
    4cba:	0c 0b 00    	nop       
    4cbc:	a2 00 00    	nop       
    4cbe:	80 00 00    	nop       
    4cc0:	ae 0b 00    	nop       
    4cc2:	88 00 00    	nop       
    4cc4:	82 00 00    	nop       
    4cc6:	01 00 00    	nop       
    4cc8:	00 d4 0b    	.pword 0x0bd400
    4cca:	d5 0b d4    	sl.w      0xbd5, WREG
    4ccc:	0b d4 0b    	.pword 0x0bd40b
    4cce:	d4 0b d4    	sl.w      0xbd4, WREG
    4cd0:	0b c4 0b    	.pword 0x0bc40b
	...
    4ce0:	00 02 08    	do        #0x200, 0x4ee6
    4ce2:	01 01 fc 
    4ce4:	0b fd 0b    	.pword 0x0bfd0b
    4ce6:	fc 0b fc    	disi      #0xbfc
    4ce8:	0b fc 0b    	.pword 0x0bfc0b
    4cea:	fc 0b ec    	inc.w     0xbfc, WREG
    4cec:	0b 00 00    	nop       
	...
    4cfa:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207b1b6>
    4cfc:	08 02 02 
    4cfe:	24 0c 25    	mov.w     #0x50c2, w4
    4d00:	0c 24 0c    	bra       OA, 0x951a
    4d02:	24 0c 24    	mov.w     #0x40c2, w4
    4d04:	0c 24 0c    	bra       OA, 0x951e
    4d06:	14 0c 00    	nop       
	...
    4d16:	ae 0b d6    	rlnc.w    0xbae, WREG
    4d18:	0b fe 0b    	.pword 0x0bfe0b
	...
    4d22:	84 0d 00    	nop       
    4d24:	02 00 00    	nop       
    4d26:	80 00 00    	nop       
    4d28:	86 0d 00    	nop       
    4d2a:	02 00 00    	nop       
    4d2c:	82 00 00    	nop       
    4d2e:	04 00 00    	nop       
    4d30:	80 0d 00    	nop       
    4d32:	04 00 00    	nop       
    4d34:	80 00 00    	nop       
    4d36:	88 0d 00    	nop       
    4d38:	02 00 00    	nop       
    4d3a:	80 00 00    	nop       
    4d3c:	00 00 00    	nop       
Disassembly of section .isr.text:

00004d3e <__T1Interrupt>:
        timer_disableInterrupt(self);
    }
}

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    4d3e:	36 00 f8    	push      0x36
    4d40:	80 9f be    	mov.d     w0, [w15++]
    4d42:	82 9f be    	mov.d     w2, [w15++]
    4d44:	84 9f be    	mov.d     w4, [w15++]
    4d46:	86 9f be    	mov.d     w6, [w15++]
    4d48:	32 00 f8    	push      0x32
    4d4a:	34 00 f8    	push      0x34
    4d4c:	10 00 20    	mov.w     #0x1, w0
    4d4e:	a0 01 88    	mov.w     w0, 0x34
    4d50:	00 20 20    	mov.w     #0x200, w0
    4d52:	90 01 88    	mov.w     w0, 0x32
    4d54:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer1);
    4d56:	60 c3 20    	mov.w     #0xc36, w0
    4d58:	fd f5 07    	rcall     0x3954 <_timer_serviceInterrupt> <.L0> <.LFB0> <.LFE12> <.Letext0> <.Ltext0>
}
    4d5a:	00 80 fa    	ulnk      
    4d5c:	34 00 f9    	pop       0x34
    4d5e:	32 00 f9    	pop       0x32
    4d60:	4f 03 be    	mov.d     [--w15], w6
    4d62:	4f 02 be    	mov.d     [--w15], w4
    4d64:	4f 01 be    	mov.d     [--w15], w2
    4d66:	4f 00 be    	mov.d     [--w15], w0
    4d68:	36 00 f9    	pop       0x36
    4d6a:	00 40 06    	retfie    

00004d6c <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    4d6c:	36 00 f8    	push      0x36
    4d6e:	80 9f be    	mov.d     w0, [w15++]
    4d70:	82 9f be    	mov.d     w2, [w15++]
    4d72:	84 9f be    	mov.d     w4, [w15++]
    4d74:	86 9f be    	mov.d     w6, [w15++]
    4d76:	32 00 f8    	push      0x32
    4d78:	34 00 f8    	push      0x34
    4d7a:	10 00 20    	mov.w     #0x1, w0
    4d7c:	a0 01 88    	mov.w     w0, 0x34
    4d7e:	00 20 20    	mov.w     #0x200, w0
    4d80:	90 01 88    	mov.w     w0, 0x32
    4d82:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer2);
    4d84:	c0 c4 20    	mov.w     #0xc4c, w0
    4d86:	e6 f5 07    	rcall     0x3954 <_timer_serviceInterrupt> <.L0> <.LFB0> <.LFE12> <.Letext0> <.Ltext0>
}
    4d88:	00 80 fa    	ulnk      
    4d8a:	34 00 f9    	pop       0x34
    4d8c:	32 00 f9    	pop       0x32
    4d8e:	4f 03 be    	mov.d     [--w15], w6
    4d90:	4f 02 be    	mov.d     [--w15], w4
    4d92:	4f 01 be    	mov.d     [--w15], w2
    4d94:	4f 00 be    	mov.d     [--w15], w0
    4d96:	36 00 f9    	pop       0x36
    4d98:	00 40 06    	retfie    

00004d9a <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    4d9a:	36 00 f8    	push      0x36
    4d9c:	80 9f be    	mov.d     w0, [w15++]
    4d9e:	82 9f be    	mov.d     w2, [w15++]
    4da0:	84 9f be    	mov.d     w4, [w15++]
    4da2:	86 9f be    	mov.d     w6, [w15++]
    4da4:	32 00 f8    	push      0x32
    4da6:	34 00 f8    	push      0x34
    4da8:	10 00 20    	mov.w     #0x1, w0
    4daa:	a0 01 88    	mov.w     w0, 0x34
    4dac:	00 20 20    	mov.w     #0x200, w0
    4dae:	90 01 88    	mov.w     w0, 0x32
    4db0:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer3);
    4db2:	20 c6 20    	mov.w     #0xc62, w0
    4db4:	cf f5 07    	rcall     0x3954 <_timer_serviceInterrupt> <.L0> <.LFB0> <.LFE12> <.Letext0> <.Ltext0>
}
    4db6:	00 80 fa    	ulnk      
    4db8:	34 00 f9    	pop       0x34
    4dba:	32 00 f9    	pop       0x32
    4dbc:	4f 03 be    	mov.d     [--w15], w6
    4dbe:	4f 02 be    	mov.d     [--w15], w4
    4dc0:	4f 01 be    	mov.d     [--w15], w2
    4dc2:	4f 00 be    	mov.d     [--w15], w0
    4dc4:	36 00 f9    	pop       0x36
    4dc6:	00 40 06    	retfie    

00004dc8 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    4dc8:	36 00 f8    	push      0x36
    4dca:	80 9f be    	mov.d     w0, [w15++]
    4dcc:	82 9f be    	mov.d     w2, [w15++]
    4dce:	84 9f be    	mov.d     w4, [w15++]
    4dd0:	86 9f be    	mov.d     w6, [w15++]
    4dd2:	32 00 f8    	push      0x32
    4dd4:	34 00 f8    	push      0x34
    4dd6:	10 00 20    	mov.w     #0x1, w0
    4dd8:	a0 01 88    	mov.w     w0, 0x34
    4dda:	00 20 20    	mov.w     #0x200, w0
    4ddc:	90 01 88    	mov.w     w0, 0x32
    4dde:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer4);
    4de0:	80 c7 20    	mov.w     #0xc78, w0
    4de2:	b8 f5 07    	rcall     0x3954 <_timer_serviceInterrupt> <.L0> <.LFB0> <.LFE12> <.Letext0> <.Ltext0>
}
    4de4:	00 80 fa    	ulnk      
    4de6:	34 00 f9    	pop       0x34
    4de8:	32 00 f9    	pop       0x32
    4dea:	4f 03 be    	mov.d     [--w15], w6
    4dec:	4f 02 be    	mov.d     [--w15], w4
    4dee:	4f 01 be    	mov.d     [--w15], w2
    4df0:	4f 00 be    	mov.d     [--w15], w0
    4df2:	36 00 f9    	pop       0x36
    4df4:	00 40 06    	retfie    

00004df6 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    4df6:	36 00 f8    	push      0x36
    4df8:	80 9f be    	mov.d     w0, [w15++]
    4dfa:	82 9f be    	mov.d     w2, [w15++]
    4dfc:	84 9f be    	mov.d     w4, [w15++]
    4dfe:	86 9f be    	mov.d     w6, [w15++]
    4e00:	32 00 f8    	push      0x32
    4e02:	34 00 f8    	push      0x34
    4e04:	10 00 20    	mov.w     #0x1, w0
    4e06:	a0 01 88    	mov.w     w0, 0x34
    4e08:	00 20 20    	mov.w     #0x200, w0
    4e0a:	90 01 88    	mov.w     w0, 0x32
    4e0c:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer5);
    4e0e:	e0 c8 20    	mov.w     #0xc8e, w0
    4e10:	a1 f5 07    	rcall     0x3954 <_timer_serviceInterrupt> <.L0> <.LFB0> <.LFE12> <.Letext0> <.Ltext0>
}
    4e12:	00 80 fa    	ulnk      
    4e14:	34 00 f9    	pop       0x34
    4e16:	32 00 f9    	pop       0x32
    4e18:	4f 03 be    	mov.d     [--w15], w6
    4e1a:	4f 02 be    	mov.d     [--w15], w4
    4e1c:	4f 01 be    	mov.d     [--w15], w2
    4e1e:	4f 00 be    	mov.d     [--w15], w0
    4e20:	36 00 f9    	pop       0x36
    4e22:	00 40 06    	retfie    
Disassembly of section .text:

00004e24 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    4e24:	02 00 fa    	lnk       #0x2
    4e26:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    4e28:	1e 00 78    	mov.w     [w14], w0
    4e2a:	48 00 de    	lsr.w     w0, #0x8, w0
    4e2c:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    4e2e:	1e 00 78    	mov.w     [w14], w0
    4e30:	44 00 de    	lsr.w     w0, #0x4, w0
    4e32:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    4e34:	1e 00 78    	mov.w     [w14], w0
    4e36:	42 00 de    	lsr.w     w0, #0x2, w0
    4e38:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    4e3a:	1e 00 78    	mov.w     [w14], w0
    4e3c:	00 00 d1    	lsr.w     w0, w0
    4e3e:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    4e40:	1e 00 78    	mov.w     [w14], w0
    4e42:	00 40 78    	mov.b     w0, w0
    4e44:	61 40 60    	and.b     w0, #0x1, w0
}
    4e46:	00 80 fa    	ulnk      
    4e48:	00 00 06    	return    
Disassembly of section .isr:

00004e4a <__DefaultInterrupt>:
    4e4a:	00 40 da    	break     
    4e4c:	00 00 fe    	reset     
