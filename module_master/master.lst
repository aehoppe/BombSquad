
master.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	3c 3e 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	3c 3e 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	3c 3e 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	3c 3e 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	3c 3e 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	3c 3e 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	3c 3e 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	3c 3e 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	3c 3e 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	3c 3e 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	3c 3e 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	3c 3e 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	3c 3e 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	3c 3e 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	3c 3e 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	3c 3e 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	3c 3e 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	3c 3e 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	3c 3e 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	3c 3e 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	3c 3e 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	3c 3e 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	3c 3e 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	3c 3e 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	3c 3e 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	3c 3e 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	3c 3e 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	3c 3e 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	3c 3e 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	3c 3e 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	3c 3e 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	3c 3e 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	3c 3e 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	3c 3e 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	3c 3e 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	3c 3e 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	3c 3e 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	3c 3e 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	3c 3e 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	3c 3e 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	3c 3e 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	3c 3e 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	3c 3e 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	3c 3e 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	3c 3e 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	3c 3e 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	3c 3e 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	3c 3e 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	3c 3e 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	3c 3e 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	3c 3e 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	3c 3e 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	3c 3e 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	3c 3e 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	3c 3e 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	3c 3e 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	3c 3e 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	3c 3e 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	3c 3e 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	6f 12 21    	mov.w     #0x1126, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	81 00 07    	rcall     0x1228 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	c0 da 23    	mov.w     #0x3dac, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	02 22 02    	call      0x2202 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	40 26 20    	mov.w     #0x264, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	a2 24 04    	goto      0x24a2 <_idle>
    1216:	00 00 00 
    1218:	d0 24 04    	goto      0x24d0 <_run>
    121a:	00 00 00 
    121c:	9a 27 04    	goto      0x279a <_end_fail>
    121e:	00 00 00 
    1220:	66 28 04    	goto      0x2866 <_end_win>
    1222:	00 00 00 
    1224:	92 15 04    	goto      0x1592 <_prout>
    1226:	00 00 00 

00001228 <__crt_start_mode>:
    1228:	00 00 05    	retlw.w   #0x0, w0

0000122a <___subsf3>:
    122a:	03 f0 a2    	btg.w     w3, #0xf

0000122c <___addsf3>:
    122c:	88 9f be    	mov.d     w8, [w15++]
    122e:	8a 9f be    	mov.d     w10, [w15++]
    1230:	8c 1f 78    	mov.w     w12, [w15++]
    1232:	f6 00 07    	rcall     0x1420 <__funpack2>
    1234:	fd 00 33    	bra       N, 0x1430 <__fPropagateNaN>
    1236:	64 50 e1    	cp.w      w10, #0x4
    1238:	4f 00 32    	bra       Z, 0x12d8 <aisinfinite>

0000123a <checkspecialb>:
    123a:	64 20 e1    	cp.w      w4, #0x4
    123c:	52 00 32    	bra       Z, 0x12e2 <return2>
    123e:	03 82 6c    	xor.w     w9, w3, w4
    1240:	07 00 3b    	bra       NN, 0x1250 <getsign>
    1242:	09 05 d0    	sl.w      w9, w10
    1244:	03 06 d0    	sl.w      w3, w12
    1246:	82 0f 54    	sub.w     w8, w2, [w15]
    1248:	0c 06 5d    	subb.w    w10, w12, w12
    124a:	02 00 39    	bra       NC, 0x1250 <getsign>
    124c:	02 00 32    	bra       Z, 0x1252 <gotsign>
    124e:	89 01 78    	mov.w     w9, w3

00001250 <getsign>:
    1250:	03 06 78    	mov.w     w3, w12

00001252 <gotsign>:
    1252:	85 82 55    	sub.w     w11, w5, w5
    1254:	04 00 3d    	bra       GE, 0x125e <expcanonical>
    1256:	00 03 fd    	exch      w0, w6
    1258:	81 03 fd    	exch      w1, w7
    125a:	85 02 ea    	neg.w     w5, w5
    125c:	8b 85 42    	add.w     w5, w11, w11

0000125e <expcanonical>:
    125e:	84 0f 72    	ior.w     w4, w4, [w15]
    1260:	02 00 3b    	bra       NN, 0x1266 <nonegate>
    1262:	60 00 10    	subr.w    w0, #0x0, w0
    1264:	e0 80 18    	subbr.w   w1, #0x0, w1

00001266 <nonegate>:
    1266:	60 11 b8    	mul.uu    w2, #0x0, w2
    1268:	00 05 eb    	clr.w     w10
    126a:	7a 28 e1    	cp.w      w5, #0x1a
    126c:	0a 00 39    	bra       NC, 0x1282 <aligniter>
    126e:	06 00 78    	mov.w     w6, w0
    1270:	c7 5d dd    	sl.w      w11, #0x7, w11
    1272:	f7 07 b2    	and.w     #0x7f, w7
    1274:	87 80 75    	ior.w     w11, w7, w1
    1276:	2d 00 37    	bra       0x12d2 <signoff>

00001278 <align>:
    1278:	82 81 71    	ior.w     w3, w2, w3
    127a:	0a 01 78    	mov.w     w10, w2
    127c:	61 05 60    	and.w     w0, #0x1, w10
    127e:	81 80 d1    	asr.w     w1, w1
    1280:	00 80 d3    	rrc.w     w0, w0

00001282 <aligniter>:
    1282:	85 02 e9    	dec.w     w5, w5
    1284:	f9 ff 3b    	bra       NN, 0x1278 <align>

00001286 <aligned>:
    1286:	06 04 40    	add.w     w0, w6, w8
    1288:	87 84 48    	addc.w    w1, w7, w9
    128a:	02 00 3b    	bra       NN, 0x1290 <normalizesum>
    128c:	60 04 14    	subr.w    w8, #0x0, w8
    128e:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001290 <normalizesum>:
    1290:	09 88 a3    	btst.z    w9, #0x8
    1292:	07 00 32    	bra       Z, 0x12a2 <checknormal>
    1294:	8a 81 71    	ior.w     w3, w10, w3
    1296:	82 81 71    	ior.w     w3, w2, w3
    1298:	61 01 64    	and.w     w8, #0x1, w2
    129a:	89 04 d1    	lsr.w     w9, w9
    129c:	08 84 d3    	rrc.w     w8, w8
    129e:	8b 05 e8    	inc.w     w11, w11
    12a0:	17 00 37    	bra       0x12d0 <round>

000012a2 <checknormal>:
    12a2:	09 78 a3    	btst.z    w9, #0x7
    12a4:	13 00 3a    	bra       NZ, 0x12cc <discardguard>

000012a6 <underflow>:
    12a6:	0b 00 e0    	cp0.w     w11
    12a8:	13 00 34    	bra       LE, 0x12d0 <round>
    12aa:	8b 05 e9    	dec.w     w11, w11
    12ac:	08 04 44    	add.w     w8, w8, w8
    12ae:	89 84 4c    	addc.w    w9, w9, w9
    12b0:	0a 44 74    	ior.b     w8, w10, w8
    12b2:	09 78 a3    	btst.z    w9, #0x7
    12b4:	0d 00 3a    	bra       NZ, 0x12d0 <round>

000012b6 <normalizeloop>:
    12b6:	0b 00 e0    	cp0.w     w11
    12b8:	07 00 34    	bra       LE, 0x12c8 <normalizeexit>
    12ba:	8b 05 e9    	dec.w     w11, w11
    12bc:	08 04 44    	add.w     w8, w8, w8
    12be:	89 84 4c    	addc.w    w9, w9, w9
    12c0:	01 00 3a    	bra       NZ, 0x12c4 <normalizetest>
    12c2:	0b 00 20    	mov.w     #0x0, w11

000012c4 <normalizetest>:
    12c4:	09 78 a3    	btst.z    w9, #0x7
    12c6:	f7 ff 32    	bra       Z, 0x12b6 <normalizeloop>

000012c8 <normalizeexit>:
    12c8:	00 01 eb    	clr.w     w2
    12ca:	02 00 37    	bra       0x12d0 <round>

000012cc <discardguard>:
    12cc:	82 81 71    	ior.w     w3, w2, w3
    12ce:	0a 01 78    	mov.w     w10, w2

000012d0 <round>:
    12d0:	6c 00 07    	rcall     0x13aa <__fpack>

000012d2 <signoff>:
    12d2:	0c f0 a7    	btsc.w    w12, #0xf
    12d4:	01 f0 a0    	bset.w    w1, #0xf
    12d6:	b5 00 37    	bra       0x1442 <__fbopExit>

000012d8 <aisinfinite>:
    12d8:	64 20 e1    	cp.w      w4, #0x4
    12da:	02 00 3a    	bra       NZ, 0x12e0 <return8>
    12dc:	83 8f 6c    	xor.w     w9, w3, [w15]
    12de:	b5 00 33    	bra       N, 0x144a <__fbopReturnNaN>

000012e0 <return8>:
    12e0:	08 01 be    	mov.d     w8, w2

000012e2 <return2>:
    12e2:	02 00 be    	mov.d     w2, w0
    12e4:	ae 00 37    	bra       0x1442 <__fbopExit>

000012e6 <___divsf3>:
    12e6:	88 9f be    	mov.d     w8, [w15++]
    12e8:	8a 9f be    	mov.d     w10, [w15++]
    12ea:	8c 1f 78    	mov.w     w12, [w15++]
    12ec:	99 00 07    	rcall     0x1420 <__funpack2>
    12ee:	a0 00 33    	bra       N, 0x1430 <__fPropagateNaN>
    12f0:	03 86 6c    	xor.w     w9, w3, w12
    12f2:	64 50 e1    	cp.w      w10, #0x4
    12f4:	2e 00 32    	bra       Z, 0x1352 <aisinfinite>
    12f6:	64 20 e1    	cp.w      w4, #0x4
    12f8:	33 00 32    	bra       Z, 0x1360 <returnZero>
    12fa:	61 50 e1    	cp.w      w10, #0x1
    12fc:	2f 00 32    	bra       Z, 0x135c <aiszero>
    12fe:	61 20 e1    	cp.w      w4, #0x1
    1300:	31 00 32    	bra       Z, 0x1364 <returnInf>

00001302 <finitenonzero>:
    1302:	85 85 55    	sub.w     w11, w5, w11
    1304:	eb 07 b0    	add.w     #0x7e, w11
    1306:	09 00 20    	mov.w     #0x0, w9
    1308:	08 04 20    	mov.w     #0x40, w8
    130a:	05 00 37    	bra       0x1316 <diventry>

0000130c <divnext>:
    130c:	08 04 44    	add.w     w8, w8, w8
    130e:	89 84 4c    	addc.w    w9, w9, w9
    1310:	0a 00 31    	bra       C, 0x1326 <divdone> <formsticky>

00001312 <divloop>:
    1312:	06 03 43    	add.w     w6, w6, w6
    1314:	87 83 4b    	addc.w    w7, w7, w7

00001316 <diventry>:
    1316:	00 01 53    	sub.w     w6, w0, w2
    1318:	81 81 5b    	subb.w    w7, w1, w3
    131a:	f8 ff 33    	bra       N, 0x130c <divnext>
    131c:	02 03 be    	mov.d     w2, w6
    131e:	08 00 a0    	bset.w    w8, #0x0
    1320:	08 04 44    	add.w     w8, w8, w8
    1322:	89 84 4c    	addc.w    w9, w9, w9
    1324:	f6 ff 39    	bra       NC, 0x1312 <divloop>

00001326 <divdone>:
    1326:	c6 39 dd    	sl.w      w7, #0x6, w3
    1328:	83 01 73    	ior.w     w6, w3, w3
    132a:	01 00 32    	bra       Z, 0x132e <stickyok>
    132c:	13 00 20    	mov.w     #0x1, w3

0000132e <stickyok>:
    132e:	89 04 d1    	lsr.w     w9, w9
    1330:	08 84 d3    	rrc.w     w8, w8
    1332:	09 98 a3    	btst.z    w9, #0x9
    1334:	05 00 32    	bra       Z, 0x1340 <guardused>
    1336:	08 00 a7    	btsc.w    w8, #0x0
    1338:	03 00 a0    	bset.w    w3, #0x0
    133a:	89 04 d1    	lsr.w     w9, w9
    133c:	08 84 d3    	rrc.w     w8, w8
    133e:	8b 05 e8    	inc.w     w11, w11

00001340 <guardused>:
    1340:	89 04 d1    	lsr.w     w9, w9
    1342:	08 84 d3    	rrc.w     w8, w8
    1344:	00 01 eb    	clr.w     w2
    1346:	02 81 d2    	rlc.w     w2, w2
    1348:	30 00 07    	rcall     0x13aa <__fpack>

0000134a <return0>:
    134a:	01 f0 a1    	bclr.w    w1, #0xf
    134c:	0c f0 a7    	btsc.w    w12, #0xf
    134e:	01 f0 a0    	bset.w    w1, #0xf
    1350:	78 00 37    	bra       0x1442 <__fbopExit>

00001352 <aisinfinite>:
    1352:	64 20 e1    	cp.w      w4, #0x4
    1354:	7a 00 32    	bra       Z, 0x144a <__fbopReturnNaN>

00001356 <return8>:
    1356:	08 01 be    	mov.d     w8, w2

00001358 <return2>:
    1358:	02 00 be    	mov.d     w2, w0
    135a:	f7 ff 37    	bra       0x134a <return0>

0000135c <aiszero>:
    135c:	61 20 e1    	cp.w      w4, #0x1
    135e:	75 00 32    	bra       Z, 0x144a <__fbopReturnNaN>

00001360 <returnZero>:
    1360:	60 00 b8    	mul.uu    w0, #0x0, w0
    1362:	f3 ff 37    	bra       0x134a <return0>

00001364 <returnInf>:
    1364:	00 00 20    	mov.w     #0x0, w0
    1366:	01 f8 27    	mov.w     #0x7f80, w1
    1368:	f0 ff 37    	bra       0x134a <return0>

0000136a <___eqsf2>:
    136a:	14 00 20    	mov.w     #0x1, w4
    136c:	b8 00 37    	bra       0x14de <__fcompare>

0000136e <___fixunssfsi>:
    136e:	00 01 be    	mov.d     w0, w2
    1370:	42 00 07    	rcall     0x13f6 <__funpack>
    1372:	04 70 a7    	btsc.w    w4, #0x7
    1374:	03 f0 a1    	bclr.w    w3, #0xf
    1376:	03 f8 a3    	btst.z    w3, #0xf
    1378:	13 00 3a    	bra       NZ, 0x13a0 <returnzero>
    137a:	65 09 b1    	sub.w     #0x96, w5
    137c:	10 00 32    	bra       Z, 0x139e <exit>
    137e:	09 00 35    	bra       LT, 0x1392 <shiftright>
    1380:	69 28 e1    	cp.w      w5, #0x9
    1382:	02 00 35    	bra       LT, 0x1388 <shiftleft>
    1384:	01 00 28    	mov.w     #0x8000, w1
    1386:	00 00 05    	retlw.w   #0x0, w0

00001388 <shiftleft>:
    1388:	00 00 40    	add.w     w0, w0, w0
    138a:	81 80 48    	addc.w    w1, w1, w1
    138c:	85 02 e9    	dec.w     w5, w5
    138e:	fc ff 3a    	bra       NZ, 0x1388 <shiftleft>
    1390:	00 00 06    	return    

00001392 <shiftright>:
    1392:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1394:	05 00 35    	bra       LT, 0x13a0 <returnzero>

00001396 <shiftrightloop>:
    1396:	81 00 d1    	lsr.w     w1, w1
    1398:	00 80 d3    	rrc.w     w0, w0
    139a:	85 02 e8    	inc.w     w5, w5
    139c:	fc ff 3a    	bra       NZ, 0x1396 <shiftrightloop>

0000139e <exit>:
    139e:	00 00 06    	return    

000013a0 <returnzero>:
    13a0:	80 00 eb    	clr.w     w1
    13a2:	00 00 05    	retlw.w   #0x0, w0

000013a4 <___floatsisf>:
    13a4:	4f 89 de    	asr.w     w1, #0xf, w2
    13a6:	82 01 78    	mov.w     w2, w3
    13a8:	b5 00 37    	bra       0x1514 <___floatdisf>

000013aa <__fpack>:
    13aa:	81 00 20    	mov.w     #0x8, w1
    13ac:	61 80 55    	sub.w     w11, #0x1, w0
    13ae:	0b 00 3d    	bra       GE, 0x13c6 <notsubnormal>
    13b0:	0b 00 20    	mov.w     #0x0, w11
    13b2:	61 fe 2f    	mov.w     #0xffe6, w1
    13b4:	01 00 e1    	cp.w      w0, w1
    13b6:	1d 00 34    	bra       LE, 0x13f2 <zerosig>

000013b8 <subnormal>:
    13b8:	82 81 71    	ior.w     w3, w2, w3
    13ba:	61 01 64    	and.w     w8, #0x1, w2
    13bc:	89 04 d1    	lsr.w     w9, w9
    13be:	08 84 d3    	rrc.w     w8, w8
    13c0:	00 00 e8    	inc.w     w0, w0
    13c2:	fa ff 3a    	bra       NZ, 0x13b8 <subnormal>
    13c4:	71 00 20    	mov.w     #0x7, w1

000013c6 <notsubnormal>:
    13c6:	61 00 64    	and.w     w8, #0x1, w0
    13c8:	03 00 70    	ior.w     w0, w3, w0
    13ca:	02 00 60    	and.w     w0, w2, w0
    13cc:	09 00 32    	bra       Z, 0x13e0 <packupandgo>
    13ce:	61 04 44    	add.w     w8, #0x1, w8
    13d0:	e0 84 4c    	addc.w    w9, #0x0, w9
    13d2:	09 88 a5    	btst.z    w9, w1
    13d4:	05 00 32    	bra       Z, 0x13e0 <packupandgo>
    13d6:	8b 05 e8    	inc.w     w11, w11
    13d8:	68 08 e1    	cp.w      w1, #0x8
    13da:	02 00 3a    	bra       NZ, 0x13e0 <packupandgo>
    13dc:	89 04 d1    	lsr.w     w9, w9
    13de:	08 84 d3    	rrc.w     w8, w8

000013e0 <packupandgo>:
    13e0:	f2 0f 20    	mov.w     #0xff, w2
    13e2:	02 58 e1    	cp.w      w11, w2
    13e4:	05 00 3d    	bra       GE, 0x13f0 <overflow>
    13e6:	c7 5d dd    	sl.w      w11, #0x7, w11
    13e8:	f9 07 b2    	and.w     #0x7f, w9
    13ea:	89 80 75    	ior.w     w11, w9, w1
    13ec:	08 00 78    	mov.w     w8, w0
    13ee:	00 00 06    	return    

000013f0 <overflow>:
    13f0:	0b f8 27    	mov.w     #0x7f80, w11

000013f2 <zerosig>:
    13f2:	8b 00 78    	mov.w     w11, w1
    13f4:	00 00 05    	retlw.w   #0x0, w0

000013f6 <__funpack>:
    13f6:	c7 0a de    	lsr.w     w1, #0x7, w5
    13f8:	f1 07 b2    	and.w     #0x7f, w1
    13fa:	f5 0f b2    	and.w     #0xff, w5
    13fc:	08 00 32    	bra       Z, 0x140e <zeroorsub>
    13fe:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1400:	02 00 32    	bra       Z, 0x1406 <nanorinf>

00001402 <finitereturn>:
    1402:	01 70 a0    	bset.w    w1, #0x7
    1404:	24 00 05    	retlw.w   #0x2, w4

00001406 <nanorinf>:
    1406:	81 0f 70    	ior.w     w0, w1, [w15]
    1408:	01 00 32    	bra       Z, 0x140c <infinite>
    140a:	04 08 05    	retlw.w   #0x80, w4

0000140c <infinite>:
    140c:	44 00 05    	retlw.w   #0x4, w4

0000140e <zeroorsub>:
    140e:	81 0f 70    	ior.w     w0, w1, [w15]
    1410:	02 00 3a    	bra       NZ, 0x1416 <subnormal>
    1412:	14 00 05    	retlw.w   #0x1, w4

00001414 <normalize>:
    1414:	85 02 e9    	dec.w     w5, w5

00001416 <subnormal>:
    1416:	00 00 40    	add.w     w0, w0, w0
    1418:	81 c0 48    	addc.b    w1, w1, w1
    141a:	fc ff 3b    	bra       NN, 0x1414 <normalize>
    141c:	01 70 a0    	bset.w    w1, #0x7
    141e:	24 00 05    	retlw.w   #0x2, w4

00001420 <__funpack2>:
    1420:	00 04 be    	mov.d     w0, w8
    1422:	e9 ff 07    	rcall     0x13f6 <__funpack>
    1424:	00 03 be    	mov.d     w0, w6
    1426:	04 05 be    	mov.d     w4, w10
    1428:	02 00 be    	mov.d     w2, w0
    142a:	e5 ff 07    	rcall     0x13f6 <__funpack>
    142c:	84 4f 75    	ior.b     w10, w4, [w15]
    142e:	00 00 06    	return    

00001430 <__fPropagateNaN>:
    1430:	02 00 be    	mov.d     w2, w0
    1432:	64 50 e1    	cp.w      w10, #0x4
    1434:	05 00 36    	bra       LEU, 0x1440 <return0>
    1436:	64 20 e1    	cp.w      w4, #0x4
    1438:	02 00 36    	bra       LEU, 0x143e <return8>
    143a:	09 68 a3    	btst.z    w9, #0x6
    143c:	01 00 3a    	bra       NZ, 0x1440 <return0>

0000143e <return8>:
    143e:	08 00 be    	mov.d     w8, w0

00001440 <return0>:
    1440:	01 60 a0    	bset.w    w1, #0x6

00001442 <__fbopExit>:
    1442:	4f 06 78    	mov.w     [--w15], w12
    1444:	4f 05 be    	mov.d     [--w15], w10
    1446:	4f 04 be    	mov.d     [--w15], w8
    1448:	00 00 06    	return    

0000144a <__fbopReturnNaN>:
    144a:	f0 ff 2f    	mov.w     #0xffff, w0
    144c:	f1 ff 27    	mov.w     #0x7fff, w1
    144e:	f9 ff 37    	bra       0x1442 <__fbopExit>

00001450 <___mulsf3>:
    1450:	88 9f be    	mov.d     w8, [w15++]
    1452:	8a 9f be    	mov.d     w10, [w15++]
    1454:	8c 1f 78    	mov.w     w12, [w15++]
    1456:	e4 ff 07    	rcall     0x1420 <__funpack2>
    1458:	eb ff 33    	bra       N, 0x1430 <__fPropagateNaN>
    145a:	03 86 6c    	xor.w     w9, w3, w12
    145c:	64 50 e1    	cp.w      w10, #0x4
    145e:	24 00 32    	bra       Z, 0x14a8 <aisinfinite>
    1460:	64 20 e1    	cp.w      w4, #0x4
    1462:	27 00 32    	bra       Z, 0x14b2 <bisinfinite>
    1464:	61 50 e1    	cp.w      w10, #0x1
    1466:	22 00 32    	bra       Z, 0x14ac <return8>
    1468:	61 20 e1    	cp.w      w4, #0x1
    146a:	21 00 32    	bra       Z, 0x14ae <return2>
    146c:	8b 85 42    	add.w     w5, w11, w11
    146e:	eb 07 b1    	sub.w     #0x7e, w11
    1470:	01 34 b8    	mul.uu    w6, w1, w8
    1472:	00 3a b8    	mul.uu    w7, w0, w4
    1474:	08 04 42    	add.w     w4, w8, w8
    1476:	89 84 4a    	addc.w    w5, w9, w9
    1478:	01 3a b8    	mul.uu    w7, w1, w4
    147a:	00 30 b8    	mul.uu    w6, w0, w0
    147c:	88 80 40    	add.w     w1, w8, w1
    147e:	09 01 4a    	addc.w    w4, w9, w2
    1480:	04 00 33    	bra       N, 0x148a <formsticky>
    1482:	00 00 40    	add.w     w0, w0, w0
    1484:	81 80 48    	addc.w    w1, w1, w1
    1486:	02 01 49    	addc.w    w2, w2, w2
    1488:	8b 05 e9    	dec.w     w11, w11

0000148a <formsticky>:
    148a:	c9 09 dd    	sl.w      w1, #0x9, w3
    148c:	83 01 70    	ior.w     w0, w3, w3
    148e:	01 00 32    	bra       Z, 0x1492 <formRandSig>
    1490:	13 00 20    	mov.w     #0x1, w3

00001492 <formRandSig>:
    1492:	c8 14 de    	lsr.w     w2, #0x8, w9
    1494:	48 14 dd    	sl.w      w2, #0x8, w8
    1496:	47 09 de    	lsr.w     w1, #0x7, w2
    1498:	12 00 b2    	and.w     #0x1, w2
    149a:	c8 08 de    	lsr.w     w1, #0x8, w1
    149c:	08 84 70    	ior.w     w1, w8, w8
    149e:	85 ff 07    	rcall     0x13aa <__fpack>

000014a0 <return0>:
    14a0:	01 f0 a1    	bclr.w    w1, #0xf
    14a2:	0c f0 a7    	btsc.w    w12, #0xf
    14a4:	01 f0 a0    	bset.w    w1, #0xf
    14a6:	cd ff 37    	bra       0x1442 <__fbopExit>

000014a8 <aisinfinite>:
    14a8:	61 20 e1    	cp.w      w4, #0x1
    14aa:	cf ff 32    	bra       Z, 0x144a <__fbopReturnNaN>

000014ac <return8>:
    14ac:	08 01 be    	mov.d     w8, w2

000014ae <return2>:
    14ae:	02 00 be    	mov.d     w2, w0
    14b0:	f7 ff 37    	bra       0x14a0 <return0>

000014b2 <bisinfinite>:
    14b2:	61 50 e1    	cp.w      w10, #0x1
    14b4:	fc ff 3a    	bra       NZ, 0x14ae <return2>
    14b6:	c9 ff 37    	bra       0x144a <__fbopReturnNaN>

000014b8 <___udivsi3>:
    14b8:	60 22 b8    	mul.uu    w4, #0x0, w4
    14ba:	06 02 20    	mov.w     #0x20, w6

000014bc <nextbit>:
    14bc:	00 00 d0    	sl.w      w0, w0
    14be:	81 80 d2    	rlc.w     w1, w1
    14c0:	04 82 d2    	rlc.w     w4, w4
    14c2:	85 82 d2    	rlc.w     w5, w5
    14c4:	00 00 a0    	bset.w    w0, #0x0
    14c6:	02 02 52    	sub.w     w4, w2, w4
    14c8:	83 82 5a    	subb.w    w5, w3, w5
    14ca:	03 00 31    	bra       C, 0x14d2 <iterate>
    14cc:	02 02 42    	add.w     w4, w2, w4
    14ce:	83 82 4a    	addc.w    w5, w3, w5
    14d0:	00 00 a1    	bclr.w    w0, #0x0

000014d2 <iterate>:
    14d2:	06 03 e9    	dec.w     w6, w6
    14d4:	f3 ff 3a    	bra       NZ, 0x14bc <nextbit>
    14d6:	00 00 06    	return    

000014d8 <___umodsi3>:
    14d8:	ef ff 07    	rcall     0x14b8 <___udivsi3>
    14da:	04 00 be    	mov.d     w4, w0
    14dc:	00 00 06    	return    

000014de <__fcompare>:
    14de:	88 9f be    	mov.d     w8, [w15++]
    14e0:	8a 9f be    	mov.d     w10, [w15++]
    14e2:	84 1f 78    	mov.w     w4, [w15++]
    14e4:	9d ff 07    	rcall     0x1420 <__funpack2>
    14e6:	4f 00 78    	mov.w     [--w15], w0
    14e8:	11 00 33    	bra       N, 0x150c <exit>
    14ea:	f0 ff 2f    	mov.w     #0xffff, w0
    14ec:	83 8f 6c    	xor.w     w9, w3, [w15]
    14ee:	06 00 3b    	bra       NN, 0x14fc <comparemag>
    14f0:	04 05 65    	and.w     w10, w4, w10
    14f2:	0a 00 a7    	btsc.w    w10, #0x0
    14f4:	08 00 37    	bra       0x1506 <returnEqual>
    14f6:	09 f0 a6    	btss.w    w9, #0xf
    14f8:	10 00 20    	mov.w     #0x1, w0
    14fa:	08 00 37    	bra       0x150c <exit>

000014fc <comparemag>:
    14fc:	82 0f 54    	sub.w     w8, w2, [w15]
    14fe:	83 8f 5c    	subb.w    w9, w3, [w15]
    1500:	03 00 39    	bra       NC, 0x1508 <adjust>
    1502:	10 00 20    	mov.w     #0x1, w0
    1504:	01 00 3e    	bra       GTU, 0x1508 <adjust>

00001506 <returnEqual>:
    1506:	00 00 20    	mov.w     #0x0, w0

00001508 <adjust>:
    1508:	09 f0 a7    	btsc.w    w9, #0xf
    150a:	00 00 ea    	neg.w     w0, w0

0000150c <exit>:
    150c:	4f 05 be    	mov.d     [--w15], w10
    150e:	4f 04 be    	mov.d     [--w15], w8
    1510:	00 00 e0    	cp0.w     w0
    1512:	00 00 06    	return    

00001514 <___floatdisf>:
    1514:	88 1f 78    	mov.w     w8, [w15++]
    1516:	03 04 78    	mov.w     w3, w8
    1518:	03 00 e0    	cp0.w     w3
    151a:	07 00 3d    	bra       GE, 0x152a <notspecial>

0000151c <negative>:
    151c:	60 00 10    	subr.w    w0, #0x0, w0
    151e:	e0 80 18    	subbr.w   w1, #0x0, w1
    1520:	60 01 19    	subbr.w   w2, #0x0, w2
    1522:	e0 81 19    	subbr.w   w3, #0x0, w3
    1524:	02 00 3b    	bra       NN, 0x152a <notspecial>
    1526:	01 f0 2d    	mov.w     #0xdf00, w1
    1528:	03 00 37    	bra       0x1530 <return0>

0000152a <notspecial>:
    152a:	04 00 07    	rcall     0x1534 <___floatundisf>
    152c:	08 f0 a7    	btsc.w    w8, #0xf
    152e:	01 f0 a0    	bset.w    w1, #0xf

00001530 <return0>:
    1530:	4f 04 78    	mov.w     [--w15], w8
    1532:	00 00 06    	return    

00001534 <___floatundisf>:
    1534:	88 9f be    	mov.d     w8, [w15++]
    1536:	8a 9f be    	mov.d     w10, [w15++]
    1538:	00 82 70    	ior.w     w1, w0, w4
    153a:	04 02 71    	ior.w     w2, w4, w4
    153c:	04 82 71    	ior.w     w3, w4, w4
    153e:	26 00 32    	bra       Z, 0x158c <return0>
    1540:	00 04 be    	mov.d     w0, w8
    1542:	02 00 be    	mov.d     w2, w0
    1544:	60 11 b8    	mul.uu    w2, #0x0, w2
    1546:	6b 09 20    	mov.w     #0x96, w11
    1548:	95 02 20    	mov.w     #0x29, w5
    154a:	01 82 cf    	ff1l      w1, w4
    154c:	0a 00 39    	bra       NC, 0x1562 <fixshift>
    154e:	05 41 b1    	sub.b     #0x10, w5
    1550:	00 82 cf    	ff1l      w0, w4
    1552:	07 00 39    	bra       NC, 0x1562 <fixshift>
    1554:	05 41 b1    	sub.b     #0x10, w5
    1556:	09 82 cf    	ff1l      w9, w4
    1558:	04 00 39    	bra       NC, 0x1562 <fixshift>
    155a:	05 41 b1    	sub.b     #0x10, w5
    155c:	08 82 cf    	ff1l      w8, w4
    155e:	01 00 39    	bra       NC, 0x1562 <fixshift>
    1560:	05 41 b1    	sub.b     #0x10, w5

00001562 <fixshift>:
    1562:	05 42 52    	sub.b     w4, w5, w4
    1564:	12 00 32    	bra       Z, 0x158a <round>
    1566:	0a 00 3b    	bra       NN, 0x157c <shiftleft>

00001568 <shiftright>:
    1568:	82 81 71    	ior.w     w3, w2, w3
    156a:	61 01 64    	and.w     w8, #0x1, w2
    156c:	81 00 d1    	lsr.w     w1, w1
    156e:	00 80 d3    	rrc.w     w0, w0
    1570:	89 84 d3    	rrc.w     w9, w9
    1572:	08 84 d3    	rrc.w     w8, w8
    1574:	8b 05 e8    	inc.w     w11, w11
    1576:	04 42 e8    	inc.b     w4, w4
    1578:	f7 ff 3a    	bra       NZ, 0x1568 <shiftright>
    157a:	07 00 37    	bra       0x158a <round>

0000157c <shiftleft>:
    157c:	08 04 44    	add.w     w8, w8, w8
    157e:	89 84 4c    	addc.w    w9, w9, w9
    1580:	00 00 48    	addc.w    w0, w0, w0
    1582:	81 80 48    	addc.w    w1, w1, w1
    1584:	8b 05 e9    	dec.w     w11, w11
    1586:	04 42 e9    	dec.b     w4, w4
    1588:	f9 ff 3a    	bra       NZ, 0x157c <shiftleft>

0000158a <round>:
    158a:	0f ff 07    	rcall     0x13aa <__fpack>

0000158c <return0>:
    158c:	4f 05 be    	mov.d     [--w15], w10
    158e:	4f 04 be    	mov.d     [--w15], w8
    1590:	00 00 06    	return    

00001592 <_prout>:
    1592:	88 1f 78    	mov.w     w8, [w15++]
    1594:	02 04 78    	mov.w     w2, w8
    1596:	08 01 78    	mov.w     w8, w2
    1598:	c4 00 07    	rcall     0x1722 <_memcpy>
    159a:	08 00 40    	add.w     w0, w8, w0
    159c:	4f 04 78    	mov.w     [--w15], w8
    159e:	00 00 06    	return    

000015a0 <__sprintf_cdnopuxX>:
    15a0:	00 00 fa    	lnk       #0x0
    15a2:	88 1f 78    	mov.w     w8, [w15++]
    15a4:	00 04 78    	mov.w     w0, w8
    15a6:	ea 81 57    	sub.w     w15, #0xa, w3
    15a8:	3f b9 97    	mov.w     [w15-10], w2
    15aa:	88 00 78    	mov.w     w8, w1
    15ac:	20 59 21    	mov.w     #0x1592, w0
    15ae:	07 00 07    	rcall     0x15be <___Printf_cdnopuxX>
    15b0:	00 00 e0    	cp0.w     w0
    15b2:	02 00 35    	bra       LT, 0x15b8 <.L3>
    15b4:	80 40 eb    	clr.b     w1
    15b6:	01 74 78    	mov.b     w1, [w8+w0]

000015b8 <.L3>:
    15b8:	4f 04 78    	mov.w     [--w15], w8
    15ba:	00 80 fa    	ulnk      
    15bc:	00 00 06    	return    

000015be <___Printf_cdnopuxX>:
    15be:	62 00 fa    	lnk       #0x62
    15c0:	88 9f be    	mov.d     w8, [w15++]
    15c2:	8a 1f 78    	mov.w     w10, [w15++]
    15c4:	00 05 78    	mov.w     w0, w10
    15c6:	81 04 78    	mov.w     w1, w9
    15c8:	02 04 78    	mov.w     w2, w8
    15ca:	83 00 78    	mov.w     w3, w1
    15cc:	80 f9 2f    	mov.w     #0xff98, w0
    15ce:	0f 00 40    	add.w     w0, w15, w0
    15d0:	77 01 07    	rcall     0x18c0 <__Vacopy>
    15d2:	9a 97 9f    	mov.w     w10, [w15-94]
    15d4:	a9 97 9f    	mov.w     w9, [w15-92]
    15d6:	00 00 eb    	clr.w     w0
    15d8:	b0 9f 9f    	mov.w     w0, [w15-74]

000015da <.L31>:
    15da:	18 85 fb    	ze        [w8], w10
    15dc:	8a 04 fb    	se        w10, w9
    15de:	0a 05 ea    	neg.w     w10, w10
    15e0:	4f 55 de    	lsr.w     w10, #0xf, w10
    15e2:	50 02 20    	mov.w     #0x25, w0
    15e4:	80 8f 54    	sub.w     w9, w0, [w15]
    15e6:	0d 00 32    	bra       Z, 0x1602 <.L3>
    15e8:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    15ea:	0b 00 3a    	bra       NZ, 0x1602 <.L3>
    15ec:	0a 01 78    	mov.w     w10, w2
    15ee:	88 00 78    	mov.w     w8, w1
    15f0:	2f 90 97    	mov.w     [w15-92], w0
    15f2:	9f 91 97    	mov.w     [w15-94], w3
    15f4:	03 00 01    	call      w3
    15f6:	a0 97 9f    	mov.w     w0, [w15-92]
    15f8:	00 00 e0    	cp0.w     w0
    15fa:	8e 00 32    	bra       Z, 0x1718 <.L27>
    15fc:	3f 98 97    	mov.w     [w15-74], w0
    15fe:	00 00 e8    	inc.w     w0, w0
    1600:	b0 9f 9f    	mov.w     w0, [w15-74]

00001602 <.L3>:
    1602:	0a 04 44    	add.w     w8, w10, w8
    1604:	50 02 20    	mov.w     #0x25, w0
    1606:	80 8f 54    	sub.w     w9, w0, [w15]
    1608:	04 00 32    	bra       Z, 0x1612 <.L5>
    160a:	09 00 e0    	cp0.w     w9
    160c:	e6 ff 3a    	bra       NZ, 0x15da <.L31>
    160e:	3f 98 97    	mov.w     [w15-74], w0
    1610:	84 00 37    	bra       0x171a <.L4>

00001612 <.L5>:
    1612:	00 00 eb    	clr.w     w0
    1614:	90 9f 9f    	mov.w     w0, [w15-78]
    1616:	80 9f 9f    	mov.w     w0, [w15-80]
    1618:	f0 97 9f    	mov.w     w0, [w15-82]
    161a:	e0 97 9f    	mov.w     w0, [w15-84]
    161c:	d0 97 9f    	mov.w     w0, [w15-86]
    161e:	c0 97 9f    	mov.w     w0, [w15-88]
    1620:	07 00 37    	bra       0x1630 <.L34>

00001622 <.L8>:
    1622:	81 10 21    	mov.w     #0x1108, w1
    1624:	01 00 50    	sub.w     w0, w1, w0
    1626:	00 00 40    	add.w     w0, w0, w0
    1628:	c1 0f 21    	mov.w     #0x10fc, w1
    162a:	61 00 78    	mov.w     [w1+w0], w0
    162c:	df 98 97    	mov.w     [w15-70], w1
    162e:	01 00 70    	ior.w     w0, w1, w0

00001630 <.L34>:
    1630:	d0 9f 9f    	mov.w     w0, [w15-70]
    1632:	88 04 78    	mov.w     w8, w9
    1634:	09 04 78    	mov.w     w9, w8
    1636:	38 45 78    	mov.b     [w8++], w10
    1638:	8a 00 fb    	se        w10, w1
    163a:	80 10 21    	mov.w     #0x1108, w0
    163c:	79 00 07    	rcall     0x1730 <_strchr>
    163e:	00 00 e0    	cp0.w     w0
    1640:	f0 ff 3a    	bra       NZ, 0x1622 <.L8>
    1642:	a1 c2 b3    	mov.b     #0x2a, w1
    1644:	81 4f 55    	sub.b     w10, w1, [w15]
    1646:	0e 00 3a    	bra       NZ, 0x1664 <.L9>
    1648:	cf 88 97    	mov.w     [w15-104], w1
    164a:	01 80 e9    	dec2.w    w1, w0
    164c:	c0 8f 9f    	mov.w     w0, [w15-104]
    164e:	10 00 78    	mov.w     [w0], w0
    1650:	c0 9f 9f    	mov.w     w0, [w15-72]
    1652:	00 00 e0    	cp0.w     w0
    1654:	05 00 3d    	bra       GE, 0x1660 <.L10>
    1656:	00 00 ea    	neg.w     w0, w0
    1658:	c0 9f 9f    	mov.w     w0, [w15-72]
    165a:	5f 98 97    	mov.w     [w15-70], w0
    165c:	00 20 a0    	bset.w    w0, #0x2
    165e:	d0 9f 9f    	mov.w     w0, [w15-70]

00001660 <.L10>:
    1660:	09 04 e8    	inc.w     w9, w8
    1662:	0f 00 37    	bra       0x1682 <.L11>

00001664 <.L9>:
    1664:	c0 9f 9f    	mov.w     w0, [w15-72]
    1666:	00 00 eb    	clr.w     w0
    1668:	05 00 37    	bra       0x1674 <.L32>

0000166a <.L14>:
    166a:	f2 ff 27    	mov.w     #0x7fff, w2
    166c:	82 0f 50    	sub.w     w0, w2, [w15]
    166e:	02 00 32    	bra       Z, 0x1674 <.L32>
    1670:	6a 01 b9    	mul.su    w0, #0xa, w2
    1672:	02 80 40    	add.w     w1, w2, w0

00001674 <.L32>:
    1674:	09 04 78    	mov.w     w9, w8
    1676:	88 04 78    	mov.w     w8, w9
    1678:	b9 00 fb    	se        [w9++], w1
    167a:	01 03 b1    	sub.w     #0x30, w1
    167c:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    167e:	f5 ff 36    	bra       LEU, 0x166a <.L14>
    1680:	c0 9f 9f    	mov.w     w0, [w15-72]

00001682 <.L11>:
    1682:	e0 c2 b3    	mov.b     #0x2e, w0
    1684:	98 4f 10    	subr.b    w0, [w8], [w15]
    1686:	02 00 32    	bra       Z, 0x168c <.L15>
    1688:	00 80 eb    	setm.w    w0
    168a:	19 00 37    	bra       0x16be <.L35>

0000168c <.L15>:
    168c:	a0 c2 b3    	mov.b     #0x2a, w0
    168e:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1690:	07 00 3a    	bra       NZ, 0x16a0 <.L17>
    1692:	cf 88 97    	mov.w     [w15-104], w1
    1694:	01 80 e9    	dec2.w    w1, w0
    1696:	c0 8f 9f    	mov.w     w0, [w15-104]
    1698:	10 00 78    	mov.w     [w0], w0
    169a:	a0 9f 9f    	mov.w     w0, [w15-76]
    169c:	08 04 e8    	inc.w     w8, w8
    169e:	10 00 37    	bra       0x16c0 <.L16>

000016a0 <.L17>:
    16a0:	00 00 eb    	clr.w     w0
    16a2:	a0 9f 9f    	mov.w     w0, [w15-76]
    16a4:	88 00 78    	mov.w     w8, w1
    16a6:	05 00 37    	bra       0x16b2 <.L33>

000016a8 <.L20>:
    16a8:	f3 ff 27    	mov.w     #0x7fff, w3
    16aa:	83 0f 50    	sub.w     w0, w3, [w15]
    16ac:	02 00 32    	bra       Z, 0x16b2 <.L33>
    16ae:	6a 02 b9    	mul.su    w0, #0xa, w4
    16b0:	04 00 41    	add.w     w2, w4, w0

000016b2 <.L33>:
    16b2:	01 04 78    	mov.w     w1, w8
    16b4:	88 00 78    	mov.w     w8, w1
    16b6:	31 01 fb    	se        [w1++], w2
    16b8:	02 03 b1    	sub.w     #0x30, w2
    16ba:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    16bc:	f5 ff 36    	bra       LEU, 0x16a8 <.L20>

000016be <.L35>:
    16be:	a0 9f 9f    	mov.w     w0, [w15-76]

000016c0 <.L16>:
    16c0:	98 44 78    	mov.b     [w8], w9
    16c2:	89 00 fb    	se        w9, w1
    16c4:	40 0f 21    	mov.w     #0x10f4, w0
    16c6:	34 00 07    	rcall     0x1730 <_strchr>
    16c8:	00 00 e0    	cp0.w     w0
    16ca:	02 00 32    	bra       Z, 0x16d0 <.L25>
    16cc:	08 04 e8    	inc.w     w8, w8
    16ce:	01 00 37    	bra       0x16d2 <.L21>

000016d0 <.L25>:
    16d0:	80 44 eb    	clr.b     w9

000016d2 <.L21>:
    16d2:	c9 7f 9f    	mov.b     w9, [w15-68]
    16d4:	80 c6 b3    	mov.b     #0x68, w0
    16d6:	80 cf 54    	sub.b     w9, w0, [w15]
    16d8:	04 00 3a    	bra       NZ, 0x16e2 <.L22>
    16da:	98 cf 14    	subr.b    w9, [w8], [w15]
    16dc:	0a 00 3a    	bra       NZ, 0x16f2 <.L23>
    16de:	66 40 50    	sub.b     w0, #0x6, w0
    16e0:	06 00 37    	bra       0x16ee <.L36>

000016e2 <.L22>:
    16e2:	c0 c6 b3    	mov.b     #0x6c, w0
    16e4:	80 cf 54    	sub.b     w9, w0, [w15]
    16e6:	05 00 3a    	bra       NZ, 0x16f2 <.L23>
    16e8:	98 cf 14    	subr.b    w9, [w8], [w15]
    16ea:	03 00 3a    	bra       NZ, 0x16f2 <.L23>
    16ec:	65 40 40    	add.b     w0, #0x5, w0

000016ee <.L36>:
    16ee:	c0 7f 9f    	mov.b     w0, [w15-68]
    16f0:	08 04 e8    	inc.w     w8, w8

000016f2 <.L23>:
    16f2:	18 01 fb    	se        [w8], w2
    16f4:	e3 fb 2f    	mov.w     #0xffbe, w3
    16f6:	8f 81 41    	add.w     w3, w15, w3
    16f8:	81 f9 2f    	mov.w     #0xff98, w1
    16fa:	8f 80 40    	add.w     w1, w15, w1
    16fc:	a0 f9 2f    	mov.w     #0xff9a, w0
    16fe:	0f 00 40    	add.w     w0, w15, w0
    1700:	e1 00 07    	rcall     0x18c4 <___Putfld_cdnopuxX>
    1702:	00 00 e0    	cp0.w     w0
    1704:	09 00 3a    	bra       NZ, 0x1718 <.L27>
    1706:	e1 fb 2f    	mov.w     #0xffbe, w1
    1708:	8f 80 40    	add.w     w1, w15, w1
    170a:	a0 f9 2f    	mov.w     #0xff9a, w0
    170c:	0f 00 40    	add.w     w0, w15, w0
    170e:	1c 00 07    	rcall     0x1748 <__Puttxt>
    1710:	00 00 e0    	cp0.w     w0
    1712:	02 00 35    	bra       LT, 0x1718 <.L27>
    1714:	08 04 e8    	inc.w     w8, w8
    1716:	61 ff 37    	bra       0x15da <.L31>

00001718 <.L27>:
    1718:	00 80 eb    	setm.w    w0

0000171a <.L4>:
    171a:	4f 05 78    	mov.w     [--w15], w10
    171c:	4f 04 be    	mov.d     [--w15], w8
    171e:	00 80 fa    	ulnk      
    1720:	00 00 06    	return    

00001722 <_memcpy>:
    1722:	80 01 78    	mov.w     w0, w3
    1724:	02 00 37    	bra       0x172a <.L2>

00001726 <.L3>:
    1726:	b1 59 78    	mov.b     [w1++], [w3++]
    1728:	02 01 e9    	dec.w     w2, w2

0000172a <.L2>:
    172a:	02 00 e0    	cp0.w     w2
    172c:	fc ff 3a    	bra       NZ, 0x1726 <.L3>
    172e:	00 00 06    	return    

00001730 <_strchr>:
    1730:	02 00 37    	bra       0x1736 <.L2>

00001732 <.L4>:
    1732:	03 04 e0    	cp0.b     w3
    1734:	06 00 32    	bra       Z, 0x1742 <.L5>

00001736 <.L2>:
    1736:	00 01 78    	mov.w     w0, w2
    1738:	02 00 78    	mov.w     w2, w0
    173a:	b0 41 78    	mov.b     [w0++], w3
    173c:	81 cf 51    	sub.b     w3, w1, [w15]
    173e:	f9 ff 3a    	bra       NZ, 0x1732 <.L4>
    1740:	01 00 37    	bra       0x1744 <.L3>

00001742 <.L5>:
    1742:	00 01 eb    	clr.w     w2

00001744 <.L3>:
    1744:	02 00 78    	mov.w     w2, w0
    1746:	00 00 06    	return    

00001748 <__Puttxt>:
    1748:	04 00 fa    	lnk       #0x4
    174a:	88 9f be    	mov.d     w8, [w15++]
    174c:	8a 9f be    	mov.d     w10, [w15++]
    174e:	8c 1f 78    	mov.w     w12, [w15++]
    1750:	00 04 78    	mov.w     w0, w8
    1752:	01 06 78    	mov.w     w1, w12
    1754:	f8 0d 90    	mov.w     [w8+30], w11
    1756:	78 00 90    	mov.w     [w8+14], w0
    1758:	80 85 55    	sub.w     w11, w0, w11
    175a:	08 08 90    	mov.w     [w8+16], w0
    175c:	80 85 55    	sub.w     w11, w0, w11
    175e:	18 08 90    	mov.w     [w8+18], w0
    1760:	80 85 55    	sub.w     w11, w0, w11
    1762:	28 08 90    	mov.w     [w8+20], w0
    1764:	80 85 55    	sub.w     w11, w0, w11
    1766:	38 08 90    	mov.w     [w8+22], w0
    1768:	80 85 55    	sub.w     w11, w0, w11
    176a:	48 08 90    	mov.w     [w8+24], w0
    176c:	80 85 55    	sub.w     w11, w0, w11
    176e:	00 02 22    	mov.w     #0x2020, w0
    1770:	90 bf 9f    	mov.w     w0, [w15-14]
    1772:	00 03 23    	mov.w     #0x3030, w0
    1774:	a0 bf 9f    	mov.w     w0, [w15-12]
    1776:	08 10 90    	mov.w     [w8+32], w0
    1778:	00 28 a3    	btst.z    w0, #0x2
    177a:	15 00 3a    	bra       NZ, 0x17a6 <.L2>
    177c:	0b 00 e0    	cp0.w     w11
    177e:	13 00 34    	bra       LE, 0x17a6 <.L2>
    1780:	0b 05 78    	mov.w     w11, w10

00001782 <.L5>:
    1782:	8a 04 78    	mov.w     w10, w9
    1784:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    1786:	01 00 36    	bra       LEU, 0x178a <.L3>
    1788:	29 00 20    	mov.w     #0x2, w9

0000178a <.L3>:
    178a:	c8 01 90    	mov.w     [w8+8], w3
    178c:	09 01 78    	mov.w     w9, w2
    178e:	ee 80 57    	sub.w     w15, #0xe, w1
    1790:	58 00 90    	mov.w     [w8+10], w0
    1792:	03 00 01    	call      w3
    1794:	50 04 98    	mov.w     w0, [w8+10]
    1796:	00 00 e0    	cp0.w     w0
    1798:	8c 00 32    	bra       Z, 0x18b2 <.L29>
    179a:	68 08 90    	mov.w     [w8+28], w0
    179c:	09 00 40    	add.w     w0, w9, w0
    179e:	60 0c 98    	mov.w     w0, [w8+28]
    17a0:	09 05 55    	sub.w     w10, w9, w10
    17a2:	42 40 a9    	bclr.b    0x42, #0x2
    17a4:	ee ff 3c    	bra       GT, 0x1782 <.L5>

000017a6 <.L2>:
    17a6:	78 01 90    	mov.w     [w8+14], w2
    17a8:	02 00 e0    	cp0.w     w2
    17aa:	0c 00 34    	bra       LE, 0x17c4 <.L6>
    17ac:	c8 01 90    	mov.w     [w8+8], w3
    17ae:	8c 00 78    	mov.w     w12, w1
    17b0:	58 00 90    	mov.w     [w8+10], w0
    17b2:	03 00 01    	call      w3
    17b4:	50 04 98    	mov.w     w0, [w8+10]
    17b6:	80 80 eb    	setm.w    w1
    17b8:	00 00 e0    	cp0.w     w0
    17ba:	7c 00 32    	bra       Z, 0x18b4 <.L4>
    17bc:	e8 08 90    	mov.w     [w8+28], w1
    17be:	78 00 90    	mov.w     [w8+14], w0
    17c0:	00 80 40    	add.w     w1, w0, w0
    17c2:	60 0c 98    	mov.w     w0, [w8+28]

000017c4 <.L6>:
    17c4:	88 0c 90    	mov.w     [w8+16], w9

000017c6 <.L30>:
    17c6:	09 00 e0    	cp0.w     w9
    17c8:	11 00 34    	bra       LE, 0x17ec <.L7>
    17ca:	09 05 78    	mov.w     w9, w10
    17cc:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    17ce:	01 00 36    	bra       LEU, 0x17d2 <.L8>
    17d0:	2a 00 20    	mov.w     #0x2, w10

000017d2 <.L8>:
    17d2:	c8 01 90    	mov.w     [w8+8], w3
    17d4:	0a 01 78    	mov.w     w10, w2
    17d6:	ec 80 57    	sub.w     w15, #0xc, w1
    17d8:	58 00 90    	mov.w     [w8+10], w0
    17da:	03 00 01    	call      w3
    17dc:	50 04 98    	mov.w     w0, [w8+10]
    17de:	00 00 e0    	cp0.w     w0
    17e0:	68 00 32    	bra       Z, 0x18b2 <.L29>
    17e2:	68 08 90    	mov.w     [w8+28], w0
    17e4:	0a 00 40    	add.w     w0, w10, w0
    17e6:	60 0c 98    	mov.w     w0, [w8+28]
    17e8:	8a 84 54    	sub.w     w9, w10, w9
    17ea:	ed ff 37    	bra       0x17c6 <.L30>

000017ec <.L7>:
    17ec:	18 09 90    	mov.w     [w8+18], w2
    17ee:	02 00 e0    	cp0.w     w2
    17f0:	0c 00 34    	bra       LE, 0x180a <.L10>
    17f2:	c8 01 90    	mov.w     [w8+8], w3
    17f4:	e8 00 90    	mov.w     [w8+12], w1
    17f6:	58 00 90    	mov.w     [w8+10], w0
    17f8:	03 00 01    	call      w3
    17fa:	50 04 98    	mov.w     w0, [w8+10]
    17fc:	80 80 eb    	setm.w    w1
    17fe:	00 00 e0    	cp0.w     w0
    1800:	59 00 32    	bra       Z, 0x18b4 <.L4>
    1802:	e8 08 90    	mov.w     [w8+28], w1
    1804:	18 08 90    	mov.w     [w8+18], w0
    1806:	00 80 40    	add.w     w1, w0, w0
    1808:	60 0c 98    	mov.w     w0, [w8+28]

0000180a <.L10>:
    180a:	a8 0c 90    	mov.w     [w8+20], w9

0000180c <.L31>:
    180c:	09 00 e0    	cp0.w     w9
    180e:	11 00 34    	bra       LE, 0x1832 <.L11>
    1810:	09 05 78    	mov.w     w9, w10
    1812:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1814:	01 00 36    	bra       LEU, 0x1818 <.L12>
    1816:	2a 00 20    	mov.w     #0x2, w10

00001818 <.L12>:
    1818:	c8 01 90    	mov.w     [w8+8], w3
    181a:	0a 01 78    	mov.w     w10, w2
    181c:	ec 80 57    	sub.w     w15, #0xc, w1
    181e:	58 00 90    	mov.w     [w8+10], w0
    1820:	03 00 01    	call      w3
    1822:	50 04 98    	mov.w     w0, [w8+10]
    1824:	00 00 e0    	cp0.w     w0
    1826:	45 00 32    	bra       Z, 0x18b2 <.L29>
    1828:	68 08 90    	mov.w     [w8+28], w0
    182a:	0a 00 40    	add.w     w0, w10, w0
    182c:	60 0c 98    	mov.w     w0, [w8+28]
    182e:	8a 84 54    	sub.w     w9, w10, w9
    1830:	ed ff 37    	bra       0x180c <.L31>

00001832 <.L11>:
    1832:	38 09 90    	mov.w     [w8+22], w2
    1834:	02 00 e0    	cp0.w     w2
    1836:	0e 00 34    	bra       LE, 0x1854 <.L14>
    1838:	e8 00 90    	mov.w     [w8+12], w1
    183a:	18 08 90    	mov.w     [w8+18], w0
    183c:	80 80 40    	add.w     w1, w0, w1
    183e:	c8 01 90    	mov.w     [w8+8], w3
    1840:	58 00 90    	mov.w     [w8+10], w0
    1842:	03 00 01    	call      w3
    1844:	50 04 98    	mov.w     w0, [w8+10]
    1846:	80 80 eb    	setm.w    w1
    1848:	00 00 e0    	cp0.w     w0
    184a:	34 00 32    	bra       Z, 0x18b4 <.L4>
    184c:	e8 08 90    	mov.w     [w8+28], w1
    184e:	38 08 90    	mov.w     [w8+22], w0
    1850:	00 80 40    	add.w     w1, w0, w0
    1852:	60 0c 98    	mov.w     w0, [w8+28]

00001854 <.L14>:
    1854:	c8 0c 90    	mov.w     [w8+24], w9

00001856 <.L32>:
    1856:	09 00 e0    	cp0.w     w9
    1858:	11 00 34    	bra       LE, 0x187c <.L15>
    185a:	09 05 78    	mov.w     w9, w10
    185c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    185e:	01 00 36    	bra       LEU, 0x1862 <.L16>
    1860:	2a 00 20    	mov.w     #0x2, w10

00001862 <.L16>:
    1862:	c8 01 90    	mov.w     [w8+8], w3
    1864:	0a 01 78    	mov.w     w10, w2
    1866:	ec 80 57    	sub.w     w15, #0xc, w1
    1868:	58 00 90    	mov.w     [w8+10], w0
    186a:	03 00 01    	call      w3
    186c:	50 04 98    	mov.w     w0, [w8+10]
    186e:	00 00 e0    	cp0.w     w0
    1870:	20 00 32    	bra       Z, 0x18b2 <.L29>
    1872:	68 08 90    	mov.w     [w8+28], w0
    1874:	0a 00 40    	add.w     w0, w10, w0
    1876:	60 0c 98    	mov.w     w0, [w8+28]
    1878:	8a 84 54    	sub.w     w9, w10, w9
    187a:	ed ff 37    	bra       0x1856 <.L32>

0000187c <.L15>:
    187c:	08 10 90    	mov.w     [w8+32], w0
    187e:	80 00 eb    	clr.w     w1
    1880:	00 28 a3    	btst.z    w0, #0x2
    1882:	18 00 32    	bra       Z, 0x18b4 <.L4>
    1884:	0b 00 e0    	cp0.w     w11
    1886:	16 00 34    	bra       LE, 0x18b4 <.L4>
    1888:	8b 04 78    	mov.w     w11, w9

0000188a <.L19>:
    188a:	09 05 78    	mov.w     w9, w10
    188c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    188e:	01 00 36    	bra       LEU, 0x1892 <.L18>
    1890:	2a 00 20    	mov.w     #0x2, w10

00001892 <.L18>:
    1892:	c8 01 90    	mov.w     [w8+8], w3
    1894:	0a 01 78    	mov.w     w10, w2
    1896:	ee 80 57    	sub.w     w15, #0xe, w1
    1898:	58 00 90    	mov.w     [w8+10], w0
    189a:	03 00 01    	call      w3
    189c:	50 04 98    	mov.w     w0, [w8+10]
    189e:	00 00 e0    	cp0.w     w0
    18a0:	08 00 32    	bra       Z, 0x18b2 <.L29>
    18a2:	68 08 90    	mov.w     [w8+28], w0
    18a4:	0a 00 40    	add.w     w0, w10, w0
    18a6:	60 0c 98    	mov.w     w0, [w8+28]
    18a8:	8a 84 54    	sub.w     w9, w10, w9
    18aa:	42 40 a9    	bclr.b    0x42, #0x2
    18ac:	ee ff 3c    	bra       GT, 0x188a <.L19>
    18ae:	80 00 eb    	clr.w     w1
    18b0:	01 00 37    	bra       0x18b4 <.L4>

000018b2 <.L29>:
    18b2:	80 80 eb    	setm.w    w1

000018b4 <.L4>:
    18b4:	01 00 78    	mov.w     w1, w0
    18b6:	4f 06 78    	mov.w     [--w15], w12
    18b8:	4f 05 be    	mov.d     [--w15], w10
    18ba:	4f 04 be    	mov.d     [--w15], w8
    18bc:	00 80 fa    	ulnk      
    18be:	00 00 06    	return    

000018c0 <__Vacopy>:
    18c0:	01 08 78    	mov.w     w1, [w0]
    18c2:	00 00 06    	return    

000018c4 <___Putfld_cdnopuxX>:
    18c4:	88 9f be    	mov.d     w8, [w15++]
    18c6:	8a 9f be    	mov.d     w10, [w15++]
    18c8:	e4 c6 b3    	mov.b     #0x6e, w4
    18ca:	84 4f 51    	sub.b     w2, w4, [w15]
    18cc:	be 00 32    	bra       Z, 0x1a4a <.L7>
    18ce:	10 00 3c    	bra       GT, 0x18f0 <.L9>
    18d0:	6b 42 52    	sub.b     w4, #0xb, w4
    18d2:	84 4f 51    	sub.b     w2, w4, [w15]
    18d4:	18 00 32    	bra       Z, 0x1906 <.L5>
    18d6:	05 00 3c    	bra       GT, 0x18e2 <.L10>
    18d8:	54 c2 b3    	mov.b     #0x25, w4
    18da:	84 4f 51    	sub.b     w2, w4, [w15]
    18dc:	f6 00 32    	bra       Z, 0x1aca <.L3>
    18de:	84 c5 b3    	mov.b     #0x58, w4
    18e0:	0f 00 37    	bra       0x1900 <.L47>

000018e2 <.L10>:
    18e2:	44 c6 b3    	mov.b     #0x64, w4
    18e4:	84 4f 51    	sub.b     w2, w4, [w15]
    18e6:	14 00 32    	bra       Z, 0x1910 <.L6>
    18e8:	65 42 42    	add.b     w4, #0x5, w4
    18ea:	84 4f 51    	sub.b     w2, w4, [w15]
    18ec:	f1 00 3a    	bra       NZ, 0x1ad0 <.L2>
    18ee:	10 00 37    	bra       0x1910 <.L6>

000018f0 <.L9>:
    18f0:	04 c7 b3    	mov.b     #0x70, w4
    18f2:	84 4f 51    	sub.b     w2, w4, [w15]
    18f4:	dd 00 32    	bra       Z, 0x1ab0 <.L8>
    18f6:	56 00 35    	bra       LT, 0x19a4 <.L4>
    18f8:	65 42 42    	add.b     w4, #0x5, w4
    18fa:	84 4f 51    	sub.b     w2, w4, [w15]
    18fc:	53 00 32    	bra       Z, 0x19a4 <.L4>
    18fe:	63 42 42    	add.b     w4, #0x3, w4

00001900 <.L47>:
    1900:	84 4f 51    	sub.b     w2, w4, [w15]
    1902:	e6 00 3a    	bra       NZ, 0x1ad0 <.L2>
    1904:	4f 00 37    	bra       0x19a4 <.L4>

00001906 <.L5>:
    1906:	11 81 e9    	dec2.w    [w1], w2
    1908:	82 08 78    	mov.w     w2, [w1]
    190a:	f0 00 90    	mov.w     [w0+14], w1
    190c:	12 41 78    	mov.b     [w2], w2
    190e:	de 00 37    	bra       0x1acc <.L53>

00001910 <.L6>:
    1910:	20 62 90    	mov.b     [w0+34], w4
    1912:	c5 c6 b3    	mov.b     #0x6c, w5
    1914:	85 4f 52    	sub.b     w4, w5, [w15]
    1916:	07 00 3a    	bra       NZ, 0x1926 <.L12>
    1918:	91 02 78    	mov.w     [w1], w5
    191a:	64 82 52    	sub.w     w5, #0x4, w4
    191c:	84 08 78    	mov.w     w4, [w1]
    191e:	14 02 be    	mov.d     [w4], w4
    1920:	4f ab de    	asr.w     w5, #0xf, w6
    1922:	86 03 78    	mov.w     w6, w7
    1924:	14 00 37    	bra       0x194e <.L13>

00001926 <.L12>:
    1926:	15 c7 b3    	mov.b     #0x71, w5
    1928:	85 4f 52    	sub.b     w4, w5, [w15]
    192a:	03 00 3a    	bra       NZ, 0x1932 <.L14>
    192c:	11 04 78    	mov.w     [w1], w8
    192e:	68 02 54    	sub.w     w8, #0x8, w4
    1930:	05 00 37    	bra       0x193c <.L43>

00001932 <.L14>:
    1932:	a5 c6 b3    	mov.b     #0x6a, w5
    1934:	85 4f 52    	sub.b     w4, w5, [w15]
    1936:	06 00 3a    	bra       NZ, 0x1944 <.L15>
    1938:	91 04 78    	mov.w     [w1], w9
    193a:	68 82 54    	sub.w     w9, #0x8, w4

0000193c <.L43>:
    193c:	84 08 78    	mov.w     w4, [w1]
    193e:	54 03 be    	mov.d     [++w4], w6
    1940:	44 02 be    	mov.d     [--w4], w4
    1942:	05 00 37    	bra       0x194e <.L13>

00001944 <.L15>:
    1944:	11 82 e9    	dec2.w    [w1], w4
    1946:	84 08 78    	mov.w     w4, [w1]
    1948:	14 02 78    	mov.w     [w4], w4
    194a:	cf a2 de    	asr.w     w4, #0xf, w5
    194c:	61 2b b9    	mul.su    w5, #0x1, w6

0000194e <.L13>:
    194e:	04 98 be    	mov.d     w4, [w0++]
    1950:	06 90 be    	mov.d     w6, [w0--]
    1952:	a0 60 90    	mov.b     [w0+34], w1
    1954:	88 c6 b3    	mov.b     #0x68, w8
    1956:	88 cf 50    	sub.b     w1, w8, [w15]
    1958:	0d 00 32    	bra       Z, 0x1974 <.L19>
    195a:	28 c6 b3    	mov.b     #0x62, w8
    195c:	88 cf 50    	sub.b     w1, w8, [w15]
    195e:	04 00 3a    	bra       NZ, 0x1968 <.L18>
    1960:	04 02 fb    	se        w4, w4
    1962:	cf a2 de    	asr.w     w4, #0xf, w5
    1964:	61 2b b9    	mul.su    w5, #0x1, w6
    1966:	08 00 37    	bra       0x1978 <.L44>

00001968 <.L18>:
    1968:	48 c7 b3    	mov.b     #0x74, w8
    196a:	88 cf 50    	sub.b     w1, w8, [w15]
    196c:	03 00 32    	bra       Z, 0x1974 <.L19>
    196e:	66 44 44    	add.b     w8, #0x6, w8
    1970:	88 cf 50    	sub.b     w1, w8, [w15]
    1972:	04 00 3a    	bra       NZ, 0x197c <.L17>

00001974 <.L19>:
    1974:	cf a2 de    	asr.w     w4, #0xf, w5
    1976:	61 2b b9    	mul.su    w5, #0x1, w6

00001978 <.L44>:
    1978:	04 98 be    	mov.d     w4, [w0++]
    197a:	06 90 be    	mov.d     w6, [w0--]

0000197c <.L17>:
    197c:	30 02 be    	mov.d     [w0++], w4
    197e:	20 03 be    	mov.d     [w0--], w6
    1980:	f0 00 90    	mov.w     [w0+14], w1
    1982:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1984:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1986:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1988:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    198a:	02 00 3d    	bra       GE, 0x1990 <.L20>
    198c:	d4 c2 b3    	mov.b     #0x2d, w4
    198e:	08 00 37    	bra       0x19a0 <.L45>

00001990 <.L20>:
    1990:	00 12 90    	mov.w     [w0+32], w4
    1992:	04 18 a3    	btst.z    w4, #0x1
    1994:	02 00 32    	bra       Z, 0x199a <.L22>
    1996:	b4 c2 b3    	mov.b     #0x2b, w4
    1998:	03 00 37    	bra       0x19a0 <.L45>

0000199a <.L22>:
    199a:	04 08 a3    	btst.z    w4, #0x0
    199c:	51 00 32    	bra       Z, 0x1a40 <.L31>
    199e:	04 c2 b3    	mov.b     #0x20, w4

000019a0 <.L45>:
    19a0:	84 f1 78    	mov.b     w4, [w3+w1]
    19a2:	4c 00 37    	bra       0x1a3c <.L54>

000019a4 <.L4>:
    19a4:	20 62 90    	mov.b     [w0+34], w4
    19a6:	c5 c6 b3    	mov.b     #0x6c, w5
    19a8:	85 4f 52    	sub.b     w4, w5, [w15]
    19aa:	08 00 3a    	bra       NZ, 0x19bc <.L23>
    19ac:	11 05 78    	mov.w     [w1], w10
    19ae:	64 02 55    	sub.w     w10, #0x4, w4
    19b0:	84 08 78    	mov.w     w4, [w1]
    19b2:	14 04 be    	mov.d     [w4], w8
    19b4:	60 55 b8    	mul.uu    w10, #0x0, w10
    19b6:	08 02 be    	mov.d     w8, w4
    19b8:	0a 03 be    	mov.d     w10, w6
    19ba:	14 00 37    	bra       0x19e4 <.L24>

000019bc <.L23>:
    19bc:	15 c7 b3    	mov.b     #0x71, w5
    19be:	85 4f 52    	sub.b     w4, w5, [w15]
    19c0:	03 00 3a    	bra       NZ, 0x19c8 <.L25>
    19c2:	91 04 78    	mov.w     [w1], w9
    19c4:	68 82 54    	sub.w     w9, #0x8, w4
    19c6:	05 00 37    	bra       0x19d2 <.L48>

000019c8 <.L25>:
    19c8:	a5 c6 b3    	mov.b     #0x6a, w5
    19ca:	85 4f 52    	sub.b     w4, w5, [w15]
    19cc:	06 00 3a    	bra       NZ, 0x19da <.L26>
    19ce:	11 05 78    	mov.w     [w1], w10
    19d0:	68 02 55    	sub.w     w10, #0x8, w4

000019d2 <.L48>:
    19d2:	84 08 78    	mov.w     w4, [w1]
    19d4:	54 03 be    	mov.d     [++w4], w6
    19d6:	44 02 be    	mov.d     [--w4], w4
    19d8:	05 00 37    	bra       0x19e4 <.L24>

000019da <.L26>:
    19da:	11 82 e9    	dec2.w    [w1], w4
    19dc:	84 08 78    	mov.w     w4, [w1]
    19de:	14 02 78    	mov.w     [w4], w4
    19e0:	80 02 eb    	clr.w     w5
    19e2:	60 33 b8    	mul.uu    w6, #0x0, w6

000019e4 <.L24>:
    19e4:	04 98 be    	mov.d     w4, [w0++]
    19e6:	06 90 be    	mov.d     w6, [w0--]
    19e8:	a0 60 90    	mov.b     [w0+34], w1
    19ea:	88 c6 b3    	mov.b     #0x68, w8
    19ec:	88 cf 50    	sub.b     w1, w8, [w15]
    19ee:	0d 00 32    	bra       Z, 0x1a0a <.L30>
    19f0:	28 c6 b3    	mov.b     #0x62, w8
    19f2:	88 cf 50    	sub.b     w1, w8, [w15]
    19f4:	04 00 3a    	bra       NZ, 0x19fe <.L29>
    19f6:	04 82 fb    	ze        w4, w4
    19f8:	80 02 eb    	clr.w     w5
    19fa:	60 33 b8    	mul.uu    w6, #0x0, w6
    19fc:	08 00 37    	bra       0x1a0e <.L49>

000019fe <.L29>:
    19fe:	48 c7 b3    	mov.b     #0x74, w8
    1a00:	88 cf 50    	sub.b     w1, w8, [w15]
    1a02:	03 00 32    	bra       Z, 0x1a0a <.L30>
    1a04:	66 44 44    	add.b     w8, #0x6, w8
    1a06:	88 cf 50    	sub.b     w1, w8, [w15]
    1a08:	04 00 3a    	bra       NZ, 0x1a12 <.L28>

00001a0a <.L30>:
    1a0a:	80 02 eb    	clr.w     w5
    1a0c:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a0e <.L49>:
    1a0e:	04 98 be    	mov.d     w4, [w0++]
    1a10:	06 90 be    	mov.d     w6, [w0--]

00001a12 <.L28>:
    1a12:	80 10 90    	mov.w     [w0+32], w1
    1a14:	01 38 a3    	btst.z    w1, #0x3
    1a16:	14 00 32    	bra       Z, 0x1a40 <.L31>
    1a18:	30 02 be    	mov.d     [w0++], w4
    1a1a:	20 03 be    	mov.d     [w0--], w6
    1a1c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a1e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1a20:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a22:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a24:	0d 00 32    	bra       Z, 0x1a40 <.L31>
    1a26:	81 c7 b3    	mov.b     #0x78, w1
    1a28:	81 4f 51    	sub.b     w2, w1, [w15]
    1a2a:	03 00 32    	bra       Z, 0x1a32 <.L32>
    1a2c:	81 c5 b3    	mov.b     #0x58, w1
    1a2e:	81 4f 51    	sub.b     w2, w1, [w15]
    1a30:	07 00 3a    	bra       NZ, 0x1a40 <.L31>

00001a32 <.L32>:
    1a32:	f0 00 90    	mov.w     [w0+14], w1
    1a34:	04 c3 b3    	mov.b     #0x30, w4
    1a36:	84 f1 78    	mov.b     w4, [w3+w1]
    1a38:	81 00 e8    	inc.w     w1, w1
    1a3a:	82 f1 78    	mov.b     w2, [w3+w1]

00001a3c <.L54>:
    1a3c:	81 00 e8    	inc.w     w1, w1
    1a3e:	71 00 98    	mov.w     w1, [w0+14]

00001a40 <.L31>:
    1a40:	f0 00 90    	mov.w     [w0+14], w1
    1a42:	81 81 41    	add.w     w3, w1, w3
    1a44:	63 00 98    	mov.w     w3, [w0+12]
    1a46:	82 40 78    	mov.b     w2, w1
    1a48:	3e 00 37    	bra       0x1ac6 <.L52>

00001a4a <.L7>:
    1a4a:	a0 61 90    	mov.b     [w0+34], w3
    1a4c:	c4 c6 b3    	mov.b     #0x6c, w4
    1a4e:	11 81 e9    	dec2.w    [w1], w2
    1a50:	84 cf 51    	sub.b     w3, w4, [w15]
    1a52:	22 00 32    	bra       Z, 0x1a98 <.L37>
    1a54:	0a 00 3c    	bra       GT, 0x1a6a <.L41>
    1a56:	64 42 52    	sub.b     w4, #0x4, w4
    1a58:	84 cf 51    	sub.b     w3, w4, [w15]
    1a5a:	25 00 32    	bra       Z, 0x1aa6 <.L51>
    1a5c:	04 c2 e8    	inc2.b    w4, w4
    1a5e:	84 cf 51    	sub.b     w3, w4, [w15]
    1a60:	13 00 32    	bra       Z, 0x1a88 <.L36>
    1a62:	68 42 52    	sub.b     w4, #0x8, w4
    1a64:	84 cf 51    	sub.b     w3, w4, [w15]
    1a66:	1e 00 3a    	bra       NZ, 0x1aa4 <.L33>
    1a68:	0a 00 37    	bra       0x1a7e <.L55>

00001a6a <.L41>:
    1a6a:	44 c7 b3    	mov.b     #0x74, w4
    1a6c:	84 cf 51    	sub.b     w3, w4, [w15]
    1a6e:	1b 00 32    	bra       Z, 0x1aa6 <.L51>
    1a70:	66 42 42    	add.b     w4, #0x6, w4
    1a72:	84 cf 51    	sub.b     w3, w4, [w15]
    1a74:	18 00 32    	bra       Z, 0x1aa6 <.L51>
    1a76:	69 42 52    	sub.b     w4, #0x9, w4
    1a78:	84 cf 51    	sub.b     w3, w4, [w15]
    1a7a:	14 00 3a    	bra       NZ, 0x1aa4 <.L33>
    1a7c:	05 00 37    	bra       0x1a88 <.L36>

00001a7e <.L55>:
    1a7e:	82 08 78    	mov.w     w2, [w1]
    1a80:	92 00 78    	mov.w     [w2], w1
    1a82:	40 58 90    	mov.b     [w0+28], w0
    1a84:	80 48 78    	mov.b     w0, [w1]
    1a86:	2c 00 37    	bra       0x1ae0 <.L11>

00001a88 <.L36>:
    1a88:	82 08 78    	mov.w     w2, [w1]
    1a8a:	92 00 78    	mov.w     [w2], w1
    1a8c:	60 0a 90    	mov.w     [w0+28], w4
    1a8e:	cf a2 de    	asr.w     w4, #0xf, w5
    1a90:	61 2b b9    	mul.su    w5, #0x1, w6
    1a92:	84 98 be    	mov.d     w4, [w1++]
    1a94:	86 90 be    	mov.d     w6, [w1--]
    1a96:	24 00 37    	bra       0x1ae0 <.L11>

00001a98 <.L37>:
    1a98:	82 08 78    	mov.w     w2, [w1]
    1a9a:	92 00 78    	mov.w     [w2], w1
    1a9c:	60 09 90    	mov.w     [w0+28], w2
    1a9e:	cf 91 de    	asr.w     w2, #0xf, w3
    1aa0:	82 88 be    	mov.d     w2, [w1]
    1aa2:	1e 00 37    	bra       0x1ae0 <.L11>

00001aa4 <.L33>:
    1aa4:	11 81 e9    	dec2.w    [w1], w2

00001aa6 <.L51>:
    1aa6:	82 08 78    	mov.w     w2, [w1]
    1aa8:	92 00 78    	mov.w     [w2], w1
    1aaa:	60 08 90    	mov.w     [w0+28], w0
    1aac:	80 08 78    	mov.w     w0, [w1]
    1aae:	18 00 37    	bra       0x1ae0 <.L11>

00001ab0 <.L8>:
    1ab0:	11 81 e9    	dec2.w    [w1], w2
    1ab2:	82 08 78    	mov.w     w2, [w1]
    1ab4:	12 02 78    	mov.w     [w2], w4
    1ab6:	cf a2 de    	asr.w     w4, #0xf, w5
    1ab8:	61 2b b9    	mul.su    w5, #0x1, w6
    1aba:	04 98 be    	mov.d     w4, [w0++]
    1abc:	06 90 be    	mov.d     w6, [w0--]
    1abe:	f0 00 90    	mov.w     [w0+14], w1
    1ac0:	81 81 41    	add.w     w3, w1, w3
    1ac2:	63 00 98    	mov.w     w3, [w0+12]
    1ac4:	81 c7 b3    	mov.b     #0x78, w1

00001ac6 <.L52>:
    1ac6:	10 00 07    	rcall     0x1ae8 <__Litob>
    1ac8:	0b 00 37    	bra       0x1ae0 <.L11>

00001aca <.L3>:
    1aca:	f0 00 90    	mov.w     [w0+14], w1

00001acc <.L53>:
    1acc:	82 f1 78    	mov.b     w2, [w3+w1]
    1ace:	06 00 37    	bra       0x1adc <.L50>

00001ad0 <.L2>:
    1ad0:	f0 00 90    	mov.w     [w0+14], w1
    1ad2:	81 81 41    	add.w     w3, w1, w3
    1ad4:	02 04 e0    	cp0.b     w2
    1ad6:	01 00 3a    	bra       NZ, 0x1ada <.L42>
    1ad8:	52 c2 b3    	mov.b     #0x25, w2

00001ada <.L42>:
    1ada:	82 49 78    	mov.b     w2, [w3]

00001adc <.L50>:
    1adc:	81 00 e8    	inc.w     w1, w1
    1ade:	71 00 98    	mov.w     w1, [w0+14]

00001ae0 <.L11>:
    1ae0:	00 00 eb    	clr.w     w0
    1ae2:	4f 05 be    	mov.d     [--w15], w10
    1ae4:	4f 04 be    	mov.d     [--w15], w8
    1ae6:	00 00 06    	return    

00001ae8 <__Litob>:
    1ae8:	fc 87 47    	add.w     w15, #0x1c, w15
    1aea:	88 9f be    	mov.d     w8, [w15++]
    1aec:	8a 9f be    	mov.d     w10, [w15++]
    1aee:	8c 9f be    	mov.d     w12, [w15++]
    1af0:	8e 1f 78    	mov.w     w14, [w15++]
    1af2:	00 06 78    	mov.w     w0, w12
    1af4:	80 c5 b3    	mov.b     #0x58, w0
    1af6:	80 cf 50    	sub.b     w1, w0, [w15]
    1af8:	0a 00 32    	bra       Z, 0x1b0e <.L35>
    1afa:	77 40 40    	add.b     w0, #0x17, w0
    1afc:	80 cf 50    	sub.b     w1, w0, [w15]
    1afe:	0a 00 32    	bra       Z, 0x1b14 <.L36>
    1b00:	69 40 40    	add.b     w0, #0x9, w0
    1b02:	80 cf 50    	sub.b     w1, w0, [w15]
    1b04:	0b 00 32    	bra       Z, 0x1b1c <.L37>
    1b06:	30 0e 21    	mov.w     #0x10e3, w0
    1b08:	80 bf 9f    	mov.w     w0, [w15-16]
    1b0a:	ae 00 20    	mov.w     #0xa, w14
    1b0c:	0a 00 37    	bra       0x1b22 <.L2>

00001b0e <.L35>:
    1b0e:	22 0d 21    	mov.w     #0x10d2, w2
    1b10:	82 bf 9f    	mov.w     w2, [w15-16]
    1b12:	06 00 37    	bra       0x1b20 <.L46>

00001b14 <.L36>:
    1b14:	33 0e 21    	mov.w     #0x10e3, w3
    1b16:	83 bf 9f    	mov.w     w3, [w15-16]
    1b18:	8e 00 20    	mov.w     #0x8, w14
    1b1a:	03 00 37    	bra       0x1b22 <.L2>

00001b1c <.L37>:
    1b1c:	34 0e 21    	mov.w     #0x10e3, w4
    1b1e:	84 bf 9f    	mov.w     w4, [w15-16]

00001b20 <.L46>:
    1b20:	0e 01 20    	mov.w     #0x10, w14

00001b22 <.L2>:
    1b22:	3c 02 be    	mov.d     [w12++], w4
    1b24:	2c 03 be    	mov.d     [w12--], w6
    1b26:	06 05 be    	mov.d     w6, w10
    1b28:	04 04 be    	mov.d     w4, w8
    1b2a:	40 c6 b3    	mov.b     #0x64, w0
    1b2c:	80 cf 50    	sub.b     w1, w0, [w15]
    1b2e:	03 00 32    	bra       Z, 0x1b36 <.L3>
    1b30:	65 40 40    	add.b     w0, #0x5, w0
    1b32:	80 cf 50    	sub.b     w1, w0, [w15]
    1b34:	0b 00 3a    	bra       NZ, 0x1b4c <.L4>

00001b36 <.L3>:
    1b36:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b38:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1b3a:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1b3c:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1b3e:	06 00 3d    	bra       GE, 0x1b4c <.L4>
    1b40:	60 00 b8    	mul.uu    w0, #0x0, w0
    1b42:	60 11 b8    	mul.uu    w2, #0x0, w2
    1b44:	04 04 50    	sub.w     w0, w4, w8
    1b46:	85 84 58    	subb.w    w1, w5, w9
    1b48:	06 05 59    	subb.w    w2, w6, w10
    1b4a:	87 85 59    	subb.w    w3, w7, w11

00001b4c <.L4>:
    1b4c:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1b4e:	04 00 32    	bra       Z, 0x1b58 <.L38>
    1b50:	40 00 20    	mov.w     #0x4, w0
    1b52:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1b54:	38 00 3a    	bra       NZ, 0x1bc6 <.L51>
    1b56:	01 00 37    	bra       0x1b5a <.L6>

00001b58 <.L38>:
    1b58:	30 00 20    	mov.w     #0x3, w0

00001b5a <.L6>:
    1b5a:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1b5c:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1b5e:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1b60:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1b62:	04 00 3a    	bra       NZ, 0x1b6c <.L8>
    1b64:	dc 08 90    	mov.w     [w12+26], w1
    1b66:	8d 01 20    	mov.w     #0x18, w13
    1b68:	01 00 e0    	cp0.w     w1
    1b6a:	06 00 32    	bra       Z, 0x1b78 <.L9>

00001b6c <.L8>:
    1b6c:	8e 00 e9    	dec.w     w14, w1
    1b6e:	88 80 60    	and.w     w1, w8, w1
    1b70:	8f ba 97    	mov.w     [w15-16], w5
    1b72:	e5 c0 78    	mov.b     [w5+w1], w1
    1b74:	f1 ef 9f    	mov.b     w1, [w15-17]
    1b76:	7d 01 20    	mov.w     #0x17, w13

00001b78 <.L9>:
    1b78:	80 00 78    	mov.w     w0, w1

00001b7a <.LB101>:
    1b7a:	81 00 e9    	dec.w     w1, w1
    1b7c:	05 00 33    	bra       N, 0x1b88 <.LE101>
    1b7e:	8b 05 d1    	lsr.w     w11, w11
    1b80:	0a 85 d3    	rrc.w     w10, w10
    1b82:	89 84 d3    	rrc.w     w9, w9
    1b84:	08 84 d3    	rrc.w     w8, w8
    1b86:	f9 ff 37    	bra       0x1b7a <.LB101>

00001b88 <.LE101>:
    1b88:	08 9e be    	mov.d     w8, [w12++]
    1b8a:	0a 96 be    	mov.d     w10, [w12--]
    1b8c:	12 00 37    	bra       0x1bb2 <.L10>

00001b8e <.L12>:
    1b8e:	8d 06 e9    	dec.w     w13, w13
    1b90:	8e 00 e9    	dec.w     w14, w1
    1b92:	84 80 60    	and.w     w1, w4, w1
    1b94:	0f b9 97    	mov.w     [w15-16], w2
    1b96:	e2 c1 78    	mov.b     [w2+w1], w3
    1b98:	82 fd 2f    	mov.w     #0xffd8, w2
    1b9a:	0f 01 41    	add.w     w2, w15, w2
    1b9c:	03 f1 7e    	mov.b     w3, [w2+w13]
    1b9e:	80 00 78    	mov.w     w0, w1

00001ba0 <.LB115>:
    1ba0:	81 00 e9    	dec.w     w1, w1
    1ba2:	05 00 33    	bra       N, 0x1bae <.LE115>
    1ba4:	87 83 d1    	asr.w     w7, w7
    1ba6:	06 83 d3    	rrc.w     w6, w6
    1ba8:	85 82 d3    	rrc.w     w5, w5
    1baa:	04 82 d3    	rrc.w     w4, w4
    1bac:	f9 ff 37    	bra       0x1ba0 <.LB115>

00001bae <.LE115>:
    1bae:	04 9e be    	mov.d     w4, [w12++]
    1bb0:	06 96 be    	mov.d     w6, [w12--]

00001bb2 <.L10>:
    1bb2:	3c 02 be    	mov.d     [w12++], w4
    1bb4:	2c 03 be    	mov.d     [w12--], w6
    1bb6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1bb8:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1bba:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1bbc:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1bbe:	8b 00 34    	bra       LE, 0x1cd6 <.L11>
    1bc0:	0d 00 e0    	cp0.w     w13
    1bc2:	e5 ff 3c    	bra       GT, 0x1b8e <.L12>
    1bc4:	88 00 37    	bra       0x1cd6 <.L11>

00001bc6 <.L51>:
    1bc6:	2c 60 90    	mov.b     [w12+34], w0
    1bc8:	81 c6 b3    	mov.b     #0x68, w1
    1bca:	81 4f 50    	sub.b     w0, w1, [w15]
    1bcc:	0b 00 32    	bra       Z, 0x1be4 <.L14>
    1bce:	06 00 3c    	bra       GT, 0x1bdc <.L16>
    1bd0:	00 04 e0    	cp0.b     w0
    1bd2:	08 00 32    	bra       Z, 0x1be4 <.L14>
    1bd4:	e6 c0 50    	sub.b     w1, #0x6, w1
    1bd6:	81 4f 50    	sub.b     w0, w1, [w15]
    1bd8:	4e 00 3a    	bra       NZ, 0x1c76 <.L13>
    1bda:	04 00 37    	bra       0x1be4 <.L14>

00001bdc <.L16>:
    1bdc:	c1 c6 b3    	mov.b     #0x6c, w1
    1bde:	81 4f 50    	sub.b     w0, w1, [w15]
    1be0:	4a 00 3a    	bra       NZ, 0x1c76 <.L13>
    1be2:	21 00 37    	bra       0x1c26 <.L52>

00001be4 <.L14>:
    1be4:	08 00 e0    	cp0.w     w8
    1be6:	04 00 3a    	bra       NZ, 0x1bf0 <.L17>
    1be8:	5c 08 90    	mov.w     [w12+26], w0
    1bea:	8d 01 20    	mov.w     #0x18, w13
    1bec:	00 00 e0    	cp0.w     w0
    1bee:	06 00 32    	bra       Z, 0x1bfc <.L18>

00001bf0 <.L17>:
    1bf0:	11 00 09    	repeat    #0x11
    1bf2:	0e 84 d8    	div.uw    w8, w14
    1bf4:	0f b9 97    	mov.w     [w15-16], w2
    1bf6:	e2 c0 78    	mov.b     [w2+w1], w1
    1bf8:	f1 ef 9f    	mov.b     w1, [w15-17]
    1bfa:	7d 01 20    	mov.w     #0x17, w13

00001bfc <.L18>:
    1bfc:	11 00 09    	repeat    #0x11
    1bfe:	0e 84 d8    	div.uw    w8, w14
    1c00:	0a 00 37    	bra       0x1c16 <.L47>

00001c02 <.L21>:
    1c02:	11 00 09    	repeat    #0x11
    1c04:	0e 04 d8    	div.sw    w8, w14
    1c06:	8d 06 e9    	dec.w     w13, w13
    1c08:	0e 81 b9    	mul.ss    w0, w14, w2
    1c0a:	02 04 54    	sub.w     w8, w2, w8
    1c0c:	8f b8 97    	mov.w     [w15-16], w1
    1c0e:	61 41 7c    	mov.b     [w1+w8], w2
    1c10:	81 fd 2f    	mov.w     #0xffd8, w1
    1c12:	8f 80 40    	add.w     w1, w15, w1
    1c14:	82 f0 7e    	mov.b     w2, [w1+w13]

00001c16 <.L47>:
    1c16:	00 04 78    	mov.w     w0, w8
    1c18:	08 00 e0    	cp0.w     w8
    1c1a:	02 00 32    	bra       Z, 0x1c20 <.L20>
    1c1c:	0d 00 e0    	cp0.w     w13
    1c1e:	f1 ff 3c    	bra       GT, 0x1c02 <.L21>

00001c20 <.L20>:
    1c20:	cf c4 de    	asr.w     w8, #0xf, w9
    1c22:	61 4d b9    	mul.su    w9, #0x1, w10
    1c24:	25 00 37    	bra       0x1c70 <.L50>

00001c26 <.L52>:
    1c26:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c28:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c2a:	04 00 3a    	bra       NZ, 0x1c34 <.L22>
    1c2c:	5c 08 90    	mov.w     [w12+26], w0
    1c2e:	8d 01 20    	mov.w     #0x18, w13
    1c30:	00 00 e0    	cp0.w     w0
    1c32:	07 00 32    	bra       Z, 0x1c42 <.L23>

00001c34 <.L22>:
    1c34:	61 71 b9    	mul.su    w14, #0x1, w2
    1c36:	08 00 be    	mov.d     w8, w0
    1c38:	4f fc 07    	rcall     0x14d8 <___umodsi3>
    1c3a:	8f b9 97    	mov.w     [w15-16], w3
    1c3c:	e3 41 78    	mov.b     [w3+w0], w3
    1c3e:	f3 ef 9f    	mov.b     w3, [w15-17]
    1c40:	7d 01 20    	mov.w     #0x17, w13

00001c42 <.L23>:
    1c42:	61 71 b9    	mul.su    w14, #0x1, w2
    1c44:	08 00 be    	mov.d     w8, w0
    1c46:	38 fc 07    	rcall     0x14b8 <___udivsi3>
    1c48:	0b 00 37    	bra       0x1c60 <.L48>

00001c4a <.L26>:
    1c4a:	61 71 b9    	mul.su    w14, #0x1, w2
    1c4c:	08 00 be    	mov.d     w8, w0
    1c4e:	7b 00 07    	rcall     0x1d46 <___divsi3>
    1c50:	8d 06 e9    	dec.w     w13, w13
    1c52:	00 f1 b9    	mul.ss    w14, w0, w2
    1c54:	02 04 54    	sub.w     w8, w2, w8
    1c56:	0f ba 97    	mov.w     [w15-16], w4
    1c58:	e4 42 7c    	mov.b     [w4+w8], w5
    1c5a:	84 fd 2f    	mov.w     #0xffd8, w4
    1c5c:	0f 02 42    	add.w     w4, w15, w4
    1c5e:	05 f2 7e    	mov.b     w5, [w4+w13]

00001c60 <.L48>:
    1c60:	00 04 be    	mov.d     w0, w8
    1c62:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1c64:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1c66:	02 00 32    	bra       Z, 0x1c6c <.L25>
    1c68:	0d 00 e0    	cp0.w     w13
    1c6a:	ef ff 3c    	bra       GT, 0x1c4a <.L26>

00001c6c <.L25>:
    1c6c:	4f cd de    	asr.w     w9, #0xf, w10
    1c6e:	8a 05 78    	mov.w     w10, w11

00001c70 <.L50>:
    1c70:	08 9e be    	mov.d     w8, [w12++]
    1c72:	0a 96 be    	mov.d     w10, [w12--]
    1c74:	30 00 37    	bra       0x1cd6 <.L11>

00001c76 <.L13>:
    1c76:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c78:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c7a:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1c7c:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1c7e:	04 00 3a    	bra       NZ, 0x1c88 <.L27>
    1c80:	5c 08 90    	mov.w     [w12+26], w0
    1c82:	8d 01 20    	mov.w     #0x18, w13
    1c84:	00 00 e0    	cp0.w     w0
    1c86:	09 00 32    	bra       Z, 0x1c9a <.L28>

00001c88 <.L27>:
    1c88:	61 72 b9    	mul.su    w14, #0x1, w4
    1c8a:	61 2b b9    	mul.su    w5, #0x1, w6
    1c8c:	08 00 be    	mov.d     w8, w0
    1c8e:	0a 01 be    	mov.d     w10, w2
    1c90:	09 01 07    	rcall     0x1ea4 <___umoddi3>
    1c92:	0f ba 97    	mov.w     [w15-16], w4
    1c94:	64 42 78    	mov.b     [w4+w0], w4
    1c96:	f4 ef 9f    	mov.b     w4, [w15-17]
    1c98:	7d 01 20    	mov.w     #0x17, w13

00001c9a <.L28>:
    1c9a:	61 72 b9    	mul.su    w14, #0x1, w4
    1c9c:	61 2b b9    	mul.su    w5, #0x1, w6
    1c9e:	08 00 be    	mov.d     w8, w0
    1ca0:	0a 01 be    	mov.d     w10, w2
    1ca2:	f9 00 07    	rcall     0x1e96 <___udivdi3>
    1ca4:	0d 00 37    	bra       0x1cc0 <.L49>

00001ca6 <.L30>:
    1ca6:	61 72 b9    	mul.su    w14, #0x1, w4
    1ca8:	61 2b b9    	mul.su    w5, #0x1, w6
    1caa:	08 00 be    	mov.d     w8, w0
    1cac:	0a 01 be    	mov.d     w10, w2
    1cae:	fe 00 07    	rcall     0x1eac <___divdi3>
    1cb0:	8d 06 e9    	dec.w     w13, w13
    1cb2:	00 f2 b9    	mul.ss    w14, w0, w4
    1cb4:	04 04 54    	sub.w     w8, w4, w8
    1cb6:	8f ba 97    	mov.w     [w15-16], w5
    1cb8:	65 42 7c    	mov.b     [w5+w8], w4
    1cba:	85 fd 2f    	mov.w     #0xffd8, w5
    1cbc:	8f 82 42    	add.w     w5, w15, w5
    1cbe:	84 f2 7e    	mov.b     w4, [w5+w13]

00001cc0 <.L49>:
    1cc0:	00 9e be    	mov.d     w0, [w12++]
    1cc2:	02 96 be    	mov.d     w2, [w12--]
    1cc4:	3c 04 be    	mov.d     [w12++], w8
    1cc6:	2c 05 be    	mov.d     [w12--], w10
    1cc8:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1cca:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1ccc:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1cce:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1cd0:	02 00 34    	bra       LE, 0x1cd6 <.L11>
    1cd2:	0d 00 e0    	cp0.w     w13
    1cd4:	e8 ff 3c    	bra       GT, 0x1ca6 <.L30>

00001cd6 <.L11>:
    1cd6:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1cd8:	10 00 3a    	bra       NZ, 0x1cfa <.L31>
    1cda:	0c 10 90    	mov.w     [w12+32], w0
    1cdc:	00 38 a3    	btst.z    w0, #0x3
    1cde:	0d 00 32    	bra       Z, 0x1cfa <.L31>
    1ce0:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    1ce2:	06 00 3e    	bra       GTU, 0x1cf0 <.L32>
    1ce4:	85 fd 2f    	mov.w     #0xffd8, w5
    1ce6:	8f 82 42    	add.w     w5, w15, w5
    1ce8:	e5 c0 7e    	mov.b     [w5+w13], w1
    1cea:	00 c3 b3    	mov.b     #0x30, w0
    1cec:	80 cf 50    	sub.b     w1, w0, [w15]
    1cee:	05 00 32    	bra       Z, 0x1cfa <.L31>

00001cf0 <.L32>:
    1cf0:	8d 06 e9    	dec.w     w13, w13
    1cf2:	02 c3 b3    	mov.b     #0x30, w2
    1cf4:	81 fd 2f    	mov.w     #0xffd8, w1
    1cf6:	8f 80 40    	add.w     w1, w15, w1
    1cf8:	82 f0 7e    	mov.b     w2, [w1+w13]

00001cfa <.L31>:
    1cfa:	78 81 16    	subr.w    w13, #0x18, w2
    1cfc:	12 0e 98    	mov.w     w2, [w12+18]
    1cfe:	6c 00 90    	mov.w     [w12+12], w0
    1d00:	83 fd 2f    	mov.w     #0xffd8, w3
    1d02:	8f 81 41    	add.w     w3, w15, w3
    1d04:	8d 80 41    	add.w     w3, w13, w1
    1d06:	0d fd 07    	rcall     0x1722 <_memcpy>
    1d08:	1c 08 90    	mov.w     [w12+18], w0
    1d0a:	dc 08 90    	mov.w     [w12+26], w1
    1d0c:	81 0f 50    	sub.w     w0, w1, [w15]
    1d0e:	06 00 3d    	bra       GE, 0x1d1c <.L33>
    1d10:	00 80 50    	sub.w     w1, w0, w0
    1d12:	00 0e 98    	mov.w     w0, [w12+16]
    1d14:	0c 10 90    	mov.w     [w12+32], w0
    1d16:	00 40 a1    	bclr.w    w0, #0x4
    1d18:	00 16 98    	mov.w     w0, [w12+32]
    1d1a:	0f 00 37    	bra       0x1d3a <.L1>

00001d1c <.L33>:
    1d1c:	01 00 e0    	cp0.w     w1
    1d1e:	0d 00 3d    	bra       GE, 0x1d3a <.L1>
    1d20:	8c 10 90    	mov.w     [w12+32], w1
    1d22:	f4 80 60    	and.w     w1, #0x14, w1
    1d24:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    1d26:	09 00 3a    	bra       NZ, 0x1d3a <.L1>
    1d28:	7c 09 90    	mov.w     [w12+30], w2
    1d2a:	fc 00 90    	mov.w     [w12+14], w1
    1d2c:	81 00 51    	sub.w     w2, w1, w1
    1d2e:	0c 09 90    	mov.w     [w12+16], w2
    1d30:	82 80 50    	sub.w     w1, w2, w1
    1d32:	00 80 50    	sub.w     w1, w0, w0
    1d34:	42 40 a9    	bclr.b    0x42, #0x2
    1d36:	01 00 34    	bra       LE, 0x1d3a <.L1>
    1d38:	00 0e 98    	mov.w     w0, [w12+16]

00001d3a <.L1>:
    1d3a:	4f 07 78    	mov.w     [--w15], w14
    1d3c:	4f 06 be    	mov.d     [--w15], w12
    1d3e:	4f 05 be    	mov.d     [--w15], w10
    1d40:	4f 04 be    	mov.d     [--w15], w8
    1d42:	cf 01 b1    	sub.w     #0x1c, w15
    1d44:	00 00 06    	return    

00001d46 <___divsi3>:
    1d46:	83 9f 68    	xor.w     w1, w3, [w15++]
    1d48:	01 00 e0    	cp0.w     w1
    1d4a:	02 00 3d    	bra       GE, 0x1d50 <divtestb>
    1d4c:	60 00 10    	subr.w    w0, #0x0, w0
    1d4e:	e0 80 18    	subbr.w   w1, #0x0, w1

00001d50 <divtestb>:
    1d50:	03 00 e0    	cp0.w     w3
    1d52:	02 00 3d    	bra       GE, 0x1d58 <calcquot>
    1d54:	60 01 11    	subr.w    w2, #0x0, w2
    1d56:	e0 81 19    	subbr.w   w3, #0x0, w3

00001d58 <calcquot>:
    1d58:	af fb 07    	rcall     0x14b8 <___udivsi3>
    1d5a:	4f 00 e0    	cp0.w     [--w15]
    1d5c:	02 00 3b    	bra       NN, 0x1d62 <returnq>
    1d5e:	60 00 10    	subr.w    w0, #0x0, w0
    1d60:	e0 80 18    	subbr.w   w1, #0x0, w1

00001d62 <returnq>:
    1d62:	00 00 06    	return    

00001d64 <___PplusBdi>:
    1d64:	88 9f be    	mov.d     w8, [w15++]
    1d66:	8a 9f be    	mov.d     w10, [w15++]
    1d68:	30 04 42    	add.w     w4, [w0++], w8
    1d6a:	b0 84 4a    	addc.w    w5, [w0++], w9
    1d6c:	30 05 4b    	addc.w    w6, [w0++], w10
    1d6e:	90 85 4b    	addc.w    w7, [w0], w11
    1d70:	60 00 b1    	sub.w     #0x6, w0
    1d72:	08 98 be    	mov.d     w8, [w0++]
    1d74:	0a 90 be    	mov.d     w10, [w0--]
    1d76:	04 40 e1    	cp.w      w8, w4
    1d78:	05 c8 e1    	cpb.w     w9, w5
    1d7a:	06 d0 e1    	cpb.w     w10, w6
    1d7c:	07 d8 e1    	cpb.w     w11, w7
    1d7e:	02 00 31    	bra       C, 0x1d84 <.L1>
    1d80:	68 00 40    	add.w     w0, #0x8, w0
    1d82:	10 08 e8    	inc.w     [w0], [w0]

00001d84 <.L1>:
    1d84:	4f 05 be    	mov.d     [--w15], w10
    1d86:	4f 04 be    	mov.d     [--w15], w8
    1d88:	00 00 06    	return    

00001d8a <___PminusBdi>:
    1d8a:	88 9f be    	mov.d     w8, [w15++]
    1d8c:	8a 9f be    	mov.d     w10, [w15++]
    1d8e:	30 04 be    	mov.d     [w0++], w8
    1d90:	20 05 be    	mov.d     [w0--], w10
    1d92:	04 18 54    	sub.w     w8, w4, [w0++]
    1d94:	05 98 5c    	subb.w    w9, w5, [w0++]
    1d96:	06 18 5d    	subb.w    w10, w6, [w0++]
    1d98:	07 98 5d    	subb.w    w11, w7, [w0++]
    1d9a:	11 00 20    	mov.w     #0x1, w1
    1d9c:	04 40 e1    	cp.w      w8, w4
    1d9e:	05 c8 e1    	cpb.w     w9, w5
    1da0:	06 d0 e1    	cpb.w     w10, w6
    1da2:	07 d8 e1    	cpb.w     w11, w7
    1da4:	01 00 39    	bra       NC, 0x1da8 <.L4>
    1da6:	80 00 eb    	clr.w     w1

00001da8 <.L4>:
    1da8:	10 88 10    	subr.w    w1, [w0], [w0]
    1daa:	4f 05 be    	mov.d     [--w15], w10
    1dac:	4f 04 be    	mov.d     [--w15], w8
    1dae:	00 00 06    	return    

00001db0 <___udivmoddi3>:
    1db0:	12 00 fa    	lnk       #0x12
    1db2:	88 9f be    	mov.d     w8, [w15++]
    1db4:	8a 9f be    	mov.d     w10, [w15++]
    1db6:	8c 9f be    	mov.d     w12, [w15++]
    1db8:	e0 b7 9f    	mov.w     w0, [w15-20]
    1dba:	f1 b7 9f    	mov.w     w1, [w15-18]
    1dbc:	82 bf 9f    	mov.w     w2, [w15-16]
    1dbe:	93 bf 9f    	mov.w     w3, [w15-14]
    1dc0:	06 05 be    	mov.d     w6, w10
    1dc2:	04 04 be    	mov.d     w4, w8
    1dc4:	00 00 eb    	clr.w     w0
    1dc6:	d0 b7 9f    	mov.w     w0, [w15-22]
    1dc8:	c0 b7 9f    	mov.w     w0, [w15-24]
    1dca:	b0 b7 9f    	mov.w     w0, [w15-26]
    1dcc:	a0 b7 9f    	mov.w     w0, [w15-28]
    1dce:	90 b7 9f    	mov.w     w0, [w15-30]
    1dd0:	00 06 eb    	clr.w     w12

00001dd2 <.L9>:
    1dd2:	5f b1 97    	mov.w     [w15-22], w2
    1dd4:	cf b0 97    	mov.w     [w15-24], w1
    1dd6:	82 01 41    	add.w     w2, w2, w3
    1dd8:	3f b0 97    	mov.w     [w15-26], w0
    1dda:	02 00 e0    	cp0.w     w2
    1ddc:	04 00 3d    	bra       GE, 0x1de6 <.L6>
    1dde:	37 00 07    	rcall     0x1e4e <.LPA0>
    1de0:	7e 80 57    	sub.w     w15, #0x1e, w0
    1de2:	c0 ff 07    	rcall     0x1d64 <___PplusBdi>
    1de4:	03 00 37    	bra       0x1dec <.L7>

00001de6 <.L6>:
    1de6:	33 00 07    	rcall     0x1e4e <.LPA0>
    1de8:	7e 80 57    	sub.w     w15, #0x1e, w0
    1dea:	cf ff 07    	rcall     0x1d8a <___PminusBdi>

00001dec <.L7>:
    1dec:	df b6 97    	mov.w     [w15-22], w13
    1dee:	0d 00 e0    	cp0.w     w13
    1df0:	0c 00 35    	bra       LT, 0x1e0a <.L8>
    1df2:	6f b2 97    	mov.w     [w15-20], w4
    1df4:	ff b2 97    	mov.w     [w15-18], w5
    1df6:	0f bb 97    	mov.w     [w15-16], w6
    1df8:	9f bb 97    	mov.w     [w15-14], w7
    1dfa:	10 00 20    	mov.w     #0x1, w0
    1dfc:	01 00 20    	mov.w     #0x0, w1
    1dfe:	60 11 b8    	mul.uu    w2, #0x0, w2
    1e00:	00 02 72    	ior.w     w4, w0, w4
    1e02:	81 82 72    	ior.w     w5, w1, w5
    1e04:	02 03 73    	ior.w     w6, w2, w6
    1e06:	83 83 73    	ior.w     w7, w3, w7
    1e08:	1b 00 07    	rcall     0x1e40 <.LPA2>

00001e0a <.L8>:
    1e0a:	0c 06 e8    	inc.w     w12, w12
    1e0c:	01 04 20    	mov.w     #0x40, w1
    1e0e:	81 0f 56    	sub.w     w12, w1, [w15]
    1e10:	e0 ff 3a    	bra       NZ, 0x1dd2 <.L9>
    1e12:	0d 00 e0    	cp0.w     w13
    1e14:	04 00 3d    	bra       GE, 0x1e1e <.L10>
    1e16:	08 02 be    	mov.d     w8, w4
    1e18:	0a 03 be    	mov.d     w10, w6
    1e1a:	7e 80 57    	sub.w     w15, #0x1e, w0
    1e1c:	a3 ff 07    	rcall     0x1d64 <___PplusBdi>

00001e1e <.L10>:
    1e1e:	5f a8 97    	mov.w     [w15-38], w0
    1e20:	00 00 e0    	cp0.w     w0
    1e22:	05 00 3a    	bra       NZ, 0x1e2e <.L11>
    1e24:	1f b2 97    	mov.w     [w15-30], w4
    1e26:	af b2 97    	mov.w     [w15-28], w5
    1e28:	3f b3 97    	mov.w     [w15-26], w6
    1e2a:	cf b3 97    	mov.w     [w15-24], w7
    1e2c:	09 00 07    	rcall     0x1e40 <.LPA2>

00001e2e <.L11>:
    1e2e:	6f b0 97    	mov.w     [w15-20], w0
    1e30:	ff b0 97    	mov.w     [w15-18], w1
    1e32:	0f b9 97    	mov.w     [w15-16], w2
    1e34:	9f b9 97    	mov.w     [w15-14], w3
    1e36:	4f 06 be    	mov.d     [--w15], w12
    1e38:	4f 05 be    	mov.d     [--w15], w10
    1e3a:	4f 04 be    	mov.d     [--w15], w8
    1e3c:	00 80 fa    	ulnk      
    1e3e:	00 00 06    	return    

00001e40 <.LPA2>:
    1e40:	01 00 07    	rcall     0x1e44 <.LPA5>
    1e42:	00 00 06    	return    

00001e44 <.LPA5>:
    1e44:	a4 b7 9f    	mov.w     w4, [w15-28]
    1e46:	b5 b7 9f    	mov.w     w5, [w15-26]
    1e48:	c6 b7 9f    	mov.w     w6, [w15-24]
    1e4a:	d7 b7 9f    	mov.w     w7, [w15-22]
    1e4c:	00 00 06    	return    

00001e4e <.LPA0>:
    1e4e:	4f 09 de    	lsr.w     w1, #0xf, w2
    1e50:	82 81 71    	ior.w     w3, w2, w3
    1e52:	b3 b7 9f    	mov.w     w3, [w15-26]
    1e54:	4f 01 de    	lsr.w     w0, #0xf, w2
    1e56:	81 80 40    	add.w     w1, w1, w1
    1e58:	82 80 70    	ior.w     w1, w2, w1
    1e5a:	a1 b7 9f    	mov.w     w1, [w15-28]
    1e5c:	8f b0 97    	mov.w     [w15-32], w1
    1e5e:	4f 09 de    	lsr.w     w1, #0xf, w2
    1e60:	00 00 40    	add.w     w0, w0, w0
    1e62:	02 00 70    	ior.w     w0, w2, w0
    1e64:	90 b7 9f    	mov.w     w0, [w15-30]
    1e66:	7f a8 97    	mov.w     [w15-34], w0
    1e68:	4f 01 de    	lsr.w     w0, #0xf, w2
    1e6a:	81 80 40    	add.w     w1, w1, w1
    1e6c:	82 80 70    	ior.w     w1, w2, w1
    1e6e:	81 b7 9f    	mov.w     w1, [w15-32]
    1e70:	0d 00 07    	rcall     0x1e8c <.LPA4>
    1e72:	4f 3a de    	lsr.w     w7, #0xf, w4
    1e74:	00 00 40    	add.w     w0, w0, w0
    1e76:	04 00 70    	ior.w     w0, w4, w0
    1e78:	f0 af 9f    	mov.w     w0, [w15-34]
    1e7a:	08 00 07    	rcall     0x1e8c <.LPA4>
    1e7c:	04 02 42    	add.w     w4, w4, w4
    1e7e:	85 82 4a    	addc.w    w5, w5, w5
    1e80:	06 03 4b    	addc.w    w6, w6, w6
    1e82:	87 83 4b    	addc.w    w7, w7, w7
    1e84:	df ff 07    	rcall     0x1e44 <.LPA5>
    1e86:	08 02 be    	mov.d     w8, w4
    1e88:	0a 03 be    	mov.d     w10, w6
    1e8a:	00 00 06    	return    

00001e8c <.LPA4>:
    1e8c:	2f b2 97    	mov.w     [w15-28], w4
    1e8e:	bf b2 97    	mov.w     [w15-26], w5
    1e90:	4f b3 97    	mov.w     [w15-24], w6
    1e92:	df b3 97    	mov.w     [w15-22], w7
    1e94:	00 00 06    	return    

00001e96 <___udivdi3>:
    1e96:	88 1f 78    	mov.w     w8, [w15++]
    1e98:	18 00 20    	mov.w     #0x1, w8
    1e9a:	88 1f 78    	mov.w     w8, [w15++]
    1e9c:	89 ff 07    	rcall     0x1db0 <___udivmoddi3>
    1e9e:	8f 87 e9    	dec2.w    w15, w15
    1ea0:	4f 04 78    	mov.w     [--w15], w8
    1ea2:	00 00 06    	return    

00001ea4 <___umoddi3>:
    1ea4:	80 1f eb    	clr.w     [w15++]
    1ea6:	84 ff 07    	rcall     0x1db0 <___udivmoddi3>
    1ea8:	8f 87 e9    	dec2.w    w15, w15
    1eaa:	00 00 06    	return    

00001eac <___divdi3>:
    1eac:	88 9f be    	mov.d     w8, [w15++]
    1eae:	8a 9f be    	mov.d     w10, [w15++]
    1eb0:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1eb2:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1eb4:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1eb6:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1eb8:	0c 00 3d    	bra       GE, 0x1ed2 <.L15>
    1eba:	60 44 b8    	mul.uu    w8, #0x0, w8
    1ebc:	60 55 b8    	mul.uu    w10, #0x0, w10
    1ebe:	00 00 54    	sub.w     w8, w0, w0
    1ec0:	81 80 5c    	subb.w    w9, w1, w1
    1ec2:	02 01 5d    	subb.w    w10, w2, w2
    1ec4:	83 81 5d    	subb.w    w11, w3, w3
    1ec6:	18 00 20    	mov.w     #0x1, w8
    1ec8:	15 00 07    	rcall     0x1ef4 <.LPA3>
    1eca:	08 00 3d    	bra       GE, 0x1edc <.L16>
    1ecc:	18 00 07    	rcall     0x1efe <.LPA1>
    1ece:	00 04 eb    	clr.w     w8
    1ed0:	05 00 37    	bra       0x1edc <.L16>

00001ed2 <.L15>:
    1ed2:	00 04 eb    	clr.w     w8
    1ed4:	0f 00 07    	rcall     0x1ef4 <.LPA3>
    1ed6:	02 00 3d    	bra       GE, 0x1edc <.L16>
    1ed8:	12 00 07    	rcall     0x1efe <.LPA1>
    1eda:	18 00 20    	mov.w     #0x1, w8

00001edc <.L16>:
    1edc:	dc ff 07    	rcall     0x1e96 <___udivdi3>
    1ede:	08 00 e0    	cp0.w     w8
    1ee0:	06 00 32    	bra       Z, 0x1eee <.L17>
    1ee2:	60 22 b8    	mul.uu    w4, #0x0, w4
    1ee4:	60 33 b8    	mul.uu    w6, #0x0, w6
    1ee6:	00 00 52    	sub.w     w4, w0, w0
    1ee8:	81 80 5a    	subb.w    w5, w1, w1
    1eea:	02 01 5b    	subb.w    w6, w2, w2
    1eec:	83 81 5b    	subb.w    w7, w3, w3

00001eee <.L17>:
    1eee:	4f 05 be    	mov.d     [--w15], w10
    1ef0:	4f 04 be    	mov.d     [--w15], w8
    1ef2:	00 00 06    	return    

00001ef4 <.LPA3>:
    1ef4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1ef6:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1ef8:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1efa:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1efc:	00 00 06    	return    

00001efe <.LPA1>:
    1efe:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f00:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f02:	04 02 54    	sub.w     w8, w4, w4
    1f04:	85 82 5c    	subb.w    w9, w5, w5
    1f06:	06 03 5d    	subb.w    w10, w6, w6
    1f08:	87 83 5d    	subb.w    w11, w7, w7
    1f0a:	00 00 06    	return    

00001f0c <___moddi3>:
    1f0c:	88 9f be    	mov.d     w8, [w15++]
    1f0e:	8a 9f be    	mov.d     w10, [w15++]
    1f10:	8c 1f 78    	mov.w     w12, [w15++]
    1f12:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1f14:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1f16:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1f18:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1f1a:	0d 00 3d    	bra       GE, 0x1f36 <.L21>
    1f1c:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f1e:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f20:	00 00 54    	sub.w     w8, w0, w0
    1f22:	81 80 5c    	subb.w    w9, w1, w1
    1f24:	02 01 5d    	subb.w    w10, w2, w2
    1f26:	83 81 5d    	subb.w    w11, w3, w3
    1f28:	1c 00 20    	mov.w     #0x1, w12
    1f2a:	08 20 e1    	cp.w      w4, w8
    1f2c:	09 a8 e1    	cpb.w     w5, w9
    1f2e:	0a b0 e1    	cpb.w     w6, w10
    1f30:	0b b8 e1    	cpb.w     w7, w11
    1f32:	0d 00 3d    	bra       GE, 0x1f4e <.L22>
    1f34:	08 00 37    	bra       0x1f46 <.L26>

00001f36 <.L21>:
    1f36:	00 06 eb    	clr.w     w12
    1f38:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f3a:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f3c:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1f3e:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1f40:	06 00 3d    	bra       GE, 0x1f4e <.L22>
    1f42:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f44:	60 55 b8    	mul.uu    w10, #0x0, w10

00001f46 <.L26>:
    1f46:	04 02 54    	sub.w     w8, w4, w4
    1f48:	85 82 5c    	subb.w    w9, w5, w5
    1f4a:	06 03 5d    	subb.w    w10, w6, w6
    1f4c:	87 83 5d    	subb.w    w11, w7, w7

00001f4e <.L22>:
    1f4e:	aa ff 07    	rcall     0x1ea4 <___umoddi3>
    1f50:	0c 00 e0    	cp0.w     w12
    1f52:	06 00 32    	bra       Z, 0x1f60 <.L23>
    1f54:	60 22 b8    	mul.uu    w4, #0x0, w4
    1f56:	60 33 b8    	mul.uu    w6, #0x0, w6
    1f58:	00 00 52    	sub.w     w4, w0, w0
    1f5a:	81 80 5a    	subb.w    w5, w1, w1
    1f5c:	02 01 5b    	subb.w    w6, w2, w2
    1f5e:	83 81 5b    	subb.w    w7, w3, w3

00001f60 <.L23>:
    1f60:	4f 06 78    	mov.w     [--w15], w12
    1f62:	4f 05 be    	mov.d     [--w15], w10
    1f64:	4f 04 be    	mov.d     [--w15], w8
    1f66:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	76 3b 04    	goto      0x3b76 <__T1Interrupt>
    1026:	00 00 00 
    1028:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	b2 3b 04    	goto      0x3bb2 <__T2Interrupt>
    1032:	00 00 00 
    1034:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	ae 3c 04    	goto      0x3cae <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	4c 3c 04    	goto      0x3c4c <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	3c 3e 04    	goto      0x3e3c <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009f68 <.LC1-0x18e>:
    9f68:	3f 00       	.word 0x3f
    9f6a:	06 00       	.word 0x6
    9f6c:	5b 00       	.word 0x5b
    9f6e:	4f 00       	.word 0x4f
    9f70:	66 00       	.word 0x66
    9f72:	6d 00       	.word 0x6d
    9f74:	7d 00       	.word 0x7d
    9f76:	07 00       	.word 0x7
    9f78:	7f 00       	.word 0x7f
    9f7a:	6f 00       	.word 0x6f
    9f7c:	77 00       	.word 0x77
    9f7e:	7c 00       	.word 0x7c
    9f80:	39 00       	.word 0x39
    9f82:	5e 00       	.word 0x5e
    9f84:	79 00       	.word 0x79
    9f86:	71 00       	.word 0x71
	...
    9f8c:	01 00       	.word 0x1
    9f8e:	02 00       	.word 0x2
    9f90:	04 00       	.word 0x4
    9f92:	08 00       	.word 0x8
    9f94:	10 00       	.word 0x10
    9f96:	20 00       	.word 0x20
    9f98:	40 00       	.word 0x40
    9f9a:	80 00       	.word 0x80
    9f9c:	00 01       	.word 0x100
    9f9e:	00 02       	.word 0x200
    9fa0:	00 04       	.word 0x400
    9fa2:	00 08       	.word 0x800
    9fa4:	00 10       	.word 0x1000
    9fa6:	00 20       	.word 0x2000
    9fa8:	00 40       	.word 0x4000
    9faa:	00 80       	.word 0x8000
	...
    9fbc:	c9 12       	.word 0x12c9
    9fbe:	c0 15       	.word 0x15c0
    9fc0:	f9 12       	.word 0x12f9
    9fc2:	e3 00       	.word 0xe3
    9fc4:	30 05       	.word 0x530
    9fc6:	c8 12       	.word 0x12c8
    9fc8:	00 3a       	.word 0x3a00
    9fca:	00 17       	.word 0x1700
    9fcc:	00 00       	.word 0
    9fce:	06 00       	.word 0x6
    9fd0:	20 02       	.word 0x220
    9fd2:	ce 12       	.word 0x12ce
    9fd4:	ed 12       	.word 0x12ed
    9fd6:	24 0c       	.word 0xc24
    9fd8:	5d 23       	.word 0x235d
    9fda:	00 04       	.word 0x400
    9fdc:	00 24       	.word 0x2400
    9fde:	00 09       	.word 0x900
    9fe0:	c0 3f       	.word 0x3fc0
    9fe2:	c0 12       	.word 0x12c0
    9fe4:	00 08       	.word 0x800
    9fe6:	c0 00       	.word 0xc0
    9fe8:	00 00       	.word 0
    9fea:	00 0c       	.word 0xc00
    9fec:	3f 0c       	.word 0xc3f
    9fee:	06 00       	.word 0x6
    9ff0:	db 00       	.word 0xdb
    9ff2:	8f 00       	.word 0x8f
    9ff4:	e6 00       	.word 0xe6
    9ff6:	69 20       	.word 0x2069
    9ff8:	fd 00       	.word 0xfd
    9ffa:	07 00       	.word 0x7
    9ffc:	ff 00       	.word 0xff
    9ffe:	ef 00       	.word 0xef
    a000:	00 12       	.word 0x1200
    a002:	00 0a       	.word 0xa00
    a004:	00 24       	.word 0x2400
    a006:	c8 00       	.word 0xc8
    a008:	00 09       	.word 0x900
    a00a:	83 10       	.word 0x1083
    a00c:	bb 02       	.word 0x2bb
    a00e:	f7 00       	.word 0xf7
    a010:	8f 12       	.word 0x128f
    a012:	39 00       	.word 0x39
    a014:	0f 12       	.word 0x120f
    a016:	f9 00       	.word 0xf9
    a018:	71 00       	.word 0x71
    a01a:	bd 00       	.word 0xbd
    a01c:	f6 00       	.word 0xf6
    a01e:	00 12       	.word 0x1200
    a020:	1e 00       	.word 0x1e
    a022:	70 24       	.word 0x2470
    a024:	38 00       	.word 0x38
    a026:	36 05       	.word 0x536
    a028:	36 21       	.word 0x2136
    a02a:	3f 00       	.word 0x3f
    a02c:	f3 00       	.word 0xf3
    a02e:	3f 20       	.word 0x203f
    a030:	f3 20       	.word 0x20f3
    a032:	ed 00       	.word 0xed
    a034:	01 12       	.word 0x1201
    a036:	3e 00       	.word 0x3e
    a038:	30 0c       	.word 0xc30
    a03a:	36 28       	.word 0x2836
    a03c:	00 2d       	.word 0x2d00
    a03e:	00 15       	.word 0x1500
    a040:	09 0c       	.word 0xc09
    a042:	39 00       	.word 0x39
    a044:	00 21       	.word 0x2100
    a046:	0f 00       	.word 0xf
    a048:	03 0c       	.word 0xc03
    a04a:	08 00       	.word 0x8
    a04c:	00 01       	.word 0x100
    a04e:	58 10       	.word 0x1058
    a050:	78 20       	.word 0x2078
    a052:	d8 00       	.word 0xd8
    a054:	8e 08       	.word 0x88e
    a056:	58 08       	.word 0x858
    a058:	71 00       	.word 0x71
    a05a:	8e 04       	.word 0x48e
    a05c:	70 10       	.word 0x1070
    a05e:	00 10       	.word 0x1000
    a060:	0e 00       	.word 0xe
    a062:	00 36       	.word 0x3600
    a064:	30 00       	.word 0x30
    a066:	d4 10       	.word 0x10d4
    a068:	50 10       	.word 0x1050
    a06a:	dc 00       	.word 0xdc
    a06c:	70 01       	.word 0x170
    a06e:	86 04       	.word 0x486
    a070:	50 00       	.word 0x50
    a072:	88 20       	.word 0x2088
    a074:	78 00       	.word 0x78
    a076:	1c 00       	.word 0x1c
    a078:	04 20       	.word 0x2004
    a07a:	14 28       	.word 0x2814
    a07c:	c0 28       	.word 0x28c0
    a07e:	0c 20       	.word 0x200c
    a080:	48 08       	.word 0x848
    a082:	49 09       	.word 0x949
    a084:	00 12       	.word 0x1200
    a086:	89 24       	.word 0x2489
    a088:	20 05       	.word 0x520
    a08a:	ff 3f       	.word 0x3fff
    a08c:	20 36       	.word 0x3620
    a08e:	47 4b       	.word 0x4b47
    a090:	34 20       	.word 0x2034
    a092:	51 5a       	.word 0x5a51
    a094:	59 37       	.word 0x3759
    a096:	20 4b       	.word 0x4b20
    a098:	55 44       	.word 0x4455
    a09a:	38 00       	.word 0x38
    a09c:	20 56       	.word 0x5620
    a09e:	37 34       	.word 0x3437
    a0a0:	58 20       	.word 0x2058
    a0a2:	55 33       	.word 0x3355
    a0a4:	57 59       	.word 0x5957
    a0a6:	20 4b       	.word 0x4b20
    a0a8:	4b 56       	.word 0x564b
    a0aa:	44 00       	.word 0x44
    a0ac:	20 41       	.word 0x4120
    a0ae:	42 4a       	.word 0x4a42
    a0b0:	51 20       	.word 0x2051
    a0b2:	4e 34       	.word 0x344e
    a0b4:	59 4e       	.word 0x4e59
    a0b6:	20 4e       	.word 0x4e20
    a0b8:	55 4b       	.word 0x4b55
    a0ba:	35 00       	.word 0x35
    a0bc:	20 5a       	.word 0x5a20
    a0be:	41 42       	.word 0x4241
    a0c0:	33 20       	.word 0x2033
    a0c2:	43 50       	.word 0x5043
    a0c4:	4b 43       	.word 0x434b
    a0c6:	20 54       	.word 0x5420
    a0c8:	4d 4e       	.word 0x4e4d
    a0ca:	36 00       	.word 0x36
    a0cc:	20 38       	.word 0x3820
    a0ce:	54 35       	.word 0x3554
    a0d0:	45 20       	.word 0x2045
    a0d2:	36 37       	.word 0x3736
    a0d4:	42 36       	.word 0x3642
    a0d6:	20 58       	.word 0x5820
    a0d8:	50 4b       	.word 0x4b50
    a0da:	54 00       	.word 0x54
    a0dc:	20 33       	.word 0x3320
    a0de:	39 36       	.word 0x3639
    a0e0:	54 20       	.word 0x2054
    a0e2:	54 4e       	.word 0x4e54
    a0e4:	58 56       	.word 0x5658
    a0e6:	20 51       	.word 0x5120
    a0e8:	44 53       	.word 0x5344
    a0ea:	37 00       	.word 0x37
    a0ec:	2b 1b       	.word 0x1b2b
    a0ee:	e4 20       	.word 0x20e4
    a0f0:	7f 3e       	.word 0x3e7f
    a0f2:	3f 1f       	.word 0x1f3f
    a0f4:	ff ff       	.word 0xffff

0000a0f6 <.LC1>:
    a0f6:	00 4c       	.word 0x4c00

0000a0f7 <.LC2>:
    a0f7:	00 00       	.word 0
    a0f9:	00 00       	.word 0
    a0fb:	00 00       	.word 0
    a0fd:	00 00       	.word 0
    a0ff:	00 00       	.word 0
    a101:	00 00       	.word 0
    a103:	00 00       	.word 0
    a105:	00 00       	.word 0
    a107:	00 00       	.word 0
    a109:	00 00       	.word 0
    a10b:	00 00       	.word 0
    a10d:	00 00       	.word 0

0000a10f <.LC0>:
	...

0000a120 <.LC3>:
    a120:	53 65       	.word 0x6553
    a122:	74 75       	.word 0x7574
    a124:	70 00       	.word 0x70

0000a126 <.LC4>:
    a126:	72 75       	.word 0x7572
    a128:	6e 00       	.word 0x6e

0000a12a <.LC5>:
    a12a:	4e 75       	.word 0x754e
    a12c:	6d 20       	.word 0x206d
    a12e:	53 74       	.word 0x7453
    a130:	72 69       	.word 0x6972
    a132:	6b 65       	.word 0x656b
    a134:	73 3a       	.word 0x3a73
    a136:	25 64       	.word 0x6425
    a138:	00 00       	.word 0

0000a13a <.LC0>:
    a13a:	20 20       	.word 0x2020
    a13c:	20 20       	.word 0x2020
    a13e:	20 20       	.word 0x2020
    a140:	20 20       	.word 0x2020
    a142:	20 20       	.word 0x2020
    a144:	20 20       	.word 0x2020
    a146:	20 20       	.word 0x2020
    a148:	20 20       	.word 0x2020
    a14a:	20 20       	.word 0x2020
    a14c:	20 20       	.word 0x2020
    a14e:	20 20       	.word 0x2020
    a150:	20 20       	.word 0x2020
    a152:	20 20       	.word 0x2020
    a154:	20 20       	.word 0x2020
    a156:	20 20       	.word 0x2020
    a158:	20 20       	.word 0x2020
    a15a:	20 20       	.word 0x2020
    a15c:	20 20       	.word 0x2020
    a15e:	20 20       	.word 0x2020
    a160:	20 20       	.word 0x2020
    a162:	20 20       	.word 0x2020
    a164:	20 20       	.word 0x2020
    a166:	20 20       	.word 0x2020
    a168:	20 20       	.word 0x2020
    a16a:	20 20       	.word 0x2020
    a16c:	20 20       	.word 0x2020
    a16e:	20 20       	.word 0x2020
    a170:	20 20       	.word 0x2020
    a172:	00 20       	.word 0x2000

0000a173 <.LC1>:
    a173:	00 00       	.word 0
    a175:	00 00       	.word 0
    a177:	00 00       	.word 0
    a179:	00 00       	.word 0
    a17b:	00 00       	.word 0
    a17d:	00 00       	.word 0
    a17f:	00 00       	.word 0
    a181:	00 00       	.word 0
	...

0000a184 <.LC2>:
    a184:	7a 79       	.word 0x797a
    a186:	78 77       	.word 0x7778
    a188:	76 75       	.word 0x7576
    a18a:	74 73       	.word 0x7374
    a18c:	72 71       	.word 0x7172
    a18e:	70 6f       	.word 0x6f70
    a190:	6e 6d       	.word 0x6d6e
    a192:	6c 6b       	.word 0x6b6c
    a194:	6a 69       	.word 0x696a
    a196:	68 67       	.word 0x6768
    a198:	66 65       	.word 0x6566
    a19a:	64 63       	.word 0x6364
    a19c:	62 61       	.word 0x6162
    a19e:	39 38       	.word 0x3839
    a1a0:	37 36       	.word 0x3637
    a1a2:	35 34       	.word 0x3435
    a1a4:	33 32       	.word 0x3233
    a1a6:	31 30       	.word 0x3031
    a1a8:	31 32       	.word 0x3231
    a1aa:	33 34       	.word 0x3433
    a1ac:	35 36       	.word 0x3635
    a1ae:	37 38       	.word 0x3837
    a1b0:	39 61       	.word 0x6139
    a1b2:	62 63       	.word 0x6362
    a1b4:	64 65       	.word 0x6564
    a1b6:	66 67       	.word 0x6766
    a1b8:	68 69       	.word 0x6968
    a1ba:	6a 6b       	.word 0x6b6a
    a1bc:	6c 6d       	.word 0x6d6c
    a1be:	6e 6f       	.word 0x6f6e
    a1c0:	70 71       	.word 0x7170
    a1c2:	72 73       	.word 0x7372
    a1c4:	74 75       	.word 0x7574
    a1c6:	76 77       	.word 0x7776
    a1c8:	78 79       	.word 0x7978
    a1ca:	7a 00       	.word 0x7a
Disassembly of section .text:

000021cc <_strikeLEDOff>:

typedef void (*STATE_HANDLER_T)(void);
STATE_HANDLER_T state, last_state;

void strikeLEDOff() {
    21cc:	00 00 fa    	lnk       #0x0
    STRIKE1_RLED = OFF; delay_by_nop(1);
    21ce:	da a2 a9    	bclr.b    0x2da, #0x5
    21d0:	10 00 20    	mov.w     #0x1, w0
    21d2:	01 00 20    	mov.w     #0x0, w1
    21d4:	3c 09 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE1_GLED = OFF; delay_by_nop(1);
    21d6:	da 82 a9    	bclr.b    0x2da, #0x4
    21d8:	10 00 20    	mov.w     #0x1, w0
    21da:	01 00 20    	mov.w     #0x0, w1
    21dc:	38 09 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE2_RLED = OFF; delay_by_nop(1);
    21de:	da 02 a9    	bclr.b    0x2da, #0x0
    21e0:	10 00 20    	mov.w     #0x1, w0
    21e2:	01 00 20    	mov.w     #0x0, w1
    21e4:	34 09 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE2_GLED = OFF; delay_by_nop(1);
    21e6:	da 22 a9    	bclr.b    0x2da, #0x1
    21e8:	10 00 20    	mov.w     #0x1, w0
    21ea:	01 00 20    	mov.w     #0x0, w1
    21ec:	30 09 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE3_RLED = OFF; delay_by_nop(1);
    21ee:	cb e2 a9    	bclr.b    0x2cb, #0x7
    21f0:	10 00 20    	mov.w     #0x1, w0
    21f2:	01 00 20    	mov.w     #0x0, w1
    21f4:	2c 09 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE3_GLED = OFF; delay_by_nop(1);
    21f6:	ea 62 a9    	bclr.b    0x2ea, #0x3
    21f8:	10 00 20    	mov.w     #0x1, w0
    21fa:	01 00 20    	mov.w     #0x0, w1
    21fc:	28 09 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    21fe:	00 80 fa    	ulnk      
    2200:	00 00 06    	return    

00002202 <_main>:

// MAIN FUNCTION ***************************************************************

int16_t main(void) {
    2202:	18 00 fa    	lnk       #0x18
    2204:	88 1f 78    	mov.w     w8, [w15++]
    init_elecanisms();
    2206:	7e 0d 07    	rcall     0x3d04 <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    init_clock(); // not sure if this does anything
    2208:	00 10 20    	mov.w     #0x100, w0
    220a:	20 3a 88    	mov.w     w0, 0x744
    init_ajuart();
    220c:	62 0b 07    	rcall     0x38d2 <_init_ajuart> <.L0> <.LFB0> <.LFE21> <.Letext0> <.Ltext0>
    // Initializes I2C on I2C3
    i2c_init(1e3);
    220e:	80 3e 20    	mov.w     #0x3e8, w0
    2210:	31 09 07    	rcall     0x3474 <_i2c_init> <.LFB1> <.LFE0>
    led_begin((_ADAFRUIT_LED*)&matrix.super, matrix_addr); // Set up the HT16K33 and start the oscillator
    2212:	12 c8 bf    	mov.b     0x812, WREG
    2214:	80 40 78    	mov.b     w0, w1
    2216:	a0 02 21    	mov.w     #0x102a, w0
    2218:	f3 03 07    	rcall     0x2a00 <_led_begin> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
    lcd_init(&lcd1, 0x05, 'A'); //Setup LCD screen (type A i/o extender)
    221a:	12 c4 b3    	mov.b     #0x41, w2
    221c:	51 c0 b3    	mov.b     #0x5, w1
    221e:	e0 03 21    	mov.w     #0x103e, w0
    2220:	4d 07 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
    lcd_clear(&lcd1);  // Clears _LCD objects from previous array
    2222:	e0 03 21    	mov.w     #0x103e, w0
    2224:	df 07 07    	rcall     0x31e4 <_lcd_clear> <.LFB8> <.LFE7>

    time_left = max_time; // Set up time left to be max time
    2226:	c0 12 20    	mov.w     #0x12c, w0
    2228:	00 40 88    	mov.w     w0, 0x800

    // Setup pins as output
    D0_DIR = 0;
    222a:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    D1_DIR = 0;
    222c:	d8 82 a9    	bclr.b    0x2d8, #0x4
    D10_DIR = 0;
    222e:	d8 02 a9    	bclr.b    0x2d8, #0x0
    D11_DIR = 0;
    2230:	d8 22 a9    	bclr.b    0x2d8, #0x1
    D4_DIR = 0;
    2232:	c9 e2 a9    	bclr.b    0x2c9, #0x7
    D5_DIR = 0;
    2234:	e8 62 a9    	bclr.b    0x2e8, #0x3
    D6_DIR = 0;
    2236:	d9 02 a9    	bclr.b    0x2d9, #0x0
    D7_DIR = 0;
    2238:	d9 62 a9    	bclr.b    0x2d9, #0x3
    D8_DIR = 0;
    223a:	d9 22 a9    	bclr.b    0x2d9, #0x1
    D9_DIR = 0;
    223c:	d9 42 a9    	bclr.b    0x2d9, #0x2

    // // Setup D8 as input
    // D8_DIR = 1;
    // // Set up pull-up resistor on button D8
    // CNPU4bits.CN54PUE = 1;
    // // Set D9 as pull-down for button
    // D9 = 0;

    /* Timer 1 setup for game timing*/
    T1CON = 0x0030;         // set Timer1 period to 1s
    223e:	00 03 20    	mov.w     #0x30, w0
    2240:	20 08 88    	mov.w     w0, 0x104
    PR1 = 0xF422;
    2242:	20 42 2f    	mov.w     #0xf422, w0
    2244:	10 08 88    	mov.w     w0, 0x102
    TMR1 = 0;               // set Timer1 count to 0
    2246:	00 21 ef    	clr.w     0x100
    IFS0bits.T1IF = 0;      // lower Timer1 interrupt flag
    2248:	84 60 a9    	bclr.b    0x84, #0x3
    IEC0bits.T1IE = 1;      // enable Timer1 interrupt
    224a:	94 60 a8    	bset.b    0x94, #0x3

    /* Timer 2 setup for beep timing*/
    T2CON = 0x0030;
    224c:	00 03 20    	mov.w     #0x30, w0
    224e:	80 08 88    	mov.w     w0, 0x110
    PR2 = 0x186A;           // set Timer2 period to 0.1s
    2250:	a0 86 21    	mov.w     #0x186a, w0
    2252:	60 08 88    	mov.w     w0, 0x10c
    TMR2 = 0;               // set Timer1 count to 0
    2254:	06 21 ef    	clr.w     0x106
    IFS0bits.T2IF = 0;      // lower T2 interrupt flag
    2256:	84 e0 a9    	bclr.b    0x84, #0x7
    IEC0bits.T2IE = 1;      // enable T2 interrupt
    2258:	94 e0 a8    	bset.b    0x94, #0x7

    /* Remap OC1 to D11 */
    uint8_t *RPOR, *RPINR;
    RPOR = (uint8_t *)&RPOR0;
    225a:	00 6c 20    	mov.w     #0x6c0, w0
    225c:	10 07 98    	mov.w     w0, [w14+2]
    RPINR = (uint8_t *)&RPINR0;
    225e:	00 68 20    	mov.w     #0x680, w0
    2260:	20 07 98    	mov.w     w0, [w14+4]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    2262:	11 3a 80    	mov.w     0x742, w1
    2264:	f0 0b 20    	mov.w     #0xbf, w0
    2266:	00 81 60    	and.w     w1, w0, w2
    2268:	60 04 20    	mov.w     #0x46, w0
    226a:	71 05 20    	mov.w     #0x57, w1
    226c:	23 74 20    	mov.w     #0x742, w3
    226e:	80 49 78    	mov.b     w0, [w3]
    2270:	81 49 78    	mov.b     w1, [w3]
    2272:	82 49 78    	mov.b     w2, [w3]
    RPOR[D12_RP] = OC1_RP;  // connect the OC1 module output to pin D8
    2274:	1e 00 90    	mov.w     [w14+2], w0
    2276:	77 00 40    	add.w     w0, #0x17, w0
    2278:	21 c1 b3    	mov.b     #0x12, w1
    227a:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    227c:	10 3a 80    	mov.w     0x742, w0
    227e:	00 01 78    	mov.w     w0, w2
    2280:	02 60 a0    	bset.w    w2, #0x6
    2282:	60 04 20    	mov.w     #0x46, w0
    2284:	71 05 20    	mov.w     #0x57, w1
    2286:	23 74 20    	mov.w     #0x742, w3
    2288:	80 49 78    	mov.b     w0, [w3]
    228a:	81 49 78    	mov.b     w1, [w3]
    228c:	82 49 78    	mov.b     w2, [w3]

    /* OC1 setup for beep output*/
    OC1CON1bits.OCTSEL = 0b111;   // configure OC1 module to use the peripheral
    228e:	81 0c 80    	mov.w     0x190, w1
    2290:	00 c0 21    	mov.w     #0x1c00, w0
    2292:	01 00 70    	ior.w     w0, w1, w0
    2294:	80 0c 88    	mov.w     w0, 0x190
                                  //   clock (i.e., FCY, OCTSEL<2:0> = 0b111) and
    OC1CON1bits.OCM = 0b110;      //   and to operate in edge-aligned PWM mode
    2296:	81 0c 80    	mov.w     0x190, w1
    2298:	80 ff 2f    	mov.w     #0xfff8, w0
    229a:	00 80 60    	and.w     w1, w0, w0
    229c:	60 00 b3    	ior.w     #0x6, w0
    229e:	80 0c 88    	mov.w     w0, 0x190
                                  //   (OCM<2:0> = 0b110)
    OC1CON2bits.OCTRIG = 0;       // configure OC1 module to syncrhonize to itself
    22a0:	92 e1 a9    	bclr.b    0x192, #0x7
    OC1CON2bits.SYNCSEL = 0x1F;   //   (i.e., OCTRIG = 0 and SYNCSEL<4:0> = 0b11111)
    22a2:	90 0c 80    	mov.w     0x192, w0
    22a4:	f0 01 b3    	ior.w     #0x1f, w0
    22a6:	90 0c 88    	mov.w     w0, 0x192

    OC1RS = PWM_PERIOD_2_3;       // configure period register to get 2.3 kHz
    22a8:	60 07 85    	mov.w     0xa0ec, w0
    22aa:	a0 0c 88    	mov.w     w0, 0x194
    OC1TMR = 0;                   // set OC1 timer count to 0
    22ac:	98 21 ef    	clr.w     0x198
    OC1R = 0;                     // start with it off
    22ae:	96 21 ef    	clr.w     0x196


    state = idle;           // Initialize state to idle
    22b0:	20 4a 22    	mov.w     #0x24a2, w0
    22b2:	60 40 88    	mov.w     w0, 0x80c
    last_state = (STATE_HANDLER_T)NULL;
    22b4:	0e 28 ef    	clr.w     0x80e

    num_strikes = 0;
    22b6:	05 68 ef    	clr.b     0x805
    prev_num_strikes = 0;
    22b8:	06 68 ef    	clr.b     0x806
    game_complete = 0;
    22ba:	07 68 ef    	clr.b     0x807

    /* Setup LEDs and serial number */
    rand_val = read_analog(A0_AN); // Set up the seed
    22bc:	50 00 20    	mov.w     #0x5, w0
    22be:	52 0d 07    	rcall     0x3d64 <_read_analog> <.LFB1> <.LFE0>
    22c0:	50 40 88    	mov.w     w0, 0x80a

    // Add more random noise
    uint8_t i, j;
    for (i=0; i<20; i++) {
    22c2:	00 40 eb    	clr.b     w0
    22c4:	00 4f 78    	mov.b     w0, [w14]
    22c6:	12 00 37    	bra       0x22ec <.L3>

000022c8 <.L6>:
        for (j=0; j<read_analog(A0_AN); j++) {
    22c8:	00 40 eb    	clr.b     w0
    22ca:	10 47 98    	mov.b     w0, [w14+1]
    22cc:	08 00 37    	bra       0x22de <.L4>

000022ce <.L5>:
            rand_next();
    22ce:	57 0d 07    	rcall     0x3d7e <_rand_next> <.LFB2> <.LFE1>
            delay_by_nop(read_analog(A0_AN));
    22d0:	50 00 20    	mov.w     #0x5, w0
    22d2:	48 0d 07    	rcall     0x3d64 <_read_analog> <.LFB1> <.LFE0>
    22d4:	80 00 eb    	clr.w     w1
    22d6:	bb 08 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    22d8:	1e 40 90    	mov.b     [w14+1], w0
    22da:	00 40 e8    	inc.b     w0, w0
    22dc:	10 47 98    	mov.b     w0, [w14+1]

000022de <.L4>:
    22de:	1e 40 90    	mov.b     [w14+1], w0
    22e0:	00 84 fb    	ze        w0, w8
    22e2:	50 00 20    	mov.w     #0x5, w0
    22e4:	3f 0d 07    	rcall     0x3d64 <_read_analog> <.LFB1> <.LFE0>
    22e6:	80 0f 54    	sub.w     w8, w0, [w15]
    22e8:	f2 ff 39    	bra       NC, 0x22ce <.L5>
    22ea:	1e 4f e8    	inc.b     [w14], [w14]

000022ec <.L3>:
    22ec:	1e 40 78    	mov.b     [w14], w0
    22ee:	f3 4f 50    	sub.b     w0, #0x13, [w15]
    22f0:	eb ff 36    	bra       LEU, 0x22c8 <.L6>
        }
    }

    serial_idx = rand_val%6;
    22f2:	52 40 80    	mov.w     0x80a, w2
    22f4:	b0 aa 2a    	mov.w     #0xaaab, w0
    22f6:	00 10 b8    	mul.uu    w2, w0, w0
    22f8:	42 08 de    	lsr.w     w1, #0x2, w0
    22fa:	66 00 b9    	mul.su    w0, #0x6, w0
    22fc:	00 00 78    	mov.w     w0, w0
    22fe:	00 00 51    	sub.w     w2, w0, w0
    2300:	00 40 78    	mov.b     w0, w0
    2302:	08 e8 b7    	mov.b     WREG, 0x808

    char _dispstring[17] = "";
    2304:	f0 10 2a    	mov.w     #0xa10f, w0
    2306:	90 40 78    	mov.b     [w0], w1
    2308:	71 47 98    	mov.b     w1, [w14+7]
    230a:	e8 00 47    	add.w     w14, #0x8, w1
    230c:	0f 00 09    	repeat    #0xf
    230e:	80 58 eb    	clr.b     [w1++]
    for (i=0; i<16; i++){
    2310:	00 40 eb    	clr.b     w0
    2312:	00 4f 78    	mov.b     w0, [w14]
    2314:	0c 00 37    	bra       0x232e <.L7>

00002316 <.L8>:
        _dispstring[i] = serial_nums[serial_idx][i];
    2316:	1e 80 fb    	ze        [w14], w0
    2318:	81 80 20    	mov.w     #0x808, w1
    231a:	91 40 78    	mov.b     [w1], w1
    231c:	01 81 fb    	ze        w1, w2
    231e:	9e 80 fb    	ze        [w14], w1
    2320:	44 11 dd    	sl.w      w2, #0x4, w2
    2322:	81 00 41    	add.w     w2, w1, w1
    2324:	c2 08 2a    	mov.w     #0xa08c, w2
    2326:	e2 c0 78    	mov.b     [w2+w1], w1
    2328:	00 00 47    	add.w     w14, w0, w0
    232a:	71 40 98    	mov.b     w1, [w0+7]
    232c:	1e 4f e8    	inc.b     [w14], [w14]

0000232e <.L7>:
    232e:	1e 40 78    	mov.b     [w14], w0
    2330:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    2332:	f1 ff 36    	bra       LEU, 0x2316 <.L8>
    }
    dispstring = _dispstring;
    2334:	67 00 47    	add.w     w14, #0x7, w0
    2336:	10 40 88    	mov.w     w0, 0x802
    lcd_print2(&lcd1, dispstring, "");
    2338:	10 40 80    	mov.w     0x802, w0
    233a:	62 0f 2a    	mov.w     #0xa0f6, w2
    233c:	80 00 78    	mov.w     w0, w1
    233e:	e0 03 21    	mov.w     #0x103e, w0
    2340:	ae 07 07    	rcall     0x329e <_lcd_print2> <.LFB13> <.LFE12>

    rand_next();
    2342:	1d 0d 07    	rcall     0x3d7e <_rand_next> <.LFB2> <.LFE1>
    sprintf(char_buffer, "LED rand val:%d, %d, %d", ((rand_val%8) & 0x1), ((rand_val%8) & 0x2), ((rand_val%8) & 0x4));
    2344:	50 40 80    	mov.w     0x80a, w0
    2346:	64 01 60    	and.w     w0, #0x4, w2
    2348:	50 40 80    	mov.w     0x80a, w0
    234a:	e2 00 60    	and.w     w0, #0x2, w1
    234c:	50 40 80    	mov.w     0x80a, w0
    234e:	61 00 60    	and.w     w0, #0x1, w0
    2350:	82 1f 78    	mov.w     w2, [w15++]
    2352:	81 1f 78    	mov.w     w1, [w15++]
    2354:	80 1f 78    	mov.w     w0, [w15++]
    2356:	70 0f 2a    	mov.w     #0xa0f7, w0
    2358:	80 1f 78    	mov.w     w0, [w15++]
    235a:	30 04 21    	mov.w     #0x1043, w0
    235c:	21 f9 07    	rcall     0x15a0 <__sprintf_cdnopuxX>
    235e:	e8 87 57    	sub.w     w15, #0x8, w15
    U1_puts(char_buffer);
    2360:	30 04 21    	mov.w     #0x1043, w0
    2362:	44 0b 07    	rcall     0x39ec <_U1_puts> <.LFB7> <.LFE6>
    U1_putc('\r');
    2364:	d0 c0 b3    	mov.b     #0xd, w0
    2366:	08 0b 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\n');
    2368:	a0 c0 b3    	mov.b     #0xa, w0
    236a:	06 0b 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    236c:	fc 0a 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>


    RTC_LED  = ((rand_val%8) & 0x1) ? ON : OFF; delay_by_nop(1);
    236e:	50 40 80    	mov.w     0x80a, w0
    2370:	00 40 78    	mov.b     w0, w0
    2372:	61 40 60    	and.b     w0, #0x1, w0
    2374:	61 40 60    	and.b     w0, #0x1, w0
    2376:	61 40 60    	and.b     w0, #0x1, w0
    2378:	00 80 fb    	ze        w0, w0
    237a:	61 00 60    	and.w     w0, #0x1, w0
    237c:	49 00 dd    	sl.w      w0, #0x9, w0
    237e:	d2 16 80    	mov.w     0x2da, w2
    2380:	f1 df 2f    	mov.w     #0xfdff, w1
    2382:	81 00 61    	and.w     w2, w1, w1
    2384:	01 00 70    	ior.w     w0, w1, w0
    2386:	d0 16 88    	mov.w     w0, 0x2da
    2388:	10 00 20    	mov.w     #0x1, w0
    238a:	01 00 20    	mov.w     #0x0, w1
    238c:	60 08 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    FLUX_LED = ((rand_val%8) & 0x2) ? ON : OFF; delay_by_nop(1);
    238e:	50 40 80    	mov.w     0x80a, w0
    2390:	62 00 60    	and.w     w0, #0x2, w0
    2392:	00 f0 a7    	btsc.w    w0, #0xf
    2394:	00 00 ea    	neg.w     w0, w0
    2396:	00 00 ea    	neg.w     w0, w0
    2398:	4f 00 de    	lsr.w     w0, #0xf, w0
    239a:	00 40 78    	mov.b     w0, w0
    239c:	00 80 fb    	ze        w0, w0
    239e:	61 00 60    	and.w     w0, #0x1, w0
    23a0:	48 00 dd    	sl.w      w0, #0x8, w0
    23a2:	d2 16 80    	mov.w     0x2da, w2
    23a4:	f1 ef 2f    	mov.w     #0xfeff, w1
    23a6:	81 00 61    	and.w     w2, w1, w1
    23a8:	01 00 70    	ior.w     w0, w1, w0
    23aa:	d0 16 88    	mov.w     w0, 0x2da
    23ac:	10 00 20    	mov.w     #0x1, w0
    23ae:	01 00 20    	mov.w     #0x0, w1
    23b0:	4e 08 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    EPS_LED  = ((rand_val%8) & 0x4) ? ON : OFF; delay_by_nop(1);
    23b2:	50 40 80    	mov.w     0x80a, w0
    23b4:	64 00 60    	and.w     w0, #0x4, w0
    23b6:	00 f0 a7    	btsc.w    w0, #0xf
    23b8:	00 00 ea    	neg.w     w0, w0
    23ba:	00 00 ea    	neg.w     w0, w0
    23bc:	4f 00 de    	lsr.w     w0, #0xf, w0
    23be:	00 40 78    	mov.b     w0, w0
    23c0:	00 80 fb    	ze        w0, w0
    23c2:	61 00 60    	and.w     w0, #0x1, w0
    23c4:	4b 00 dd    	sl.w      w0, #0xb, w0
    23c6:	d2 16 80    	mov.w     0x2da, w2
    23c8:	f1 7f 2f    	mov.w     #0xf7ff, w1
    23ca:	81 00 61    	and.w     w2, w1, w1
    23cc:	01 00 70    	ior.w     w0, w1, w0
    23ce:	d0 16 88    	mov.w     w0, 0x2da
    23d0:	10 00 20    	mov.w     #0x1, w0
    23d2:	01 00 20    	mov.w     #0x0, w1
    23d4:	3c 08 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>


    i2c2_init(157);      // initialize I2C for 16Mhz OSC with 100kHz I2C clock
    23d6:	d0 09 20    	mov.w     #0x9d, w0
    23d8:	8d 09 07    	rcall     0x36f4 <_i2c2_init> <.LFB13> <.LFE12>

    delay_by_nop(300000);
    23da:	00 3e 29    	mov.w     #0x93e0, w0
    23dc:	41 00 20    	mov.w     #0x4, w1
    23de:	37 08 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Poll the peripherals to see who's here
    for (i = 0; i < 7; i++) {
    23e0:	00 40 eb    	clr.b     w0
    23e2:	00 4f 78    	mov.b     w0, [w14]
    23e4:	14 00 37    	bra       0x240e <.L9>

000023e6 <.L11>:
        uint8_t temp = 0;
    23e6:	00 40 eb    	clr.b     w0
    23e8:	60 47 98    	mov.b     w0, [w14+6]

        i2c2_start();
    23ea:	91 09 07    	rcall     0x370e <_i2c2_start> <.LFB14> <.LFE13>
        temp = send_i2c2_byte(peripheral_addrs[i]); // set /W bit
    23ec:	1e 80 fb    	ze        [w14], w0
    23ee:	e1 11 21    	mov.w     #0x111e, w1
    23f0:	61 40 78    	mov.b     [w1+w0], w0
    23f2:	00 80 fb    	ze        w0, w0
    23f4:	db 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
    23f6:	60 47 98    	mov.b     w0, [w14+6]
        if (temp == 0) {
    23f8:	6e 40 90    	mov.b     [w14+6], w0
    23fa:	00 04 e0    	cp0.b     w0
    23fc:	06 00 3a    	bra       NZ, 0x240a <.L10>
            peripheral_present[i] = 1; // We found it, but we need to reset the FSM for i2c
    23fe:	1e 80 fb    	ze        [w14], w0
    2400:	31 0c 21    	mov.w     #0x10c3, w1
    2402:	12 c0 b3    	mov.b     #0x1, w2
    2404:	82 70 78    	mov.b     w2, [w1+w0]
            send_i2c2_byte(0xA0); // Send dummy byte to reset FSM
    2406:	00 0a 20    	mov.w     #0xa0, w0
    2408:	d1 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>

0000240a <.L10>:
        }
        reset_i2c2_bus();
    240a:	b5 09 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>

0000240c <.LBE2>:
    240c:	1e 4f e8    	inc.b     [w14], [w14]

0000240e <.L9>:
    240e:	1e 40 78    	mov.b     [w14], w0
    2410:	e6 4f 50    	sub.b     w0, #0x6, [w15]
    2412:	e9 ff 36    	bra       LEU, 0x23e6 <.L11> <.LBB2>
    }

    /* Send out parameters */
    for (i = 0; i < 7; i++) {
    2414:	00 40 eb    	clr.b     w0
    2416:	00 4f 78    	mov.b     w0, [w14]
    2418:	11 00 37    	bra       0x243c <.L12>

0000241a <.L14>:
        if (peripheral_present[i]) {
    241a:	1e 80 fb    	ze        [w14], w0
    241c:	31 0c 21    	mov.w     #0x10c3, w1
    241e:	61 40 78    	mov.b     [w1+w0], w0
    2420:	00 04 e0    	cp0.b     w0
    2422:	0b 00 32    	bra       Z, 0x243a <.L13>
            i2c2_start();
    2424:	74 09 07    	rcall     0x370e <_i2c2_start> <.LFB14> <.LFE13>
            send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    2426:	1e 80 fb    	ze        [w14], w0
    2428:	e1 11 21    	mov.w     #0x111e, w1
    242a:	61 40 78    	mov.b     [w1+w0], w0
    242c:	00 80 fb    	ze        w0, w0
    242e:	be 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
            send_i2c2_byte((HEADER_SERIAL_NUMBER << 5) | serial_idx); // Serial Number
    2430:	08 c8 bf    	mov.b     0x808, WREG
    2432:	00 74 a0    	bset.b    w0, #0x7
    2434:	00 80 fb    	ze        w0, w0
    2436:	ba 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
            reset_i2c2_bus();
    2438:	9e 09 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>

0000243a <.L13>:
    243a:	1e 4f e8    	inc.b     [w14], [w14]

0000243c <.L12>:
    243c:	1e 40 78    	mov.b     [w14], w0
    243e:	e6 4f 50    	sub.b     w0, #0x6, [w15]
    2440:	ec ff 36    	bra       LEU, 0x241a <.L14>
        }
    }

    for (i = 0; i < 7; i++) {
    2442:	00 40 eb    	clr.b     w0
    2444:	00 4f 78    	mov.b     w0, [w14]
    2446:	12 00 37    	bra       0x246c <.L15>

00002448 <.L17>:
        if (peripheral_present[i]) {
    2448:	1e 80 fb    	ze        [w14], w0
    244a:	31 0c 21    	mov.w     #0x10c3, w1
    244c:	61 40 78    	mov.b     [w1+w0], w0
    244e:	00 04 e0    	cp0.b     w0
    2450:	0c 00 32    	bra       Z, 0x246a <.L16>
            i2c2_start();
    2452:	5d 09 07    	rcall     0x370e <_i2c2_start> <.LFB14> <.LFE13>
            send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    2454:	1e 80 fb    	ze        [w14], w0
    2456:	e1 11 21    	mov.w     #0x111e, w1
    2458:	61 40 78    	mov.b     [w1+w0], w0
    245a:	00 80 fb    	ze        w0, w0
    245c:	a7 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
            send_i2c2_byte((HEADER_MASTER_LED << 5) | rand_val%8); // LEDs (should be fine, might break if rand_val changes)
    245e:	50 40 80    	mov.w     0x80a, w0
    2460:	e7 00 60    	and.w     w0, #0x7, w1
    2462:	00 06 20    	mov.w     #0x60, w0
    2464:	01 00 70    	ior.w     w0, w1, w0
    2466:	a2 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
            reset_i2c2_bus();
    2468:	86 09 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>

0000246a <.L16>:
    246a:	1e 4f e8    	inc.b     [w14], [w14]

0000246c <.L15>:
    246c:	1e 40 78    	mov.b     [w14], w0
    246e:	e6 4f 50    	sub.b     w0, #0x6, [w15]
    2470:	eb ff 36    	bra       LEU, 0x2448 <.L17>
        }
    }

    /* Send out start condition */
    for (i = 0; i < 7; i++) {
    2472:	00 40 eb    	clr.b     w0
    2474:	00 4f 78    	mov.b     w0, [w14]
    2476:	0f 00 37    	bra       0x2496 <.L18>

00002478 <.L20>:
        if (peripheral_present[i]) {
    2478:	1e 80 fb    	ze        [w14], w0
    247a:	31 0c 21    	mov.w     #0x10c3, w1
    247c:	61 40 78    	mov.b     [w1+w0], w0
    247e:	00 04 e0    	cp0.b     w0
    2480:	09 00 32    	bra       Z, 0x2494 <.L19>
            i2c2_start();
    2482:	45 09 07    	rcall     0x370e <_i2c2_start> <.LFB14> <.LFE13>
            send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    2484:	1e 80 fb    	ze        [w14], w0
    2486:	e1 11 21    	mov.w     #0x111e, w1
    2488:	61 40 78    	mov.b     [w1+w0], w0
    248a:	00 80 fb    	ze        w0, w0
    248c:	8f 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
            send_i2c2_byte(HEADER_START_GAME << 5);
    248e:	00 0c 20    	mov.w     #0xc0, w0
    2490:	8d 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
            reset_i2c2_bus();
    2492:	71 09 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>

00002494 <.L19>:
    2494:	1e 4f e8    	inc.b     [w14], [w14]

00002496 <.L18>:
    2496:	1e 40 78    	mov.b     [w14], w0
    2498:	e6 4f 50    	sub.b     w0, #0x6, [w15]
    249a:	ee ff 36    	bra       LEU, 0x2478 <.L20>

0000249c <.L21>:
        }
    }

    while (1) {
        state();
    249c:	60 40 80    	mov.w     0x80c, w0
    249e:	00 00 01    	call      w0
    }
    24a0:	fd ff 37    	bra       0x249c <.L21>

000024a2 <_idle>:

}

// ISRs ************************************************************************

uint8_t beep_state = 0;

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    IFS0bits.T1IF = 0;  // if it's been a second, lower the counter and show it
    time_left--;
    if (state == run) {
        TMR2 = 0;
        beep_state = 0;
        IEC0bits.T2IE = 1; // enable t2 interrupt
        T2CONbits.TON = 1; //Start T2
        OC1RS = PWM_PERIOD_2_3;
        OC1R = OC1RS>>1; // start beep
    }
}

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    IFS0bits.T2IF = 0;
    switch (beep_state) {
        case 0:         // turn off after first beep
            OC1R = 0;
            beep_state++;
            LED3 = OFF; delay_by_nop(1);
            LED1 = ON; delay_by_nop(1);
            break;
        case 1:
            OC1RS = PWM_PERIOD_1_9; // make lower beep
            OC1R = OC1RS>>1;
            LED1 = OFF; delay_by_nop(1);
            LED2 = ON; delay_by_nop(1);
            beep_state++;
            break;
        case 2:
            OC1RS = PWM_PERIOD_2_3; // Reset to high beep and stop
            OC1R = 0;
            LED1 = OFF; delay_by_nop(1);
            LED2 = ON; delay_by_nop(1);
            beep_state++;
            break;
        default:
            break;
    }
}

// STATE MACHINE FUNCTIONS *****************************************************

void idle(void) {
    24a2:	00 00 fa    	lnk       #0x0
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    24a4:	61 40 80    	mov.w     0x80c, w1
    24a6:	70 40 80    	mov.w     0x80e, w0
    24a8:	80 8f 50    	sub.w     w1, w0, [w15]
    24aa:	04 00 32    	bra       Z, 0x24b4 <.L32>
        last_state = state;
    24ac:	60 40 80    	mov.w     0x80c, w0
    24ae:	70 40 88    	mov.w     w0, 0x80e
        dispSeconds(max_time); // Start by showing full time
    24b0:	c0 12 20    	mov.w     #0x12c, w0
    24b2:	3e 02 07    	rcall     0x2930 <_dispSeconds> <.LFB8> <.LFE7>

000024b4 <.L32>:
    }

    // Perform state tasks

    // Check for state transitions
    /* TODO is it better to not have the start button? */
    delay_by_nop(2000000); // delay for a long time at the start
    24b4:	00 48 28    	mov.w     #0x8480, w0
    24b6:	e1 01 20    	mov.w     #0x1e, w1
    24b8:	ca 07 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    state=run;
    24ba:	00 4d 22    	mov.w     #0x24d0, w0
    24bc:	60 40 88    	mov.w     w0, 0x80c

    U1_puts("Setup");
    24be:	00 12 2a    	mov.w     #0xa120, w0
    24c0:	95 0a 07    	rcall     0x39ec <_U1_puts> <.LFB7> <.LFE6>
    U1_putc('\r');
    24c2:	d0 c0 b3    	mov.b     #0xd, w0
    24c4:	59 0a 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\n');
    24c6:	a0 c0 b3    	mov.b     #0xa, w0
    24c8:	57 0a 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    24ca:	4d 0a 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

    // if (D8 == 0) { // D8 is pulled-up, if button is pressed it pulls it down
    //     state = run;
    // }

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    }
}
    24cc:	00 80 fa    	ulnk      
    24ce:	00 00 06    	return    

000024d0 <_run>:

void run(void) {
    24d0:	06 00 fa    	lnk       #0x6
    if (state != last_state) {  // if we are entering the state, do intitialization stuff
    24d2:	61 40 80    	mov.w     0x80c, w1
    24d4:	70 40 80    	mov.w     0x80e, w0
    24d6:	80 8f 50    	sub.w     w1, w0, [w15]
    24d8:	19 00 32    	bra       Z, 0x250c <.L34>
        last_state = state;
    24da:	60 40 80    	mov.w     0x80c, w0
    24dc:	70 40 88    	mov.w     w0, 0x80e
        IFS0bits.T1IF = 0; //lower interrupt flag
    24de:	84 60 a9    	bclr.b    0x84, #0x3
        TMR1 = 0;          // reset timer register
    24e0:	00 21 ef    	clr.w     0x100
        T1CONbits.TON = 1; // enable 1 second timer
    24e2:	05 e1 a8    	bset.b    0x105, #0x7

        time_left = max_time;
    24e4:	c0 12 20    	mov.w     #0x12c, w0
    24e6:	00 40 88    	mov.w     w0, 0x800
        dispSeconds(time_left);
    24e8:	00 40 80    	mov.w     0x800, w0
    24ea:	22 02 07    	rcall     0x2930 <_dispSeconds> <.LFB8> <.LFE7>
        STRIKE1_GLED = ON; // Turn on strike LEDs to green
    24ec:	da 82 a8    	bset.b    0x2da, #0x4
        delay_by_nop(1);
    24ee:	10 00 20    	mov.w     #0x1, w0
    24f0:	01 00 20    	mov.w     #0x0, w1
    24f2:	ad 07 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = ON;
    24f4:	da 22 a8    	bset.b    0x2da, #0x1
        delay_by_nop(1);
    24f6:	10 00 20    	mov.w     #0x1, w0
    24f8:	01 00 20    	mov.w     #0x0, w1
    24fa:	a9 07 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = ON;
    24fc:	ea 62 a8    	bset.b    0x2ea, #0x3
        U1_puts("run");
    24fe:	60 12 2a    	mov.w     #0xa126, w0
    2500:	75 0a 07    	rcall     0x39ec <_U1_puts> <.LFB7> <.LFE6>
        U1_putc('\r');
    2502:	d0 c0 b3    	mov.b     #0xd, w0
    2504:	39 0a 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
        U1_putc('\n');
    2506:	a0 c0 b3    	mov.b     #0xa, w0
    2508:	37 0a 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
        U1_flush_tx_buffer();
    250a:	2d 0a 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

0000250c <.L34>:
    }

    // Perform state tasks
    datareturned = 0;
    250c:	04 68 ef    	clr.b     0x804
    uint8_t i;
    uint16_t prev_r = 0; uint16_t prev_rs = 0;
    250e:	00 00 eb    	clr.w     w0
    2510:	10 07 98    	mov.w     w0, [w14+2]
    2512:	00 00 eb    	clr.w     w0
    2514:	20 07 98    	mov.w     w0, [w14+4]

    // Handle time
    dispSeconds(time_left);
    2516:	00 40 80    	mov.w     0x800, w0
    2518:	0b 02 07    	rcall     0x2930 <_dispSeconds> <.LFB8> <.LFE7>
    if (time_left == 0) {
    251a:	00 40 80    	mov.w     0x800, w0
    251c:	00 00 e0    	cp0.w     w0
    251e:	17 00 3a    	bra       NZ, 0x254e <.L35>
        for (i = 0; i < 7; i++) {
    2520:	00 40 eb    	clr.b     w0
    2522:	00 4f 78    	mov.b     w0, [w14]
    2524:	0f 00 37    	bra       0x2544 <.L36>

00002526 <.L38>:
            if(peripheral_present[i]) {
    2526:	1e 80 fb    	ze        [w14], w0
    2528:	31 0c 21    	mov.w     #0x10c3, w1
    252a:	61 40 78    	mov.b     [w1+w0], w0
    252c:	00 04 e0    	cp0.b     w0
    252e:	09 00 32    	bra       Z, 0x2542 <.L37>
                i2c2_start();
    2530:	ee 08 07    	rcall     0x370e <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    2532:	1e 80 fb    	ze        [w14], w0
    2534:	e1 11 21    	mov.w     #0x111e, w1
    2536:	61 40 78    	mov.b     [w1+w0], w0
    2538:	00 80 fb    	ze        w0, w0
    253a:	38 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte(HEADER_END_LOSE << 5); // Broadcast the current number of strikes
    253c:	00 04 20    	mov.w     #0x40, w0
    253e:	36 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    2540:	1a 09 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>

00002542 <.L37>:
    2542:	1e 4f e8    	inc.b     [w14], [w14]

00002544 <.L36>:
    2544:	1e 40 78    	mov.b     [w14], w0
    2546:	e6 4f 50    	sub.b     w0, #0x6, [w15]
    2548:	ee ff 36    	bra       LEU, 0x2526 <.L38>
            }
        }
       state = end_fail;            // if we're out of time, go to end
    254a:	a0 79 22    	mov.w     #0x279a, w0
    254c:	60 40 88    	mov.w     w0, 0x80c

0000254e <.L35>:
    }

    // Get completeness and strikes from every module
    prev_num_strikes = num_strikes;
    254e:	05 c8 bf    	mov.b     0x805, WREG
    2550:	06 e8 b7    	mov.b     WREG, 0x806
    for (i = 0; i < 7; i++) {
    2552:	00 40 eb    	clr.b     w0
    2554:	00 4f 78    	mov.b     w0, [w14]
    2556:	3e 00 37    	bra       0x25d4 <.L39>

00002558 <.L44>:
        if(peripheral_present[i]) {
    2558:	1e 80 fb    	ze        [w14], w0
    255a:	31 0c 21    	mov.w     #0x10c3, w1
    255c:	61 40 78    	mov.b     [w1+w0], w0
    255e:	00 04 e0    	cp0.b     w0
    2560:	38 00 32    	bra       Z, 0x25d2 <.L40>
            i2c2_start();
    2562:	d5 08 07    	rcall     0x370e <_i2c2_start> <.LFB14> <.LFE13>
            send_i2c2_byte(peripheral_addrs[i] | 1);  // init a read, last to 1
    2564:	1e 80 fb    	ze        [w14], w0
    2566:	e1 11 21    	mov.w     #0x111e, w1
    2568:	61 40 78    	mov.b     [w1+w0], w0
    256a:	00 04 a0    	bset.b    w0, #0x0
    256c:	00 80 fb    	ze        w0, w0
    256e:	1e 09 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
            datareturned = i2c2_read_nack();
    2570:	7f 09 07    	rcall     0x3870 <_i2c2_read_nack> <.LFB20> <.LFE19>
    2572:	04 e8 b7    	mov.b     WREG, 0x804
            reset_i2c2_bus();
    2574:	00 09 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>

            if (datareturned & 0b10000000) { // Complete flag
    2576:	04 c8 bf    	mov.b     0x804, WREG
    2578:	00 04 e0    	cp0.b     w0
    257a:	1b 00 3d    	bra       GE, 0x25b2 <.L41>
                if (peripheral_complete[i] == 0){
    257c:	1e 80 fb    	ze        [w14], w0
    257e:	a1 0c 21    	mov.w     #0x10ca, w1
    2580:	61 40 78    	mov.b     [w1+w0], w0
    2582:	00 04 e0    	cp0.b     w0
    2584:	12 00 3a    	bra       NZ, 0x25aa <.L42>

                    disable_interrupts();
    2586:	ff 3f fc    	disi      #0x3fff
                    prev_rs = OC1RS;
    2588:	a1 0c 80    	mov.w     0x194, w1
    258a:	21 07 98    	mov.w     w1, [w14+4]
                    prev_r = OC1R;
    258c:	b1 0c 80    	mov.w     0x196, w1
    258e:	11 07 98    	mov.w     w1, [w14+2]
                    OC1RS = PWM_PERIOD_2;
    2590:	90 07 85    	mov.w     0xa0f2, w0
    2592:	a0 0c 88    	mov.w     w0, 0x194
                    OC1R = OC1RS >> 1; // Make a high-pitched complete sound
    2594:	a0 0c 80    	mov.w     0x194, w0
    2596:	00 00 d1    	lsr.w     w0, w0
    2598:	b0 0c 88    	mov.w     w0, 0x196
                    delay_by_nop(300000);
    259a:	00 3e 29    	mov.w     #0x93e0, w0
    259c:	41 00 20    	mov.w     #0x4, w1
    259e:	57 07 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
                    OC1RS = prev_rs;
    25a0:	ae 00 90    	mov.w     [w14+4], w1
    25a2:	a1 0c 88    	mov.w     w1, 0x194
                    OC1R = prev_r;
    25a4:	9e 00 90    	mov.w     [w14+2], w1
    25a6:	b1 0c 88    	mov.w     w1, 0x196
                    enable_interrupts();
    25a8:	52 20 ef    	clr.w     0x52

000025aa <.L42>:
                }
                peripheral_complete[i] = 1;
    25aa:	1e 80 fb    	ze        [w14], w0
    25ac:	a1 0c 21    	mov.w     #0x10ca, w1
    25ae:	12 c0 b3    	mov.b     #0x1, w2
    25b0:	82 70 78    	mov.b     w2, [w1+w0]

000025b2 <.L41>:
            }
            if (((datareturned & 0b01110000) >> 4) > prev_num_strikes) { //If the module recorded any strikes
    25b2:	04 c8 bf    	mov.b     0x804, WREG
    25b4:	80 80 fb    	ze        w0, w1
    25b6:	00 07 20    	mov.w     #0x70, w0
    25b8:	00 80 60    	and.w     w1, w0, w0
    25ba:	c4 80 de    	asr.w     w0, #0x4, w1
    25bc:	06 c8 bf    	mov.b     0x806, WREG
    25be:	00 80 fb    	ze        w0, w0
    25c0:	80 8f 50    	sub.w     w1, w0, [w15]
    25c2:	07 00 34    	bra       LE, 0x25d2 <.L40>
                num_strikes = ((datareturned & 0b01110000) >> 4);
    25c4:	04 c8 bf    	mov.b     0x804, WREG
    25c6:	80 80 fb    	ze        w0, w1
    25c8:	00 07 20    	mov.w     #0x70, w0
    25ca:	00 80 60    	and.w     w1, w0, w0
    25cc:	44 80 de    	asr.w     w0, #0x4, w0
    25ce:	00 40 78    	mov.b     w0, w0
    25d0:	05 e8 b7    	mov.b     WREG, 0x805

000025d2 <.L40>:
    25d2:	1e 4f e8    	inc.b     [w14], [w14]

000025d4 <.L39>:
    25d4:	1e 40 78    	mov.b     [w14], w0
    25d6:	e6 4f 50    	sub.b     w0, #0x6, [w15]
    25d8:	bf ff 36    	bra       LEU, 0x2558 <.L44>
            }
            if ((datareturned & 0b00001111) != 0) {
                // TODO: implement error codes if necessary
            }
        }
    }
    //Handles completeness
    game_complete = 1;
    25da:	10 c0 b3    	mov.b     #0x1, w0
    25dc:	07 e8 b7    	mov.b     WREG, 0x807
    for (i = 0; i < 7; i++) {
    25de:	00 40 eb    	clr.b     w0
    25e0:	00 4f 78    	mov.b     w0, [w14]
    25e2:	0c 00 37    	bra       0x25fc <.L45>

000025e4 <.L47>:
        if (peripheral_present[i] && !peripheral_complete[i]) {
    25e4:	1e 80 fb    	ze        [w14], w0
    25e6:	31 0c 21    	mov.w     #0x10c3, w1
    25e8:	61 40 78    	mov.b     [w1+w0], w0
    25ea:	00 04 e0    	cp0.b     w0
    25ec:	06 00 32    	bra       Z, 0x25fa <.L46>
    25ee:	1e 80 fb    	ze        [w14], w0
    25f0:	a1 0c 21    	mov.w     #0x10ca, w1
    25f2:	61 40 78    	mov.b     [w1+w0], w0
    25f4:	00 04 e0    	cp0.b     w0
    25f6:	01 00 3a    	bra       NZ, 0x25fa <.L46>
            game_complete = 0;
    25f8:	07 68 ef    	clr.b     0x807

000025fa <.L46>:
    25fa:	1e 4f e8    	inc.b     [w14], [w14]

000025fc <.L45>:
    25fc:	1e 40 78    	mov.b     [w14], w0
    25fe:	e6 4f 50    	sub.b     w0, #0x6, [w15]
    2600:	f1 ff 36    	bra       LEU, 0x25e4 <.L47>
        }
    }
    // If we checked all of them and the game is still complete, then count it!
    if (game_complete) {
    2602:	07 c8 bf    	mov.b     0x807, WREG
    2604:	00 04 e0    	cp0.b     w0
    2606:	17 00 32    	bra       Z, 0x2636 <.L48>
        for (i = 0; i < 7; i++) {
    2608:	00 40 eb    	clr.b     w0
    260a:	00 4f 78    	mov.b     w0, [w14]
    260c:	0f 00 37    	bra       0x262c <.L49>

0000260e <.L51>:
            if(peripheral_present[i]) {
    260e:	1e 80 fb    	ze        [w14], w0
    2610:	31 0c 21    	mov.w     #0x10c3, w1
    2612:	61 40 78    	mov.b     [w1+w0], w0
    2614:	00 04 e0    	cp0.b     w0
    2616:	09 00 32    	bra       Z, 0x262a <.L50>
                i2c2_start();
    2618:	7a 08 07    	rcall     0x370e <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    261a:	1e 80 fb    	ze        [w14], w0
    261c:	e1 11 21    	mov.w     #0x111e, w1
    261e:	61 40 78    	mov.b     [w1+w0], w0
    2620:	00 80 fb    	ze        w0, w0
    2622:	c4 08 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte(HEADER_END_WIN << 5); // Broadcast that we won
    2624:	00 02 20    	mov.w     #0x20, w0
    2626:	c2 08 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    2628:	a6 08 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>

0000262a <.L50>:
    262a:	1e 4f e8    	inc.b     [w14], [w14]

0000262c <.L49>:
    262c:	1e 40 78    	mov.b     [w14], w0
    262e:	e6 4f 50    	sub.b     w0, #0x6, [w15]
    2630:	ee ff 36    	bra       LEU, 0x260e <.L51>
            }
        }
        //TODO: Go to 'win' state
        state = end_win;
    2632:	60 86 22    	mov.w     #0x2866, w0
    2634:	60 40 88    	mov.w     w0, 0x80c

00002636 <.L48>:
    }

    //Handles strikes
    strikeLEDOff(); // Handle strike LEDs
    2636:	ca fd 07    	rcall     0x21cc <_strikeLEDOff> <.L0> <.LFB0> <.Ltext0>
    switch (num_strikes){
    2638:	05 c8 bf    	mov.b     0x805, WREG
    263a:	00 80 fb    	ze        w0, w0
    263c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    263e:	11 00 32    	bra       Z, 0x2662 <.L54>
    2640:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2642:	1c 00 32    	bra       Z, 0x267c <.L55>
    2644:	00 00 e0    	cp0.w     w0
    2646:	27 00 3a    	bra       NZ, 0x2696 <.L67>
        case 0:
            STRIKE1_GLED = ON; delay_by_nop(1);
    2648:	da 82 a8    	bset.b    0x2da, #0x4
    264a:	10 00 20    	mov.w     #0x1, w0
    264c:	01 00 20    	mov.w     #0x0, w1
    264e:	ff 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_GLED = ON; delay_by_nop(1);
    2650:	da 22 a8    	bset.b    0x2da, #0x1
    2652:	10 00 20    	mov.w     #0x1, w0
    2654:	01 00 20    	mov.w     #0x0, w1
    2656:	fb 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_GLED = ON; delay_by_nop(1);
    2658:	ea 62 a8    	bset.b    0x2ea, #0x3
    265a:	10 00 20    	mov.w     #0x1, w0
    265c:	01 00 20    	mov.w     #0x0, w1
    265e:	f7 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    2660:	27 00 37    	bra       0x26b0 <.L56>

00002662 <.L54>:
        case 1:
            STRIKE1_RLED = ON; delay_by_nop(1);
    2662:	da a2 a8    	bset.b    0x2da, #0x5
    2664:	10 00 20    	mov.w     #0x1, w0
    2666:	01 00 20    	mov.w     #0x0, w1
    2668:	f2 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_GLED = ON; delay_by_nop(1);
    266a:	da 22 a8    	bset.b    0x2da, #0x1
    266c:	10 00 20    	mov.w     #0x1, w0
    266e:	01 00 20    	mov.w     #0x0, w1
    2670:	ee 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_GLED = ON; delay_by_nop(1);
    2672:	ea 62 a8    	bset.b    0x2ea, #0x3
    2674:	10 00 20    	mov.w     #0x1, w0
    2676:	01 00 20    	mov.w     #0x0, w1
    2678:	ea 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    267a:	1a 00 37    	bra       0x26b0 <.L56>

0000267c <.L55>:
        case 2:
            STRIKE1_RLED = ON; delay_by_nop(1);
    267c:	da a2 a8    	bset.b    0x2da, #0x5
    267e:	10 00 20    	mov.w     #0x1, w0
    2680:	01 00 20    	mov.w     #0x0, w1
    2682:	e5 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_RLED = ON; delay_by_nop(1);
    2684:	da 02 a8    	bset.b    0x2da, #0x0
    2686:	10 00 20    	mov.w     #0x1, w0
    2688:	01 00 20    	mov.w     #0x0, w1
    268a:	e1 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_GLED = ON; delay_by_nop(1);
    268c:	ea 62 a8    	bset.b    0x2ea, #0x3
    268e:	10 00 20    	mov.w     #0x1, w0
    2690:	01 00 20    	mov.w     #0x0, w1
    2692:	dd 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    2694:	0d 00 37    	bra       0x26b0 <.L56>

00002696 <.L67>:
        default:
            STRIKE1_RLED = ON; delay_by_nop(1);
    2696:	da a2 a8    	bset.b    0x2da, #0x5
    2698:	10 00 20    	mov.w     #0x1, w0
    269a:	01 00 20    	mov.w     #0x0, w1
    269c:	d8 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_RLED = ON; delay_by_nop(1);
    269e:	da 02 a8    	bset.b    0x2da, #0x0
    26a0:	10 00 20    	mov.w     #0x1, w0
    26a2:	01 00 20    	mov.w     #0x0, w1
    26a4:	d4 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_RLED = ON; delay_by_nop(1);
    26a6:	cb e2 a8    	bset.b    0x2cb, #0x7
    26a8:	10 00 20    	mov.w     #0x1, w0
    26aa:	01 00 20    	mov.w     #0x0, w1
    26ac:	d0 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    26ae:	00 00 00    	nop       

000026b0 <.L56>:
    }

    if (num_strikes > prev_num_strikes) {
    26b0:	51 80 20    	mov.w     #0x805, w1
    26b2:	91 40 78    	mov.b     [w1], w1
    26b4:	06 c8 bf    	mov.b     0x806, WREG
    26b6:	80 cf 50    	sub.b     w1, w0, [w15]
    26b8:	3a 00 36    	bra       LEU, 0x272e <.L57>
        for (i = 0; i < 7; i++) {
    26ba:	00 40 eb    	clr.b     w0
    26bc:	00 4f 78    	mov.b     w0, [w14]
    26be:	13 00 37    	bra       0x26e6 <.L58>

000026c0 <.L60>:
            if (peripheral_present[i]) {
    26c0:	1e 80 fb    	ze        [w14], w0
    26c2:	31 0c 21    	mov.w     #0x10c3, w1
    26c4:	61 40 78    	mov.b     [w1+w0], w0
    26c6:	00 04 e0    	cp0.b     w0
    26c8:	0d 00 32    	bra       Z, 0x26e4 <.L59>
                i2c2_start();
    26ca:	21 08 07    	rcall     0x370e <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    26cc:	1e 80 fb    	ze        [w14], w0
    26ce:	e1 11 21    	mov.w     #0x111e, w1
    26d0:	61 40 78    	mov.b     [w1+w0], w0
    26d2:	00 80 fb    	ze        w0, w0
    26d4:	6b 08 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte((HEADER_NUM_STRIKES<<5) | num_strikes); // Broadcast the current number of strikes
    26d6:	51 80 20    	mov.w     #0x805, w1
    26d8:	91 40 78    	mov.b     [w1], w1
    26da:	00 ce b3    	mov.b     #0xe0, w0
    26dc:	00 c0 70    	ior.b     w1, w0, w0
    26de:	00 80 fb    	ze        w0, w0
    26e0:	65 08 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    26e2:	49 08 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>

000026e4 <.L59>:
    26e4:	1e 4f e8    	inc.b     [w14], [w14]

000026e6 <.L58>:
    26e6:	1e 40 78    	mov.b     [w14], w0
    26e8:	e6 4f 50    	sub.b     w0, #0x6, [w15]
    26ea:	ea ff 36    	bra       LEU, 0x26c0 <.L60>
            }
        }
        sprintf(char_buffer, "Num Strikes:%d", num_strikes);
    26ec:	05 c8 bf    	mov.b     0x805, WREG
    26ee:	00 80 fb    	ze        w0, w0
    26f0:	80 1f 78    	mov.w     w0, [w15++]
    26f2:	a0 12 2a    	mov.w     #0xa12a, w0
    26f4:	80 1f 78    	mov.w     w0, [w15++]
    26f6:	30 04 21    	mov.w     #0x1043, w0
    26f8:	53 f7 07    	rcall     0x15a0 <__sprintf_cdnopuxX>
    26fa:	e4 87 57    	sub.w     w15, #0x4, w15
        U1_puts(char_buffer);
    26fc:	30 04 21    	mov.w     #0x1043, w0
    26fe:	76 09 07    	rcall     0x39ec <_U1_puts> <.LFB7> <.LFE6>
        U1_putc('\r');
    2700:	d0 c0 b3    	mov.b     #0xd, w0
    2702:	3a 09 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
        U1_putc('\n');
    2704:	a0 c0 b3    	mov.b     #0xa, w0
    2706:	38 09 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
        U1_flush_tx_buffer();
    2708:	2e 09 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
        disable_interrupts();
    270a:	ff 3f fc    	disi      #0x3fff
        prev_rs = OC1RS;
    270c:	a1 0c 80    	mov.w     0x194, w1
    270e:	21 07 98    	mov.w     w1, [w14+4]
        prev_r = OC1R;
    2710:	b1 0c 80    	mov.w     0x196, w1
    2712:	11 07 98    	mov.w     w1, [w14+2]
        OC1RS = PWM_PERIOD_1;
    2714:	80 07 85    	mov.w     0xa0f0, w0
    2716:	a0 0c 88    	mov.w     w0, 0x194
        OC1R = OC1RS >> 1; // Make a soise for the strike
    2718:	a0 0c 80    	mov.w     0x194, w0
    271a:	00 00 d1    	lsr.w     w0, w0
    271c:	b0 0c 88    	mov.w     w0, 0x196
        delay_by_nop(300000);
    271e:	00 3e 29    	mov.w     #0x93e0, w0
    2720:	41 00 20    	mov.w     #0x4, w1
    2722:	95 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        OC1RS = prev_rs;
    2724:	ae 00 90    	mov.w     [w14+4], w1
    2726:	a1 0c 88    	mov.w     w1, 0x194
        OC1R = prev_r;
    2728:	9e 00 90    	mov.w     [w14+2], w1
    272a:	b1 0c 88    	mov.w     w1, 0x196
        enable_interrupts();
    272c:	52 20 ef    	clr.w     0x52

0000272e <.L57>:
    }
    if (num_strikes > 2) {
    272e:	05 c8 bf    	mov.b     0x805, WREG
    2730:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    2732:	17 00 36    	bra       LEU, 0x2762 <.L61>
        for (i = 0; i < 7; i++) {
    2734:	00 40 eb    	clr.b     w0
    2736:	00 4f 78    	mov.b     w0, [w14]
    2738:	0f 00 37    	bra       0x2758 <.L62>

0000273a <.L64>:
            if(peripheral_present[i]) {
    273a:	1e 80 fb    	ze        [w14], w0
    273c:	31 0c 21    	mov.w     #0x10c3, w1
    273e:	61 40 78    	mov.b     [w1+w0], w0
    2740:	00 04 e0    	cp0.b     w0
    2742:	09 00 32    	bra       Z, 0x2756 <.L63>
                i2c2_start();
    2744:	e4 07 07    	rcall     0x370e <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    2746:	1e 80 fb    	ze        [w14], w0
    2748:	e1 11 21    	mov.w     #0x111e, w1
    274a:	61 40 78    	mov.b     [w1+w0], w0
    274c:	00 80 fb    	ze        w0, w0
    274e:	2e 08 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte(HEADER_END_LOSE << 5); // Broadcast the current number of strikes
    2750:	00 04 20    	mov.w     #0x40, w0
    2752:	2c 08 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    2754:	10 08 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>

00002756 <.L63>:
    2756:	1e 4f e8    	inc.b     [w14], [w14]

00002758 <.L62>:
    2758:	1e 40 78    	mov.b     [w14], w0
    275a:	e6 4f 50    	sub.b     w0, #0x6, [w15]
    275c:	ee ff 36    	bra       LEU, 0x273a <.L64>
            }
        }
        state = end_fail;
    275e:	a0 79 22    	mov.w     #0x279a, w0
    2760:	60 40 88    	mov.w     w0, 0x80c

00002762 <.L61>:
    }

    // Check for state transitions
    if (SW2 == 0) {
    2762:	91 16 80    	mov.w     0x2d2, w1
    2764:	00 00 21    	mov.w     #0x1000, w0
    2766:	00 80 60    	and.w     w1, w0, w0
    2768:	00 00 e0    	cp0.w     w0
    276a:	02 00 3a    	bra       NZ, 0x2770 <.L65>
        state = idle;           // SW2 resets to idle
    276c:	20 4a 22    	mov.w     #0x24a2, w0
    276e:	60 40 88    	mov.w     w0, 0x80c

00002770 <.L65>:
    }

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    2770:	61 40 80    	mov.w     0x80c, w1
    2772:	70 40 80    	mov.w     0x80e, w0
    2774:	80 8f 50    	sub.w     w1, w0, [w15]
    2776:	0f 00 32    	bra       Z, 0x2796 <.L33>
        T1CONbits.TON = 0;
    2778:	05 e1 a9    	bclr.b    0x105, #0x7
        STRIKE1_GLED = OFF; // Turn off strike LEDs.
    277a:	da 82 a9    	bclr.b    0x2da, #0x4
        delay_by_nop(1);
    277c:	10 00 20    	mov.w     #0x1, w0
    277e:	01 00 20    	mov.w     #0x0, w1
    2780:	66 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = OFF;
    2782:	da 22 a9    	bclr.b    0x2da, #0x1
        delay_by_nop(1);
    2784:	10 00 20    	mov.w     #0x1, w0
    2786:	01 00 20    	mov.w     #0x0, w1
    2788:	62 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = OFF;
    278a:	ea 62 a9    	bclr.b    0x2ea, #0x3
        IEC0bits.T2IE = 0; // disable beep interrupt
    278c:	94 e0 a9    	bclr.b    0x94, #0x7
        OC1R = 0; // turn off beep
    278e:	96 21 ef    	clr.w     0x196
        dispSeconds(time_left);
    2790:	00 40 80    	mov.w     0x800, w0
    2792:	ce 00 07    	rcall     0x2930 <_dispSeconds> <.LFB8> <.LFE7>
        strikeLEDOff(); // turn off strike LEDs
    2794:	1b fd 07    	rcall     0x21cc <_strikeLEDOff> <.L0> <.LFB0> <.Ltext0>

00002796 <.L33>:
    }

    // sprintf(char_buffer, "Num Strikes:%d, Per. Pres:%d%d%d%d%d%d, Per. Complete:%d%d%d%d%d%d", num_strikes,
    //     peripheral_present[0], peripheral_present[1], peripheral_present[2], peripheral_present[3], peripheral_present[4], peripheral_present[5],
    //     peripheral_complete[0], peripheral_complete[1], peripheral_complete[2], peripheral_complete[3], peripheral_complete[4], peripheral_complete[5]);
    // U1_puts(char_buffer);
    // U1_putc('\r');
    // U1_putc('\n');
    // U1_flush_tx_buffer();
}
    2796:	00 80 fa    	ulnk      
    2798:	00 00 06    	return    

0000279a <_end_fail>:

void end_fail(void) {
    279a:	00 00 fa    	lnk       #0x0
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    279c:	61 40 80    	mov.w     0x80c, w1
    279e:	70 40 80    	mov.w     0x80e, w0
    27a0:	80 8f 50    	sub.w     w1, w0, [w15]
    27a2:	16 00 32    	bra       Z, 0x27d0 <.L69>
        last_state = state;
    27a4:	60 40 80    	mov.w     0x80c, w0
    27a6:	70 40 88    	mov.w     w0, 0x80e
        // start timer again to blink red LEDs
        IFS0bits.T1IF = 0; //lower interrupt flag
    27a8:	84 60 a9    	bclr.b    0x84, #0x3
        TMR1 = 0;          // reset timer register
    27aa:	00 21 ef    	clr.w     0x100
        T1CONbits.TON = 1; // enable 1 second timer
    27ac:	05 e1 a8    	bset.b    0x105, #0x7

        OC1RS = PWM_PERIOD_40;
    27ae:	a0 07 85    	mov.w     0xa0f4, w0
    27b0:	a0 0c 88    	mov.w     w0, 0x194
        OC1R = OC1RS>>1; // start beep
    27b2:	a0 0c 80    	mov.w     0x194, w0
    27b4:	00 00 d1    	lsr.w     w0, w0
    27b6:	b0 0c 88    	mov.w     w0, 0x196

        STRIKE1_RLED = ON; delay_by_nop(1); // Turn on strike LEDs red
    27b8:	da a2 a8    	bset.b    0x2da, #0x5
    27ba:	10 00 20    	mov.w     #0x1, w0
    27bc:	01 00 20    	mov.w     #0x0, w1
    27be:	47 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_RLED = ON; delay_by_nop(1);
    27c0:	da 02 a8    	bset.b    0x2da, #0x0
    27c2:	10 00 20    	mov.w     #0x1, w0
    27c4:	01 00 20    	mov.w     #0x0, w1
    27c6:	43 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_RLED = ON; delay_by_nop(1);
    27c8:	cb e2 a8    	bset.b    0x2cb, #0x7
    27ca:	10 00 20    	mov.w     #0x1, w0
    27cc:	01 00 20    	mov.w     #0x0, w1
    27ce:	3f 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

000027d0 <.L69>:
    }

    // Perform state tasks
    if (IFS0bits.T1IF == 1) {
    27d0:	20 04 80    	mov.w     0x84, w0
    27d2:	68 00 60    	and.w     w0, #0x8, w0
    27d4:	00 00 e0    	cp0.w     w0
    27d6:	33 00 32    	bra       Z, 0x283e <.L70>
        IFS0bits.T1IF = 0;  // if it's been a second, lower the counter and show it
    27d8:	84 60 a9    	bclr.b    0x84, #0x3
        // Blink RLEDs
        STRIKE1_RLED = !STRIKE1_RLED; delay_by_nop(1);
    27da:	d1 16 80    	mov.w     0x2da, w1
    27dc:	00 02 20    	mov.w     #0x20, w0
    27de:	00 80 60    	and.w     w1, w0, w0
    27e0:	00 f0 a7    	btsc.w    w0, #0xf
    27e2:	00 00 ea    	neg.w     w0, w0
    27e4:	00 00 e9    	dec.w     w0, w0
    27e6:	4f 00 de    	lsr.w     w0, #0xf, w0
    27e8:	00 40 78    	mov.b     w0, w0
    27ea:	00 80 fb    	ze        w0, w0
    27ec:	61 00 60    	and.w     w0, #0x1, w0
    27ee:	45 00 dd    	sl.w      w0, #0x5, w0
    27f0:	d2 16 80    	mov.w     0x2da, w2
    27f2:	f1 fd 2f    	mov.w     #0xffdf, w1
    27f4:	81 00 61    	and.w     w2, w1, w1
    27f6:	01 00 70    	ior.w     w0, w1, w0
    27f8:	d0 16 88    	mov.w     w0, 0x2da
    27fa:	10 00 20    	mov.w     #0x1, w0
    27fc:	01 00 20    	mov.w     #0x0, w1
    27fe:	27 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_RLED = !STRIKE2_RLED; delay_by_nop(1);
    2800:	d0 16 80    	mov.w     0x2da, w0
    2802:	61 00 60    	and.w     w0, #0x1, w0
    2804:	00 f0 a7    	btsc.w    w0, #0xf
    2806:	00 00 ea    	neg.w     w0, w0
    2808:	00 00 e9    	dec.w     w0, w0
    280a:	4f 00 de    	lsr.w     w0, #0xf, w0
    280c:	00 40 78    	mov.b     w0, w0
    280e:	00 80 fb    	ze        w0, w0
    2810:	61 00 60    	and.w     w0, #0x1, w0
    2812:	d2 16 80    	mov.w     0x2da, w2
    2814:	e1 ff 2f    	mov.w     #0xfffe, w1
    2816:	81 00 61    	and.w     w2, w1, w1
    2818:	01 00 70    	ior.w     w0, w1, w0
    281a:	d0 16 88    	mov.w     w0, 0x2da
    281c:	10 00 20    	mov.w     #0x1, w0
    281e:	01 00 20    	mov.w     #0x0, w1
    2820:	16 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_RLED = !STRIKE3_RLED; delay_by_nop(1);
    2822:	50 16 80    	mov.w     0x2ca, w0
    2824:	00 80 ea    	com.w     w0, w0
    2826:	4f 00 de    	lsr.w     w0, #0xf, w0
    2828:	00 40 78    	mov.b     w0, w0
    282a:	00 80 fb    	ze        w0, w0
    282c:	4f 00 dd    	sl.w      w0, #0xf, w0
    282e:	52 16 80    	mov.w     0x2ca, w2
    2830:	f1 ff 27    	mov.w     #0x7fff, w1
    2832:	81 00 61    	and.w     w2, w1, w1
    2834:	01 00 70    	ior.w     w0, w1, w0
    2836:	50 16 88    	mov.w     w0, 0x2ca
    2838:	10 00 20    	mov.w     #0x1, w0
    283a:	01 00 20    	mov.w     #0x0, w1
    283c:	08 06 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

0000283e <.L70>:
    }

    // Check for state transitions

    /* NO TRANSITIONS */

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    283e:	61 40 80    	mov.w     0x80c, w1
    2840:	70 40 80    	mov.w     0x80e, w0
    2842:	80 8f 50    	sub.w     w1, w0, [w15]
    2844:	0e 00 32    	bra       Z, 0x2862 <.L68>
        T1CONbits.TON = 0;
    2846:	05 e1 a9    	bclr.b    0x105, #0x7
        OC1R = 0; // stop beep
    2848:	96 21 ef    	clr.w     0x196
        STRIKE1_RLED = OFF; delay_by_nop(1);
    284a:	da a2 a9    	bclr.b    0x2da, #0x5
    284c:	10 00 20    	mov.w     #0x1, w0
    284e:	01 00 20    	mov.w     #0x0, w1
    2850:	fe 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_RLED = OFF; delay_by_nop(1); // turn off strike LEDs
    2852:	da 02 a9    	bclr.b    0x2da, #0x0
    2854:	10 00 20    	mov.w     #0x1, w0
    2856:	01 00 20    	mov.w     #0x0, w1
    2858:	fa 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_RLED = OFF; delay_by_nop(1);
    285a:	cb e2 a9    	bclr.b    0x2cb, #0x7
    285c:	10 00 20    	mov.w     #0x1, w0
    285e:	01 00 20    	mov.w     #0x0, w1
    2860:	f6 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00002862 <.L68>:
    }
}
    2862:	00 80 fa    	ulnk      
    2864:	00 00 06    	return    

00002866 <_end_win>:

void end_win(void) {
    2866:	00 00 fa    	lnk       #0x0
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    2868:	61 40 80    	mov.w     0x80c, w1
    286a:	70 40 80    	mov.w     0x80e, w0
    286c:	80 8f 50    	sub.w     w1, w0, [w15]
    286e:	12 00 32    	bra       Z, 0x2894 <.L73>
        last_state = state;
    2870:	60 40 80    	mov.w     0x80c, w0
    2872:	70 40 88    	mov.w     w0, 0x80e
        // start timer again to blink red LEDs
        IFS0bits.T1IF = 0; //lower interrupt flag
    2874:	84 60 a9    	bclr.b    0x84, #0x3
        IEC0bits.T1IE = 0;
    2876:	94 60 a9    	bclr.b    0x94, #0x3
        TMR1 = 0;          // reset timer register
    2878:	00 21 ef    	clr.w     0x100
        T1CONbits.TON = 1; // enable 1 second timer
    287a:	05 e1 a8    	bset.b    0x105, #0x7
        STRIKE1_GLED = ON; delay_by_nop(1); // Turn on strike LEDs red
    287c:	da 82 a8    	bset.b    0x2da, #0x4
    287e:	10 00 20    	mov.w     #0x1, w0
    2880:	01 00 20    	mov.w     #0x0, w1
    2882:	e5 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = ON; delay_by_nop(1);
    2884:	da 22 a8    	bset.b    0x2da, #0x1
    2886:	10 00 20    	mov.w     #0x1, w0
    2888:	01 00 20    	mov.w     #0x0, w1
    288a:	e1 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = ON; delay_by_nop(1);
    288c:	ea 62 a8    	bset.b    0x2ea, #0x3
    288e:	10 00 20    	mov.w     #0x1, w0
    2890:	01 00 20    	mov.w     #0x0, w1
    2892:	dd 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00002894 <.L73>:
    }

    // Perform state tasks
    if (IFS0bits.T1IF == 1) {
    2894:	20 04 80    	mov.w     0x84, w0
    2896:	68 00 60    	and.w     w0, #0x8, w0
    2898:	00 00 e0    	cp0.w     w0
    289a:	37 00 32    	bra       Z, 0x290a <.L74>
        IFS0bits.T1IF = 0;  // if it's been a second, lower the counter and show it
    289c:	84 60 a9    	bclr.b    0x84, #0x3
        // Blink GLEDs
        STRIKE1_GLED = !STRIKE1_GLED; delay_by_nop(1);
    289e:	d0 16 80    	mov.w     0x2da, w0
    28a0:	70 00 60    	and.w     w0, #0x10, w0
    28a2:	00 f0 a7    	btsc.w    w0, #0xf
    28a4:	00 00 ea    	neg.w     w0, w0
    28a6:	00 00 e9    	dec.w     w0, w0
    28a8:	4f 00 de    	lsr.w     w0, #0xf, w0
    28aa:	00 40 78    	mov.b     w0, w0
    28ac:	00 80 fb    	ze        w0, w0
    28ae:	61 00 60    	and.w     w0, #0x1, w0
    28b0:	44 00 dd    	sl.w      w0, #0x4, w0
    28b2:	d2 16 80    	mov.w     0x2da, w2
    28b4:	f1 fe 2f    	mov.w     #0xffef, w1
    28b6:	81 00 61    	and.w     w2, w1, w1
    28b8:	01 00 70    	ior.w     w0, w1, w0
    28ba:	d0 16 88    	mov.w     w0, 0x2da
    28bc:	10 00 20    	mov.w     #0x1, w0
    28be:	01 00 20    	mov.w     #0x0, w1
    28c0:	c6 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = !STRIKE2_GLED; delay_by_nop(1);
    28c2:	d0 16 80    	mov.w     0x2da, w0
    28c4:	62 00 60    	and.w     w0, #0x2, w0
    28c6:	00 f0 a7    	btsc.w    w0, #0xf
    28c8:	00 00 ea    	neg.w     w0, w0
    28ca:	00 00 e9    	dec.w     w0, w0
    28cc:	4f 00 de    	lsr.w     w0, #0xf, w0
    28ce:	00 40 78    	mov.b     w0, w0
    28d0:	00 80 fb    	ze        w0, w0
    28d2:	61 00 60    	and.w     w0, #0x1, w0
    28d4:	00 00 40    	add.w     w0, w0, w0
    28d6:	d2 16 80    	mov.w     0x2da, w2
    28d8:	d1 ff 2f    	mov.w     #0xfffd, w1
    28da:	81 00 61    	and.w     w2, w1, w1
    28dc:	01 00 70    	ior.w     w0, w1, w0
    28de:	d0 16 88    	mov.w     w0, 0x2da
    28e0:	10 00 20    	mov.w     #0x1, w0
    28e2:	01 00 20    	mov.w     #0x0, w1
    28e4:	b4 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = !STRIKE3_GLED; delay_by_nop(1);
    28e6:	50 17 80    	mov.w     0x2ea, w0
    28e8:	68 00 60    	and.w     w0, #0x8, w0
    28ea:	00 f0 a7    	btsc.w    w0, #0xf
    28ec:	00 00 ea    	neg.w     w0, w0
    28ee:	00 00 e9    	dec.w     w0, w0
    28f0:	4f 00 de    	lsr.w     w0, #0xf, w0
    28f2:	00 40 78    	mov.b     w0, w0
    28f4:	00 80 fb    	ze        w0, w0
    28f6:	61 00 60    	and.w     w0, #0x1, w0
    28f8:	43 00 dd    	sl.w      w0, #0x3, w0
    28fa:	52 17 80    	mov.w     0x2ea, w2
    28fc:	71 ff 2f    	mov.w     #0xfff7, w1
    28fe:	81 00 61    	and.w     w2, w1, w1
    2900:	01 00 70    	ior.w     w0, w1, w0
    2902:	50 17 88    	mov.w     w0, 0x2ea
    2904:	10 00 20    	mov.w     #0x1, w0
    2906:	01 00 20    	mov.w     #0x0, w1
    2908:	a2 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

0000290a <.L74>:
    }

    // Check for state transitions

    /* NO TRANSITIONS */

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    290a:	61 40 80    	mov.w     0x80c, w1
    290c:	70 40 80    	mov.w     0x80e, w0
    290e:	80 8f 50    	sub.w     w1, w0, [w15]
    2910:	0d 00 32    	bra       Z, 0x292c <.L72>
        T1CONbits.TON = 0;
    2912:	05 e1 a9    	bclr.b    0x105, #0x7
        STRIKE1_GLED = OFF; delay_by_nop(1);
    2914:	da 82 a9    	bclr.b    0x2da, #0x4
    2916:	10 00 20    	mov.w     #0x1, w0
    2918:	01 00 20    	mov.w     #0x0, w1
    291a:	99 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = OFF; delay_by_nop(1); // turn off strike LEDs
    291c:	da 22 a9    	bclr.b    0x2da, #0x1
    291e:	10 00 20    	mov.w     #0x1, w0
    2920:	01 00 20    	mov.w     #0x0, w1
    2922:	95 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = OFF; delay_by_nop(1);
    2924:	ea 62 a9    	bclr.b    0x2ea, #0x3
    2926:	10 00 20    	mov.w     #0x1, w0
    2928:	01 00 20    	mov.w     #0x0, w1
    292a:	91 05 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

0000292c <.L72>:
    }
}
    292c:	00 80 fa    	ulnk      
    292e:	00 00 06    	return    

00002930 <_dispSeconds>:

// HELPER FUNCTIONS ************************************************************

// Display a seconds variable in minutes and seconds on the seven segment
void dispSeconds(uint16_t seconds) {
    2930:	06 00 fa    	lnk       #0x6
    2932:	20 07 98    	mov.w     w0, [w14+4]
    // Turn seconds into minutes and seconds
    uint16_t minutes = seconds / 60;
    2934:	ae 00 90    	mov.w     [w14+4], w1
    2936:	90 88 28    	mov.w     #0x8889, w0
    2938:	00 08 b8    	mul.uu    w1, w0, w0
    293a:	45 08 de    	lsr.w     w1, #0x5, w0
    293c:	00 0f 78    	mov.w     w0, [w14]
    uint8_t displaySeconds = seconds % 60;
    293e:	2e 01 90    	mov.w     [w14+4], w2
    2940:	90 88 28    	mov.w     #0x8889, w0
    2942:	00 10 b8    	mul.uu    w2, w0, w0
    2944:	45 08 de    	lsr.w     w1, #0x5, w0
    2946:	c1 03 20    	mov.w     #0x3c, w1
    2948:	01 80 b9    	mul.ss    w0, w1, w0
    294a:	00 00 78    	mov.w     w0, w0
    294c:	00 00 51    	sub.w     w2, w0, w0
    294e:	20 47 98    	mov.b     w0, [w14+2]
    sevseg_writeDigitNum(&matrix, 0, minutes / 10, 0);
    2950:	9e 00 78    	mov.w     [w14], w1
    2952:	d0 cc 2c    	mov.w     #0xcccd, w0
    2954:	00 08 b8    	mul.uu    w1, w0, w0
    2956:	43 08 de    	lsr.w     w1, #0x3, w0
    2958:	00 40 78    	mov.b     w0, w0
    295a:	80 41 eb    	clr.b     w3
    295c:	00 41 78    	mov.b     w0, w2
    295e:	80 40 eb    	clr.b     w1
    2960:	a0 02 21    	mov.w     #0x102a, w0
    2962:	9f 01 07    	rcall     0x2ca2 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 1, minutes % 10, 0);
    2964:	1e 01 78    	mov.w     [w14], w2
    2966:	d0 cc 2c    	mov.w     #0xcccd, w0
    2968:	00 10 b8    	mul.uu    w2, w0, w0
    296a:	43 08 de    	lsr.w     w1, #0x3, w0
    296c:	6a 00 b9    	mul.su    w0, #0xa, w0
    296e:	00 00 78    	mov.w     w0, w0
    2970:	00 00 51    	sub.w     w2, w0, w0
    2972:	00 40 78    	mov.b     w0, w0
    2974:	80 41 eb    	clr.b     w3
    2976:	00 41 78    	mov.b     w0, w2
    2978:	11 c0 b3    	mov.b     #0x1, w1
    297a:	a0 02 21    	mov.w     #0x102a, w0
    297c:	92 01 07    	rcall     0x2ca2 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_drawColon(&matrix, 1); // Times are supposed to have a colon I guess
    297e:	11 c0 b3    	mov.b     #0x1, w1
    2980:	a0 02 21    	mov.w     #0x102a, w0
    2982:	ab 01 07    	rcall     0x2cda <_sevseg_drawColon> <.LFB12> <.LFE11>
    sevseg_writeDigitNum(&matrix, 3, (displaySeconds / 10) % 10, 0);
    2984:	2e 40 90    	mov.b     [w14+2], w0
    2986:	80 80 fb    	ze        w0, w1
    2988:	d0 cc 2c    	mov.w     #0xcccd, w0
    298a:	00 08 b8    	mul.uu    w1, w0, w0
    298c:	43 08 de    	lsr.w     w1, #0x3, w0
    298e:	00 40 78    	mov.b     w0, w0
    2990:	00 81 fb    	ze        w0, w2
    2992:	d0 cc 2c    	mov.w     #0xcccd, w0
    2994:	00 10 b8    	mul.uu    w2, w0, w0
    2996:	43 08 de    	lsr.w     w1, #0x3, w0
    2998:	6a 00 b9    	mul.su    w0, #0xa, w0
    299a:	00 00 78    	mov.w     w0, w0
    299c:	00 00 51    	sub.w     w2, w0, w0
    299e:	00 40 78    	mov.b     w0, w0
    29a0:	80 41 eb    	clr.b     w3
    29a2:	00 41 78    	mov.b     w0, w2
    29a4:	31 c0 b3    	mov.b     #0x3, w1
    29a6:	a0 02 21    	mov.w     #0x102a, w0
    29a8:	7c 01 07    	rcall     0x2ca2 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 4, displaySeconds % 10, 0);
    29aa:	2e 40 90    	mov.b     [w14+2], w0
    29ac:	00 81 fb    	ze        w0, w2
    29ae:	d0 cc 2c    	mov.w     #0xcccd, w0
    29b0:	00 10 b8    	mul.uu    w2, w0, w0
    29b2:	43 08 de    	lsr.w     w1, #0x3, w0
    29b4:	6a 00 b9    	mul.su    w0, #0xa, w0
    29b6:	00 00 78    	mov.w     w0, w0
    29b8:	00 00 51    	sub.w     w2, w0, w0
    29ba:	00 40 78    	mov.b     w0, w0
    29bc:	80 41 eb    	clr.b     w3
    29be:	00 41 78    	mov.b     w0, w2
    29c0:	41 c0 b3    	mov.b     #0x4, w1
    29c2:	a0 02 21    	mov.w     #0x102a, w0
    29c4:	6e 01 07    	rcall     0x2ca2 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

    led_writeDisplay((_ADAFRUIT_LED*)&matrix.super); //Don't forget to actually write the data!
    29c6:	a0 02 21    	mov.w     #0x102a, w0
    29c8:	5d 00 07    	rcall     0x2a84 <_led_writeDisplay> <.LFB3> <.LFE2>
}
    29ca:	00 80 fa    	ulnk      
    29cc:	00 00 06    	return    

000029ce <_drawOnce>:

// Draw 1234 on the seven segment
void drawOnce(void) {
    29ce:	00 00 fa    	lnk       #0x0
    sevseg_writeDigitNum(&matrix, 0, 1, 0);
    29d0:	80 41 eb    	clr.b     w3
    29d2:	12 c0 b3    	mov.b     #0x1, w2
    29d4:	80 40 eb    	clr.b     w1
    29d6:	a0 02 21    	mov.w     #0x102a, w0
    29d8:	64 01 07    	rcall     0x2ca2 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 1, 2, 0);
    29da:	80 41 eb    	clr.b     w3
    29dc:	22 c0 b3    	mov.b     #0x2, w2
    29de:	11 c0 b3    	mov.b     #0x1, w1
    29e0:	a0 02 21    	mov.w     #0x102a, w0
    29e2:	5f 01 07    	rcall     0x2ca2 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 3, 3, 0);
    29e4:	80 41 eb    	clr.b     w3
    29e6:	32 c0 b3    	mov.b     #0x3, w2
    29e8:	31 c0 b3    	mov.b     #0x3, w1
    29ea:	a0 02 21    	mov.w     #0x102a, w0
    29ec:	5a 01 07    	rcall     0x2ca2 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 4, 4, 0);
    29ee:	80 41 eb    	clr.b     w3
    29f0:	42 c0 b3    	mov.b     #0x4, w2
    29f2:	41 c0 b3    	mov.b     #0x4, w1
    29f4:	a0 02 21    	mov.w     #0x102a, w0
    29f6:	55 01 07    	rcall     0x2ca2 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    led_writeDisplay((_ADAFRUIT_LED*)&matrix.super);
    29f8:	a0 02 21    	mov.w     #0x102a, w0
    29fa:	44 00 07    	rcall     0x2a84 <_led_writeDisplay> <.LFB3> <.LFE2>
}
    29fc:	00 80 fa    	ulnk      
    29fe:	00 00 06    	return    

00002a00 <_led_begin>:

};


void led_begin(_ADAFRUIT_LED* ptr, uint8_t addr){
    2a00:	04 00 fa    	lnk       #0x4
    2a02:	00 0f 78    	mov.w     w0, [w14]
    2a04:	21 47 98    	mov.b     w1, [w14+2]
  ptr->i2c_addr = addr;
    2a06:	1e 00 78    	mov.w     [w14], w0
    2a08:	ae 40 90    	mov.b     [w14+2], w1
    2a0a:	01 50 98    	mov.b     w1, [w0+16]
  i2c_start();
    2a0c:	40 05 07    	rcall     0x348e <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    2a0e:	1e 00 78    	mov.w     [w14], w0
    2a10:	00 50 90    	mov.b     [w0+16], w0
    2a12:	00 80 fb    	ze        w0, w0
    2a14:	8b 05 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(0x21); // turn on oscillator
    2a16:	10 02 20    	mov.w     #0x21, w0
    2a18:	89 05 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    2a1a:	6d 05 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
  led_blinkRate((_ADAFRUIT_LED *)ptr, HT16K33_BLINK_OFF);
    2a1c:	80 40 eb    	clr.b     w1
    2a1e:	1e 00 78    	mov.w     [w14], w0
    2a20:	1a 00 07    	rcall     0x2a56 <_led_blinkRate> <.LFB2> <.LFE1>
  led_setBrightness((_ADAFRUIT_LED *)ptr,15); // set max brightness
    2a22:	f1 c0 b3    	mov.b     #0xf, w1
    2a24:	1e 00 78    	mov.w     [w14], w0
    2a26:	02 00 07    	rcall     0x2a2c <_led_setBrightness> <.LFB1> <.LFE0>
}
    2a28:	00 80 fa    	ulnk      
    2a2a:	00 00 06    	return    

00002a2c <_led_setBrightness>:

void led_setBrightness(_ADAFRUIT_LED* ptr, uint8_t b){
    2a2c:	04 00 fa    	lnk       #0x4
    2a2e:	00 0f 78    	mov.w     w0, [w14]
    2a30:	21 47 98    	mov.b     w1, [w14+2]
  if (b > 15) b = 15;
    2a32:	2e 40 90    	mov.b     [w14+2], w0
    2a34:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    2a36:	02 00 36    	bra       LEU, 0x2a3c <.L3>
    2a38:	f0 c0 b3    	mov.b     #0xf, w0
    2a3a:	20 47 98    	mov.b     w0, [w14+2]

00002a3c <.L3>:
  i2c_start();
    2a3c:	28 05 07    	rcall     0x348e <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    2a3e:	1e 00 78    	mov.w     [w14], w0
    2a40:	00 50 90    	mov.b     [w0+16], w0
    2a42:	00 80 fb    	ze        w0, w0
    2a44:	73 05 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(HT16K33_CMD_BRIGHTNESS | b);
    2a46:	ae 40 90    	mov.b     [w14+2], w1
    2a48:	00 ce b3    	mov.b     #0xe0, w0
    2a4a:	00 c0 70    	ior.b     w1, w0, w0
    2a4c:	00 80 fb    	ze        w0, w0
    2a4e:	6e 05 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    2a50:	52 05 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2a52:	00 80 fa    	ulnk      
    2a54:	00 00 06    	return    

00002a56 <_led_blinkRate>:

void led_blinkRate(_ADAFRUIT_LED* ptr, uint8_t b){
    2a56:	04 00 fa    	lnk       #0x4
    2a58:	00 0f 78    	mov.w     w0, [w14]
    2a5a:	21 47 98    	mov.b     w1, [w14+2]
  i2c_start();
    2a5c:	18 05 07    	rcall     0x348e <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    2a5e:	1e 00 78    	mov.w     [w14], w0
    2a60:	00 50 90    	mov.b     [w0+16], w0
    2a62:	00 80 fb    	ze        w0, w0
    2a64:	63 05 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
  if (b > 3) b = 0; // turn off if not sure
    2a66:	2e 40 90    	mov.b     [w14+2], w0
    2a68:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    2a6a:	02 00 36    	bra       LEU, 0x2a70 <.L5>
    2a6c:	00 40 eb    	clr.b     w0
    2a6e:	20 47 98    	mov.b     w0, [w14+2]

00002a70 <.L5>:
  send_i2c_byte(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1));
    2a70:	2e 40 90    	mov.b     [w14+2], w0
    2a72:	00 80 fb    	ze        w0, w0
    2a74:	00 00 40    	add.w     w0, w0, w0
    2a76:	80 00 78    	mov.w     w0, w1
    2a78:	10 08 20    	mov.w     #0x81, w0
    2a7a:	01 00 70    	ior.w     w0, w1, w0
    2a7c:	57 05 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    2a7e:	3b 05 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2a80:	00 80 fa    	ulnk      
    2a82:	00 00 06    	return    

00002a84 <_led_writeDisplay>:

void led_writeDisplay(_ADAFRUIT_LED* ptr){
    2a84:	04 00 fa    	lnk       #0x4
    2a86:	10 07 98    	mov.w     w0, [w14+2]
  i2c_start();
    2a88:	02 05 07    	rcall     0x348e <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    2a8a:	1e 00 90    	mov.w     [w14+2], w0
    2a8c:	00 50 90    	mov.b     [w0+16], w0
    2a8e:	00 80 fb    	ze        w0, w0
    2a90:	4d 05 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
	send_i2c_byte(0x00); // Start at address 0
    2a92:	00 00 eb    	clr.w     w0
    2a94:	4b 05 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
	uint8_t i;
  for (i=0; i<8; i++) {
    2a96:	00 40 eb    	clr.b     w0
    2a98:	00 4f 78    	mov.b     w0, [w14]
    2a9a:	0f 00 37    	bra       0x2aba <.L7>

00002a9c <.L8>:
    send_i2c_byte(ptr->displaybuffer[i] & 0xFF);
    2a9c:	1e 80 fb    	ze        [w14], w0
    2a9e:	9e 00 90    	mov.w     [w14+2], w1
    2aa0:	00 00 40    	add.w     w0, w0, w0
    2aa2:	61 00 78    	mov.w     [w1+w0], w0
    2aa4:	80 00 78    	mov.w     w0, w1
    2aa6:	f0 0f 20    	mov.w     #0xff, w0
    2aa8:	00 80 60    	and.w     w1, w0, w0
    2aaa:	40 05 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ptr->displaybuffer[i] >> 8);
    2aac:	1e 80 fb    	ze        [w14], w0
    2aae:	9e 00 90    	mov.w     [w14+2], w1
    2ab0:	00 00 40    	add.w     w0, w0, w0
    2ab2:	61 00 78    	mov.w     [w1+w0], w0
    2ab4:	48 00 de    	lsr.w     w0, #0x8, w0
    2ab6:	3a 05 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    2ab8:	1e 4f e8    	inc.b     [w14], [w14]

00002aba <.L7>:
    2aba:	1e 40 78    	mov.b     [w14], w0
    2abc:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    2abe:	ee ff 36    	bra       LEU, 0x2a9c <.L8>
  }
  reset_i2c_bus();
    2ac0:	1a 05 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2ac2:	00 80 fa    	ulnk      
    2ac4:	00 00 06    	return    

00002ac6 <_led_clear>:

void led_clear(_ADAFRUIT_LED* ptr){
    2ac6:	04 00 fa    	lnk       #0x4
    2ac8:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
	for (i=0; i<8; i++) {
    2aca:	00 40 eb    	clr.b     w0
    2acc:	00 4f 78    	mov.b     w0, [w14]
    2ace:	07 00 37    	bra       0x2ade <.L10>

00002ad0 <.L11>:
    ptr->displaybuffer[i] = 0;
    2ad0:	1e 80 fb    	ze        [w14], w0
    2ad2:	9e 00 90    	mov.w     [w14+2], w1
    2ad4:	00 00 40    	add.w     w0, w0, w0
    2ad6:	00 80 40    	add.w     w1, w0, w0
    2ad8:	80 00 eb    	clr.w     w1
    2ada:	01 08 78    	mov.w     w1, [w0]
    2adc:	1e 4f e8    	inc.b     [w14], [w14]

00002ade <.L10>:
    2ade:	1e 40 78    	mov.b     [w14], w0
    2ae0:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    2ae2:	f6 ff 36    	bra       LEU, 0x2ad0 <.L11>
  }
}
    2ae4:	00 80 fa    	ulnk      
    2ae6:	00 00 06    	return    

00002ae8 <_alphanum_begin>:

// ALPHANUM ********************************************************************

void alphanum_begin(_ALPHANUM* ptr, uint8_t addr){
    2ae8:	04 00 fa    	lnk       #0x4
    2aea:	00 0f 78    	mov.w     w0, [w14]
    2aec:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr); // Call super constructor
    2aee:	1e 00 78    	mov.w     [w14], w0
    2af0:	ae 40 90    	mov.b     [w14+2], w1
    2af2:	86 ff 07    	rcall     0x2a00 <_led_begin> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
}
    2af4:	00 80 fa    	ulnk      
    2af6:	00 00 06    	return    

00002af8 <_alphanum_writeDigitRaw>:

void alphanum_writeDigitRaw(_ALPHANUM* ptr, uint8_t n, uint16_t bitmask){
    2af8:	06 00 fa    	lnk       #0x6
    2afa:	00 0f 78    	mov.w     w0, [w14]
    2afc:	21 47 98    	mov.b     w1, [w14+2]
    2afe:	22 07 98    	mov.w     w2, [w14+4]
  ptr->super.displaybuffer[n] = bitmask;
    2b00:	2e 40 90    	mov.b     [w14+2], w0
    2b02:	00 80 fb    	ze        w0, w0
    2b04:	9e 00 78    	mov.w     [w14], w1
    2b06:	00 00 40    	add.w     w0, w0, w0
    2b08:	00 80 40    	add.w     w1, w0, w0
    2b0a:	ae 00 90    	mov.w     [w14+4], w1
    2b0c:	01 08 78    	mov.w     w1, [w0]
}
    2b0e:	00 80 fa    	ulnk      
    2b10:	00 00 06    	return    

00002b12 <_alphanum_writeDigitAscii>:

void alphanum_writeDigitAscii(_ALPHANUM* ptr, uint8_t n, uint8_t ascii, uint8_t dot){
    2b12:	08 00 fa    	lnk       #0x8
    2b14:	10 07 98    	mov.w     w0, [w14+2]
    2b16:	41 47 98    	mov.b     w1, [w14+4]
    2b18:	52 47 98    	mov.b     w2, [w14+5]
    2b1a:	63 47 98    	mov.b     w3, [w14+6]
  uint16_t font = alphafonttable[ascii];
    2b1c:	5e 40 90    	mov.b     [w14+5], w0
    2b1e:	00 80 fb    	ze        w0, w0
    2b20:	80 00 40    	add.w     w0, w0, w1
    2b22:	c0 f8 29    	mov.w     #0x9f8c, w0
    2b24:	00 80 40    	add.w     w1, w0, w0
    2b26:	10 0f 78    	mov.w     [w0], [w14]
  ptr->super.displaybuffer[n] = font;
    2b28:	4e 40 90    	mov.b     [w14+4], w0
    2b2a:	00 80 fb    	ze        w0, w0
    2b2c:	9e 00 90    	mov.w     [w14+2], w1
    2b2e:	00 00 40    	add.w     w0, w0, w0
    2b30:	00 80 40    	add.w     w1, w0, w0
    2b32:	1e 08 78    	mov.w     [w14], [w0]
  if (dot) ptr->super.displaybuffer[n] |= (1<<14);
    2b34:	6e 40 90    	mov.b     [w14+6], w0
    2b36:	00 04 e0    	cp0.b     w0
    2b38:	0c 00 32    	bra       Z, 0x2b52 <.L14>
    2b3a:	4e 40 90    	mov.b     [w14+4], w0
    2b3c:	00 80 fb    	ze        w0, w0
    2b3e:	ce 40 90    	mov.b     [w14+4], w1
    2b40:	81 80 fb    	ze        w1, w1
    2b42:	1e 01 90    	mov.w     [w14+2], w2
    2b44:	81 80 40    	add.w     w1, w1, w1
    2b46:	e2 80 78    	mov.w     [w2+w1], w1
    2b48:	01 e0 a0    	bset.w    w1, #0xe
    2b4a:	1e 01 90    	mov.w     [w14+2], w2
    2b4c:	00 00 40    	add.w     w0, w0, w0
    2b4e:	00 00 41    	add.w     w2, w0, w0
    2b50:	01 08 78    	mov.w     w1, [w0]

00002b52 <.L14>:
}
    2b52:	00 80 fa    	ulnk      
    2b54:	00 00 06    	return    

00002b56 <_bargraph_begin>:

// 24 BARGRAPH *****************************************************************

void bargraph_begin(_BARGRAPH* ptr, uint8_t addr){
    2b56:	04 00 fa    	lnk       #0x4
    2b58:	00 0f 78    	mov.w     w0, [w14]
    2b5a:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr);
    2b5c:	1e 00 78    	mov.w     [w14], w0
    2b5e:	ae 40 90    	mov.b     [w14+2], w1
    2b60:	4f ff 07    	rcall     0x2a00 <_led_begin> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
}
    2b62:	00 80 fa    	ulnk      
    2b64:	00 00 06    	return    

00002b66 <_bargraph_setBar>:

void bargraph_setBar(_BARGRAPH* ptr, uint8_t bar, uint8_t color){
    2b66:	08 00 fa    	lnk       #0x8
    2b68:	20 07 98    	mov.w     w0, [w14+4]
    2b6a:	61 47 98    	mov.b     w1, [w14+6]
    2b6c:	72 47 98    	mov.b     w2, [w14+7]
  uint16_t a, c;

  if (bar < 12)
    2b6e:	6e 40 90    	mov.b     [w14+6], w0
    2b70:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    2b72:	07 00 3e    	bra       GTU, 0x2b82 <.L18>
    c = bar / 4;
    2b74:	6e 40 90    	mov.b     [w14+6], w0
    2b76:	00 80 fb    	ze        w0, w0
    2b78:	42 00 de    	lsr.w     w0, #0x2, w0
    2b7a:	00 40 78    	mov.b     w0, w0
    2b7c:	00 80 fb    	ze        w0, w0
    2b7e:	10 07 98    	mov.w     w0, [w14+2]
    2b80:	08 00 37    	bra       0x2b92 <.L19>

00002b82 <.L18>:
  else
    c = (bar - 12) / 4;
    2b82:	6e 40 90    	mov.b     [w14+6], w0
    2b84:	00 80 fb    	ze        w0, w0
    2b86:	6c 00 50    	sub.w     w0, #0xc, w0
    2b88:	00 00 e0    	cp0.w     w0
    2b8a:	01 00 3d    	bra       GE, 0x2b8e <.L20>
    2b8c:	63 00 40    	add.w     w0, #0x3, w0

00002b8e <.L20>:
    2b8e:	42 80 de    	asr.w     w0, #0x2, w0
    2b90:	10 07 98    	mov.w     w0, [w14+2]

00002b92 <.L19>:

  a = bar % 4;
    2b92:	6e 40 90    	mov.b     [w14+6], w0
    2b94:	00 80 fb    	ze        w0, w0
    2b96:	63 0f 60    	and.w     w0, #0x3, [w14]
  if (bar >= 12)
    2b98:	6e 40 90    	mov.b     [w14+6], w0
    2b9a:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    2b9c:	02 00 36    	bra       LEU, 0x2ba2 <.L21>
    a += 4;
    2b9e:	9e 00 78    	mov.w     [w14], w1
    2ba0:	64 8f 40    	add.w     w1, #0x4, [w14]

00002ba2 <.L21>:

  //Serial.print("Ano = "); Serial.print(a); Serial.print(" Cath = "); Serial.println(c);
  if (color == LED_RED) {
    2ba2:	7e 40 90    	mov.b     [w14+7], w0
    2ba4:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2ba6:	1d 00 3a    	bra       NZ, 0x2be2 <.L22>
    // Turn on red LED.
    ptr->super.displaybuffer[c] |= _BV(a);
    2ba8:	ae 00 90    	mov.w     [w14+4], w1
    2baa:	1e 00 90    	mov.w     [w14+2], w0
    2bac:	00 00 40    	add.w     w0, w0, w0
    2bae:	e1 00 78    	mov.w     [w1+w0], w1
    2bb0:	1e 00 78    	mov.w     [w14], w0
    2bb2:	12 00 20    	mov.w     #0x1, w2
    2bb4:	00 10 dd    	sl.w      w2, w0, w0
    2bb6:	81 00 70    	ior.w     w0, w1, w1
    2bb8:	2e 01 90    	mov.w     [w14+4], w2
    2bba:	1e 00 90    	mov.w     [w14+2], w0
    2bbc:	00 00 40    	add.w     w0, w0, w0
    2bbe:	00 00 41    	add.w     w2, w0, w0
    2bc0:	01 08 78    	mov.w     w1, [w0]
    // Turn off green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a+8);
    2bc2:	ae 00 90    	mov.w     [w14+4], w1
    2bc4:	1e 00 90    	mov.w     [w14+2], w0
    2bc6:	00 00 40    	add.w     w0, w0, w0
    2bc8:	e1 00 78    	mov.w     [w1+w0], w1
    2bca:	1e 01 78    	mov.w     [w14], w2
    2bcc:	68 00 41    	add.w     w2, #0x8, w0
    2bce:	12 00 20    	mov.w     #0x1, w2
    2bd0:	00 10 dd    	sl.w      w2, w0, w0
    2bd2:	00 80 ea    	com.w     w0, w0
    2bd4:	80 80 60    	and.w     w1, w0, w1
    2bd6:	2e 01 90    	mov.w     [w14+4], w2
    2bd8:	1e 00 90    	mov.w     [w14+2], w0
    2bda:	00 00 40    	add.w     w0, w0, w0
    2bdc:	00 00 41    	add.w     w2, w0, w0
    2bde:	01 08 78    	mov.w     w1, [w0]
    2be0:	4c 00 37    	bra       0x2c7a <.L17>

00002be2 <.L22>:
  } else if (color == LED_YELLOW) {
    2be2:	7e 40 90    	mov.b     [w14+7], w0
    2be4:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    2be6:	13 00 3a    	bra       NZ, 0x2c0e <.L24>
    // Turn on red and green LED.
    ptr->super.displaybuffer[c] |= _BV(a) | _BV(a+8);
    2be8:	ae 00 90    	mov.w     [w14+4], w1
    2bea:	1e 00 90    	mov.w     [w14+2], w0
    2bec:	00 00 40    	add.w     w0, w0, w0
    2bee:	e1 00 78    	mov.w     [w1+w0], w1
    2bf0:	1e 00 78    	mov.w     [w14], w0
    2bf2:	12 00 20    	mov.w     #0x1, w2
    2bf4:	00 11 dd    	sl.w      w2, w0, w2
    2bf6:	9e 01 78    	mov.w     [w14], w3
    2bf8:	68 80 41    	add.w     w3, #0x8, w0
    2bfa:	13 00 20    	mov.w     #0x1, w3
    2bfc:	00 18 dd    	sl.w      w3, w0, w0
    2bfe:	02 00 70    	ior.w     w0, w2, w0
    2c00:	81 00 70    	ior.w     w0, w1, w1
    2c02:	2e 01 90    	mov.w     [w14+4], w2
    2c04:	1e 00 90    	mov.w     [w14+2], w0
    2c06:	00 00 40    	add.w     w0, w0, w0
    2c08:	00 00 41    	add.w     w2, w0, w0
    2c0a:	01 08 78    	mov.w     w1, [w0]
    2c0c:	36 00 37    	bra       0x2c7a <.L17>

00002c0e <.L24>:
  } else if (color == LED_OFF) {
    2c0e:	7e 40 90    	mov.b     [w14+7], w0
    2c10:	00 04 e0    	cp0.b     w0
    2c12:	14 00 3a    	bra       NZ, 0x2c3c <.L25>
    // Turn off red and green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a) & ~_BV(a+8);
    2c14:	ae 00 90    	mov.w     [w14+4], w1
    2c16:	1e 00 90    	mov.w     [w14+2], w0
    2c18:	00 00 40    	add.w     w0, w0, w0
    2c1a:	e1 00 78    	mov.w     [w1+w0], w1
    2c1c:	1e 00 78    	mov.w     [w14], w0
    2c1e:	12 00 20    	mov.w     #0x1, w2
    2c20:	00 11 dd    	sl.w      w2, w0, w2
    2c22:	9e 01 78    	mov.w     [w14], w3
    2c24:	68 80 41    	add.w     w3, #0x8, w0
    2c26:	13 00 20    	mov.w     #0x1, w3
    2c28:	00 18 dd    	sl.w      w3, w0, w0
    2c2a:	02 00 70    	ior.w     w0, w2, w0
    2c2c:	00 80 ea    	com.w     w0, w0
    2c2e:	80 80 60    	and.w     w1, w0, w1
    2c30:	2e 01 90    	mov.w     [w14+4], w2
    2c32:	1e 00 90    	mov.w     [w14+2], w0
    2c34:	00 00 40    	add.w     w0, w0, w0
    2c36:	00 00 41    	add.w     w2, w0, w0
    2c38:	01 08 78    	mov.w     w1, [w0]
    2c3a:	1f 00 37    	bra       0x2c7a <.L17>

00002c3c <.L25>:
  } else if (color == LED_GREEN) {
    2c3c:	7e 40 90    	mov.b     [w14+7], w0
    2c3e:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    2c40:	1c 00 3a    	bra       NZ, 0x2c7a <.L17>
    // Turn on green LED.
    ptr->super.displaybuffer[c] |= _BV(a+8);
    2c42:	ae 00 90    	mov.w     [w14+4], w1
    2c44:	1e 00 90    	mov.w     [w14+2], w0
    2c46:	00 00 40    	add.w     w0, w0, w0
    2c48:	e1 00 78    	mov.w     [w1+w0], w1
    2c4a:	1e 01 78    	mov.w     [w14], w2
    2c4c:	68 00 41    	add.w     w2, #0x8, w0
    2c4e:	12 00 20    	mov.w     #0x1, w2
    2c50:	00 10 dd    	sl.w      w2, w0, w0
    2c52:	81 00 70    	ior.w     w0, w1, w1
    2c54:	2e 01 90    	mov.w     [w14+4], w2
    2c56:	1e 00 90    	mov.w     [w14+2], w0
    2c58:	00 00 40    	add.w     w0, w0, w0
    2c5a:	00 00 41    	add.w     w2, w0, w0
    2c5c:	01 08 78    	mov.w     w1, [w0]
    // Turn off red LED.
    ptr->super.displaybuffer[c] &= ~_BV(a);
    2c5e:	ae 00 90    	mov.w     [w14+4], w1
    2c60:	1e 00 90    	mov.w     [w14+2], w0
    2c62:	00 00 40    	add.w     w0, w0, w0
    2c64:	e1 00 78    	mov.w     [w1+w0], w1
    2c66:	1e 00 78    	mov.w     [w14], w0
    2c68:	12 00 20    	mov.w     #0x1, w2
    2c6a:	00 10 dd    	sl.w      w2, w0, w0
    2c6c:	00 80 ea    	com.w     w0, w0
    2c6e:	80 80 60    	and.w     w1, w0, w1
    2c70:	2e 01 90    	mov.w     [w14+4], w2
    2c72:	1e 00 90    	mov.w     [w14+2], w0
    2c74:	00 00 40    	add.w     w0, w0, w0
    2c76:	00 00 41    	add.w     w2, w0, w0
    2c78:	01 08 78    	mov.w     w1, [w0]

00002c7a <.L17>:
  }
}
    2c7a:	00 80 fa    	ulnk      
    2c7c:	00 00 06    	return    

00002c7e <_sevseg_writeDigitRaw>:

// 7SEGMENT ********************************************************************

// uint8_t write(_7SEGMENT* ptr, uint8_t c){
//
//   uint8_t r = 0;
//
//   if (c == '\n') ptr->position = 0;
//   if (c == '\r') ptr->position = 0;
//
//   if ((c >= '0') && (c <= '9')) {
//     sevseg_writeDigitNum(ptr, ptr->position, c-'0', 0);
//     r = 1;
//   }
//
//   ptr->position++;
//   if (ptr->position == 2) ptr->position++;
//
//   return r;
// }

void sevseg_writeDigitRaw(_7SEGMENT* ptr, uint8_t x, uint16_t bitmask){
    2c7e:	06 00 fa    	lnk       #0x6
    2c80:	00 0f 78    	mov.w     w0, [w14]
    2c82:	21 47 98    	mov.b     w1, [w14+2]
    2c84:	22 07 98    	mov.w     w2, [w14+4]
  if (x > 4) return;
    2c86:	2e 40 90    	mov.b     [w14+2], w0
    2c88:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    2c8a:	08 00 3e    	bra       GTU, 0x2c9c <.L29>
  ptr->super.displaybuffer[x] = bitmask;
    2c8c:	2e 40 90    	mov.b     [w14+2], w0
    2c8e:	00 80 fb    	ze        w0, w0
    2c90:	9e 00 78    	mov.w     [w14], w1
    2c92:	00 00 40    	add.w     w0, w0, w0
    2c94:	00 80 40    	add.w     w1, w0, w0
    2c96:	ae 00 90    	mov.w     [w14+4], w1
    2c98:	01 08 78    	mov.w     w1, [w0]
    2c9a:	01 00 37    	bra       0x2c9e <.L26>

00002c9c <.L29>:
    2c9c:	00 00 00    	nop       

00002c9e <.L26>:
}
    2c9e:	00 80 fa    	ulnk      
    2ca0:	00 00 06    	return    

00002ca2 <_sevseg_writeDigitNum>:

void sevseg_writeDigitNum(_7SEGMENT* ptr, uint8_t x, uint8_t num, uint8_t dot){
    2ca2:	08 00 fa    	lnk       #0x8
    2ca4:	10 07 98    	mov.w     w0, [w14+2]
    2ca6:	41 47 98    	mov.b     w1, [w14+4]
    2ca8:	52 47 98    	mov.b     w2, [w14+5]
    2caa:	63 47 98    	mov.b     w3, [w14+6]
  if (x > 4) return;
    2cac:	4e 40 90    	mov.b     [w14+4], w0
    2cae:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    2cb0:	11 00 3e    	bra       GTU, 0x2cd4 <.L33>
	uint16_t zero = 0x0000;
    2cb2:	00 00 eb    	clr.w     w0
    2cb4:	00 0f 78    	mov.w     w0, [w14]
  sevseg_writeDigitRaw(ptr, x, (numbertable[num] | (dot << 7)));
    2cb6:	5e 40 90    	mov.b     [w14+5], w0
    2cb8:	00 80 fb    	ze        w0, w0
    2cba:	80 00 40    	add.w     w0, w0, w1
    2cbc:	80 f6 29    	mov.w     #0x9f68, w0
    2cbe:	00 80 40    	add.w     w1, w0, w0
    2cc0:	90 00 78    	mov.w     [w0], w1
    2cc2:	6e 40 90    	mov.b     [w14+6], w0
    2cc4:	00 80 fb    	ze        w0, w0
    2cc6:	47 00 dd    	sl.w      w0, #0x7, w0
    2cc8:	01 00 70    	ior.w     w0, w1, w0
    2cca:	00 01 78    	mov.w     w0, w2
    2ccc:	ce 40 90    	mov.b     [w14+4], w1
    2cce:	1e 00 90    	mov.w     [w14+2], w0
    2cd0:	d6 ff 07    	rcall     0x2c7e <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    2cd2:	01 00 37    	bra       0x2cd6 <.L30>

00002cd4 <.L33>:
    2cd4:	00 00 00    	nop       

00002cd6 <.L30>:
}
    2cd6:	00 80 fa    	ulnk      
    2cd8:	00 00 06    	return    

00002cda <_sevseg_drawColon>:

void sevseg_drawColon(_7SEGMENT* ptr, uint8_t state){
    2cda:	04 00 fa    	lnk       #0x4
    2cdc:	00 0f 78    	mov.w     w0, [w14]
    2cde:	21 47 98    	mov.b     w1, [w14+2]
  if (state)
    2ce0:	2e 40 90    	mov.b     [w14+2], w0
    2ce2:	00 04 e0    	cp0.b     w0
    2ce4:	04 00 32    	bra       Z, 0x2cee <.L35>
    ptr->super.displaybuffer[2] = 0x2;
    2ce6:	1e 00 78    	mov.w     [w14], w0
    2ce8:	21 00 20    	mov.w     #0x2, w1
    2cea:	21 00 98    	mov.w     w1, [w0+4]
    2cec:	03 00 37    	bra       0x2cf4 <.L34>

00002cee <.L35>:
  else
    ptr->super.displaybuffer[2] = 0;
    2cee:	1e 00 78    	mov.w     [w14], w0
    2cf0:	80 00 eb    	clr.w     w1
    2cf2:	21 00 98    	mov.w     w1, [w0+4]

00002cf4 <.L34>:
}
    2cf4:	00 80 fa    	ulnk      
    2cf6:	00 00 06    	return    

00002cf8 <_sevseg_printNumber>:

void sevseg_printNumber(_7SEGMENT* ptr, long n, uint8_t base){
    2cf8:	08 00 fa    	lnk       #0x8
    2cfa:	00 0f 78    	mov.w     w0, [w14]
    2cfc:	12 07 98    	mov.w     w2, [w14+2]
    2cfe:	23 07 98    	mov.w     w3, [w14+4]
    2d00:	61 47 98    	mov.b     w1, [w14+6]
  sevseg_printFloat(ptr, n, 0, base);
    2d02:	1e 00 90    	mov.w     [w14+2], w0
    2d04:	ae 00 90    	mov.w     [w14+4], w1
    2d06:	4e f3 07    	rcall     0x13a4 <___floatsisf>
    2d08:	00 01 be    	mov.d     w0, w2
    2d0a:	6e 42 90    	mov.b     [w14+6], w4
    2d0c:	80 40 eb    	clr.b     w1
    2d0e:	1e 00 78    	mov.w     [w14], w0
    2d10:	02 00 07    	rcall     0x2d16 <_sevseg_printFloat> <.LFB14> <.LFE13>
}
    2d12:	00 80 fa    	ulnk      
    2d14:	00 00 06    	return    

00002d16 <_sevseg_printFloat>:

void sevseg_printFloat(_7SEGMENT* ptr, double n, uint8_t fracDigits, uint8_t base){
    2d16:	1c 00 fa    	lnk       #0x1c
    2d18:	88 1f 78    	mov.w     w8, [w15++]
    2d1a:	20 0f 98    	mov.w     w0, [w14+20]
    2d1c:	32 0f 98    	mov.w     w2, [w14+22]
    2d1e:	43 0f 98    	mov.w     w3, [w14+24]
    2d20:	21 5f 98    	mov.b     w1, [w14+26]
    2d22:	34 5f 98    	mov.b     w4, [w14+27]
  uint8_t numericDigits = 4;   // available digits on display
    2d24:	40 c0 b3    	mov.b     #0x4, w0
    2d26:	00 4f 78    	mov.b     w0, [w14]
  uint8_t isNegative = 0;  // true if the number is negative
    2d28:	00 40 eb    	clr.b     w0
    2d2a:	10 47 98    	mov.b     w0, [w14+1]

  // is the number negative?
  if(n < 0) {
    2d2c:	18 c0 b3    	mov.b     #0x1, w8
    2d2e:	60 11 b8    	mul.uu    w2, #0x0, w2
    2d30:	3e 08 90    	mov.w     [w14+22], w0
    2d32:	ce 08 90    	mov.w     [w14+24], w1
    2d34:	1a f3 07    	rcall     0x136a <___eqsf2> <___lesf2> <___ltsf2>
    2d36:	00 00 e0    	cp0.w     w0
    2d38:	01 00 35    	bra       LT, 0x2d3c <.L39>
    2d3a:	00 44 eb    	clr.b     w8

00002d3c <.L39>:
    2d3c:	08 04 e0    	cp0.b     w8
    2d3e:	08 00 32    	bra       Z, 0x2d50 <.L40>
    isNegative = 1;  // need to draw sign later
    2d40:	10 c0 b3    	mov.b     #0x1, w0
    2d42:	10 47 98    	mov.b     w0, [w14+1]
    --numericDigits;    // the sign will take up one digit
    2d44:	1e 4f e9    	dec.b     [w14], [w14]
    n *= -1;            // pretend the number is positive
    2d46:	3e 08 90    	mov.w     [w14+22], w0
    2d48:	ce 08 90    	mov.w     [w14+24], w1
    2d4a:	01 f0 a2    	btg.w     w1, #0xf
    2d4c:	30 0f 98    	mov.w     w0, [w14+22]
    2d4e:	41 0f 98    	mov.w     w1, [w14+24]

00002d50 <.L40>:
  }

  // calculate the factor required to shift all fractional digits
  // into the integer part of the number
  double toIntFactor = 1.0;
    2d50:	00 00 20    	mov.w     #0x0, w0
    2d52:	01 f8 23    	mov.w     #0x3f80, w1
    2d54:	10 07 98    	mov.w     w0, [w14+2]
    2d56:	21 07 98    	mov.w     w1, [w14+4]
	int i = 0;
    2d58:	00 00 eb    	clr.w     w0
    2d5a:	30 07 98    	mov.w     w0, [w14+6]
  for(i = 0; i < fracDigits; ++i) toIntFactor *= base;
    2d5c:	00 00 eb    	clr.w     w0
    2d5e:	30 07 98    	mov.w     w0, [w14+6]
    2d60:	0d 00 37    	bra       0x2d7c <.L41>

00002d62 <.L42>:
    2d62:	3e 58 90    	mov.b     [w14+27], w0
    2d64:	00 80 fb    	ze        w0, w0
    2d66:	cf 80 de    	asr.w     w0, #0xf, w1
    2d68:	1d f3 07    	rcall     0x13a4 <___floatsisf>
    2d6a:	00 01 be    	mov.d     w0, w2
    2d6c:	1e 00 90    	mov.w     [w14+2], w0
    2d6e:	ae 00 90    	mov.w     [w14+4], w1
    2d70:	6f f3 07    	rcall     0x1450 <___mulsf3>
    2d72:	10 07 98    	mov.w     w0, [w14+2]
    2d74:	21 07 98    	mov.w     w1, [w14+4]
    2d76:	3e 00 90    	mov.w     [w14+6], w0
    2d78:	00 00 e8    	inc.w     w0, w0
    2d7a:	30 07 98    	mov.w     w0, [w14+6]

00002d7c <.L41>:
    2d7c:	2e 58 90    	mov.b     [w14+26], w0
    2d7e:	80 80 fb    	ze        w0, w1
    2d80:	3e 00 90    	mov.w     [w14+6], w0
    2d82:	80 8f 50    	sub.w     w1, w0, [w15]
    2d84:	ee ff 3c    	bra       GT, 0x2d62 <.L42>

  // create integer containing digits to display by applying
  // shifting factor and rounding adjustment
  uint32_t displayNumber = n * toIntFactor + 0.5;
    2d86:	1e 01 90    	mov.w     [w14+2], w2
    2d88:	ae 01 90    	mov.w     [w14+4], w3
    2d8a:	3e 08 90    	mov.w     [w14+22], w0
    2d8c:	ce 08 90    	mov.w     [w14+24], w1
    2d8e:	60 f3 07    	rcall     0x1450 <___mulsf3>
    2d90:	02 00 20    	mov.w     #0x0, w2
    2d92:	03 f0 23    	mov.w     #0x3f00, w3
    2d94:	4b f2 07    	rcall     0x122c <___addsf3>
    2d96:	eb f2 07    	rcall     0x136e <___fixunssfsi>
    2d98:	40 07 98    	mov.w     w0, [w14+8]
    2d9a:	51 07 98    	mov.w     w1, [w14+10]

  // calculate upper bound on displayNumber given
  // available digits on display
  uint32_t tooBig = 1;
    2d9c:	10 00 20    	mov.w     #0x1, w0
    2d9e:	01 00 20    	mov.w     #0x0, w1
    2da0:	60 07 98    	mov.w     w0, [w14+12]
    2da2:	71 07 98    	mov.w     w1, [w14+14]
  for(i = 0; i < numericDigits; ++i) tooBig *= base;
    2da4:	00 00 eb    	clr.w     w0
    2da6:	30 07 98    	mov.w     w0, [w14+6]
    2da8:	15 00 37    	bra       0x2dd4 <.L43>

00002daa <.L44>:
    2daa:	3e 58 90    	mov.b     [w14+27], w0
    2dac:	00 80 fb    	ze        w0, w0
    2dae:	80 00 eb    	clr.w     w1
    2db0:	7e 01 90    	mov.w     [w14+14], w2
    2db2:	00 91 b9    	mul.ss    w2, w0, w2
    2db4:	02 01 78    	mov.w     w2, w2
    2db6:	ee 01 90    	mov.w     [w14+12], w3
    2db8:	01 9a b9    	mul.ss    w3, w1, w4
    2dba:	84 01 78    	mov.w     w4, w3
    2dbc:	03 01 41    	add.w     w2, w3, w2
    2dbe:	ee 01 90    	mov.w     [w14+12], w3
    2dc0:	00 18 b8    	mul.uu    w3, w0, w0
    2dc2:	01 01 41    	add.w     w2, w1, w2
    2dc4:	82 00 78    	mov.w     w2, w1
    2dc6:	60 07 98    	mov.w     w0, [w14+12]
    2dc8:	71 07 98    	mov.w     w1, [w14+14]
    2dca:	60 07 98    	mov.w     w0, [w14+12]
    2dcc:	71 07 98    	mov.w     w1, [w14+14]
    2dce:	3e 00 90    	mov.w     [w14+6], w0
    2dd0:	00 00 e8    	inc.w     w0, w0
    2dd2:	30 07 98    	mov.w     w0, [w14+6]

00002dd4 <.L43>:
    2dd4:	9e 80 fb    	ze        [w14], w1
    2dd6:	3e 00 90    	mov.w     [w14+6], w0
    2dd8:	80 8f 50    	sub.w     w1, w0, [w15]
    2dda:	e7 ff 3c    	bra       GT, 0x2daa <.L44>

  // if displayNumber is too large, try fewer fractional digits
  while(displayNumber >= tooBig) {
    2ddc:	18 00 37    	bra       0x2e0e <.L45>

00002dde <.L46>:
    --fracDigits;
    2dde:	2e 58 90    	mov.b     [w14+26], w0
    2de0:	00 40 e9    	dec.b     w0, w0
    2de2:	20 5f 98    	mov.b     w0, [w14+26]
    toIntFactor /= base;
    2de4:	3e 58 90    	mov.b     [w14+27], w0
    2de6:	00 80 fb    	ze        w0, w0
    2de8:	cf 80 de    	asr.w     w0, #0xf, w1
    2dea:	dc f2 07    	rcall     0x13a4 <___floatsisf>
    2dec:	00 01 be    	mov.d     w0, w2
    2dee:	1e 00 90    	mov.w     [w14+2], w0
    2df0:	ae 00 90    	mov.w     [w14+4], w1
    2df2:	79 f2 07    	rcall     0x12e6 <___divsf3>
    2df4:	10 07 98    	mov.w     w0, [w14+2]
    2df6:	21 07 98    	mov.w     w1, [w14+4]
    displayNumber = n * toIntFactor + 0.5;
    2df8:	1e 01 90    	mov.w     [w14+2], w2
    2dfa:	ae 01 90    	mov.w     [w14+4], w3
    2dfc:	3e 08 90    	mov.w     [w14+22], w0
    2dfe:	ce 08 90    	mov.w     [w14+24], w1
    2e00:	27 f3 07    	rcall     0x1450 <___mulsf3>
    2e02:	02 00 20    	mov.w     #0x0, w2
    2e04:	03 f0 23    	mov.w     #0x3f00, w3
    2e06:	12 f2 07    	rcall     0x122c <___addsf3>
    2e08:	b2 f2 07    	rcall     0x136e <___fixunssfsi>
    2e0a:	40 07 98    	mov.w     w0, [w14+8]
    2e0c:	51 07 98    	mov.w     w1, [w14+10]

00002e0e <.L45>:
    2e0e:	4e 01 90    	mov.w     [w14+8], w2
    2e10:	de 01 90    	mov.w     [w14+10], w3
    2e12:	6e 00 90    	mov.w     [w14+12], w0
    2e14:	fe 00 90    	mov.w     [w14+14], w1
    2e16:	80 0f 51    	sub.w     w2, w0, [w15]
    2e18:	81 8f 59    	subb.w    w3, w1, [w15]
    2e1a:	e1 ff 31    	bra       C, 0x2dde <.L46>
  }

  // did toIntFactor shift the decimal off the display?
  if (toIntFactor < 1) {
    2e1c:	18 c0 b3    	mov.b     #0x1, w8
    2e1e:	02 00 20    	mov.w     #0x0, w2
    2e20:	03 f8 23    	mov.w     #0x3f80, w3
    2e22:	1e 00 90    	mov.w     [w14+2], w0
    2e24:	ae 00 90    	mov.w     [w14+4], w1
    2e26:	a1 f2 07    	rcall     0x136a <___eqsf2> <___lesf2> <___ltsf2>
    2e28:	00 00 e0    	cp0.w     w0
    2e2a:	01 00 35    	bra       LT, 0x2e2e <.L47>
    2e2c:	00 44 eb    	clr.b     w8

00002e2e <.L47>:
    2e2e:	08 04 e0    	cp0.b     w8
    2e30:	03 00 32    	bra       Z, 0x2e38 <.L48> <.LBB2>
    sevseg_printError(ptr);
    2e32:	2e 08 90    	mov.w     [w14+20], w0
    2e34:	6c 00 07    	rcall     0x2f0e <_sevseg_printError> <.LFB15> <.LFE14>
    2e36:	68 00 37    	bra       0x2f08 <.L38> <.LBE2>

00002e38 <.L48>:
  } else {
    // otherwise, display the number
    int8_t displayPos = 4;
    2e38:	40 c0 b3    	mov.b     #0x4, w0
    2e3a:	00 57 98    	mov.b     w0, [w14+16]

    if (displayNumber)  //if displayNumber is not 0
    2e3c:	4e 00 90    	mov.w     [w14+8], w0
    2e3e:	de 00 90    	mov.w     [w14+10], w1
    2e40:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2e42:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2e44:	41 00 32    	bra       Z, 0x2ec8 <.L50> <.LBE3>

00002e46 <.LBB3>:
    {
			uint8_t i;
      for(i = 0; displayNumber || i <= fracDigits; ++i) {
    2e46:	00 40 eb    	clr.b     w0
    2e48:	10 57 98    	mov.b     w0, [w14+17]
    2e4a:	34 00 37    	bra       0x2eb4 <.L51>

00002e4c <.L55>:
        uint8_t displayDecimal = (fracDigits != 0 && i == fracDigits);
    2e4c:	2e 58 90    	mov.b     [w14+26], w0
    2e4e:	00 04 e0    	cp0.b     w0
    2e50:	06 00 32    	bra       Z, 0x2e5e <.L52>
    2e52:	9e 50 90    	mov.b     [w14+17], w1
    2e54:	2e 58 90    	mov.b     [w14+26], w0
    2e56:	80 cf 50    	sub.b     w1, w0, [w15]
    2e58:	02 00 3a    	bra       NZ, 0x2e5e <.L52>
    2e5a:	10 00 20    	mov.w     #0x1, w0
    2e5c:	01 00 37    	bra       0x2e60 <.L53>

00002e5e <.L52>:
    2e5e:	00 00 eb    	clr.w     w0

00002e60 <.L53>:
    2e60:	20 57 98    	mov.b     w0, [w14+18]
        sevseg_writeDigitNum(ptr, displayPos--, displayNumber % base, displayDecimal);
    2e62:	3e 58 90    	mov.b     [w14+27], w0
    2e64:	00 80 fb    	ze        w0, w0
    2e66:	80 00 eb    	clr.w     w1
    2e68:	4e 02 90    	mov.w     [w14+8], w4
    2e6a:	de 02 90    	mov.w     [w14+10], w5
    2e6c:	00 01 be    	mov.d     w0, w2
    2e6e:	04 00 be    	mov.d     w4, w0
    2e70:	33 f3 07    	rcall     0x14d8 <___umodsi3>
    2e72:	80 40 78    	mov.b     w0, w1
    2e74:	0e 50 90    	mov.b     [w14+16], w0
    2e76:	0e 51 90    	mov.b     [w14+16], w2
    2e78:	02 41 e9    	dec.b     w2, w2
    2e7a:	02 57 98    	mov.b     w2, [w14+16]
    2e7c:	ae 51 90    	mov.b     [w14+18], w3
    2e7e:	01 41 78    	mov.b     w1, w2
    2e80:	80 40 78    	mov.b     w0, w1
    2e82:	2e 08 90    	mov.w     [w14+20], w0
    2e84:	0e ff 07    	rcall     0x2ca2 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
        if(displayPos == 2) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    2e86:	0e 50 90    	mov.b     [w14+16], w0
    2e88:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    2e8a:	08 00 3a    	bra       NZ, 0x2e9c <.L54>
    2e8c:	0e 50 90    	mov.b     [w14+16], w0
    2e8e:	8e 50 90    	mov.b     [w14+16], w1
    2e90:	81 40 e9    	dec.b     w1, w1
    2e92:	01 57 98    	mov.b     w1, [w14+16]
    2e94:	00 01 eb    	clr.w     w2
    2e96:	80 40 78    	mov.b     w0, w1
    2e98:	2e 08 90    	mov.w     [w14+20], w0
    2e9a:	f1 fe 07    	rcall     0x2c7e <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00002e9c <.L54>:
        displayNumber /= base;
    2e9c:	3e 58 90    	mov.b     [w14+27], w0
    2e9e:	00 80 fb    	ze        w0, w0
    2ea0:	80 00 eb    	clr.w     w1
    2ea2:	00 01 be    	mov.d     w0, w2
    2ea4:	4e 00 90    	mov.w     [w14+8], w0
    2ea6:	de 00 90    	mov.w     [w14+10], w1
    2ea8:	07 f3 07    	rcall     0x14b8 <___udivsi3>
    2eaa:	40 07 98    	mov.w     w0, [w14+8]
    2eac:	51 07 98    	mov.w     w1, [w14+10]

00002eae <.LBE4>:
    2eae:	1e 50 90    	mov.b     [w14+17], w0
    2eb0:	00 40 e8    	inc.b     w0, w0
    2eb2:	10 57 98    	mov.b     w0, [w14+17]

00002eb4 <.L51>:
    2eb4:	4e 00 90    	mov.w     [w14+8], w0
    2eb6:	de 00 90    	mov.w     [w14+10], w1
    2eb8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2eba:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2ebc:	c7 ff 3a    	bra       NZ, 0x2e4c <.L55> <.LBB4>
    2ebe:	9e 50 90    	mov.b     [w14+17], w1
    2ec0:	2e 58 90    	mov.b     [w14+26], w0
    2ec2:	80 cf 50    	sub.b     w1, w0, [w15]
    2ec4:	c3 ff 36    	bra       LEU, 0x2e4c <.L55> <.LBB4>
    2ec6:	09 00 37    	bra       0x2eda <.L56>

00002ec8 <.L50>:
      }
    }
    else {
      sevseg_writeDigitNum(ptr, displayPos--, 0, 0);
    2ec8:	0e 50 90    	mov.b     [w14+16], w0
    2eca:	8e 50 90    	mov.b     [w14+16], w1
    2ecc:	81 40 e9    	dec.b     w1, w1
    2ece:	01 57 98    	mov.b     w1, [w14+16]
    2ed0:	80 41 eb    	clr.b     w3
    2ed2:	00 41 eb    	clr.b     w2
    2ed4:	80 40 78    	mov.b     w0, w1
    2ed6:	2e 08 90    	mov.w     [w14+20], w0
    2ed8:	e4 fe 07    	rcall     0x2ca2 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

00002eda <.L56>:
    }

    // display negative sign if negative
    if(isNegative) sevseg_writeDigitRaw(ptr, displayPos--, 0x40);
    2eda:	1e 40 90    	mov.b     [w14+1], w0
    2edc:	00 04 e0    	cp0.b     w0
    2ede:	11 00 32    	bra       Z, 0x2f02 <.L58>
    2ee0:	0e 50 90    	mov.b     [w14+16], w0
    2ee2:	8e 50 90    	mov.b     [w14+16], w1
    2ee4:	81 40 e9    	dec.b     w1, w1
    2ee6:	01 57 98    	mov.b     w1, [w14+16]
    2ee8:	02 04 20    	mov.w     #0x40, w2
    2eea:	80 40 78    	mov.b     w0, w1
    2eec:	2e 08 90    	mov.w     [w14+20], w0
    2eee:	c7 fe 07    	rcall     0x2c7e <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

    // clear remaining display positions
    while(displayPos >= 0) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    2ef0:	08 00 37    	bra       0x2f02 <.L58>

00002ef2 <.L59>:
    2ef2:	0e 50 90    	mov.b     [w14+16], w0
    2ef4:	8e 50 90    	mov.b     [w14+16], w1
    2ef6:	81 40 e9    	dec.b     w1, w1
    2ef8:	01 57 98    	mov.b     w1, [w14+16]
    2efa:	00 01 eb    	clr.w     w2
    2efc:	80 40 78    	mov.b     w0, w1
    2efe:	2e 08 90    	mov.w     [w14+20], w0
    2f00:	be fe 07    	rcall     0x2c7e <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00002f02 <.L58>:
    2f02:	0e 50 90    	mov.b     [w14+16], w0
    2f04:	00 04 e0    	cp0.b     w0
    2f06:	f5 ff 3d    	bra       GE, 0x2ef2 <.L59>

00002f08 <.L38>:
  }
}
    2f08:	4f 04 78    	mov.w     [--w15], w8
    2f0a:	00 80 fa    	ulnk      
    2f0c:	00 00 06    	return    

00002f0e <_sevseg_printError>:

void sevseg_printError(_7SEGMENT* ptr){
    2f0e:	04 00 fa    	lnk       #0x4
    2f10:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
  for(i = 0; i < SEVENSEG_DIGITS; ++i) {
    2f12:	00 40 eb    	clr.b     w0
    2f14:	00 4f 78    	mov.b     w0, [w14]
    2f16:	0b 00 37    	bra       0x2f2e <.L61>

00002f18 <.L64>:
    sevseg_writeDigitRaw(ptr, i, (i == 2 ? 0x00 : 0x40));
    2f18:	1e 40 78    	mov.b     [w14], w0
    2f1a:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    2f1c:	02 00 3a    	bra       NZ, 0x2f22 <.L62>
    2f1e:	00 00 eb    	clr.w     w0
    2f20:	01 00 37    	bra       0x2f24 <.L63>

00002f22 <.L62>:
    2f22:	00 04 20    	mov.w     #0x40, w0

00002f24 <.L63>:
    2f24:	00 01 78    	mov.w     w0, w2
    2f26:	9e 40 78    	mov.b     [w14], w1
    2f28:	1e 00 90    	mov.w     [w14+2], w0
    2f2a:	a9 fe 07    	rcall     0x2c7e <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    2f2c:	1e 4f e8    	inc.b     [w14], [w14]

00002f2e <.L61>:
    2f2e:	1e 40 78    	mov.b     [w14], w0
    2f30:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    2f32:	f2 ff 36    	bra       LEU, 0x2f18 <.L64>
  }
}
    2f34:	00 80 fa    	ulnk      
    2f36:	00 00 06    	return    

00002f38 <_sevseg_writeColon>:


void sevseg_writeColon(_7SEGMENT* ptr){
    2f38:	02 00 fa    	lnk       #0x2
    2f3a:	00 0f 78    	mov.w     w0, [w14]
  /*
  Wire.beginTransmission(i2c_addr);
  Wire.write((uint8_t)0x04);

  Wire.write(displaybuffer[2] & 0xFF);
  Wire.write(displaybuffer[2] >> 8);

  Wire.endTransmission();
  */
  i2c_start();
    2f3c:	a8 02 07    	rcall     0x348e <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->super.i2c_addr);
    2f3e:	1e 00 78    	mov.w     [w14], w0
    2f40:	00 50 90    	mov.b     [w0+16], w0
    2f42:	00 80 fb    	ze        w0, w0
    2f44:	f3 02 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte((uint8_t)0x04); // start at address $02
    2f46:	40 00 20    	mov.w     #0x4, w0
    2f48:	f1 02 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] & 0xFF);
    2f4a:	1e 00 78    	mov.w     [w14], w0
    2f4c:	20 00 90    	mov.w     [w0+4], w0
    2f4e:	80 00 78    	mov.w     w0, w1
    2f50:	f0 0f 20    	mov.w     #0xff, w0
    2f52:	00 80 60    	and.w     w1, w0, w0
    2f54:	eb 02 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] >> 8);
    2f56:	1e 00 78    	mov.w     [w14], w0
    2f58:	20 00 90    	mov.w     [w0+4], w0
    2f5a:	48 00 de    	lsr.w     w0, #0x8, w0
    2f5c:	e7 02 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    2f5e:	cb 02 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2f60:	00 80 fa    	ulnk      
    2f62:	00 00 06    	return    

00002f64 <___lcd_i2c_write>:
#define DR_READ 0x0B

_LCD lcd[3];

void __lcd_i2c_write(_LCD *self, uint8_t ch) {
    2f64:	04 00 fa    	lnk       #0x4
    2f66:	00 0f 78    	mov.w     w0, [w14]
    2f68:	21 47 98    	mov.b     w1, [w14+2]
    i2c_start();
    2f6a:	91 02 07    	rcall     0x348e <_i2c_start> <.LFB2> <.LFE1>
    send_i2c_byte(self->addr_write);
    2f6c:	1e 00 78    	mov.w     [w14], w0
    2f6e:	10 40 78    	mov.b     [w0], w0
    2f70:	00 80 fb    	ze        w0, w0
    2f72:	dc 02 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ch);
    2f74:	2e 40 90    	mov.b     [w14+2], w0
    2f76:	00 80 fb    	ze        w0, w0
    2f78:	d9 02 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    reset_i2c_bus();
    2f7a:	bd 02 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2f7c:	00 80 fa    	ulnk      
    2f7e:	00 00 06    	return    

00002f80 <___lcd_enablePulse>:

// Pulse enable pin high and then low to shift in 4 bits of data
void __lcd_enablePulse(_LCD *self) {
    2f80:	02 00 fa    	lnk       #0x2
    2f82:	00 0f 78    	mov.w     w0, [w14]
    self->io_write_val ^= ENABLE_TOGGLE;
    2f84:	1e 00 78    	mov.w     [w14], w0
    2f86:	20 40 90    	mov.b     [w0+2], w0
    2f88:	80 40 78    	mov.b     w0, w1
    2f8a:	01 24 a2    	btg.b     w1, #0x2
    2f8c:	1e 00 78    	mov.w     [w14], w0
    2f8e:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    2f90:	1e 00 78    	mov.w     [w14], w0
    2f92:	20 40 90    	mov.b     [w0+2], w0
    2f94:	80 40 78    	mov.b     w0, w1
    2f96:	1e 00 78    	mov.w     [w14], w0
    2f98:	e5 ff 07    	rcall     0x2f64 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    delay_by_nop(100);
    2f9a:	40 06 20    	mov.w     #0x64, w0
    2f9c:	01 00 20    	mov.w     #0x0, w1
    2f9e:	57 02 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    self->io_write_val ^= ENABLE_TOGGLE;
    2fa0:	1e 00 78    	mov.w     [w14], w0
    2fa2:	20 40 90    	mov.b     [w0+2], w0
    2fa4:	80 40 78    	mov.b     w0, w1
    2fa6:	01 24 a2    	btg.b     w1, #0x2
    2fa8:	1e 00 78    	mov.w     [w14], w0
    2faa:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    2fac:	1e 00 78    	mov.w     [w14], w0
    2fae:	20 40 90    	mov.b     [w0+2], w0
    2fb0:	80 40 78    	mov.b     w0, w1
    2fb2:	1e 00 78    	mov.w     [w14], w0
    2fb4:	d7 ff 07    	rcall     0x2f64 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    // delay_by_nop(1000);
}
    2fb6:	00 80 fa    	ulnk      
    2fb8:	00 00 06    	return    

00002fba <___lcd_send>:

/* Send 8 bits of data as one 4-bit nibble, shifting in, second 4-bit nibble, and
shifting in */
void __lcd_send(_LCD *self, uint8_t value, uint8_t command) {
    2fba:	06 00 fa    	lnk       #0x6
    2fbc:	10 07 98    	mov.w     w0, [w14+2]
    2fbe:	41 47 98    	mov.b     w1, [w14+4]
    2fc0:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t MS = value & 0x78;
    2fc2:	4e 40 90    	mov.b     [w14+4], w0
    2fc4:	81 c7 b3    	mov.b     #0x78, w1
    2fc6:	01 4f 60    	and.b     w0, w1, [w14]
    uint8_t LS = value << 4;
    2fc8:	ce 40 90    	mov.b     [w14+4], w1
    2fca:	40 00 20    	mov.w     #0x4, w0
    2fcc:	00 08 dd    	sl.w      w1, w0, w0
    2fce:	10 47 98    	mov.b     w0, [w14+1]
    self->io_write_val = command | MS;
    2fd0:	5e 40 90    	mov.b     [w14+5], w0
    2fd2:	9e 40 70    	ior.b     w0, [w14], w1
    2fd4:	1e 00 90    	mov.w     [w14+2], w0
    2fd6:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    2fd8:	1e 00 90    	mov.w     [w14+2], w0
    2fda:	20 40 90    	mov.b     [w0+2], w0
    2fdc:	80 40 78    	mov.b     w0, w1
    2fde:	1e 00 90    	mov.w     [w14+2], w0
    2fe0:	c1 ff 07    	rcall     0x2f64 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    __lcd_enablePulse(self);
    2fe2:	1e 00 90    	mov.w     [w14+2], w0
    2fe4:	cd ff 07    	rcall     0x2f80 <___lcd_enablePulse> <.LFB1> <.LFE0>
    self->io_write_val= command | LS;
    2fe6:	de 40 90    	mov.b     [w14+5], w1
    2fe8:	1e 40 90    	mov.b     [w14+1], w0
    2fea:	80 c0 70    	ior.b     w1, w0, w1
    2fec:	1e 00 90    	mov.w     [w14+2], w0
    2fee:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    2ff0:	1e 00 90    	mov.w     [w14+2], w0
    2ff2:	20 40 90    	mov.b     [w0+2], w0
    2ff4:	80 40 78    	mov.b     w0, w1
    2ff6:	1e 00 90    	mov.w     [w14+2], w0
    2ff8:	b5 ff 07    	rcall     0x2f64 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    __lcd_enablePulse(self);
    2ffa:	1e 00 90    	mov.w     [w14+2], w0
    2ffc:	c1 ff 07    	rcall     0x2f80 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    2ffe:	00 80 fa    	ulnk      
    3000:	00 00 06    	return    

00003002 <___lcd_send8>:

void __lcd_send8(_LCD *self, uint8_t value, uint8_t command) {
    3002:	04 00 fa    	lnk       #0x4
    3004:	00 0f 78    	mov.w     w0, [w14]
    3006:	21 47 98    	mov.b     w1, [w14+2]
    3008:	32 47 98    	mov.b     w2, [w14+3]
    value = value << 4;
    300a:	ae 40 90    	mov.b     [w14+2], w1
    300c:	40 00 20    	mov.w     #0x4, w0
    300e:	00 08 dd    	sl.w      w1, w0, w0
    3010:	20 47 98    	mov.b     w0, [w14+2]
    self->io_write_val = command | value;
    3012:	be 40 90    	mov.b     [w14+3], w1
    3014:	2e 40 90    	mov.b     [w14+2], w0
    3016:	80 c0 70    	ior.b     w1, w0, w1
    3018:	1e 00 78    	mov.w     [w14], w0
    301a:	21 40 98    	mov.b     w1, [w0+2]
    __lcd_i2c_write(self, self->io_write_val);
    301c:	1e 00 78    	mov.w     [w14], w0
    301e:	20 40 90    	mov.b     [w0+2], w0
    3020:	80 40 78    	mov.b     w0, w1
    3022:	1e 00 78    	mov.w     [w14], w0
    3024:	9f ff 07    	rcall     0x2f64 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    __lcd_enablePulse(self);
    3026:	1e 00 78    	mov.w     [w14], w0
    3028:	ab ff 07    	rcall     0x2f80 <___lcd_enablePulse> <.LFB1> <.LFE0>
}
    302a:	00 80 fa    	ulnk      
    302c:	00 00 06    	return    

0000302e <_init_lcd>:

/* Some code from last year's Spaceteam project that sets up three LCD screens on
 one bus with corresponding IO extender types and hard-wired addresses */
void init_lcd(uint8_t initiator) {
    302e:	02 00 fa    	lnk       #0x2
    3030:	00 4f 78    	mov.b     w0, [w14]

    i2c_init(1e3);
    3032:	80 3e 20    	mov.w     #0x3e8, w0
    3034:	1f 02 07    	rcall     0x3474 <_i2c_init> <.LFB1> <.LFE0>

    switch (initiator) {
    3036:	1e 80 fb    	ze        [w14], w0
    3038:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    303a:	17 00 32    	bra       Z, 0x306a <.L8>
    303c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    303e:	03 00 3c    	bra       GT, 0x3046 <.L11>
    3040:	00 00 e0    	cp0.w     w0
    3042:	06 00 32    	bra       Z, 0x3050 <.L7>
    3044:	39 00 37    	bra       0x30b8 <.L5>

00003046 <.L11>:
    3046:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3048:	1d 00 32    	bra       Z, 0x3084 <.L9>
    304a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    304c:	28 00 32    	bra       Z, 0x309e <.L10>
    304e:	34 00 37    	bra       0x30b8 <.L5>

00003050 <.L7>:
        case 0: // Central
            lcd_init(&lcd[0], 0x05,'A');
    3050:	12 c4 b3    	mov.b     #0x41, w2
    3052:	51 c0 b3    	mov.b     #0x5, w1
    3054:	e0 10 21    	mov.w     #0x110e, w0
    3056:	32 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x07,'A');
    3058:	12 c4 b3    	mov.b     #0x41, w2
    305a:	71 c0 b3    	mov.b     #0x7, w1
    305c:	30 11 21    	mov.w     #0x1113, w0
    305e:	2e 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'T');
    3060:	42 c5 b3    	mov.b     #0x54, w2
    3062:	61 c0 b3    	mov.b     #0x6, w1
    3064:	80 11 21    	mov.w     #0x1118, w0
    3066:	2a 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            break;
    3068:	27 00 37    	bra       0x30b8 <.L5>

0000306a <.L8>:
        case 1:
            lcd_init(&lcd[0], 0x07,'A');
    306a:	12 c4 b3    	mov.b     #0x41, w2
    306c:	71 c0 b3    	mov.b     #0x7, w1
    306e:	e0 10 21    	mov.w     #0x110e, w0
    3070:	25 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x06,'A');
    3072:	12 c4 b3    	mov.b     #0x41, w2
    3074:	61 c0 b3    	mov.b     #0x6, w1
    3076:	80 11 21    	mov.w     #0x1118, w0
    3078:	21 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x05,'A');
    307a:	12 c4 b3    	mov.b     #0x41, w2
    307c:	51 c0 b3    	mov.b     #0x5, w1
    307e:	30 11 21    	mov.w     #0x1113, w0
    3080:	1d 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            break;
    3082:	1a 00 37    	bra       0x30b8 <.L5>

00003084 <.L9>:
        case 2:
            lcd_init(&lcd[0], 0x07,'T');
    3084:	42 c5 b3    	mov.b     #0x54, w2
    3086:	71 c0 b3    	mov.b     #0x7, w1
    3088:	e0 10 21    	mov.w     #0x110e, w0
    308a:	18 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    308c:	12 c4 b3    	mov.b     #0x41, w2
    308e:	61 c0 b3    	mov.b     #0x6, w1
    3090:	30 11 21    	mov.w     #0x1113, w0
    3092:	14 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    3094:	12 c4 b3    	mov.b     #0x41, w2
    3096:	51 c0 b3    	mov.b     #0x5, w1
    3098:	80 11 21    	mov.w     #0x1118, w0
    309a:	10 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            break;
    309c:	0d 00 37    	bra       0x30b8 <.L5>

0000309e <.L10>:
        case 3:
            lcd_init(&lcd[0], 0x07,'A');
    309e:	12 c4 b3    	mov.b     #0x41, w2
    30a0:	71 c0 b3    	mov.b     #0x7, w1
    30a2:	e0 10 21    	mov.w     #0x110e, w0
    30a4:	0b 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[1], 0x06,'A');
    30a6:	12 c4 b3    	mov.b     #0x41, w2
    30a8:	61 c0 b3    	mov.b     #0x6, w1
    30aa:	30 11 21    	mov.w     #0x1113, w0
    30ac:	07 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            lcd_init(&lcd[2], 0x05,'A');
    30ae:	12 c4 b3    	mov.b     #0x41, w2
    30b0:	51 c0 b3    	mov.b     #0x5, w1
    30b2:	80 11 21    	mov.w     #0x1118, w0
    30b4:	03 00 07    	rcall     0x30bc <_lcd_init> <.LFB5> <.LFE4>
            break;
    30b6:	00 00 00    	nop       

000030b8 <.L5>:
    }
}
    30b8:	00 80 fa    	ulnk      
    30ba:	00 00 06    	return    

000030bc <_lcd_init>:

// Initializes the LCD screen hardware as per pg. 46 of the datasheet
void lcd_init(_LCD *self, uint8_t addr, char vendor) {
    30bc:	04 00 fa    	lnk       #0x4
    30be:	00 0f 78    	mov.w     w0, [w14]
    30c0:	21 47 98    	mov.b     w1, [w14+2]
    30c2:	32 47 98    	mov.b     w2, [w14+3]
    switch(vendor){
    30c4:	3e 40 90    	mov.b     [w14+3], w0
    30c6:	00 00 fb    	se        w0, w0
    30c8:	11 04 20    	mov.w     #0x41, w1
    30ca:	81 0f 50    	sub.w     w0, w1, [w15]
    30cc:	10 00 32    	bra       Z, 0x30ee <.L14>
    30ce:	41 05 20    	mov.w     #0x54, w1
    30d0:	81 0f 50    	sub.w     w0, w1, [w15]
    30d2:	1a 00 3a    	bra       NZ, 0x3108 <.L13>
        case 'T':// 0x40 == vendor prefix for PCF8574T
            self->addr_write = 0x40 + (addr << 1);
    30d4:	2e 40 90    	mov.b     [w14+2], w0
    30d6:	00 40 40    	add.b     w0, w0, w0
    30d8:	02 c4 b3    	mov.b     #0x40, w2
    30da:	82 40 40    	add.b     w0, w2, w1
    30dc:	1e 00 78    	mov.w     [w14], w0
    30de:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x40 + (addr << 1)+1;
    30e0:	2e 40 90    	mov.b     [w14+2], w0
    30e2:	00 40 40    	add.b     w0, w0, w0
    30e4:	12 c4 b3    	mov.b     #0x41, w2
    30e6:	82 40 40    	add.b     w0, w2, w1
    30e8:	1e 00 78    	mov.w     [w14], w0
    30ea:	11 40 98    	mov.b     w1, [w0+1]
            break;
    30ec:	0d 00 37    	bra       0x3108 <.L13>

000030ee <.L14>:
        case 'A':// 0x70 == vendor prefix PCF8574AT
            self->addr_write = 0x70 + (addr << 1);
    30ee:	2e 40 90    	mov.b     [w14+2], w0
    30f0:	00 40 40    	add.b     w0, w0, w0
    30f2:	02 c7 b3    	mov.b     #0x70, w2
    30f4:	82 40 40    	add.b     w0, w2, w1
    30f6:	1e 00 78    	mov.w     [w14], w0
    30f8:	01 48 78    	mov.b     w1, [w0]
            self->addr_read = 0x70 + (addr << 1)+1;
    30fa:	2e 40 90    	mov.b     [w14+2], w0
    30fc:	00 40 40    	add.b     w0, w0, w0
    30fe:	12 c7 b3    	mov.b     #0x71, w2
    3100:	82 40 40    	add.b     w0, w2, w1
    3102:	1e 00 78    	mov.w     [w14], w0
    3104:	11 40 98    	mov.b     w1, [w0+1]
            break;
    3106:	00 00 00    	nop       

00003108 <.L13>:
    }

    self->display_control = 0x00;
    3108:	1e 00 78    	mov.w     [w14], w0
    310a:	80 40 eb    	clr.b     w1
    310c:	31 40 98    	mov.b     w1, [w0+3]
    self->display_mode = 0x00;
    310e:	1e 00 78    	mov.w     [w14], w0
    3110:	80 40 eb    	clr.b     w1
    3112:	41 40 98    	mov.b     w1, [w0+4]

    self->io_write_val = 0x00;
    3114:	1e 00 78    	mov.w     [w14], w0
    3116:	80 40 eb    	clr.b     w1
    3118:	21 40 98    	mov.b     w1, [w0+2]

    __lcd_i2c_write(self, 0x00);
    311a:	80 40 eb    	clr.b     w1
    311c:	1e 00 78    	mov.w     [w14], w0
    311e:	22 ff 07    	rcall     0x2f64 <___lcd_i2c_write> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    delay_by_nop(15000);
    3120:	80 a9 23    	mov.w     #0x3a98, w0
    3122:	01 00 20    	mov.w     #0x0, w1
    3124:	94 01 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Some bullshit according to pg 46
    __lcd_send8(self, 0x03, INTERNAL_WRITE);
    3126:	82 c0 b3    	mov.b     #0x8, w2
    3128:	31 c0 b3    	mov.b     #0x3, w1
    312a:	1e 00 78    	mov.w     [w14], w0
    312c:	6a ff 07    	rcall     0x3002 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    312e:	80 38 21    	mov.w     #0x1388, w0
    3130:	01 00 20    	mov.w     #0x0, w1
    3132:	8d 01 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    3134:	82 c0 b3    	mov.b     #0x8, w2
    3136:	31 c0 b3    	mov.b     #0x3, w1
    3138:	1e 00 78    	mov.w     [w14], w0
    313a:	63 ff 07    	rcall     0x3002 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    313c:	80 38 21    	mov.w     #0x1388, w0
    313e:	01 00 20    	mov.w     #0x0, w1
    3140:	86 01 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send8(self, 0x03, INTERNAL_WRITE);//0b00110000
    3142:	82 c0 b3    	mov.b     #0x8, w2
    3144:	31 c0 b3    	mov.b     #0x3, w1
    3146:	1e 00 78    	mov.w     [w14], w0
    3148:	5c ff 07    	rcall     0x3002 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    314a:	80 38 21    	mov.w     #0x1388, w0
    314c:	01 00 20    	mov.w     #0x0, w1
    314e:	7f 01 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    // Put it in 4 bit mode
    __lcd_send8(self, 0x02, INTERNAL_WRITE);//0b00110000
    3150:	82 c0 b3    	mov.b     #0x8, w2
    3152:	21 c0 b3    	mov.b     #0x2, w1
    3154:	1e 00 78    	mov.w     [w14], w0
    3156:	55 ff 07    	rcall     0x3002 <___lcd_send8> <.LFB3> <.LFE2>
    delay_by_nop(5000);
    3158:	80 38 21    	mov.w     #0x1388, w0
    315a:	01 00 20    	mov.w     #0x0, w1
    315c:	78 01 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x28, INTERNAL_WRITE); // Set rows and direction
    315e:	82 c0 b3    	mov.b     #0x8, w2
    3160:	81 c2 b3    	mov.b     #0x28, w1
    3162:	1e 00 78    	mov.w     [w14], w0
    3164:	2a ff 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    3166:	20 03 20    	mov.w     #0x32, w0
    3168:	01 00 20    	mov.w     #0x0, w1
    316a:	71 01 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x80, INTERNAL_WRITE); // Display off, cursor off
    316c:	82 c0 b3    	mov.b     #0x8, w2
    316e:	01 c8 b3    	mov.b     #0x80, w1
    3170:	1e 00 78    	mov.w     [w14], w0
    3172:	23 ff 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(50);
    3174:	20 03 20    	mov.w     #0x32, w0
    3176:	01 00 20    	mov.w     #0x0, w1
    3178:	6a 01 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x01, INTERNAL_WRITE); // Go to home position
    317a:	82 c0 b3    	mov.b     #0x8, w2
    317c:	11 c0 b3    	mov.b     #0x1, w1
    317e:	1e 00 78    	mov.w     [w14], w0
    3180:	1c ff 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    3182:	00 7d 20    	mov.w     #0x7d0, w0
    3184:	01 00 20    	mov.w     #0x0, w1
    3186:	63 01 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x06, INTERNAL_WRITE); // Set curson direction
    3188:	82 c0 b3    	mov.b     #0x8, w2
    318a:	61 c0 b3    	mov.b     #0x6, w1
    318c:	1e 00 78    	mov.w     [w14], w0
    318e:	15 ff 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(5000);
    3190:	80 38 21    	mov.w     #0x1388, w0
    3192:	01 00 20    	mov.w     #0x0, w1
    3194:	5c 01 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

    __lcd_send(self, 0x0C, INTERNAL_WRITE); // Display on, cursor off
    3196:	82 c0 b3    	mov.b     #0x8, w2
    3198:	c1 c0 b3    	mov.b     #0xc, w1
    319a:	1e 00 78    	mov.w     [w14], w0
    319c:	0e ff 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
}
    319e:	00 80 fa    	ulnk      
    31a0:	00 00 06    	return    

000031a2 <_lcd_stop>:

// Stops lcd I2C transfer
void lcd_stop(_LCD *self) {
    31a2:	02 00 fa    	lnk       #0x2
    31a4:	00 0f 78    	mov.w     w0, [w14]
    reset_i2c_bus();
    31a6:	a7 01 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    31a8:	00 80 fa    	ulnk      
    31aa:	00 00 06    	return    

000031ac <_lcd_display>:

// Sends show display command to LCD
void lcd_display(_LCD *self, uint8_t on) {
    31ac:	04 00 fa    	lnk       #0x4
    31ae:	00 0f 78    	mov.w     w0, [w14]
    31b0:	21 47 98    	mov.b     w1, [w14+2]
    if (on) {
    31b2:	2e 40 90    	mov.b     [w14+2], w0
    31b4:	00 04 e0    	cp0.b     w0
    31b6:	07 00 32    	bra       Z, 0x31c6 <.L18>
        self->display_control |= LCD_DISPLAYON;
    31b8:	1e 00 78    	mov.w     [w14], w0
    31ba:	30 40 90    	mov.b     [w0+3], w0
    31bc:	80 40 78    	mov.b     w0, w1
    31be:	01 24 a0    	bset.b    w1, #0x2
    31c0:	1e 00 78    	mov.w     [w14], w0
    31c2:	31 40 98    	mov.b     w1, [w0+3]
    31c4:	06 00 37    	bra       0x31d2 <.L19>

000031c6 <.L18>:
    } else {
        self->display_control &= ~LCD_DISPLAYON;
    31c6:	1e 00 78    	mov.w     [w14], w0
    31c8:	b0 40 90    	mov.b     [w0+3], w1
    31ca:	b0 cf b3    	mov.b     #0xfb, w0
    31cc:	80 c0 60    	and.b     w1, w0, w1
    31ce:	1e 00 78    	mov.w     [w14], w0
    31d0:	31 40 98    	mov.b     w1, [w0+3]

000031d2 <.L19>:
    }
    __lcd_send(self, self->display_control | LCD_DISPLAYCONTROL, INTERNAL_WRITE);
    31d2:	1e 00 78    	mov.w     [w14], w0
    31d4:	30 40 90    	mov.b     [w0+3], w0
    31d6:	00 34 a0    	bset.b    w0, #0x3
    31d8:	82 c0 b3    	mov.b     #0x8, w2
    31da:	80 40 78    	mov.b     w0, w1
    31dc:	1e 00 78    	mov.w     [w14], w0
    31de:	ed fe 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
}
    31e0:	00 80 fa    	ulnk      
    31e2:	00 00 06    	return    

000031e4 <_lcd_clear>:

// Sends clear display command to LCD
void lcd_clear(_LCD *self) {
    31e4:	02 00 fa    	lnk       #0x2
    31e6:	00 0f 78    	mov.w     w0, [w14]
    __lcd_send(self, LCD_CLEARDISPLAY, INTERNAL_WRITE);
    31e8:	82 c0 b3    	mov.b     #0x8, w2
    31ea:	11 c0 b3    	mov.b     #0x1, w1
    31ec:	1e 00 78    	mov.w     [w14], w0
    31ee:	e5 fe 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
    delay_by_nop(2000);
    31f0:	00 7d 20    	mov.w     #0x7d0, w0
    31f2:	01 00 20    	mov.w     #0x0, w1
    31f4:	2c 01 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    31f6:	00 80 fa    	ulnk      
    31f8:	00 00 06    	return    

000031fa <_lcd_putc>:

// Sends single character to LCD display
void lcd_putc(_LCD *self, char c) {
    31fa:	04 00 fa    	lnk       #0x4
    31fc:	00 0f 78    	mov.w     w0, [w14]
    31fe:	21 47 98    	mov.b     w1, [w14+2]
    __lcd_send(self, c, DR_WRITE);
    3200:	2e 40 90    	mov.b     [w14+2], w0
    3202:	92 c0 b3    	mov.b     #0x9, w2
    3204:	80 40 78    	mov.b     w0, w1
    3206:	1e 00 78    	mov.w     [w14], w0
    3208:	d8 fe 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
    // delay_by_nop(1000);
}
    320a:	00 80 fa    	ulnk      
    320c:	00 00 06    	return    

0000320e <_lcd_goto>:

// Sends commands to move LCD cursor to specified location
void lcd_goto(_LCD *self, uint8_t line, uint8_t col) { //x=col, y=row
    320e:	06 00 fa    	lnk       #0x6
    3210:	10 07 98    	mov.w     w0, [w14+2]
    3212:	41 47 98    	mov.b     w1, [w14+4]
    3214:	52 47 98    	mov.b     w2, [w14+5]
    uint8_t address;
    switch(line) {
    3216:	4e 40 90    	mov.b     [w14+4], w0
    3218:	00 80 fb    	ze        w0, w0
    321a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    321c:	03 00 32    	bra       Z, 0x3224 <.L24>
    321e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3220:	04 00 32    	bra       Z, 0x322a <.L25>
    3222:	06 00 37    	bra       0x3230 <.L27>

00003224 <.L24>:
        case 1:
            address = 0x00;
    3224:	00 40 eb    	clr.b     w0
    3226:	00 4f 78    	mov.b     w0, [w14]
            break;
    3228:	06 00 37    	bra       0x3236 <.L26>

0000322a <.L25>:
        case 2:
            address = 0x40;
    322a:	00 c4 b3    	mov.b     #0x40, w0
    322c:	00 4f 78    	mov.b     w0, [w14]
            break;
    322e:	03 00 37    	bra       0x3236 <.L26>

00003230 <.L27>:
        default:
            address = 0x00;
    3230:	00 40 eb    	clr.b     w0
    3232:	00 4f 78    	mov.b     w0, [w14]
            break;
    3234:	00 00 00    	nop       

00003236 <.L26>:
    }

    address = address+col;
    3236:	5e 40 90    	mov.b     [w14+5], w0
    3238:	1e 4f 40    	add.b     w0, [w14], [w14]
    __lcd_send(self, LCD_SETDDRAMADDR | address, INTERNAL_WRITE);
    323a:	1e 40 78    	mov.b     [w14], w0
    323c:	00 74 a0    	bset.b    w0, #0x7
    323e:	82 c0 b3    	mov.b     #0x8, w2
    3240:	80 40 78    	mov.b     w0, w1
    3242:	1e 00 90    	mov.w     [w14+2], w0
    3244:	ba fe 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
}
    3246:	00 80 fa    	ulnk      
    3248:	00 00 06    	return    

0000324a <_lcd_cursor>:


void lcd_cursor(_LCD *self, uint8_t cur) {
    324a:	04 00 fa    	lnk       #0x4
    324c:	00 0f 78    	mov.w     w0, [w14]
    324e:	21 47 98    	mov.b     w1, [w14+2]
    switch(cur) {
    3250:	2e 40 90    	mov.b     [w14+2], w0
    3252:	00 80 fb    	ze        w0, w0
    3254:	00 00 e0    	cp0.w     w0
    3256:	03 00 32    	bra       Z, 0x325e <.L30>
    3258:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    325a:	06 00 32    	bra       Z, 0x3268 <.L31>
        case 0:
            __lcd_send(self, 0x0C, INTERNAL_WRITE);
            break;
        case 1:
            __lcd_send(self, 0x0E, INTERNAL_WRITE);
            break;
        default:
            break;
    325c:	0a 00 37    	bra       0x3272 <.L28>

0000325e <.L30>:
    325e:	82 c0 b3    	mov.b     #0x8, w2
    3260:	c1 c0 b3    	mov.b     #0xc, w1
    3262:	1e 00 78    	mov.w     [w14], w0
    3264:	aa fe 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
    3266:	05 00 37    	bra       0x3272 <.L28>

00003268 <.L31>:
    3268:	82 c0 b3    	mov.b     #0x8, w2
    326a:	e1 c0 b3    	mov.b     #0xe, w1
    326c:	1e 00 78    	mov.w     [w14], w0
    326e:	a5 fe 07    	rcall     0x2fba <___lcd_send> <.LFB2> <.LFE1>
    3270:	00 00 00    	nop       

00003272 <.L28>:
    }
}
    3272:	00 80 fa    	ulnk      
    3274:	00 00 06    	return    

00003276 <_lcd_print1>:

void lcd_print1(_LCD *self, char *str) {
    3276:	04 00 fa    	lnk       #0x4
    3278:	00 0f 78    	mov.w     w0, [w14]
    327a:	11 07 98    	mov.w     w1, [w14+2]
    lcd_clear(self);
    327c:	1e 00 78    	mov.w     [w14], w0
    327e:	b2 ff 07    	rcall     0x31e4 <_lcd_clear> <.LFB8> <.LFE7>
    while (*str) {
    3280:	08 00 37    	bra       0x3292 <.L34>

00003282 <.L35>:
        lcd_putc(self, *str);
    3282:	1e 00 90    	mov.w     [w14+2], w0
    3284:	10 40 78    	mov.b     [w0], w0
    3286:	80 40 78    	mov.b     w0, w1
    3288:	1e 00 78    	mov.w     [w14], w0
    328a:	b7 ff 07    	rcall     0x31fa <_lcd_putc> <.LFB9> <.LFE8>
        str++;
    328c:	1e 00 90    	mov.w     [w14+2], w0
    328e:	00 00 e8    	inc.w     w0, w0
    3290:	10 07 98    	mov.w     w0, [w14+2]

00003292 <.L34>:
    3292:	1e 00 90    	mov.w     [w14+2], w0
    3294:	10 40 78    	mov.b     [w0], w0
    3296:	00 04 e0    	cp0.b     w0
    3298:	f4 ff 3a    	bra       NZ, 0x3282 <.L35>
    }
}
    329a:	00 80 fa    	ulnk      
    329c:	00 00 06    	return    

0000329e <_lcd_print2>:

void lcd_print2(_LCD *self, char* line1, char* line2){
    329e:	42 00 fa    	lnk       #0x42
    32a0:	60 1f 98    	mov.w     w0, [w14+60]
    32a2:	71 1f 98    	mov.w     w1, [w14+62]
    32a4:	02 27 98    	mov.w     w2, [w14+64]
    lcd_clear(self);
    32a6:	6e 18 90    	mov.w     [w14+60], w0
    32a8:	9d ff 07    	rcall     0x31e4 <_lcd_clear> <.LFB8> <.LFE7>
    char str[56] ="                                                        ";
    32aa:	a0 13 2a    	mov.w     #0xa13a, w0
    32ac:	e4 00 47    	add.w     w14, #0x4, w1
    32ae:	37 00 09    	repeat    #0x37
    32b0:	b0 58 78    	mov.b     [w0++], [w1++]
    32b2:	80 03 b1    	sub.w     #0x38, w0
    int i =0;
    32b4:	00 00 eb    	clr.w     w0
    32b6:	00 0f 78    	mov.w     w0, [w14]
    while (*line1){
    32b8:	09 00 37    	bra       0x32cc <.L37>

000032ba <.L38>:
        str[i]=*line1;
    32ba:	7e 18 90    	mov.w     [w14+62], w0
    32bc:	90 40 78    	mov.b     [w0], w1
    32be:	64 00 47    	add.w     w14, #0x4, w0
    32c0:	1e 00 40    	add.w     w0, [w14], w0
    32c2:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    32c4:	1e 0f e8    	inc.w     [w14], [w14]
        line1++;
    32c6:	7e 18 90    	mov.w     [w14+62], w0
    32c8:	00 00 e8    	inc.w     w0, w0
    32ca:	70 1f 98    	mov.w     w0, [w14+62]

000032cc <.L37>:
    32cc:	7e 18 90    	mov.w     [w14+62], w0
    32ce:	10 40 78    	mov.b     [w0], w0
    32d0:	00 04 e0    	cp0.b     w0
    32d2:	f3 ff 3a    	bra       NZ, 0x32ba <.L38>
    }
    i =40;
    32d4:	80 02 20    	mov.w     #0x28, w0
    32d6:	00 0f 78    	mov.w     w0, [w14]
    while (*line2){
    32d8:	09 00 37    	bra       0x32ec <.L39>

000032da <.L40>:
        str[i]=*line2;
    32da:	0e 20 90    	mov.w     [w14+64], w0
    32dc:	90 40 78    	mov.b     [w0], w1
    32de:	64 00 47    	add.w     w14, #0x4, w0
    32e0:	1e 00 40    	add.w     w0, [w14], w0
    32e2:	01 48 78    	mov.b     w1, [w0]
        i=i+1;
    32e4:	1e 0f e8    	inc.w     [w14], [w14]
        line2++;
    32e6:	0e 20 90    	mov.w     [w14+64], w0
    32e8:	00 00 e8    	inc.w     w0, w0
    32ea:	00 27 98    	mov.w     w0, [w14+64]

000032ec <.L39>:
    32ec:	0e 20 90    	mov.w     [w14+64], w0
    32ee:	10 40 78    	mov.b     [w0], w0
    32f0:	00 04 e0    	cp0.b     w0
    32f2:	f3 ff 3a    	bra       NZ, 0x32da <.L40>
    }
    char* strptr=str;
    32f4:	64 00 47    	add.w     w14, #0x4, w0
    32f6:	10 07 98    	mov.w     w0, [w14+2]
    lcd_print1(self,strptr);
    32f8:	9e 00 90    	mov.w     [w14+2], w1
    32fa:	6e 18 90    	mov.w     [w14+60], w0
    32fc:	bc ff 07    	rcall     0x3276 <_lcd_print1> <.LFB12> <.LFE11>
}
    32fe:	00 80 fa    	ulnk      
    3300:	00 00 06    	return    

00003302 <_lcd_print>:

void lcd_print(_LCD *self, char* message) {
    3302:	30 00 fa    	lnk       #0x30
    3304:	60 17 98    	mov.w     w0, [w14+44]
    3306:	71 17 98    	mov.w     w1, [w14+46]
    char newstr1[17] = "                ";
    3308:	30 17 2a    	mov.w     #0xa173, w0
    330a:	ea 00 47    	add.w     w14, #0xa, w1
    330c:	10 00 09    	repeat    #0x10
    330e:	b0 58 78    	mov.b     [w0++], [w1++]
    3310:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr1= newstr1;
    3312:	6a 0f 47    	add.w     w14, #0xa, [w14]
    char newstr2[17] = "                ";
    3314:	30 17 2a    	mov.w     #0xa173, w0
    3316:	fb 00 47    	add.w     w14, #0x1b, w1
    3318:	10 00 09    	repeat    #0x10
    331a:	b0 58 78    	mov.b     [w0++], [w1++]
    331c:	10 01 b1    	sub.w     #0x11, w0
    char* newstrptr2= newstr2;
    331e:	7b 00 47    	add.w     w14, #0x1b, w0
    3320:	10 07 98    	mov.w     w0, [w14+2]
    char* temp1 = newstrptr1;
    3322:	9e 00 78    	mov.w     [w14], w1
    3324:	31 07 98    	mov.w     w1, [w14+6]
    char* temp2 = newstrptr2;
    3326:	9e 00 90    	mov.w     [w14+2], w1
    3328:	41 07 98    	mov.w     w1, [w14+8]
    uint8_t i=0;
    332a:	00 40 eb    	clr.b     w0
    332c:	40 47 98    	mov.b     w0, [w14+4]
    while (i <17){
    332e:	0f 00 37    	bra       0x334e <.L42>

00003330 <.L44>:
        if (*message){
    3330:	7e 10 90    	mov.w     [w14+46], w0
    3332:	10 40 78    	mov.b     [w0], w0
    3334:	00 04 e0    	cp0.b     w0
    3336:	08 00 32    	bra       Z, 0x3348 <.L43>
            *newstrptr1=*message;
    3338:	7e 10 90    	mov.w     [w14+46], w0
    333a:	90 40 78    	mov.b     [w0], w1
    333c:	1e 00 78    	mov.w     [w14], w0
    333e:	01 48 78    	mov.b     w1, [w0]
            message++;
    3340:	7e 10 90    	mov.w     [w14+46], w0
    3342:	00 00 e8    	inc.w     w0, w0
    3344:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr1++;
    3346:	1e 0f e8    	inc.w     [w14], [w14]

00003348 <.L43>:
        }
        i++;
    3348:	4e 40 90    	mov.b     [w14+4], w0
    334a:	00 40 e8    	inc.b     w0, w0
    334c:	40 47 98    	mov.b     w0, [w14+4]

0000334e <.L42>:
    334e:	4e 40 90    	mov.b     [w14+4], w0
    3350:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    3352:	ee ff 36    	bra       LEU, 0x3330 <.L44>
    }
    i=0;
    3354:	00 40 eb    	clr.b     w0
    3356:	40 47 98    	mov.b     w0, [w14+4]
    message--; //SKETCHY!
    3358:	7e 10 90    	mov.w     [w14+46], w0
    335a:	00 00 e9    	dec.w     w0, w0
    335c:	70 17 98    	mov.w     w0, [w14+46]
    while (i <17){
    335e:	11 00 37    	bra       0x3382 <.L45>

00003360 <.L47>:
        if (*message){
    3360:	7e 10 90    	mov.w     [w14+46], w0
    3362:	10 40 78    	mov.b     [w0], w0
    3364:	00 04 e0    	cp0.b     w0
    3366:	0a 00 32    	bra       Z, 0x337c <.L46>
            *newstrptr2=*message;
    3368:	7e 10 90    	mov.w     [w14+46], w0
    336a:	90 40 78    	mov.b     [w0], w1
    336c:	1e 00 90    	mov.w     [w14+2], w0
    336e:	01 48 78    	mov.b     w1, [w0]
            message++;
    3370:	7e 10 90    	mov.w     [w14+46], w0
    3372:	00 00 e8    	inc.w     w0, w0
    3374:	70 17 98    	mov.w     w0, [w14+46]
            newstrptr2++;
    3376:	1e 00 90    	mov.w     [w14+2], w0
    3378:	00 00 e8    	inc.w     w0, w0
    337a:	10 07 98    	mov.w     w0, [w14+2]

0000337c <.L46>:
        }
        i++;
    337c:	4e 40 90    	mov.b     [w14+4], w0
    337e:	00 40 e8    	inc.b     w0, w0
    3380:	40 47 98    	mov.b     w0, [w14+4]

00003382 <.L45>:
    3382:	4e 40 90    	mov.b     [w14+4], w0
    3384:	f0 4f 50    	sub.b     w0, #0x10, [w15]
    3386:	ec ff 36    	bra       LEU, 0x3360 <.L47>
    }
    lcd_print2(self, temp1, temp2);
    3388:	4e 01 90    	mov.w     [w14+8], w2
    338a:	be 00 90    	mov.w     [w14+6], w1
    338c:	6e 10 90    	mov.w     [w14+44], w0
    338e:	87 ff 07    	rcall     0x329e <_lcd_print2> <.LFB13> <.LFE12>
}
    3390:	00 80 fa    	ulnk      
    3392:	00 00 06    	return    

00003394 <_lcd_broadcast>:

void lcd_broadcast(char* message) {
    3394:	04 00 fa    	lnk       #0x4
    3396:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t i;
    for (i = 0; i < 3; i++)
    3398:	00 40 eb    	clr.b     w0
    339a:	00 4f 78    	mov.b     w0, [w14]
    339c:	08 00 37    	bra       0x33ae <.L49>

0000339e <.L50>:
        lcd_print(&lcd[i], message);
    339e:	1e 80 fb    	ze        [w14], w0
    33a0:	65 00 b9    	mul.su    w0, #0x5, w0
    33a2:	80 00 78    	mov.w     w0, w1
    33a4:	e0 10 21    	mov.w     #0x110e, w0
    33a6:	00 80 40    	add.w     w1, w0, w0
    33a8:	9e 00 90    	mov.w     [w14+2], w1
    33aa:	ab ff 07    	rcall     0x3302 <_lcd_print> <.LFB14> <.LFE13>
    33ac:	1e 4f e8    	inc.b     [w14], [w14]

000033ae <.L49>:
    33ae:	1e 40 78    	mov.b     [w14], w0
    33b0:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    33b2:	f5 ff 36    	bra       LEU, 0x339e <.L50>
}
    33b4:	00 80 fa    	ulnk      
    33b6:	00 00 06    	return    

000033b8 <_itoa>:

char * itoa (int value, char *result, int base) {
    33b8:	0e 00 fa    	lnk       #0xe
    33ba:	40 07 98    	mov.w     w0, [w14+8]
    33bc:	51 07 98    	mov.w     w1, [w14+10]
    33be:	62 07 98    	mov.w     w2, [w14+12]
    // check that the base if valid
    if (base < 2 || base > 36) { *result = '\0'; return result; }
    33c0:	6e 00 90    	mov.w     [w14+12], w0
    33c2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    33c4:	04 00 34    	bra       LE, 0x33ce <.L52>
    33c6:	ee 00 90    	mov.w     [w14+12], w1
    33c8:	40 02 20    	mov.w     #0x24, w0
    33ca:	80 8f 50    	sub.w     w1, w0, [w15]
    33cc:	05 00 34    	bra       LE, 0x33d8 <.L53>

000033ce <.L52>:
    33ce:	5e 00 90    	mov.w     [w14+10], w0
    33d0:	80 40 eb    	clr.b     w1
    33d2:	01 48 78    	mov.b     w1, [w0]
    33d4:	5e 00 90    	mov.w     [w14+10], w0
    33d6:	39 00 37    	bra       0x344a <.L54>

000033d8 <.L53>:

    char* ptr = result, *ptr1 = result, tmp_char;
    33d8:	de 00 90    	mov.w     [w14+10], w1
    33da:	01 0f 78    	mov.w     w1, [w14]
    33dc:	5e 01 90    	mov.w     [w14+10], w2
    33de:	12 07 98    	mov.w     w2, [w14+2]

000033e0 <.L55>:
    int tmp_value;

    do {
        tmp_value = value;
    33e0:	ce 00 90    	mov.w     [w14+8], w1
    33e2:	21 07 98    	mov.w     w1, [w14+4]
        value /= base;
    33e4:	ce 00 90    	mov.w     [w14+8], w1
    33e6:	6e 00 90    	mov.w     [w14+12], w0
    33e8:	00 01 78    	mov.w     w0, w2
    33ea:	11 00 09    	repeat    #0x11
    33ec:	82 00 d8    	div.sw    w1, w2
    33ee:	40 07 98    	mov.w     w0, [w14+8]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
    33f0:	ce 00 90    	mov.w     [w14+8], w1
    33f2:	6e 00 90    	mov.w     [w14+12], w0
    33f4:	00 88 b9    	mul.ss    w1, w0, w0
    33f6:	00 00 78    	mov.w     w0, w0
    33f8:	ae 00 90    	mov.w     [w14+4], w1
    33fa:	00 80 50    	sub.w     w1, w0, w0
    33fc:	30 02 b0    	add.w     #0x23, w0
    33fe:	41 18 2a    	mov.w     #0xa184, w1
    3400:	e1 40 78    	mov.b     [w1+w0], w1
    3402:	1e 00 78    	mov.w     [w14], w0
    3404:	01 48 78    	mov.b     w1, [w0]
    3406:	1e 0f e8    	inc.w     [w14], [w14]
    } while ( value );
    3408:	4e 00 90    	mov.w     [w14+8], w0
    340a:	00 00 e0    	cp0.w     w0
    340c:	e9 ff 3a    	bra       NZ, 0x33e0 <.L55>

    // Apply negative sign
    if (tmp_value < 0) *ptr++ = '-';
    340e:	2e 00 90    	mov.w     [w14+4], w0
    3410:	00 00 e0    	cp0.w     w0
    3412:	04 00 3d    	bra       GE, 0x341c <.L56>
    3414:	1e 00 78    	mov.w     [w14], w0
    3416:	d1 c2 b3    	mov.b     #0x2d, w1
    3418:	01 48 78    	mov.b     w1, [w0]
    341a:	1e 0f e8    	inc.w     [w14], [w14]

0000341c <.L56>:
    *ptr-- = '\0';
    341c:	1e 00 78    	mov.w     [w14], w0
    341e:	80 40 eb    	clr.b     w1
    3420:	01 48 78    	mov.b     w1, [w0]
    3422:	1e 0f e9    	dec.w     [w14], [w14]
    while (ptr1 < ptr) {
    3424:	0e 00 37    	bra       0x3442 <.L57>

00003426 <.L58>:
        tmp_char = *ptr;
    3426:	1e 00 78    	mov.w     [w14], w0
    3428:	90 40 78    	mov.b     [w0], w1
    342a:	61 47 98    	mov.b     w1, [w14+6]
        *ptr--= *ptr1;
    342c:	1e 00 90    	mov.w     [w14+2], w0
    342e:	90 40 78    	mov.b     [w0], w1
    3430:	1e 00 78    	mov.w     [w14], w0
    3432:	01 48 78    	mov.b     w1, [w0]
    3434:	1e 0f e9    	dec.w     [w14], [w14]
        *ptr1++ = tmp_char;
    3436:	1e 00 90    	mov.w     [w14+2], w0
    3438:	6e 41 90    	mov.b     [w14+6], w2
    343a:	02 48 78    	mov.b     w2, [w0]
    343c:	1e 00 90    	mov.w     [w14+2], w0
    343e:	00 00 e8    	inc.w     w0, w0
    3440:	10 07 98    	mov.w     w0, [w14+2]

00003442 <.L57>:
    3442:	1e 00 90    	mov.w     [w14+2], w0
    3444:	9e 0f 50    	sub.w     w0, [w14], [w15]
    3446:	ef ff 39    	bra       NC, 0x3426 <.L58>
    }
    return result;
    3448:	5e 00 90    	mov.w     [w14+10], w0

0000344a <.L54>:
}
    344a:	00 80 fa    	ulnk      
    344c:	00 00 06    	return    

0000344e <_delay_by_nop>:
    344e:	08 00 fa    	lnk       #0x8
    3450:	20 07 98    	mov.w     w0, [w14+4]
    3452:	31 07 98    	mov.w     w1, [w14+6]
    3454:	60 00 b8    	mul.uu    w0, #0x0, w0
    3456:	00 8f be    	mov.d     w0, [w14]
    3458:	05 00 37    	bra       0x3464 <.L2>

0000345a <.L3>:
    345a:	00 00 00    	nop       
    345c:	12 00 20    	mov.w     #0x1, w2
    345e:	03 00 20    	mov.w     #0x0, w3
    3460:	1e 0f 41    	add.w     w2, [w14], [w14]
    3462:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00003464 <.L2>:
    3464:	2e 00 90    	mov.w     [w14+4], w0
    3466:	be 00 90    	mov.w     [w14+6], w1
    3468:	1e 01 be    	mov.d     [w14], w2
    346a:	80 0f 51    	sub.w     w2, w0, [w15]
    346c:	81 8f 59    	subb.w    w3, w1, [w15]
    346e:	f5 ff 39    	bra       NC, 0x345a <.L3>
    3470:	00 80 fa    	ulnk      
    3472:	00 00 06    	return    

00003474 <_i2c_init>:
    3474:	04 00 fa    	lnk       #0x4
    3476:	10 07 98    	mov.w     w0, [w14+2]
    3478:	1e 00 90    	mov.w     [w14+2], w0
    347a:	a0 13 88    	mov.w     w0, 0x274
    347c:	77 e2 a9    	bclr.b    0x277, #0x7
    347e:	77 22 a8    	bset.b    0x277, #0x1
    3480:	8e a0 a9    	bclr.b    0x8e, #0x5
    3482:	77 e2 a8    	bset.b    0x277, #0x7
    3484:	80 13 80    	mov.w     0x270, w0
    3486:	00 0f 78    	mov.w     w0, [w14]
    3488:	36 00 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
    348a:	00 80 fa    	ulnk      
    348c:	00 00 06    	return    

0000348e <_i2c_start>:
    348e:	02 00 fa    	lnk       #0x2
    3490:	00 00 eb    	clr.w     w0
    3492:	00 0f 78    	mov.w     w0, [w14]
    3494:	76 a2 a9    	bclr.b    0x276, #0x5
    3496:	a0 00 20    	mov.w     #0xa, w0
    3498:	01 00 20    	mov.w     #0x0, w1
    349a:	d9 ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    349c:	76 02 a8    	bset.b    0x276, #0x0
    349e:	00 00 00    	nop       
    34a0:	07 00 37    	bra       0x34b0 <.L6>

000034a2 <.L8>:
    34a2:	10 00 20    	mov.w     #0x1, w0
    34a4:	01 00 20    	mov.w     #0x0, w1
    34a6:	d3 ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    34a8:	1e 0f e8    	inc.w     [w14], [w14]
    34aa:	1e 00 78    	mov.w     [w14], w0
    34ac:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    34ae:	05 00 3c    	bra       GT, 0x34ba <.L9>

000034b0 <.L6>:
    34b0:	b0 13 80    	mov.w     0x276, w0
    34b2:	61 00 60    	and.w     w0, #0x1, w0
    34b4:	00 00 e0    	cp0.w     w0
    34b6:	f5 ff 3a    	bra       NZ, 0x34a2 <.L8>
    34b8:	01 00 37    	bra       0x34bc <.L7>

000034ba <.L9>:
    34ba:	00 00 00    	nop       

000034bc <.L7>:
    34bc:	20 00 20    	mov.w     #0x2, w0
    34be:	01 00 20    	mov.w     #0x0, w1
    34c0:	c6 ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    34c2:	00 80 fa    	ulnk      
    34c4:	00 00 06    	return    

000034c6 <_i2c_restart>:
    34c6:	02 00 fa    	lnk       #0x2
    34c8:	00 00 eb    	clr.w     w0
    34ca:	00 0f 78    	mov.w     w0, [w14]
    34cc:	76 22 a8    	bset.b    0x276, #0x1
    34ce:	00 00 00    	nop       
    34d0:	07 00 37    	bra       0x34e0 <.L11>

000034d2 <.L13>:
    34d2:	10 00 20    	mov.w     #0x1, w0
    34d4:	01 00 20    	mov.w     #0x0, w1
    34d6:	bb ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    34d8:	1e 0f e8    	inc.w     [w14], [w14]
    34da:	1e 00 78    	mov.w     [w14], w0
    34dc:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    34de:	05 00 3c    	bra       GT, 0x34ea <.L14>

000034e0 <.L11>:
    34e0:	b0 13 80    	mov.w     0x276, w0
    34e2:	62 00 60    	and.w     w0, #0x2, w0
    34e4:	00 00 e0    	cp0.w     w0
    34e6:	f5 ff 3a    	bra       NZ, 0x34d2 <.L13>
    34e8:	01 00 37    	bra       0x34ec <.L12>

000034ea <.L14>:
    34ea:	00 00 00    	nop       

000034ec <.L12>:
    34ec:	20 00 20    	mov.w     #0x2, w0
    34ee:	01 00 20    	mov.w     #0x0, w1
    34f0:	ae ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    34f2:	00 80 fa    	ulnk      
    34f4:	00 00 06    	return    

000034f6 <_reset_i2c_bus>:
    34f6:	02 00 fa    	lnk       #0x2
    34f8:	00 00 eb    	clr.w     w0
    34fa:	00 0f 78    	mov.w     w0, [w14]
    34fc:	76 42 a8    	bset.b    0x276, #0x2
    34fe:	07 00 37    	bra       0x350e <.L16>

00003500 <.L18>:
    3500:	10 00 20    	mov.w     #0x1, w0
    3502:	01 00 20    	mov.w     #0x0, w1
    3504:	a4 ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3506:	1e 0f e8    	inc.w     [w14], [w14]
    3508:	1e 00 78    	mov.w     [w14], w0
    350a:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    350c:	05 00 3c    	bra       GT, 0x3518 <.L19>

0000350e <.L16>:
    350e:	b0 13 80    	mov.w     0x276, w0
    3510:	64 00 60    	and.w     w0, #0x4, w0
    3512:	00 00 e0    	cp0.w     w0
    3514:	f5 ff 3a    	bra       NZ, 0x3500 <.L18>
    3516:	01 00 37    	bra       0x351a <.L17>

00003518 <.L19>:
    3518:	00 00 00    	nop       

0000351a <.L17>:
    351a:	76 62 a9    	bclr.b    0x276, #0x3
    351c:	8e a0 a9    	bclr.b    0x8e, #0x5
    351e:	78 e2 a9    	bclr.b    0x278, #0x7
    3520:	79 42 a9    	bclr.b    0x279, #0x2
    3522:	40 01 20    	mov.w     #0x14, w0
    3524:	01 00 20    	mov.w     #0x0, w1
    3526:	93 ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3528:	00 80 fa    	ulnk      
    352a:	00 00 06    	return    

0000352c <_send_i2c_byte>:
    352c:	04 00 fa    	lnk       #0x4
    352e:	10 07 98    	mov.w     w0, [w14+2]
    3530:	00 00 00    	nop       

00003532 <.L21>:
    3532:	c0 13 80    	mov.w     0x278, w0
    3534:	61 00 60    	and.w     w0, #0x1, w0
    3536:	00 00 e0    	cp0.w     w0
    3538:	fc ff 3a    	bra       NZ, 0x3532 <.L21>
    353a:	8e a0 a9    	bclr.b    0x8e, #0x5
    353c:	1e 00 90    	mov.w     [w14+2], w0
    353e:	90 13 88    	mov.w     w0, 0x272
    3540:	00 00 eb    	clr.w     w0
    3542:	00 0f 78    	mov.w     w0, [w14]
    3544:	09 00 37    	bra       0x3558 <.L22>

00003546 <.L25>:
    3546:	c1 13 80    	mov.w     0x278, w1
    3548:	00 00 24    	mov.w     #0x4000, w0
    354a:	00 80 60    	and.w     w1, w0, w0
    354c:	00 00 e0    	cp0.w     w0
    354e:	09 00 32    	bra       Z, 0x3562 <.L29>
    3550:	10 00 20    	mov.w     #0x1, w0
    3552:	01 00 20    	mov.w     #0x0, w1
    3554:	7c ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3556:	1e 0f e8    	inc.w     [w14], [w14]

00003558 <.L22>:
    3558:	30 1f 20    	mov.w     #0x1f3, w0
    355a:	9e 00 78    	mov.w     [w14], w1
    355c:	80 8f 50    	sub.w     w1, w0, [w15]
    355e:	f3 ff 34    	bra       LE, 0x3546 <.L25>
    3560:	01 00 37    	bra       0x3564 <.L24>

00003562 <.L29>:
    3562:	00 00 00    	nop       

00003564 <.L24>:
    3564:	40 1f 20    	mov.w     #0x1f4, w0
    3566:	9e 00 78    	mov.w     [w14], w1
    3568:	80 8f 50    	sub.w     w1, w0, [w15]
    356a:	02 00 3a    	bra       NZ, 0x3570 <.L26>
    356c:	10 c0 b3    	mov.b     #0x1, w0
    356e:	0c 00 37    	bra       0x3588 <.L27>

00003570 <.L26>:
    3570:	c1 13 80    	mov.w     0x278, w1
    3572:	00 00 28    	mov.w     #0x8000, w0
    3574:	00 80 60    	and.w     w1, w0, w0
    3576:	00 00 e0    	cp0.w     w0
    3578:	03 00 32    	bra       Z, 0x3580 <.L28>
    357a:	bd ff 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
    357c:	10 c0 b3    	mov.b     #0x1, w0
    357e:	04 00 37    	bra       0x3588 <.L27>

00003580 <.L28>:
    3580:	20 00 20    	mov.w     #0x2, w0
    3582:	01 00 20    	mov.w     #0x0, w1
    3584:	64 ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3586:	00 40 eb    	clr.b     w0

00003588 <.L27>:
    3588:	00 80 fa    	ulnk      
    358a:	00 00 06    	return    

0000358c <_i2c_read>:
    358c:	04 00 fa    	lnk       #0x4
    358e:	00 00 eb    	clr.w     w0
    3590:	00 0f 78    	mov.w     w0, [w14]
    3592:	00 40 eb    	clr.b     w0
    3594:	20 47 98    	mov.b     w0, [w14+2]
    3596:	76 62 a8    	bset.b    0x276, #0x3
    3598:	05 00 37    	bra       0x35a4 <.L31>

0000359a <.L33>:
    359a:	1e 0f e8    	inc.w     [w14], [w14]
    359c:	00 7d 20    	mov.w     #0x7d0, w0
    359e:	9e 00 78    	mov.w     [w14], w1
    35a0:	80 8f 50    	sub.w     w1, w0, [w15]
    35a2:	05 00 3c    	bra       GT, 0x35ae <.L34>

000035a4 <.L31>:
    35a4:	c0 13 80    	mov.w     0x278, w0
    35a6:	62 00 60    	and.w     w0, #0x2, w0
    35a8:	00 00 e0    	cp0.w     w0
    35aa:	f7 ff 32    	bra       Z, 0x359a <.L33>
    35ac:	01 00 37    	bra       0x35b0 <.L32>

000035ae <.L34>:
    35ae:	00 00 00    	nop       

000035b0 <.L32>:
    35b0:	80 13 80    	mov.w     0x270, w0
    35b2:	20 47 98    	mov.b     w0, [w14+2]
    35b4:	2e 40 90    	mov.b     [w14+2], w0
    35b6:	00 80 fa    	ulnk      
    35b8:	00 00 06    	return    

000035ba <_i2c_read_ack>:
    35ba:	04 00 fa    	lnk       #0x4
    35bc:	00 00 eb    	clr.w     w0
    35be:	00 0f 78    	mov.w     w0, [w14]
    35c0:	00 40 eb    	clr.b     w0
    35c2:	20 47 98    	mov.b     w0, [w14+2]
    35c4:	76 62 a8    	bset.b    0x276, #0x3
    35c6:	05 00 37    	bra       0x35d2 <.L36>

000035c8 <.L38>:
    35c8:	1e 0f e8    	inc.w     [w14], [w14]
    35ca:	00 7d 20    	mov.w     #0x7d0, w0
    35cc:	9e 00 78    	mov.w     [w14], w1
    35ce:	80 8f 50    	sub.w     w1, w0, [w15]
    35d0:	05 00 3c    	bra       GT, 0x35dc <.L39>

000035d2 <.L36>:
    35d2:	c0 13 80    	mov.w     0x278, w0
    35d4:	62 00 60    	and.w     w0, #0x2, w0
    35d6:	00 00 e0    	cp0.w     w0
    35d8:	f7 ff 32    	bra       Z, 0x35c8 <.L38>
    35da:	01 00 37    	bra       0x35de <.L37>

000035dc <.L39>:
    35dc:	00 00 00    	nop       

000035de <.L37>:
    35de:	80 13 80    	mov.w     0x270, w0
    35e0:	20 47 98    	mov.b     w0, [w14+2]
    35e2:	76 82 a8    	bset.b    0x276, #0x4
    35e4:	a0 00 20    	mov.w     #0xa, w0
    35e6:	01 00 20    	mov.w     #0x0, w1
    35e8:	32 ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    35ea:	2e 40 90    	mov.b     [w14+2], w0
    35ec:	00 80 fa    	ulnk      
    35ee:	00 00 06    	return    

000035f0 <_i2c_read_nack>:
    35f0:	04 00 fa    	lnk       #0x4
    35f2:	00 00 eb    	clr.w     w0
    35f4:	00 0f 78    	mov.w     w0, [w14]
    35f6:	00 40 eb    	clr.b     w0
    35f8:	20 47 98    	mov.b     w0, [w14+2]
    35fa:	76 62 a8    	bset.b    0x276, #0x3
    35fc:	05 00 37    	bra       0x3608 <.L41>

000035fe <.L43>:
    35fe:	1e 0f e8    	inc.w     [w14], [w14]
    3600:	00 7d 20    	mov.w     #0x7d0, w0
    3602:	9e 00 78    	mov.w     [w14], w1
    3604:	80 8f 50    	sub.w     w1, w0, [w15]
    3606:	05 00 3c    	bra       GT, 0x3612 <.L44>

00003608 <.L41>:
    3608:	c0 13 80    	mov.w     0x278, w0
    360a:	62 00 60    	and.w     w0, #0x2, w0
    360c:	00 00 e0    	cp0.w     w0
    360e:	f7 ff 32    	bra       Z, 0x35fe <.L43>
    3610:	01 00 37    	bra       0x3614 <.L42>

00003612 <.L44>:
    3612:	00 00 00    	nop       

00003614 <.L42>:
    3614:	80 13 80    	mov.w     0x270, w0
    3616:	20 47 98    	mov.b     w0, [w14+2]
    3618:	76 a2 a8    	bset.b    0x276, #0x5
    361a:	76 82 a8    	bset.b    0x276, #0x4
    361c:	a0 00 20    	mov.w     #0xa, w0
    361e:	01 00 20    	mov.w     #0x0, w1
    3620:	16 ff 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3622:	2e 40 90    	mov.b     [w14+2], w0
    3624:	00 80 fa    	ulnk      
    3626:	00 00 06    	return    

00003628 <_I2Cwrite>:
    3628:	04 00 fa    	lnk       #0x4
    362a:	00 4f 78    	mov.b     w0, [w14]
    362c:	11 47 98    	mov.b     w1, [w14+1]
    362e:	22 47 98    	mov.b     w2, [w14+2]
    3630:	2e ff 07    	rcall     0x348e <_i2c_start> <.LFB2> <.LFE1>
    3632:	1e 00 fb    	se        [w14], w0
    3634:	80 00 78    	mov.w     w0, w1
    3636:	e0 ff 2f    	mov.w     #0xfffe, w0
    3638:	00 80 60    	and.w     w1, w0, w0
    363a:	78 ff 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    363c:	1e 40 90    	mov.b     [w14+1], w0
    363e:	00 00 fb    	se        w0, w0
    3640:	75 ff 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    3642:	2e 40 90    	mov.b     [w14+2], w0
    3644:	00 00 fb    	se        w0, w0
    3646:	72 ff 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    3648:	56 ff 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
    364a:	00 80 fa    	ulnk      
    364c:	00 00 06    	return    

0000364e <_I2Cread>:
    364e:	04 00 fa    	lnk       #0x4
    3650:	20 47 98    	mov.b     w0, [w14+2]
    3652:	31 47 98    	mov.b     w1, [w14+3]
    3654:	1c ff 07    	rcall     0x348e <_i2c_start> <.LFB2> <.LFE1>
    3656:	2e 40 90    	mov.b     [w14+2], w0
    3658:	00 00 fb    	se        w0, w0
    365a:	68 ff 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    365c:	3e 40 90    	mov.b     [w14+3], w0
    365e:	00 00 fb    	se        w0, w0
    3660:	65 ff 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    3662:	a0 00 20    	mov.w     #0xa, w0
    3664:	01 00 20    	mov.w     #0x0, w1
    3666:	f3 fe 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3668:	2e ff 07    	rcall     0x34c6 <_i2c_restart> <.LFB3> <.LFE2>
    366a:	2e 40 90    	mov.b     [w14+2], w0
    366c:	00 04 a0    	bset.b    w0, #0x0
    366e:	00 00 fb    	se        w0, w0
    3670:	5d ff 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    3672:	8c ff 07    	rcall     0x358c <_i2c_read> <.LFB6> <.LFE5>
    3674:	00 4f 78    	mov.b     w0, [w14]
    3676:	3f ff 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
    3678:	1e 40 78    	mov.b     [w14], w0
    367a:	00 80 fa    	ulnk      
    367c:	00 00 06    	return    

0000367e <_I2Cpoll>:
    367e:	04 00 fa    	lnk       #0x4
    3680:	20 47 98    	mov.b     w0, [w14+2]
    3682:	00 40 eb    	clr.b     w0
    3684:	00 4f 78    	mov.b     w0, [w14]
    3686:	03 ff 07    	rcall     0x348e <_i2c_start> <.LFB2> <.LFE1>
    3688:	2e 40 90    	mov.b     [w14+2], w0
    368a:	00 00 fb    	se        w0, w0
    368c:	80 00 78    	mov.w     w0, w1
    368e:	e0 ff 2f    	mov.w     #0xfffe, w0
    3690:	00 80 60    	and.w     w1, w0, w0
    3692:	4c ff 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    3694:	00 4f 78    	mov.b     w0, [w14]
    3696:	2f ff 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
    3698:	1e 40 78    	mov.b     [w14], w0
    369a:	00 04 e0    	cp0.b     w0
    369c:	02 00 3a    	bra       NZ, 0x36a2 <.L48>
    369e:	10 c0 b3    	mov.b     #0x1, w0
    36a0:	01 00 37    	bra       0x36a4 <.L49>

000036a2 <.L48>:
    36a2:	00 40 eb    	clr.b     w0

000036a4 <.L49>:
    36a4:	00 80 fa    	ulnk      
    36a6:	00 00 06    	return    

000036a8 <_I2Cwritearray>:
    36a8:	08 00 fa    	lnk       #0x8
    36aa:	20 47 98    	mov.b     w0, [w14+2]
    36ac:	21 07 98    	mov.w     w1, [w14+4]
    36ae:	62 47 98    	mov.b     w2, [w14+6]
    36b0:	00 40 eb    	clr.b     w0
    36b2:	00 4f 78    	mov.b     w0, [w14]
    36b4:	ec fe 07    	rcall     0x348e <_i2c_start> <.LFB2> <.LFE1>
    36b6:	2e 40 90    	mov.b     [w14+2], w0
    36b8:	00 00 fb    	se        w0, w0
    36ba:	80 00 78    	mov.w     w0, w1
    36bc:	e0 ff 2f    	mov.w     #0xfffe, w0
    36be:	00 80 60    	and.w     w1, w0, w0
    36c0:	35 ff 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    36c2:	00 4f 78    	mov.b     w0, [w14]
    36c4:	00 40 eb    	clr.b     w0
    36c6:	10 47 98    	mov.b     w0, [w14+1]
    36c8:	0d 00 37    	bra       0x36e4 <.L51>

000036ca <.L52>:
    36ca:	1e 40 90    	mov.b     [w14+1], w0
    36cc:	00 80 fb    	ze        w0, w0
    36ce:	ae 00 90    	mov.w     [w14+4], w1
    36d0:	00 80 40    	add.w     w1, w0, w0
    36d2:	10 40 78    	mov.b     [w0], w0
    36d4:	00 00 fb    	se        w0, w0
    36d6:	2a ff 07    	rcall     0x352c <_send_i2c_byte> <.LFB5> <.LFE4>
    36d8:	9e 40 78    	mov.b     [w14], w1
    36da:	01 40 70    	ior.b     w0, w1, w0
    36dc:	00 4f 78    	mov.b     w0, [w14]
    36de:	1e 40 90    	mov.b     [w14+1], w0
    36e0:	00 40 e8    	inc.b     w0, w0
    36e2:	10 47 98    	mov.b     w0, [w14+1]

000036e4 <.L51>:
    36e4:	9e 40 90    	mov.b     [w14+1], w1
    36e6:	6e 40 90    	mov.b     [w14+6], w0
    36e8:	80 cf 50    	sub.b     w1, w0, [w15]
    36ea:	ef ff 39    	bra       NC, 0x36ca <.L52>
    36ec:	04 ff 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
    36ee:	1e 40 78    	mov.b     [w14], w0
    36f0:	00 80 fa    	ulnk      
    36f2:	00 00 06    	return    

000036f4 <_i2c2_init>:
    36f4:	04 00 fa    	lnk       #0x4
    36f6:	10 07 98    	mov.w     w0, [w14+2]
    36f8:	1e 00 90    	mov.w     [w14+2], w0
    36fa:	a0 10 88    	mov.w     w0, 0x214
    36fc:	17 e2 a9    	bclr.b    0x217, #0x7
    36fe:	17 22 a8    	bset.b    0x217, #0x1
    3700:	8a 40 a9    	bclr.b    0x8a, #0x2
    3702:	17 e2 a8    	bset.b    0x217, #0x7
    3704:	80 10 80    	mov.w     0x210, w0
    3706:	00 0f 78    	mov.w     w0, [w14]
    3708:	f6 fe 07    	rcall     0x34f6 <_reset_i2c_bus> <.LFB4> <.LFE3>
    370a:	00 80 fa    	ulnk      
    370c:	00 00 06    	return    

0000370e <_i2c2_start>:
    370e:	02 00 fa    	lnk       #0x2
    3710:	00 00 eb    	clr.w     w0
    3712:	00 0f 78    	mov.w     w0, [w14]
    3714:	16 a2 a9    	bclr.b    0x216, #0x5
    3716:	a0 00 20    	mov.w     #0xa, w0
    3718:	01 00 20    	mov.w     #0x0, w1
    371a:	99 fe 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    371c:	16 02 a8    	bset.b    0x216, #0x0
    371e:	00 00 00    	nop       
    3720:	07 00 37    	bra       0x3730 <.L55>

00003722 <.L57>:
    3722:	10 00 20    	mov.w     #0x1, w0
    3724:	01 00 20    	mov.w     #0x0, w1
    3726:	93 fe 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3728:	1e 0f e8    	inc.w     [w14], [w14]
    372a:	1e 00 78    	mov.w     [w14], w0
    372c:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    372e:	05 00 3c    	bra       GT, 0x373a <.L58>

00003730 <.L55>:
    3730:	b0 10 80    	mov.w     0x216, w0
    3732:	61 00 60    	and.w     w0, #0x1, w0
    3734:	00 00 e0    	cp0.w     w0
    3736:	f5 ff 3a    	bra       NZ, 0x3722 <.L57>
    3738:	01 00 37    	bra       0x373c <.L56>

0000373a <.L58>:
    373a:	00 00 00    	nop       

0000373c <.L56>:
    373c:	20 00 20    	mov.w     #0x2, w0
    373e:	01 00 20    	mov.w     #0x0, w1
    3740:	86 fe 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3742:	00 80 fa    	ulnk      
    3744:	00 00 06    	return    

00003746 <_i2c2_restart>:
    3746:	02 00 fa    	lnk       #0x2
    3748:	00 00 eb    	clr.w     w0
    374a:	00 0f 78    	mov.w     w0, [w14]
    374c:	16 22 a8    	bset.b    0x216, #0x1
    374e:	00 00 00    	nop       
    3750:	07 00 37    	bra       0x3760 <.L60>

00003752 <.L62>:
    3752:	10 00 20    	mov.w     #0x1, w0
    3754:	01 00 20    	mov.w     #0x0, w1
    3756:	7b fe 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3758:	1e 0f e8    	inc.w     [w14], [w14]
    375a:	1e 00 78    	mov.w     [w14], w0
    375c:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    375e:	05 00 3c    	bra       GT, 0x376a <.L63>

00003760 <.L60>:
    3760:	b0 10 80    	mov.w     0x216, w0
    3762:	62 00 60    	and.w     w0, #0x2, w0
    3764:	00 00 e0    	cp0.w     w0
    3766:	f5 ff 3a    	bra       NZ, 0x3752 <.L62>
    3768:	01 00 37    	bra       0x376c <.L61>

0000376a <.L63>:
    376a:	00 00 00    	nop       

0000376c <.L61>:
    376c:	20 00 20    	mov.w     #0x2, w0
    376e:	01 00 20    	mov.w     #0x0, w1
    3770:	6e fe 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3772:	00 80 fa    	ulnk      
    3774:	00 00 06    	return    

00003776 <_reset_i2c2_bus>:
    3776:	02 00 fa    	lnk       #0x2
    3778:	00 00 eb    	clr.w     w0
    377a:	00 0f 78    	mov.w     w0, [w14]
    377c:	16 42 a8    	bset.b    0x216, #0x2
    377e:	07 00 37    	bra       0x378e <.L65>

00003780 <.L67>:
    3780:	10 00 20    	mov.w     #0x1, w0
    3782:	01 00 20    	mov.w     #0x0, w1
    3784:	64 fe 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3786:	1e 0f e8    	inc.w     [w14], [w14]
    3788:	1e 00 78    	mov.w     [w14], w0
    378a:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    378c:	05 00 3c    	bra       GT, 0x3798 <.L68>

0000378e <.L65>:
    378e:	b0 10 80    	mov.w     0x216, w0
    3790:	64 00 60    	and.w     w0, #0x4, w0
    3792:	00 00 e0    	cp0.w     w0
    3794:	f5 ff 3a    	bra       NZ, 0x3780 <.L67>
    3796:	01 00 37    	bra       0x379a <.L66>

00003798 <.L68>:
    3798:	00 00 00    	nop       

0000379a <.L66>:
    379a:	16 62 a9    	bclr.b    0x216, #0x3
    379c:	8a 40 a9    	bclr.b    0x8a, #0x2
    379e:	18 e2 a9    	bclr.b    0x218, #0x7
    37a0:	19 42 a9    	bclr.b    0x219, #0x2
    37a2:	40 01 20    	mov.w     #0x14, w0
    37a4:	01 00 20    	mov.w     #0x0, w1
    37a6:	53 fe 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    37a8:	00 80 fa    	ulnk      
    37aa:	00 00 06    	return    

000037ac <_send_i2c2_byte>:
    37ac:	04 00 fa    	lnk       #0x4
    37ae:	10 07 98    	mov.w     w0, [w14+2]
    37b0:	00 00 00    	nop       

000037b2 <.L70>:
    37b2:	c0 10 80    	mov.w     0x218, w0
    37b4:	61 00 60    	and.w     w0, #0x1, w0
    37b6:	00 00 e0    	cp0.w     w0
    37b8:	fc ff 3a    	bra       NZ, 0x37b2 <.L70>
    37ba:	8a 40 a9    	bclr.b    0x8a, #0x2
    37bc:	1e 00 90    	mov.w     [w14+2], w0
    37be:	90 10 88    	mov.w     w0, 0x212
    37c0:	00 00 eb    	clr.w     w0
    37c2:	00 0f 78    	mov.w     w0, [w14]
    37c4:	09 00 37    	bra       0x37d8 <.L71>

000037c6 <.L74>:
    37c6:	c1 10 80    	mov.w     0x218, w1
    37c8:	00 00 24    	mov.w     #0x4000, w0
    37ca:	00 80 60    	and.w     w1, w0, w0
    37cc:	00 00 e0    	cp0.w     w0
    37ce:	09 00 32    	bra       Z, 0x37e2 <.L78>
    37d0:	10 00 20    	mov.w     #0x1, w0
    37d2:	01 00 20    	mov.w     #0x0, w1
    37d4:	3c fe 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    37d6:	1e 0f e8    	inc.w     [w14], [w14]

000037d8 <.L71>:
    37d8:	30 1f 20    	mov.w     #0x1f3, w0
    37da:	9e 00 78    	mov.w     [w14], w1
    37dc:	80 8f 50    	sub.w     w1, w0, [w15]
    37de:	f3 ff 34    	bra       LE, 0x37c6 <.L74>
    37e0:	01 00 37    	bra       0x37e4 <.L73>

000037e2 <.L78>:
    37e2:	00 00 00    	nop       

000037e4 <.L73>:
    37e4:	40 1f 20    	mov.w     #0x1f4, w0
    37e6:	9e 00 78    	mov.w     [w14], w1
    37e8:	80 8f 50    	sub.w     w1, w0, [w15]
    37ea:	02 00 3a    	bra       NZ, 0x37f0 <.L75>
    37ec:	10 c0 b3    	mov.b     #0x1, w0
    37ee:	0c 00 37    	bra       0x3808 <.L76>

000037f0 <.L75>:
    37f0:	c1 10 80    	mov.w     0x218, w1
    37f2:	00 00 28    	mov.w     #0x8000, w0
    37f4:	00 80 60    	and.w     w1, w0, w0
    37f6:	00 00 e0    	cp0.w     w0
    37f8:	03 00 32    	bra       Z, 0x3800 <.L77>
    37fa:	bd ff 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>
    37fc:	10 c0 b3    	mov.b     #0x1, w0
    37fe:	04 00 37    	bra       0x3808 <.L76>

00003800 <.L77>:
    3800:	20 00 20    	mov.w     #0x2, w0
    3802:	01 00 20    	mov.w     #0x0, w1
    3804:	24 fe 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3806:	00 40 eb    	clr.b     w0

00003808 <.L76>:
    3808:	00 80 fa    	ulnk      
    380a:	00 00 06    	return    

0000380c <_i2c2_read>:
    380c:	04 00 fa    	lnk       #0x4
    380e:	00 00 eb    	clr.w     w0
    3810:	00 0f 78    	mov.w     w0, [w14]
    3812:	00 40 eb    	clr.b     w0
    3814:	20 47 98    	mov.b     w0, [w14+2]
    3816:	16 62 a8    	bset.b    0x216, #0x3
    3818:	05 00 37    	bra       0x3824 <.L80>

0000381a <.L82>:
    381a:	1e 0f e8    	inc.w     [w14], [w14]
    381c:	00 7d 20    	mov.w     #0x7d0, w0
    381e:	9e 00 78    	mov.w     [w14], w1
    3820:	80 8f 50    	sub.w     w1, w0, [w15]
    3822:	05 00 3c    	bra       GT, 0x382e <.L83>

00003824 <.L80>:
    3824:	c0 10 80    	mov.w     0x218, w0
    3826:	62 00 60    	and.w     w0, #0x2, w0
    3828:	00 00 e0    	cp0.w     w0
    382a:	f7 ff 32    	bra       Z, 0x381a <.L82>
    382c:	01 00 37    	bra       0x3830 <.L81>

0000382e <.L83>:
    382e:	00 00 00    	nop       

00003830 <.L81>:
    3830:	80 10 80    	mov.w     0x210, w0
    3832:	20 47 98    	mov.b     w0, [w14+2]
    3834:	2e 40 90    	mov.b     [w14+2], w0
    3836:	00 80 fa    	ulnk      
    3838:	00 00 06    	return    

0000383a <_i2c2_read_ack>:
    383a:	04 00 fa    	lnk       #0x4
    383c:	00 00 eb    	clr.w     w0
    383e:	00 0f 78    	mov.w     w0, [w14]
    3840:	00 40 eb    	clr.b     w0
    3842:	20 47 98    	mov.b     w0, [w14+2]
    3844:	16 62 a8    	bset.b    0x216, #0x3
    3846:	05 00 37    	bra       0x3852 <.L85>

00003848 <.L87>:
    3848:	1e 0f e8    	inc.w     [w14], [w14]
    384a:	00 7d 20    	mov.w     #0x7d0, w0
    384c:	9e 00 78    	mov.w     [w14], w1
    384e:	80 8f 50    	sub.w     w1, w0, [w15]
    3850:	05 00 3c    	bra       GT, 0x385c <.L88>

00003852 <.L85>:
    3852:	c0 10 80    	mov.w     0x218, w0
    3854:	62 00 60    	and.w     w0, #0x2, w0
    3856:	00 00 e0    	cp0.w     w0
    3858:	f7 ff 32    	bra       Z, 0x3848 <.L87>
    385a:	01 00 37    	bra       0x385e <.L86>

0000385c <.L88>:
    385c:	00 00 00    	nop       

0000385e <.L86>:
    385e:	80 10 80    	mov.w     0x210, w0
    3860:	20 47 98    	mov.b     w0, [w14+2]
    3862:	16 82 a8    	bset.b    0x216, #0x4
    3864:	a0 00 20    	mov.w     #0xa, w0
    3866:	01 00 20    	mov.w     #0x0, w1
    3868:	f2 fd 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    386a:	2e 40 90    	mov.b     [w14+2], w0
    386c:	00 80 fa    	ulnk      
    386e:	00 00 06    	return    

00003870 <_i2c2_read_nack>:
    3870:	04 00 fa    	lnk       #0x4
    3872:	00 00 eb    	clr.w     w0
    3874:	00 0f 78    	mov.w     w0, [w14]
    3876:	00 40 eb    	clr.b     w0
    3878:	20 47 98    	mov.b     w0, [w14+2]
    387a:	16 62 a8    	bset.b    0x216, #0x3
    387c:	05 00 37    	bra       0x3888 <.L90>

0000387e <.L92>:
    387e:	1e 0f e8    	inc.w     [w14], [w14]
    3880:	00 7d 20    	mov.w     #0x7d0, w0
    3882:	9e 00 78    	mov.w     [w14], w1
    3884:	80 8f 50    	sub.w     w1, w0, [w15]
    3886:	05 00 3c    	bra       GT, 0x3892 <.L93>

00003888 <.L90>:
    3888:	c0 10 80    	mov.w     0x218, w0
    388a:	62 00 60    	and.w     w0, #0x2, w0
    388c:	00 00 e0    	cp0.w     w0
    388e:	f7 ff 32    	bra       Z, 0x387e <.L92>
    3890:	01 00 37    	bra       0x3894 <.L91>

00003892 <.L93>:
    3892:	00 00 00    	nop       

00003894 <.L91>:
    3894:	80 10 80    	mov.w     0x210, w0
    3896:	20 47 98    	mov.b     w0, [w14+2]
    3898:	16 a2 a8    	bset.b    0x216, #0x5
    389a:	16 82 a8    	bset.b    0x216, #0x4
    389c:	a0 00 20    	mov.w     #0xa, w0
    389e:	01 00 20    	mov.w     #0x0, w1
    38a0:	d6 fd 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    38a2:	2e 40 90    	mov.b     [w14+2], w0
    38a4:	00 80 fa    	ulnk      
    38a6:	00 00 06    	return    

000038a8 <_I2C2poll>:
    38a8:	04 00 fa    	lnk       #0x4
    38aa:	20 47 98    	mov.b     w0, [w14+2]
    38ac:	00 40 eb    	clr.b     w0
    38ae:	00 4f 78    	mov.b     w0, [w14]
    38b0:	2e ff 07    	rcall     0x370e <_i2c2_start> <.LFB14> <.LFE13>
    38b2:	2e 40 90    	mov.b     [w14+2], w0
    38b4:	00 00 fb    	se        w0, w0
    38b6:	80 00 78    	mov.w     w0, w1
    38b8:	e0 ff 2f    	mov.w     #0xfffe, w0
    38ba:	00 80 60    	and.w     w1, w0, w0
    38bc:	77 ff 07    	rcall     0x37ac <_send_i2c2_byte> <.LFB17> <.LFE16>
    38be:	00 4f 78    	mov.b     w0, [w14]
    38c0:	5a ff 07    	rcall     0x3776 <_reset_i2c2_bus> <.LFB16> <.LFE15>
    38c2:	1e 40 78    	mov.b     [w14], w0
    38c4:	00 04 e0    	cp0.b     w0
    38c6:	02 00 3a    	bra       NZ, 0x38cc <.L95>
    38c8:	10 c0 b3    	mov.b     #0x1, w0
    38ca:	01 00 37    	bra       0x38ce <.L96>

000038cc <.L95>:
    38cc:	00 40 eb    	clr.b     w0

000038ce <.L96>:
    38ce:	00 80 fa    	ulnk      
    38d0:	00 00 06    	return    

000038d2 <_init_ajuart>:
uint8_t U1TXbuffer[U1_TX_BUFFER_LENGTH];
uint8_t U1RXbuffer[U1_RX_BUFFER_LENGTH];
uint16_t U1_tx_threshold;

void init_ajuart(void) {
    38d2:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure audio jack UART pins and connect them to UART1
    AJ_TX_DIR = OUT; AJ_TX = 1;
    38d4:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    38d6:	f2 c2 a8    	bset.b    0x2f2, #0x6
    AJ_RX_DIR = IN;
    38d8:	f0 e2 a8    	bset.b    0x2f0, #0x7

    RPOR = (uint8_t *)&RPOR0;
    38da:	00 6c 20    	mov.w     #0x6c0, w0
    38dc:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    38de:	00 68 20    	mov.w     #0x680, w0
    38e0:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    38e2:	11 3a 80    	mov.w     0x742, w1
    38e4:	f0 0b 20    	mov.w     #0xbf, w0
    38e6:	00 81 60    	and.w     w1, w0, w2
    38e8:	60 04 20    	mov.w     #0x46, w0
    38ea:	71 05 20    	mov.w     #0x57, w1
    38ec:	23 74 20    	mov.w     #0x742, w3
    38ee:	80 49 78    	mov.b     w0, [w3]
    38f0:	81 49 78    	mov.b     w1, [w3]
    38f2:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = AJ_RX_RP;
    38f4:	1e 00 90    	mov.w     [w14+2], w0
    38f6:	40 02 b0    	add.w     #0x24, w0
    38f8:	a1 c1 b3    	mov.b     #0x1a, w1
    38fa:	01 48 78    	mov.b     w1, [w0]
    RPOR[AJ_TX_RP] = U1TX_RP;
    38fc:	9e 00 78    	mov.w     [w14], w1
    38fe:	75 80 40    	add.w     w1, #0x15, w0
    3900:	31 c0 b3    	mov.b     #0x3, w1
    3902:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    3904:	10 3a 80    	mov.w     0x742, w0
    3906:	00 01 78    	mov.w     w0, w2
    3908:	02 60 a0    	bset.w    w2, #0x6
    390a:	60 04 20    	mov.w     #0x46, w0
    390c:	71 05 20    	mov.w     #0x57, w1
    390e:	23 74 20    	mov.w     #0x742, w3
    3910:	80 49 78    	mov.b     w0, [w3]
    3912:	81 49 78    	mov.b     w1, [w3]
    3914:	82 49 78    	mov.b     w2, [w3]

    U1MODE = 0x0008;                // configure UART1 for transmission at
    3916:	80 00 20    	mov.w     #0x8, w0
    3918:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;                 //   115,200 baud, no parity, 1 stop bit
    391a:	20 02 20    	mov.w     #0x22, w0
    391c:	40 11 88    	mov.w     w0, 0x228

    U1_tx_buffer.data = U1TXbuffer;
    391e:	a0 82 20    	mov.w     #0x82a, w0
    3920:	b0 40 88    	mov.w     w0, 0x816
    U1_tx_buffer.length = U1_TX_BUFFER_LENGTH;
    3922:	00 40 20    	mov.w     #0x400, w0
    3924:	c0 40 88    	mov.w     w0, 0x818
    U1_tx_buffer.head = 0;
    3926:	00 00 eb    	clr.w     w0
    3928:	d0 40 88    	mov.w     w0, 0x81a
    U1_tx_buffer.tail = 0;
    392a:	00 00 eb    	clr.w     w0
    392c:	e0 40 88    	mov.w     w0, 0x81c
    U1_tx_buffer.count = 0;
    392e:	00 00 eb    	clr.w     w0
    3930:	f0 40 88    	mov.w     w0, 0x81e
    U1_tx_threshold = 3 * U1_TX_BUFFER_LENGTH / 4;
    3932:	00 30 20    	mov.w     #0x300, w0
    3934:	a0 40 88    	mov.w     w0, 0x814

    U1_rx_buffer.data = U1RXbuffer;
    3936:	a0 c2 20    	mov.w     #0xc2a, w0
    3938:	00 41 88    	mov.w     w0, 0x820
    U1_rx_buffer.length = U1_RX_BUFFER_LENGTH;
    393a:	00 40 20    	mov.w     #0x400, w0
    393c:	10 41 88    	mov.w     w0, 0x822
    U1_rx_buffer.head = 0;
    393e:	00 00 eb    	clr.w     w0
    3940:	20 41 88    	mov.w     w0, 0x824
    U1_rx_buffer.tail = 0;
    3942:	00 00 eb    	clr.w     w0
    3944:	30 41 88    	mov.w     w0, 0x826
    U1_rx_buffer.count = 0;
    3946:	00 00 eb    	clr.w     w0
    3948:	40 41 88    	mov.w     w0, 0x828

    U1STAbits.UTXISEL1 = 0;         // set UART1 UTXISEL<1:0> = 01, TX interrupt
    394a:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;         //   when all transmit operations are done
    394c:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    394e:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;            // enable UART1 TX interrupt
    3950:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    3952:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;            // enable UART1 RX interrupt
    3954:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;          // enable UART1 module
    3956:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
    3958:	23 42 a8    	bset.b    0x223, #0x2
}
    395a:	00 80 fa    	ulnk      
    395c:	00 00 06    	return    

0000395e <_U1_in_waiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
        disable_interrupts();
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
        U1_tx_buffer.head++;
        if (U1_tx_buffer.head == U1_tx_buffer.length)
            U1_tx_buffer.head = 0;
        U1_tx_buffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    395e:	00 00 fa    	lnk       #0x0
    return U1_rx_buffer.count;
    3960:	40 41 80    	mov.w     0x828, w0
}
    3962:	00 80 fa    	ulnk      
    3964:	00 00 06    	return    

00003966 <_U1_flush_tx_buffer>:

void U1_flush_tx_buffer(void) {
    3966:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    3968:	11 11 80    	mov.w     0x222, w1
    396a:	00 40 20    	mov.w     #0x400, w0
    396c:	00 80 60    	and.w     w1, w0, w0
    396e:	00 00 e0    	cp0.w     w0
    3970:	01 00 3a    	bra       NZ, 0x3974 <.L15>
        U1STAbits.UTXEN = 1;        //   enable it
    3972:	23 42 a8    	bset.b    0x223, #0x2

00003974 <.L15>:
}
    3974:	00 80 fa    	ulnk      
    3976:	00 00 06    	return    

00003978 <_U1_putc>:

void U1_putc(uint8_t ch) {
    3978:	02 00 fa    	lnk       #0x2
    397a:	00 4f 78    	mov.b     w0, [w14]
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}
    397c:	00 00 00    	nop       

0000397e <.L18>:
    397e:	f1 40 80    	mov.w     0x81e, w1
    3980:	c0 40 80    	mov.w     0x818, w0
    3982:	80 8f 50    	sub.w     w1, w0, [w15]
    3984:	fc ff 32    	bra       Z, 0x397e <.L18>

    disable_interrupts();
    3986:	ff 3f fc    	disi      #0x3fff
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    3988:	b1 40 80    	mov.w     0x816, w1
    398a:	e0 40 80    	mov.w     0x81c, w0
    398c:	00 80 40    	add.w     w1, w0, w0
    398e:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    3990:	e0 40 80    	mov.w     0x81c, w0
    3992:	00 00 e8    	inc.w     w0, w0
    3994:	e0 40 88    	mov.w     w0, 0x81c
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    3996:	e1 40 80    	mov.w     0x81c, w1
    3998:	c0 40 80    	mov.w     0x818, w0
    399a:	80 8f 50    	sub.w     w1, w0, [w15]
    399c:	02 00 3a    	bra       NZ, 0x39a2 <.L19>
        U1_tx_buffer.tail = 0;
    399e:	00 00 eb    	clr.w     w0
    39a0:	e0 40 88    	mov.w     w0, 0x81c

000039a2 <.L19>:
    U1_tx_buffer.count++;
    39a2:	f0 40 80    	mov.w     0x81e, w0
    39a4:	00 00 e8    	inc.w     w0, w0
    39a6:	f0 40 88    	mov.w     w0, 0x81e
    enable_interrupts();
    39a8:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    39aa:	f1 40 80    	mov.w     0x81e, w1
    39ac:	a0 40 80    	mov.w     0x814, w0
    39ae:	80 8f 50    	sub.w     w1, w0, [w15]
    39b0:	01 00 39    	bra       NC, 0x39b4 <.L17>
        U1STAbits.UTXEN = 1;
    39b2:	23 42 a8    	bset.b    0x223, #0x2

000039b4 <.L17>:
}
    39b4:	00 80 fa    	ulnk      
    39b6:	00 00 06    	return    

000039b8 <_U1_getc>:

uint8_t U1_getc(void) {
    39b8:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    39ba:	00 00 00    	nop       

000039bc <.L22>:
    39bc:	40 41 80    	mov.w     0x828, w0
    39be:	00 00 e0    	cp0.w     w0
    39c0:	fd ff 32    	bra       Z, 0x39bc <.L22>

    disable_interrupts();
    39c2:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    39c4:	01 41 80    	mov.w     0x820, w1
    39c6:	20 41 80    	mov.w     0x824, w0
    39c8:	00 80 40    	add.w     w1, w0, w0
    39ca:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    39cc:	20 41 80    	mov.w     0x824, w0
    39ce:	00 00 e8    	inc.w     w0, w0
    39d0:	20 41 88    	mov.w     w0, 0x824
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    39d2:	21 41 80    	mov.w     0x824, w1
    39d4:	10 41 80    	mov.w     0x822, w0
    39d6:	80 8f 50    	sub.w     w1, w0, [w15]
    39d8:	02 00 3a    	bra       NZ, 0x39de <.L23>
        U1_rx_buffer.head = 0;
    39da:	00 00 eb    	clr.w     w0
    39dc:	20 41 88    	mov.w     w0, 0x824

000039de <.L23>:
    U1_rx_buffer.count--;
    39de:	40 41 80    	mov.w     0x828, w0
    39e0:	00 00 e9    	dec.w     w0, w0
    39e2:	40 41 88    	mov.w     w0, 0x828
    enable_interrupts();
    39e4:	52 20 ef    	clr.w     0x52

    return ch;
    39e6:	1e 40 78    	mov.b     [w14], w0
}
    39e8:	00 80 fa    	ulnk      
    39ea:	00 00 06    	return    

000039ec <_U1_puts>:

void U1_puts(uint8_t *str) {
    39ec:	02 00 fa    	lnk       #0x2
    39ee:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    39f0:	04 00 37    	bra       0x39fa <.L25>

000039f2 <.L26>:
        U1_putc(*str++);
    39f2:	1e 00 78    	mov.w     [w14], w0
    39f4:	10 40 78    	mov.b     [w0], w0
    39f6:	1e 0f e8    	inc.w     [w14], [w14]
    39f8:	bf ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>

000039fa <.L25>:
    39fa:	1e 00 78    	mov.w     [w14], w0
    39fc:	10 40 78    	mov.b     [w0], w0
    39fe:	00 04 e0    	cp0.b     w0
    3a00:	f8 ff 3a    	bra       NZ, 0x39f2 <.L26>
    U1_flush_tx_buffer();
    3a02:	b1 ff 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    3a04:	00 80 fa    	ulnk      
    3a06:	00 00 06    	return    

00003a08 <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    3a08:	04 00 fa    	lnk       #0x4
    3a0a:	00 0f 78    	mov.w     w0, [w14]
    3a0c:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    3a0e:	1e 00 90    	mov.w     [w14+2], w0
    3a10:	00 00 e0    	cp0.w     w0
    3a12:	1a 00 32    	bra       Z, 0x3a48 <.L32>
        return;

    if (len == 1) {
    3a14:	1e 00 90    	mov.w     [w14+2], w0
    3a16:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3a18:	04 00 3a    	bra       NZ, 0x3a22 <.L30>
        *str = '\0';
    3a1a:	1e 00 78    	mov.w     [w14], w0
    3a1c:	80 40 eb    	clr.b     w1
    3a1e:	01 48 78    	mov.b     w1, [w0]
        return;
    3a20:	14 00 37    	bra       0x3a4a <.L27>

00003a22 <.L30>:
    }

    while (1) {
        *str = U1_getc();
    3a22:	ca ff 07    	rcall     0x39b8 <_U1_getc> <.LFB6> <.LFE5>
    3a24:	9e 00 78    	mov.w     [w14], w1
    3a26:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    3a28:	1e 00 78    	mov.w     [w14], w0
    3a2a:	10 40 78    	mov.b     [w0], w0
    3a2c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3a2e:	08 00 32    	bra       Z, 0x3a40 <.L31>
    3a30:	1e 00 90    	mov.w     [w14+2], w0
    3a32:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3a34:	05 00 32    	bra       Z, 0x3a40 <.L31>
            break;
        str++;
    3a36:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    3a38:	1e 00 90    	mov.w     [w14+2], w0
    3a3a:	00 00 e9    	dec.w     w0, w0
    3a3c:	10 07 98    	mov.w     w0, [w14+2]
    }
    3a3e:	f1 ff 37    	bra       0x3a22 <.L30>

00003a40 <.L31>:
    *str = '\0';
    3a40:	1e 00 78    	mov.w     [w14], w0
    3a42:	80 40 eb    	clr.b     w1
    3a44:	01 48 78    	mov.b     w1, [w0]
    3a46:	01 00 37    	bra       0x3a4a <.L27>

00003a48 <.L32>:
    3a48:	00 00 00    	nop       

00003a4a <.L27>:
}
    3a4a:	00 80 fa    	ulnk      
    3a4c:	00 00 06    	return    

00003a4e <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    3a4e:	08 00 fa    	lnk       #0x8
    3a50:	20 07 98    	mov.w     w0, [w14+4]
    3a52:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    3a54:	3e 00 90    	mov.w     [w14+6], w0
    3a56:	00 00 e0    	cp0.w     w0
    3a58:	6f 00 32    	bra       Z, 0x3b38 <.L46>
        return;

    if (len == 1) {
    3a5a:	3e 00 90    	mov.w     [w14+6], w0
    3a5c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3a5e:	04 00 3a    	bra       NZ, 0x3a68 <.L36>
        *str = '\0';
    3a60:	2e 00 90    	mov.w     [w14+4], w0
    3a62:	80 40 eb    	clr.b     w1
    3a64:	01 48 78    	mov.b     w1, [w0]
        return;
    3a66:	69 00 37    	bra       0x3b3a <.L33>

00003a68 <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    3a68:	b0 c1 b3    	mov.b     #0x1b, w0
    3a6a:	86 ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    3a6c:	70 c3 b3    	mov.b     #0x37, w0
    3a6e:	84 ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    3a70:	7a ff 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    3a72:	ae 00 90    	mov.w     [w14+4], w1
    3a74:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    3a76:	be 00 90    	mov.w     [w14+6], w1
    3a78:	01 0f 78    	mov.w     w1, [w14]
    3a7a:	03 00 37    	bra       0x3a82 <.L45>

00003a7c <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    3a7c:	00 00 00    	nop       
    3a7e:	01 00 37    	bra       0x3a82 <.L45>

00003a80 <.L48>:
    3a80:	00 00 00    	nop       

00003a82 <.L45>:
    3a82:	9a ff 07    	rcall     0x39b8 <_U1_getc> <.LFB6> <.LFE5>
    3a84:	ae 00 90    	mov.w     [w14+4], w1
    3a86:	80 48 78    	mov.b     w0, [w1]
    3a88:	2e 00 90    	mov.w     [w14+4], w0
    3a8a:	10 40 78    	mov.b     [w0], w0
    3a8c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3a8e:	09 00 3a    	bra       NZ, 0x3aa2 <.L37>
    *str = '\0';                            // terminarte the string with null
    3a90:	2e 00 90    	mov.w     [w14+4], w0
    3a92:	80 40 eb    	clr.b     w1
    3a94:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    3a96:	a0 c0 b3    	mov.b     #0xa, w0
    3a98:	6f ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    3a9a:	d0 c0 b3    	mov.b     #0xd, w0
    3a9c:	6d ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    3a9e:	63 ff 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3aa0:	4c 00 37    	bra       0x3b3a <.L33>

00003aa2 <.L37>:
    3aa2:	2e 00 90    	mov.w     [w14+4], w0
    3aa4:	10 40 78    	mov.b     [w0], w0
    3aa6:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    3aa8:	10 00 3a    	bra       NZ, 0x3aca <.L38>
    3aaa:	b0 c1 b3    	mov.b     #0x1b, w0
    3aac:	65 ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3aae:	80 c3 b3    	mov.b     #0x38, w0
    3ab0:	63 ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3ab2:	b0 c1 b3    	mov.b     #0x1b, w0
    3ab4:	61 ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3ab6:	b0 c5 b3    	mov.b     #0x5b, w0
    3ab8:	5f ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3aba:	b0 c4 b3    	mov.b     #0x4b, w0
    3abc:	5d ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3abe:	53 ff 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3ac0:	9e 00 90    	mov.w     [w14+2], w1
    3ac2:	21 07 98    	mov.w     w1, [w14+4]
    3ac4:	be 00 90    	mov.w     [w14+6], w1
    3ac6:	01 0f 78    	mov.w     w1, [w14]
    3ac8:	36 00 37    	bra       0x3b36 <.L39>

00003aca <.L38>:
    3aca:	2e 00 90    	mov.w     [w14+4], w0
    3acc:	10 40 78    	mov.b     [w0], w0
    3ace:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    3ad0:	05 00 32    	bra       Z, 0x3adc <.L40>
    3ad2:	2e 00 90    	mov.w     [w14+4], w0
    3ad4:	90 40 78    	mov.b     [w0], w1
    3ad6:	f0 c7 b3    	mov.b     #0x7f, w0
    3ad8:	80 cf 50    	sub.b     w1, w0, [w15]
    3ada:	14 00 3a    	bra       NZ, 0x3b04 <.L41>

00003adc <.L40>:
    3adc:	ae 00 90    	mov.w     [w14+4], w1
    3ade:	1e 00 90    	mov.w     [w14+2], w0
    3ae0:	80 8f 50    	sub.w     w1, w0, [w15]
    3ae2:	0c 00 36    	bra       LEU, 0x3afc <.L42>
    3ae4:	80 c0 b3    	mov.b     #0x8, w0
    3ae6:	48 ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3ae8:	00 c2 b3    	mov.b     #0x20, w0
    3aea:	46 ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3aec:	80 c0 b3    	mov.b     #0x8, w0
    3aee:	44 ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3af0:	3a ff 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3af2:	2e 00 90    	mov.w     [w14+4], w0
    3af4:	00 00 e9    	dec.w     w0, w0
    3af6:	20 07 98    	mov.w     w0, [w14+4]
    3af8:	1e 0f e8    	inc.w     [w14], [w14]
    3afa:	03 00 37    	bra       0x3b02 <.L43>

00003afc <.L42>:
    3afc:	70 c0 b3    	mov.b     #0x7, w0
    3afe:	3c ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3b00:	32 ff 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

00003b02 <.L43>:
    3b02:	19 00 37    	bra       0x3b36 <.L39>

00003b04 <.L41>:
    3b04:	1e 00 78    	mov.w     [w14], w0
    3b06:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3b08:	04 00 3a    	bra       NZ, 0x3b12 <.L44>
    3b0a:	70 c0 b3    	mov.b     #0x7, w0
    3b0c:	35 ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3b0e:	2b ff 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3b10:	12 00 37    	bra       0x3b36 <.L39>

00003b12 <.L44>:
    3b12:	2e 00 90    	mov.w     [w14+4], w0
    3b14:	10 40 78    	mov.b     [w0], w0
    3b16:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    3b18:	b1 ff 36    	bra       LEU, 0x3a7c <.L47>
    3b1a:	2e 00 90    	mov.w     [w14+4], w0
    3b1c:	90 40 78    	mov.b     [w0], w1
    3b1e:	e0 c7 b3    	mov.b     #0x7e, w0
    3b20:	80 cf 50    	sub.b     w1, w0, [w15]
    3b22:	ae ff 3e    	bra       GTU, 0x3a80 <.L48>
    3b24:	2e 00 90    	mov.w     [w14+4], w0
    3b26:	10 40 78    	mov.b     [w0], w0
    3b28:	27 ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3b2a:	1d ff 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3b2c:	2e 00 90    	mov.w     [w14+4], w0
    3b2e:	00 00 e8    	inc.w     w0, w0
    3b30:	20 07 98    	mov.w     w0, [w14+4]
    3b32:	1e 0f e9    	dec.w     [w14], [w14]
    3b34:	a6 ff 37    	bra       0x3a82 <.L45>

00003b36 <.L39>:
    3b36:	a5 ff 37    	bra       0x3a82 <.L45>

00003b38 <.L46>:
    3b38:	00 00 00    	nop       

00003b3a <.L33>:
}
    3b3a:	00 80 fa    	ulnk      
    3b3c:	00 00 06    	return    

00003b3e <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    3b3e:	08 00 fa    	lnk       #0x8
    3b40:	10 07 98    	mov.w     w0, [w14+2]
    3b42:	21 07 98    	mov.w     w1, [w14+4]
    3b44:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    3b46:	1e 00 90    	mov.w     [w14+2], w0
    3b48:	60 00 40    	add.w     w0, #0x0, w0
    3b4a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3b4c:	10 00 3e    	bra       GTU, 0x3b6e <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    3b4e:	00 00 eb    	clr.w     w0
    3b50:	00 0f 78    	mov.w     w0, [w14]
    3b52:	07 00 37    	bra       0x3b62 <.L52>

00003b54 <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    3b54:	2e 00 90    	mov.w     [w14+4], w0
    3b56:	10 40 78    	mov.b     [w0], w0
    3b58:	ae 00 90    	mov.w     [w14+4], w1
    3b5a:	81 00 e8    	inc.w     w1, w1
    3b5c:	21 07 98    	mov.w     w1, [w14+4]
    3b5e:	0c ff 07    	rcall     0x3978 <_U1_putc> <.LFB5> <.LFE4>
    3b60:	1e 0f e8    	inc.w     [w14], [w14]

00003b62 <.L52>:
    3b62:	9e 00 78    	mov.w     [w14], w1
    3b64:	3e 00 90    	mov.w     [w14+6], w0
    3b66:	80 8f 50    	sub.w     w1, w0, [w15]
    3b68:	f5 ff 39    	bra       NC, 0x3b54 <.L53>
            U1_flush_tx_buffer();
    3b6a:	fd fe 07    	rcall     0x3966 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    3b6c:	01 00 37    	bra       0x3b70 <.L54>

00003b6e <.L55>:
        default:
            break;
    3b6e:	00 00 00    	nop       

00003b70 <.L54>:
    }
    return len;
    3b70:	3e 00 90    	mov.w     [w14+6], w0
}
    3b72:	00 80 fa    	ulnk      
    3b74:	00 00 06    	return    
Disassembly of section .isr.text:

00003b76 <__T1Interrupt>:
    3b76:	80 9f be    	mov.d     w0, [w15++]
    3b78:	32 00 f8    	push      0x32
    3b7a:	34 00 f8    	push      0x34
    3b7c:	10 00 20    	mov.w     #0x1, w0
    3b7e:	a0 01 88    	mov.w     w0, 0x34
    3b80:	00 20 20    	mov.w     #0x200, w0
    3b82:	90 01 88    	mov.w     w0, 0x32
    3b84:	00 00 fa    	lnk       #0x0
    3b86:	84 60 a9    	bclr.b    0x84, #0x3
    3b88:	00 40 80    	mov.w     0x800, w0
    3b8a:	00 00 e9    	dec.w     w0, w0
    3b8c:	00 40 88    	mov.w     w0, 0x800
    3b8e:	61 40 80    	mov.w     0x80c, w1
    3b90:	00 4d 22    	mov.w     #0x24d0, w0
    3b92:	80 8f 50    	sub.w     w1, w0, [w15]
    3b94:	09 00 3a    	bra       NZ, 0x3ba8 <.L22>
    3b96:	06 21 ef    	clr.w     0x106
    3b98:	10 68 ef    	clr.b     0x810
    3b9a:	94 e0 a8    	bset.b    0x94, #0x7
    3b9c:	11 e1 a8    	bset.b    0x111, #0x7
    3b9e:	60 07 85    	mov.w     0xa0ec, w0
    3ba0:	a0 0c 88    	mov.w     w0, 0x194
    3ba2:	a0 0c 80    	mov.w     0x194, w0
    3ba4:	00 00 d1    	lsr.w     w0, w0
    3ba6:	b0 0c 88    	mov.w     w0, 0x196

00003ba8 <.L22>:
    3ba8:	00 80 fa    	ulnk      
    3baa:	34 00 f9    	pop       0x34
    3bac:	32 00 f9    	pop       0x32
    3bae:	4f 00 be    	mov.d     [--w15], w0
    3bb0:	00 40 06    	retfie    

00003bb2 <__T2Interrupt>:
    3bb2:	36 00 f8    	push      0x36
    3bb4:	80 9f be    	mov.d     w0, [w15++]
    3bb6:	82 9f be    	mov.d     w2, [w15++]
    3bb8:	84 9f be    	mov.d     w4, [w15++]
    3bba:	86 9f be    	mov.d     w6, [w15++]
    3bbc:	32 00 f8    	push      0x32
    3bbe:	34 00 f8    	push      0x34
    3bc0:	10 00 20    	mov.w     #0x1, w0
    3bc2:	a0 01 88    	mov.w     w0, 0x34
    3bc4:	00 20 20    	mov.w     #0x200, w0
    3bc6:	90 01 88    	mov.w     w0, 0x32
    3bc8:	00 00 fa    	lnk       #0x0
    3bca:	84 e0 a9    	bclr.b    0x84, #0x7
    3bcc:	10 c8 bf    	mov.b     0x810, WREG
    3bce:	00 80 fb    	ze        w0, w0
    3bd0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3bd2:	11 00 32    	bra       Z, 0x3bf6 <.L27>
    3bd4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3bd6:	20 00 32    	bra       Z, 0x3c18 <.L28>
    3bd8:	00 00 e0    	cp0.w     w0
    3bda:	2e 00 3a    	bra       NZ, 0x3c38 <.L30>
    3bdc:	96 21 ef    	clr.w     0x196
    3bde:	10 c8 bf    	mov.b     0x810, WREG
    3be0:	00 40 e8    	inc.b     w0, w0
    3be2:	10 e8 b7    	mov.b     WREG, 0x810
    3be4:	ec 22 a9    	bclr.b    0x2ec, #0x1
    3be6:	10 00 20    	mov.w     #0x1, w0
    3be8:	01 00 20    	mov.w     #0x0, w1
    3bea:	31 fc 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3bec:	dc e2 a8    	bset.b    0x2dc, #0x7
    3bee:	10 00 20    	mov.w     #0x1, w0
    3bf0:	01 00 20    	mov.w     #0x0, w1
    3bf2:	2d fc 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3bf4:	22 00 37    	bra       0x3c3a <.L24>

00003bf6 <.L27>:
    3bf6:	70 07 85    	mov.w     0xa0ee, w0
    3bf8:	a0 0c 88    	mov.w     w0, 0x194
    3bfa:	a0 0c 80    	mov.w     0x194, w0
    3bfc:	00 00 d1    	lsr.w     w0, w0
    3bfe:	b0 0c 88    	mov.w     w0, 0x196
    3c00:	dc e2 a9    	bclr.b    0x2dc, #0x7
    3c02:	10 00 20    	mov.w     #0x1, w0
    3c04:	01 00 20    	mov.w     #0x0, w1
    3c06:	23 fc 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3c08:	ec 02 a8    	bset.b    0x2ec, #0x0
    3c0a:	10 00 20    	mov.w     #0x1, w0
    3c0c:	01 00 20    	mov.w     #0x0, w1
    3c0e:	1f fc 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3c10:	10 c8 bf    	mov.b     0x810, WREG
    3c12:	00 40 e8    	inc.b     w0, w0
    3c14:	10 e8 b7    	mov.b     WREG, 0x810
    3c16:	11 00 37    	bra       0x3c3a <.L24>

00003c18 <.L28>:
    3c18:	60 07 85    	mov.w     0xa0ec, w0
    3c1a:	a0 0c 88    	mov.w     w0, 0x194
    3c1c:	96 21 ef    	clr.w     0x196
    3c1e:	dc e2 a9    	bclr.b    0x2dc, #0x7
    3c20:	10 00 20    	mov.w     #0x1, w0
    3c22:	01 00 20    	mov.w     #0x0, w1
    3c24:	14 fc 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3c26:	ec 02 a8    	bset.b    0x2ec, #0x0
    3c28:	10 00 20    	mov.w     #0x1, w0
    3c2a:	01 00 20    	mov.w     #0x0, w1
    3c2c:	10 fc 07    	rcall     0x344e <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    3c2e:	10 c8 bf    	mov.b     0x810, WREG
    3c30:	00 40 e8    	inc.b     w0, w0
    3c32:	10 e8 b7    	mov.b     WREG, 0x810
    3c34:	00 00 00    	nop       
    3c36:	01 00 37    	bra       0x3c3a <.L24>

00003c38 <.L30>:
    3c38:	00 00 00    	nop       

00003c3a <.L24>:
    3c3a:	00 80 fa    	ulnk      
    3c3c:	34 00 f9    	pop       0x34
    3c3e:	32 00 f9    	pop       0x32
    3c40:	4f 03 be    	mov.d     [--w15], w6
    3c42:	4f 02 be    	mov.d     [--w15], w4
    3c44:	4f 01 be    	mov.d     [--w15], w2
    3c46:	4f 00 be    	mov.d     [--w15], w0
    3c48:	36 00 f9    	pop       0x36
    3c4a:	00 40 06    	retfie    

00003c4c <__U1TXInterrupt>:
    3c4c:	80 9f be    	mov.d     w0, [w15++]
    3c4e:	32 00 f8    	push      0x32
    3c50:	34 00 f8    	push      0x34
    3c52:	10 00 20    	mov.w     #0x1, w0
    3c54:	a0 01 88    	mov.w     w0, 0x34
    3c56:	00 20 20    	mov.w     #0x200, w0
    3c58:	90 01 88    	mov.w     w0, 0x32
    3c5a:	02 00 fa    	lnk       #0x2
    3c5c:	85 80 a9    	bclr.b    0x85, #0x4
    3c5e:	f0 40 80    	mov.w     0x81e, w0
    3c60:	00 00 e0    	cp0.w     w0
    3c62:	17 00 3a    	bra       NZ, 0x3c92 <.L8>
    3c64:	23 42 a9    	bclr.b    0x223, #0x2
    3c66:	16 00 37    	bra       0x3c94 <.L4>

00003c68 <.L7>:
    3c68:	ff 3f fc    	disi      #0x3fff
    3c6a:	b1 40 80    	mov.w     0x816, w1
    3c6c:	d0 40 80    	mov.w     0x81a, w0
    3c6e:	00 80 40    	add.w     w1, w0, w0
    3c70:	10 4f 78    	mov.b     [w0], [w14]
    3c72:	d0 40 80    	mov.w     0x81a, w0
    3c74:	00 00 e8    	inc.w     w0, w0
    3c76:	d0 40 88    	mov.w     w0, 0x81a
    3c78:	d1 40 80    	mov.w     0x81a, w1
    3c7a:	c0 40 80    	mov.w     0x818, w0
    3c7c:	80 8f 50    	sub.w     w1, w0, [w15]
    3c7e:	02 00 3a    	bra       NZ, 0x3c84 <.L5>
    3c80:	00 00 eb    	clr.w     w0
    3c82:	d0 40 88    	mov.w     w0, 0x81a

00003c84 <.L5>:
    3c84:	f0 40 80    	mov.w     0x81e, w0
    3c86:	00 00 e9    	dec.w     w0, w0
    3c88:	f0 40 88    	mov.w     w0, 0x81e
    3c8a:	52 20 ef    	clr.w     0x52
    3c8c:	1e 80 fb    	ze        [w14], w0
    3c8e:	20 11 88    	mov.w     w0, 0x224
    3c90:	01 00 37    	bra       0x3c94 <.L4>

00003c92 <.L8>:
    3c92:	00 00 00    	nop       

00003c94 <.L4>:
    3c94:	11 11 80    	mov.w     0x222, w1
    3c96:	00 20 20    	mov.w     #0x200, w0
    3c98:	00 80 60    	and.w     w1, w0, w0
    3c9a:	00 00 e0    	cp0.w     w0
    3c9c:	03 00 3a    	bra       NZ, 0x3ca4 <.L2>
    3c9e:	f0 40 80    	mov.w     0x81e, w0
    3ca0:	00 00 e0    	cp0.w     w0
    3ca2:	e2 ff 3a    	bra       NZ, 0x3c68 <.L7>

00003ca4 <.L2>:
    3ca4:	00 80 fa    	ulnk      
    3ca6:	34 00 f9    	pop       0x34
    3ca8:	32 00 f9    	pop       0x32
    3caa:	4f 00 be    	mov.d     [--w15], w0
    3cac:	00 40 06    	retfie    

00003cae <__U1RXInterrupt>:
    3cae:	80 9f be    	mov.d     w0, [w15++]
    3cb0:	32 00 f8    	push      0x32
    3cb2:	34 00 f8    	push      0x34
    3cb4:	10 00 20    	mov.w     #0x1, w0
    3cb6:	a0 01 88    	mov.w     w0, 0x34
    3cb8:	00 20 20    	mov.w     #0x200, w0
    3cba:	90 01 88    	mov.w     w0, 0x32
    3cbc:	00 00 fa    	lnk       #0x0
    3cbe:	85 60 a9    	bclr.b    0x85, #0x3
    3cc0:	14 00 37    	bra       0x3cea <.L10>

00003cc2 <.L13>:
    3cc2:	ff 3f fc    	disi      #0x3fff
    3cc4:	01 41 80    	mov.w     0x820, w1
    3cc6:	30 41 80    	mov.w     0x826, w0
    3cc8:	00 80 40    	add.w     w1, w0, w0
    3cca:	31 11 80    	mov.w     0x226, w1
    3ccc:	81 40 78    	mov.b     w1, w1
    3cce:	01 48 78    	mov.b     w1, [w0]
    3cd0:	30 41 80    	mov.w     0x826, w0
    3cd2:	00 00 e8    	inc.w     w0, w0
    3cd4:	30 41 88    	mov.w     w0, 0x826
    3cd6:	31 41 80    	mov.w     0x826, w1
    3cd8:	10 41 80    	mov.w     0x822, w0
    3cda:	80 8f 50    	sub.w     w1, w0, [w15]
    3cdc:	02 00 3a    	bra       NZ, 0x3ce2 <.L11>
    3cde:	00 00 eb    	clr.w     w0
    3ce0:	30 41 88    	mov.w     w0, 0x826

00003ce2 <.L11>:
    3ce2:	40 41 80    	mov.w     0x828, w0
    3ce4:	00 00 e8    	inc.w     w0, w0
    3ce6:	40 41 88    	mov.w     w0, 0x828
    3ce8:	52 20 ef    	clr.w     0x52

00003cea <.L10>:
    3cea:	10 11 80    	mov.w     0x222, w0
    3cec:	61 00 60    	and.w     w0, #0x1, w0
    3cee:	00 00 e0    	cp0.w     w0
    3cf0:	04 00 32    	bra       Z, 0x3cfa <.L9>
    3cf2:	41 41 80    	mov.w     0x828, w1
    3cf4:	10 41 80    	mov.w     0x822, w0
    3cf6:	80 8f 50    	sub.w     w1, w0, [w15]
    3cf8:	e4 ff 3a    	bra       NZ, 0x3cc2 <.L13>

00003cfa <.L9>:
    3cfa:	00 80 fa    	ulnk      
    3cfc:	34 00 f9    	pop       0x34
    3cfe:	32 00 f9    	pop       0x32
    3d00:	4f 00 be    	mov.d     [--w15], w0
    3d02:	00 40 06    	retfie    
Disassembly of section .text:

00003d04 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    3d04:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2),
    3d06:	00 10 20    	mov.w     #0x100, w0
    3d08:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    3d0a:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    3d0c:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    3d0e:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    3d10:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    3d12:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    3d14:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    3d16:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    3d18:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    3d1a:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    3d1c:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    3d1e:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    3d20:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    3d22:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    3d24:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    3d26:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    3d28:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    3d2a:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    3d2c:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    3d2e:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    3d30:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    3d32:	f0 03 20    	mov.w     #0x3f, w0
    3d34:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    3d36:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    3d38:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    3d3a:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    3d3c:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module:
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0;
    3d3e:	00 0e 20    	mov.w     #0xe0, w0
    3d40:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    3d42:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    3d44:	00 c4 20    	mov.w     #0xc40, w0
    3d46:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    3d48:	50 00 20    	mov.w     #0x5, w0
    3d4a:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    3d4c:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    3d4e:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    3d50:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    3d52:	e8 02 a9    	bclr.b    0x2e8, #0x0
    3d54:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    3d56:	e8 22 a9    	bclr.b    0x2e8, #0x1
    3d58:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    3d5a:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    3d5c:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    3d5e:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    3d60:	00 80 fa    	ulnk      
    3d62:	00 00 06    	return    

00003d64 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    3d64:	02 00 fa    	lnk       #0x2
    3d66:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    3d68:	9e 00 78    	mov.w     [w14], w1
    3d6a:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    3d6c:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    3d6e:	00 00 00    	nop       

00003d70 <.L3>:
    3d70:	00 19 80    	mov.w     0x320, w0
    3d72:	61 00 60    	and.w     w0, #0x1, w0
    3d74:	00 00 e0    	cp0.w     w0
    3d76:	fc ff 32    	bra       Z, 0x3d70 <.L3>
    return ADC1BUF0;
    3d78:	00 18 80    	mov.w     0x300, w0
}
    3d7a:	00 80 fa    	ulnk      
    3d7c:	00 00 06    	return    

00003d7e <_rand_next>:

void rand_next(void) {
    3d7e:	02 00 fa    	lnk       #0x2
    uint16_t val;

    // See "A List of Maximum Period NLFSRs" by Elena Dubrova, p. 7
    val = (rand_val ^ (rand_val >> 2) ^ (rand_val >> 13) ^ ((rand_val >> 2) & (rand_val >> 3))) & 1;
    3d80:	50 40 80    	mov.w     0x80a, w0
    3d82:	c2 00 de    	lsr.w     w0, #0x2, w1
    3d84:	50 40 80    	mov.w     0x80a, w0
    3d86:	80 80 68    	xor.w     w1, w0, w1
    3d88:	50 40 80    	mov.w     0x80a, w0
    3d8a:	4d 00 de    	lsr.w     w0, #0xd, w0
    3d8c:	80 80 68    	xor.w     w1, w0, w1
    3d8e:	50 40 80    	mov.w     0x80a, w0
    3d90:	42 01 de    	lsr.w     w0, #0x2, w2
    3d92:	50 40 80    	mov.w     0x80a, w0
    3d94:	43 00 de    	lsr.w     w0, #0x3, w0
    3d96:	00 00 61    	and.w     w2, w0, w0
    3d98:	00 80 68    	xor.w     w1, w0, w0
    3d9a:	61 0f 60    	and.w     w0, #0x1, [w14]
    rand_val = (rand_val >> 1) | (val << 15);
    3d9c:	50 40 80    	mov.w     0x80a, w0
    3d9e:	80 00 d1    	lsr.w     w0, w1
    3da0:	1e 00 78    	mov.w     [w14], w0
    3da2:	4f 00 dd    	sl.w      w0, #0xf, w0
    3da4:	01 00 70    	ior.w     w0, w1, w0
    3da6:	50 40 88    	mov.w     w0, 0x80a
}
    3da8:	00 80 fa    	ulnk      
    3daa:	00 00 06    	return    
Disassembly of section .dinit:

00003dac <.dinit>:
    3dac:	1e 11 00    	nop       
    3dae:	08 00 00    	nop       
    3db0:	82 00 00    	nop       
    3db2:	10 20 30    	bra       OV, 0x7dd4
    3db4:	40 50 60    	and.b     w0, [--w0], [w0--]
    3db6:	80 00 00    	nop       
    3db8:	2a 10 00    	nop       
    3dba:	a8 00 00    	nop       
    3dbc:	80 00 00    	nop       
    3dbe:	00 08 00    	nop       
    3dc0:	12 00 00    	nop       
    3dc2:	80 00 00    	nop       
    3dc4:	12 08 00    	nop       
    3dc6:	02 00 00    	nop       
    3dc8:	82 00 00    	nop       
    3dca:	e0 00 00    	nop       
    3dcc:	0e 11 00    	nop       
    3dce:	10 00 00    	nop       
    3dd0:	80 00 00    	nop       
    3dd2:	16 08 00    	nop       
    3dd4:	14 08 00    	nop       
    3dd6:	80 00 00    	nop       
    3dd8:	14 08 00    	nop       
    3dda:	02 00 00    	nop       
    3ddc:	80 00 00    	nop       
    3dde:	f4 10 00    	nop       
    3de0:	1a 00 00    	nop       
    3de2:	82 00 00    	nop       
    3de4:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    3de6:	74 7a 4c    	.pword 0x4c7a74
    3de8:	00 00 01    	call      w0
    3dea:	00 02 00    	nop       
    3dec:	04 00 08    	do        #0x4, 0x5df0
    3dee:	00 10 00 
    3df0:	00 00 20    	mov.w     #0x0, w0
    3df2:	2b 2d 23    	mov.w     #0x32d2, w11
    3df4:	30 00 00    	nop       
    3df6:	d2 10 00    	nop       
    3df8:	22 00 00    	nop       
    3dfa:	82 00 00    	nop       
    3dfc:	30 31 32    	bra       Z, 0xa05e
    3dfe:	33 34 35    	bra       LT, 0xa666
    3e00:	36 37 38    	bra       NOV, 0xac6e
    3e02:	39 41 42    	add.b     w4, [w9++], w2
    3e04:	43 44 45    	add.b     w10, [--w3], w8
    3e06:	46 00 30    	bra       OV, 0x3e94
    3e08:	31 32 33    	bra       N, 0xa26c
    3e0a:	34 35 36    	bra       LEU, 0xa874
    3e0c:	37 38 39    	bra       NC, 0xae7c
    3e0e:	61 62 63    	and.b     w6, #0x1, [--w4]
    3e10:	64 65 66    	and.b     w12, #0x4, [--w10]
	...
Disassembly of section .text:

00003e16 <_parity>:
    3e16:	02 00 fa    	lnk       #0x2
    3e18:	00 0f 78    	mov.w     w0, [w14]
    3e1a:	1e 00 78    	mov.w     [w14], w0
    3e1c:	48 00 de    	lsr.w     w0, #0x8, w0
    3e1e:	1e 0f 68    	xor.w     w0, [w14], [w14]
    3e20:	1e 00 78    	mov.w     [w14], w0
    3e22:	44 00 de    	lsr.w     w0, #0x4, w0
    3e24:	1e 0f 68    	xor.w     w0, [w14], [w14]
    3e26:	1e 00 78    	mov.w     [w14], w0
    3e28:	42 00 de    	lsr.w     w0, #0x2, w0
    3e2a:	1e 0f 68    	xor.w     w0, [w14], [w14]
    3e2c:	1e 00 78    	mov.w     [w14], w0
    3e2e:	00 00 d1    	lsr.w     w0, w0
    3e30:	1e 0f 68    	xor.w     w0, [w14], [w14]
    3e32:	1e 00 78    	mov.w     [w14], w0
    3e34:	00 40 78    	mov.b     w0, w0
    3e36:	61 40 60    	and.b     w0, #0x1, w0
    3e38:	00 80 fa    	ulnk      
    3e3a:	00 00 06    	return    
Disassembly of section .isr:

00003e3c <__DefaultInterrupt>:
    3e3c:	00 40 da    	break     
    3e3e:	00 00 fe    	reset     
