
master.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	86 28 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	86 28 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	86 28 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	86 28 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	86 28 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	86 28 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	86 28 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	86 28 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	86 28 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	86 28 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	86 28 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	86 28 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	86 28 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	86 28 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	86 28 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	86 28 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	86 28 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	86 28 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	86 28 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	86 28 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	86 28 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	86 28 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	86 28 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	86 28 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	86 28 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	86 28 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	86 28 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	86 28 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	86 28 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	86 28 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	86 28 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	86 28 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	86 28 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	86 28 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	86 28 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	86 28 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	86 28 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	86 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	86 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	86 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	86 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	86 28 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	86 28 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	86 28 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	86 28 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	86 28 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	86 28 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	86 28 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	86 28 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	86 28 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	86 28 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	86 28 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	86 28 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	86 28 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	86 28 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	86 28 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	86 28 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	86 28 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	86 28 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	86 28 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	86 28 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	86 28 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	86 28 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	86 28 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	86 28 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	86 28 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	86 28 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	86 28 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	86 28 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	86 28 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	4f c3 20    	mov.w     #0xc34, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	7f 00 07    	rcall     0x1224 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	60 86 22    	mov.w     #0x2866, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	fa 16 02    	call      0x16fa <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	80 12 20    	mov.w     #0x128, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	2e 18 04    	goto      0x182e <_idle>
    1216:	00 00 00 
    1218:	5a 18 04    	goto      0x185a <_run>
    121a:	00 00 00 
    121c:	a2 1a 04    	goto      0x1aa2 <_end_fail>
    121e:	00 00 00 
    1220:	6e 1b 04    	goto      0x1b6e <_end_win>
    1222:	00 00 00 

00001224 <__crt_start_mode>:
    1224:	00 00 05    	retlw.w   #0x0, w0

00001226 <___subsf3>:
    1226:	03 f0 a2    	btg.w     w3, #0xf

00001228 <___addsf3>:
    1228:	88 9f be    	mov.d     w8, [w15++]
    122a:	8a 9f be    	mov.d     w10, [w15++]
    122c:	8c 1f 78    	mov.w     w12, [w15++]
    122e:	f6 00 07    	rcall     0x141c <__funpack2>
    1230:	fd 00 33    	bra       N, 0x142c <__fPropagateNaN>
    1232:	64 50 e1    	cp.w      w10, #0x4
    1234:	4f 00 32    	bra       Z, 0x12d4 <aisinfinite>

00001236 <checkspecialb>:
    1236:	64 20 e1    	cp.w      w4, #0x4
    1238:	52 00 32    	bra       Z, 0x12de <return2>
    123a:	03 82 6c    	xor.w     w9, w3, w4
    123c:	07 00 3b    	bra       NN, 0x124c <getsign>
    123e:	09 05 d0    	sl.w      w9, w10
    1240:	03 06 d0    	sl.w      w3, w12
    1242:	82 0f 54    	sub.w     w8, w2, [w15]
    1244:	0c 06 5d    	subb.w    w10, w12, w12
    1246:	02 00 39    	bra       NC, 0x124c <getsign>
    1248:	02 00 32    	bra       Z, 0x124e <gotsign>
    124a:	89 01 78    	mov.w     w9, w3

0000124c <getsign>:
    124c:	03 06 78    	mov.w     w3, w12

0000124e <gotsign>:
    124e:	85 82 55    	sub.w     w11, w5, w5
    1250:	04 00 3d    	bra       GE, 0x125a <expcanonical>
    1252:	00 03 fd    	exch      w0, w6
    1254:	81 03 fd    	exch      w1, w7
    1256:	85 02 ea    	neg.w     w5, w5
    1258:	8b 85 42    	add.w     w5, w11, w11

0000125a <expcanonical>:
    125a:	84 0f 72    	ior.w     w4, w4, [w15]
    125c:	02 00 3b    	bra       NN, 0x1262 <nonegate>
    125e:	60 00 10    	subr.w    w0, #0x0, w0
    1260:	e0 80 18    	subbr.w   w1, #0x0, w1

00001262 <nonegate>:
    1262:	60 11 b8    	mul.uu    w2, #0x0, w2
    1264:	00 05 eb    	clr.w     w10
    1266:	7a 28 e1    	cp.w      w5, #0x1a
    1268:	0a 00 39    	bra       NC, 0x127e <aligniter>
    126a:	06 00 78    	mov.w     w6, w0
    126c:	c7 5d dd    	sl.w      w11, #0x7, w11
    126e:	f7 07 b2    	and.w     #0x7f, w7
    1270:	87 80 75    	ior.w     w11, w7, w1
    1272:	2d 00 37    	bra       0x12ce <signoff>

00001274 <align>:
    1274:	82 81 71    	ior.w     w3, w2, w3
    1276:	0a 01 78    	mov.w     w10, w2
    1278:	61 05 60    	and.w     w0, #0x1, w10
    127a:	81 80 d1    	asr.w     w1, w1
    127c:	00 80 d3    	rrc.w     w0, w0

0000127e <aligniter>:
    127e:	85 02 e9    	dec.w     w5, w5
    1280:	f9 ff 3b    	bra       NN, 0x1274 <align>

00001282 <aligned>:
    1282:	06 04 40    	add.w     w0, w6, w8
    1284:	87 84 48    	addc.w    w1, w7, w9
    1286:	02 00 3b    	bra       NN, 0x128c <normalizesum>
    1288:	60 04 14    	subr.w    w8, #0x0, w8
    128a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000128c <normalizesum>:
    128c:	09 88 a3    	btst.z    w9, #0x8
    128e:	07 00 32    	bra       Z, 0x129e <checknormal>
    1290:	8a 81 71    	ior.w     w3, w10, w3
    1292:	82 81 71    	ior.w     w3, w2, w3
    1294:	61 01 64    	and.w     w8, #0x1, w2
    1296:	89 04 d1    	lsr.w     w9, w9
    1298:	08 84 d3    	rrc.w     w8, w8
    129a:	8b 05 e8    	inc.w     w11, w11
    129c:	17 00 37    	bra       0x12cc <round>

0000129e <checknormal>:
    129e:	09 78 a3    	btst.z    w9, #0x7
    12a0:	13 00 3a    	bra       NZ, 0x12c8 <discardguard>

000012a2 <underflow>:
    12a2:	0b 00 e0    	cp0.w     w11
    12a4:	13 00 34    	bra       LE, 0x12cc <round>
    12a6:	8b 05 e9    	dec.w     w11, w11
    12a8:	08 04 44    	add.w     w8, w8, w8
    12aa:	89 84 4c    	addc.w    w9, w9, w9
    12ac:	0a 44 74    	ior.b     w8, w10, w8
    12ae:	09 78 a3    	btst.z    w9, #0x7
    12b0:	0d 00 3a    	bra       NZ, 0x12cc <round>

000012b2 <normalizeloop>:
    12b2:	0b 00 e0    	cp0.w     w11
    12b4:	07 00 34    	bra       LE, 0x12c4 <normalizeexit>
    12b6:	8b 05 e9    	dec.w     w11, w11
    12b8:	08 04 44    	add.w     w8, w8, w8
    12ba:	89 84 4c    	addc.w    w9, w9, w9
    12bc:	01 00 3a    	bra       NZ, 0x12c0 <normalizetest>
    12be:	0b 00 20    	mov.w     #0x0, w11

000012c0 <normalizetest>:
    12c0:	09 78 a3    	btst.z    w9, #0x7
    12c2:	f7 ff 32    	bra       Z, 0x12b2 <normalizeloop>

000012c4 <normalizeexit>:
    12c4:	00 01 eb    	clr.w     w2
    12c6:	02 00 37    	bra       0x12cc <round>

000012c8 <discardguard>:
    12c8:	82 81 71    	ior.w     w3, w2, w3
    12ca:	0a 01 78    	mov.w     w10, w2

000012cc <round>:
    12cc:	6c 00 07    	rcall     0x13a6 <__fpack>

000012ce <signoff>:
    12ce:	0c f0 a7    	btsc.w    w12, #0xf
    12d0:	01 f0 a0    	bset.w    w1, #0xf
    12d2:	b5 00 37    	bra       0x143e <__fbopExit>

000012d4 <aisinfinite>:
    12d4:	64 20 e1    	cp.w      w4, #0x4
    12d6:	02 00 3a    	bra       NZ, 0x12dc <return8>
    12d8:	83 8f 6c    	xor.w     w9, w3, [w15]
    12da:	b5 00 33    	bra       N, 0x1446 <__fbopReturnNaN>

000012dc <return8>:
    12dc:	08 01 be    	mov.d     w8, w2

000012de <return2>:
    12de:	02 00 be    	mov.d     w2, w0
    12e0:	ae 00 37    	bra       0x143e <__fbopExit>

000012e2 <___divsf3>:
    12e2:	88 9f be    	mov.d     w8, [w15++]
    12e4:	8a 9f be    	mov.d     w10, [w15++]
    12e6:	8c 1f 78    	mov.w     w12, [w15++]
    12e8:	99 00 07    	rcall     0x141c <__funpack2>
    12ea:	a0 00 33    	bra       N, 0x142c <__fPropagateNaN>
    12ec:	03 86 6c    	xor.w     w9, w3, w12
    12ee:	64 50 e1    	cp.w      w10, #0x4
    12f0:	2e 00 32    	bra       Z, 0x134e <aisinfinite>
    12f2:	64 20 e1    	cp.w      w4, #0x4
    12f4:	33 00 32    	bra       Z, 0x135c <returnZero>
    12f6:	61 50 e1    	cp.w      w10, #0x1
    12f8:	2f 00 32    	bra       Z, 0x1358 <aiszero>
    12fa:	61 20 e1    	cp.w      w4, #0x1
    12fc:	31 00 32    	bra       Z, 0x1360 <returnInf>

000012fe <finitenonzero>:
    12fe:	85 85 55    	sub.w     w11, w5, w11
    1300:	eb 07 b0    	add.w     #0x7e, w11
    1302:	09 00 20    	mov.w     #0x0, w9
    1304:	08 04 20    	mov.w     #0x40, w8
    1306:	05 00 37    	bra       0x1312 <diventry>

00001308 <divnext>:
    1308:	08 04 44    	add.w     w8, w8, w8
    130a:	89 84 4c    	addc.w    w9, w9, w9
    130c:	0a 00 31    	bra       C, 0x1322 <divdone> <formsticky>

0000130e <divloop>:
    130e:	06 03 43    	add.w     w6, w6, w6
    1310:	87 83 4b    	addc.w    w7, w7, w7

00001312 <diventry>:
    1312:	00 01 53    	sub.w     w6, w0, w2
    1314:	81 81 5b    	subb.w    w7, w1, w3
    1316:	f8 ff 33    	bra       N, 0x1308 <divnext>
    1318:	02 03 be    	mov.d     w2, w6
    131a:	08 00 a0    	bset.w    w8, #0x0
    131c:	08 04 44    	add.w     w8, w8, w8
    131e:	89 84 4c    	addc.w    w9, w9, w9
    1320:	f6 ff 39    	bra       NC, 0x130e <divloop>

00001322 <divdone>:
    1322:	c6 39 dd    	sl.w      w7, #0x6, w3
    1324:	83 01 73    	ior.w     w6, w3, w3
    1326:	01 00 32    	bra       Z, 0x132a <stickyok>
    1328:	13 00 20    	mov.w     #0x1, w3

0000132a <stickyok>:
    132a:	89 04 d1    	lsr.w     w9, w9
    132c:	08 84 d3    	rrc.w     w8, w8
    132e:	09 98 a3    	btst.z    w9, #0x9
    1330:	05 00 32    	bra       Z, 0x133c <guardused>
    1332:	08 00 a7    	btsc.w    w8, #0x0
    1334:	03 00 a0    	bset.w    w3, #0x0
    1336:	89 04 d1    	lsr.w     w9, w9
    1338:	08 84 d3    	rrc.w     w8, w8
    133a:	8b 05 e8    	inc.w     w11, w11

0000133c <guardused>:
    133c:	89 04 d1    	lsr.w     w9, w9
    133e:	08 84 d3    	rrc.w     w8, w8
    1340:	00 01 eb    	clr.w     w2
    1342:	02 81 d2    	rlc.w     w2, w2
    1344:	30 00 07    	rcall     0x13a6 <__fpack>

00001346 <return0>:
    1346:	01 f0 a1    	bclr.w    w1, #0xf
    1348:	0c f0 a7    	btsc.w    w12, #0xf
    134a:	01 f0 a0    	bset.w    w1, #0xf
    134c:	78 00 37    	bra       0x143e <__fbopExit>

0000134e <aisinfinite>:
    134e:	64 20 e1    	cp.w      w4, #0x4
    1350:	7a 00 32    	bra       Z, 0x1446 <__fbopReturnNaN>

00001352 <return8>:
    1352:	08 01 be    	mov.d     w8, w2

00001354 <return2>:
    1354:	02 00 be    	mov.d     w2, w0
    1356:	f7 ff 37    	bra       0x1346 <return0>

00001358 <aiszero>:
    1358:	61 20 e1    	cp.w      w4, #0x1
    135a:	75 00 32    	bra       Z, 0x1446 <__fbopReturnNaN>

0000135c <returnZero>:
    135c:	60 00 b8    	mul.uu    w0, #0x0, w0
    135e:	f3 ff 37    	bra       0x1346 <return0>

00001360 <returnInf>:
    1360:	00 00 20    	mov.w     #0x0, w0
    1362:	01 f8 27    	mov.w     #0x7f80, w1
    1364:	f0 ff 37    	bra       0x1346 <return0>

00001366 <___eqsf2>:
    1366:	14 00 20    	mov.w     #0x1, w4
    1368:	b8 00 37    	bra       0x14da <__fcompare>

0000136a <___fixunssfsi>:
    136a:	00 01 be    	mov.d     w0, w2
    136c:	42 00 07    	rcall     0x13f2 <__funpack>
    136e:	04 70 a7    	btsc.w    w4, #0x7
    1370:	03 f0 a1    	bclr.w    w3, #0xf
    1372:	03 f8 a3    	btst.z    w3, #0xf
    1374:	13 00 3a    	bra       NZ, 0x139c <returnzero>
    1376:	65 09 b1    	sub.w     #0x96, w5
    1378:	10 00 32    	bra       Z, 0x139a <exit>
    137a:	09 00 35    	bra       LT, 0x138e <shiftright>
    137c:	69 28 e1    	cp.w      w5, #0x9
    137e:	02 00 35    	bra       LT, 0x1384 <shiftleft>
    1380:	01 00 28    	mov.w     #0x8000, w1
    1382:	00 00 05    	retlw.w   #0x0, w0

00001384 <shiftleft>:
    1384:	00 00 40    	add.w     w0, w0, w0
    1386:	81 80 48    	addc.w    w1, w1, w1
    1388:	85 02 e9    	dec.w     w5, w5
    138a:	fc ff 3a    	bra       NZ, 0x1384 <shiftleft>
    138c:	00 00 06    	return    

0000138e <shiftright>:
    138e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1390:	05 00 35    	bra       LT, 0x139c <returnzero>

00001392 <shiftrightloop>:
    1392:	81 00 d1    	lsr.w     w1, w1
    1394:	00 80 d3    	rrc.w     w0, w0
    1396:	85 02 e8    	inc.w     w5, w5
    1398:	fc ff 3a    	bra       NZ, 0x1392 <shiftrightloop>

0000139a <exit>:
    139a:	00 00 06    	return    

0000139c <returnzero>:
    139c:	80 00 eb    	clr.w     w1
    139e:	00 00 05    	retlw.w   #0x0, w0

000013a0 <___floatsisf>:
    13a0:	4f 89 de    	asr.w     w1, #0xf, w2
    13a2:	82 01 78    	mov.w     w2, w3
    13a4:	b5 00 37    	bra       0x1510 <___floatdisf>

000013a6 <__fpack>:
    13a6:	81 00 20    	mov.w     #0x8, w1
    13a8:	61 80 55    	sub.w     w11, #0x1, w0
    13aa:	0b 00 3d    	bra       GE, 0x13c2 <notsubnormal>
    13ac:	0b 00 20    	mov.w     #0x0, w11
    13ae:	61 fe 2f    	mov.w     #0xffe6, w1
    13b0:	01 00 e1    	cp.w      w0, w1
    13b2:	1d 00 34    	bra       LE, 0x13ee <zerosig>

000013b4 <subnormal>:
    13b4:	82 81 71    	ior.w     w3, w2, w3
    13b6:	61 01 64    	and.w     w8, #0x1, w2
    13b8:	89 04 d1    	lsr.w     w9, w9
    13ba:	08 84 d3    	rrc.w     w8, w8
    13bc:	00 00 e8    	inc.w     w0, w0
    13be:	fa ff 3a    	bra       NZ, 0x13b4 <subnormal>
    13c0:	71 00 20    	mov.w     #0x7, w1

000013c2 <notsubnormal>:
    13c2:	61 00 64    	and.w     w8, #0x1, w0
    13c4:	03 00 70    	ior.w     w0, w3, w0
    13c6:	02 00 60    	and.w     w0, w2, w0
    13c8:	09 00 32    	bra       Z, 0x13dc <packupandgo>
    13ca:	61 04 44    	add.w     w8, #0x1, w8
    13cc:	e0 84 4c    	addc.w    w9, #0x0, w9
    13ce:	09 88 a5    	btst.z    w9, w1
    13d0:	05 00 32    	bra       Z, 0x13dc <packupandgo>
    13d2:	8b 05 e8    	inc.w     w11, w11
    13d4:	68 08 e1    	cp.w      w1, #0x8
    13d6:	02 00 3a    	bra       NZ, 0x13dc <packupandgo>
    13d8:	89 04 d1    	lsr.w     w9, w9
    13da:	08 84 d3    	rrc.w     w8, w8

000013dc <packupandgo>:
    13dc:	f2 0f 20    	mov.w     #0xff, w2
    13de:	02 58 e1    	cp.w      w11, w2
    13e0:	05 00 3d    	bra       GE, 0x13ec <overflow>
    13e2:	c7 5d dd    	sl.w      w11, #0x7, w11
    13e4:	f9 07 b2    	and.w     #0x7f, w9
    13e6:	89 80 75    	ior.w     w11, w9, w1
    13e8:	08 00 78    	mov.w     w8, w0
    13ea:	00 00 06    	return    

000013ec <overflow>:
    13ec:	0b f8 27    	mov.w     #0x7f80, w11

000013ee <zerosig>:
    13ee:	8b 00 78    	mov.w     w11, w1
    13f0:	00 00 05    	retlw.w   #0x0, w0

000013f2 <__funpack>:
    13f2:	c7 0a de    	lsr.w     w1, #0x7, w5
    13f4:	f1 07 b2    	and.w     #0x7f, w1
    13f6:	f5 0f b2    	and.w     #0xff, w5
    13f8:	08 00 32    	bra       Z, 0x140a <zeroorsub>
    13fa:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13fc:	02 00 32    	bra       Z, 0x1402 <nanorinf>

000013fe <finitereturn>:
    13fe:	01 70 a0    	bset.w    w1, #0x7
    1400:	24 00 05    	retlw.w   #0x2, w4

00001402 <nanorinf>:
    1402:	81 0f 70    	ior.w     w0, w1, [w15]
    1404:	01 00 32    	bra       Z, 0x1408 <infinite>
    1406:	04 08 05    	retlw.w   #0x80, w4

00001408 <infinite>:
    1408:	44 00 05    	retlw.w   #0x4, w4

0000140a <zeroorsub>:
    140a:	81 0f 70    	ior.w     w0, w1, [w15]
    140c:	02 00 3a    	bra       NZ, 0x1412 <subnormal>
    140e:	14 00 05    	retlw.w   #0x1, w4

00001410 <normalize>:
    1410:	85 02 e9    	dec.w     w5, w5

00001412 <subnormal>:
    1412:	00 00 40    	add.w     w0, w0, w0
    1414:	81 c0 48    	addc.b    w1, w1, w1
    1416:	fc ff 3b    	bra       NN, 0x1410 <normalize>
    1418:	01 70 a0    	bset.w    w1, #0x7
    141a:	24 00 05    	retlw.w   #0x2, w4

0000141c <__funpack2>:
    141c:	00 04 be    	mov.d     w0, w8
    141e:	e9 ff 07    	rcall     0x13f2 <__funpack>
    1420:	00 03 be    	mov.d     w0, w6
    1422:	04 05 be    	mov.d     w4, w10
    1424:	02 00 be    	mov.d     w2, w0
    1426:	e5 ff 07    	rcall     0x13f2 <__funpack>
    1428:	84 4f 75    	ior.b     w10, w4, [w15]
    142a:	00 00 06    	return    

0000142c <__fPropagateNaN>:
    142c:	02 00 be    	mov.d     w2, w0
    142e:	64 50 e1    	cp.w      w10, #0x4
    1430:	05 00 36    	bra       LEU, 0x143c <return0>
    1432:	64 20 e1    	cp.w      w4, #0x4
    1434:	02 00 36    	bra       LEU, 0x143a <return8>
    1436:	09 68 a3    	btst.z    w9, #0x6
    1438:	01 00 3a    	bra       NZ, 0x143c <return0>

0000143a <return8>:
    143a:	08 00 be    	mov.d     w8, w0

0000143c <return0>:
    143c:	01 60 a0    	bset.w    w1, #0x6

0000143e <__fbopExit>:
    143e:	4f 06 78    	mov.w     [--w15], w12
    1440:	4f 05 be    	mov.d     [--w15], w10
    1442:	4f 04 be    	mov.d     [--w15], w8
    1444:	00 00 06    	return    

00001446 <__fbopReturnNaN>:
    1446:	f0 ff 2f    	mov.w     #0xffff, w0
    1448:	f1 ff 27    	mov.w     #0x7fff, w1
    144a:	f9 ff 37    	bra       0x143e <__fbopExit>

0000144c <___mulsf3>:
    144c:	88 9f be    	mov.d     w8, [w15++]
    144e:	8a 9f be    	mov.d     w10, [w15++]
    1450:	8c 1f 78    	mov.w     w12, [w15++]
    1452:	e4 ff 07    	rcall     0x141c <__funpack2>
    1454:	eb ff 33    	bra       N, 0x142c <__fPropagateNaN>
    1456:	03 86 6c    	xor.w     w9, w3, w12
    1458:	64 50 e1    	cp.w      w10, #0x4
    145a:	24 00 32    	bra       Z, 0x14a4 <aisinfinite>
    145c:	64 20 e1    	cp.w      w4, #0x4
    145e:	27 00 32    	bra       Z, 0x14ae <bisinfinite>
    1460:	61 50 e1    	cp.w      w10, #0x1
    1462:	22 00 32    	bra       Z, 0x14a8 <return8>
    1464:	61 20 e1    	cp.w      w4, #0x1
    1466:	21 00 32    	bra       Z, 0x14aa <return2>
    1468:	8b 85 42    	add.w     w5, w11, w11
    146a:	eb 07 b1    	sub.w     #0x7e, w11
    146c:	01 34 b8    	mul.uu    w6, w1, w8
    146e:	00 3a b8    	mul.uu    w7, w0, w4
    1470:	08 04 42    	add.w     w4, w8, w8
    1472:	89 84 4a    	addc.w    w5, w9, w9
    1474:	01 3a b8    	mul.uu    w7, w1, w4
    1476:	00 30 b8    	mul.uu    w6, w0, w0
    1478:	88 80 40    	add.w     w1, w8, w1
    147a:	09 01 4a    	addc.w    w4, w9, w2
    147c:	04 00 33    	bra       N, 0x1486 <formsticky>
    147e:	00 00 40    	add.w     w0, w0, w0
    1480:	81 80 48    	addc.w    w1, w1, w1
    1482:	02 01 49    	addc.w    w2, w2, w2
    1484:	8b 05 e9    	dec.w     w11, w11

00001486 <formsticky>:
    1486:	c9 09 dd    	sl.w      w1, #0x9, w3
    1488:	83 01 70    	ior.w     w0, w3, w3
    148a:	01 00 32    	bra       Z, 0x148e <formRandSig>
    148c:	13 00 20    	mov.w     #0x1, w3

0000148e <formRandSig>:
    148e:	c8 14 de    	lsr.w     w2, #0x8, w9
    1490:	48 14 dd    	sl.w      w2, #0x8, w8
    1492:	47 09 de    	lsr.w     w1, #0x7, w2
    1494:	12 00 b2    	and.w     #0x1, w2
    1496:	c8 08 de    	lsr.w     w1, #0x8, w1
    1498:	08 84 70    	ior.w     w1, w8, w8
    149a:	85 ff 07    	rcall     0x13a6 <__fpack>

0000149c <return0>:
    149c:	01 f0 a1    	bclr.w    w1, #0xf
    149e:	0c f0 a7    	btsc.w    w12, #0xf
    14a0:	01 f0 a0    	bset.w    w1, #0xf
    14a2:	cd ff 37    	bra       0x143e <__fbopExit>

000014a4 <aisinfinite>:
    14a4:	61 20 e1    	cp.w      w4, #0x1
    14a6:	cf ff 32    	bra       Z, 0x1446 <__fbopReturnNaN>

000014a8 <return8>:
    14a8:	08 01 be    	mov.d     w8, w2

000014aa <return2>:
    14aa:	02 00 be    	mov.d     w2, w0
    14ac:	f7 ff 37    	bra       0x149c <return0>

000014ae <bisinfinite>:
    14ae:	61 50 e1    	cp.w      w10, #0x1
    14b0:	fc ff 3a    	bra       NZ, 0x14aa <return2>
    14b2:	c9 ff 37    	bra       0x1446 <__fbopReturnNaN>

000014b4 <___udivsi3>:
    14b4:	60 22 b8    	mul.uu    w4, #0x0, w4
    14b6:	06 02 20    	mov.w     #0x20, w6

000014b8 <nextbit>:
    14b8:	00 00 d0    	sl.w      w0, w0
    14ba:	81 80 d2    	rlc.w     w1, w1
    14bc:	04 82 d2    	rlc.w     w4, w4
    14be:	85 82 d2    	rlc.w     w5, w5
    14c0:	00 00 a0    	bset.w    w0, #0x0
    14c2:	02 02 52    	sub.w     w4, w2, w4
    14c4:	83 82 5a    	subb.w    w5, w3, w5
    14c6:	03 00 31    	bra       C, 0x14ce <iterate>
    14c8:	02 02 42    	add.w     w4, w2, w4
    14ca:	83 82 4a    	addc.w    w5, w3, w5
    14cc:	00 00 a1    	bclr.w    w0, #0x0

000014ce <iterate>:
    14ce:	06 03 e9    	dec.w     w6, w6
    14d0:	f3 ff 3a    	bra       NZ, 0x14b8 <nextbit>
    14d2:	00 00 06    	return    

000014d4 <___umodsi3>:
    14d4:	ef ff 07    	rcall     0x14b4 <___udivsi3>
    14d6:	04 00 be    	mov.d     w4, w0
    14d8:	00 00 06    	return    

000014da <__fcompare>:
    14da:	88 9f be    	mov.d     w8, [w15++]
    14dc:	8a 9f be    	mov.d     w10, [w15++]
    14de:	84 1f 78    	mov.w     w4, [w15++]
    14e0:	9d ff 07    	rcall     0x141c <__funpack2>
    14e2:	4f 00 78    	mov.w     [--w15], w0
    14e4:	11 00 33    	bra       N, 0x1508 <exit>
    14e6:	f0 ff 2f    	mov.w     #0xffff, w0
    14e8:	83 8f 6c    	xor.w     w9, w3, [w15]
    14ea:	06 00 3b    	bra       NN, 0x14f8 <comparemag>
    14ec:	04 05 65    	and.w     w10, w4, w10
    14ee:	0a 00 a7    	btsc.w    w10, #0x0
    14f0:	08 00 37    	bra       0x1502 <returnEqual>
    14f2:	09 f0 a6    	btss.w    w9, #0xf
    14f4:	10 00 20    	mov.w     #0x1, w0
    14f6:	08 00 37    	bra       0x1508 <exit>

000014f8 <comparemag>:
    14f8:	82 0f 54    	sub.w     w8, w2, [w15]
    14fa:	83 8f 5c    	subb.w    w9, w3, [w15]
    14fc:	03 00 39    	bra       NC, 0x1504 <adjust>
    14fe:	10 00 20    	mov.w     #0x1, w0
    1500:	01 00 3e    	bra       GTU, 0x1504 <adjust>

00001502 <returnEqual>:
    1502:	00 00 20    	mov.w     #0x0, w0

00001504 <adjust>:
    1504:	09 f0 a7    	btsc.w    w9, #0xf
    1506:	00 00 ea    	neg.w     w0, w0

00001508 <exit>:
    1508:	4f 05 be    	mov.d     [--w15], w10
    150a:	4f 04 be    	mov.d     [--w15], w8
    150c:	00 00 e0    	cp0.w     w0
    150e:	00 00 06    	return    

00001510 <___floatdisf>:
    1510:	88 1f 78    	mov.w     w8, [w15++]
    1512:	03 04 78    	mov.w     w3, w8
    1514:	03 00 e0    	cp0.w     w3
    1516:	07 00 3d    	bra       GE, 0x1526 <notspecial>

00001518 <negative>:
    1518:	60 00 10    	subr.w    w0, #0x0, w0
    151a:	e0 80 18    	subbr.w   w1, #0x0, w1
    151c:	60 01 19    	subbr.w   w2, #0x0, w2
    151e:	e0 81 19    	subbr.w   w3, #0x0, w3
    1520:	02 00 3b    	bra       NN, 0x1526 <notspecial>
    1522:	01 f0 2d    	mov.w     #0xdf00, w1
    1524:	03 00 37    	bra       0x152c <return0>

00001526 <notspecial>:
    1526:	04 00 07    	rcall     0x1530 <___floatundisf>
    1528:	08 f0 a7    	btsc.w    w8, #0xf
    152a:	01 f0 a0    	bset.w    w1, #0xf

0000152c <return0>:
    152c:	4f 04 78    	mov.w     [--w15], w8
    152e:	00 00 06    	return    

00001530 <___floatundisf>:
    1530:	88 9f be    	mov.d     w8, [w15++]
    1532:	8a 9f be    	mov.d     w10, [w15++]
    1534:	00 82 70    	ior.w     w1, w0, w4
    1536:	04 02 71    	ior.w     w2, w4, w4
    1538:	04 82 71    	ior.w     w3, w4, w4
    153a:	26 00 32    	bra       Z, 0x1588 <return0>
    153c:	00 04 be    	mov.d     w0, w8
    153e:	02 00 be    	mov.d     w2, w0
    1540:	60 11 b8    	mul.uu    w2, #0x0, w2
    1542:	6b 09 20    	mov.w     #0x96, w11
    1544:	95 02 20    	mov.w     #0x29, w5
    1546:	01 82 cf    	ff1l      w1, w4
    1548:	0a 00 39    	bra       NC, 0x155e <fixshift>
    154a:	05 41 b1    	sub.b     #0x10, w5
    154c:	00 82 cf    	ff1l      w0, w4
    154e:	07 00 39    	bra       NC, 0x155e <fixshift>
    1550:	05 41 b1    	sub.b     #0x10, w5
    1552:	09 82 cf    	ff1l      w9, w4
    1554:	04 00 39    	bra       NC, 0x155e <fixshift>
    1556:	05 41 b1    	sub.b     #0x10, w5
    1558:	08 82 cf    	ff1l      w8, w4
    155a:	01 00 39    	bra       NC, 0x155e <fixshift>
    155c:	05 41 b1    	sub.b     #0x10, w5

0000155e <fixshift>:
    155e:	05 42 52    	sub.b     w4, w5, w4
    1560:	12 00 32    	bra       Z, 0x1586 <round>
    1562:	0a 00 3b    	bra       NN, 0x1578 <shiftleft>

00001564 <shiftright>:
    1564:	82 81 71    	ior.w     w3, w2, w3
    1566:	61 01 64    	and.w     w8, #0x1, w2
    1568:	81 00 d1    	lsr.w     w1, w1
    156a:	00 80 d3    	rrc.w     w0, w0
    156c:	89 84 d3    	rrc.w     w9, w9
    156e:	08 84 d3    	rrc.w     w8, w8
    1570:	8b 05 e8    	inc.w     w11, w11
    1572:	04 42 e8    	inc.b     w4, w4
    1574:	f7 ff 3a    	bra       NZ, 0x1564 <shiftright>
    1576:	07 00 37    	bra       0x1586 <round>

00001578 <shiftleft>:
    1578:	08 04 44    	add.w     w8, w8, w8
    157a:	89 84 4c    	addc.w    w9, w9, w9
    157c:	00 00 48    	addc.w    w0, w0, w0
    157e:	81 80 48    	addc.w    w1, w1, w1
    1580:	8b 05 e9    	dec.w     w11, w11
    1582:	04 42 e9    	dec.b     w4, w4
    1584:	f9 ff 3a    	bra       NZ, 0x1578 <shiftleft>

00001586 <round>:
    1586:	0f ff 07    	rcall     0x13a6 <__fpack>

00001588 <return0>:
    1588:	4f 05 be    	mov.d     [--w15], w10
    158a:	4f 04 be    	mov.d     [--w15], w8
    158c:	00 00 06    	return    

0000158e <_memset>:
    158e:	80 01 78    	mov.w     w0, w3
    1590:	02 00 37    	bra       0x1596 <.L2>

00001592 <.L3>:
    1592:	81 59 78    	mov.b     w1, [w3++]
    1594:	02 01 e9    	dec.w     w2, w2

00001596 <.L2>:
    1596:	02 00 e0    	cp0.w     w2
    1598:	fc ff 3a    	bra       NZ, 0x1592 <.L3>
    159a:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	f0 26 04    	goto      0x26f0 <__T1Interrupt>
    1026:	00 00 00 
    1028:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	2c 27 04    	goto      0x272c <__T2Interrupt>
    1032:	00 00 00 
    1034:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	86 28 04    	goto      0x2886 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000959c <_numbertable>:
    959c:	3f 00       	.word 0x3f
    959e:	06 00       	.word 0x6
    95a0:	5b 00       	.word 0x5b
    95a2:	4f 00       	.word 0x4f
    95a4:	66 00       	.word 0x66
    95a6:	6d 00       	.word 0x6d
    95a8:	7d 00       	.word 0x7d
    95aa:	07 00       	.word 0x7
    95ac:	7f 00       	.word 0x7f
    95ae:	6f 00       	.word 0x6f
    95b0:	77 00       	.word 0x77
    95b2:	7c 00       	.word 0x7c
    95b4:	39 00       	.word 0x39
    95b6:	5e 00       	.word 0x5e
    95b8:	79 00       	.word 0x79
    95ba:	71 00       	.word 0x71
	...

000095c0 <_alphafonttable>:
    95c0:	01 00       	.word 0x1
    95c2:	02 00       	.word 0x2
    95c4:	04 00       	.word 0x4
    95c6:	08 00       	.word 0x8
    95c8:	10 00       	.word 0x10
    95ca:	20 00       	.word 0x20
    95cc:	40 00       	.word 0x40
    95ce:	80 00       	.word 0x80
    95d0:	00 01       	.word 0x100
    95d2:	00 02       	.word 0x200
    95d4:	00 04       	.word 0x400
    95d6:	00 08       	.word 0x800
    95d8:	00 10       	.word 0x1000
    95da:	00 20       	.word 0x2000
    95dc:	00 40       	.word 0x4000
    95de:	00 80       	.word 0x8000
	...
    95f0:	c9 12       	.word 0x12c9
    95f2:	c0 15       	.word 0x15c0
    95f4:	f9 12       	.word 0x12f9
    95f6:	e3 00       	.word 0xe3
    95f8:	30 05       	.word 0x530
    95fa:	c8 12       	.word 0x12c8
    95fc:	00 3a       	.word 0x3a00
    95fe:	00 17       	.word 0x1700
    9600:	00 00       	.word 0
    9602:	06 00       	.word 0x6
    9604:	20 02       	.word 0x220
    9606:	ce 12       	.word 0x12ce
    9608:	ed 12       	.word 0x12ed
    960a:	24 0c       	.word 0xc24
    960c:	5d 23       	.word 0x235d
    960e:	00 04       	.word 0x400
    9610:	00 24       	.word 0x2400
    9612:	00 09       	.word 0x900
    9614:	c0 3f       	.word 0x3fc0
    9616:	c0 12       	.word 0x12c0
    9618:	00 08       	.word 0x800
    961a:	c0 00       	.word 0xc0
    961c:	00 00       	.word 0
    961e:	00 0c       	.word 0xc00
    9620:	3f 0c       	.word 0xc3f
    9622:	06 00       	.word 0x6
    9624:	db 00       	.word 0xdb
    9626:	8f 00       	.word 0x8f
    9628:	e6 00       	.word 0xe6
    962a:	69 20       	.word 0x2069
    962c:	fd 00       	.word 0xfd
    962e:	07 00       	.word 0x7
    9630:	ff 00       	.word 0xff
    9632:	ef 00       	.word 0xef
    9634:	00 12       	.word 0x1200
    9636:	00 0a       	.word 0xa00
    9638:	00 24       	.word 0x2400
    963a:	c8 00       	.word 0xc8
    963c:	00 09       	.word 0x900
    963e:	83 10       	.word 0x1083
    9640:	bb 02       	.word 0x2bb
    9642:	f7 00       	.word 0xf7
    9644:	8f 12       	.word 0x128f
    9646:	39 00       	.word 0x39
    9648:	0f 12       	.word 0x120f
    964a:	f9 00       	.word 0xf9
    964c:	71 00       	.word 0x71
    964e:	bd 00       	.word 0xbd
    9650:	f6 00       	.word 0xf6
    9652:	00 12       	.word 0x1200
    9654:	1e 00       	.word 0x1e
    9656:	70 24       	.word 0x2470
    9658:	38 00       	.word 0x38
    965a:	36 05       	.word 0x536
    965c:	36 21       	.word 0x2136
    965e:	3f 00       	.word 0x3f
    9660:	f3 00       	.word 0xf3
    9662:	3f 20       	.word 0x203f
    9664:	f3 20       	.word 0x20f3
    9666:	ed 00       	.word 0xed
    9668:	01 12       	.word 0x1201
    966a:	3e 00       	.word 0x3e
    966c:	30 0c       	.word 0xc30
    966e:	36 28       	.word 0x2836
    9670:	00 2d       	.word 0x2d00
    9672:	00 15       	.word 0x1500
    9674:	09 0c       	.word 0xc09
    9676:	39 00       	.word 0x39
    9678:	00 21       	.word 0x2100
    967a:	0f 00       	.word 0xf
    967c:	03 0c       	.word 0xc03
    967e:	08 00       	.word 0x8
    9680:	00 01       	.word 0x100
    9682:	58 10       	.word 0x1058
    9684:	78 20       	.word 0x2078
    9686:	d8 00       	.word 0xd8
    9688:	8e 08       	.word 0x88e
    968a:	58 08       	.word 0x858
    968c:	71 00       	.word 0x71
    968e:	8e 04       	.word 0x48e
    9690:	70 10       	.word 0x1070
    9692:	00 10       	.word 0x1000
    9694:	0e 00       	.word 0xe
    9696:	00 36       	.word 0x3600
    9698:	30 00       	.word 0x30
    969a:	d4 10       	.word 0x10d4
    969c:	50 10       	.word 0x1050
    969e:	dc 00       	.word 0xdc
    96a0:	70 01       	.word 0x170
    96a2:	86 04       	.word 0x486
    96a4:	50 00       	.word 0x50
    96a6:	88 20       	.word 0x2088
    96a8:	78 00       	.word 0x78
    96aa:	1c 00       	.word 0x1c
    96ac:	04 20       	.word 0x2004
    96ae:	14 28       	.word 0x2814
    96b0:	c0 28       	.word 0x28c0
    96b2:	0c 20       	.word 0x200c
    96b4:	48 08       	.word 0x848
    96b6:	49 09       	.word 0x949
    96b8:	00 12       	.word 0x1200
    96ba:	89 24       	.word 0x2489
    96bc:	20 05       	.word 0x520
    96be:	ff 3f       	.word 0x3fff

000096c0 <_PWM_PERIOD_2_3>:
    96c0:	2b 1b       	.word 0x1b2b

000096c2 <_PWM_PERIOD_1_9>:
    96c2:	e4 20       	.word 0x20e4
Disassembly of section .text:

000016c4 <_strikeLEDOff>:

typedef void (*STATE_HANDLER_T)(void);
STATE_HANDLER_T state, last_state;

void strikeLEDOff() {
    16c4:	00 00 fa    	lnk       #0x0
    STRIKE1_RLED = OFF; delay_by_nop(1);
    16c6:	da a2 a9    	bclr.b    0x2da, #0x5
    16c8:	10 00 20    	mov.w     #0x1, w0
    16ca:	01 00 20    	mov.w     #0x0, w1
    16cc:	cf 05 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE1_GLED = OFF; delay_by_nop(1);
    16ce:	da 82 a9    	bclr.b    0x2da, #0x4
    16d0:	10 00 20    	mov.w     #0x1, w0
    16d2:	01 00 20    	mov.w     #0x0, w1
    16d4:	cb 05 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE2_RLED = OFF; delay_by_nop(1);
    16d6:	da 02 a9    	bclr.b    0x2da, #0x0
    16d8:	10 00 20    	mov.w     #0x1, w0
    16da:	01 00 20    	mov.w     #0x0, w1
    16dc:	c7 05 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE2_GLED = OFF; delay_by_nop(1);
    16de:	da 22 a9    	bclr.b    0x2da, #0x1
    16e0:	10 00 20    	mov.w     #0x1, w0
    16e2:	01 00 20    	mov.w     #0x0, w1
    16e4:	c3 05 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE3_RLED = OFF; delay_by_nop(1);
    16e6:	cb e2 a9    	bclr.b    0x2cb, #0x7
    16e8:	10 00 20    	mov.w     #0x1, w0
    16ea:	01 00 20    	mov.w     #0x0, w1
    16ec:	bf 05 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE3_GLED = OFF; delay_by_nop(1);
    16ee:	ea 62 a9    	bclr.b    0x2ea, #0x3
    16f0:	10 00 20    	mov.w     #0x1, w0
    16f2:	01 00 20    	mov.w     #0x0, w1
    16f4:	bb 05 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    16f6:	00 80 fa    	ulnk      
    16f8:	00 00 06    	return    

000016fa <_main>:

// MAIN FUNCTION ***************************************************************

int16_t main(void) {
    16fa:	08 00 fa    	lnk       #0x8
    init_elecanisms();
    16fc:	64 08 07    	rcall     0x27c6 <.LFE3> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    init_clock(); // not sure if this does anything
    16fe:	00 10 20    	mov.w     #0x100, w0
    1700:	20 3a 88    	mov.w     w0, 0x744
    // Initializes I2C on I2C3
    i2c_init(1e3);
    1702:	80 3e 20    	mov.w     #0x3e8, w0
    1704:	c6 05 07    	rcall     0x2292 <_i2c_init> <.LFB1> <.LFE0>
    led_begin((_ADAFRUIT_LED*)&matrix.super, matrix_addr); // Set up the HT16K33 and start the oscillator
    1706:	0c c8 bf    	mov.b     0x80c, WREG
    1708:	80 40 78    	mov.b     w0, w1
    170a:	e0 80 20    	mov.w     #0x80e, w0
    170c:	fd 02 07    	rcall     0x1d08 <_led_begin> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>

    time_left = max_time; // Set up time left to be max time
    170e:	c0 12 20    	mov.w     #0x12c, w0
    1710:	00 40 88    	mov.w     w0, 0x800

    // Setup pins as output
    D0_DIR = 0;
    1712:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    D1_DIR = 0;
    1714:	d8 82 a9    	bclr.b    0x2d8, #0x4
    D10_DIR = 0;
    1716:	d8 02 a9    	bclr.b    0x2d8, #0x0
    D11_DIR = 0;
    1718:	d8 22 a9    	bclr.b    0x2d8, #0x1
    D4_DIR = 0;
    171a:	c9 e2 a9    	bclr.b    0x2c9, #0x7
    D5_DIR = 0;
    171c:	e8 62 a9    	bclr.b    0x2e8, #0x3
    D6_DIR = 0;
    171e:	d9 02 a9    	bclr.b    0x2d9, #0x0
    D7_DIR = 0;
    1720:	d9 62 a9    	bclr.b    0x2d9, #0x3
    D9_DIR = 0;
    1722:	d9 42 a9    	bclr.b    0x2d9, #0x2


    // Init button low
    BUTTON_LED = 0;
    1724:	db 02 a9    	bclr.b    0x2db, #0x0
    BUTTON_LED_LOW = 0;
    1726:	db 62 a9    	bclr.b    0x2db, #0x3

    // Setup D8 as input
    D8_DIR = 1;
    1728:	d9 22 a8    	bset.b    0x2d9, #0x1
    // Set up pull-up resistor on button D8
    CNPU4bits.CN54PUE = 1;
    172a:	74 c0 a8    	bset.b    0x74, #0x6
    // Set D9 as pull-down for button
    D9 = 0;
    172c:	db 42 a9    	bclr.b    0x2db, #0x2

    /* Timer 1 setup for game timing*/
    T1CON = 0x0030;         // set Timer1 period to 1s
    172e:	00 03 20    	mov.w     #0x30, w0
    1730:	20 08 88    	mov.w     w0, 0x104
    PR1 = 0xF422;
    1732:	20 42 2f    	mov.w     #0xf422, w0
    1734:	10 08 88    	mov.w     w0, 0x102
    TMR1 = 0;               // set Timer1 count to 0
    1736:	00 21 ef    	clr.w     0x100
    IFS0bits.T1IF = 0;      // lower Timer1 interrupt flag
    1738:	84 60 a9    	bclr.b    0x84, #0x3
    IEC0bits.T1IE = 1;      // enable Timer1 interrupt
    173a:	94 60 a8    	bset.b    0x94, #0x3

    /* Timer 2 setup for beep timing*/
    T2CON = 0x0030;
    173c:	00 03 20    	mov.w     #0x30, w0
    173e:	80 08 88    	mov.w     w0, 0x110
    PR2 = 0x186A;           // set Timer2 period to 0.1s
    1740:	a0 86 21    	mov.w     #0x186a, w0
    1742:	60 08 88    	mov.w     w0, 0x10c
    TMR2 = 0;               // set Timer1 count to 0
    1744:	06 21 ef    	clr.w     0x106
    IFS0bits.T2IF = 0;      // lower T2 interrupt flag
    1746:	84 e0 a9    	bclr.b    0x84, #0x7
    IEC0bits.T2IE = 1;      // enable T2 interrupt
    1748:	94 e0 a8    	bset.b    0x94, #0x7

    /* Remap OC1 to D11 */
    uint8_t *RPOR, *RPINR;
    RPOR = (uint8_t *)&RPOR0;
    174a:	00 6c 20    	mov.w     #0x6c0, w0
    174c:	10 07 98    	mov.w     w0, [w14+2]
    RPINR = (uint8_t *)&RPINR0;
    174e:	00 68 20    	mov.w     #0x680, w0
    1750:	20 07 98    	mov.w     w0, [w14+4]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    1752:	11 3a 80    	mov.w     0x742, w1
    1754:	f0 0b 20    	mov.w     #0xbf, w0
    1756:	00 81 60    	and.w     w1, w0, w2
    1758:	60 04 20    	mov.w     #0x46, w0
    175a:	71 05 20    	mov.w     #0x57, w1
    175c:	23 74 20    	mov.w     #0x742, w3
    175e:	80 49 78    	mov.b     w0, [w3]
    1760:	81 49 78    	mov.b     w1, [w3]
    1762:	82 49 78    	mov.b     w2, [w3]
    RPOR[D12_RP] = OC1_RP;  // connect the OC1 module output to pin D8
    1764:	1e 00 90    	mov.w     [w14+2], w0
    1766:	77 00 40    	add.w     w0, #0x17, w0
    1768:	21 c1 b3    	mov.b     #0x12, w1
    176a:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    176c:	10 3a 80    	mov.w     0x742, w0
    176e:	00 01 78    	mov.w     w0, w2
    1770:	02 60 a0    	bset.w    w2, #0x6
    1772:	60 04 20    	mov.w     #0x46, w0
    1774:	71 05 20    	mov.w     #0x57, w1
    1776:	23 74 20    	mov.w     #0x742, w3
    1778:	80 49 78    	mov.b     w0, [w3]
    177a:	81 49 78    	mov.b     w1, [w3]
    177c:	82 49 78    	mov.b     w2, [w3]

    /* OC1 setup for beep output*/
    OC1CON1bits.OCTSEL = 0b111;   // configure OC1 module to use the peripheral
    177e:	81 0c 80    	mov.w     0x190, w1
    1780:	00 c0 21    	mov.w     #0x1c00, w0
    1782:	01 00 70    	ior.w     w0, w1, w0
    1784:	80 0c 88    	mov.w     w0, 0x190
                                  //   clock (i.e., FCY, OCTSEL<2:0> = 0b111) and
    OC1CON1bits.OCM = 0b110;      //   and to operate in edge-aligned PWM mode
    1786:	81 0c 80    	mov.w     0x190, w1
    1788:	80 ff 2f    	mov.w     #0xfff8, w0
    178a:	00 80 60    	and.w     w1, w0, w0
    178c:	60 00 b3    	ior.w     #0x6, w0
    178e:	80 0c 88    	mov.w     w0, 0x190
                                  //   (OCM<2:0> = 0b110)
    OC1CON2bits.OCTRIG = 0;       // configure OC1 module to syncrhonize to itself
    1790:	92 e1 a9    	bclr.b    0x192, #0x7
    OC1CON2bits.SYNCSEL = 0x1F;   //   (i.e., OCTRIG = 0 and SYNCSEL<4:0> = 0b11111)
    1792:	90 0c 80    	mov.w     0x192, w0
    1794:	f0 01 b3    	ior.w     #0x1f, w0
    1796:	90 0c 88    	mov.w     w0, 0x192

    OC1RS = PWM_PERIOD_2_3;       // configure period register to get 2.3 kHz
    1798:	00 b6 84    	mov.w     0x96c0, w0
    179a:	a0 0c 88    	mov.w     w0, 0x194
    OC1TMR = 0;                   // set OC1 timer count to 0
    179c:	98 21 ef    	clr.w     0x198
    OC1R = 0;                     // start with it off
    179e:	96 21 ef    	clr.w     0x196


    state = idle;           // Initialize state to idle
    17a0:	e0 82 21    	mov.w     #0x182e, w0
    17a2:	30 40 88    	mov.w     w0, 0x806
    last_state = (STATE_HANDLER_T)NULL;
    17a4:	08 28 ef    	clr.w     0x808

    memset(peripheral_present, 0, 6); // set arrays to 0
    17a6:	62 00 20    	mov.w     #0x6, w2
    17a8:	80 00 eb    	clr.w     w1
    17aa:	20 c2 20    	mov.w     #0xc22, w0
    17ac:	f0 fe 07    	rcall     0x158e <_memset>
    memset(peripheral_complete, 0, 6);
    17ae:	62 00 20    	mov.w     #0x6, w2
    17b0:	80 00 eb    	clr.w     w1
    17b2:	80 c2 20    	mov.w     #0xc28, w0
    17b4:	ec fe 07    	rcall     0x158e <_memset>
    num_strikes = 0;
    17b6:	03 68 ef    	clr.b     0x803
    prev_num_strikes = 0;
    17b8:	04 68 ef    	clr.b     0x804
    game_complete = 0;
    17ba:	05 68 ef    	clr.b     0x805

    i2c2_init(157);      // initialize I2C for 16Mhz OSC with 100kHz I2C clock
    17bc:	d0 09 20    	mov.w     #0x9d, w0
    17be:	a9 06 07    	rcall     0x2512 <_i2c2_init> <.LFB13> <.LFE12>

    delay_by_nop(300000);
    17c0:	00 3e 29    	mov.w     #0x93e0, w0
    17c2:	41 00 20    	mov.w     #0x4, w1
    17c4:	53 05 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>


    uint8_t i = 0;
    17c6:	00 40 eb    	clr.b     w0
    17c8:	00 4f 78    	mov.b     w0, [w14]
    // Poll the peripherals to see who's here
    for (i = 0; i < 6; i++) {
    17ca:	00 40 eb    	clr.b     w0
    17cc:	00 4f 78    	mov.b     w0, [w14]
    17ce:	14 00 37    	bra       0x17f8 <.L3>

000017d0 <.L5>:
        uint8_t temp = 0;
    17d0:	00 40 eb    	clr.b     w0
    17d2:	60 47 98    	mov.b     w0, [w14+6]

        i2c2_start();
    17d4:	ab 06 07    	rcall     0x252c <_i2c2_start> <.LFB14> <.LFE13>
        temp = send_i2c2_byte(peripheral_addrs[i]); // set /W bit
    17d6:	1e 80 fb    	ze        [w14], w0
    17d8:	e1 c2 20    	mov.w     #0xc2e, w1
    17da:	61 40 78    	mov.b     [w1+w0], w0
    17dc:	00 80 fb    	ze        w0, w0
    17de:	f5 06 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
    17e0:	60 47 98    	mov.b     w0, [w14+6]
        if (temp == 0) {
    17e2:	6e 40 90    	mov.b     [w14+6], w0
    17e4:	00 04 e0    	cp0.b     w0
    17e6:	06 00 3a    	bra       NZ, 0x17f4 <.L4>
            peripheral_present[i] = 1; // We found it, but we need to reset the FSM for i2c
    17e8:	1e 80 fb    	ze        [w14], w0
    17ea:	21 c2 20    	mov.w     #0xc22, w1
    17ec:	12 c0 b3    	mov.b     #0x1, w2
    17ee:	82 70 78    	mov.b     w2, [w1+w0]
            send_i2c2_byte(0xA0); // Send dummy byte to reset FSM
    17f0:	00 0a 20    	mov.w     #0xa0, w0
    17f2:	eb 06 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>

000017f4 <.L4>:
        }
        reset_i2c2_bus();
    17f4:	cf 06 07    	rcall     0x2594 <_reset_i2c2_bus> <.LFB16> <.LFE15>

000017f6 <.LBE2>:
    17f6:	1e 4f e8    	inc.b     [w14], [w14]

000017f8 <.L3>:
    17f8:	1e 40 78    	mov.b     [w14], w0
    17fa:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    17fc:	e9 ff 36    	bra       LEU, 0x17d0 <.L5> <.LBB2>
    }

    //TODO: Send out parameters

    //TODO: Send out start condition
    for (i = 0; i < 6; i++) {
    17fe:	00 40 eb    	clr.b     w0
    1800:	00 4f 78    	mov.b     w0, [w14]
    1802:	0f 00 37    	bra       0x1822 <.L6>

00001804 <.L8>:
        if (peripheral_present[i]) {
    1804:	1e 80 fb    	ze        [w14], w0
    1806:	21 c2 20    	mov.w     #0xc22, w1
    1808:	61 40 78    	mov.b     [w1+w0], w0
    180a:	00 04 e0    	cp0.b     w0
    180c:	09 00 32    	bra       Z, 0x1820 <.L7>
            i2c2_start();
    180e:	8e 06 07    	rcall     0x252c <_i2c2_start> <.LFB14> <.LFE13>
            send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    1810:	1e 80 fb    	ze        [w14], w0
    1812:	e1 c2 20    	mov.w     #0xc2e, w1
    1814:	61 40 78    	mov.b     [w1+w0], w0
    1816:	00 80 fb    	ze        w0, w0
    1818:	d8 06 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
            send_i2c2_byte(HEADER_START_GAME << 5);
    181a:	00 0c 20    	mov.w     #0xc0, w0
    181c:	d6 06 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
            reset_i2c2_bus();
    181e:	ba 06 07    	rcall     0x2594 <_reset_i2c2_bus> <.LFB16> <.LFE15>

00001820 <.L7>:
    1820:	1e 4f e8    	inc.b     [w14], [w14]

00001822 <.L6>:
    1822:	1e 40 78    	mov.b     [w14], w0
    1824:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1826:	ee ff 36    	bra       LEU, 0x1804 <.L8>

00001828 <.L9>:
        }
    }

    while (1) {
        state();
    1828:	30 40 80    	mov.w     0x806, w0
    182a:	00 00 01    	call      w0
    }
    182c:	fd ff 37    	bra       0x1828 <.L9>

0000182e <_idle>:

}

// ISRs ************************************************************************

uint8_t beep_state = 0;

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    IFS0bits.T1IF = 0;  // if it's been a second, lower the counter and show it
    time_left--;
    if (state == run) {
        TMR2 = 0;
        beep_state = 0;
        IEC0bits.T2IE = 1; // enable t2 interrupt
        T2CONbits.TON = 1; //Start T2
        OC1RS = PWM_PERIOD_2_3;
        OC1R = OC1RS>>1; // start beep
    }
}

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    IFS0bits.T2IF = 0;
    switch (beep_state) {
        case 0:         // turn off after first beep
            OC1R = 0;
            beep_state++;
            LED3 = OFF; delay_by_nop(1);
            LED1 = ON; delay_by_nop(1);
            break;
        case 1:
            OC1RS = PWM_PERIOD_1_9; // make lower beep
            OC1R = OC1RS>>1;
            LED1 = OFF; delay_by_nop(1);
            LED2 = ON; delay_by_nop(1);
            beep_state++;
            break;
        case 2:
            OC1RS = PWM_PERIOD_2_3; // Reset to high beep and stop
            OC1R = 0;
            LED1 = OFF; delay_by_nop(1);
            LED2 = ON; delay_by_nop(1);
            beep_state++;
            break;
        default:
            break;
    }
}

// STATE MACHINE FUNCTIONS *****************************************************

void idle(void) {
    182e:	00 00 fa    	lnk       #0x0
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    1830:	31 40 80    	mov.w     0x806, w1
    1832:	40 40 80    	mov.w     0x808, w0
    1834:	80 8f 50    	sub.w     w1, w0, [w15]
    1836:	05 00 32    	bra       Z, 0x1842 <.L20>
        last_state = state;
    1838:	30 40 80    	mov.w     0x806, w0
    183a:	40 40 88    	mov.w     w0, 0x808
        dispSeconds(max_time); // Start by showing full time
    183c:	c0 12 20    	mov.w     #0x12c, w0
    183e:	fc 01 07    	rcall     0x1c38 <_dispSeconds> <.LFB8> <.LFE7>
        BUTTON_LED = ON;
    1840:	db 02 a8    	bset.b    0x2db, #0x0

00001842 <.L20>:
    }

    // Perform state tasks

    // Check for state transitions

    /* TODO is it better to not have the start button? */
    delay_by_nop(2000000); // delay for a long time at the start
    1842:	00 48 28    	mov.w     #0x8480, w0
    1844:	e1 01 20    	mov.w     #0x1e, w1
    1846:	12 05 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    state=run;
    1848:	a0 85 21    	mov.w     #0x185a, w0
    184a:	30 40 88    	mov.w     w0, 0x806

    // if (D8 == 0) { // D8 is pulled-up, if button is pressed it pulls it down
    //     state = run;
    // }

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    184c:	31 40 80    	mov.w     0x806, w1
    184e:	40 40 80    	mov.w     0x808, w0
    1850:	80 8f 50    	sub.w     w1, w0, [w15]
    1852:	01 00 32    	bra       Z, 0x1856 <.L19>
        BUTTON_LED = OFF;
    1854:	db 02 a9    	bclr.b    0x2db, #0x0

00001856 <.L19>:
    }
}
    1856:	00 80 fa    	ulnk      
    1858:	00 00 06    	return    

0000185a <_run>:

void run(void) {
    185a:	02 00 fa    	lnk       #0x2
    if (state != last_state) {  // if we are entering the state, do intitialization stuff
    185c:	31 40 80    	mov.w     0x806, w1
    185e:	40 40 80    	mov.w     0x808, w0
    1860:	80 8f 50    	sub.w     w1, w0, [w15]
    1862:	12 00 32    	bra       Z, 0x1888 <.L23>
        last_state = state;
    1864:	30 40 80    	mov.w     0x806, w0
    1866:	40 40 88    	mov.w     w0, 0x808
        IFS0bits.T1IF = 0; //lower interrupt flag
    1868:	84 60 a9    	bclr.b    0x84, #0x3
        TMR1 = 0;          // reset timer register
    186a:	00 21 ef    	clr.w     0x100
        T1CONbits.TON = 1; // enable 1 second timer
    186c:	05 e1 a8    	bset.b    0x105, #0x7

        time_left = max_time;
    186e:	c0 12 20    	mov.w     #0x12c, w0
    1870:	00 40 88    	mov.w     w0, 0x800
        dispSeconds(time_left);
    1872:	00 40 80    	mov.w     0x800, w0
    1874:	e1 01 07    	rcall     0x1c38 <_dispSeconds> <.LFB8> <.LFE7>
        STRIKE1_GLED = ON; // Turn on strike LEDs to green
    1876:	da 82 a8    	bset.b    0x2da, #0x4
        delay_by_nop(1);
    1878:	10 00 20    	mov.w     #0x1, w0
    187a:	01 00 20    	mov.w     #0x0, w1
    187c:	f7 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = ON;
    187e:	da 22 a8    	bset.b    0x2da, #0x1
        delay_by_nop(1);
    1880:	10 00 20    	mov.w     #0x1, w0
    1882:	01 00 20    	mov.w     #0x0, w1
    1884:	f3 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = ON;
    1886:	ea 62 a8    	bset.b    0x2ea, #0x3

00001888 <.L23>:
    }

    // Perform state tasks
    datareturned = 0;
    1888:	02 68 ef    	clr.b     0x802
    uint8_t i;

    // Handle time
    dispSeconds(time_left);
    188a:	00 40 80    	mov.w     0x800, w0
    188c:	d5 01 07    	rcall     0x1c38 <_dispSeconds> <.LFB8> <.LFE7>
    if (time_left == 0) {
    188e:	00 40 80    	mov.w     0x800, w0
    1890:	00 00 e0    	cp0.w     w0
    1892:	17 00 3a    	bra       NZ, 0x18c2 <.L24>
        for (i = 0; i < 6; i++) {
    1894:	00 40 eb    	clr.b     w0
    1896:	00 4f 78    	mov.b     w0, [w14]
    1898:	0f 00 37    	bra       0x18b8 <.L25>

0000189a <.L27>:
            if(peripheral_present[i]) {
    189a:	1e 80 fb    	ze        [w14], w0
    189c:	21 c2 20    	mov.w     #0xc22, w1
    189e:	61 40 78    	mov.b     [w1+w0], w0
    18a0:	00 04 e0    	cp0.b     w0
    18a2:	09 00 32    	bra       Z, 0x18b6 <.L26>
                i2c2_start();
    18a4:	43 06 07    	rcall     0x252c <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    18a6:	1e 80 fb    	ze        [w14], w0
    18a8:	e1 c2 20    	mov.w     #0xc2e, w1
    18aa:	61 40 78    	mov.b     [w1+w0], w0
    18ac:	00 80 fb    	ze        w0, w0
    18ae:	8d 06 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte(HEADER_END_LOSE << 5); // Broadcast the current number of strikes
    18b0:	00 04 20    	mov.w     #0x40, w0
    18b2:	8b 06 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    18b4:	6f 06 07    	rcall     0x2594 <_reset_i2c2_bus> <.LFB16> <.LFE15>

000018b6 <.L26>:
    18b6:	1e 4f e8    	inc.b     [w14], [w14]

000018b8 <.L25>:
    18b8:	1e 40 78    	mov.b     [w14], w0
    18ba:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    18bc:	ee ff 36    	bra       LEU, 0x189a <.L27>
            }
        }
       state = end_fail;            // if we're out of time, go to end
    18be:	20 aa 21    	mov.w     #0x1aa2, w0
    18c0:	30 40 88    	mov.w     w0, 0x806

000018c2 <.L24>:
    }

    // Get completeness and strikes from every module
    prev_num_strikes = num_strikes;
    18c2:	03 c8 bf    	mov.b     0x803, WREG
    18c4:	04 e8 b7    	mov.b     WREG, 0x804
    for (i = 0; i < 6; i++) {
    18c6:	00 40 eb    	clr.b     w0
    18c8:	00 4f 78    	mov.b     w0, [w14]
    18ca:	29 00 37    	bra       0x191e <.L28>

000018cc <.L32>:
        if(peripheral_present[i]) {
    18cc:	1e 80 fb    	ze        [w14], w0
    18ce:	21 c2 20    	mov.w     #0xc22, w1
    18d0:	61 40 78    	mov.b     [w1+w0], w0
    18d2:	00 04 e0    	cp0.b     w0
    18d4:	23 00 32    	bra       Z, 0x191c <.L29>
            i2c2_start();
    18d6:	2a 06 07    	rcall     0x252c <_i2c2_start> <.LFB14> <.LFE13>
            send_i2c2_byte(peripheral_addrs[i] | 1);  // init a read, last to 1
    18d8:	1e 80 fb    	ze        [w14], w0
    18da:	e1 c2 20    	mov.w     #0xc2e, w1
    18dc:	61 40 78    	mov.b     [w1+w0], w0
    18de:	00 04 a0    	bset.b    w0, #0x0
    18e0:	00 80 fb    	ze        w0, w0
    18e2:	73 06 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
            datareturned = i2c2_read_nack();
    18e4:	d4 06 07    	rcall     0x268e <_i2c2_read_nack> <.LFB20> <.LFE19>
    18e6:	02 e8 b7    	mov.b     WREG, 0x802
            reset_i2c2_bus();
    18e8:	55 06 07    	rcall     0x2594 <_reset_i2c2_bus> <.LFB16> <.LFE15>

            if (datareturned & 0b10000000) { // Complete flag
    18ea:	02 c8 bf    	mov.b     0x802, WREG
    18ec:	00 04 e0    	cp0.b     w0
    18ee:	04 00 3d    	bra       GE, 0x18f8 <.L30>
                peripheral_complete[i] = 1;
    18f0:	1e 80 fb    	ze        [w14], w0
    18f2:	81 c2 20    	mov.w     #0xc28, w1
    18f4:	12 c0 b3    	mov.b     #0x1, w2
    18f6:	82 70 78    	mov.b     w2, [w1+w0]

000018f8 <.L30>:
            }
            if (((datareturned & 0b01110000) >> 4) > prev_num_strikes) { //If the module recorded any strikes
    18f8:	02 c8 bf    	mov.b     0x802, WREG
    18fa:	80 80 fb    	ze        w0, w1
    18fc:	00 07 20    	mov.w     #0x70, w0
    18fe:	00 80 60    	and.w     w1, w0, w0
    1900:	c4 80 de    	asr.w     w0, #0x4, w1
    1902:	04 c8 bf    	mov.b     0x804, WREG
    1904:	00 80 fb    	ze        w0, w0
    1906:	80 8f 50    	sub.w     w1, w0, [w15]
    1908:	09 00 34    	bra       LE, 0x191c <.L29>
                num_strikes+= ((datareturned & 0b01110000) >> 4);
    190a:	02 c8 bf    	mov.b     0x802, WREG
    190c:	80 80 fb    	ze        w0, w1
    190e:	00 07 20    	mov.w     #0x70, w0
    1910:	00 80 60    	and.w     w1, w0, w0
    1912:	44 80 de    	asr.w     w0, #0x4, w0
    1914:	80 40 78    	mov.b     w0, w1
    1916:	03 c8 bf    	mov.b     0x803, WREG
    1918:	00 c0 40    	add.b     w1, w0, w0
    191a:	03 e8 b7    	mov.b     WREG, 0x803

0000191c <.L29>:
    191c:	1e 4f e8    	inc.b     [w14], [w14]

0000191e <.L28>:
    191e:	1e 40 78    	mov.b     [w14], w0
    1920:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1922:	d4 ff 36    	bra       LEU, 0x18cc <.L32>
            }
            if ((datareturned & 0b00001111) != 0) {
                // TODO: implement error codes if necessary
            }
        }
    }
    //Handles completeness
    game_complete = 1;
    1924:	10 c0 b3    	mov.b     #0x1, w0
    1926:	05 e8 b7    	mov.b     WREG, 0x805
    for (i = 0; i < 6; i++) {
    1928:	00 40 eb    	clr.b     w0
    192a:	00 4f 78    	mov.b     w0, [w14]
    192c:	0c 00 37    	bra       0x1946 <.L33>

0000192e <.L35>:
        if (peripheral_present[i] && !peripheral_complete[i]) {
    192e:	1e 80 fb    	ze        [w14], w0
    1930:	21 c2 20    	mov.w     #0xc22, w1
    1932:	61 40 78    	mov.b     [w1+w0], w0
    1934:	00 04 e0    	cp0.b     w0
    1936:	06 00 32    	bra       Z, 0x1944 <.L34>
    1938:	1e 80 fb    	ze        [w14], w0
    193a:	81 c2 20    	mov.w     #0xc28, w1
    193c:	61 40 78    	mov.b     [w1+w0], w0
    193e:	00 04 e0    	cp0.b     w0
    1940:	01 00 3a    	bra       NZ, 0x1944 <.L34>
            game_complete = 0;
    1942:	05 68 ef    	clr.b     0x805

00001944 <.L34>:
    1944:	1e 4f e8    	inc.b     [w14], [w14]

00001946 <.L33>:
    1946:	1e 40 78    	mov.b     [w14], w0
    1948:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    194a:	f1 ff 36    	bra       LEU, 0x192e <.L35>
        }
    }
    // If we checked all of them and the game is still complete, then count it!
    if (game_complete) {
    194c:	05 c8 bf    	mov.b     0x805, WREG
    194e:	00 04 e0    	cp0.b     w0
    1950:	17 00 32    	bra       Z, 0x1980 <.L36>
        for (i = 0; i < 6; i++) {
    1952:	00 40 eb    	clr.b     w0
    1954:	00 4f 78    	mov.b     w0, [w14]
    1956:	0f 00 37    	bra       0x1976 <.L37>

00001958 <.L39>:
            if(peripheral_present[i]) {
    1958:	1e 80 fb    	ze        [w14], w0
    195a:	21 c2 20    	mov.w     #0xc22, w1
    195c:	61 40 78    	mov.b     [w1+w0], w0
    195e:	00 04 e0    	cp0.b     w0
    1960:	09 00 32    	bra       Z, 0x1974 <.L38>
                i2c2_start();
    1962:	e4 05 07    	rcall     0x252c <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    1964:	1e 80 fb    	ze        [w14], w0
    1966:	e1 c2 20    	mov.w     #0xc2e, w1
    1968:	61 40 78    	mov.b     [w1+w0], w0
    196a:	00 80 fb    	ze        w0, w0
    196c:	2e 06 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte(HEADER_END_WIN << 5); // Broadcast that we won
    196e:	00 02 20    	mov.w     #0x20, w0
    1970:	2c 06 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    1972:	10 06 07    	rcall     0x2594 <_reset_i2c2_bus> <.LFB16> <.LFE15>

00001974 <.L38>:
    1974:	1e 4f e8    	inc.b     [w14], [w14]

00001976 <.L37>:
    1976:	1e 40 78    	mov.b     [w14], w0
    1978:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    197a:	ee ff 36    	bra       LEU, 0x1958 <.L39>
            }
        }
        //TODO: Go to 'win' state
        state = end_win;
    197c:	e0 b6 21    	mov.w     #0x1b6e, w0
    197e:	30 40 88    	mov.w     w0, 0x806

00001980 <.L36>:
    }

    //Handles strikes
    strikeLEDOff(); // Handle strike LEDs
    1980:	a1 fe 07    	rcall     0x16c4 <_strikeLEDOff> <.L0> <.LFB0> <.Ltext0>
    switch (num_strikes){
    1982:	03 c8 bf    	mov.b     0x803, WREG
    1984:	00 80 fb    	ze        w0, w0
    1986:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1988:	11 00 32    	bra       Z, 0x19ac <.L42>
    198a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    198c:	1c 00 32    	bra       Z, 0x19c6 <.L43>
    198e:	00 00 e0    	cp0.w     w0
    1990:	27 00 3a    	bra       NZ, 0x19e0 <.L55>
        case 0:
            STRIKE1_GLED = ON; delay_by_nop(1);
    1992:	da 82 a8    	bset.b    0x2da, #0x4
    1994:	10 00 20    	mov.w     #0x1, w0
    1996:	01 00 20    	mov.w     #0x0, w1
    1998:	69 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_GLED = ON; delay_by_nop(1);
    199a:	da 22 a8    	bset.b    0x2da, #0x1
    199c:	10 00 20    	mov.w     #0x1, w0
    199e:	01 00 20    	mov.w     #0x0, w1
    19a0:	65 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_GLED = ON; delay_by_nop(1);
    19a2:	ea 62 a8    	bset.b    0x2ea, #0x3
    19a4:	10 00 20    	mov.w     #0x1, w0
    19a6:	01 00 20    	mov.w     #0x0, w1
    19a8:	61 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    19aa:	27 00 37    	bra       0x19fa <.L44>

000019ac <.L42>:
        case 1:
            STRIKE1_RLED = ON; delay_by_nop(1);
    19ac:	da a2 a8    	bset.b    0x2da, #0x5
    19ae:	10 00 20    	mov.w     #0x1, w0
    19b0:	01 00 20    	mov.w     #0x0, w1
    19b2:	5c 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_GLED = ON; delay_by_nop(1);
    19b4:	da 22 a8    	bset.b    0x2da, #0x1
    19b6:	10 00 20    	mov.w     #0x1, w0
    19b8:	01 00 20    	mov.w     #0x0, w1
    19ba:	58 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_GLED = ON; delay_by_nop(1);
    19bc:	ea 62 a8    	bset.b    0x2ea, #0x3
    19be:	10 00 20    	mov.w     #0x1, w0
    19c0:	01 00 20    	mov.w     #0x0, w1
    19c2:	54 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    19c4:	1a 00 37    	bra       0x19fa <.L44>

000019c6 <.L43>:
        case 2:
            STRIKE1_RLED = ON; delay_by_nop(1);
    19c6:	da a2 a8    	bset.b    0x2da, #0x5
    19c8:	10 00 20    	mov.w     #0x1, w0
    19ca:	01 00 20    	mov.w     #0x0, w1
    19cc:	4f 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_RLED = ON; delay_by_nop(1);
    19ce:	da 02 a8    	bset.b    0x2da, #0x0
    19d0:	10 00 20    	mov.w     #0x1, w0
    19d2:	01 00 20    	mov.w     #0x0, w1
    19d4:	4b 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_GLED = ON; delay_by_nop(1);
    19d6:	ea 62 a8    	bset.b    0x2ea, #0x3
    19d8:	10 00 20    	mov.w     #0x1, w0
    19da:	01 00 20    	mov.w     #0x0, w1
    19dc:	47 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    19de:	0d 00 37    	bra       0x19fa <.L44>

000019e0 <.L55>:
        default:
            STRIKE1_RLED = ON; delay_by_nop(1);
    19e0:	da a2 a8    	bset.b    0x2da, #0x5
    19e2:	10 00 20    	mov.w     #0x1, w0
    19e4:	01 00 20    	mov.w     #0x0, w1
    19e6:	42 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_RLED = ON; delay_by_nop(1);
    19e8:	da 02 a8    	bset.b    0x2da, #0x0
    19ea:	10 00 20    	mov.w     #0x1, w0
    19ec:	01 00 20    	mov.w     #0x0, w1
    19ee:	3e 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_RLED = ON; delay_by_nop(1);
    19f0:	cb e2 a8    	bset.b    0x2cb, #0x7
    19f2:	10 00 20    	mov.w     #0x1, w0
    19f4:	01 00 20    	mov.w     #0x0, w1
    19f6:	3a 04 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    19f8:	00 00 00    	nop       

000019fa <.L44>:
    }
    if (num_strikes > 2) {
    19fa:	03 c8 bf    	mov.b     0x803, WREG
    19fc:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    19fe:	18 00 36    	bra       LEU, 0x1a30 <.L45>
        for (i = 0; i < 6; i++) {
    1a00:	00 40 eb    	clr.b     w0
    1a02:	00 4f 78    	mov.b     w0, [w14]
    1a04:	0f 00 37    	bra       0x1a24 <.L46>

00001a06 <.L48>:
            if(peripheral_present[i]) {
    1a06:	1e 80 fb    	ze        [w14], w0
    1a08:	21 c2 20    	mov.w     #0xc22, w1
    1a0a:	61 40 78    	mov.b     [w1+w0], w0
    1a0c:	00 04 e0    	cp0.b     w0
    1a0e:	09 00 32    	bra       Z, 0x1a22 <.L47>
                i2c2_start();
    1a10:	8d 05 07    	rcall     0x252c <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    1a12:	1e 80 fb    	ze        [w14], w0
    1a14:	e1 c2 20    	mov.w     #0xc2e, w1
    1a16:	61 40 78    	mov.b     [w1+w0], w0
    1a18:	00 80 fb    	ze        w0, w0
    1a1a:	d7 05 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte(HEADER_END_LOSE << 5); // Broadcast the current number of strikes
    1a1c:	00 04 20    	mov.w     #0x40, w0
    1a1e:	d5 05 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    1a20:	b9 05 07    	rcall     0x2594 <_reset_i2c2_bus> <.LFB16> <.LFE15>

00001a22 <.L47>:
    1a22:	1e 4f e8    	inc.b     [w14], [w14]

00001a24 <.L46>:
    1a24:	1e 40 78    	mov.b     [w14], w0
    1a26:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1a28:	ee ff 36    	bra       LEU, 0x1a06 <.L48>
            }
        }
        state = end_fail;
    1a2a:	20 aa 21    	mov.w     #0x1aa2, w0
    1a2c:	30 40 88    	mov.w     w0, 0x806
    1a2e:	1e 00 37    	bra       0x1a6c <.L49>

00001a30 <.L45>:
    }
    else if (num_strikes > prev_num_strikes) {
    1a30:	31 80 20    	mov.w     #0x803, w1
    1a32:	91 40 78    	mov.b     [w1], w1
    1a34:	04 c8 bf    	mov.b     0x804, WREG
    1a36:	80 cf 50    	sub.b     w1, w0, [w15]
    1a38:	19 00 36    	bra       LEU, 0x1a6c <.L49>
        for (i = 0; i < 6; i++) {
    1a3a:	00 40 eb    	clr.b     w0
    1a3c:	00 4f 78    	mov.b     w0, [w14]
    1a3e:	13 00 37    	bra       0x1a66 <.L50>

00001a40 <.L52>:
            if (peripheral_present[i]) {
    1a40:	1e 80 fb    	ze        [w14], w0
    1a42:	21 c2 20    	mov.w     #0xc22, w1
    1a44:	61 40 78    	mov.b     [w1+w0], w0
    1a46:	00 04 e0    	cp0.b     w0
    1a48:	0d 00 32    	bra       Z, 0x1a64 <.L51>
                i2c2_start();
    1a4a:	70 05 07    	rcall     0x252c <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    1a4c:	1e 80 fb    	ze        [w14], w0
    1a4e:	e1 c2 20    	mov.w     #0xc2e, w1
    1a50:	61 40 78    	mov.b     [w1+w0], w0
    1a52:	00 80 fb    	ze        w0, w0
    1a54:	ba 05 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte((HEADER_NUM_STRIKES<<5) | num_strikes); // Broadcast the current number of strikes
    1a56:	31 80 20    	mov.w     #0x803, w1
    1a58:	91 40 78    	mov.b     [w1], w1
    1a5a:	00 ce b3    	mov.b     #0xe0, w0
    1a5c:	00 c0 70    	ior.b     w1, w0, w0
    1a5e:	00 80 fb    	ze        w0, w0
    1a60:	b4 05 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    1a62:	98 05 07    	rcall     0x2594 <_reset_i2c2_bus> <.LFB16> <.LFE15>

00001a64 <.L51>:
    1a64:	1e 4f e8    	inc.b     [w14], [w14]

00001a66 <.L50>:
    1a66:	1e 40 78    	mov.b     [w14], w0
    1a68:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1a6a:	ea ff 36    	bra       LEU, 0x1a40 <.L52>

00001a6c <.L49>:
            }
        }
    }

    // Check for state transitions
    if (SW2 == 0) {
    1a6c:	91 16 80    	mov.w     0x2d2, w1
    1a6e:	00 00 21    	mov.w     #0x1000, w0
    1a70:	00 80 60    	and.w     w1, w0, w0
    1a72:	00 00 e0    	cp0.w     w0
    1a74:	02 00 3a    	bra       NZ, 0x1a7a <.L53>
        state = idle;           // SW2 resets to idle
    1a76:	e0 82 21    	mov.w     #0x182e, w0
    1a78:	30 40 88    	mov.w     w0, 0x806

00001a7a <.L53>:
    }

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    1a7a:	31 40 80    	mov.w     0x806, w1
    1a7c:	40 40 80    	mov.w     0x808, w0
    1a7e:	80 8f 50    	sub.w     w1, w0, [w15]
    1a80:	0e 00 32    	bra       Z, 0x1a9e <.L22>
        T1CONbits.TON = 0;
    1a82:	05 e1 a9    	bclr.b    0x105, #0x7
        STRIKE1_GLED = OFF; // Turn off strike LEDs.
    1a84:	da 82 a9    	bclr.b    0x2da, #0x4
        delay_by_nop(1);
    1a86:	10 00 20    	mov.w     #0x1, w0
    1a88:	01 00 20    	mov.w     #0x0, w1
    1a8a:	f0 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = OFF;
    1a8c:	da 22 a9    	bclr.b    0x2da, #0x1
        delay_by_nop(1);
    1a8e:	10 00 20    	mov.w     #0x1, w0
    1a90:	01 00 20    	mov.w     #0x0, w1
    1a92:	ec 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = OFF;
    1a94:	ea 62 a9    	bclr.b    0x2ea, #0x3
        IEC0bits.T2IE = 0; // disable beep interrupt
    1a96:	94 e0 a9    	bclr.b    0x94, #0x7
        OC1R = 0; // turn off beep
    1a98:	96 21 ef    	clr.w     0x196
        dispSeconds(time_left);
    1a9a:	00 40 80    	mov.w     0x800, w0
    1a9c:	cd 00 07    	rcall     0x1c38 <_dispSeconds> <.LFB8> <.LFE7>

00001a9e <.L22>:
    }
}
    1a9e:	00 80 fa    	ulnk      
    1aa0:	00 00 06    	return    

00001aa2 <_end_fail>:

void end_fail(void) {
    1aa2:	00 00 fa    	lnk       #0x0
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    1aa4:	31 40 80    	mov.w     0x806, w1
    1aa6:	40 40 80    	mov.w     0x808, w0
    1aa8:	80 8f 50    	sub.w     w1, w0, [w15]
    1aaa:	16 00 32    	bra       Z, 0x1ad8 <.L57>
        last_state = state;
    1aac:	30 40 80    	mov.w     0x806, w0
    1aae:	40 40 88    	mov.w     w0, 0x808
        // start timer again to blink red LEDs
        IFS0bits.T1IF = 0; //lower interrupt flag
    1ab0:	84 60 a9    	bclr.b    0x84, #0x3
        TMR1 = 0;          // reset timer register
    1ab2:	00 21 ef    	clr.w     0x100
        T1CONbits.TON = 1; // enable 1 second timer
    1ab4:	05 e1 a8    	bset.b    0x105, #0x7

        OC1RS = PWM_PERIOD_2_3;
    1ab6:	00 b6 84    	mov.w     0x96c0, w0
    1ab8:	a0 0c 88    	mov.w     w0, 0x194
        OC1R = OC1RS>>1; // start beep
    1aba:	a0 0c 80    	mov.w     0x194, w0
    1abc:	00 00 d1    	lsr.w     w0, w0
    1abe:	b0 0c 88    	mov.w     w0, 0x196

        STRIKE1_RLED = ON; delay_by_nop(1); // Turn on strike LEDs red
    1ac0:	da a2 a8    	bset.b    0x2da, #0x5
    1ac2:	10 00 20    	mov.w     #0x1, w0
    1ac4:	01 00 20    	mov.w     #0x0, w1
    1ac6:	d2 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_RLED = ON; delay_by_nop(1);
    1ac8:	da 02 a8    	bset.b    0x2da, #0x0
    1aca:	10 00 20    	mov.w     #0x1, w0
    1acc:	01 00 20    	mov.w     #0x0, w1
    1ace:	ce 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_RLED = ON; delay_by_nop(1);
    1ad0:	cb e2 a8    	bset.b    0x2cb, #0x7
    1ad2:	10 00 20    	mov.w     #0x1, w0
    1ad4:	01 00 20    	mov.w     #0x0, w1
    1ad6:	ca 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001ad8 <.L57>:
    }

    // Perform state tasks
    if (IFS0bits.T1IF == 1) {
    1ad8:	20 04 80    	mov.w     0x84, w0
    1ada:	68 00 60    	and.w     w0, #0x8, w0
    1adc:	00 00 e0    	cp0.w     w0
    1ade:	33 00 32    	bra       Z, 0x1b46 <.L58>
        IFS0bits.T1IF = 0;  // if it's been a second, lower the counter and show it
    1ae0:	84 60 a9    	bclr.b    0x84, #0x3
        // Blink RLEDs
        STRIKE1_RLED = !STRIKE1_RLED; delay_by_nop(1);
    1ae2:	d1 16 80    	mov.w     0x2da, w1
    1ae4:	00 02 20    	mov.w     #0x20, w0
    1ae6:	00 80 60    	and.w     w1, w0, w0
    1ae8:	00 f0 a7    	btsc.w    w0, #0xf
    1aea:	00 00 ea    	neg.w     w0, w0
    1aec:	00 00 e9    	dec.w     w0, w0
    1aee:	4f 00 de    	lsr.w     w0, #0xf, w0
    1af0:	00 40 78    	mov.b     w0, w0
    1af2:	00 80 fb    	ze        w0, w0
    1af4:	61 00 60    	and.w     w0, #0x1, w0
    1af6:	45 00 dd    	sl.w      w0, #0x5, w0
    1af8:	d2 16 80    	mov.w     0x2da, w2
    1afa:	f1 fd 2f    	mov.w     #0xffdf, w1
    1afc:	81 00 61    	and.w     w2, w1, w1
    1afe:	01 00 70    	ior.w     w0, w1, w0
    1b00:	d0 16 88    	mov.w     w0, 0x2da
    1b02:	10 00 20    	mov.w     #0x1, w0
    1b04:	01 00 20    	mov.w     #0x0, w1
    1b06:	b2 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_RLED = !STRIKE2_RLED; delay_by_nop(1);
    1b08:	d0 16 80    	mov.w     0x2da, w0
    1b0a:	61 00 60    	and.w     w0, #0x1, w0
    1b0c:	00 f0 a7    	btsc.w    w0, #0xf
    1b0e:	00 00 ea    	neg.w     w0, w0
    1b10:	00 00 e9    	dec.w     w0, w0
    1b12:	4f 00 de    	lsr.w     w0, #0xf, w0
    1b14:	00 40 78    	mov.b     w0, w0
    1b16:	00 80 fb    	ze        w0, w0
    1b18:	61 00 60    	and.w     w0, #0x1, w0
    1b1a:	d2 16 80    	mov.w     0x2da, w2
    1b1c:	e1 ff 2f    	mov.w     #0xfffe, w1
    1b1e:	81 00 61    	and.w     w2, w1, w1
    1b20:	01 00 70    	ior.w     w0, w1, w0
    1b22:	d0 16 88    	mov.w     w0, 0x2da
    1b24:	10 00 20    	mov.w     #0x1, w0
    1b26:	01 00 20    	mov.w     #0x0, w1
    1b28:	a1 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_RLED = !STRIKE3_RLED; delay_by_nop(1);
    1b2a:	50 16 80    	mov.w     0x2ca, w0
    1b2c:	00 80 ea    	com.w     w0, w0
    1b2e:	4f 00 de    	lsr.w     w0, #0xf, w0
    1b30:	00 40 78    	mov.b     w0, w0
    1b32:	00 80 fb    	ze        w0, w0
    1b34:	4f 00 dd    	sl.w      w0, #0xf, w0
    1b36:	52 16 80    	mov.w     0x2ca, w2
    1b38:	f1 ff 27    	mov.w     #0x7fff, w1
    1b3a:	81 00 61    	and.w     w2, w1, w1
    1b3c:	01 00 70    	ior.w     w0, w1, w0
    1b3e:	50 16 88    	mov.w     w0, 0x2ca
    1b40:	10 00 20    	mov.w     #0x1, w0
    1b42:	01 00 20    	mov.w     #0x0, w1
    1b44:	93 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001b46 <.L58>:
    }

    // Check for state transitions

    /* NO TRANSITIONS */

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    1b46:	31 40 80    	mov.w     0x806, w1
    1b48:	40 40 80    	mov.w     0x808, w0
    1b4a:	80 8f 50    	sub.w     w1, w0, [w15]
    1b4c:	0e 00 32    	bra       Z, 0x1b6a <.L56>
        T1CONbits.TON = 0;
    1b4e:	05 e1 a9    	bclr.b    0x105, #0x7
        OC1R = 0; // stop beep
    1b50:	96 21 ef    	clr.w     0x196
        STRIKE1_RLED = OFF; delay_by_nop(1);
    1b52:	da a2 a9    	bclr.b    0x2da, #0x5
    1b54:	10 00 20    	mov.w     #0x1, w0
    1b56:	01 00 20    	mov.w     #0x0, w1
    1b58:	89 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_RLED = OFF; delay_by_nop(1); // turn off strike LEDs
    1b5a:	da 02 a9    	bclr.b    0x2da, #0x0
    1b5c:	10 00 20    	mov.w     #0x1, w0
    1b5e:	01 00 20    	mov.w     #0x0, w1
    1b60:	85 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_RLED = OFF; delay_by_nop(1);
    1b62:	cb e2 a9    	bclr.b    0x2cb, #0x7
    1b64:	10 00 20    	mov.w     #0x1, w0
    1b66:	01 00 20    	mov.w     #0x0, w1
    1b68:	81 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001b6a <.L56>:
    }
}
    1b6a:	00 80 fa    	ulnk      
    1b6c:	00 00 06    	return    

00001b6e <_end_win>:

void end_win(void) {
    1b6e:	00 00 fa    	lnk       #0x0
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    1b70:	31 40 80    	mov.w     0x806, w1
    1b72:	40 40 80    	mov.w     0x808, w0
    1b74:	80 8f 50    	sub.w     w1, w0, [w15]
    1b76:	12 00 32    	bra       Z, 0x1b9c <.L61>
        last_state = state;
    1b78:	30 40 80    	mov.w     0x806, w0
    1b7a:	40 40 88    	mov.w     w0, 0x808
        // start timer again to blink red LEDs
        IFS0bits.T1IF = 0; //lower interrupt flag
    1b7c:	84 60 a9    	bclr.b    0x84, #0x3
        IEC0bits.T1IE = 0;
    1b7e:	94 60 a9    	bclr.b    0x94, #0x3
        TMR1 = 0;          // reset timer register
    1b80:	00 21 ef    	clr.w     0x100
        T1CONbits.TON = 1; // enable 1 second timer
    1b82:	05 e1 a8    	bset.b    0x105, #0x7
        STRIKE1_GLED = ON; delay_by_nop(1); // Turn on strike LEDs red
    1b84:	da 82 a8    	bset.b    0x2da, #0x4
    1b86:	10 00 20    	mov.w     #0x1, w0
    1b88:	01 00 20    	mov.w     #0x0, w1
    1b8a:	70 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = ON; delay_by_nop(1);
    1b8c:	da 22 a8    	bset.b    0x2da, #0x1
    1b8e:	10 00 20    	mov.w     #0x1, w0
    1b90:	01 00 20    	mov.w     #0x0, w1
    1b92:	6c 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = ON; delay_by_nop(1);
    1b94:	ea 62 a8    	bset.b    0x2ea, #0x3
    1b96:	10 00 20    	mov.w     #0x1, w0
    1b98:	01 00 20    	mov.w     #0x0, w1
    1b9a:	68 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001b9c <.L61>:
    }

    // Perform state tasks
    if (IFS0bits.T1IF == 1) {
    1b9c:	20 04 80    	mov.w     0x84, w0
    1b9e:	68 00 60    	and.w     w0, #0x8, w0
    1ba0:	00 00 e0    	cp0.w     w0
    1ba2:	37 00 32    	bra       Z, 0x1c12 <.L62>
        IFS0bits.T1IF = 0;  // if it's been a second, lower the counter and show it
    1ba4:	84 60 a9    	bclr.b    0x84, #0x3
        // Blink GLEDs
        STRIKE1_GLED = !STRIKE1_GLED; delay_by_nop(1);
    1ba6:	d0 16 80    	mov.w     0x2da, w0
    1ba8:	70 00 60    	and.w     w0, #0x10, w0
    1baa:	00 f0 a7    	btsc.w    w0, #0xf
    1bac:	00 00 ea    	neg.w     w0, w0
    1bae:	00 00 e9    	dec.w     w0, w0
    1bb0:	4f 00 de    	lsr.w     w0, #0xf, w0
    1bb2:	00 40 78    	mov.b     w0, w0
    1bb4:	00 80 fb    	ze        w0, w0
    1bb6:	61 00 60    	and.w     w0, #0x1, w0
    1bb8:	44 00 dd    	sl.w      w0, #0x4, w0
    1bba:	d2 16 80    	mov.w     0x2da, w2
    1bbc:	f1 fe 2f    	mov.w     #0xffef, w1
    1bbe:	81 00 61    	and.w     w2, w1, w1
    1bc0:	01 00 70    	ior.w     w0, w1, w0
    1bc2:	d0 16 88    	mov.w     w0, 0x2da
    1bc4:	10 00 20    	mov.w     #0x1, w0
    1bc6:	01 00 20    	mov.w     #0x0, w1
    1bc8:	51 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = !STRIKE2_GLED; delay_by_nop(1);
    1bca:	d0 16 80    	mov.w     0x2da, w0
    1bcc:	62 00 60    	and.w     w0, #0x2, w0
    1bce:	00 f0 a7    	btsc.w    w0, #0xf
    1bd0:	00 00 ea    	neg.w     w0, w0
    1bd2:	00 00 e9    	dec.w     w0, w0
    1bd4:	4f 00 de    	lsr.w     w0, #0xf, w0
    1bd6:	00 40 78    	mov.b     w0, w0
    1bd8:	00 80 fb    	ze        w0, w0
    1bda:	61 00 60    	and.w     w0, #0x1, w0
    1bdc:	00 00 40    	add.w     w0, w0, w0
    1bde:	d2 16 80    	mov.w     0x2da, w2
    1be0:	d1 ff 2f    	mov.w     #0xfffd, w1
    1be2:	81 00 61    	and.w     w2, w1, w1
    1be4:	01 00 70    	ior.w     w0, w1, w0
    1be6:	d0 16 88    	mov.w     w0, 0x2da
    1be8:	10 00 20    	mov.w     #0x1, w0
    1bea:	01 00 20    	mov.w     #0x0, w1
    1bec:	3f 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = !STRIKE3_GLED; delay_by_nop(1);
    1bee:	50 17 80    	mov.w     0x2ea, w0
    1bf0:	68 00 60    	and.w     w0, #0x8, w0
    1bf2:	00 f0 a7    	btsc.w    w0, #0xf
    1bf4:	00 00 ea    	neg.w     w0, w0
    1bf6:	00 00 e9    	dec.w     w0, w0
    1bf8:	4f 00 de    	lsr.w     w0, #0xf, w0
    1bfa:	00 40 78    	mov.b     w0, w0
    1bfc:	00 80 fb    	ze        w0, w0
    1bfe:	61 00 60    	and.w     w0, #0x1, w0
    1c00:	43 00 dd    	sl.w      w0, #0x3, w0
    1c02:	52 17 80    	mov.w     0x2ea, w2
    1c04:	71 ff 2f    	mov.w     #0xfff7, w1
    1c06:	81 00 61    	and.w     w2, w1, w1
    1c08:	01 00 70    	ior.w     w0, w1, w0
    1c0a:	50 17 88    	mov.w     w0, 0x2ea
    1c0c:	10 00 20    	mov.w     #0x1, w0
    1c0e:	01 00 20    	mov.w     #0x0, w1
    1c10:	2d 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001c12 <.L62>:
    }

    // Check for state transitions

    /* NO TRANSITIONS */

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    1c12:	31 40 80    	mov.w     0x806, w1
    1c14:	40 40 80    	mov.w     0x808, w0
    1c16:	80 8f 50    	sub.w     w1, w0, [w15]
    1c18:	0d 00 32    	bra       Z, 0x1c34 <.L60>
        T1CONbits.TON = 0;
    1c1a:	05 e1 a9    	bclr.b    0x105, #0x7
        STRIKE1_GLED = OFF; delay_by_nop(1);
    1c1c:	da 82 a9    	bclr.b    0x2da, #0x4
    1c1e:	10 00 20    	mov.w     #0x1, w0
    1c20:	01 00 20    	mov.w     #0x0, w1
    1c22:	24 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = OFF; delay_by_nop(1); // turn off strike LEDs
    1c24:	da 22 a9    	bclr.b    0x2da, #0x1
    1c26:	10 00 20    	mov.w     #0x1, w0
    1c28:	01 00 20    	mov.w     #0x0, w1
    1c2a:	20 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = OFF; delay_by_nop(1);
    1c2c:	ea 62 a9    	bclr.b    0x2ea, #0x3
    1c2e:	10 00 20    	mov.w     #0x1, w0
    1c30:	01 00 20    	mov.w     #0x0, w1
    1c32:	1c 03 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001c34 <.L60>:
    }
}
    1c34:	00 80 fa    	ulnk      
    1c36:	00 00 06    	return    

00001c38 <_dispSeconds>:

// HELPER FUNCTIONS ************************************************************

// Display a seconds variable in minutes and seconds on the seven segment
void dispSeconds(uint16_t seconds) {
    1c38:	06 00 fa    	lnk       #0x6
    1c3a:	20 07 98    	mov.w     w0, [w14+4]
    // Turn seconds into minutes and seconds
    uint16_t minutes = seconds / 60;
    1c3c:	ae 00 90    	mov.w     [w14+4], w1
    1c3e:	90 88 28    	mov.w     #0x8889, w0
    1c40:	00 08 b8    	mul.uu    w1, w0, w0
    1c42:	45 08 de    	lsr.w     w1, #0x5, w0
    1c44:	00 0f 78    	mov.w     w0, [w14]
    uint8_t displaySeconds = seconds % 60;
    1c46:	2e 01 90    	mov.w     [w14+4], w2
    1c48:	90 88 28    	mov.w     #0x8889, w0
    1c4a:	00 10 b8    	mul.uu    w2, w0, w0
    1c4c:	45 08 de    	lsr.w     w1, #0x5, w0
    1c4e:	c1 03 20    	mov.w     #0x3c, w1
    1c50:	01 80 b9    	mul.ss    w0, w1, w0
    1c52:	00 00 78    	mov.w     w0, w0
    1c54:	00 00 51    	sub.w     w2, w0, w0
    1c56:	20 47 98    	mov.b     w0, [w14+2]
    sevseg_writeDigitNum(&matrix, 0, minutes / 10, 0);
    1c58:	9e 00 78    	mov.w     [w14], w1
    1c5a:	d0 cc 2c    	mov.w     #0xcccd, w0
    1c5c:	00 08 b8    	mul.uu    w1, w0, w0
    1c5e:	43 08 de    	lsr.w     w1, #0x3, w0
    1c60:	00 40 78    	mov.b     w0, w0
    1c62:	80 41 eb    	clr.b     w3
    1c64:	00 41 78    	mov.b     w0, w2
    1c66:	80 40 eb    	clr.b     w1
    1c68:	e0 80 20    	mov.w     #0x80e, w0
    1c6a:	9f 01 07    	rcall     0x1faa <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 1, minutes % 10, 0);
    1c6c:	1e 01 78    	mov.w     [w14], w2
    1c6e:	d0 cc 2c    	mov.w     #0xcccd, w0
    1c70:	00 10 b8    	mul.uu    w2, w0, w0
    1c72:	43 08 de    	lsr.w     w1, #0x3, w0
    1c74:	6a 00 b9    	mul.su    w0, #0xa, w0
    1c76:	00 00 78    	mov.w     w0, w0
    1c78:	00 00 51    	sub.w     w2, w0, w0
    1c7a:	00 40 78    	mov.b     w0, w0
    1c7c:	80 41 eb    	clr.b     w3
    1c7e:	00 41 78    	mov.b     w0, w2
    1c80:	11 c0 b3    	mov.b     #0x1, w1
    1c82:	e0 80 20    	mov.w     #0x80e, w0
    1c84:	92 01 07    	rcall     0x1faa <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_drawColon(&matrix, 1); // Times are supposed to have a colon I guess
    1c86:	11 c0 b3    	mov.b     #0x1, w1
    1c88:	e0 80 20    	mov.w     #0x80e, w0
    1c8a:	ab 01 07    	rcall     0x1fe2 <_sevseg_drawColon> <.LFB12> <.LFE11>
    sevseg_writeDigitNum(&matrix, 3, (displaySeconds / 10) % 10, 0);
    1c8c:	2e 40 90    	mov.b     [w14+2], w0
    1c8e:	80 80 fb    	ze        w0, w1
    1c90:	d0 cc 2c    	mov.w     #0xcccd, w0
    1c92:	00 08 b8    	mul.uu    w1, w0, w0
    1c94:	43 08 de    	lsr.w     w1, #0x3, w0
    1c96:	00 40 78    	mov.b     w0, w0
    1c98:	00 81 fb    	ze        w0, w2
    1c9a:	d0 cc 2c    	mov.w     #0xcccd, w0
    1c9c:	00 10 b8    	mul.uu    w2, w0, w0
    1c9e:	43 08 de    	lsr.w     w1, #0x3, w0
    1ca0:	6a 00 b9    	mul.su    w0, #0xa, w0
    1ca2:	00 00 78    	mov.w     w0, w0
    1ca4:	00 00 51    	sub.w     w2, w0, w0
    1ca6:	00 40 78    	mov.b     w0, w0
    1ca8:	80 41 eb    	clr.b     w3
    1caa:	00 41 78    	mov.b     w0, w2
    1cac:	31 c0 b3    	mov.b     #0x3, w1
    1cae:	e0 80 20    	mov.w     #0x80e, w0
    1cb0:	7c 01 07    	rcall     0x1faa <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 4, displaySeconds % 10, 0);
    1cb2:	2e 40 90    	mov.b     [w14+2], w0
    1cb4:	00 81 fb    	ze        w0, w2
    1cb6:	d0 cc 2c    	mov.w     #0xcccd, w0
    1cb8:	00 10 b8    	mul.uu    w2, w0, w0
    1cba:	43 08 de    	lsr.w     w1, #0x3, w0
    1cbc:	6a 00 b9    	mul.su    w0, #0xa, w0
    1cbe:	00 00 78    	mov.w     w0, w0
    1cc0:	00 00 51    	sub.w     w2, w0, w0
    1cc2:	00 40 78    	mov.b     w0, w0
    1cc4:	80 41 eb    	clr.b     w3
    1cc6:	00 41 78    	mov.b     w0, w2
    1cc8:	41 c0 b3    	mov.b     #0x4, w1
    1cca:	e0 80 20    	mov.w     #0x80e, w0
    1ccc:	6e 01 07    	rcall     0x1faa <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

    led_writeDisplay((_ADAFRUIT_LED*)&matrix.super); //Don't forget to actually write the data!
    1cce:	e0 80 20    	mov.w     #0x80e, w0
    1cd0:	5d 00 07    	rcall     0x1d8c <_led_writeDisplay> <.LFB3> <.LFE2>
}
    1cd2:	00 80 fa    	ulnk      
    1cd4:	00 00 06    	return    

00001cd6 <_drawOnce>:

// Draw 1234 on the seven segment
void drawOnce(void) {
    1cd6:	00 00 fa    	lnk       #0x0
    sevseg_writeDigitNum(&matrix, 0, 1, 0);
    1cd8:	80 41 eb    	clr.b     w3
    1cda:	12 c0 b3    	mov.b     #0x1, w2
    1cdc:	80 40 eb    	clr.b     w1
    1cde:	e0 80 20    	mov.w     #0x80e, w0
    1ce0:	64 01 07    	rcall     0x1faa <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 1, 2, 0);
    1ce2:	80 41 eb    	clr.b     w3
    1ce4:	22 c0 b3    	mov.b     #0x2, w2
    1ce6:	11 c0 b3    	mov.b     #0x1, w1
    1ce8:	e0 80 20    	mov.w     #0x80e, w0
    1cea:	5f 01 07    	rcall     0x1faa <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 3, 3, 0);
    1cec:	80 41 eb    	clr.b     w3
    1cee:	32 c0 b3    	mov.b     #0x3, w2
    1cf0:	31 c0 b3    	mov.b     #0x3, w1
    1cf2:	e0 80 20    	mov.w     #0x80e, w0
    1cf4:	5a 01 07    	rcall     0x1faa <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 4, 4, 0);
    1cf6:	80 41 eb    	clr.b     w3
    1cf8:	42 c0 b3    	mov.b     #0x4, w2
    1cfa:	41 c0 b3    	mov.b     #0x4, w1
    1cfc:	e0 80 20    	mov.w     #0x80e, w0
    1cfe:	55 01 07    	rcall     0x1faa <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    led_writeDisplay((_ADAFRUIT_LED*)&matrix.super);
    1d00:	e0 80 20    	mov.w     #0x80e, w0
    1d02:	44 00 07    	rcall     0x1d8c <_led_writeDisplay> <.LFB3> <.LFE2>
}
    1d04:	00 80 fa    	ulnk      
    1d06:	00 00 06    	return    

00001d08 <_led_begin>:

};


void led_begin(_ADAFRUIT_LED* ptr, uint8_t addr){
    1d08:	04 00 fa    	lnk       #0x4
    1d0a:	00 0f 78    	mov.w     w0, [w14]
    1d0c:	21 47 98    	mov.b     w1, [w14+2]
  ptr->i2c_addr = addr;
    1d0e:	1e 00 78    	mov.w     [w14], w0
    1d10:	ae 40 90    	mov.b     [w14+2], w1
    1d12:	01 50 98    	mov.b     w1, [w0+16]
  i2c_start();
    1d14:	cb 02 07    	rcall     0x22ac <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1d16:	1e 00 78    	mov.w     [w14], w0
    1d18:	00 50 90    	mov.b     [w0+16], w0
    1d1a:	00 80 fb    	ze        w0, w0
    1d1c:	16 03 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(0x21); // turn on oscillator
    1d1e:	10 02 20    	mov.w     #0x21, w0
    1d20:	14 03 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1d22:	f8 02 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
  led_blinkRate((_ADAFRUIT_LED *)ptr, HT16K33_BLINK_OFF);
    1d24:	80 40 eb    	clr.b     w1
    1d26:	1e 00 78    	mov.w     [w14], w0
    1d28:	1a 00 07    	rcall     0x1d5e <_led_blinkRate> <.LFB2> <.LFE1>
  led_setBrightness((_ADAFRUIT_LED *)ptr,15); // set max brightness
    1d2a:	f1 c0 b3    	mov.b     #0xf, w1
    1d2c:	1e 00 78    	mov.w     [w14], w0
    1d2e:	02 00 07    	rcall     0x1d34 <_led_setBrightness> <.LFB1> <.LFE0>
}
    1d30:	00 80 fa    	ulnk      
    1d32:	00 00 06    	return    

00001d34 <_led_setBrightness>:

void led_setBrightness(_ADAFRUIT_LED* ptr, uint8_t b){
    1d34:	04 00 fa    	lnk       #0x4
    1d36:	00 0f 78    	mov.w     w0, [w14]
    1d38:	21 47 98    	mov.b     w1, [w14+2]
  if (b > 15) b = 15;
    1d3a:	2e 40 90    	mov.b     [w14+2], w0
    1d3c:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    1d3e:	02 00 36    	bra       LEU, 0x1d44 <.L3>
    1d40:	f0 c0 b3    	mov.b     #0xf, w0
    1d42:	20 47 98    	mov.b     w0, [w14+2]

00001d44 <.L3>:
  i2c_start();
    1d44:	b3 02 07    	rcall     0x22ac <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1d46:	1e 00 78    	mov.w     [w14], w0
    1d48:	00 50 90    	mov.b     [w0+16], w0
    1d4a:	00 80 fb    	ze        w0, w0
    1d4c:	fe 02 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(HT16K33_CMD_BRIGHTNESS | b);
    1d4e:	ae 40 90    	mov.b     [w14+2], w1
    1d50:	00 ce b3    	mov.b     #0xe0, w0
    1d52:	00 c0 70    	ior.b     w1, w0, w0
    1d54:	00 80 fb    	ze        w0, w0
    1d56:	f9 02 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1d58:	dd 02 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1d5a:	00 80 fa    	ulnk      
    1d5c:	00 00 06    	return    

00001d5e <_led_blinkRate>:

void led_blinkRate(_ADAFRUIT_LED* ptr, uint8_t b){
    1d5e:	04 00 fa    	lnk       #0x4
    1d60:	00 0f 78    	mov.w     w0, [w14]
    1d62:	21 47 98    	mov.b     w1, [w14+2]
  i2c_start();
    1d64:	a3 02 07    	rcall     0x22ac <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1d66:	1e 00 78    	mov.w     [w14], w0
    1d68:	00 50 90    	mov.b     [w0+16], w0
    1d6a:	00 80 fb    	ze        w0, w0
    1d6c:	ee 02 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
  if (b > 3) b = 0; // turn off if not sure
    1d6e:	2e 40 90    	mov.b     [w14+2], w0
    1d70:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    1d72:	02 00 36    	bra       LEU, 0x1d78 <.L5>
    1d74:	00 40 eb    	clr.b     w0
    1d76:	20 47 98    	mov.b     w0, [w14+2]

00001d78 <.L5>:
  send_i2c_byte(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1));
    1d78:	2e 40 90    	mov.b     [w14+2], w0
    1d7a:	00 80 fb    	ze        w0, w0
    1d7c:	00 00 40    	add.w     w0, w0, w0
    1d7e:	80 00 78    	mov.w     w0, w1
    1d80:	10 08 20    	mov.w     #0x81, w0
    1d82:	01 00 70    	ior.w     w0, w1, w0
    1d84:	e2 02 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1d86:	c6 02 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1d88:	00 80 fa    	ulnk      
    1d8a:	00 00 06    	return    

00001d8c <_led_writeDisplay>:

void led_writeDisplay(_ADAFRUIT_LED* ptr){
    1d8c:	04 00 fa    	lnk       #0x4
    1d8e:	10 07 98    	mov.w     w0, [w14+2]
  i2c_start();
    1d90:	8d 02 07    	rcall     0x22ac <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1d92:	1e 00 90    	mov.w     [w14+2], w0
    1d94:	00 50 90    	mov.b     [w0+16], w0
    1d96:	00 80 fb    	ze        w0, w0
    1d98:	d8 02 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
	send_i2c_byte(0x00); // Start at address 0
    1d9a:	00 00 eb    	clr.w     w0
    1d9c:	d6 02 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
	uint8_t i;
  for (i=0; i<8; i++) {
    1d9e:	00 40 eb    	clr.b     w0
    1da0:	00 4f 78    	mov.b     w0, [w14]
    1da2:	0f 00 37    	bra       0x1dc2 <.L7>

00001da4 <.L8>:
    send_i2c_byte(ptr->displaybuffer[i] & 0xFF);
    1da4:	1e 80 fb    	ze        [w14], w0
    1da6:	9e 00 90    	mov.w     [w14+2], w1
    1da8:	00 00 40    	add.w     w0, w0, w0
    1daa:	61 00 78    	mov.w     [w1+w0], w0
    1dac:	80 00 78    	mov.w     w0, w1
    1dae:	f0 0f 20    	mov.w     #0xff, w0
    1db0:	00 80 60    	and.w     w1, w0, w0
    1db2:	cb 02 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ptr->displaybuffer[i] >> 8);
    1db4:	1e 80 fb    	ze        [w14], w0
    1db6:	9e 00 90    	mov.w     [w14+2], w1
    1db8:	00 00 40    	add.w     w0, w0, w0
    1dba:	61 00 78    	mov.w     [w1+w0], w0
    1dbc:	48 00 de    	lsr.w     w0, #0x8, w0
    1dbe:	c5 02 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    1dc0:	1e 4f e8    	inc.b     [w14], [w14]

00001dc2 <.L7>:
    1dc2:	1e 40 78    	mov.b     [w14], w0
    1dc4:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    1dc6:	ee ff 36    	bra       LEU, 0x1da4 <.L8>
  }
  reset_i2c_bus();
    1dc8:	a5 02 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1dca:	00 80 fa    	ulnk      
    1dcc:	00 00 06    	return    

00001dce <_led_clear>:

void led_clear(_ADAFRUIT_LED* ptr){
    1dce:	04 00 fa    	lnk       #0x4
    1dd0:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
	for (i=0; i<8; i++) {
    1dd2:	00 40 eb    	clr.b     w0
    1dd4:	00 4f 78    	mov.b     w0, [w14]
    1dd6:	07 00 37    	bra       0x1de6 <.L10>

00001dd8 <.L11>:
    ptr->displaybuffer[i] = 0;
    1dd8:	1e 80 fb    	ze        [w14], w0
    1dda:	9e 00 90    	mov.w     [w14+2], w1
    1ddc:	00 00 40    	add.w     w0, w0, w0
    1dde:	00 80 40    	add.w     w1, w0, w0
    1de0:	80 00 eb    	clr.w     w1
    1de2:	01 08 78    	mov.w     w1, [w0]
    1de4:	1e 4f e8    	inc.b     [w14], [w14]

00001de6 <.L10>:
    1de6:	1e 40 78    	mov.b     [w14], w0
    1de8:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    1dea:	f6 ff 36    	bra       LEU, 0x1dd8 <.L11>
  }
}
    1dec:	00 80 fa    	ulnk      
    1dee:	00 00 06    	return    

00001df0 <_alphanum_begin>:

// ALPHANUM ********************************************************************

void alphanum_begin(_ALPHANUM* ptr, uint8_t addr){
    1df0:	04 00 fa    	lnk       #0x4
    1df2:	00 0f 78    	mov.w     w0, [w14]
    1df4:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr); // Call super constructor
    1df6:	1e 00 78    	mov.w     [w14], w0
    1df8:	ae 40 90    	mov.b     [w14+2], w1
    1dfa:	86 ff 07    	rcall     0x1d08 <_led_begin> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
}
    1dfc:	00 80 fa    	ulnk      
    1dfe:	00 00 06    	return    

00001e00 <_alphanum_writeDigitRaw>:

void alphanum_writeDigitRaw(_ALPHANUM* ptr, uint8_t n, uint16_t bitmask){
    1e00:	06 00 fa    	lnk       #0x6
    1e02:	00 0f 78    	mov.w     w0, [w14]
    1e04:	21 47 98    	mov.b     w1, [w14+2]
    1e06:	22 07 98    	mov.w     w2, [w14+4]
  ptr->super.displaybuffer[n] = bitmask;
    1e08:	2e 40 90    	mov.b     [w14+2], w0
    1e0a:	00 80 fb    	ze        w0, w0
    1e0c:	9e 00 78    	mov.w     [w14], w1
    1e0e:	00 00 40    	add.w     w0, w0, w0
    1e10:	00 80 40    	add.w     w1, w0, w0
    1e12:	ae 00 90    	mov.w     [w14+4], w1
    1e14:	01 08 78    	mov.w     w1, [w0]
}
    1e16:	00 80 fa    	ulnk      
    1e18:	00 00 06    	return    

00001e1a <_alphanum_writeDigitAscii>:

void alphanum_writeDigitAscii(_ALPHANUM* ptr, uint8_t n, uint8_t ascii, uint8_t dot){
    1e1a:	08 00 fa    	lnk       #0x8
    1e1c:	10 07 98    	mov.w     w0, [w14+2]
    1e1e:	41 47 98    	mov.b     w1, [w14+4]
    1e20:	52 47 98    	mov.b     w2, [w14+5]
    1e22:	63 47 98    	mov.b     w3, [w14+6]
  uint16_t font = alphafonttable[ascii];
    1e24:	5e 40 90    	mov.b     [w14+5], w0
    1e26:	00 80 fb    	ze        w0, w0
    1e28:	80 00 40    	add.w     w0, w0, w1
    1e2a:	00 5c 29    	mov.w     #0x95c0, w0
    1e2c:	00 80 40    	add.w     w1, w0, w0
    1e2e:	10 0f 78    	mov.w     [w0], [w14]
  ptr->super.displaybuffer[n] = font;
    1e30:	4e 40 90    	mov.b     [w14+4], w0
    1e32:	00 80 fb    	ze        w0, w0
    1e34:	9e 00 90    	mov.w     [w14+2], w1
    1e36:	00 00 40    	add.w     w0, w0, w0
    1e38:	00 80 40    	add.w     w1, w0, w0
    1e3a:	1e 08 78    	mov.w     [w14], [w0]
  if (dot) ptr->super.displaybuffer[n] |= (1<<14);
    1e3c:	6e 40 90    	mov.b     [w14+6], w0
    1e3e:	00 04 e0    	cp0.b     w0
    1e40:	0c 00 32    	bra       Z, 0x1e5a <.L14>
    1e42:	4e 40 90    	mov.b     [w14+4], w0
    1e44:	00 80 fb    	ze        w0, w0
    1e46:	ce 40 90    	mov.b     [w14+4], w1
    1e48:	81 80 fb    	ze        w1, w1
    1e4a:	1e 01 90    	mov.w     [w14+2], w2
    1e4c:	81 80 40    	add.w     w1, w1, w1
    1e4e:	e2 80 78    	mov.w     [w2+w1], w1
    1e50:	01 e0 a0    	bset.w    w1, #0xe
    1e52:	1e 01 90    	mov.w     [w14+2], w2
    1e54:	00 00 40    	add.w     w0, w0, w0
    1e56:	00 00 41    	add.w     w2, w0, w0
    1e58:	01 08 78    	mov.w     w1, [w0]

00001e5a <.L14>:
}
    1e5a:	00 80 fa    	ulnk      
    1e5c:	00 00 06    	return    

00001e5e <_bargraph_begin>:

// 24 BARGRAPH *****************************************************************

void bargraph_begin(_BARGRAPH* ptr, uint8_t addr){
    1e5e:	04 00 fa    	lnk       #0x4
    1e60:	00 0f 78    	mov.w     w0, [w14]
    1e62:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr);
    1e64:	1e 00 78    	mov.w     [w14], w0
    1e66:	ae 40 90    	mov.b     [w14+2], w1
    1e68:	4f ff 07    	rcall     0x1d08 <_led_begin> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
}
    1e6a:	00 80 fa    	ulnk      
    1e6c:	00 00 06    	return    

00001e6e <_bargraph_setBar>:

void bargraph_setBar(_BARGRAPH* ptr, uint8_t bar, uint8_t color){
    1e6e:	08 00 fa    	lnk       #0x8
    1e70:	20 07 98    	mov.w     w0, [w14+4]
    1e72:	61 47 98    	mov.b     w1, [w14+6]
    1e74:	72 47 98    	mov.b     w2, [w14+7]
  uint16_t a, c;

  if (bar < 12)
    1e76:	6e 40 90    	mov.b     [w14+6], w0
    1e78:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1e7a:	07 00 3e    	bra       GTU, 0x1e8a <.L18>
    c = bar / 4;
    1e7c:	6e 40 90    	mov.b     [w14+6], w0
    1e7e:	00 80 fb    	ze        w0, w0
    1e80:	42 00 de    	lsr.w     w0, #0x2, w0
    1e82:	00 40 78    	mov.b     w0, w0
    1e84:	00 80 fb    	ze        w0, w0
    1e86:	10 07 98    	mov.w     w0, [w14+2]
    1e88:	08 00 37    	bra       0x1e9a <.L19>

00001e8a <.L18>:
  else
    c = (bar - 12) / 4;
    1e8a:	6e 40 90    	mov.b     [w14+6], w0
    1e8c:	00 80 fb    	ze        w0, w0
    1e8e:	6c 00 50    	sub.w     w0, #0xc, w0
    1e90:	00 00 e0    	cp0.w     w0
    1e92:	01 00 3d    	bra       GE, 0x1e96 <.L20>
    1e94:	63 00 40    	add.w     w0, #0x3, w0

00001e96 <.L20>:
    1e96:	42 80 de    	asr.w     w0, #0x2, w0
    1e98:	10 07 98    	mov.w     w0, [w14+2]

00001e9a <.L19>:

  a = bar % 4;
    1e9a:	6e 40 90    	mov.b     [w14+6], w0
    1e9c:	00 80 fb    	ze        w0, w0
    1e9e:	63 0f 60    	and.w     w0, #0x3, [w14]
  if (bar >= 12)
    1ea0:	6e 40 90    	mov.b     [w14+6], w0
    1ea2:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1ea4:	02 00 36    	bra       LEU, 0x1eaa <.L21>
    a += 4;
    1ea6:	9e 00 78    	mov.w     [w14], w1
    1ea8:	64 8f 40    	add.w     w1, #0x4, [w14]

00001eaa <.L21>:

  //Serial.print("Ano = "); Serial.print(a); Serial.print(" Cath = "); Serial.println(c);
  if (color == LED_RED) {
    1eaa:	7e 40 90    	mov.b     [w14+7], w0
    1eac:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1eae:	1d 00 3a    	bra       NZ, 0x1eea <.L22>
    // Turn on red LED.
    ptr->super.displaybuffer[c] |= _BV(a);
    1eb0:	ae 00 90    	mov.w     [w14+4], w1
    1eb2:	1e 00 90    	mov.w     [w14+2], w0
    1eb4:	00 00 40    	add.w     w0, w0, w0
    1eb6:	e1 00 78    	mov.w     [w1+w0], w1
    1eb8:	1e 00 78    	mov.w     [w14], w0
    1eba:	12 00 20    	mov.w     #0x1, w2
    1ebc:	00 10 dd    	sl.w      w2, w0, w0
    1ebe:	81 00 70    	ior.w     w0, w1, w1
    1ec0:	2e 01 90    	mov.w     [w14+4], w2
    1ec2:	1e 00 90    	mov.w     [w14+2], w0
    1ec4:	00 00 40    	add.w     w0, w0, w0
    1ec6:	00 00 41    	add.w     w2, w0, w0
    1ec8:	01 08 78    	mov.w     w1, [w0]
    // Turn off green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a+8);
    1eca:	ae 00 90    	mov.w     [w14+4], w1
    1ecc:	1e 00 90    	mov.w     [w14+2], w0
    1ece:	00 00 40    	add.w     w0, w0, w0
    1ed0:	e1 00 78    	mov.w     [w1+w0], w1
    1ed2:	1e 01 78    	mov.w     [w14], w2
    1ed4:	68 00 41    	add.w     w2, #0x8, w0
    1ed6:	12 00 20    	mov.w     #0x1, w2
    1ed8:	00 10 dd    	sl.w      w2, w0, w0
    1eda:	00 80 ea    	com.w     w0, w0
    1edc:	80 80 60    	and.w     w1, w0, w1
    1ede:	2e 01 90    	mov.w     [w14+4], w2
    1ee0:	1e 00 90    	mov.w     [w14+2], w0
    1ee2:	00 00 40    	add.w     w0, w0, w0
    1ee4:	00 00 41    	add.w     w2, w0, w0
    1ee6:	01 08 78    	mov.w     w1, [w0]
    1ee8:	4c 00 37    	bra       0x1f82 <.L17>

00001eea <.L22>:
  } else if (color == LED_YELLOW) {
    1eea:	7e 40 90    	mov.b     [w14+7], w0
    1eec:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1eee:	13 00 3a    	bra       NZ, 0x1f16 <.L24>
    // Turn on red and green LED.
    ptr->super.displaybuffer[c] |= _BV(a) | _BV(a+8);
    1ef0:	ae 00 90    	mov.w     [w14+4], w1
    1ef2:	1e 00 90    	mov.w     [w14+2], w0
    1ef4:	00 00 40    	add.w     w0, w0, w0
    1ef6:	e1 00 78    	mov.w     [w1+w0], w1
    1ef8:	1e 00 78    	mov.w     [w14], w0
    1efa:	12 00 20    	mov.w     #0x1, w2
    1efc:	00 11 dd    	sl.w      w2, w0, w2
    1efe:	9e 01 78    	mov.w     [w14], w3
    1f00:	68 80 41    	add.w     w3, #0x8, w0
    1f02:	13 00 20    	mov.w     #0x1, w3
    1f04:	00 18 dd    	sl.w      w3, w0, w0
    1f06:	02 00 70    	ior.w     w0, w2, w0
    1f08:	81 00 70    	ior.w     w0, w1, w1
    1f0a:	2e 01 90    	mov.w     [w14+4], w2
    1f0c:	1e 00 90    	mov.w     [w14+2], w0
    1f0e:	00 00 40    	add.w     w0, w0, w0
    1f10:	00 00 41    	add.w     w2, w0, w0
    1f12:	01 08 78    	mov.w     w1, [w0]
    1f14:	36 00 37    	bra       0x1f82 <.L17>

00001f16 <.L24>:
  } else if (color == LED_OFF) {
    1f16:	7e 40 90    	mov.b     [w14+7], w0
    1f18:	00 04 e0    	cp0.b     w0
    1f1a:	14 00 3a    	bra       NZ, 0x1f44 <.L25>
    // Turn off red and green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a) & ~_BV(a+8);
    1f1c:	ae 00 90    	mov.w     [w14+4], w1
    1f1e:	1e 00 90    	mov.w     [w14+2], w0
    1f20:	00 00 40    	add.w     w0, w0, w0
    1f22:	e1 00 78    	mov.w     [w1+w0], w1
    1f24:	1e 00 78    	mov.w     [w14], w0
    1f26:	12 00 20    	mov.w     #0x1, w2
    1f28:	00 11 dd    	sl.w      w2, w0, w2
    1f2a:	9e 01 78    	mov.w     [w14], w3
    1f2c:	68 80 41    	add.w     w3, #0x8, w0
    1f2e:	13 00 20    	mov.w     #0x1, w3
    1f30:	00 18 dd    	sl.w      w3, w0, w0
    1f32:	02 00 70    	ior.w     w0, w2, w0
    1f34:	00 80 ea    	com.w     w0, w0
    1f36:	80 80 60    	and.w     w1, w0, w1
    1f38:	2e 01 90    	mov.w     [w14+4], w2
    1f3a:	1e 00 90    	mov.w     [w14+2], w0
    1f3c:	00 00 40    	add.w     w0, w0, w0
    1f3e:	00 00 41    	add.w     w2, w0, w0
    1f40:	01 08 78    	mov.w     w1, [w0]
    1f42:	1f 00 37    	bra       0x1f82 <.L17>

00001f44 <.L25>:
  } else if (color == LED_GREEN) {
    1f44:	7e 40 90    	mov.b     [w14+7], w0
    1f46:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    1f48:	1c 00 3a    	bra       NZ, 0x1f82 <.L17>
    // Turn on green LED.
    ptr->super.displaybuffer[c] |= _BV(a+8);
    1f4a:	ae 00 90    	mov.w     [w14+4], w1
    1f4c:	1e 00 90    	mov.w     [w14+2], w0
    1f4e:	00 00 40    	add.w     w0, w0, w0
    1f50:	e1 00 78    	mov.w     [w1+w0], w1
    1f52:	1e 01 78    	mov.w     [w14], w2
    1f54:	68 00 41    	add.w     w2, #0x8, w0
    1f56:	12 00 20    	mov.w     #0x1, w2
    1f58:	00 10 dd    	sl.w      w2, w0, w0
    1f5a:	81 00 70    	ior.w     w0, w1, w1
    1f5c:	2e 01 90    	mov.w     [w14+4], w2
    1f5e:	1e 00 90    	mov.w     [w14+2], w0
    1f60:	00 00 40    	add.w     w0, w0, w0
    1f62:	00 00 41    	add.w     w2, w0, w0
    1f64:	01 08 78    	mov.w     w1, [w0]
    // Turn off red LED.
    ptr->super.displaybuffer[c] &= ~_BV(a);
    1f66:	ae 00 90    	mov.w     [w14+4], w1
    1f68:	1e 00 90    	mov.w     [w14+2], w0
    1f6a:	00 00 40    	add.w     w0, w0, w0
    1f6c:	e1 00 78    	mov.w     [w1+w0], w1
    1f6e:	1e 00 78    	mov.w     [w14], w0
    1f70:	12 00 20    	mov.w     #0x1, w2
    1f72:	00 10 dd    	sl.w      w2, w0, w0
    1f74:	00 80 ea    	com.w     w0, w0
    1f76:	80 80 60    	and.w     w1, w0, w1
    1f78:	2e 01 90    	mov.w     [w14+4], w2
    1f7a:	1e 00 90    	mov.w     [w14+2], w0
    1f7c:	00 00 40    	add.w     w0, w0, w0
    1f7e:	00 00 41    	add.w     w2, w0, w0
    1f80:	01 08 78    	mov.w     w1, [w0]

00001f82 <.L17>:
  }
}
    1f82:	00 80 fa    	ulnk      
    1f84:	00 00 06    	return    

00001f86 <_sevseg_writeDigitRaw>:

// 7SEGMENT ********************************************************************

// uint8_t write(_7SEGMENT* ptr, uint8_t c){
//
//   uint8_t r = 0;
//
//   if (c == '\n') ptr->position = 0;
//   if (c == '\r') ptr->position = 0;
//
//   if ((c >= '0') && (c <= '9')) {
//     sevseg_writeDigitNum(ptr, ptr->position, c-'0', 0);
//     r = 1;
//   }
//
//   ptr->position++;
//   if (ptr->position == 2) ptr->position++;
//
//   return r;
// }

void sevseg_writeDigitRaw(_7SEGMENT* ptr, uint8_t x, uint16_t bitmask){
    1f86:	06 00 fa    	lnk       #0x6
    1f88:	00 0f 78    	mov.w     w0, [w14]
    1f8a:	21 47 98    	mov.b     w1, [w14+2]
    1f8c:	22 07 98    	mov.w     w2, [w14+4]
  if (x > 4) return;
    1f8e:	2e 40 90    	mov.b     [w14+2], w0
    1f90:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1f92:	08 00 3e    	bra       GTU, 0x1fa4 <.L29>
  ptr->super.displaybuffer[x] = bitmask;
    1f94:	2e 40 90    	mov.b     [w14+2], w0
    1f96:	00 80 fb    	ze        w0, w0
    1f98:	9e 00 78    	mov.w     [w14], w1
    1f9a:	00 00 40    	add.w     w0, w0, w0
    1f9c:	00 80 40    	add.w     w1, w0, w0
    1f9e:	ae 00 90    	mov.w     [w14+4], w1
    1fa0:	01 08 78    	mov.w     w1, [w0]
    1fa2:	01 00 37    	bra       0x1fa6 <.L26>

00001fa4 <.L29>:
    1fa4:	00 00 00    	nop       

00001fa6 <.L26>:
}
    1fa6:	00 80 fa    	ulnk      
    1fa8:	00 00 06    	return    

00001faa <_sevseg_writeDigitNum>:

void sevseg_writeDigitNum(_7SEGMENT* ptr, uint8_t x, uint8_t num, uint8_t dot){
    1faa:	08 00 fa    	lnk       #0x8
    1fac:	10 07 98    	mov.w     w0, [w14+2]
    1fae:	41 47 98    	mov.b     w1, [w14+4]
    1fb0:	52 47 98    	mov.b     w2, [w14+5]
    1fb2:	63 47 98    	mov.b     w3, [w14+6]
  if (x > 4) return;
    1fb4:	4e 40 90    	mov.b     [w14+4], w0
    1fb6:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1fb8:	11 00 3e    	bra       GTU, 0x1fdc <.L33>
	uint16_t zero = 0x0000;
    1fba:	00 00 eb    	clr.w     w0
    1fbc:	00 0f 78    	mov.w     w0, [w14]
  sevseg_writeDigitRaw(ptr, x, (numbertable[num] | (dot << 7)));
    1fbe:	5e 40 90    	mov.b     [w14+5], w0
    1fc0:	00 80 fb    	ze        w0, w0
    1fc2:	80 00 40    	add.w     w0, w0, w1
    1fc4:	c0 59 29    	mov.w     #0x959c, w0
    1fc6:	00 80 40    	add.w     w1, w0, w0
    1fc8:	90 00 78    	mov.w     [w0], w1
    1fca:	6e 40 90    	mov.b     [w14+6], w0
    1fcc:	00 80 fb    	ze        w0, w0
    1fce:	47 00 dd    	sl.w      w0, #0x7, w0
    1fd0:	01 00 70    	ior.w     w0, w1, w0
    1fd2:	00 01 78    	mov.w     w0, w2
    1fd4:	ce 40 90    	mov.b     [w14+4], w1
    1fd6:	1e 00 90    	mov.w     [w14+2], w0
    1fd8:	d6 ff 07    	rcall     0x1f86 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    1fda:	01 00 37    	bra       0x1fde <.L30>

00001fdc <.L33>:
    1fdc:	00 00 00    	nop       

00001fde <.L30>:
}
    1fde:	00 80 fa    	ulnk      
    1fe0:	00 00 06    	return    

00001fe2 <_sevseg_drawColon>:

void sevseg_drawColon(_7SEGMENT* ptr, uint8_t state){
    1fe2:	04 00 fa    	lnk       #0x4
    1fe4:	00 0f 78    	mov.w     w0, [w14]
    1fe6:	21 47 98    	mov.b     w1, [w14+2]
  if (state)
    1fe8:	2e 40 90    	mov.b     [w14+2], w0
    1fea:	00 04 e0    	cp0.b     w0
    1fec:	04 00 32    	bra       Z, 0x1ff6 <.L35>
    ptr->super.displaybuffer[2] = 0x2;
    1fee:	1e 00 78    	mov.w     [w14], w0
    1ff0:	21 00 20    	mov.w     #0x2, w1
    1ff2:	21 00 98    	mov.w     w1, [w0+4]
    1ff4:	03 00 37    	bra       0x1ffc <.L34>

00001ff6 <.L35>:
  else
    ptr->super.displaybuffer[2] = 0;
    1ff6:	1e 00 78    	mov.w     [w14], w0
    1ff8:	80 00 eb    	clr.w     w1
    1ffa:	21 00 98    	mov.w     w1, [w0+4]

00001ffc <.L34>:
}
    1ffc:	00 80 fa    	ulnk      
    1ffe:	00 00 06    	return    

00002000 <_sevseg_printNumber>:

void sevseg_printNumber(_7SEGMENT* ptr, long n, uint8_t base){
    2000:	08 00 fa    	lnk       #0x8
    2002:	00 0f 78    	mov.w     w0, [w14]
    2004:	12 07 98    	mov.w     w2, [w14+2]
    2006:	23 07 98    	mov.w     w3, [w14+4]
    2008:	61 47 98    	mov.b     w1, [w14+6]
  sevseg_printFloat(ptr, n, 0, base);
    200a:	1e 00 90    	mov.w     [w14+2], w0
    200c:	ae 00 90    	mov.w     [w14+4], w1
    200e:	c8 f9 07    	rcall     0x13a0 <___floatsisf>
    2010:	00 01 be    	mov.d     w0, w2
    2012:	6e 42 90    	mov.b     [w14+6], w4
    2014:	80 40 eb    	clr.b     w1
    2016:	1e 00 78    	mov.w     [w14], w0
    2018:	02 00 07    	rcall     0x201e <_sevseg_printFloat> <.LFB14> <.LFE13>
}
    201a:	00 80 fa    	ulnk      
    201c:	00 00 06    	return    

0000201e <_sevseg_printFloat>:

void sevseg_printFloat(_7SEGMENT* ptr, double n, uint8_t fracDigits, uint8_t base){
    201e:	1c 00 fa    	lnk       #0x1c
    2020:	88 1f 78    	mov.w     w8, [w15++]
    2022:	20 0f 98    	mov.w     w0, [w14+20]
    2024:	32 0f 98    	mov.w     w2, [w14+22]
    2026:	43 0f 98    	mov.w     w3, [w14+24]
    2028:	21 5f 98    	mov.b     w1, [w14+26]
    202a:	34 5f 98    	mov.b     w4, [w14+27]
  uint8_t numericDigits = 4;   // available digits on display
    202c:	40 c0 b3    	mov.b     #0x4, w0
    202e:	00 4f 78    	mov.b     w0, [w14]
  uint8_t isNegative = 0;  // true if the number is negative
    2030:	00 40 eb    	clr.b     w0
    2032:	10 47 98    	mov.b     w0, [w14+1]

  // is the number negative?
  if(n < 0) {
    2034:	18 c0 b3    	mov.b     #0x1, w8
    2036:	60 11 b8    	mul.uu    w2, #0x0, w2
    2038:	3e 08 90    	mov.w     [w14+22], w0
    203a:	ce 08 90    	mov.w     [w14+24], w1
    203c:	94 f9 07    	rcall     0x1366 <___eqsf2> <___lesf2> <___ltsf2>
    203e:	00 00 e0    	cp0.w     w0
    2040:	01 00 35    	bra       LT, 0x2044 <.L39>
    2042:	00 44 eb    	clr.b     w8

00002044 <.L39>:
    2044:	08 04 e0    	cp0.b     w8
    2046:	08 00 32    	bra       Z, 0x2058 <.L40>
    isNegative = 1;  // need to draw sign later
    2048:	10 c0 b3    	mov.b     #0x1, w0
    204a:	10 47 98    	mov.b     w0, [w14+1]
    --numericDigits;    // the sign will take up one digit
    204c:	1e 4f e9    	dec.b     [w14], [w14]
    n *= -1;            // pretend the number is positive
    204e:	3e 08 90    	mov.w     [w14+22], w0
    2050:	ce 08 90    	mov.w     [w14+24], w1
    2052:	01 f0 a2    	btg.w     w1, #0xf
    2054:	30 0f 98    	mov.w     w0, [w14+22]
    2056:	41 0f 98    	mov.w     w1, [w14+24]

00002058 <.L40>:
  }

  // calculate the factor required to shift all fractional digits
  // into the integer part of the number
  double toIntFactor = 1.0;
    2058:	00 00 20    	mov.w     #0x0, w0
    205a:	01 f8 23    	mov.w     #0x3f80, w1
    205c:	10 07 98    	mov.w     w0, [w14+2]
    205e:	21 07 98    	mov.w     w1, [w14+4]
	int i = 0;
    2060:	00 00 eb    	clr.w     w0
    2062:	30 07 98    	mov.w     w0, [w14+6]
  for(i = 0; i < fracDigits; ++i) toIntFactor *= base;
    2064:	00 00 eb    	clr.w     w0
    2066:	30 07 98    	mov.w     w0, [w14+6]
    2068:	0d 00 37    	bra       0x2084 <.L41>

0000206a <.L42>:
    206a:	3e 58 90    	mov.b     [w14+27], w0
    206c:	00 80 fb    	ze        w0, w0
    206e:	cf 80 de    	asr.w     w0, #0xf, w1
    2070:	97 f9 07    	rcall     0x13a0 <___floatsisf>
    2072:	00 01 be    	mov.d     w0, w2
    2074:	1e 00 90    	mov.w     [w14+2], w0
    2076:	ae 00 90    	mov.w     [w14+4], w1
    2078:	e9 f9 07    	rcall     0x144c <___mulsf3>
    207a:	10 07 98    	mov.w     w0, [w14+2]
    207c:	21 07 98    	mov.w     w1, [w14+4]
    207e:	3e 00 90    	mov.w     [w14+6], w0
    2080:	00 00 e8    	inc.w     w0, w0
    2082:	30 07 98    	mov.w     w0, [w14+6]

00002084 <.L41>:
    2084:	2e 58 90    	mov.b     [w14+26], w0
    2086:	80 80 fb    	ze        w0, w1
    2088:	3e 00 90    	mov.w     [w14+6], w0
    208a:	80 8f 50    	sub.w     w1, w0, [w15]
    208c:	ee ff 3c    	bra       GT, 0x206a <.L42>

  // create integer containing digits to display by applying
  // shifting factor and rounding adjustment
  uint32_t displayNumber = n * toIntFactor + 0.5;
    208e:	1e 01 90    	mov.w     [w14+2], w2
    2090:	ae 01 90    	mov.w     [w14+4], w3
    2092:	3e 08 90    	mov.w     [w14+22], w0
    2094:	ce 08 90    	mov.w     [w14+24], w1
    2096:	da f9 07    	rcall     0x144c <___mulsf3>
    2098:	02 00 20    	mov.w     #0x0, w2
    209a:	03 f0 23    	mov.w     #0x3f00, w3
    209c:	c5 f8 07    	rcall     0x1228 <___addsf3>
    209e:	65 f9 07    	rcall     0x136a <___fixunssfsi>
    20a0:	40 07 98    	mov.w     w0, [w14+8]
    20a2:	51 07 98    	mov.w     w1, [w14+10]

  // calculate upper bound on displayNumber given
  // available digits on display
  uint32_t tooBig = 1;
    20a4:	10 00 20    	mov.w     #0x1, w0
    20a6:	01 00 20    	mov.w     #0x0, w1
    20a8:	60 07 98    	mov.w     w0, [w14+12]
    20aa:	71 07 98    	mov.w     w1, [w14+14]
  for(i = 0; i < numericDigits; ++i) tooBig *= base;
    20ac:	00 00 eb    	clr.w     w0
    20ae:	30 07 98    	mov.w     w0, [w14+6]
    20b0:	15 00 37    	bra       0x20dc <.L43>

000020b2 <.L44>:
    20b2:	3e 58 90    	mov.b     [w14+27], w0
    20b4:	00 80 fb    	ze        w0, w0
    20b6:	80 00 eb    	clr.w     w1
    20b8:	7e 01 90    	mov.w     [w14+14], w2
    20ba:	00 91 b9    	mul.ss    w2, w0, w2
    20bc:	02 01 78    	mov.w     w2, w2
    20be:	ee 01 90    	mov.w     [w14+12], w3
    20c0:	01 9a b9    	mul.ss    w3, w1, w4
    20c2:	84 01 78    	mov.w     w4, w3
    20c4:	03 01 41    	add.w     w2, w3, w2
    20c6:	ee 01 90    	mov.w     [w14+12], w3
    20c8:	00 18 b8    	mul.uu    w3, w0, w0
    20ca:	01 01 41    	add.w     w2, w1, w2
    20cc:	82 00 78    	mov.w     w2, w1
    20ce:	60 07 98    	mov.w     w0, [w14+12]
    20d0:	71 07 98    	mov.w     w1, [w14+14]
    20d2:	60 07 98    	mov.w     w0, [w14+12]
    20d4:	71 07 98    	mov.w     w1, [w14+14]
    20d6:	3e 00 90    	mov.w     [w14+6], w0
    20d8:	00 00 e8    	inc.w     w0, w0
    20da:	30 07 98    	mov.w     w0, [w14+6]

000020dc <.L43>:
    20dc:	9e 80 fb    	ze        [w14], w1
    20de:	3e 00 90    	mov.w     [w14+6], w0
    20e0:	80 8f 50    	sub.w     w1, w0, [w15]
    20e2:	e7 ff 3c    	bra       GT, 0x20b2 <.L44>

  // if displayNumber is too large, try fewer fractional digits
  while(displayNumber >= tooBig) {
    20e4:	18 00 37    	bra       0x2116 <.L45>

000020e6 <.L46>:
    --fracDigits;
    20e6:	2e 58 90    	mov.b     [w14+26], w0
    20e8:	00 40 e9    	dec.b     w0, w0
    20ea:	20 5f 98    	mov.b     w0, [w14+26]
    toIntFactor /= base;
    20ec:	3e 58 90    	mov.b     [w14+27], w0
    20ee:	00 80 fb    	ze        w0, w0
    20f0:	cf 80 de    	asr.w     w0, #0xf, w1
    20f2:	56 f9 07    	rcall     0x13a0 <___floatsisf>
    20f4:	00 01 be    	mov.d     w0, w2
    20f6:	1e 00 90    	mov.w     [w14+2], w0
    20f8:	ae 00 90    	mov.w     [w14+4], w1
    20fa:	f3 f8 07    	rcall     0x12e2 <___divsf3>
    20fc:	10 07 98    	mov.w     w0, [w14+2]
    20fe:	21 07 98    	mov.w     w1, [w14+4]
    displayNumber = n * toIntFactor + 0.5;
    2100:	1e 01 90    	mov.w     [w14+2], w2
    2102:	ae 01 90    	mov.w     [w14+4], w3
    2104:	3e 08 90    	mov.w     [w14+22], w0
    2106:	ce 08 90    	mov.w     [w14+24], w1
    2108:	a1 f9 07    	rcall     0x144c <___mulsf3>
    210a:	02 00 20    	mov.w     #0x0, w2
    210c:	03 f0 23    	mov.w     #0x3f00, w3
    210e:	8c f8 07    	rcall     0x1228 <___addsf3>
    2110:	2c f9 07    	rcall     0x136a <___fixunssfsi>
    2112:	40 07 98    	mov.w     w0, [w14+8]
    2114:	51 07 98    	mov.w     w1, [w14+10]

00002116 <.L45>:
    2116:	4e 01 90    	mov.w     [w14+8], w2
    2118:	de 01 90    	mov.w     [w14+10], w3
    211a:	6e 00 90    	mov.w     [w14+12], w0
    211c:	fe 00 90    	mov.w     [w14+14], w1
    211e:	80 0f 51    	sub.w     w2, w0, [w15]
    2120:	81 8f 59    	subb.w    w3, w1, [w15]
    2122:	e1 ff 31    	bra       C, 0x20e6 <.L46>
  }

  // did toIntFactor shift the decimal off the display?
  if (toIntFactor < 1) {
    2124:	18 c0 b3    	mov.b     #0x1, w8
    2126:	02 00 20    	mov.w     #0x0, w2
    2128:	03 f8 23    	mov.w     #0x3f80, w3
    212a:	1e 00 90    	mov.w     [w14+2], w0
    212c:	ae 00 90    	mov.w     [w14+4], w1
    212e:	1b f9 07    	rcall     0x1366 <___eqsf2> <___lesf2> <___ltsf2>
    2130:	00 00 e0    	cp0.w     w0
    2132:	01 00 35    	bra       LT, 0x2136 <.L47>
    2134:	00 44 eb    	clr.b     w8

00002136 <.L47>:
    2136:	08 04 e0    	cp0.b     w8
    2138:	03 00 32    	bra       Z, 0x2140 <.L48> <.LBB2>
    sevseg_printError(ptr);
    213a:	2e 08 90    	mov.w     [w14+20], w0
    213c:	6c 00 07    	rcall     0x2216 <_sevseg_printError> <.LFB15> <.LFE14>
    213e:	68 00 37    	bra       0x2210 <.L38> <.LBE2>

00002140 <.L48>:
  } else {
    // otherwise, display the number
    int8_t displayPos = 4;
    2140:	40 c0 b3    	mov.b     #0x4, w0
    2142:	00 57 98    	mov.b     w0, [w14+16]

    if (displayNumber)  //if displayNumber is not 0
    2144:	4e 00 90    	mov.w     [w14+8], w0
    2146:	de 00 90    	mov.w     [w14+10], w1
    2148:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    214a:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    214c:	41 00 32    	bra       Z, 0x21d0 <.L50> <.LBE3>

0000214e <.LBB3>:
    {
			uint8_t i;
      for(i = 0; displayNumber || i <= fracDigits; ++i) {
    214e:	00 40 eb    	clr.b     w0
    2150:	10 57 98    	mov.b     w0, [w14+17]
    2152:	34 00 37    	bra       0x21bc <.L51>

00002154 <.L55>:
        uint8_t displayDecimal = (fracDigits != 0 && i == fracDigits);
    2154:	2e 58 90    	mov.b     [w14+26], w0
    2156:	00 04 e0    	cp0.b     w0
    2158:	06 00 32    	bra       Z, 0x2166 <.L52>
    215a:	9e 50 90    	mov.b     [w14+17], w1
    215c:	2e 58 90    	mov.b     [w14+26], w0
    215e:	80 cf 50    	sub.b     w1, w0, [w15]
    2160:	02 00 3a    	bra       NZ, 0x2166 <.L52>
    2162:	10 00 20    	mov.w     #0x1, w0
    2164:	01 00 37    	bra       0x2168 <.L53>

00002166 <.L52>:
    2166:	00 00 eb    	clr.w     w0

00002168 <.L53>:
    2168:	20 57 98    	mov.b     w0, [w14+18]
        sevseg_writeDigitNum(ptr, displayPos--, displayNumber % base, displayDecimal);
    216a:	3e 58 90    	mov.b     [w14+27], w0
    216c:	00 80 fb    	ze        w0, w0
    216e:	80 00 eb    	clr.w     w1
    2170:	4e 02 90    	mov.w     [w14+8], w4
    2172:	de 02 90    	mov.w     [w14+10], w5
    2174:	00 01 be    	mov.d     w0, w2
    2176:	04 00 be    	mov.d     w4, w0
    2178:	ad f9 07    	rcall     0x14d4 <___umodsi3>
    217a:	80 40 78    	mov.b     w0, w1
    217c:	0e 50 90    	mov.b     [w14+16], w0
    217e:	0e 51 90    	mov.b     [w14+16], w2
    2180:	02 41 e9    	dec.b     w2, w2
    2182:	02 57 98    	mov.b     w2, [w14+16]
    2184:	ae 51 90    	mov.b     [w14+18], w3
    2186:	01 41 78    	mov.b     w1, w2
    2188:	80 40 78    	mov.b     w0, w1
    218a:	2e 08 90    	mov.w     [w14+20], w0
    218c:	0e ff 07    	rcall     0x1faa <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
        if(displayPos == 2) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    218e:	0e 50 90    	mov.b     [w14+16], w0
    2190:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    2192:	08 00 3a    	bra       NZ, 0x21a4 <.L54>
    2194:	0e 50 90    	mov.b     [w14+16], w0
    2196:	8e 50 90    	mov.b     [w14+16], w1
    2198:	81 40 e9    	dec.b     w1, w1
    219a:	01 57 98    	mov.b     w1, [w14+16]
    219c:	00 01 eb    	clr.w     w2
    219e:	80 40 78    	mov.b     w0, w1
    21a0:	2e 08 90    	mov.w     [w14+20], w0
    21a2:	f1 fe 07    	rcall     0x1f86 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

000021a4 <.L54>:
        displayNumber /= base;
    21a4:	3e 58 90    	mov.b     [w14+27], w0
    21a6:	00 80 fb    	ze        w0, w0
    21a8:	80 00 eb    	clr.w     w1
    21aa:	00 01 be    	mov.d     w0, w2
    21ac:	4e 00 90    	mov.w     [w14+8], w0
    21ae:	de 00 90    	mov.w     [w14+10], w1
    21b0:	81 f9 07    	rcall     0x14b4 <___udivsi3>
    21b2:	40 07 98    	mov.w     w0, [w14+8]
    21b4:	51 07 98    	mov.w     w1, [w14+10]

000021b6 <.LBE4>:
    21b6:	1e 50 90    	mov.b     [w14+17], w0
    21b8:	00 40 e8    	inc.b     w0, w0
    21ba:	10 57 98    	mov.b     w0, [w14+17]

000021bc <.L51>:
    21bc:	4e 00 90    	mov.w     [w14+8], w0
    21be:	de 00 90    	mov.w     [w14+10], w1
    21c0:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    21c2:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    21c4:	c7 ff 3a    	bra       NZ, 0x2154 <.L55> <.LBB4>
    21c6:	9e 50 90    	mov.b     [w14+17], w1
    21c8:	2e 58 90    	mov.b     [w14+26], w0
    21ca:	80 cf 50    	sub.b     w1, w0, [w15]
    21cc:	c3 ff 36    	bra       LEU, 0x2154 <.L55> <.LBB4>
    21ce:	09 00 37    	bra       0x21e2 <.L56>

000021d0 <.L50>:
      }
    }
    else {
      sevseg_writeDigitNum(ptr, displayPos--, 0, 0);
    21d0:	0e 50 90    	mov.b     [w14+16], w0
    21d2:	8e 50 90    	mov.b     [w14+16], w1
    21d4:	81 40 e9    	dec.b     w1, w1
    21d6:	01 57 98    	mov.b     w1, [w14+16]
    21d8:	80 41 eb    	clr.b     w3
    21da:	00 41 eb    	clr.b     w2
    21dc:	80 40 78    	mov.b     w0, w1
    21de:	2e 08 90    	mov.w     [w14+20], w0
    21e0:	e4 fe 07    	rcall     0x1faa <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

000021e2 <.L56>:
    }

    // display negative sign if negative
    if(isNegative) sevseg_writeDigitRaw(ptr, displayPos--, 0x40);
    21e2:	1e 40 90    	mov.b     [w14+1], w0
    21e4:	00 04 e0    	cp0.b     w0
    21e6:	11 00 32    	bra       Z, 0x220a <.L58>
    21e8:	0e 50 90    	mov.b     [w14+16], w0
    21ea:	8e 50 90    	mov.b     [w14+16], w1
    21ec:	81 40 e9    	dec.b     w1, w1
    21ee:	01 57 98    	mov.b     w1, [w14+16]
    21f0:	02 04 20    	mov.w     #0x40, w2
    21f2:	80 40 78    	mov.b     w0, w1
    21f4:	2e 08 90    	mov.w     [w14+20], w0
    21f6:	c7 fe 07    	rcall     0x1f86 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

    // clear remaining display positions
    while(displayPos >= 0) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    21f8:	08 00 37    	bra       0x220a <.L58>

000021fa <.L59>:
    21fa:	0e 50 90    	mov.b     [w14+16], w0
    21fc:	8e 50 90    	mov.b     [w14+16], w1
    21fe:	81 40 e9    	dec.b     w1, w1
    2200:	01 57 98    	mov.b     w1, [w14+16]
    2202:	00 01 eb    	clr.w     w2
    2204:	80 40 78    	mov.b     w0, w1
    2206:	2e 08 90    	mov.w     [w14+20], w0
    2208:	be fe 07    	rcall     0x1f86 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

0000220a <.L58>:
    220a:	0e 50 90    	mov.b     [w14+16], w0
    220c:	00 04 e0    	cp0.b     w0
    220e:	f5 ff 3d    	bra       GE, 0x21fa <.L59>

00002210 <.L38>:
  }
}
    2210:	4f 04 78    	mov.w     [--w15], w8
    2212:	00 80 fa    	ulnk      
    2214:	00 00 06    	return    

00002216 <_sevseg_printError>:

void sevseg_printError(_7SEGMENT* ptr){
    2216:	04 00 fa    	lnk       #0x4
    2218:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
  for(i = 0; i < SEVENSEG_DIGITS; ++i) {
    221a:	00 40 eb    	clr.b     w0
    221c:	00 4f 78    	mov.b     w0, [w14]
    221e:	0b 00 37    	bra       0x2236 <.L61>

00002220 <.L64>:
    sevseg_writeDigitRaw(ptr, i, (i == 2 ? 0x00 : 0x40));
    2220:	1e 40 78    	mov.b     [w14], w0
    2222:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    2224:	02 00 3a    	bra       NZ, 0x222a <.L62>
    2226:	00 00 eb    	clr.w     w0
    2228:	01 00 37    	bra       0x222c <.L63>

0000222a <.L62>:
    222a:	00 04 20    	mov.w     #0x40, w0

0000222c <.L63>:
    222c:	00 01 78    	mov.w     w0, w2
    222e:	9e 40 78    	mov.b     [w14], w1
    2230:	1e 00 90    	mov.w     [w14+2], w0
    2232:	a9 fe 07    	rcall     0x1f86 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    2234:	1e 4f e8    	inc.b     [w14], [w14]

00002236 <.L61>:
    2236:	1e 40 78    	mov.b     [w14], w0
    2238:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    223a:	f2 ff 36    	bra       LEU, 0x2220 <.L64>
  }
}
    223c:	00 80 fa    	ulnk      
    223e:	00 00 06    	return    

00002240 <_sevseg_writeColon>:


void sevseg_writeColon(_7SEGMENT* ptr){
    2240:	02 00 fa    	lnk       #0x2
    2242:	00 0f 78    	mov.w     w0, [w14]
  /*
  Wire.beginTransmission(i2c_addr);
  Wire.write((uint8_t)0x04);

  Wire.write(displaybuffer[2] & 0xFF);
  Wire.write(displaybuffer[2] >> 8);

  Wire.endTransmission();
  */
  i2c_start();
    2244:	33 00 07    	rcall     0x22ac <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->super.i2c_addr);
    2246:	1e 00 78    	mov.w     [w14], w0
    2248:	00 50 90    	mov.b     [w0+16], w0
    224a:	00 80 fb    	ze        w0, w0
    224c:	7e 00 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte((uint8_t)0x04); // start at address $02
    224e:	40 00 20    	mov.w     #0x4, w0
    2250:	7c 00 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] & 0xFF);
    2252:	1e 00 78    	mov.w     [w14], w0
    2254:	20 00 90    	mov.w     [w0+4], w0
    2256:	80 00 78    	mov.w     w0, w1
    2258:	f0 0f 20    	mov.w     #0xff, w0
    225a:	00 80 60    	and.w     w1, w0, w0
    225c:	76 00 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] >> 8);
    225e:	1e 00 78    	mov.w     [w14], w0
    2260:	20 00 90    	mov.w     [w0+4], w0
    2262:	48 00 de    	lsr.w     w0, #0x8, w0
    2264:	72 00 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    2266:	56 00 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    2268:	00 80 fa    	ulnk      
    226a:	00 00 06    	return    

0000226c <_delay_by_nop>:
    226c:	08 00 fa    	lnk       #0x8
    226e:	20 07 98    	mov.w     w0, [w14+4]
    2270:	31 07 98    	mov.w     w1, [w14+6]
    2272:	60 00 b8    	mul.uu    w0, #0x0, w0
    2274:	00 8f be    	mov.d     w0, [w14]
    2276:	05 00 37    	bra       0x2282 <.L2>

00002278 <.L3>:
    2278:	00 00 00    	nop       
    227a:	12 00 20    	mov.w     #0x1, w2
    227c:	03 00 20    	mov.w     #0x0, w3
    227e:	1e 0f 41    	add.w     w2, [w14], [w14]
    2280:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00002282 <.L2>:
    2282:	2e 00 90    	mov.w     [w14+4], w0
    2284:	be 00 90    	mov.w     [w14+6], w1
    2286:	1e 01 be    	mov.d     [w14], w2
    2288:	80 0f 51    	sub.w     w2, w0, [w15]
    228a:	81 8f 59    	subb.w    w3, w1, [w15]
    228c:	f5 ff 39    	bra       NC, 0x2278 <.L3>
    228e:	00 80 fa    	ulnk      
    2290:	00 00 06    	return    

00002292 <_i2c_init>:
    2292:	04 00 fa    	lnk       #0x4
    2294:	10 07 98    	mov.w     w0, [w14+2]
    2296:	1e 00 90    	mov.w     [w14+2], w0
    2298:	a0 13 88    	mov.w     w0, 0x274
    229a:	77 e2 a9    	bclr.b    0x277, #0x7
    229c:	77 22 a8    	bset.b    0x277, #0x1
    229e:	8e a0 a9    	bclr.b    0x8e, #0x5
    22a0:	77 e2 a8    	bset.b    0x277, #0x7
    22a2:	80 13 80    	mov.w     0x270, w0
    22a4:	00 0f 78    	mov.w     w0, [w14]
    22a6:	36 00 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
    22a8:	00 80 fa    	ulnk      
    22aa:	00 00 06    	return    

000022ac <_i2c_start>:
    22ac:	02 00 fa    	lnk       #0x2
    22ae:	00 00 eb    	clr.w     w0
    22b0:	00 0f 78    	mov.w     w0, [w14]
    22b2:	76 a2 a9    	bclr.b    0x276, #0x5
    22b4:	a0 00 20    	mov.w     #0xa, w0
    22b6:	01 00 20    	mov.w     #0x0, w1
    22b8:	d9 ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    22ba:	76 02 a8    	bset.b    0x276, #0x0
    22bc:	00 00 00    	nop       
    22be:	07 00 37    	bra       0x22ce <.L6>

000022c0 <.L8>:
    22c0:	10 00 20    	mov.w     #0x1, w0
    22c2:	01 00 20    	mov.w     #0x0, w1
    22c4:	d3 ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    22c6:	1e 0f e8    	inc.w     [w14], [w14]
    22c8:	1e 00 78    	mov.w     [w14], w0
    22ca:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    22cc:	05 00 3c    	bra       GT, 0x22d8 <.L9>

000022ce <.L6>:
    22ce:	b0 13 80    	mov.w     0x276, w0
    22d0:	61 00 60    	and.w     w0, #0x1, w0
    22d2:	00 00 e0    	cp0.w     w0
    22d4:	f5 ff 3a    	bra       NZ, 0x22c0 <.L8>
    22d6:	01 00 37    	bra       0x22da <.L7>

000022d8 <.L9>:
    22d8:	00 00 00    	nop       

000022da <.L7>:
    22da:	20 00 20    	mov.w     #0x2, w0
    22dc:	01 00 20    	mov.w     #0x0, w1
    22de:	c6 ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    22e0:	00 80 fa    	ulnk      
    22e2:	00 00 06    	return    

000022e4 <_i2c_restart>:
    22e4:	02 00 fa    	lnk       #0x2
    22e6:	00 00 eb    	clr.w     w0
    22e8:	00 0f 78    	mov.w     w0, [w14]
    22ea:	76 22 a8    	bset.b    0x276, #0x1
    22ec:	00 00 00    	nop       
    22ee:	07 00 37    	bra       0x22fe <.L11>

000022f0 <.L13>:
    22f0:	10 00 20    	mov.w     #0x1, w0
    22f2:	01 00 20    	mov.w     #0x0, w1
    22f4:	bb ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    22f6:	1e 0f e8    	inc.w     [w14], [w14]
    22f8:	1e 00 78    	mov.w     [w14], w0
    22fa:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    22fc:	05 00 3c    	bra       GT, 0x2308 <.L14>

000022fe <.L11>:
    22fe:	b0 13 80    	mov.w     0x276, w0
    2300:	62 00 60    	and.w     w0, #0x2, w0
    2302:	00 00 e0    	cp0.w     w0
    2304:	f5 ff 3a    	bra       NZ, 0x22f0 <.L13>
    2306:	01 00 37    	bra       0x230a <.L12>

00002308 <.L14>:
    2308:	00 00 00    	nop       

0000230a <.L12>:
    230a:	20 00 20    	mov.w     #0x2, w0
    230c:	01 00 20    	mov.w     #0x0, w1
    230e:	ae ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2310:	00 80 fa    	ulnk      
    2312:	00 00 06    	return    

00002314 <_reset_i2c_bus>:
    2314:	02 00 fa    	lnk       #0x2
    2316:	00 00 eb    	clr.w     w0
    2318:	00 0f 78    	mov.w     w0, [w14]
    231a:	76 42 a8    	bset.b    0x276, #0x2
    231c:	07 00 37    	bra       0x232c <.L16>

0000231e <.L18>:
    231e:	10 00 20    	mov.w     #0x1, w0
    2320:	01 00 20    	mov.w     #0x0, w1
    2322:	a4 ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2324:	1e 0f e8    	inc.w     [w14], [w14]
    2326:	1e 00 78    	mov.w     [w14], w0
    2328:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    232a:	05 00 3c    	bra       GT, 0x2336 <.L19>

0000232c <.L16>:
    232c:	b0 13 80    	mov.w     0x276, w0
    232e:	64 00 60    	and.w     w0, #0x4, w0
    2330:	00 00 e0    	cp0.w     w0
    2332:	f5 ff 3a    	bra       NZ, 0x231e <.L18>
    2334:	01 00 37    	bra       0x2338 <.L17>

00002336 <.L19>:
    2336:	00 00 00    	nop       

00002338 <.L17>:
    2338:	76 62 a9    	bclr.b    0x276, #0x3
    233a:	8e a0 a9    	bclr.b    0x8e, #0x5
    233c:	78 e2 a9    	bclr.b    0x278, #0x7
    233e:	79 42 a9    	bclr.b    0x279, #0x2
    2340:	40 01 20    	mov.w     #0x14, w0
    2342:	01 00 20    	mov.w     #0x0, w1
    2344:	93 ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2346:	00 80 fa    	ulnk      
    2348:	00 00 06    	return    

0000234a <_send_i2c_byte>:
    234a:	04 00 fa    	lnk       #0x4
    234c:	10 07 98    	mov.w     w0, [w14+2]
    234e:	00 00 00    	nop       

00002350 <.L21>:
    2350:	c0 13 80    	mov.w     0x278, w0
    2352:	61 00 60    	and.w     w0, #0x1, w0
    2354:	00 00 e0    	cp0.w     w0
    2356:	fc ff 3a    	bra       NZ, 0x2350 <.L21>
    2358:	8e a0 a9    	bclr.b    0x8e, #0x5
    235a:	1e 00 90    	mov.w     [w14+2], w0
    235c:	90 13 88    	mov.w     w0, 0x272
    235e:	00 00 eb    	clr.w     w0
    2360:	00 0f 78    	mov.w     w0, [w14]
    2362:	09 00 37    	bra       0x2376 <.L22>

00002364 <.L25>:
    2364:	c1 13 80    	mov.w     0x278, w1
    2366:	00 00 24    	mov.w     #0x4000, w0
    2368:	00 80 60    	and.w     w1, w0, w0
    236a:	00 00 e0    	cp0.w     w0
    236c:	09 00 32    	bra       Z, 0x2380 <.L29>
    236e:	10 00 20    	mov.w     #0x1, w0
    2370:	01 00 20    	mov.w     #0x0, w1
    2372:	7c ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2374:	1e 0f e8    	inc.w     [w14], [w14]

00002376 <.L22>:
    2376:	30 1f 20    	mov.w     #0x1f3, w0
    2378:	9e 00 78    	mov.w     [w14], w1
    237a:	80 8f 50    	sub.w     w1, w0, [w15]
    237c:	f3 ff 34    	bra       LE, 0x2364 <.L25>
    237e:	01 00 37    	bra       0x2382 <.L24>

00002380 <.L29>:
    2380:	00 00 00    	nop       

00002382 <.L24>:
    2382:	40 1f 20    	mov.w     #0x1f4, w0
    2384:	9e 00 78    	mov.w     [w14], w1
    2386:	80 8f 50    	sub.w     w1, w0, [w15]
    2388:	02 00 3a    	bra       NZ, 0x238e <.L26>
    238a:	10 c0 b3    	mov.b     #0x1, w0
    238c:	0c 00 37    	bra       0x23a6 <.L27>

0000238e <.L26>:
    238e:	c1 13 80    	mov.w     0x278, w1
    2390:	00 00 28    	mov.w     #0x8000, w0
    2392:	00 80 60    	and.w     w1, w0, w0
    2394:	00 00 e0    	cp0.w     w0
    2396:	03 00 32    	bra       Z, 0x239e <.L28>
    2398:	bd ff 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
    239a:	10 c0 b3    	mov.b     #0x1, w0
    239c:	04 00 37    	bra       0x23a6 <.L27>

0000239e <.L28>:
    239e:	20 00 20    	mov.w     #0x2, w0
    23a0:	01 00 20    	mov.w     #0x0, w1
    23a2:	64 ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    23a4:	00 40 eb    	clr.b     w0

000023a6 <.L27>:
    23a6:	00 80 fa    	ulnk      
    23a8:	00 00 06    	return    

000023aa <_i2c_read>:
    23aa:	04 00 fa    	lnk       #0x4
    23ac:	00 00 eb    	clr.w     w0
    23ae:	00 0f 78    	mov.w     w0, [w14]
    23b0:	00 40 eb    	clr.b     w0
    23b2:	20 47 98    	mov.b     w0, [w14+2]
    23b4:	76 62 a8    	bset.b    0x276, #0x3
    23b6:	05 00 37    	bra       0x23c2 <.L31>

000023b8 <.L33>:
    23b8:	1e 0f e8    	inc.w     [w14], [w14]
    23ba:	00 7d 20    	mov.w     #0x7d0, w0
    23bc:	9e 00 78    	mov.w     [w14], w1
    23be:	80 8f 50    	sub.w     w1, w0, [w15]
    23c0:	05 00 3c    	bra       GT, 0x23cc <.L34>

000023c2 <.L31>:
    23c2:	c0 13 80    	mov.w     0x278, w0
    23c4:	62 00 60    	and.w     w0, #0x2, w0
    23c6:	00 00 e0    	cp0.w     w0
    23c8:	f7 ff 32    	bra       Z, 0x23b8 <.L33>
    23ca:	01 00 37    	bra       0x23ce <.L32>

000023cc <.L34>:
    23cc:	00 00 00    	nop       

000023ce <.L32>:
    23ce:	80 13 80    	mov.w     0x270, w0
    23d0:	20 47 98    	mov.b     w0, [w14+2]
    23d2:	2e 40 90    	mov.b     [w14+2], w0
    23d4:	00 80 fa    	ulnk      
    23d6:	00 00 06    	return    

000023d8 <_i2c_read_ack>:
    23d8:	04 00 fa    	lnk       #0x4
    23da:	00 00 eb    	clr.w     w0
    23dc:	00 0f 78    	mov.w     w0, [w14]
    23de:	00 40 eb    	clr.b     w0
    23e0:	20 47 98    	mov.b     w0, [w14+2]
    23e2:	76 62 a8    	bset.b    0x276, #0x3
    23e4:	05 00 37    	bra       0x23f0 <.L36>

000023e6 <.L38>:
    23e6:	1e 0f e8    	inc.w     [w14], [w14]
    23e8:	00 7d 20    	mov.w     #0x7d0, w0
    23ea:	9e 00 78    	mov.w     [w14], w1
    23ec:	80 8f 50    	sub.w     w1, w0, [w15]
    23ee:	05 00 3c    	bra       GT, 0x23fa <.L39>

000023f0 <.L36>:
    23f0:	c0 13 80    	mov.w     0x278, w0
    23f2:	62 00 60    	and.w     w0, #0x2, w0
    23f4:	00 00 e0    	cp0.w     w0
    23f6:	f7 ff 32    	bra       Z, 0x23e6 <.L38>
    23f8:	01 00 37    	bra       0x23fc <.L37>

000023fa <.L39>:
    23fa:	00 00 00    	nop       

000023fc <.L37>:
    23fc:	80 13 80    	mov.w     0x270, w0
    23fe:	20 47 98    	mov.b     w0, [w14+2]
    2400:	76 82 a8    	bset.b    0x276, #0x4
    2402:	a0 00 20    	mov.w     #0xa, w0
    2404:	01 00 20    	mov.w     #0x0, w1
    2406:	32 ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2408:	2e 40 90    	mov.b     [w14+2], w0
    240a:	00 80 fa    	ulnk      
    240c:	00 00 06    	return    

0000240e <_i2c_read_nack>:
    240e:	04 00 fa    	lnk       #0x4
    2410:	00 00 eb    	clr.w     w0
    2412:	00 0f 78    	mov.w     w0, [w14]
    2414:	00 40 eb    	clr.b     w0
    2416:	20 47 98    	mov.b     w0, [w14+2]
    2418:	76 62 a8    	bset.b    0x276, #0x3
    241a:	05 00 37    	bra       0x2426 <.L41>

0000241c <.L43>:
    241c:	1e 0f e8    	inc.w     [w14], [w14]
    241e:	00 7d 20    	mov.w     #0x7d0, w0
    2420:	9e 00 78    	mov.w     [w14], w1
    2422:	80 8f 50    	sub.w     w1, w0, [w15]
    2424:	05 00 3c    	bra       GT, 0x2430 <.L44>

00002426 <.L41>:
    2426:	c0 13 80    	mov.w     0x278, w0
    2428:	62 00 60    	and.w     w0, #0x2, w0
    242a:	00 00 e0    	cp0.w     w0
    242c:	f7 ff 32    	bra       Z, 0x241c <.L43>
    242e:	01 00 37    	bra       0x2432 <.L42>

00002430 <.L44>:
    2430:	00 00 00    	nop       

00002432 <.L42>:
    2432:	80 13 80    	mov.w     0x270, w0
    2434:	20 47 98    	mov.b     w0, [w14+2]
    2436:	76 a2 a8    	bset.b    0x276, #0x5
    2438:	76 82 a8    	bset.b    0x276, #0x4
    243a:	a0 00 20    	mov.w     #0xa, w0
    243c:	01 00 20    	mov.w     #0x0, w1
    243e:	16 ff 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2440:	2e 40 90    	mov.b     [w14+2], w0
    2442:	00 80 fa    	ulnk      
    2444:	00 00 06    	return    

00002446 <_I2Cwrite>:
    2446:	04 00 fa    	lnk       #0x4
    2448:	00 4f 78    	mov.b     w0, [w14]
    244a:	11 47 98    	mov.b     w1, [w14+1]
    244c:	22 47 98    	mov.b     w2, [w14+2]
    244e:	2e ff 07    	rcall     0x22ac <_i2c_start> <.LFB2> <.LFE1>
    2450:	1e 00 fb    	se        [w14], w0
    2452:	80 00 78    	mov.w     w0, w1
    2454:	e0 ff 2f    	mov.w     #0xfffe, w0
    2456:	00 80 60    	and.w     w1, w0, w0
    2458:	78 ff 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    245a:	1e 40 90    	mov.b     [w14+1], w0
    245c:	00 00 fb    	se        w0, w0
    245e:	75 ff 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    2460:	2e 40 90    	mov.b     [w14+2], w0
    2462:	00 00 fb    	se        w0, w0
    2464:	72 ff 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    2466:	56 ff 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
    2468:	00 80 fa    	ulnk      
    246a:	00 00 06    	return    

0000246c <_I2Cread>:
    246c:	04 00 fa    	lnk       #0x4
    246e:	20 47 98    	mov.b     w0, [w14+2]
    2470:	31 47 98    	mov.b     w1, [w14+3]
    2472:	1c ff 07    	rcall     0x22ac <_i2c_start> <.LFB2> <.LFE1>
    2474:	2e 40 90    	mov.b     [w14+2], w0
    2476:	00 00 fb    	se        w0, w0
    2478:	68 ff 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    247a:	3e 40 90    	mov.b     [w14+3], w0
    247c:	00 00 fb    	se        w0, w0
    247e:	65 ff 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    2480:	a0 00 20    	mov.w     #0xa, w0
    2482:	01 00 20    	mov.w     #0x0, w1
    2484:	f3 fe 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2486:	2e ff 07    	rcall     0x22e4 <_i2c_restart> <.LFB3> <.LFE2>
    2488:	2e 40 90    	mov.b     [w14+2], w0
    248a:	00 04 a0    	bset.b    w0, #0x0
    248c:	00 00 fb    	se        w0, w0
    248e:	5d ff 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    2490:	8c ff 07    	rcall     0x23aa <_i2c_read> <.LFB6> <.LFE5>
    2492:	00 4f 78    	mov.b     w0, [w14]
    2494:	3f ff 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
    2496:	1e 40 78    	mov.b     [w14], w0
    2498:	00 80 fa    	ulnk      
    249a:	00 00 06    	return    

0000249c <_I2Cpoll>:
    249c:	04 00 fa    	lnk       #0x4
    249e:	20 47 98    	mov.b     w0, [w14+2]
    24a0:	00 40 eb    	clr.b     w0
    24a2:	00 4f 78    	mov.b     w0, [w14]
    24a4:	03 ff 07    	rcall     0x22ac <_i2c_start> <.LFB2> <.LFE1>
    24a6:	2e 40 90    	mov.b     [w14+2], w0
    24a8:	00 00 fb    	se        w0, w0
    24aa:	80 00 78    	mov.w     w0, w1
    24ac:	e0 ff 2f    	mov.w     #0xfffe, w0
    24ae:	00 80 60    	and.w     w1, w0, w0
    24b0:	4c ff 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    24b2:	00 4f 78    	mov.b     w0, [w14]
    24b4:	2f ff 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
    24b6:	1e 40 78    	mov.b     [w14], w0
    24b8:	00 04 e0    	cp0.b     w0
    24ba:	02 00 3a    	bra       NZ, 0x24c0 <.L48>
    24bc:	10 c0 b3    	mov.b     #0x1, w0
    24be:	01 00 37    	bra       0x24c2 <.L49>

000024c0 <.L48>:
    24c0:	00 40 eb    	clr.b     w0

000024c2 <.L49>:
    24c2:	00 80 fa    	ulnk      
    24c4:	00 00 06    	return    

000024c6 <_I2Cwritearray>:
    24c6:	08 00 fa    	lnk       #0x8
    24c8:	20 47 98    	mov.b     w0, [w14+2]
    24ca:	21 07 98    	mov.w     w1, [w14+4]
    24cc:	62 47 98    	mov.b     w2, [w14+6]
    24ce:	00 40 eb    	clr.b     w0
    24d0:	00 4f 78    	mov.b     w0, [w14]
    24d2:	ec fe 07    	rcall     0x22ac <_i2c_start> <.LFB2> <.LFE1>
    24d4:	2e 40 90    	mov.b     [w14+2], w0
    24d6:	00 00 fb    	se        w0, w0
    24d8:	80 00 78    	mov.w     w0, w1
    24da:	e0 ff 2f    	mov.w     #0xfffe, w0
    24dc:	00 80 60    	and.w     w1, w0, w0
    24de:	35 ff 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    24e0:	00 4f 78    	mov.b     w0, [w14]
    24e2:	00 40 eb    	clr.b     w0
    24e4:	10 47 98    	mov.b     w0, [w14+1]
    24e6:	0d 00 37    	bra       0x2502 <.L51>

000024e8 <.L52>:
    24e8:	1e 40 90    	mov.b     [w14+1], w0
    24ea:	00 80 fb    	ze        w0, w0
    24ec:	ae 00 90    	mov.w     [w14+4], w1
    24ee:	00 80 40    	add.w     w1, w0, w0
    24f0:	10 40 78    	mov.b     [w0], w0
    24f2:	00 00 fb    	se        w0, w0
    24f4:	2a ff 07    	rcall     0x234a <_send_i2c_byte> <.LFB5> <.LFE4>
    24f6:	9e 40 78    	mov.b     [w14], w1
    24f8:	01 40 70    	ior.b     w0, w1, w0
    24fa:	00 4f 78    	mov.b     w0, [w14]
    24fc:	1e 40 90    	mov.b     [w14+1], w0
    24fe:	00 40 e8    	inc.b     w0, w0
    2500:	10 47 98    	mov.b     w0, [w14+1]

00002502 <.L51>:
    2502:	9e 40 90    	mov.b     [w14+1], w1
    2504:	6e 40 90    	mov.b     [w14+6], w0
    2506:	80 cf 50    	sub.b     w1, w0, [w15]
    2508:	ef ff 39    	bra       NC, 0x24e8 <.L52>
    250a:	04 ff 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
    250c:	1e 40 78    	mov.b     [w14], w0
    250e:	00 80 fa    	ulnk      
    2510:	00 00 06    	return    

00002512 <_i2c2_init>:
    2512:	04 00 fa    	lnk       #0x4
    2514:	10 07 98    	mov.w     w0, [w14+2]
    2516:	1e 00 90    	mov.w     [w14+2], w0
    2518:	a0 10 88    	mov.w     w0, 0x214
    251a:	17 e2 a9    	bclr.b    0x217, #0x7
    251c:	17 22 a8    	bset.b    0x217, #0x1
    251e:	8a 40 a9    	bclr.b    0x8a, #0x2
    2520:	17 e2 a8    	bset.b    0x217, #0x7
    2522:	80 10 80    	mov.w     0x210, w0
    2524:	00 0f 78    	mov.w     w0, [w14]
    2526:	f6 fe 07    	rcall     0x2314 <_reset_i2c_bus> <.LFB4> <.LFE3>
    2528:	00 80 fa    	ulnk      
    252a:	00 00 06    	return    

0000252c <_i2c2_start>:
    252c:	02 00 fa    	lnk       #0x2
    252e:	00 00 eb    	clr.w     w0
    2530:	00 0f 78    	mov.w     w0, [w14]
    2532:	16 a2 a9    	bclr.b    0x216, #0x5
    2534:	a0 00 20    	mov.w     #0xa, w0
    2536:	01 00 20    	mov.w     #0x0, w1
    2538:	99 fe 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    253a:	16 02 a8    	bset.b    0x216, #0x0
    253c:	00 00 00    	nop       
    253e:	07 00 37    	bra       0x254e <.L55>

00002540 <.L57>:
    2540:	10 00 20    	mov.w     #0x1, w0
    2542:	01 00 20    	mov.w     #0x0, w1
    2544:	93 fe 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2546:	1e 0f e8    	inc.w     [w14], [w14]
    2548:	1e 00 78    	mov.w     [w14], w0
    254a:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    254c:	05 00 3c    	bra       GT, 0x2558 <.L58>

0000254e <.L55>:
    254e:	b0 10 80    	mov.w     0x216, w0
    2550:	61 00 60    	and.w     w0, #0x1, w0
    2552:	00 00 e0    	cp0.w     w0
    2554:	f5 ff 3a    	bra       NZ, 0x2540 <.L57>
    2556:	01 00 37    	bra       0x255a <.L56>

00002558 <.L58>:
    2558:	00 00 00    	nop       

0000255a <.L56>:
    255a:	20 00 20    	mov.w     #0x2, w0
    255c:	01 00 20    	mov.w     #0x0, w1
    255e:	86 fe 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2560:	00 80 fa    	ulnk      
    2562:	00 00 06    	return    

00002564 <_i2c2_restart>:
    2564:	02 00 fa    	lnk       #0x2
    2566:	00 00 eb    	clr.w     w0
    2568:	00 0f 78    	mov.w     w0, [w14]
    256a:	16 22 a8    	bset.b    0x216, #0x1
    256c:	00 00 00    	nop       
    256e:	07 00 37    	bra       0x257e <.L60>

00002570 <.L62>:
    2570:	10 00 20    	mov.w     #0x1, w0
    2572:	01 00 20    	mov.w     #0x0, w1
    2574:	7b fe 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2576:	1e 0f e8    	inc.w     [w14], [w14]
    2578:	1e 00 78    	mov.w     [w14], w0
    257a:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    257c:	05 00 3c    	bra       GT, 0x2588 <.L63>

0000257e <.L60>:
    257e:	b0 10 80    	mov.w     0x216, w0
    2580:	62 00 60    	and.w     w0, #0x2, w0
    2582:	00 00 e0    	cp0.w     w0
    2584:	f5 ff 3a    	bra       NZ, 0x2570 <.L62>
    2586:	01 00 37    	bra       0x258a <.L61>

00002588 <.L63>:
    2588:	00 00 00    	nop       

0000258a <.L61>:
    258a:	20 00 20    	mov.w     #0x2, w0
    258c:	01 00 20    	mov.w     #0x0, w1
    258e:	6e fe 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2590:	00 80 fa    	ulnk      
    2592:	00 00 06    	return    

00002594 <_reset_i2c2_bus>:
    2594:	02 00 fa    	lnk       #0x2
    2596:	00 00 eb    	clr.w     w0
    2598:	00 0f 78    	mov.w     w0, [w14]
    259a:	16 42 a8    	bset.b    0x216, #0x2
    259c:	07 00 37    	bra       0x25ac <.L65>

0000259e <.L67>:
    259e:	10 00 20    	mov.w     #0x1, w0
    25a0:	01 00 20    	mov.w     #0x0, w1
    25a2:	64 fe 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    25a4:	1e 0f e8    	inc.w     [w14], [w14]
    25a6:	1e 00 78    	mov.w     [w14], w0
    25a8:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    25aa:	05 00 3c    	bra       GT, 0x25b6 <.L68>

000025ac <.L65>:
    25ac:	b0 10 80    	mov.w     0x216, w0
    25ae:	64 00 60    	and.w     w0, #0x4, w0
    25b0:	00 00 e0    	cp0.w     w0
    25b2:	f5 ff 3a    	bra       NZ, 0x259e <.L67>
    25b4:	01 00 37    	bra       0x25b8 <.L66>

000025b6 <.L68>:
    25b6:	00 00 00    	nop       

000025b8 <.L66>:
    25b8:	16 62 a9    	bclr.b    0x216, #0x3
    25ba:	8a 40 a9    	bclr.b    0x8a, #0x2
    25bc:	18 e2 a9    	bclr.b    0x218, #0x7
    25be:	19 42 a9    	bclr.b    0x219, #0x2
    25c0:	40 01 20    	mov.w     #0x14, w0
    25c2:	01 00 20    	mov.w     #0x0, w1
    25c4:	53 fe 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    25c6:	00 80 fa    	ulnk      
    25c8:	00 00 06    	return    

000025ca <_send_i2c2_byte>:
    25ca:	04 00 fa    	lnk       #0x4
    25cc:	10 07 98    	mov.w     w0, [w14+2]
    25ce:	00 00 00    	nop       

000025d0 <.L70>:
    25d0:	c0 10 80    	mov.w     0x218, w0
    25d2:	61 00 60    	and.w     w0, #0x1, w0
    25d4:	00 00 e0    	cp0.w     w0
    25d6:	fc ff 3a    	bra       NZ, 0x25d0 <.L70>
    25d8:	8a 40 a9    	bclr.b    0x8a, #0x2
    25da:	1e 00 90    	mov.w     [w14+2], w0
    25dc:	90 10 88    	mov.w     w0, 0x212
    25de:	00 00 eb    	clr.w     w0
    25e0:	00 0f 78    	mov.w     w0, [w14]
    25e2:	09 00 37    	bra       0x25f6 <.L71>

000025e4 <.L74>:
    25e4:	c1 10 80    	mov.w     0x218, w1
    25e6:	00 00 24    	mov.w     #0x4000, w0
    25e8:	00 80 60    	and.w     w1, w0, w0
    25ea:	00 00 e0    	cp0.w     w0
    25ec:	09 00 32    	bra       Z, 0x2600 <.L78>
    25ee:	10 00 20    	mov.w     #0x1, w0
    25f0:	01 00 20    	mov.w     #0x0, w1
    25f2:	3c fe 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    25f4:	1e 0f e8    	inc.w     [w14], [w14]

000025f6 <.L71>:
    25f6:	30 1f 20    	mov.w     #0x1f3, w0
    25f8:	9e 00 78    	mov.w     [w14], w1
    25fa:	80 8f 50    	sub.w     w1, w0, [w15]
    25fc:	f3 ff 34    	bra       LE, 0x25e4 <.L74>
    25fe:	01 00 37    	bra       0x2602 <.L73>

00002600 <.L78>:
    2600:	00 00 00    	nop       

00002602 <.L73>:
    2602:	40 1f 20    	mov.w     #0x1f4, w0
    2604:	9e 00 78    	mov.w     [w14], w1
    2606:	80 8f 50    	sub.w     w1, w0, [w15]
    2608:	02 00 3a    	bra       NZ, 0x260e <.L75>
    260a:	10 c0 b3    	mov.b     #0x1, w0
    260c:	0c 00 37    	bra       0x2626 <.L76>

0000260e <.L75>:
    260e:	c1 10 80    	mov.w     0x218, w1
    2610:	00 00 28    	mov.w     #0x8000, w0
    2612:	00 80 60    	and.w     w1, w0, w0
    2614:	00 00 e0    	cp0.w     w0
    2616:	03 00 32    	bra       Z, 0x261e <.L77>
    2618:	bd ff 07    	rcall     0x2594 <_reset_i2c2_bus> <.LFB16> <.LFE15>
    261a:	10 c0 b3    	mov.b     #0x1, w0
    261c:	04 00 37    	bra       0x2626 <.L76>

0000261e <.L77>:
    261e:	20 00 20    	mov.w     #0x2, w0
    2620:	01 00 20    	mov.w     #0x0, w1
    2622:	24 fe 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2624:	00 40 eb    	clr.b     w0

00002626 <.L76>:
    2626:	00 80 fa    	ulnk      
    2628:	00 00 06    	return    

0000262a <_i2c2_read>:
    262a:	04 00 fa    	lnk       #0x4
    262c:	00 00 eb    	clr.w     w0
    262e:	00 0f 78    	mov.w     w0, [w14]
    2630:	00 40 eb    	clr.b     w0
    2632:	20 47 98    	mov.b     w0, [w14+2]
    2634:	16 62 a8    	bset.b    0x216, #0x3
    2636:	05 00 37    	bra       0x2642 <.L80>

00002638 <.L82>:
    2638:	1e 0f e8    	inc.w     [w14], [w14]
    263a:	00 7d 20    	mov.w     #0x7d0, w0
    263c:	9e 00 78    	mov.w     [w14], w1
    263e:	80 8f 50    	sub.w     w1, w0, [w15]
    2640:	05 00 3c    	bra       GT, 0x264c <.L83>

00002642 <.L80>:
    2642:	c0 10 80    	mov.w     0x218, w0
    2644:	62 00 60    	and.w     w0, #0x2, w0
    2646:	00 00 e0    	cp0.w     w0
    2648:	f7 ff 32    	bra       Z, 0x2638 <.L82>
    264a:	01 00 37    	bra       0x264e <.L81>

0000264c <.L83>:
    264c:	00 00 00    	nop       

0000264e <.L81>:
    264e:	80 10 80    	mov.w     0x210, w0
    2650:	20 47 98    	mov.b     w0, [w14+2]
    2652:	2e 40 90    	mov.b     [w14+2], w0
    2654:	00 80 fa    	ulnk      
    2656:	00 00 06    	return    

00002658 <_i2c2_read_ack>:
    2658:	04 00 fa    	lnk       #0x4
    265a:	00 00 eb    	clr.w     w0
    265c:	00 0f 78    	mov.w     w0, [w14]
    265e:	00 40 eb    	clr.b     w0
    2660:	20 47 98    	mov.b     w0, [w14+2]
    2662:	16 62 a8    	bset.b    0x216, #0x3
    2664:	05 00 37    	bra       0x2670 <.L85>

00002666 <.L87>:
    2666:	1e 0f e8    	inc.w     [w14], [w14]
    2668:	00 7d 20    	mov.w     #0x7d0, w0
    266a:	9e 00 78    	mov.w     [w14], w1
    266c:	80 8f 50    	sub.w     w1, w0, [w15]
    266e:	05 00 3c    	bra       GT, 0x267a <.L88>

00002670 <.L85>:
    2670:	c0 10 80    	mov.w     0x218, w0
    2672:	62 00 60    	and.w     w0, #0x2, w0
    2674:	00 00 e0    	cp0.w     w0
    2676:	f7 ff 32    	bra       Z, 0x2666 <.L87>
    2678:	01 00 37    	bra       0x267c <.L86>

0000267a <.L88>:
    267a:	00 00 00    	nop       

0000267c <.L86>:
    267c:	80 10 80    	mov.w     0x210, w0
    267e:	20 47 98    	mov.b     w0, [w14+2]
    2680:	16 82 a8    	bset.b    0x216, #0x4
    2682:	a0 00 20    	mov.w     #0xa, w0
    2684:	01 00 20    	mov.w     #0x0, w1
    2686:	f2 fd 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2688:	2e 40 90    	mov.b     [w14+2], w0
    268a:	00 80 fa    	ulnk      
    268c:	00 00 06    	return    

0000268e <_i2c2_read_nack>:
    268e:	04 00 fa    	lnk       #0x4
    2690:	00 00 eb    	clr.w     w0
    2692:	00 0f 78    	mov.w     w0, [w14]
    2694:	00 40 eb    	clr.b     w0
    2696:	20 47 98    	mov.b     w0, [w14+2]
    2698:	16 62 a8    	bset.b    0x216, #0x3
    269a:	05 00 37    	bra       0x26a6 <.L90>

0000269c <.L92>:
    269c:	1e 0f e8    	inc.w     [w14], [w14]
    269e:	00 7d 20    	mov.w     #0x7d0, w0
    26a0:	9e 00 78    	mov.w     [w14], w1
    26a2:	80 8f 50    	sub.w     w1, w0, [w15]
    26a4:	05 00 3c    	bra       GT, 0x26b0 <.L93>

000026a6 <.L90>:
    26a6:	c0 10 80    	mov.w     0x218, w0
    26a8:	62 00 60    	and.w     w0, #0x2, w0
    26aa:	00 00 e0    	cp0.w     w0
    26ac:	f7 ff 32    	bra       Z, 0x269c <.L92>
    26ae:	01 00 37    	bra       0x26b2 <.L91>

000026b0 <.L93>:
    26b0:	00 00 00    	nop       

000026b2 <.L91>:
    26b2:	80 10 80    	mov.w     0x210, w0
    26b4:	20 47 98    	mov.b     w0, [w14+2]
    26b6:	16 a2 a8    	bset.b    0x216, #0x5
    26b8:	16 82 a8    	bset.b    0x216, #0x4
    26ba:	a0 00 20    	mov.w     #0xa, w0
    26bc:	01 00 20    	mov.w     #0x0, w1
    26be:	d6 fd 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    26c0:	2e 40 90    	mov.b     [w14+2], w0
    26c2:	00 80 fa    	ulnk      
    26c4:	00 00 06    	return    

000026c6 <_I2C2poll>:
    26c6:	04 00 fa    	lnk       #0x4
    26c8:	20 47 98    	mov.b     w0, [w14+2]
    26ca:	00 40 eb    	clr.b     w0
    26cc:	00 4f 78    	mov.b     w0, [w14]
    26ce:	2e ff 07    	rcall     0x252c <_i2c2_start> <.LFB14> <.LFE13>
    26d0:	2e 40 90    	mov.b     [w14+2], w0
    26d2:	00 00 fb    	se        w0, w0
    26d4:	80 00 78    	mov.w     w0, w1
    26d6:	e0 ff 2f    	mov.w     #0xfffe, w0
    26d8:	00 80 60    	and.w     w1, w0, w0
    26da:	77 ff 07    	rcall     0x25ca <_send_i2c2_byte> <.LFB17> <.LFE16>
    26dc:	00 4f 78    	mov.b     w0, [w14]
    26de:	5a ff 07    	rcall     0x2594 <_reset_i2c2_bus> <.LFB16> <.LFE15>
    26e0:	1e 40 78    	mov.b     [w14], w0
    26e2:	00 04 e0    	cp0.b     w0
    26e4:	02 00 3a    	bra       NZ, 0x26ea <.L95>
    26e6:	10 c0 b3    	mov.b     #0x1, w0
    26e8:	01 00 37    	bra       0x26ec <.L96>

000026ea <.L95>:
    26ea:	00 40 eb    	clr.b     w0

000026ec <.L96>:
    26ec:	00 80 fa    	ulnk      
    26ee:	00 00 06    	return    
Disassembly of section .isr.text:

000026f0 <__T1Interrupt>:
    26f0:	80 9f be    	mov.d     w0, [w15++]
    26f2:	32 00 f8    	push      0x32
    26f4:	34 00 f8    	push      0x34
    26f6:	10 00 20    	mov.w     #0x1, w0
    26f8:	a0 01 88    	mov.w     w0, 0x34
    26fa:	00 20 20    	mov.w     #0x200, w0
    26fc:	90 01 88    	mov.w     w0, 0x32
    26fe:	00 00 fa    	lnk       #0x0
    2700:	84 60 a9    	bclr.b    0x84, #0x3
    2702:	00 40 80    	mov.w     0x800, w0
    2704:	00 00 e9    	dec.w     w0, w0
    2706:	00 40 88    	mov.w     w0, 0x800
    2708:	31 40 80    	mov.w     0x806, w1
    270a:	a0 85 21    	mov.w     #0x185a, w0
    270c:	80 8f 50    	sub.w     w1, w0, [w15]
    270e:	09 00 3a    	bra       NZ, 0x2722 <.L10>
    2710:	06 21 ef    	clr.w     0x106
    2712:	0a 68 ef    	clr.b     0x80a
    2714:	94 e0 a8    	bset.b    0x94, #0x7
    2716:	11 e1 a8    	bset.b    0x111, #0x7
    2718:	00 b6 84    	mov.w     0x96c0, w0
    271a:	a0 0c 88    	mov.w     w0, 0x194
    271c:	a0 0c 80    	mov.w     0x194, w0
    271e:	00 00 d1    	lsr.w     w0, w0
    2720:	b0 0c 88    	mov.w     w0, 0x196

00002722 <.L10>:
    2722:	00 80 fa    	ulnk      
    2724:	34 00 f9    	pop       0x34
    2726:	32 00 f9    	pop       0x32
    2728:	4f 00 be    	mov.d     [--w15], w0
    272a:	00 40 06    	retfie    

0000272c <__T2Interrupt>:
    272c:	36 00 f8    	push      0x36
    272e:	80 9f be    	mov.d     w0, [w15++]
    2730:	82 9f be    	mov.d     w2, [w15++]
    2732:	84 9f be    	mov.d     w4, [w15++]
    2734:	86 9f be    	mov.d     w6, [w15++]
    2736:	32 00 f8    	push      0x32
    2738:	34 00 f8    	push      0x34
    273a:	10 00 20    	mov.w     #0x1, w0
    273c:	a0 01 88    	mov.w     w0, 0x34
    273e:	00 20 20    	mov.w     #0x200, w0
    2740:	90 01 88    	mov.w     w0, 0x32
    2742:	00 00 fa    	lnk       #0x0
    2744:	84 e0 a9    	bclr.b    0x84, #0x7
    2746:	0a c8 bf    	mov.b     0x80a, WREG
    2748:	00 80 fb    	ze        w0, w0
    274a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    274c:	11 00 32    	bra       Z, 0x2770 <.L15>
    274e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2750:	20 00 32    	bra       Z, 0x2792 <.L16>
    2752:	00 00 e0    	cp0.w     w0
    2754:	2e 00 3a    	bra       NZ, 0x27b2 <.L18>
    2756:	96 21 ef    	clr.w     0x196
    2758:	0a c8 bf    	mov.b     0x80a, WREG
    275a:	00 40 e8    	inc.b     w0, w0
    275c:	0a e8 b7    	mov.b     WREG, 0x80a
    275e:	ec 22 a9    	bclr.b    0x2ec, #0x1
    2760:	10 00 20    	mov.w     #0x1, w0
    2762:	01 00 20    	mov.w     #0x0, w1
    2764:	83 fd 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2766:	dc e2 a8    	bset.b    0x2dc, #0x7
    2768:	10 00 20    	mov.w     #0x1, w0
    276a:	01 00 20    	mov.w     #0x0, w1
    276c:	7f fd 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    276e:	22 00 37    	bra       0x27b4 <.L12>

00002770 <.L15>:
    2770:	10 b6 84    	mov.w     0x96c2, w0
    2772:	a0 0c 88    	mov.w     w0, 0x194
    2774:	a0 0c 80    	mov.w     0x194, w0
    2776:	00 00 d1    	lsr.w     w0, w0
    2778:	b0 0c 88    	mov.w     w0, 0x196
    277a:	dc e2 a9    	bclr.b    0x2dc, #0x7
    277c:	10 00 20    	mov.w     #0x1, w0
    277e:	01 00 20    	mov.w     #0x0, w1
    2780:	75 fd 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2782:	ec 02 a8    	bset.b    0x2ec, #0x0
    2784:	10 00 20    	mov.w     #0x1, w0
    2786:	01 00 20    	mov.w     #0x0, w1
    2788:	71 fd 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    278a:	0a c8 bf    	mov.b     0x80a, WREG
    278c:	00 40 e8    	inc.b     w0, w0
    278e:	0a e8 b7    	mov.b     WREG, 0x80a
    2790:	11 00 37    	bra       0x27b4 <.L12>

00002792 <.L16>:
    2792:	00 b6 84    	mov.w     0x96c0, w0
    2794:	a0 0c 88    	mov.w     w0, 0x194
    2796:	96 21 ef    	clr.w     0x196
    2798:	dc e2 a9    	bclr.b    0x2dc, #0x7
    279a:	10 00 20    	mov.w     #0x1, w0
    279c:	01 00 20    	mov.w     #0x0, w1
    279e:	66 fd 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    27a0:	ec 02 a8    	bset.b    0x2ec, #0x0
    27a2:	10 00 20    	mov.w     #0x1, w0
    27a4:	01 00 20    	mov.w     #0x0, w1
    27a6:	62 fd 07    	rcall     0x226c <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    27a8:	0a c8 bf    	mov.b     0x80a, WREG
    27aa:	00 40 e8    	inc.b     w0, w0
    27ac:	0a e8 b7    	mov.b     WREG, 0x80a
    27ae:	00 00 00    	nop       
    27b0:	01 00 37    	bra       0x27b4 <.L12>

000027b2 <.L18>:
    27b2:	00 00 00    	nop       

000027b4 <.L12>:
    27b4:	00 80 fa    	ulnk      
    27b6:	34 00 f9    	pop       0x34
    27b8:	32 00 f9    	pop       0x32
    27ba:	4f 03 be    	mov.d     [--w15], w6
    27bc:	4f 02 be    	mov.d     [--w15], w4
    27be:	4f 01 be    	mov.d     [--w15], w2
    27c0:	4f 00 be    	mov.d     [--w15], w0
    27c2:	36 00 f9    	pop       0x36
    27c4:	00 40 06    	retfie    
Disassembly of section .text:

000027c6 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    27c6:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    27c8:	00 10 20    	mov.w     #0x100, w0
    27ca:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    27cc:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    27ce:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    27d0:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    27d2:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    27d4:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    27d6:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    27d8:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    27da:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    27dc:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    27de:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    27e0:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    27e2:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    27e4:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    27e6:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    27e8:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    27ea:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    27ec:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    27ee:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    27f0:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    27f2:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    27f4:	f0 03 20    	mov.w     #0x3f, w0
    27f6:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    27f8:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    27fa:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    27fc:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    27fe:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    2800:	00 0e 20    	mov.w     #0xe0, w0
    2802:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    2804:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    2806:	00 c4 20    	mov.w     #0xc40, w0
    2808:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    280a:	50 00 20    	mov.w     #0x5, w0
    280c:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    280e:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    2810:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    2812:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    2814:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2816:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    2818:	e8 22 a9    	bclr.b    0x2e8, #0x1
    281a:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    281c:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    281e:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    2820:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    2822:	00 80 fa    	ulnk      
    2824:	00 00 06    	return    

00002826 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    2826:	02 00 fa    	lnk       #0x2
    2828:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    282a:	9e 00 78    	mov.w     [w14], w1
    282c:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    282e:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    2830:	00 00 00    	nop       

00002832 <.L3>:
    2832:	00 19 80    	mov.w     0x320, w0
    2834:	61 00 60    	and.w     w0, #0x1, w0
    2836:	00 00 e0    	cp0.w     w0
    2838:	fc ff 32    	bra       Z, 0x2832 <.L3>
    return ADC1BUF0;
    283a:	00 18 80    	mov.w     0x300, w0
}
    283c:	00 80 fa    	ulnk      
    283e:	00 00 06    	return    

00002840 <_parity>:
    2840:	02 00 fa    	lnk       #0x2
    2842:	00 0f 78    	mov.w     w0, [w14]
    2844:	1e 00 78    	mov.w     [w14], w0
    2846:	48 00 de    	lsr.w     w0, #0x8, w0
    2848:	1e 0f 68    	xor.w     w0, [w14], [w14]
    284a:	1e 00 78    	mov.w     [w14], w0
    284c:	44 00 de    	lsr.w     w0, #0x4, w0
    284e:	1e 0f 68    	xor.w     w0, [w14], [w14]
    2850:	1e 00 78    	mov.w     [w14], w0
    2852:	42 00 de    	lsr.w     w0, #0x2, w0
    2854:	1e 0f 68    	xor.w     w0, [w14], [w14]
    2856:	1e 00 78    	mov.w     [w14], w0
    2858:	00 00 d1    	lsr.w     w0, w0
    285a:	1e 0f 68    	xor.w     w0, [w14], [w14]
    285c:	1e 00 78    	mov.w     [w14], w0
    285e:	00 40 78    	mov.b     w0, w0
    2860:	61 40 60    	and.b     w0, #0x1, w0
    2862:	00 80 fa    	ulnk      
    2864:	00 00 06    	return    
Disassembly of section .dinit:

00002866 <.dinit>:
    2866:	2e 0c 00    	nop       
    2868:	06 00 00    	nop       
    286a:	82 00 00    	nop       
    286c:	10 20 30    	bra       OV, 0x688e
    286e:	40 50 60    	and.b     w0, [--w0], [w0--]
    2870:	0e 08 00    	nop       
    2872:	20 04 00    	nop       
    2874:	80 00 00    	nop       
    2876:	00 08 00    	nop       
    2878:	0c 00 00    	nop       
    287a:	80 00 00    	nop       
    287c:	0c 08 00    	nop       
    287e:	02 00 00    	nop       
    2880:	82 00 00    	nop       
    2882:	e0 00 00    	nop       
    2884:	00 00 00    	nop       
Disassembly of section .isr:

00002886 <__DefaultInterrupt>:
    2886:	00 40 da    	break     
    2888:	00 00 fe    	reset     
