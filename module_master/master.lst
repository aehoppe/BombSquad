
master.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	e6 28 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	e6 28 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	e6 28 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	e6 28 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	e6 28 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	e6 28 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	e6 28 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	e6 28 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	e6 28 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	e6 28 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	e6 28 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	e6 28 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	e6 28 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	e6 28 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	e6 28 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	e6 28 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	e6 28 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	e6 28 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	e6 28 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	e6 28 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	e6 28 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	e6 28 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	e6 28 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	e6 28 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	e6 28 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	e6 28 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	e6 28 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	e6 28 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	e6 28 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	e6 28 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	e6 28 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	e6 28 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	e6 28 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	e6 28 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	e6 28 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	e6 28 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	e6 28 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	e6 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	e6 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	e6 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	e6 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	e6 28 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	e6 28 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	e6 28 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	e6 28 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	e6 28 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	e6 28 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	e6 28 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	e6 28 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	e6 28 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	e6 28 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	e6 28 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	e6 28 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	e6 28 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	e6 28 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	e6 28 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	e6 28 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	e6 28 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	e6 28 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	e6 28 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	e6 28 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	e6 28 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	e6 28 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	e6 28 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	e6 28 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	e6 28 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	e6 28 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	e6 28 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	e6 28 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	e6 28 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	4f c3 20    	mov.w     #0xc34, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	7f 00 07    	rcall     0x1224 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	60 8c 22    	mov.w     #0x28c6, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	00 17 02    	call      0x1700 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	e0 12 20    	mov.w     #0x12e, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	34 18 04    	goto      0x1834 <_idle>
    1216:	00 00 00 
    1218:	60 18 04    	goto      0x1860 <_run>
    121a:	00 00 00 
    121c:	02 1b 04    	goto      0x1b02 <_end_fail>
    121e:	00 00 00 
    1220:	ce 1b 04    	goto      0x1bce <_end_win>
    1222:	00 00 00 

00001224 <__crt_start_mode>:
    1224:	00 00 05    	retlw.w   #0x0, w0

00001226 <___subsf3>:
    1226:	03 f0 a2    	btg.w     w3, #0xf

00001228 <___addsf3>:
    1228:	88 9f be    	mov.d     w8, [w15++]
    122a:	8a 9f be    	mov.d     w10, [w15++]
    122c:	8c 1f 78    	mov.w     w12, [w15++]
    122e:	f6 00 07    	rcall     0x141c <__funpack2>
    1230:	fd 00 33    	bra       N, 0x142c <__fPropagateNaN>
    1232:	64 50 e1    	cp.w      w10, #0x4
    1234:	4f 00 32    	bra       Z, 0x12d4 <aisinfinite>

00001236 <checkspecialb>:
    1236:	64 20 e1    	cp.w      w4, #0x4
    1238:	52 00 32    	bra       Z, 0x12de <return2>
    123a:	03 82 6c    	xor.w     w9, w3, w4
    123c:	07 00 3b    	bra       NN, 0x124c <getsign>
    123e:	09 05 d0    	sl.w      w9, w10
    1240:	03 06 d0    	sl.w      w3, w12
    1242:	82 0f 54    	sub.w     w8, w2, [w15]
    1244:	0c 06 5d    	subb.w    w10, w12, w12
    1246:	02 00 39    	bra       NC, 0x124c <getsign>
    1248:	02 00 32    	bra       Z, 0x124e <gotsign>
    124a:	89 01 78    	mov.w     w9, w3

0000124c <getsign>:
    124c:	03 06 78    	mov.w     w3, w12

0000124e <gotsign>:
    124e:	85 82 55    	sub.w     w11, w5, w5
    1250:	04 00 3d    	bra       GE, 0x125a <expcanonical>
    1252:	00 03 fd    	exch      w0, w6
    1254:	81 03 fd    	exch      w1, w7
    1256:	85 02 ea    	neg.w     w5, w5
    1258:	8b 85 42    	add.w     w5, w11, w11

0000125a <expcanonical>:
    125a:	84 0f 72    	ior.w     w4, w4, [w15]
    125c:	02 00 3b    	bra       NN, 0x1262 <nonegate>
    125e:	60 00 10    	subr.w    w0, #0x0, w0
    1260:	e0 80 18    	subbr.w   w1, #0x0, w1

00001262 <nonegate>:
    1262:	60 11 b8    	mul.uu    w2, #0x0, w2
    1264:	00 05 eb    	clr.w     w10
    1266:	7a 28 e1    	cp.w      w5, #0x1a
    1268:	0a 00 39    	bra       NC, 0x127e <aligniter>
    126a:	06 00 78    	mov.w     w6, w0
    126c:	c7 5d dd    	sl.w      w11, #0x7, w11
    126e:	f7 07 b2    	and.w     #0x7f, w7
    1270:	87 80 75    	ior.w     w11, w7, w1
    1272:	2d 00 37    	bra       0x12ce <signoff>

00001274 <align>:
    1274:	82 81 71    	ior.w     w3, w2, w3
    1276:	0a 01 78    	mov.w     w10, w2
    1278:	61 05 60    	and.w     w0, #0x1, w10
    127a:	81 80 d1    	asr.w     w1, w1
    127c:	00 80 d3    	rrc.w     w0, w0

0000127e <aligniter>:
    127e:	85 02 e9    	dec.w     w5, w5
    1280:	f9 ff 3b    	bra       NN, 0x1274 <align>

00001282 <aligned>:
    1282:	06 04 40    	add.w     w0, w6, w8
    1284:	87 84 48    	addc.w    w1, w7, w9
    1286:	02 00 3b    	bra       NN, 0x128c <normalizesum>
    1288:	60 04 14    	subr.w    w8, #0x0, w8
    128a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000128c <normalizesum>:
    128c:	09 88 a3    	btst.z    w9, #0x8
    128e:	07 00 32    	bra       Z, 0x129e <checknormal>
    1290:	8a 81 71    	ior.w     w3, w10, w3
    1292:	82 81 71    	ior.w     w3, w2, w3
    1294:	61 01 64    	and.w     w8, #0x1, w2
    1296:	89 04 d1    	lsr.w     w9, w9
    1298:	08 84 d3    	rrc.w     w8, w8
    129a:	8b 05 e8    	inc.w     w11, w11
    129c:	17 00 37    	bra       0x12cc <round>

0000129e <checknormal>:
    129e:	09 78 a3    	btst.z    w9, #0x7
    12a0:	13 00 3a    	bra       NZ, 0x12c8 <discardguard>

000012a2 <underflow>:
    12a2:	0b 00 e0    	cp0.w     w11
    12a4:	13 00 34    	bra       LE, 0x12cc <round>
    12a6:	8b 05 e9    	dec.w     w11, w11
    12a8:	08 04 44    	add.w     w8, w8, w8
    12aa:	89 84 4c    	addc.w    w9, w9, w9
    12ac:	0a 44 74    	ior.b     w8, w10, w8
    12ae:	09 78 a3    	btst.z    w9, #0x7
    12b0:	0d 00 3a    	bra       NZ, 0x12cc <round>

000012b2 <normalizeloop>:
    12b2:	0b 00 e0    	cp0.w     w11
    12b4:	07 00 34    	bra       LE, 0x12c4 <normalizeexit>
    12b6:	8b 05 e9    	dec.w     w11, w11
    12b8:	08 04 44    	add.w     w8, w8, w8
    12ba:	89 84 4c    	addc.w    w9, w9, w9
    12bc:	01 00 3a    	bra       NZ, 0x12c0 <normalizetest>
    12be:	0b 00 20    	mov.w     #0x0, w11

000012c0 <normalizetest>:
    12c0:	09 78 a3    	btst.z    w9, #0x7
    12c2:	f7 ff 32    	bra       Z, 0x12b2 <normalizeloop>

000012c4 <normalizeexit>:
    12c4:	00 01 eb    	clr.w     w2
    12c6:	02 00 37    	bra       0x12cc <round>

000012c8 <discardguard>:
    12c8:	82 81 71    	ior.w     w3, w2, w3
    12ca:	0a 01 78    	mov.w     w10, w2

000012cc <round>:
    12cc:	6c 00 07    	rcall     0x13a6 <__fpack>

000012ce <signoff>:
    12ce:	0c f0 a7    	btsc.w    w12, #0xf
    12d0:	01 f0 a0    	bset.w    w1, #0xf
    12d2:	b5 00 37    	bra       0x143e <__fbopExit>

000012d4 <aisinfinite>:
    12d4:	64 20 e1    	cp.w      w4, #0x4
    12d6:	02 00 3a    	bra       NZ, 0x12dc <return8>
    12d8:	83 8f 6c    	xor.w     w9, w3, [w15]
    12da:	b5 00 33    	bra       N, 0x1446 <__fbopReturnNaN>

000012dc <return8>:
    12dc:	08 01 be    	mov.d     w8, w2

000012de <return2>:
    12de:	02 00 be    	mov.d     w2, w0
    12e0:	ae 00 37    	bra       0x143e <__fbopExit>

000012e2 <___divsf3>:
    12e2:	88 9f be    	mov.d     w8, [w15++]
    12e4:	8a 9f be    	mov.d     w10, [w15++]
    12e6:	8c 1f 78    	mov.w     w12, [w15++]
    12e8:	99 00 07    	rcall     0x141c <__funpack2>
    12ea:	a0 00 33    	bra       N, 0x142c <__fPropagateNaN>
    12ec:	03 86 6c    	xor.w     w9, w3, w12
    12ee:	64 50 e1    	cp.w      w10, #0x4
    12f0:	2e 00 32    	bra       Z, 0x134e <aisinfinite>
    12f2:	64 20 e1    	cp.w      w4, #0x4
    12f4:	33 00 32    	bra       Z, 0x135c <returnZero>
    12f6:	61 50 e1    	cp.w      w10, #0x1
    12f8:	2f 00 32    	bra       Z, 0x1358 <aiszero>
    12fa:	61 20 e1    	cp.w      w4, #0x1
    12fc:	31 00 32    	bra       Z, 0x1360 <returnInf>

000012fe <finitenonzero>:
    12fe:	85 85 55    	sub.w     w11, w5, w11
    1300:	eb 07 b0    	add.w     #0x7e, w11
    1302:	09 00 20    	mov.w     #0x0, w9
    1304:	08 04 20    	mov.w     #0x40, w8
    1306:	05 00 37    	bra       0x1312 <diventry>

00001308 <divnext>:
    1308:	08 04 44    	add.w     w8, w8, w8
    130a:	89 84 4c    	addc.w    w9, w9, w9
    130c:	0a 00 31    	bra       C, 0x1322 <divdone> <formsticky>

0000130e <divloop>:
    130e:	06 03 43    	add.w     w6, w6, w6
    1310:	87 83 4b    	addc.w    w7, w7, w7

00001312 <diventry>:
    1312:	00 01 53    	sub.w     w6, w0, w2
    1314:	81 81 5b    	subb.w    w7, w1, w3
    1316:	f8 ff 33    	bra       N, 0x1308 <divnext>
    1318:	02 03 be    	mov.d     w2, w6
    131a:	08 00 a0    	bset.w    w8, #0x0
    131c:	08 04 44    	add.w     w8, w8, w8
    131e:	89 84 4c    	addc.w    w9, w9, w9
    1320:	f6 ff 39    	bra       NC, 0x130e <divloop>

00001322 <divdone>:
    1322:	c6 39 dd    	sl.w      w7, #0x6, w3
    1324:	83 01 73    	ior.w     w6, w3, w3
    1326:	01 00 32    	bra       Z, 0x132a <stickyok>
    1328:	13 00 20    	mov.w     #0x1, w3

0000132a <stickyok>:
    132a:	89 04 d1    	lsr.w     w9, w9
    132c:	08 84 d3    	rrc.w     w8, w8
    132e:	09 98 a3    	btst.z    w9, #0x9
    1330:	05 00 32    	bra       Z, 0x133c <guardused>
    1332:	08 00 a7    	btsc.w    w8, #0x0
    1334:	03 00 a0    	bset.w    w3, #0x0
    1336:	89 04 d1    	lsr.w     w9, w9
    1338:	08 84 d3    	rrc.w     w8, w8
    133a:	8b 05 e8    	inc.w     w11, w11

0000133c <guardused>:
    133c:	89 04 d1    	lsr.w     w9, w9
    133e:	08 84 d3    	rrc.w     w8, w8
    1340:	00 01 eb    	clr.w     w2
    1342:	02 81 d2    	rlc.w     w2, w2
    1344:	30 00 07    	rcall     0x13a6 <__fpack>

00001346 <return0>:
    1346:	01 f0 a1    	bclr.w    w1, #0xf
    1348:	0c f0 a7    	btsc.w    w12, #0xf
    134a:	01 f0 a0    	bset.w    w1, #0xf
    134c:	78 00 37    	bra       0x143e <__fbopExit>

0000134e <aisinfinite>:
    134e:	64 20 e1    	cp.w      w4, #0x4
    1350:	7a 00 32    	bra       Z, 0x1446 <__fbopReturnNaN>

00001352 <return8>:
    1352:	08 01 be    	mov.d     w8, w2

00001354 <return2>:
    1354:	02 00 be    	mov.d     w2, w0
    1356:	f7 ff 37    	bra       0x1346 <return0>

00001358 <aiszero>:
    1358:	61 20 e1    	cp.w      w4, #0x1
    135a:	75 00 32    	bra       Z, 0x1446 <__fbopReturnNaN>

0000135c <returnZero>:
    135c:	60 00 b8    	mul.uu    w0, #0x0, w0
    135e:	f3 ff 37    	bra       0x1346 <return0>

00001360 <returnInf>:
    1360:	00 00 20    	mov.w     #0x0, w0
    1362:	01 f8 27    	mov.w     #0x7f80, w1
    1364:	f0 ff 37    	bra       0x1346 <return0>

00001366 <___eqsf2>:
    1366:	14 00 20    	mov.w     #0x1, w4
    1368:	b8 00 37    	bra       0x14da <__fcompare>

0000136a <___fixunssfsi>:
    136a:	00 01 be    	mov.d     w0, w2
    136c:	42 00 07    	rcall     0x13f2 <__funpack>
    136e:	04 70 a7    	btsc.w    w4, #0x7
    1370:	03 f0 a1    	bclr.w    w3, #0xf
    1372:	03 f8 a3    	btst.z    w3, #0xf
    1374:	13 00 3a    	bra       NZ, 0x139c <returnzero>
    1376:	65 09 b1    	sub.w     #0x96, w5
    1378:	10 00 32    	bra       Z, 0x139a <exit>
    137a:	09 00 35    	bra       LT, 0x138e <shiftright>
    137c:	69 28 e1    	cp.w      w5, #0x9
    137e:	02 00 35    	bra       LT, 0x1384 <shiftleft>
    1380:	01 00 28    	mov.w     #0x8000, w1
    1382:	00 00 05    	retlw.w   #0x0, w0

00001384 <shiftleft>:
    1384:	00 00 40    	add.w     w0, w0, w0
    1386:	81 80 48    	addc.w    w1, w1, w1
    1388:	85 02 e9    	dec.w     w5, w5
    138a:	fc ff 3a    	bra       NZ, 0x1384 <shiftleft>
    138c:	00 00 06    	return    

0000138e <shiftright>:
    138e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1390:	05 00 35    	bra       LT, 0x139c <returnzero>

00001392 <shiftrightloop>:
    1392:	81 00 d1    	lsr.w     w1, w1
    1394:	00 80 d3    	rrc.w     w0, w0
    1396:	85 02 e8    	inc.w     w5, w5
    1398:	fc ff 3a    	bra       NZ, 0x1392 <shiftrightloop>

0000139a <exit>:
    139a:	00 00 06    	return    

0000139c <returnzero>:
    139c:	80 00 eb    	clr.w     w1
    139e:	00 00 05    	retlw.w   #0x0, w0

000013a0 <___floatsisf>:
    13a0:	4f 89 de    	asr.w     w1, #0xf, w2
    13a2:	82 01 78    	mov.w     w2, w3
    13a4:	b5 00 37    	bra       0x1510 <___floatdisf>

000013a6 <__fpack>:
    13a6:	81 00 20    	mov.w     #0x8, w1
    13a8:	61 80 55    	sub.w     w11, #0x1, w0
    13aa:	0b 00 3d    	bra       GE, 0x13c2 <notsubnormal>
    13ac:	0b 00 20    	mov.w     #0x0, w11
    13ae:	61 fe 2f    	mov.w     #0xffe6, w1
    13b0:	01 00 e1    	cp.w      w0, w1
    13b2:	1d 00 34    	bra       LE, 0x13ee <zerosig>

000013b4 <subnormal>:
    13b4:	82 81 71    	ior.w     w3, w2, w3
    13b6:	61 01 64    	and.w     w8, #0x1, w2
    13b8:	89 04 d1    	lsr.w     w9, w9
    13ba:	08 84 d3    	rrc.w     w8, w8
    13bc:	00 00 e8    	inc.w     w0, w0
    13be:	fa ff 3a    	bra       NZ, 0x13b4 <subnormal>
    13c0:	71 00 20    	mov.w     #0x7, w1

000013c2 <notsubnormal>:
    13c2:	61 00 64    	and.w     w8, #0x1, w0
    13c4:	03 00 70    	ior.w     w0, w3, w0
    13c6:	02 00 60    	and.w     w0, w2, w0
    13c8:	09 00 32    	bra       Z, 0x13dc <packupandgo>
    13ca:	61 04 44    	add.w     w8, #0x1, w8
    13cc:	e0 84 4c    	addc.w    w9, #0x0, w9
    13ce:	09 88 a5    	btst.z    w9, w1
    13d0:	05 00 32    	bra       Z, 0x13dc <packupandgo>
    13d2:	8b 05 e8    	inc.w     w11, w11
    13d4:	68 08 e1    	cp.w      w1, #0x8
    13d6:	02 00 3a    	bra       NZ, 0x13dc <packupandgo>
    13d8:	89 04 d1    	lsr.w     w9, w9
    13da:	08 84 d3    	rrc.w     w8, w8

000013dc <packupandgo>:
    13dc:	f2 0f 20    	mov.w     #0xff, w2
    13de:	02 58 e1    	cp.w      w11, w2
    13e0:	05 00 3d    	bra       GE, 0x13ec <overflow>
    13e2:	c7 5d dd    	sl.w      w11, #0x7, w11
    13e4:	f9 07 b2    	and.w     #0x7f, w9
    13e6:	89 80 75    	ior.w     w11, w9, w1
    13e8:	08 00 78    	mov.w     w8, w0
    13ea:	00 00 06    	return    

000013ec <overflow>:
    13ec:	0b f8 27    	mov.w     #0x7f80, w11

000013ee <zerosig>:
    13ee:	8b 00 78    	mov.w     w11, w1
    13f0:	00 00 05    	retlw.w   #0x0, w0

000013f2 <__funpack>:
    13f2:	c7 0a de    	lsr.w     w1, #0x7, w5
    13f4:	f1 07 b2    	and.w     #0x7f, w1
    13f6:	f5 0f b2    	and.w     #0xff, w5
    13f8:	08 00 32    	bra       Z, 0x140a <zeroorsub>
    13fa:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13fc:	02 00 32    	bra       Z, 0x1402 <nanorinf>

000013fe <finitereturn>:
    13fe:	01 70 a0    	bset.w    w1, #0x7
    1400:	24 00 05    	retlw.w   #0x2, w4

00001402 <nanorinf>:
    1402:	81 0f 70    	ior.w     w0, w1, [w15]
    1404:	01 00 32    	bra       Z, 0x1408 <infinite>
    1406:	04 08 05    	retlw.w   #0x80, w4

00001408 <infinite>:
    1408:	44 00 05    	retlw.w   #0x4, w4

0000140a <zeroorsub>:
    140a:	81 0f 70    	ior.w     w0, w1, [w15]
    140c:	02 00 3a    	bra       NZ, 0x1412 <subnormal>
    140e:	14 00 05    	retlw.w   #0x1, w4

00001410 <normalize>:
    1410:	85 02 e9    	dec.w     w5, w5

00001412 <subnormal>:
    1412:	00 00 40    	add.w     w0, w0, w0
    1414:	81 c0 48    	addc.b    w1, w1, w1
    1416:	fc ff 3b    	bra       NN, 0x1410 <normalize>
    1418:	01 70 a0    	bset.w    w1, #0x7
    141a:	24 00 05    	retlw.w   #0x2, w4

0000141c <__funpack2>:
    141c:	00 04 be    	mov.d     w0, w8
    141e:	e9 ff 07    	rcall     0x13f2 <__funpack>
    1420:	00 03 be    	mov.d     w0, w6
    1422:	04 05 be    	mov.d     w4, w10
    1424:	02 00 be    	mov.d     w2, w0
    1426:	e5 ff 07    	rcall     0x13f2 <__funpack>
    1428:	84 4f 75    	ior.b     w10, w4, [w15]
    142a:	00 00 06    	return    

0000142c <__fPropagateNaN>:
    142c:	02 00 be    	mov.d     w2, w0
    142e:	64 50 e1    	cp.w      w10, #0x4
    1430:	05 00 36    	bra       LEU, 0x143c <return0>
    1432:	64 20 e1    	cp.w      w4, #0x4
    1434:	02 00 36    	bra       LEU, 0x143a <return8>
    1436:	09 68 a3    	btst.z    w9, #0x6
    1438:	01 00 3a    	bra       NZ, 0x143c <return0>

0000143a <return8>:
    143a:	08 00 be    	mov.d     w8, w0

0000143c <return0>:
    143c:	01 60 a0    	bset.w    w1, #0x6

0000143e <__fbopExit>:
    143e:	4f 06 78    	mov.w     [--w15], w12
    1440:	4f 05 be    	mov.d     [--w15], w10
    1442:	4f 04 be    	mov.d     [--w15], w8
    1444:	00 00 06    	return    

00001446 <__fbopReturnNaN>:
    1446:	f0 ff 2f    	mov.w     #0xffff, w0
    1448:	f1 ff 27    	mov.w     #0x7fff, w1
    144a:	f9 ff 37    	bra       0x143e <__fbopExit>

0000144c <___mulsf3>:
    144c:	88 9f be    	mov.d     w8, [w15++]
    144e:	8a 9f be    	mov.d     w10, [w15++]
    1450:	8c 1f 78    	mov.w     w12, [w15++]
    1452:	e4 ff 07    	rcall     0x141c <__funpack2>
    1454:	eb ff 33    	bra       N, 0x142c <__fPropagateNaN>
    1456:	03 86 6c    	xor.w     w9, w3, w12
    1458:	64 50 e1    	cp.w      w10, #0x4
    145a:	24 00 32    	bra       Z, 0x14a4 <aisinfinite>
    145c:	64 20 e1    	cp.w      w4, #0x4
    145e:	27 00 32    	bra       Z, 0x14ae <bisinfinite>
    1460:	61 50 e1    	cp.w      w10, #0x1
    1462:	22 00 32    	bra       Z, 0x14a8 <return8>
    1464:	61 20 e1    	cp.w      w4, #0x1
    1466:	21 00 32    	bra       Z, 0x14aa <return2>
    1468:	8b 85 42    	add.w     w5, w11, w11
    146a:	eb 07 b1    	sub.w     #0x7e, w11
    146c:	01 34 b8    	mul.uu    w6, w1, w8
    146e:	00 3a b8    	mul.uu    w7, w0, w4
    1470:	08 04 42    	add.w     w4, w8, w8
    1472:	89 84 4a    	addc.w    w5, w9, w9
    1474:	01 3a b8    	mul.uu    w7, w1, w4
    1476:	00 30 b8    	mul.uu    w6, w0, w0
    1478:	88 80 40    	add.w     w1, w8, w1
    147a:	09 01 4a    	addc.w    w4, w9, w2
    147c:	04 00 33    	bra       N, 0x1486 <formsticky>
    147e:	00 00 40    	add.w     w0, w0, w0
    1480:	81 80 48    	addc.w    w1, w1, w1
    1482:	02 01 49    	addc.w    w2, w2, w2
    1484:	8b 05 e9    	dec.w     w11, w11

00001486 <formsticky>:
    1486:	c9 09 dd    	sl.w      w1, #0x9, w3
    1488:	83 01 70    	ior.w     w0, w3, w3
    148a:	01 00 32    	bra       Z, 0x148e <formRandSig>
    148c:	13 00 20    	mov.w     #0x1, w3

0000148e <formRandSig>:
    148e:	c8 14 de    	lsr.w     w2, #0x8, w9
    1490:	48 14 dd    	sl.w      w2, #0x8, w8
    1492:	47 09 de    	lsr.w     w1, #0x7, w2
    1494:	12 00 b2    	and.w     #0x1, w2
    1496:	c8 08 de    	lsr.w     w1, #0x8, w1
    1498:	08 84 70    	ior.w     w1, w8, w8
    149a:	85 ff 07    	rcall     0x13a6 <__fpack>

0000149c <return0>:
    149c:	01 f0 a1    	bclr.w    w1, #0xf
    149e:	0c f0 a7    	btsc.w    w12, #0xf
    14a0:	01 f0 a0    	bset.w    w1, #0xf
    14a2:	cd ff 37    	bra       0x143e <__fbopExit>

000014a4 <aisinfinite>:
    14a4:	61 20 e1    	cp.w      w4, #0x1
    14a6:	cf ff 32    	bra       Z, 0x1446 <__fbopReturnNaN>

000014a8 <return8>:
    14a8:	08 01 be    	mov.d     w8, w2

000014aa <return2>:
    14aa:	02 00 be    	mov.d     w2, w0
    14ac:	f7 ff 37    	bra       0x149c <return0>

000014ae <bisinfinite>:
    14ae:	61 50 e1    	cp.w      w10, #0x1
    14b0:	fc ff 3a    	bra       NZ, 0x14aa <return2>
    14b2:	c9 ff 37    	bra       0x1446 <__fbopReturnNaN>

000014b4 <___udivsi3>:
    14b4:	60 22 b8    	mul.uu    w4, #0x0, w4
    14b6:	06 02 20    	mov.w     #0x20, w6

000014b8 <nextbit>:
    14b8:	00 00 d0    	sl.w      w0, w0
    14ba:	81 80 d2    	rlc.w     w1, w1
    14bc:	04 82 d2    	rlc.w     w4, w4
    14be:	85 82 d2    	rlc.w     w5, w5
    14c0:	00 00 a0    	bset.w    w0, #0x0
    14c2:	02 02 52    	sub.w     w4, w2, w4
    14c4:	83 82 5a    	subb.w    w5, w3, w5
    14c6:	03 00 31    	bra       C, 0x14ce <iterate>
    14c8:	02 02 42    	add.w     w4, w2, w4
    14ca:	83 82 4a    	addc.w    w5, w3, w5
    14cc:	00 00 a1    	bclr.w    w0, #0x0

000014ce <iterate>:
    14ce:	06 03 e9    	dec.w     w6, w6
    14d0:	f3 ff 3a    	bra       NZ, 0x14b8 <nextbit>
    14d2:	00 00 06    	return    

000014d4 <___umodsi3>:
    14d4:	ef ff 07    	rcall     0x14b4 <___udivsi3>
    14d6:	04 00 be    	mov.d     w4, w0
    14d8:	00 00 06    	return    

000014da <__fcompare>:
    14da:	88 9f be    	mov.d     w8, [w15++]
    14dc:	8a 9f be    	mov.d     w10, [w15++]
    14de:	84 1f 78    	mov.w     w4, [w15++]
    14e0:	9d ff 07    	rcall     0x141c <__funpack2>
    14e2:	4f 00 78    	mov.w     [--w15], w0
    14e4:	11 00 33    	bra       N, 0x1508 <exit>
    14e6:	f0 ff 2f    	mov.w     #0xffff, w0
    14e8:	83 8f 6c    	xor.w     w9, w3, [w15]
    14ea:	06 00 3b    	bra       NN, 0x14f8 <comparemag>
    14ec:	04 05 65    	and.w     w10, w4, w10
    14ee:	0a 00 a7    	btsc.w    w10, #0x0
    14f0:	08 00 37    	bra       0x1502 <returnEqual>
    14f2:	09 f0 a6    	btss.w    w9, #0xf
    14f4:	10 00 20    	mov.w     #0x1, w0
    14f6:	08 00 37    	bra       0x1508 <exit>

000014f8 <comparemag>:
    14f8:	82 0f 54    	sub.w     w8, w2, [w15]
    14fa:	83 8f 5c    	subb.w    w9, w3, [w15]
    14fc:	03 00 39    	bra       NC, 0x1504 <adjust>
    14fe:	10 00 20    	mov.w     #0x1, w0
    1500:	01 00 3e    	bra       GTU, 0x1504 <adjust>

00001502 <returnEqual>:
    1502:	00 00 20    	mov.w     #0x0, w0

00001504 <adjust>:
    1504:	09 f0 a7    	btsc.w    w9, #0xf
    1506:	00 00 ea    	neg.w     w0, w0

00001508 <exit>:
    1508:	4f 05 be    	mov.d     [--w15], w10
    150a:	4f 04 be    	mov.d     [--w15], w8
    150c:	00 00 e0    	cp0.w     w0
    150e:	00 00 06    	return    

00001510 <___floatdisf>:
    1510:	88 1f 78    	mov.w     w8, [w15++]
    1512:	03 04 78    	mov.w     w3, w8
    1514:	03 00 e0    	cp0.w     w3
    1516:	07 00 3d    	bra       GE, 0x1526 <notspecial>

00001518 <negative>:
    1518:	60 00 10    	subr.w    w0, #0x0, w0
    151a:	e0 80 18    	subbr.w   w1, #0x0, w1
    151c:	60 01 19    	subbr.w   w2, #0x0, w2
    151e:	e0 81 19    	subbr.w   w3, #0x0, w3
    1520:	02 00 3b    	bra       NN, 0x1526 <notspecial>
    1522:	01 f0 2d    	mov.w     #0xdf00, w1
    1524:	03 00 37    	bra       0x152c <return0>

00001526 <notspecial>:
    1526:	04 00 07    	rcall     0x1530 <___floatundisf>
    1528:	08 f0 a7    	btsc.w    w8, #0xf
    152a:	01 f0 a0    	bset.w    w1, #0xf

0000152c <return0>:
    152c:	4f 04 78    	mov.w     [--w15], w8
    152e:	00 00 06    	return    

00001530 <___floatundisf>:
    1530:	88 9f be    	mov.d     w8, [w15++]
    1532:	8a 9f be    	mov.d     w10, [w15++]
    1534:	00 82 70    	ior.w     w1, w0, w4
    1536:	04 02 71    	ior.w     w2, w4, w4
    1538:	04 82 71    	ior.w     w3, w4, w4
    153a:	26 00 32    	bra       Z, 0x1588 <return0>
    153c:	00 04 be    	mov.d     w0, w8
    153e:	02 00 be    	mov.d     w2, w0
    1540:	60 11 b8    	mul.uu    w2, #0x0, w2
    1542:	6b 09 20    	mov.w     #0x96, w11
    1544:	95 02 20    	mov.w     #0x29, w5
    1546:	01 82 cf    	ff1l      w1, w4
    1548:	0a 00 39    	bra       NC, 0x155e <fixshift>
    154a:	05 41 b1    	sub.b     #0x10, w5
    154c:	00 82 cf    	ff1l      w0, w4
    154e:	07 00 39    	bra       NC, 0x155e <fixshift>
    1550:	05 41 b1    	sub.b     #0x10, w5
    1552:	09 82 cf    	ff1l      w9, w4
    1554:	04 00 39    	bra       NC, 0x155e <fixshift>
    1556:	05 41 b1    	sub.b     #0x10, w5
    1558:	08 82 cf    	ff1l      w8, w4
    155a:	01 00 39    	bra       NC, 0x155e <fixshift>
    155c:	05 41 b1    	sub.b     #0x10, w5

0000155e <fixshift>:
    155e:	05 42 52    	sub.b     w4, w5, w4
    1560:	12 00 32    	bra       Z, 0x1586 <round>
    1562:	0a 00 3b    	bra       NN, 0x1578 <shiftleft>

00001564 <shiftright>:
    1564:	82 81 71    	ior.w     w3, w2, w3
    1566:	61 01 64    	and.w     w8, #0x1, w2
    1568:	81 00 d1    	lsr.w     w1, w1
    156a:	00 80 d3    	rrc.w     w0, w0
    156c:	89 84 d3    	rrc.w     w9, w9
    156e:	08 84 d3    	rrc.w     w8, w8
    1570:	8b 05 e8    	inc.w     w11, w11
    1572:	04 42 e8    	inc.b     w4, w4
    1574:	f7 ff 3a    	bra       NZ, 0x1564 <shiftright>
    1576:	07 00 37    	bra       0x1586 <round>

00001578 <shiftleft>:
    1578:	08 04 44    	add.w     w8, w8, w8
    157a:	89 84 4c    	addc.w    w9, w9, w9
    157c:	00 00 48    	addc.w    w0, w0, w0
    157e:	81 80 48    	addc.w    w1, w1, w1
    1580:	8b 05 e9    	dec.w     w11, w11
    1582:	04 42 e9    	dec.b     w4, w4
    1584:	f9 ff 3a    	bra       NZ, 0x1578 <shiftleft>

00001586 <round>:
    1586:	0f ff 07    	rcall     0x13a6 <__fpack>

00001588 <return0>:
    1588:	4f 05 be    	mov.d     [--w15], w10
    158a:	4f 04 be    	mov.d     [--w15], w8
    158c:	00 00 06    	return    

0000158e <_memset>:
    158e:	80 01 78    	mov.w     w0, w3
    1590:	02 00 37    	bra       0x1596 <.L2>

00001592 <.L3>:
    1592:	81 59 78    	mov.b     w1, [w3++]
    1594:	02 01 e9    	dec.w     w2, w2

00001596 <.L2>:
    1596:	02 00 e0    	cp0.w     w2
    1598:	fc ff 3a    	bra       NZ, 0x1592 <.L3>
    159a:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	50 27 04    	goto      0x2750 <__T1Interrupt>
    1026:	00 00 00 
    1028:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	8c 27 04    	goto      0x278c <__T2Interrupt>
    1032:	00 00 00 
    1034:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	e6 28 04    	goto      0x28e6 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000959c <_numbertable>:
    959c:	3f 00       	.word 0x3f
    959e:	06 00       	.word 0x6
    95a0:	5b 00       	.word 0x5b
    95a2:	4f 00       	.word 0x4f
    95a4:	66 00       	.word 0x66
    95a6:	6d 00       	.word 0x6d
    95a8:	7d 00       	.word 0x7d
    95aa:	07 00       	.word 0x7
    95ac:	7f 00       	.word 0x7f
    95ae:	6f 00       	.word 0x6f
    95b0:	77 00       	.word 0x77
    95b2:	7c 00       	.word 0x7c
    95b4:	39 00       	.word 0x39
    95b6:	5e 00       	.word 0x5e
    95b8:	79 00       	.word 0x79
    95ba:	71 00       	.word 0x71
	...

000095c0 <_alphafonttable>:
    95c0:	01 00       	.word 0x1
    95c2:	02 00       	.word 0x2
    95c4:	04 00       	.word 0x4
    95c6:	08 00       	.word 0x8
    95c8:	10 00       	.word 0x10
    95ca:	20 00       	.word 0x20
    95cc:	40 00       	.word 0x40
    95ce:	80 00       	.word 0x80
    95d0:	00 01       	.word 0x100
    95d2:	00 02       	.word 0x200
    95d4:	00 04       	.word 0x400
    95d6:	00 08       	.word 0x800
    95d8:	00 10       	.word 0x1000
    95da:	00 20       	.word 0x2000
    95dc:	00 40       	.word 0x4000
    95de:	00 80       	.word 0x8000
	...
    95f0:	c9 12       	.word 0x12c9
    95f2:	c0 15       	.word 0x15c0
    95f4:	f9 12       	.word 0x12f9
    95f6:	e3 00       	.word 0xe3
    95f8:	30 05       	.word 0x530
    95fa:	c8 12       	.word 0x12c8
    95fc:	00 3a       	.word 0x3a00
    95fe:	00 17       	.word 0x1700
    9600:	00 00       	.word 0
    9602:	06 00       	.word 0x6
    9604:	20 02       	.word 0x220
    9606:	ce 12       	.word 0x12ce
    9608:	ed 12       	.word 0x12ed
    960a:	24 0c       	.word 0xc24
    960c:	5d 23       	.word 0x235d
    960e:	00 04       	.word 0x400
    9610:	00 24       	.word 0x2400
    9612:	00 09       	.word 0x900
    9614:	c0 3f       	.word 0x3fc0
    9616:	c0 12       	.word 0x12c0
    9618:	00 08       	.word 0x800
    961a:	c0 00       	.word 0xc0
    961c:	00 00       	.word 0
    961e:	00 0c       	.word 0xc00
    9620:	3f 0c       	.word 0xc3f
    9622:	06 00       	.word 0x6
    9624:	db 00       	.word 0xdb
    9626:	8f 00       	.word 0x8f
    9628:	e6 00       	.word 0xe6
    962a:	69 20       	.word 0x2069
    962c:	fd 00       	.word 0xfd
    962e:	07 00       	.word 0x7
    9630:	ff 00       	.word 0xff
    9632:	ef 00       	.word 0xef
    9634:	00 12       	.word 0x1200
    9636:	00 0a       	.word 0xa00
    9638:	00 24       	.word 0x2400
    963a:	c8 00       	.word 0xc8
    963c:	00 09       	.word 0x900
    963e:	83 10       	.word 0x1083
    9640:	bb 02       	.word 0x2bb
    9642:	f7 00       	.word 0xf7
    9644:	8f 12       	.word 0x128f
    9646:	39 00       	.word 0x39
    9648:	0f 12       	.word 0x120f
    964a:	f9 00       	.word 0xf9
    964c:	71 00       	.word 0x71
    964e:	bd 00       	.word 0xbd
    9650:	f6 00       	.word 0xf6
    9652:	00 12       	.word 0x1200
    9654:	1e 00       	.word 0x1e
    9656:	70 24       	.word 0x2470
    9658:	38 00       	.word 0x38
    965a:	36 05       	.word 0x536
    965c:	36 21       	.word 0x2136
    965e:	3f 00       	.word 0x3f
    9660:	f3 00       	.word 0xf3
    9662:	3f 20       	.word 0x203f
    9664:	f3 20       	.word 0x20f3
    9666:	ed 00       	.word 0xed
    9668:	01 12       	.word 0x1201
    966a:	3e 00       	.word 0x3e
    966c:	30 0c       	.word 0xc30
    966e:	36 28       	.word 0x2836
    9670:	00 2d       	.word 0x2d00
    9672:	00 15       	.word 0x1500
    9674:	09 0c       	.word 0xc09
    9676:	39 00       	.word 0x39
    9678:	00 21       	.word 0x2100
    967a:	0f 00       	.word 0xf
    967c:	03 0c       	.word 0xc03
    967e:	08 00       	.word 0x8
    9680:	00 01       	.word 0x100
    9682:	58 10       	.word 0x1058
    9684:	78 20       	.word 0x2078
    9686:	d8 00       	.word 0xd8
    9688:	8e 08       	.word 0x88e
    968a:	58 08       	.word 0x858
    968c:	71 00       	.word 0x71
    968e:	8e 04       	.word 0x48e
    9690:	70 10       	.word 0x1070
    9692:	00 10       	.word 0x1000
    9694:	0e 00       	.word 0xe
    9696:	00 36       	.word 0x3600
    9698:	30 00       	.word 0x30
    969a:	d4 10       	.word 0x10d4
    969c:	50 10       	.word 0x1050
    969e:	dc 00       	.word 0xdc
    96a0:	70 01       	.word 0x170
    96a2:	86 04       	.word 0x486
    96a4:	50 00       	.word 0x50
    96a6:	88 20       	.word 0x2088
    96a8:	78 00       	.word 0x78
    96aa:	1c 00       	.word 0x1c
    96ac:	04 20       	.word 0x2004
    96ae:	14 28       	.word 0x2814
    96b0:	c0 28       	.word 0x28c0
    96b2:	0c 20       	.word 0x200c
    96b4:	48 08       	.word 0x848
    96b6:	49 09       	.word 0x949
    96b8:	00 12       	.word 0x1200
    96ba:	89 24       	.word 0x2489
    96bc:	20 05       	.word 0x520
    96be:	ff 3f       	.word 0x3fff

000096c0 <_PWM_PERIOD_2_3>:
    96c0:	2b 1b       	.word 0x1b2b

000096c2 <_PWM_PERIOD_1_9>:
    96c2:	e4 20       	.word 0x20e4

000096c4 <_PWM_PERIOD_1>:
    96c4:	7f 3e       	.word 0x3e7f

000096c6 <_PWM_PERIOD_2>:
    96c6:	3f 1f       	.word 0x1f3f

000096c8 <_PWM_PERIOD_40>:
    96c8:	ff ff       	.word 0xffff
Disassembly of section .text:

000016ca <_strikeLEDOff>:

typedef void (*STATE_HANDLER_T)(void);
STATE_HANDLER_T state, last_state;

void strikeLEDOff() {
    16ca:	00 00 fa    	lnk       #0x0
    STRIKE1_RLED = OFF; delay_by_nop(1);
    16cc:	da a2 a9    	bclr.b    0x2da, #0x5
    16ce:	10 00 20    	mov.w     #0x1, w0
    16d0:	01 00 20    	mov.w     #0x0, w1
    16d2:	fc 05 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE1_GLED = OFF; delay_by_nop(1);
    16d4:	da 82 a9    	bclr.b    0x2da, #0x4
    16d6:	10 00 20    	mov.w     #0x1, w0
    16d8:	01 00 20    	mov.w     #0x0, w1
    16da:	f8 05 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE2_RLED = OFF; delay_by_nop(1);
    16dc:	da 02 a9    	bclr.b    0x2da, #0x0
    16de:	10 00 20    	mov.w     #0x1, w0
    16e0:	01 00 20    	mov.w     #0x0, w1
    16e2:	f4 05 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE2_GLED = OFF; delay_by_nop(1);
    16e4:	da 22 a9    	bclr.b    0x2da, #0x1
    16e6:	10 00 20    	mov.w     #0x1, w0
    16e8:	01 00 20    	mov.w     #0x0, w1
    16ea:	f0 05 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE3_RLED = OFF; delay_by_nop(1);
    16ec:	cb e2 a9    	bclr.b    0x2cb, #0x7
    16ee:	10 00 20    	mov.w     #0x1, w0
    16f0:	01 00 20    	mov.w     #0x0, w1
    16f2:	ec 05 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    STRIKE3_GLED = OFF; delay_by_nop(1);
    16f4:	ea 62 a9    	bclr.b    0x2ea, #0x3
    16f6:	10 00 20    	mov.w     #0x1, w0
    16f8:	01 00 20    	mov.w     #0x0, w1
    16fa:	e8 05 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    16fc:	00 80 fa    	ulnk      
    16fe:	00 00 06    	return    

00001700 <_main>:

// MAIN FUNCTION ***************************************************************

int16_t main(void) {
    1700:	08 00 fa    	lnk       #0x8
    init_elecanisms();
    1702:	91 08 07    	rcall     0x2826 <.LFE3> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    init_clock(); // not sure if this does anything
    1704:	00 10 20    	mov.w     #0x100, w0
    1706:	20 3a 88    	mov.w     w0, 0x744
    // Initializes I2C on I2C3
    i2c_init(1e3);
    1708:	80 3e 20    	mov.w     #0x3e8, w0
    170a:	f3 05 07    	rcall     0x22f2 <_i2c_init> <.LFB1> <.LFE0>
    led_begin((_ADAFRUIT_LED*)&matrix.super, matrix_addr); // Set up the HT16K33 and start the oscillator
    170c:	0c c8 bf    	mov.b     0x80c, WREG
    170e:	80 40 78    	mov.b     w0, w1
    1710:	e0 80 20    	mov.w     #0x80e, w0
    1712:	2a 03 07    	rcall     0x1d68 <_led_begin> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>

    time_left = max_time; // Set up time left to be max time
    1714:	c0 12 20    	mov.w     #0x12c, w0
    1716:	00 40 88    	mov.w     w0, 0x800

    // Setup pins as output
    D0_DIR = 0;
    1718:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    D1_DIR = 0;
    171a:	d8 82 a9    	bclr.b    0x2d8, #0x4
    D10_DIR = 0;
    171c:	d8 02 a9    	bclr.b    0x2d8, #0x0
    D11_DIR = 0;
    171e:	d8 22 a9    	bclr.b    0x2d8, #0x1
    D4_DIR = 0;
    1720:	c9 e2 a9    	bclr.b    0x2c9, #0x7
    D5_DIR = 0;
    1722:	e8 62 a9    	bclr.b    0x2e8, #0x3
    D6_DIR = 0;
    1724:	d9 02 a9    	bclr.b    0x2d9, #0x0
    D7_DIR = 0;
    1726:	d9 62 a9    	bclr.b    0x2d9, #0x3
    D9_DIR = 0;
    1728:	d9 42 a9    	bclr.b    0x2d9, #0x2


    // Init button low
    BUTTON_LED = 0;
    172a:	db 02 a9    	bclr.b    0x2db, #0x0
    BUTTON_LED_LOW = 0;
    172c:	db 62 a9    	bclr.b    0x2db, #0x3

    // Setup D8 as input
    D8_DIR = 1;
    172e:	d9 22 a8    	bset.b    0x2d9, #0x1
    // Set up pull-up resistor on button D8
    CNPU4bits.CN54PUE = 1;
    1730:	74 c0 a8    	bset.b    0x74, #0x6
    // Set D9 as pull-down for button
    D9 = 0;
    1732:	db 42 a9    	bclr.b    0x2db, #0x2

    /* Timer 1 setup for game timing*/
    T1CON = 0x0030;         // set Timer1 period to 1s
    1734:	00 03 20    	mov.w     #0x30, w0
    1736:	20 08 88    	mov.w     w0, 0x104
    PR1 = 0xF422;
    1738:	20 42 2f    	mov.w     #0xf422, w0
    173a:	10 08 88    	mov.w     w0, 0x102
    TMR1 = 0;               // set Timer1 count to 0
    173c:	00 21 ef    	clr.w     0x100
    IFS0bits.T1IF = 0;      // lower Timer1 interrupt flag
    173e:	84 60 a9    	bclr.b    0x84, #0x3
    IEC0bits.T1IE = 1;      // enable Timer1 interrupt
    1740:	94 60 a8    	bset.b    0x94, #0x3

    /* Timer 2 setup for beep timing*/
    T2CON = 0x0030;
    1742:	00 03 20    	mov.w     #0x30, w0
    1744:	80 08 88    	mov.w     w0, 0x110
    PR2 = 0x186A;           // set Timer2 period to 0.1s
    1746:	a0 86 21    	mov.w     #0x186a, w0
    1748:	60 08 88    	mov.w     w0, 0x10c
    TMR2 = 0;               // set Timer1 count to 0
    174a:	06 21 ef    	clr.w     0x106
    IFS0bits.T2IF = 0;      // lower T2 interrupt flag
    174c:	84 e0 a9    	bclr.b    0x84, #0x7
    IEC0bits.T2IE = 1;      // enable T2 interrupt
    174e:	94 e0 a8    	bset.b    0x94, #0x7

    /* Remap OC1 to D11 */
    uint8_t *RPOR, *RPINR;
    RPOR = (uint8_t *)&RPOR0;
    1750:	00 6c 20    	mov.w     #0x6c0, w0
    1752:	10 07 98    	mov.w     w0, [w14+2]
    RPINR = (uint8_t *)&RPINR0;
    1754:	00 68 20    	mov.w     #0x680, w0
    1756:	20 07 98    	mov.w     w0, [w14+4]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    1758:	11 3a 80    	mov.w     0x742, w1
    175a:	f0 0b 20    	mov.w     #0xbf, w0
    175c:	00 81 60    	and.w     w1, w0, w2
    175e:	60 04 20    	mov.w     #0x46, w0
    1760:	71 05 20    	mov.w     #0x57, w1
    1762:	23 74 20    	mov.w     #0x742, w3
    1764:	80 49 78    	mov.b     w0, [w3]
    1766:	81 49 78    	mov.b     w1, [w3]
    1768:	82 49 78    	mov.b     w2, [w3]
    RPOR[D12_RP] = OC1_RP;  // connect the OC1 module output to pin D8
    176a:	1e 00 90    	mov.w     [w14+2], w0
    176c:	77 00 40    	add.w     w0, #0x17, w0
    176e:	21 c1 b3    	mov.b     #0x12, w1
    1770:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    1772:	10 3a 80    	mov.w     0x742, w0
    1774:	00 01 78    	mov.w     w0, w2
    1776:	02 60 a0    	bset.w    w2, #0x6
    1778:	60 04 20    	mov.w     #0x46, w0
    177a:	71 05 20    	mov.w     #0x57, w1
    177c:	23 74 20    	mov.w     #0x742, w3
    177e:	80 49 78    	mov.b     w0, [w3]
    1780:	81 49 78    	mov.b     w1, [w3]
    1782:	82 49 78    	mov.b     w2, [w3]

    /* OC1 setup for beep output*/
    OC1CON1bits.OCTSEL = 0b111;   // configure OC1 module to use the peripheral
    1784:	81 0c 80    	mov.w     0x190, w1
    1786:	00 c0 21    	mov.w     #0x1c00, w0
    1788:	01 00 70    	ior.w     w0, w1, w0
    178a:	80 0c 88    	mov.w     w0, 0x190
                                  //   clock (i.e., FCY, OCTSEL<2:0> = 0b111) and
    OC1CON1bits.OCM = 0b110;      //   and to operate in edge-aligned PWM mode
    178c:	81 0c 80    	mov.w     0x190, w1
    178e:	80 ff 2f    	mov.w     #0xfff8, w0
    1790:	00 80 60    	and.w     w1, w0, w0
    1792:	60 00 b3    	ior.w     #0x6, w0
    1794:	80 0c 88    	mov.w     w0, 0x190
                                  //   (OCM<2:0> = 0b110)
    OC1CON2bits.OCTRIG = 0;       // configure OC1 module to syncrhonize to itself
    1796:	92 e1 a9    	bclr.b    0x192, #0x7
    OC1CON2bits.SYNCSEL = 0x1F;   //   (i.e., OCTRIG = 0 and SYNCSEL<4:0> = 0b11111)
    1798:	90 0c 80    	mov.w     0x192, w0
    179a:	f0 01 b3    	ior.w     #0x1f, w0
    179c:	90 0c 88    	mov.w     w0, 0x192

    OC1RS = PWM_PERIOD_2_3;       // configure period register to get 2.3 kHz
    179e:	00 b6 84    	mov.w     0x96c0, w0
    17a0:	a0 0c 88    	mov.w     w0, 0x194
    OC1TMR = 0;                   // set OC1 timer count to 0
    17a2:	98 21 ef    	clr.w     0x198
    OC1R = 0;                     // start with it off
    17a4:	96 21 ef    	clr.w     0x196


    state = idle;           // Initialize state to idle
    17a6:	40 83 21    	mov.w     #0x1834, w0
    17a8:	30 40 88    	mov.w     w0, 0x806
    last_state = (STATE_HANDLER_T)NULL;
    17aa:	08 28 ef    	clr.w     0x808

    memset(peripheral_present, 0, 6); // set arrays to 0
    17ac:	62 00 20    	mov.w     #0x6, w2
    17ae:	80 00 eb    	clr.w     w1
    17b0:	20 c2 20    	mov.w     #0xc22, w0
    17b2:	ed fe 07    	rcall     0x158e <_memset>
    memset(peripheral_complete, 0, 6);
    17b4:	62 00 20    	mov.w     #0x6, w2
    17b6:	80 00 eb    	clr.w     w1
    17b8:	80 c2 20    	mov.w     #0xc28, w0
    17ba:	e9 fe 07    	rcall     0x158e <_memset>
    num_strikes = 0;
    17bc:	03 68 ef    	clr.b     0x803
    prev_num_strikes = 0;
    17be:	04 68 ef    	clr.b     0x804
    game_complete = 0;
    17c0:	05 68 ef    	clr.b     0x805

    i2c2_init(157);      // initialize I2C for 16Mhz OSC with 100kHz I2C clock
    17c2:	d0 09 20    	mov.w     #0x9d, w0
    17c4:	d6 06 07    	rcall     0x2572 <_i2c2_init> <.LFB13> <.LFE12>

    delay_by_nop(300000);
    17c6:	00 3e 29    	mov.w     #0x93e0, w0
    17c8:	41 00 20    	mov.w     #0x4, w1
    17ca:	80 05 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>


    uint8_t i = 0;
    17cc:	00 40 eb    	clr.b     w0
    17ce:	00 4f 78    	mov.b     w0, [w14]
    // Poll the peripherals to see who's here
    for (i = 0; i < 6; i++) {
    17d0:	00 40 eb    	clr.b     w0
    17d2:	00 4f 78    	mov.b     w0, [w14]
    17d4:	14 00 37    	bra       0x17fe <.L3>

000017d6 <.L5>:
        uint8_t temp = 0;
    17d6:	00 40 eb    	clr.b     w0
    17d8:	60 47 98    	mov.b     w0, [w14+6]

        i2c2_start();
    17da:	d8 06 07    	rcall     0x258c <_i2c2_start> <.LFB14> <.LFE13>
        temp = send_i2c2_byte(peripheral_addrs[i]); // set /W bit
    17dc:	1e 80 fb    	ze        [w14], w0
    17de:	e1 c2 20    	mov.w     #0xc2e, w1
    17e0:	61 40 78    	mov.b     [w1+w0], w0
    17e2:	00 80 fb    	ze        w0, w0
    17e4:	22 07 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
    17e6:	60 47 98    	mov.b     w0, [w14+6]
        if (temp == 0) {
    17e8:	6e 40 90    	mov.b     [w14+6], w0
    17ea:	00 04 e0    	cp0.b     w0
    17ec:	06 00 3a    	bra       NZ, 0x17fa <.L4>
            peripheral_present[i] = 1; // We found it, but we need to reset the FSM for i2c
    17ee:	1e 80 fb    	ze        [w14], w0
    17f0:	21 c2 20    	mov.w     #0xc22, w1
    17f2:	12 c0 b3    	mov.b     #0x1, w2
    17f4:	82 70 78    	mov.b     w2, [w1+w0]
            send_i2c2_byte(0xA0); // Send dummy byte to reset FSM
    17f6:	00 0a 20    	mov.w     #0xa0, w0
    17f8:	18 07 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>

000017fa <.L4>:
        }
        reset_i2c2_bus();
    17fa:	fc 06 07    	rcall     0x25f4 <_reset_i2c2_bus> <.LFB16> <.LFE15>

000017fc <.LBE2>:
    17fc:	1e 4f e8    	inc.b     [w14], [w14]

000017fe <.L3>:
    17fe:	1e 40 78    	mov.b     [w14], w0
    1800:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1802:	e9 ff 36    	bra       LEU, 0x17d6 <.L5> <.LBB2>
    }

    //TODO: Send out parameters

    //TODO: Send out start condition
    for (i = 0; i < 6; i++) {
    1804:	00 40 eb    	clr.b     w0
    1806:	00 4f 78    	mov.b     w0, [w14]
    1808:	0f 00 37    	bra       0x1828 <.L6>

0000180a <.L8>:
        if (peripheral_present[i]) {
    180a:	1e 80 fb    	ze        [w14], w0
    180c:	21 c2 20    	mov.w     #0xc22, w1
    180e:	61 40 78    	mov.b     [w1+w0], w0
    1810:	00 04 e0    	cp0.b     w0
    1812:	09 00 32    	bra       Z, 0x1826 <.L7>
            i2c2_start();
    1814:	bb 06 07    	rcall     0x258c <_i2c2_start> <.LFB14> <.LFE13>
            send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    1816:	1e 80 fb    	ze        [w14], w0
    1818:	e1 c2 20    	mov.w     #0xc2e, w1
    181a:	61 40 78    	mov.b     [w1+w0], w0
    181c:	00 80 fb    	ze        w0, w0
    181e:	05 07 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
            send_i2c2_byte(HEADER_START_GAME << 5);
    1820:	00 0c 20    	mov.w     #0xc0, w0
    1822:	03 07 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
            reset_i2c2_bus();
    1824:	e7 06 07    	rcall     0x25f4 <_reset_i2c2_bus> <.LFB16> <.LFE15>

00001826 <.L7>:
    1826:	1e 4f e8    	inc.b     [w14], [w14]

00001828 <.L6>:
    1828:	1e 40 78    	mov.b     [w14], w0
    182a:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    182c:	ee ff 36    	bra       LEU, 0x180a <.L8>

0000182e <.L9>:
        }
    }

    while (1) {
        state();
    182e:	30 40 80    	mov.w     0x806, w0
    1830:	00 00 01    	call      w0
    }
    1832:	fd ff 37    	bra       0x182e <.L9>

00001834 <_idle>:

}

// ISRs ************************************************************************

uint8_t beep_state = 0;

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    IFS0bits.T1IF = 0;  // if it's been a second, lower the counter and show it
    time_left--;
    if (state == run) {
        TMR2 = 0;
        beep_state = 0;
        IEC0bits.T2IE = 1; // enable t2 interrupt
        T2CONbits.TON = 1; //Start T2
        OC1RS = PWM_PERIOD_2_3;
        OC1R = OC1RS>>1; // start beep
    }
}

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    IFS0bits.T2IF = 0;
    switch (beep_state) {
        case 0:         // turn off after first beep
            OC1R = 0;
            beep_state++;
            LED3 = OFF; delay_by_nop(1);
            LED1 = ON; delay_by_nop(1);
            break;
        case 1:
            OC1RS = PWM_PERIOD_1_9; // make lower beep
            OC1R = OC1RS>>1;
            LED1 = OFF; delay_by_nop(1);
            LED2 = ON; delay_by_nop(1);
            beep_state++;
            break;
        case 2:
            OC1RS = PWM_PERIOD_2_3; // Reset to high beep and stop
            OC1R = 0;
            LED1 = OFF; delay_by_nop(1);
            LED2 = ON; delay_by_nop(1);
            beep_state++;
            break;
        default:
            break;
    }
}

// STATE MACHINE FUNCTIONS *****************************************************

void idle(void) {
    1834:	00 00 fa    	lnk       #0x0
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    1836:	31 40 80    	mov.w     0x806, w1
    1838:	40 40 80    	mov.w     0x808, w0
    183a:	80 8f 50    	sub.w     w1, w0, [w15]
    183c:	05 00 32    	bra       Z, 0x1848 <.L20>
        last_state = state;
    183e:	30 40 80    	mov.w     0x806, w0
    1840:	40 40 88    	mov.w     w0, 0x808
        dispSeconds(max_time); // Start by showing full time
    1842:	c0 12 20    	mov.w     #0x12c, w0
    1844:	29 02 07    	rcall     0x1c98 <_dispSeconds> <.LFB8> <.LFE7>
        BUTTON_LED = ON;
    1846:	db 02 a8    	bset.b    0x2db, #0x0

00001848 <.L20>:
    }

    // Perform state tasks

    // Check for state transitions

    /* TODO is it better to not have the start button? */
    delay_by_nop(2000000); // delay for a long time at the start
    1848:	00 48 28    	mov.w     #0x8480, w0
    184a:	e1 01 20    	mov.w     #0x1e, w1
    184c:	3f 05 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    state=run;
    184e:	00 86 21    	mov.w     #0x1860, w0
    1850:	30 40 88    	mov.w     w0, 0x806

    // if (D8 == 0) { // D8 is pulled-up, if button is pressed it pulls it down
    //     state = run;
    // }

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    1852:	31 40 80    	mov.w     0x806, w1
    1854:	40 40 80    	mov.w     0x808, w0
    1856:	80 8f 50    	sub.w     w1, w0, [w15]
    1858:	01 00 32    	bra       Z, 0x185c <.L19>
        BUTTON_LED = OFF;
    185a:	db 02 a9    	bclr.b    0x2db, #0x0

0000185c <.L19>:
    }
}
    185c:	00 80 fa    	ulnk      
    185e:	00 00 06    	return    

00001860 <_run>:

void run(void) {
    1860:	06 00 fa    	lnk       #0x6
    if (state != last_state) {  // if we are entering the state, do intitialization stuff
    1862:	31 40 80    	mov.w     0x806, w1
    1864:	40 40 80    	mov.w     0x808, w0
    1866:	80 8f 50    	sub.w     w1, w0, [w15]
    1868:	12 00 32    	bra       Z, 0x188e <.L23>
        last_state = state;
    186a:	30 40 80    	mov.w     0x806, w0
    186c:	40 40 88    	mov.w     w0, 0x808
        IFS0bits.T1IF = 0; //lower interrupt flag
    186e:	84 60 a9    	bclr.b    0x84, #0x3
        TMR1 = 0;          // reset timer register
    1870:	00 21 ef    	clr.w     0x100
        T1CONbits.TON = 1; // enable 1 second timer
    1872:	05 e1 a8    	bset.b    0x105, #0x7

        time_left = max_time;
    1874:	c0 12 20    	mov.w     #0x12c, w0
    1876:	00 40 88    	mov.w     w0, 0x800
        dispSeconds(time_left);
    1878:	00 40 80    	mov.w     0x800, w0
    187a:	0e 02 07    	rcall     0x1c98 <_dispSeconds> <.LFB8> <.LFE7>
        STRIKE1_GLED = ON; // Turn on strike LEDs to green
    187c:	da 82 a8    	bset.b    0x2da, #0x4
        delay_by_nop(1);
    187e:	10 00 20    	mov.w     #0x1, w0
    1880:	01 00 20    	mov.w     #0x0, w1
    1882:	24 05 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = ON;
    1884:	da 22 a8    	bset.b    0x2da, #0x1
        delay_by_nop(1);
    1886:	10 00 20    	mov.w     #0x1, w0
    1888:	01 00 20    	mov.w     #0x0, w1
    188a:	20 05 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = ON;
    188c:	ea 62 a8    	bset.b    0x2ea, #0x3

0000188e <.L23>:
    }

    // Perform state tasks
    datareturned = 0;
    188e:	02 68 ef    	clr.b     0x802
    uint8_t i;
    uint16_t prev_r = 0; uint16_t prev_rs = 0;
    1890:	00 00 eb    	clr.w     w0
    1892:	10 07 98    	mov.w     w0, [w14+2]
    1894:	00 00 eb    	clr.w     w0
    1896:	20 07 98    	mov.w     w0, [w14+4]

    // Handle time
    dispSeconds(time_left);
    1898:	00 40 80    	mov.w     0x800, w0
    189a:	fe 01 07    	rcall     0x1c98 <_dispSeconds> <.LFB8> <.LFE7>
    if (time_left == 0) {
    189c:	00 40 80    	mov.w     0x800, w0
    189e:	00 00 e0    	cp0.w     w0
    18a0:	17 00 3a    	bra       NZ, 0x18d0 <.L24>
        for (i = 0; i < 6; i++) {
    18a2:	00 40 eb    	clr.b     w0
    18a4:	00 4f 78    	mov.b     w0, [w14]
    18a6:	0f 00 37    	bra       0x18c6 <.L25>

000018a8 <.L27>:
            if(peripheral_present[i]) {
    18a8:	1e 80 fb    	ze        [w14], w0
    18aa:	21 c2 20    	mov.w     #0xc22, w1
    18ac:	61 40 78    	mov.b     [w1+w0], w0
    18ae:	00 04 e0    	cp0.b     w0
    18b0:	09 00 32    	bra       Z, 0x18c4 <.L26>
                i2c2_start();
    18b2:	6c 06 07    	rcall     0x258c <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    18b4:	1e 80 fb    	ze        [w14], w0
    18b6:	e1 c2 20    	mov.w     #0xc2e, w1
    18b8:	61 40 78    	mov.b     [w1+w0], w0
    18ba:	00 80 fb    	ze        w0, w0
    18bc:	b6 06 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte(HEADER_END_LOSE << 5); // Broadcast the current number of strikes
    18be:	00 04 20    	mov.w     #0x40, w0
    18c0:	b4 06 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    18c2:	98 06 07    	rcall     0x25f4 <_reset_i2c2_bus> <.LFB16> <.LFE15>

000018c4 <.L26>:
    18c4:	1e 4f e8    	inc.b     [w14], [w14]

000018c6 <.L25>:
    18c6:	1e 40 78    	mov.b     [w14], w0
    18c8:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    18ca:	ee ff 36    	bra       LEU, 0x18a8 <.L27>
            }
        }
       state = end_fail;            // if we're out of time, go to end
    18cc:	20 b0 21    	mov.w     #0x1b02, w0
    18ce:	30 40 88    	mov.w     w0, 0x806

000018d0 <.L24>:
    }

    // Get completeness and strikes from every module
    prev_num_strikes = num_strikes;
    18d0:	03 c8 bf    	mov.b     0x803, WREG
    18d2:	04 e8 b7    	mov.b     WREG, 0x804
    for (i = 0; i < 6; i++) {
    18d4:	00 40 eb    	clr.b     w0
    18d6:	00 4f 78    	mov.b     w0, [w14]
    18d8:	40 00 37    	bra       0x195a <.L28>

000018da <.L33>:
        if(peripheral_present[i]) {
    18da:	1e 80 fb    	ze        [w14], w0
    18dc:	21 c2 20    	mov.w     #0xc22, w1
    18de:	61 40 78    	mov.b     [w1+w0], w0
    18e0:	00 04 e0    	cp0.b     w0
    18e2:	3a 00 32    	bra       Z, 0x1958 <.L29>
            i2c2_start();
    18e4:	53 06 07    	rcall     0x258c <_i2c2_start> <.LFB14> <.LFE13>
            send_i2c2_byte(peripheral_addrs[i] | 1);  // init a read, last to 1
    18e6:	1e 80 fb    	ze        [w14], w0
    18e8:	e1 c2 20    	mov.w     #0xc2e, w1
    18ea:	61 40 78    	mov.b     [w1+w0], w0
    18ec:	00 04 a0    	bset.b    w0, #0x0
    18ee:	00 80 fb    	ze        w0, w0
    18f0:	9c 06 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
            datareturned = i2c2_read_nack();
    18f2:	fd 06 07    	rcall     0x26ee <_i2c2_read_nack> <.LFB20> <.LFE19>
    18f4:	02 e8 b7    	mov.b     WREG, 0x802
            reset_i2c2_bus();
    18f6:	7e 06 07    	rcall     0x25f4 <_reset_i2c2_bus> <.LFB16> <.LFE15>

            if (datareturned & 0b10000000) { // Complete flag
    18f8:	02 c8 bf    	mov.b     0x802, WREG
    18fa:	00 04 e0    	cp0.b     w0
    18fc:	1b 00 3d    	bra       GE, 0x1934 <.L30>
                if (peripheral_complete[i] == 0){
    18fe:	1e 80 fb    	ze        [w14], w0
    1900:	81 c2 20    	mov.w     #0xc28, w1
    1902:	61 40 78    	mov.b     [w1+w0], w0
    1904:	00 04 e0    	cp0.b     w0
    1906:	12 00 3a    	bra       NZ, 0x192c <.L31>
                    prev_rs = OC1RS;
    1908:	a1 0c 80    	mov.w     0x194, w1
    190a:	21 07 98    	mov.w     w1, [w14+4]
                    prev_r = OC1R;
    190c:	b1 0c 80    	mov.w     0x196, w1
    190e:	11 07 98    	mov.w     w1, [w14+2]
                    OC1RS = PWM_PERIOD_2;
    1910:	30 b6 84    	mov.w     0x96c6, w0
    1912:	a0 0c 88    	mov.w     w0, 0x194
                    OC1R = OC1RS >> 1; // Make a high-pitched complete sound
    1914:	a0 0c 80    	mov.w     0x194, w0
    1916:	00 00 d1    	lsr.w     w0, w0
    1918:	b0 0c 88    	mov.w     w0, 0x196
                    disable_interrupts();
    191a:	ff 3f fc    	disi      #0x3fff
                    delay_by_nop(300000);
    191c:	00 3e 29    	mov.w     #0x93e0, w0
    191e:	41 00 20    	mov.w     #0x4, w1
    1920:	d5 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
                    OC1RS = prev_rs;;
    1922:	ae 00 90    	mov.w     [w14+4], w1
    1924:	a1 0c 88    	mov.w     w1, 0x194
                    OC1R = prev_r;
    1926:	9e 00 90    	mov.w     [w14+2], w1
    1928:	b1 0c 88    	mov.w     w1, 0x196
                    enable_interrupts();
    192a:	52 20 ef    	clr.w     0x52

0000192c <.L31>:
                }
                peripheral_complete[i] = 1;
    192c:	1e 80 fb    	ze        [w14], w0
    192e:	81 c2 20    	mov.w     #0xc28, w1
    1930:	12 c0 b3    	mov.b     #0x1, w2
    1932:	82 70 78    	mov.b     w2, [w1+w0]

00001934 <.L30>:
            }
            if (((datareturned & 0b01110000) >> 4) > prev_num_strikes) { //If the module recorded any strikes
    1934:	02 c8 bf    	mov.b     0x802, WREG
    1936:	80 80 fb    	ze        w0, w1
    1938:	00 07 20    	mov.w     #0x70, w0
    193a:	00 80 60    	and.w     w1, w0, w0
    193c:	c4 80 de    	asr.w     w0, #0x4, w1
    193e:	04 c8 bf    	mov.b     0x804, WREG
    1940:	00 80 fb    	ze        w0, w0
    1942:	80 8f 50    	sub.w     w1, w0, [w15]
    1944:	09 00 34    	bra       LE, 0x1958 <.L29>
                num_strikes+= ((datareturned & 0b01110000) >> 4);
    1946:	02 c8 bf    	mov.b     0x802, WREG
    1948:	80 80 fb    	ze        w0, w1
    194a:	00 07 20    	mov.w     #0x70, w0
    194c:	00 80 60    	and.w     w1, w0, w0
    194e:	44 80 de    	asr.w     w0, #0x4, w0
    1950:	80 40 78    	mov.b     w0, w1
    1952:	03 c8 bf    	mov.b     0x803, WREG
    1954:	00 c0 40    	add.b     w1, w0, w0
    1956:	03 e8 b7    	mov.b     WREG, 0x803

00001958 <.L29>:
    1958:	1e 4f e8    	inc.b     [w14], [w14]

0000195a <.L28>:
    195a:	1e 40 78    	mov.b     [w14], w0
    195c:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    195e:	bd ff 36    	bra       LEU, 0x18da <.L33>
            }
            if ((datareturned & 0b00001111) != 0) {
                // TODO: implement error codes if necessary
            }
        }
    }
    //Handles completeness
    game_complete = 1;
    1960:	10 c0 b3    	mov.b     #0x1, w0
    1962:	05 e8 b7    	mov.b     WREG, 0x805
    for (i = 0; i < 6; i++) {
    1964:	00 40 eb    	clr.b     w0
    1966:	00 4f 78    	mov.b     w0, [w14]
    1968:	0c 00 37    	bra       0x1982 <.L34>

0000196a <.L36>:
        if (peripheral_present[i] && !peripheral_complete[i]) {
    196a:	1e 80 fb    	ze        [w14], w0
    196c:	21 c2 20    	mov.w     #0xc22, w1
    196e:	61 40 78    	mov.b     [w1+w0], w0
    1970:	00 04 e0    	cp0.b     w0
    1972:	06 00 32    	bra       Z, 0x1980 <.L35>
    1974:	1e 80 fb    	ze        [w14], w0
    1976:	81 c2 20    	mov.w     #0xc28, w1
    1978:	61 40 78    	mov.b     [w1+w0], w0
    197a:	00 04 e0    	cp0.b     w0
    197c:	01 00 3a    	bra       NZ, 0x1980 <.L35>
            game_complete = 0;
    197e:	05 68 ef    	clr.b     0x805

00001980 <.L35>:
    1980:	1e 4f e8    	inc.b     [w14], [w14]

00001982 <.L34>:
    1982:	1e 40 78    	mov.b     [w14], w0
    1984:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1986:	f1 ff 36    	bra       LEU, 0x196a <.L36>
        }
    }
    // If we checked all of them and the game is still complete, then count it!
    if (game_complete) {
    1988:	05 c8 bf    	mov.b     0x805, WREG
    198a:	00 04 e0    	cp0.b     w0
    198c:	17 00 32    	bra       Z, 0x19bc <.L37>
        for (i = 0; i < 6; i++) {
    198e:	00 40 eb    	clr.b     w0
    1990:	00 4f 78    	mov.b     w0, [w14]
    1992:	0f 00 37    	bra       0x19b2 <.L38>

00001994 <.L40>:
            if(peripheral_present[i]) {
    1994:	1e 80 fb    	ze        [w14], w0
    1996:	21 c2 20    	mov.w     #0xc22, w1
    1998:	61 40 78    	mov.b     [w1+w0], w0
    199a:	00 04 e0    	cp0.b     w0
    199c:	09 00 32    	bra       Z, 0x19b0 <.L39>
                i2c2_start();
    199e:	f6 05 07    	rcall     0x258c <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    19a0:	1e 80 fb    	ze        [w14], w0
    19a2:	e1 c2 20    	mov.w     #0xc2e, w1
    19a4:	61 40 78    	mov.b     [w1+w0], w0
    19a6:	00 80 fb    	ze        w0, w0
    19a8:	40 06 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte(HEADER_END_WIN << 5); // Broadcast that we won
    19aa:	00 02 20    	mov.w     #0x20, w0
    19ac:	3e 06 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    19ae:	22 06 07    	rcall     0x25f4 <_reset_i2c2_bus> <.LFB16> <.LFE15>

000019b0 <.L39>:
    19b0:	1e 4f e8    	inc.b     [w14], [w14]

000019b2 <.L38>:
    19b2:	1e 40 78    	mov.b     [w14], w0
    19b4:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    19b6:	ee ff 36    	bra       LEU, 0x1994 <.L40>
            }
        }
        //TODO: Go to 'win' state
        state = end_win;
    19b8:	e0 bc 21    	mov.w     #0x1bce, w0
    19ba:	30 40 88    	mov.w     w0, 0x806

000019bc <.L37>:
    }

    //Handles strikes
    strikeLEDOff(); // Handle strike LEDs
    19bc:	86 fe 07    	rcall     0x16ca <_strikeLEDOff> <.L0> <.LFB0> <.Ltext0>
    switch (num_strikes){
    19be:	03 c8 bf    	mov.b     0x803, WREG
    19c0:	00 80 fb    	ze        w0, w0
    19c2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    19c4:	11 00 32    	bra       Z, 0x19e8 <.L43>
    19c6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    19c8:	1c 00 32    	bra       Z, 0x1a02 <.L44>
    19ca:	00 00 e0    	cp0.w     w0
    19cc:	27 00 3a    	bra       NZ, 0x1a1c <.L56>
        case 0:
            STRIKE1_GLED = ON; delay_by_nop(1);
    19ce:	da 82 a8    	bset.b    0x2da, #0x4
    19d0:	10 00 20    	mov.w     #0x1, w0
    19d2:	01 00 20    	mov.w     #0x0, w1
    19d4:	7b 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_GLED = ON; delay_by_nop(1);
    19d6:	da 22 a8    	bset.b    0x2da, #0x1
    19d8:	10 00 20    	mov.w     #0x1, w0
    19da:	01 00 20    	mov.w     #0x0, w1
    19dc:	77 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_GLED = ON; delay_by_nop(1);
    19de:	ea 62 a8    	bset.b    0x2ea, #0x3
    19e0:	10 00 20    	mov.w     #0x1, w0
    19e2:	01 00 20    	mov.w     #0x0, w1
    19e4:	73 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    19e6:	27 00 37    	bra       0x1a36 <.L45>

000019e8 <.L43>:
        case 1:
            STRIKE1_RLED = ON; delay_by_nop(1);
    19e8:	da a2 a8    	bset.b    0x2da, #0x5
    19ea:	10 00 20    	mov.w     #0x1, w0
    19ec:	01 00 20    	mov.w     #0x0, w1
    19ee:	6e 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_GLED = ON; delay_by_nop(1);
    19f0:	da 22 a8    	bset.b    0x2da, #0x1
    19f2:	10 00 20    	mov.w     #0x1, w0
    19f4:	01 00 20    	mov.w     #0x0, w1
    19f6:	6a 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_GLED = ON; delay_by_nop(1);
    19f8:	ea 62 a8    	bset.b    0x2ea, #0x3
    19fa:	10 00 20    	mov.w     #0x1, w0
    19fc:	01 00 20    	mov.w     #0x0, w1
    19fe:	66 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    1a00:	1a 00 37    	bra       0x1a36 <.L45>

00001a02 <.L44>:
        case 2:
            STRIKE1_RLED = ON; delay_by_nop(1);
    1a02:	da a2 a8    	bset.b    0x2da, #0x5
    1a04:	10 00 20    	mov.w     #0x1, w0
    1a06:	01 00 20    	mov.w     #0x0, w1
    1a08:	61 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_RLED = ON; delay_by_nop(1);
    1a0a:	da 02 a8    	bset.b    0x2da, #0x0
    1a0c:	10 00 20    	mov.w     #0x1, w0
    1a0e:	01 00 20    	mov.w     #0x0, w1
    1a10:	5d 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_GLED = ON; delay_by_nop(1);
    1a12:	ea 62 a8    	bset.b    0x2ea, #0x3
    1a14:	10 00 20    	mov.w     #0x1, w0
    1a16:	01 00 20    	mov.w     #0x0, w1
    1a18:	59 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    1a1a:	0d 00 37    	bra       0x1a36 <.L45>

00001a1c <.L56>:
        default:
            STRIKE1_RLED = ON; delay_by_nop(1);
    1a1c:	da a2 a8    	bset.b    0x2da, #0x5
    1a1e:	10 00 20    	mov.w     #0x1, w0
    1a20:	01 00 20    	mov.w     #0x0, w1
    1a22:	54 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE2_RLED = ON; delay_by_nop(1);
    1a24:	da 02 a8    	bset.b    0x2da, #0x0
    1a26:	10 00 20    	mov.w     #0x1, w0
    1a28:	01 00 20    	mov.w     #0x0, w1
    1a2a:	50 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
            STRIKE3_RLED = ON; delay_by_nop(1);
    1a2c:	cb e2 a8    	bset.b    0x2cb, #0x7
    1a2e:	10 00 20    	mov.w     #0x1, w0
    1a30:	01 00 20    	mov.w     #0x0, w1
    1a32:	4c 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        break;
    1a34:	00 00 00    	nop       

00001a36 <.L45>:
    }

    if (num_strikes > prev_num_strikes) {
    1a36:	31 80 20    	mov.w     #0x803, w1
    1a38:	91 40 78    	mov.b     [w1], w1
    1a3a:	04 c8 bf    	mov.b     0x804, WREG
    1a3c:	80 cf 50    	sub.b     w1, w0, [w15]
    1a3e:	2b 00 36    	bra       LEU, 0x1a96 <.L46>
        for (i = 0; i < 6; i++) {
    1a40:	00 40 eb    	clr.b     w0
    1a42:	00 4f 78    	mov.b     w0, [w14]
    1a44:	13 00 37    	bra       0x1a6c <.L47>

00001a46 <.L49>:
            if (peripheral_present[i]) {
    1a46:	1e 80 fb    	ze        [w14], w0
    1a48:	21 c2 20    	mov.w     #0xc22, w1
    1a4a:	61 40 78    	mov.b     [w1+w0], w0
    1a4c:	00 04 e0    	cp0.b     w0
    1a4e:	0d 00 32    	bra       Z, 0x1a6a <.L48>
                i2c2_start();
    1a50:	9d 05 07    	rcall     0x258c <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    1a52:	1e 80 fb    	ze        [w14], w0
    1a54:	e1 c2 20    	mov.w     #0xc2e, w1
    1a56:	61 40 78    	mov.b     [w1+w0], w0
    1a58:	00 80 fb    	ze        w0, w0
    1a5a:	e7 05 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte((HEADER_NUM_STRIKES<<5) | num_strikes); // Broadcast the current number of strikes
    1a5c:	31 80 20    	mov.w     #0x803, w1
    1a5e:	91 40 78    	mov.b     [w1], w1
    1a60:	00 ce b3    	mov.b     #0xe0, w0
    1a62:	00 c0 70    	ior.b     w1, w0, w0
    1a64:	00 80 fb    	ze        w0, w0
    1a66:	e1 05 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    1a68:	c5 05 07    	rcall     0x25f4 <_reset_i2c2_bus> <.LFB16> <.LFE15>

00001a6a <.L48>:
    1a6a:	1e 4f e8    	inc.b     [w14], [w14]

00001a6c <.L47>:
    1a6c:	1e 40 78    	mov.b     [w14], w0
    1a6e:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1a70:	ea ff 36    	bra       LEU, 0x1a46 <.L49>
            }
        }

        prev_rs = OC1RS;
    1a72:	a1 0c 80    	mov.w     0x194, w1
    1a74:	21 07 98    	mov.w     w1, [w14+4]
        prev_r = OC1R;
    1a76:	b1 0c 80    	mov.w     0x196, w1
    1a78:	11 07 98    	mov.w     w1, [w14+2]
        OC1RS = PWM_PERIOD_1;
    1a7a:	20 b6 84    	mov.w     0x96c4, w0
    1a7c:	a0 0c 88    	mov.w     w0, 0x194
        OC1R = OC1RS >> 1; // Make a soise for the strike
    1a7e:	a0 0c 80    	mov.w     0x194, w0
    1a80:	00 00 d1    	lsr.w     w0, w0
    1a82:	b0 0c 88    	mov.w     w0, 0x196
        disable_interrupts();
    1a84:	ff 3f fc    	disi      #0x3fff
        delay_by_nop(300000);
    1a86:	00 3e 29    	mov.w     #0x93e0, w0
    1a88:	41 00 20    	mov.w     #0x4, w1
    1a8a:	20 04 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        OC1RS = prev_rs;
    1a8c:	ae 00 90    	mov.w     [w14+4], w1
    1a8e:	a1 0c 88    	mov.w     w1, 0x194
        OC1R = prev_r;
    1a90:	9e 00 90    	mov.w     [w14+2], w1
    1a92:	b1 0c 88    	mov.w     w1, 0x196
        enable_interrupts();
    1a94:	52 20 ef    	clr.w     0x52

00001a96 <.L46>:
    }
    if (num_strikes > 2) {
    1a96:	03 c8 bf    	mov.b     0x803, WREG
    1a98:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1a9a:	17 00 36    	bra       LEU, 0x1aca <.L50>
        for (i = 0; i < 6; i++) {
    1a9c:	00 40 eb    	clr.b     w0
    1a9e:	00 4f 78    	mov.b     w0, [w14]
    1aa0:	0f 00 37    	bra       0x1ac0 <.L51>

00001aa2 <.L53>:
            if(peripheral_present[i]) {
    1aa2:	1e 80 fb    	ze        [w14], w0
    1aa4:	21 c2 20    	mov.w     #0xc22, w1
    1aa6:	61 40 78    	mov.b     [w1+w0], w0
    1aa8:	00 04 e0    	cp0.b     w0
    1aaa:	09 00 32    	bra       Z, 0x1abe <.L52>
                i2c2_start();
    1aac:	6f 05 07    	rcall     0x258c <_i2c2_start> <.LFB14> <.LFE13>
                send_i2c2_byte(peripheral_addrs[i] | 0);  // init a write, last to 0
    1aae:	1e 80 fb    	ze        [w14], w0
    1ab0:	e1 c2 20    	mov.w     #0xc2e, w1
    1ab2:	61 40 78    	mov.b     [w1+w0], w0
    1ab4:	00 80 fb    	ze        w0, w0
    1ab6:	b9 05 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
                send_i2c2_byte(HEADER_END_LOSE << 5); // Broadcast the current number of strikes
    1ab8:	00 04 20    	mov.w     #0x40, w0
    1aba:	b7 05 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
                reset_i2c2_bus();
    1abc:	9b 05 07    	rcall     0x25f4 <_reset_i2c2_bus> <.LFB16> <.LFE15>

00001abe <.L52>:
    1abe:	1e 4f e8    	inc.b     [w14], [w14]

00001ac0 <.L51>:
    1ac0:	1e 40 78    	mov.b     [w14], w0
    1ac2:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    1ac4:	ee ff 36    	bra       LEU, 0x1aa2 <.L53>
            }
        }
        state = end_fail;
    1ac6:	20 b0 21    	mov.w     #0x1b02, w0
    1ac8:	30 40 88    	mov.w     w0, 0x806

00001aca <.L50>:
    }

    // Check for state transitions
    if (SW2 == 0) {
    1aca:	91 16 80    	mov.w     0x2d2, w1
    1acc:	00 00 21    	mov.w     #0x1000, w0
    1ace:	00 80 60    	and.w     w1, w0, w0
    1ad0:	00 00 e0    	cp0.w     w0
    1ad2:	02 00 3a    	bra       NZ, 0x1ad8 <.L54>
        state = idle;           // SW2 resets to idle
    1ad4:	40 83 21    	mov.w     #0x1834, w0
    1ad6:	30 40 88    	mov.w     w0, 0x806

00001ad8 <.L54>:
    }

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    1ad8:	31 40 80    	mov.w     0x806, w1
    1ada:	40 40 80    	mov.w     0x808, w0
    1adc:	80 8f 50    	sub.w     w1, w0, [w15]
    1ade:	0f 00 32    	bra       Z, 0x1afe <.L22>
        T1CONbits.TON = 0;
    1ae0:	05 e1 a9    	bclr.b    0x105, #0x7
        STRIKE1_GLED = OFF; // Turn off strike LEDs.
    1ae2:	da 82 a9    	bclr.b    0x2da, #0x4
        delay_by_nop(1);
    1ae4:	10 00 20    	mov.w     #0x1, w0
    1ae6:	01 00 20    	mov.w     #0x0, w1
    1ae8:	f1 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = OFF;
    1aea:	da 22 a9    	bclr.b    0x2da, #0x1
        delay_by_nop(1);
    1aec:	10 00 20    	mov.w     #0x1, w0
    1aee:	01 00 20    	mov.w     #0x0, w1
    1af0:	ed 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = OFF;
    1af2:	ea 62 a9    	bclr.b    0x2ea, #0x3
        IEC0bits.T2IE = 0; // disable beep interrupt
    1af4:	94 e0 a9    	bclr.b    0x94, #0x7
        OC1R = 0; // turn off beep
    1af6:	96 21 ef    	clr.w     0x196
        dispSeconds(time_left);
    1af8:	00 40 80    	mov.w     0x800, w0
    1afa:	ce 00 07    	rcall     0x1c98 <_dispSeconds> <.LFB8> <.LFE7>
        strikeLEDOff(); // turn off strike LEDs
    1afc:	e6 fd 07    	rcall     0x16ca <_strikeLEDOff> <.L0> <.LFB0> <.Ltext0>

00001afe <.L22>:
    }
}
    1afe:	00 80 fa    	ulnk      
    1b00:	00 00 06    	return    

00001b02 <_end_fail>:

void end_fail(void) {
    1b02:	00 00 fa    	lnk       #0x0
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    1b04:	31 40 80    	mov.w     0x806, w1
    1b06:	40 40 80    	mov.w     0x808, w0
    1b08:	80 8f 50    	sub.w     w1, w0, [w15]
    1b0a:	16 00 32    	bra       Z, 0x1b38 <.L58>
        last_state = state;
    1b0c:	30 40 80    	mov.w     0x806, w0
    1b0e:	40 40 88    	mov.w     w0, 0x808
        // start timer again to blink red LEDs
        IFS0bits.T1IF = 0; //lower interrupt flag
    1b10:	84 60 a9    	bclr.b    0x84, #0x3
        TMR1 = 0;          // reset timer register
    1b12:	00 21 ef    	clr.w     0x100
        T1CONbits.TON = 1; // enable 1 second timer
    1b14:	05 e1 a8    	bset.b    0x105, #0x7

        OC1RS = PWM_PERIOD_2_3;
    1b16:	00 b6 84    	mov.w     0x96c0, w0
    1b18:	a0 0c 88    	mov.w     w0, 0x194
        OC1R = OC1RS>>1; // start beep
    1b1a:	a0 0c 80    	mov.w     0x194, w0
    1b1c:	00 00 d1    	lsr.w     w0, w0
    1b1e:	b0 0c 88    	mov.w     w0, 0x196

        STRIKE1_RLED = ON; delay_by_nop(1); // Turn on strike LEDs red
    1b20:	da a2 a8    	bset.b    0x2da, #0x5
    1b22:	10 00 20    	mov.w     #0x1, w0
    1b24:	01 00 20    	mov.w     #0x0, w1
    1b26:	d2 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_RLED = ON; delay_by_nop(1);
    1b28:	da 02 a8    	bset.b    0x2da, #0x0
    1b2a:	10 00 20    	mov.w     #0x1, w0
    1b2c:	01 00 20    	mov.w     #0x0, w1
    1b2e:	ce 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_RLED = ON; delay_by_nop(1);
    1b30:	cb e2 a8    	bset.b    0x2cb, #0x7
    1b32:	10 00 20    	mov.w     #0x1, w0
    1b34:	01 00 20    	mov.w     #0x0, w1
    1b36:	ca 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001b38 <.L58>:
    }

    // Perform state tasks
    if (IFS0bits.T1IF == 1) {
    1b38:	20 04 80    	mov.w     0x84, w0
    1b3a:	68 00 60    	and.w     w0, #0x8, w0
    1b3c:	00 00 e0    	cp0.w     w0
    1b3e:	33 00 32    	bra       Z, 0x1ba6 <.L59>
        IFS0bits.T1IF = 0;  // if it's been a second, lower the counter and show it
    1b40:	84 60 a9    	bclr.b    0x84, #0x3
        // Blink RLEDs
        STRIKE1_RLED = !STRIKE1_RLED; delay_by_nop(1);
    1b42:	d1 16 80    	mov.w     0x2da, w1
    1b44:	00 02 20    	mov.w     #0x20, w0
    1b46:	00 80 60    	and.w     w1, w0, w0
    1b48:	00 f0 a7    	btsc.w    w0, #0xf
    1b4a:	00 00 ea    	neg.w     w0, w0
    1b4c:	00 00 e9    	dec.w     w0, w0
    1b4e:	4f 00 de    	lsr.w     w0, #0xf, w0
    1b50:	00 40 78    	mov.b     w0, w0
    1b52:	00 80 fb    	ze        w0, w0
    1b54:	61 00 60    	and.w     w0, #0x1, w0
    1b56:	45 00 dd    	sl.w      w0, #0x5, w0
    1b58:	d2 16 80    	mov.w     0x2da, w2
    1b5a:	f1 fd 2f    	mov.w     #0xffdf, w1
    1b5c:	81 00 61    	and.w     w2, w1, w1
    1b5e:	01 00 70    	ior.w     w0, w1, w0
    1b60:	d0 16 88    	mov.w     w0, 0x2da
    1b62:	10 00 20    	mov.w     #0x1, w0
    1b64:	01 00 20    	mov.w     #0x0, w1
    1b66:	b2 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_RLED = !STRIKE2_RLED; delay_by_nop(1);
    1b68:	d0 16 80    	mov.w     0x2da, w0
    1b6a:	61 00 60    	and.w     w0, #0x1, w0
    1b6c:	00 f0 a7    	btsc.w    w0, #0xf
    1b6e:	00 00 ea    	neg.w     w0, w0
    1b70:	00 00 e9    	dec.w     w0, w0
    1b72:	4f 00 de    	lsr.w     w0, #0xf, w0
    1b74:	00 40 78    	mov.b     w0, w0
    1b76:	00 80 fb    	ze        w0, w0
    1b78:	61 00 60    	and.w     w0, #0x1, w0
    1b7a:	d2 16 80    	mov.w     0x2da, w2
    1b7c:	e1 ff 2f    	mov.w     #0xfffe, w1
    1b7e:	81 00 61    	and.w     w2, w1, w1
    1b80:	01 00 70    	ior.w     w0, w1, w0
    1b82:	d0 16 88    	mov.w     w0, 0x2da
    1b84:	10 00 20    	mov.w     #0x1, w0
    1b86:	01 00 20    	mov.w     #0x0, w1
    1b88:	a1 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_RLED = !STRIKE3_RLED; delay_by_nop(1);
    1b8a:	50 16 80    	mov.w     0x2ca, w0
    1b8c:	00 80 ea    	com.w     w0, w0
    1b8e:	4f 00 de    	lsr.w     w0, #0xf, w0
    1b90:	00 40 78    	mov.b     w0, w0
    1b92:	00 80 fb    	ze        w0, w0
    1b94:	4f 00 dd    	sl.w      w0, #0xf, w0
    1b96:	52 16 80    	mov.w     0x2ca, w2
    1b98:	f1 ff 27    	mov.w     #0x7fff, w1
    1b9a:	81 00 61    	and.w     w2, w1, w1
    1b9c:	01 00 70    	ior.w     w0, w1, w0
    1b9e:	50 16 88    	mov.w     w0, 0x2ca
    1ba0:	10 00 20    	mov.w     #0x1, w0
    1ba2:	01 00 20    	mov.w     #0x0, w1
    1ba4:	93 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001ba6 <.L59>:
    }

    // Check for state transitions

    /* NO TRANSITIONS */

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    1ba6:	31 40 80    	mov.w     0x806, w1
    1ba8:	40 40 80    	mov.w     0x808, w0
    1baa:	80 8f 50    	sub.w     w1, w0, [w15]
    1bac:	0e 00 32    	bra       Z, 0x1bca <.L57>
        T1CONbits.TON = 0;
    1bae:	05 e1 a9    	bclr.b    0x105, #0x7
        OC1R = 0; // stop beep
    1bb0:	96 21 ef    	clr.w     0x196
        STRIKE1_RLED = OFF; delay_by_nop(1);
    1bb2:	da a2 a9    	bclr.b    0x2da, #0x5
    1bb4:	10 00 20    	mov.w     #0x1, w0
    1bb6:	01 00 20    	mov.w     #0x0, w1
    1bb8:	89 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_RLED = OFF; delay_by_nop(1); // turn off strike LEDs
    1bba:	da 02 a9    	bclr.b    0x2da, #0x0
    1bbc:	10 00 20    	mov.w     #0x1, w0
    1bbe:	01 00 20    	mov.w     #0x0, w1
    1bc0:	85 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_RLED = OFF; delay_by_nop(1);
    1bc2:	cb e2 a9    	bclr.b    0x2cb, #0x7
    1bc4:	10 00 20    	mov.w     #0x1, w0
    1bc6:	01 00 20    	mov.w     #0x0, w1
    1bc8:	81 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001bca <.L57>:
    }
}
    1bca:	00 80 fa    	ulnk      
    1bcc:	00 00 06    	return    

00001bce <_end_win>:

void end_win(void) {
    1bce:	00 00 fa    	lnk       #0x0
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    1bd0:	31 40 80    	mov.w     0x806, w1
    1bd2:	40 40 80    	mov.w     0x808, w0
    1bd4:	80 8f 50    	sub.w     w1, w0, [w15]
    1bd6:	12 00 32    	bra       Z, 0x1bfc <.L62>
        last_state = state;
    1bd8:	30 40 80    	mov.w     0x806, w0
    1bda:	40 40 88    	mov.w     w0, 0x808
        // start timer again to blink red LEDs
        IFS0bits.T1IF = 0; //lower interrupt flag
    1bdc:	84 60 a9    	bclr.b    0x84, #0x3
        IEC0bits.T1IE = 0;
    1bde:	94 60 a9    	bclr.b    0x94, #0x3
        TMR1 = 0;          // reset timer register
    1be0:	00 21 ef    	clr.w     0x100
        T1CONbits.TON = 1; // enable 1 second timer
    1be2:	05 e1 a8    	bset.b    0x105, #0x7
        STRIKE1_GLED = ON; delay_by_nop(1); // Turn on strike LEDs red
    1be4:	da 82 a8    	bset.b    0x2da, #0x4
    1be6:	10 00 20    	mov.w     #0x1, w0
    1be8:	01 00 20    	mov.w     #0x0, w1
    1bea:	70 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = ON; delay_by_nop(1);
    1bec:	da 22 a8    	bset.b    0x2da, #0x1
    1bee:	10 00 20    	mov.w     #0x1, w0
    1bf0:	01 00 20    	mov.w     #0x0, w1
    1bf2:	6c 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = ON; delay_by_nop(1);
    1bf4:	ea 62 a8    	bset.b    0x2ea, #0x3
    1bf6:	10 00 20    	mov.w     #0x1, w0
    1bf8:	01 00 20    	mov.w     #0x0, w1
    1bfa:	68 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001bfc <.L62>:
    }

    // Perform state tasks
    if (IFS0bits.T1IF == 1) {
    1bfc:	20 04 80    	mov.w     0x84, w0
    1bfe:	68 00 60    	and.w     w0, #0x8, w0
    1c00:	00 00 e0    	cp0.w     w0
    1c02:	37 00 32    	bra       Z, 0x1c72 <.L63>
        IFS0bits.T1IF = 0;  // if it's been a second, lower the counter and show it
    1c04:	84 60 a9    	bclr.b    0x84, #0x3
        // Blink GLEDs
        STRIKE1_GLED = !STRIKE1_GLED; delay_by_nop(1);
    1c06:	d0 16 80    	mov.w     0x2da, w0
    1c08:	70 00 60    	and.w     w0, #0x10, w0
    1c0a:	00 f0 a7    	btsc.w    w0, #0xf
    1c0c:	00 00 ea    	neg.w     w0, w0
    1c0e:	00 00 e9    	dec.w     w0, w0
    1c10:	4f 00 de    	lsr.w     w0, #0xf, w0
    1c12:	00 40 78    	mov.b     w0, w0
    1c14:	00 80 fb    	ze        w0, w0
    1c16:	61 00 60    	and.w     w0, #0x1, w0
    1c18:	44 00 dd    	sl.w      w0, #0x4, w0
    1c1a:	d2 16 80    	mov.w     0x2da, w2
    1c1c:	f1 fe 2f    	mov.w     #0xffef, w1
    1c1e:	81 00 61    	and.w     w2, w1, w1
    1c20:	01 00 70    	ior.w     w0, w1, w0
    1c22:	d0 16 88    	mov.w     w0, 0x2da
    1c24:	10 00 20    	mov.w     #0x1, w0
    1c26:	01 00 20    	mov.w     #0x0, w1
    1c28:	51 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = !STRIKE2_GLED; delay_by_nop(1);
    1c2a:	d0 16 80    	mov.w     0x2da, w0
    1c2c:	62 00 60    	and.w     w0, #0x2, w0
    1c2e:	00 f0 a7    	btsc.w    w0, #0xf
    1c30:	00 00 ea    	neg.w     w0, w0
    1c32:	00 00 e9    	dec.w     w0, w0
    1c34:	4f 00 de    	lsr.w     w0, #0xf, w0
    1c36:	00 40 78    	mov.b     w0, w0
    1c38:	00 80 fb    	ze        w0, w0
    1c3a:	61 00 60    	and.w     w0, #0x1, w0
    1c3c:	00 00 40    	add.w     w0, w0, w0
    1c3e:	d2 16 80    	mov.w     0x2da, w2
    1c40:	d1 ff 2f    	mov.w     #0xfffd, w1
    1c42:	81 00 61    	and.w     w2, w1, w1
    1c44:	01 00 70    	ior.w     w0, w1, w0
    1c46:	d0 16 88    	mov.w     w0, 0x2da
    1c48:	10 00 20    	mov.w     #0x1, w0
    1c4a:	01 00 20    	mov.w     #0x0, w1
    1c4c:	3f 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = !STRIKE3_GLED; delay_by_nop(1);
    1c4e:	50 17 80    	mov.w     0x2ea, w0
    1c50:	68 00 60    	and.w     w0, #0x8, w0
    1c52:	00 f0 a7    	btsc.w    w0, #0xf
    1c54:	00 00 ea    	neg.w     w0, w0
    1c56:	00 00 e9    	dec.w     w0, w0
    1c58:	4f 00 de    	lsr.w     w0, #0xf, w0
    1c5a:	00 40 78    	mov.b     w0, w0
    1c5c:	00 80 fb    	ze        w0, w0
    1c5e:	61 00 60    	and.w     w0, #0x1, w0
    1c60:	43 00 dd    	sl.w      w0, #0x3, w0
    1c62:	52 17 80    	mov.w     0x2ea, w2
    1c64:	71 ff 2f    	mov.w     #0xfff7, w1
    1c66:	81 00 61    	and.w     w2, w1, w1
    1c68:	01 00 70    	ior.w     w0, w1, w0
    1c6a:	50 17 88    	mov.w     w0, 0x2ea
    1c6c:	10 00 20    	mov.w     #0x1, w0
    1c6e:	01 00 20    	mov.w     #0x0, w1
    1c70:	2d 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001c72 <.L63>:
    }

    // Check for state transitions

    /* NO TRANSITIONS */

    // if we are leaving the state, do clean up stuff
    if (state != last_state) {
    1c72:	31 40 80    	mov.w     0x806, w1
    1c74:	40 40 80    	mov.w     0x808, w0
    1c76:	80 8f 50    	sub.w     w1, w0, [w15]
    1c78:	0d 00 32    	bra       Z, 0x1c94 <.L61>
        T1CONbits.TON = 0;
    1c7a:	05 e1 a9    	bclr.b    0x105, #0x7
        STRIKE1_GLED = OFF; delay_by_nop(1);
    1c7c:	da 82 a9    	bclr.b    0x2da, #0x4
    1c7e:	10 00 20    	mov.w     #0x1, w0
    1c80:	01 00 20    	mov.w     #0x0, w1
    1c82:	24 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE2_GLED = OFF; delay_by_nop(1); // turn off strike LEDs
    1c84:	da 22 a9    	bclr.b    0x2da, #0x1
    1c86:	10 00 20    	mov.w     #0x1, w0
    1c88:	01 00 20    	mov.w     #0x0, w1
    1c8a:	20 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
        STRIKE3_GLED = OFF; delay_by_nop(1);
    1c8c:	ea 62 a9    	bclr.b    0x2ea, #0x3
    1c8e:	10 00 20    	mov.w     #0x1, w0
    1c90:	01 00 20    	mov.w     #0x0, w1
    1c92:	1c 03 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>

00001c94 <.L61>:
    }
}
    1c94:	00 80 fa    	ulnk      
    1c96:	00 00 06    	return    

00001c98 <_dispSeconds>:

// HELPER FUNCTIONS ************************************************************

// Display a seconds variable in minutes and seconds on the seven segment
void dispSeconds(uint16_t seconds) {
    1c98:	06 00 fa    	lnk       #0x6
    1c9a:	20 07 98    	mov.w     w0, [w14+4]
    // Turn seconds into minutes and seconds
    uint16_t minutes = seconds / 60;
    1c9c:	ae 00 90    	mov.w     [w14+4], w1
    1c9e:	90 88 28    	mov.w     #0x8889, w0
    1ca0:	00 08 b8    	mul.uu    w1, w0, w0
    1ca2:	45 08 de    	lsr.w     w1, #0x5, w0
    1ca4:	00 0f 78    	mov.w     w0, [w14]
    uint8_t displaySeconds = seconds % 60;
    1ca6:	2e 01 90    	mov.w     [w14+4], w2
    1ca8:	90 88 28    	mov.w     #0x8889, w0
    1caa:	00 10 b8    	mul.uu    w2, w0, w0
    1cac:	45 08 de    	lsr.w     w1, #0x5, w0
    1cae:	c1 03 20    	mov.w     #0x3c, w1
    1cb0:	01 80 b9    	mul.ss    w0, w1, w0
    1cb2:	00 00 78    	mov.w     w0, w0
    1cb4:	00 00 51    	sub.w     w2, w0, w0
    1cb6:	20 47 98    	mov.b     w0, [w14+2]
    sevseg_writeDigitNum(&matrix, 0, minutes / 10, 0);
    1cb8:	9e 00 78    	mov.w     [w14], w1
    1cba:	d0 cc 2c    	mov.w     #0xcccd, w0
    1cbc:	00 08 b8    	mul.uu    w1, w0, w0
    1cbe:	43 08 de    	lsr.w     w1, #0x3, w0
    1cc0:	00 40 78    	mov.b     w0, w0
    1cc2:	80 41 eb    	clr.b     w3
    1cc4:	00 41 78    	mov.b     w0, w2
    1cc6:	80 40 eb    	clr.b     w1
    1cc8:	e0 80 20    	mov.w     #0x80e, w0
    1cca:	9f 01 07    	rcall     0x200a <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 1, minutes % 10, 0);
    1ccc:	1e 01 78    	mov.w     [w14], w2
    1cce:	d0 cc 2c    	mov.w     #0xcccd, w0
    1cd0:	00 10 b8    	mul.uu    w2, w0, w0
    1cd2:	43 08 de    	lsr.w     w1, #0x3, w0
    1cd4:	6a 00 b9    	mul.su    w0, #0xa, w0
    1cd6:	00 00 78    	mov.w     w0, w0
    1cd8:	00 00 51    	sub.w     w2, w0, w0
    1cda:	00 40 78    	mov.b     w0, w0
    1cdc:	80 41 eb    	clr.b     w3
    1cde:	00 41 78    	mov.b     w0, w2
    1ce0:	11 c0 b3    	mov.b     #0x1, w1
    1ce2:	e0 80 20    	mov.w     #0x80e, w0
    1ce4:	92 01 07    	rcall     0x200a <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_drawColon(&matrix, 1); // Times are supposed to have a colon I guess
    1ce6:	11 c0 b3    	mov.b     #0x1, w1
    1ce8:	e0 80 20    	mov.w     #0x80e, w0
    1cea:	ab 01 07    	rcall     0x2042 <_sevseg_drawColon> <.LFB12> <.LFE11>
    sevseg_writeDigitNum(&matrix, 3, (displaySeconds / 10) % 10, 0);
    1cec:	2e 40 90    	mov.b     [w14+2], w0
    1cee:	80 80 fb    	ze        w0, w1
    1cf0:	d0 cc 2c    	mov.w     #0xcccd, w0
    1cf2:	00 08 b8    	mul.uu    w1, w0, w0
    1cf4:	43 08 de    	lsr.w     w1, #0x3, w0
    1cf6:	00 40 78    	mov.b     w0, w0
    1cf8:	00 81 fb    	ze        w0, w2
    1cfa:	d0 cc 2c    	mov.w     #0xcccd, w0
    1cfc:	00 10 b8    	mul.uu    w2, w0, w0
    1cfe:	43 08 de    	lsr.w     w1, #0x3, w0
    1d00:	6a 00 b9    	mul.su    w0, #0xa, w0
    1d02:	00 00 78    	mov.w     w0, w0
    1d04:	00 00 51    	sub.w     w2, w0, w0
    1d06:	00 40 78    	mov.b     w0, w0
    1d08:	80 41 eb    	clr.b     w3
    1d0a:	00 41 78    	mov.b     w0, w2
    1d0c:	31 c0 b3    	mov.b     #0x3, w1
    1d0e:	e0 80 20    	mov.w     #0x80e, w0
    1d10:	7c 01 07    	rcall     0x200a <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 4, displaySeconds % 10, 0);
    1d12:	2e 40 90    	mov.b     [w14+2], w0
    1d14:	00 81 fb    	ze        w0, w2
    1d16:	d0 cc 2c    	mov.w     #0xcccd, w0
    1d18:	00 10 b8    	mul.uu    w2, w0, w0
    1d1a:	43 08 de    	lsr.w     w1, #0x3, w0
    1d1c:	6a 00 b9    	mul.su    w0, #0xa, w0
    1d1e:	00 00 78    	mov.w     w0, w0
    1d20:	00 00 51    	sub.w     w2, w0, w0
    1d22:	00 40 78    	mov.b     w0, w0
    1d24:	80 41 eb    	clr.b     w3
    1d26:	00 41 78    	mov.b     w0, w2
    1d28:	41 c0 b3    	mov.b     #0x4, w1
    1d2a:	e0 80 20    	mov.w     #0x80e, w0
    1d2c:	6e 01 07    	rcall     0x200a <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

    led_writeDisplay((_ADAFRUIT_LED*)&matrix.super); //Don't forget to actually write the data!
    1d2e:	e0 80 20    	mov.w     #0x80e, w0
    1d30:	5d 00 07    	rcall     0x1dec <_led_writeDisplay> <.LFB3> <.LFE2>
}
    1d32:	00 80 fa    	ulnk      
    1d34:	00 00 06    	return    

00001d36 <_drawOnce>:

// Draw 1234 on the seven segment
void drawOnce(void) {
    1d36:	00 00 fa    	lnk       #0x0
    sevseg_writeDigitNum(&matrix, 0, 1, 0);
    1d38:	80 41 eb    	clr.b     w3
    1d3a:	12 c0 b3    	mov.b     #0x1, w2
    1d3c:	80 40 eb    	clr.b     w1
    1d3e:	e0 80 20    	mov.w     #0x80e, w0
    1d40:	64 01 07    	rcall     0x200a <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 1, 2, 0);
    1d42:	80 41 eb    	clr.b     w3
    1d44:	22 c0 b3    	mov.b     #0x2, w2
    1d46:	11 c0 b3    	mov.b     #0x1, w1
    1d48:	e0 80 20    	mov.w     #0x80e, w0
    1d4a:	5f 01 07    	rcall     0x200a <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 3, 3, 0);
    1d4c:	80 41 eb    	clr.b     w3
    1d4e:	32 c0 b3    	mov.b     #0x3, w2
    1d50:	31 c0 b3    	mov.b     #0x3, w1
    1d52:	e0 80 20    	mov.w     #0x80e, w0
    1d54:	5a 01 07    	rcall     0x200a <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    sevseg_writeDigitNum(&matrix, 4, 4, 0);
    1d56:	80 41 eb    	clr.b     w3
    1d58:	42 c0 b3    	mov.b     #0x4, w2
    1d5a:	41 c0 b3    	mov.b     #0x4, w1
    1d5c:	e0 80 20    	mov.w     #0x80e, w0
    1d5e:	55 01 07    	rcall     0x200a <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    led_writeDisplay((_ADAFRUIT_LED*)&matrix.super);
    1d60:	e0 80 20    	mov.w     #0x80e, w0
    1d62:	44 00 07    	rcall     0x1dec <_led_writeDisplay> <.LFB3> <.LFE2>
}
    1d64:	00 80 fa    	ulnk      
    1d66:	00 00 06    	return    

00001d68 <_led_begin>:

};


void led_begin(_ADAFRUIT_LED* ptr, uint8_t addr){
    1d68:	04 00 fa    	lnk       #0x4
    1d6a:	00 0f 78    	mov.w     w0, [w14]
    1d6c:	21 47 98    	mov.b     w1, [w14+2]
  ptr->i2c_addr = addr;
    1d6e:	1e 00 78    	mov.w     [w14], w0
    1d70:	ae 40 90    	mov.b     [w14+2], w1
    1d72:	01 50 98    	mov.b     w1, [w0+16]
  i2c_start();
    1d74:	cb 02 07    	rcall     0x230c <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1d76:	1e 00 78    	mov.w     [w14], w0
    1d78:	00 50 90    	mov.b     [w0+16], w0
    1d7a:	00 80 fb    	ze        w0, w0
    1d7c:	16 03 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(0x21); // turn on oscillator
    1d7e:	10 02 20    	mov.w     #0x21, w0
    1d80:	14 03 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1d82:	f8 02 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
  led_blinkRate((_ADAFRUIT_LED *)ptr, HT16K33_BLINK_OFF);
    1d84:	80 40 eb    	clr.b     w1
    1d86:	1e 00 78    	mov.w     [w14], w0
    1d88:	1a 00 07    	rcall     0x1dbe <_led_blinkRate> <.LFB2> <.LFE1>
  led_setBrightness((_ADAFRUIT_LED *)ptr,15); // set max brightness
    1d8a:	f1 c0 b3    	mov.b     #0xf, w1
    1d8c:	1e 00 78    	mov.w     [w14], w0
    1d8e:	02 00 07    	rcall     0x1d94 <_led_setBrightness> <.LFB1> <.LFE0>
}
    1d90:	00 80 fa    	ulnk      
    1d92:	00 00 06    	return    

00001d94 <_led_setBrightness>:

void led_setBrightness(_ADAFRUIT_LED* ptr, uint8_t b){
    1d94:	04 00 fa    	lnk       #0x4
    1d96:	00 0f 78    	mov.w     w0, [w14]
    1d98:	21 47 98    	mov.b     w1, [w14+2]
  if (b > 15) b = 15;
    1d9a:	2e 40 90    	mov.b     [w14+2], w0
    1d9c:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    1d9e:	02 00 36    	bra       LEU, 0x1da4 <.L3>
    1da0:	f0 c0 b3    	mov.b     #0xf, w0
    1da2:	20 47 98    	mov.b     w0, [w14+2]

00001da4 <.L3>:
  i2c_start();
    1da4:	b3 02 07    	rcall     0x230c <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1da6:	1e 00 78    	mov.w     [w14], w0
    1da8:	00 50 90    	mov.b     [w0+16], w0
    1daa:	00 80 fb    	ze        w0, w0
    1dac:	fe 02 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(HT16K33_CMD_BRIGHTNESS | b);
    1dae:	ae 40 90    	mov.b     [w14+2], w1
    1db0:	00 ce b3    	mov.b     #0xe0, w0
    1db2:	00 c0 70    	ior.b     w1, w0, w0
    1db4:	00 80 fb    	ze        w0, w0
    1db6:	f9 02 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1db8:	dd 02 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1dba:	00 80 fa    	ulnk      
    1dbc:	00 00 06    	return    

00001dbe <_led_blinkRate>:

void led_blinkRate(_ADAFRUIT_LED* ptr, uint8_t b){
    1dbe:	04 00 fa    	lnk       #0x4
    1dc0:	00 0f 78    	mov.w     w0, [w14]
    1dc2:	21 47 98    	mov.b     w1, [w14+2]
  i2c_start();
    1dc4:	a3 02 07    	rcall     0x230c <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1dc6:	1e 00 78    	mov.w     [w14], w0
    1dc8:	00 50 90    	mov.b     [w0+16], w0
    1dca:	00 80 fb    	ze        w0, w0
    1dcc:	ee 02 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
  if (b > 3) b = 0; // turn off if not sure
    1dce:	2e 40 90    	mov.b     [w14+2], w0
    1dd0:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    1dd2:	02 00 36    	bra       LEU, 0x1dd8 <.L5>
    1dd4:	00 40 eb    	clr.b     w0
    1dd6:	20 47 98    	mov.b     w0, [w14+2]

00001dd8 <.L5>:
  send_i2c_byte(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1));
    1dd8:	2e 40 90    	mov.b     [w14+2], w0
    1dda:	00 80 fb    	ze        w0, w0
    1ddc:	00 00 40    	add.w     w0, w0, w0
    1dde:	80 00 78    	mov.w     w0, w1
    1de0:	10 08 20    	mov.w     #0x81, w0
    1de2:	01 00 70    	ior.w     w0, w1, w0
    1de4:	e2 02 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1de6:	c6 02 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1de8:	00 80 fa    	ulnk      
    1dea:	00 00 06    	return    

00001dec <_led_writeDisplay>:

void led_writeDisplay(_ADAFRUIT_LED* ptr){
    1dec:	04 00 fa    	lnk       #0x4
    1dee:	10 07 98    	mov.w     w0, [w14+2]
  i2c_start();
    1df0:	8d 02 07    	rcall     0x230c <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1df2:	1e 00 90    	mov.w     [w14+2], w0
    1df4:	00 50 90    	mov.b     [w0+16], w0
    1df6:	00 80 fb    	ze        w0, w0
    1df8:	d8 02 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
	send_i2c_byte(0x00); // Start at address 0
    1dfa:	00 00 eb    	clr.w     w0
    1dfc:	d6 02 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
	uint8_t i;
  for (i=0; i<8; i++) {
    1dfe:	00 40 eb    	clr.b     w0
    1e00:	00 4f 78    	mov.b     w0, [w14]
    1e02:	0f 00 37    	bra       0x1e22 <.L7>

00001e04 <.L8>:
    send_i2c_byte(ptr->displaybuffer[i] & 0xFF);
    1e04:	1e 80 fb    	ze        [w14], w0
    1e06:	9e 00 90    	mov.w     [w14+2], w1
    1e08:	00 00 40    	add.w     w0, w0, w0
    1e0a:	61 00 78    	mov.w     [w1+w0], w0
    1e0c:	80 00 78    	mov.w     w0, w1
    1e0e:	f0 0f 20    	mov.w     #0xff, w0
    1e10:	00 80 60    	and.w     w1, w0, w0
    1e12:	cb 02 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ptr->displaybuffer[i] >> 8);
    1e14:	1e 80 fb    	ze        [w14], w0
    1e16:	9e 00 90    	mov.w     [w14+2], w1
    1e18:	00 00 40    	add.w     w0, w0, w0
    1e1a:	61 00 78    	mov.w     [w1+w0], w0
    1e1c:	48 00 de    	lsr.w     w0, #0x8, w0
    1e1e:	c5 02 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    1e20:	1e 4f e8    	inc.b     [w14], [w14]

00001e22 <.L7>:
    1e22:	1e 40 78    	mov.b     [w14], w0
    1e24:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    1e26:	ee ff 36    	bra       LEU, 0x1e04 <.L8>
  }
  reset_i2c_bus();
    1e28:	a5 02 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1e2a:	00 80 fa    	ulnk      
    1e2c:	00 00 06    	return    

00001e2e <_led_clear>:

void led_clear(_ADAFRUIT_LED* ptr){
    1e2e:	04 00 fa    	lnk       #0x4
    1e30:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
	for (i=0; i<8; i++) {
    1e32:	00 40 eb    	clr.b     w0
    1e34:	00 4f 78    	mov.b     w0, [w14]
    1e36:	07 00 37    	bra       0x1e46 <.L10>

00001e38 <.L11>:
    ptr->displaybuffer[i] = 0;
    1e38:	1e 80 fb    	ze        [w14], w0
    1e3a:	9e 00 90    	mov.w     [w14+2], w1
    1e3c:	00 00 40    	add.w     w0, w0, w0
    1e3e:	00 80 40    	add.w     w1, w0, w0
    1e40:	80 00 eb    	clr.w     w1
    1e42:	01 08 78    	mov.w     w1, [w0]
    1e44:	1e 4f e8    	inc.b     [w14], [w14]

00001e46 <.L10>:
    1e46:	1e 40 78    	mov.b     [w14], w0
    1e48:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    1e4a:	f6 ff 36    	bra       LEU, 0x1e38 <.L11>
  }
}
    1e4c:	00 80 fa    	ulnk      
    1e4e:	00 00 06    	return    

00001e50 <_alphanum_begin>:

// ALPHANUM ********************************************************************

void alphanum_begin(_ALPHANUM* ptr, uint8_t addr){
    1e50:	04 00 fa    	lnk       #0x4
    1e52:	00 0f 78    	mov.w     w0, [w14]
    1e54:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr); // Call super constructor
    1e56:	1e 00 78    	mov.w     [w14], w0
    1e58:	ae 40 90    	mov.b     [w14+2], w1
    1e5a:	86 ff 07    	rcall     0x1d68 <_led_begin> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
}
    1e5c:	00 80 fa    	ulnk      
    1e5e:	00 00 06    	return    

00001e60 <_alphanum_writeDigitRaw>:

void alphanum_writeDigitRaw(_ALPHANUM* ptr, uint8_t n, uint16_t bitmask){
    1e60:	06 00 fa    	lnk       #0x6
    1e62:	00 0f 78    	mov.w     w0, [w14]
    1e64:	21 47 98    	mov.b     w1, [w14+2]
    1e66:	22 07 98    	mov.w     w2, [w14+4]
  ptr->super.displaybuffer[n] = bitmask;
    1e68:	2e 40 90    	mov.b     [w14+2], w0
    1e6a:	00 80 fb    	ze        w0, w0
    1e6c:	9e 00 78    	mov.w     [w14], w1
    1e6e:	00 00 40    	add.w     w0, w0, w0
    1e70:	00 80 40    	add.w     w1, w0, w0
    1e72:	ae 00 90    	mov.w     [w14+4], w1
    1e74:	01 08 78    	mov.w     w1, [w0]
}
    1e76:	00 80 fa    	ulnk      
    1e78:	00 00 06    	return    

00001e7a <_alphanum_writeDigitAscii>:

void alphanum_writeDigitAscii(_ALPHANUM* ptr, uint8_t n, uint8_t ascii, uint8_t dot){
    1e7a:	08 00 fa    	lnk       #0x8
    1e7c:	10 07 98    	mov.w     w0, [w14+2]
    1e7e:	41 47 98    	mov.b     w1, [w14+4]
    1e80:	52 47 98    	mov.b     w2, [w14+5]
    1e82:	63 47 98    	mov.b     w3, [w14+6]
  uint16_t font = alphafonttable[ascii];
    1e84:	5e 40 90    	mov.b     [w14+5], w0
    1e86:	00 80 fb    	ze        w0, w0
    1e88:	80 00 40    	add.w     w0, w0, w1
    1e8a:	00 5c 29    	mov.w     #0x95c0, w0
    1e8c:	00 80 40    	add.w     w1, w0, w0
    1e8e:	10 0f 78    	mov.w     [w0], [w14]
  ptr->super.displaybuffer[n] = font;
    1e90:	4e 40 90    	mov.b     [w14+4], w0
    1e92:	00 80 fb    	ze        w0, w0
    1e94:	9e 00 90    	mov.w     [w14+2], w1
    1e96:	00 00 40    	add.w     w0, w0, w0
    1e98:	00 80 40    	add.w     w1, w0, w0
    1e9a:	1e 08 78    	mov.w     [w14], [w0]
  if (dot) ptr->super.displaybuffer[n] |= (1<<14);
    1e9c:	6e 40 90    	mov.b     [w14+6], w0
    1e9e:	00 04 e0    	cp0.b     w0
    1ea0:	0c 00 32    	bra       Z, 0x1eba <.L14>
    1ea2:	4e 40 90    	mov.b     [w14+4], w0
    1ea4:	00 80 fb    	ze        w0, w0
    1ea6:	ce 40 90    	mov.b     [w14+4], w1
    1ea8:	81 80 fb    	ze        w1, w1
    1eaa:	1e 01 90    	mov.w     [w14+2], w2
    1eac:	81 80 40    	add.w     w1, w1, w1
    1eae:	e2 80 78    	mov.w     [w2+w1], w1
    1eb0:	01 e0 a0    	bset.w    w1, #0xe
    1eb2:	1e 01 90    	mov.w     [w14+2], w2
    1eb4:	00 00 40    	add.w     w0, w0, w0
    1eb6:	00 00 41    	add.w     w2, w0, w0
    1eb8:	01 08 78    	mov.w     w1, [w0]

00001eba <.L14>:
}
    1eba:	00 80 fa    	ulnk      
    1ebc:	00 00 06    	return    

00001ebe <_bargraph_begin>:

// 24 BARGRAPH *****************************************************************

void bargraph_begin(_BARGRAPH* ptr, uint8_t addr){
    1ebe:	04 00 fa    	lnk       #0x4
    1ec0:	00 0f 78    	mov.w     w0, [w14]
    1ec2:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr);
    1ec4:	1e 00 78    	mov.w     [w14], w0
    1ec6:	ae 40 90    	mov.b     [w14+2], w1
    1ec8:	4f ff 07    	rcall     0x1d68 <_led_begin> <.L0> <.LFB0> <.LFE9> <.Letext0> <.Ltext0>
}
    1eca:	00 80 fa    	ulnk      
    1ecc:	00 00 06    	return    

00001ece <_bargraph_setBar>:

void bargraph_setBar(_BARGRAPH* ptr, uint8_t bar, uint8_t color){
    1ece:	08 00 fa    	lnk       #0x8
    1ed0:	20 07 98    	mov.w     w0, [w14+4]
    1ed2:	61 47 98    	mov.b     w1, [w14+6]
    1ed4:	72 47 98    	mov.b     w2, [w14+7]
  uint16_t a, c;

  if (bar < 12)
    1ed6:	6e 40 90    	mov.b     [w14+6], w0
    1ed8:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1eda:	07 00 3e    	bra       GTU, 0x1eea <.L18>
    c = bar / 4;
    1edc:	6e 40 90    	mov.b     [w14+6], w0
    1ede:	00 80 fb    	ze        w0, w0
    1ee0:	42 00 de    	lsr.w     w0, #0x2, w0
    1ee2:	00 40 78    	mov.b     w0, w0
    1ee4:	00 80 fb    	ze        w0, w0
    1ee6:	10 07 98    	mov.w     w0, [w14+2]
    1ee8:	08 00 37    	bra       0x1efa <.L19>

00001eea <.L18>:
  else
    c = (bar - 12) / 4;
    1eea:	6e 40 90    	mov.b     [w14+6], w0
    1eec:	00 80 fb    	ze        w0, w0
    1eee:	6c 00 50    	sub.w     w0, #0xc, w0
    1ef0:	00 00 e0    	cp0.w     w0
    1ef2:	01 00 3d    	bra       GE, 0x1ef6 <.L20>
    1ef4:	63 00 40    	add.w     w0, #0x3, w0

00001ef6 <.L20>:
    1ef6:	42 80 de    	asr.w     w0, #0x2, w0
    1ef8:	10 07 98    	mov.w     w0, [w14+2]

00001efa <.L19>:

  a = bar % 4;
    1efa:	6e 40 90    	mov.b     [w14+6], w0
    1efc:	00 80 fb    	ze        w0, w0
    1efe:	63 0f 60    	and.w     w0, #0x3, [w14]
  if (bar >= 12)
    1f00:	6e 40 90    	mov.b     [w14+6], w0
    1f02:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1f04:	02 00 36    	bra       LEU, 0x1f0a <.L21>
    a += 4;
    1f06:	9e 00 78    	mov.w     [w14], w1
    1f08:	64 8f 40    	add.w     w1, #0x4, [w14]

00001f0a <.L21>:

  //Serial.print("Ano = "); Serial.print(a); Serial.print(" Cath = "); Serial.println(c);
  if (color == LED_RED) {
    1f0a:	7e 40 90    	mov.b     [w14+7], w0
    1f0c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1f0e:	1d 00 3a    	bra       NZ, 0x1f4a <.L22>
    // Turn on red LED.
    ptr->super.displaybuffer[c] |= _BV(a);
    1f10:	ae 00 90    	mov.w     [w14+4], w1
    1f12:	1e 00 90    	mov.w     [w14+2], w0
    1f14:	00 00 40    	add.w     w0, w0, w0
    1f16:	e1 00 78    	mov.w     [w1+w0], w1
    1f18:	1e 00 78    	mov.w     [w14], w0
    1f1a:	12 00 20    	mov.w     #0x1, w2
    1f1c:	00 10 dd    	sl.w      w2, w0, w0
    1f1e:	81 00 70    	ior.w     w0, w1, w1
    1f20:	2e 01 90    	mov.w     [w14+4], w2
    1f22:	1e 00 90    	mov.w     [w14+2], w0
    1f24:	00 00 40    	add.w     w0, w0, w0
    1f26:	00 00 41    	add.w     w2, w0, w0
    1f28:	01 08 78    	mov.w     w1, [w0]
    // Turn off green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a+8);
    1f2a:	ae 00 90    	mov.w     [w14+4], w1
    1f2c:	1e 00 90    	mov.w     [w14+2], w0
    1f2e:	00 00 40    	add.w     w0, w0, w0
    1f30:	e1 00 78    	mov.w     [w1+w0], w1
    1f32:	1e 01 78    	mov.w     [w14], w2
    1f34:	68 00 41    	add.w     w2, #0x8, w0
    1f36:	12 00 20    	mov.w     #0x1, w2
    1f38:	00 10 dd    	sl.w      w2, w0, w0
    1f3a:	00 80 ea    	com.w     w0, w0
    1f3c:	80 80 60    	and.w     w1, w0, w1
    1f3e:	2e 01 90    	mov.w     [w14+4], w2
    1f40:	1e 00 90    	mov.w     [w14+2], w0
    1f42:	00 00 40    	add.w     w0, w0, w0
    1f44:	00 00 41    	add.w     w2, w0, w0
    1f46:	01 08 78    	mov.w     w1, [w0]
    1f48:	4c 00 37    	bra       0x1fe2 <.L17>

00001f4a <.L22>:
  } else if (color == LED_YELLOW) {
    1f4a:	7e 40 90    	mov.b     [w14+7], w0
    1f4c:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1f4e:	13 00 3a    	bra       NZ, 0x1f76 <.L24>
    // Turn on red and green LED.
    ptr->super.displaybuffer[c] |= _BV(a) | _BV(a+8);
    1f50:	ae 00 90    	mov.w     [w14+4], w1
    1f52:	1e 00 90    	mov.w     [w14+2], w0
    1f54:	00 00 40    	add.w     w0, w0, w0
    1f56:	e1 00 78    	mov.w     [w1+w0], w1
    1f58:	1e 00 78    	mov.w     [w14], w0
    1f5a:	12 00 20    	mov.w     #0x1, w2
    1f5c:	00 11 dd    	sl.w      w2, w0, w2
    1f5e:	9e 01 78    	mov.w     [w14], w3
    1f60:	68 80 41    	add.w     w3, #0x8, w0
    1f62:	13 00 20    	mov.w     #0x1, w3
    1f64:	00 18 dd    	sl.w      w3, w0, w0
    1f66:	02 00 70    	ior.w     w0, w2, w0
    1f68:	81 00 70    	ior.w     w0, w1, w1
    1f6a:	2e 01 90    	mov.w     [w14+4], w2
    1f6c:	1e 00 90    	mov.w     [w14+2], w0
    1f6e:	00 00 40    	add.w     w0, w0, w0
    1f70:	00 00 41    	add.w     w2, w0, w0
    1f72:	01 08 78    	mov.w     w1, [w0]
    1f74:	36 00 37    	bra       0x1fe2 <.L17>

00001f76 <.L24>:
  } else if (color == LED_OFF) {
    1f76:	7e 40 90    	mov.b     [w14+7], w0
    1f78:	00 04 e0    	cp0.b     w0
    1f7a:	14 00 3a    	bra       NZ, 0x1fa4 <.L25>
    // Turn off red and green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a) & ~_BV(a+8);
    1f7c:	ae 00 90    	mov.w     [w14+4], w1
    1f7e:	1e 00 90    	mov.w     [w14+2], w0
    1f80:	00 00 40    	add.w     w0, w0, w0
    1f82:	e1 00 78    	mov.w     [w1+w0], w1
    1f84:	1e 00 78    	mov.w     [w14], w0
    1f86:	12 00 20    	mov.w     #0x1, w2
    1f88:	00 11 dd    	sl.w      w2, w0, w2
    1f8a:	9e 01 78    	mov.w     [w14], w3
    1f8c:	68 80 41    	add.w     w3, #0x8, w0
    1f8e:	13 00 20    	mov.w     #0x1, w3
    1f90:	00 18 dd    	sl.w      w3, w0, w0
    1f92:	02 00 70    	ior.w     w0, w2, w0
    1f94:	00 80 ea    	com.w     w0, w0
    1f96:	80 80 60    	and.w     w1, w0, w1
    1f98:	2e 01 90    	mov.w     [w14+4], w2
    1f9a:	1e 00 90    	mov.w     [w14+2], w0
    1f9c:	00 00 40    	add.w     w0, w0, w0
    1f9e:	00 00 41    	add.w     w2, w0, w0
    1fa0:	01 08 78    	mov.w     w1, [w0]
    1fa2:	1f 00 37    	bra       0x1fe2 <.L17>

00001fa4 <.L25>:
  } else if (color == LED_GREEN) {
    1fa4:	7e 40 90    	mov.b     [w14+7], w0
    1fa6:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    1fa8:	1c 00 3a    	bra       NZ, 0x1fe2 <.L17>
    // Turn on green LED.
    ptr->super.displaybuffer[c] |= _BV(a+8);
    1faa:	ae 00 90    	mov.w     [w14+4], w1
    1fac:	1e 00 90    	mov.w     [w14+2], w0
    1fae:	00 00 40    	add.w     w0, w0, w0
    1fb0:	e1 00 78    	mov.w     [w1+w0], w1
    1fb2:	1e 01 78    	mov.w     [w14], w2
    1fb4:	68 00 41    	add.w     w2, #0x8, w0
    1fb6:	12 00 20    	mov.w     #0x1, w2
    1fb8:	00 10 dd    	sl.w      w2, w0, w0
    1fba:	81 00 70    	ior.w     w0, w1, w1
    1fbc:	2e 01 90    	mov.w     [w14+4], w2
    1fbe:	1e 00 90    	mov.w     [w14+2], w0
    1fc0:	00 00 40    	add.w     w0, w0, w0
    1fc2:	00 00 41    	add.w     w2, w0, w0
    1fc4:	01 08 78    	mov.w     w1, [w0]
    // Turn off red LED.
    ptr->super.displaybuffer[c] &= ~_BV(a);
    1fc6:	ae 00 90    	mov.w     [w14+4], w1
    1fc8:	1e 00 90    	mov.w     [w14+2], w0
    1fca:	00 00 40    	add.w     w0, w0, w0
    1fcc:	e1 00 78    	mov.w     [w1+w0], w1
    1fce:	1e 00 78    	mov.w     [w14], w0
    1fd0:	12 00 20    	mov.w     #0x1, w2
    1fd2:	00 10 dd    	sl.w      w2, w0, w0
    1fd4:	00 80 ea    	com.w     w0, w0
    1fd6:	80 80 60    	and.w     w1, w0, w1
    1fd8:	2e 01 90    	mov.w     [w14+4], w2
    1fda:	1e 00 90    	mov.w     [w14+2], w0
    1fdc:	00 00 40    	add.w     w0, w0, w0
    1fde:	00 00 41    	add.w     w2, w0, w0
    1fe0:	01 08 78    	mov.w     w1, [w0]

00001fe2 <.L17>:
  }
}
    1fe2:	00 80 fa    	ulnk      
    1fe4:	00 00 06    	return    

00001fe6 <_sevseg_writeDigitRaw>:

// 7SEGMENT ********************************************************************

// uint8_t write(_7SEGMENT* ptr, uint8_t c){
//
//   uint8_t r = 0;
//
//   if (c == '\n') ptr->position = 0;
//   if (c == '\r') ptr->position = 0;
//
//   if ((c >= '0') && (c <= '9')) {
//     sevseg_writeDigitNum(ptr, ptr->position, c-'0', 0);
//     r = 1;
//   }
//
//   ptr->position++;
//   if (ptr->position == 2) ptr->position++;
//
//   return r;
// }

void sevseg_writeDigitRaw(_7SEGMENT* ptr, uint8_t x, uint16_t bitmask){
    1fe6:	06 00 fa    	lnk       #0x6
    1fe8:	00 0f 78    	mov.w     w0, [w14]
    1fea:	21 47 98    	mov.b     w1, [w14+2]
    1fec:	22 07 98    	mov.w     w2, [w14+4]
  if (x > 4) return;
    1fee:	2e 40 90    	mov.b     [w14+2], w0
    1ff0:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1ff2:	08 00 3e    	bra       GTU, 0x2004 <.L29>
  ptr->super.displaybuffer[x] = bitmask;
    1ff4:	2e 40 90    	mov.b     [w14+2], w0
    1ff6:	00 80 fb    	ze        w0, w0
    1ff8:	9e 00 78    	mov.w     [w14], w1
    1ffa:	00 00 40    	add.w     w0, w0, w0
    1ffc:	00 80 40    	add.w     w1, w0, w0
    1ffe:	ae 00 90    	mov.w     [w14+4], w1
    2000:	01 08 78    	mov.w     w1, [w0]
    2002:	01 00 37    	bra       0x2006 <.L26>

00002004 <.L29>:
    2004:	00 00 00    	nop       

00002006 <.L26>:
}
    2006:	00 80 fa    	ulnk      
    2008:	00 00 06    	return    

0000200a <_sevseg_writeDigitNum>:

void sevseg_writeDigitNum(_7SEGMENT* ptr, uint8_t x, uint8_t num, uint8_t dot){
    200a:	08 00 fa    	lnk       #0x8
    200c:	10 07 98    	mov.w     w0, [w14+2]
    200e:	41 47 98    	mov.b     w1, [w14+4]
    2010:	52 47 98    	mov.b     w2, [w14+5]
    2012:	63 47 98    	mov.b     w3, [w14+6]
  if (x > 4) return;
    2014:	4e 40 90    	mov.b     [w14+4], w0
    2016:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    2018:	11 00 3e    	bra       GTU, 0x203c <.L33>
	uint16_t zero = 0x0000;
    201a:	00 00 eb    	clr.w     w0
    201c:	00 0f 78    	mov.w     w0, [w14]
  sevseg_writeDigitRaw(ptr, x, (numbertable[num] | (dot << 7)));
    201e:	5e 40 90    	mov.b     [w14+5], w0
    2020:	00 80 fb    	ze        w0, w0
    2022:	80 00 40    	add.w     w0, w0, w1
    2024:	c0 59 29    	mov.w     #0x959c, w0
    2026:	00 80 40    	add.w     w1, w0, w0
    2028:	90 00 78    	mov.w     [w0], w1
    202a:	6e 40 90    	mov.b     [w14+6], w0
    202c:	00 80 fb    	ze        w0, w0
    202e:	47 00 dd    	sl.w      w0, #0x7, w0
    2030:	01 00 70    	ior.w     w0, w1, w0
    2032:	00 01 78    	mov.w     w0, w2
    2034:	ce 40 90    	mov.b     [w14+4], w1
    2036:	1e 00 90    	mov.w     [w14+2], w0
    2038:	d6 ff 07    	rcall     0x1fe6 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    203a:	01 00 37    	bra       0x203e <.L30>

0000203c <.L33>:
    203c:	00 00 00    	nop       

0000203e <.L30>:
}
    203e:	00 80 fa    	ulnk      
    2040:	00 00 06    	return    

00002042 <_sevseg_drawColon>:

void sevseg_drawColon(_7SEGMENT* ptr, uint8_t state){
    2042:	04 00 fa    	lnk       #0x4
    2044:	00 0f 78    	mov.w     w0, [w14]
    2046:	21 47 98    	mov.b     w1, [w14+2]
  if (state)
    2048:	2e 40 90    	mov.b     [w14+2], w0
    204a:	00 04 e0    	cp0.b     w0
    204c:	04 00 32    	bra       Z, 0x2056 <.L35>
    ptr->super.displaybuffer[2] = 0x2;
    204e:	1e 00 78    	mov.w     [w14], w0
    2050:	21 00 20    	mov.w     #0x2, w1
    2052:	21 00 98    	mov.w     w1, [w0+4]
    2054:	03 00 37    	bra       0x205c <.L34>

00002056 <.L35>:
  else
    ptr->super.displaybuffer[2] = 0;
    2056:	1e 00 78    	mov.w     [w14], w0
    2058:	80 00 eb    	clr.w     w1
    205a:	21 00 98    	mov.w     w1, [w0+4]

0000205c <.L34>:
}
    205c:	00 80 fa    	ulnk      
    205e:	00 00 06    	return    

00002060 <_sevseg_printNumber>:

void sevseg_printNumber(_7SEGMENT* ptr, long n, uint8_t base){
    2060:	08 00 fa    	lnk       #0x8
    2062:	00 0f 78    	mov.w     w0, [w14]
    2064:	12 07 98    	mov.w     w2, [w14+2]
    2066:	23 07 98    	mov.w     w3, [w14+4]
    2068:	61 47 98    	mov.b     w1, [w14+6]
  sevseg_printFloat(ptr, n, 0, base);
    206a:	1e 00 90    	mov.w     [w14+2], w0
    206c:	ae 00 90    	mov.w     [w14+4], w1
    206e:	98 f9 07    	rcall     0x13a0 <___floatsisf>
    2070:	00 01 be    	mov.d     w0, w2
    2072:	6e 42 90    	mov.b     [w14+6], w4
    2074:	80 40 eb    	clr.b     w1
    2076:	1e 00 78    	mov.w     [w14], w0
    2078:	02 00 07    	rcall     0x207e <_sevseg_printFloat> <.LFB14> <.LFE13>
}
    207a:	00 80 fa    	ulnk      
    207c:	00 00 06    	return    

0000207e <_sevseg_printFloat>:

void sevseg_printFloat(_7SEGMENT* ptr, double n, uint8_t fracDigits, uint8_t base){
    207e:	1c 00 fa    	lnk       #0x1c
    2080:	88 1f 78    	mov.w     w8, [w15++]
    2082:	20 0f 98    	mov.w     w0, [w14+20]
    2084:	32 0f 98    	mov.w     w2, [w14+22]
    2086:	43 0f 98    	mov.w     w3, [w14+24]
    2088:	21 5f 98    	mov.b     w1, [w14+26]
    208a:	34 5f 98    	mov.b     w4, [w14+27]
  uint8_t numericDigits = 4;   // available digits on display
    208c:	40 c0 b3    	mov.b     #0x4, w0
    208e:	00 4f 78    	mov.b     w0, [w14]
  uint8_t isNegative = 0;  // true if the number is negative
    2090:	00 40 eb    	clr.b     w0
    2092:	10 47 98    	mov.b     w0, [w14+1]

  // is the number negative?
  if(n < 0) {
    2094:	18 c0 b3    	mov.b     #0x1, w8
    2096:	60 11 b8    	mul.uu    w2, #0x0, w2
    2098:	3e 08 90    	mov.w     [w14+22], w0
    209a:	ce 08 90    	mov.w     [w14+24], w1
    209c:	64 f9 07    	rcall     0x1366 <___eqsf2> <___lesf2> <___ltsf2>
    209e:	00 00 e0    	cp0.w     w0
    20a0:	01 00 35    	bra       LT, 0x20a4 <.L39>
    20a2:	00 44 eb    	clr.b     w8

000020a4 <.L39>:
    20a4:	08 04 e0    	cp0.b     w8
    20a6:	08 00 32    	bra       Z, 0x20b8 <.L40>
    isNegative = 1;  // need to draw sign later
    20a8:	10 c0 b3    	mov.b     #0x1, w0
    20aa:	10 47 98    	mov.b     w0, [w14+1]
    --numericDigits;    // the sign will take up one digit
    20ac:	1e 4f e9    	dec.b     [w14], [w14]
    n *= -1;            // pretend the number is positive
    20ae:	3e 08 90    	mov.w     [w14+22], w0
    20b0:	ce 08 90    	mov.w     [w14+24], w1
    20b2:	01 f0 a2    	btg.w     w1, #0xf
    20b4:	30 0f 98    	mov.w     w0, [w14+22]
    20b6:	41 0f 98    	mov.w     w1, [w14+24]

000020b8 <.L40>:
  }

  // calculate the factor required to shift all fractional digits
  // into the integer part of the number
  double toIntFactor = 1.0;
    20b8:	00 00 20    	mov.w     #0x0, w0
    20ba:	01 f8 23    	mov.w     #0x3f80, w1
    20bc:	10 07 98    	mov.w     w0, [w14+2]
    20be:	21 07 98    	mov.w     w1, [w14+4]
	int i = 0;
    20c0:	00 00 eb    	clr.w     w0
    20c2:	30 07 98    	mov.w     w0, [w14+6]
  for(i = 0; i < fracDigits; ++i) toIntFactor *= base;
    20c4:	00 00 eb    	clr.w     w0
    20c6:	30 07 98    	mov.w     w0, [w14+6]
    20c8:	0d 00 37    	bra       0x20e4 <.L41>

000020ca <.L42>:
    20ca:	3e 58 90    	mov.b     [w14+27], w0
    20cc:	00 80 fb    	ze        w0, w0
    20ce:	cf 80 de    	asr.w     w0, #0xf, w1
    20d0:	67 f9 07    	rcall     0x13a0 <___floatsisf>
    20d2:	00 01 be    	mov.d     w0, w2
    20d4:	1e 00 90    	mov.w     [w14+2], w0
    20d6:	ae 00 90    	mov.w     [w14+4], w1
    20d8:	b9 f9 07    	rcall     0x144c <___mulsf3>
    20da:	10 07 98    	mov.w     w0, [w14+2]
    20dc:	21 07 98    	mov.w     w1, [w14+4]
    20de:	3e 00 90    	mov.w     [w14+6], w0
    20e0:	00 00 e8    	inc.w     w0, w0
    20e2:	30 07 98    	mov.w     w0, [w14+6]

000020e4 <.L41>:
    20e4:	2e 58 90    	mov.b     [w14+26], w0
    20e6:	80 80 fb    	ze        w0, w1
    20e8:	3e 00 90    	mov.w     [w14+6], w0
    20ea:	80 8f 50    	sub.w     w1, w0, [w15]
    20ec:	ee ff 3c    	bra       GT, 0x20ca <.L42>

  // create integer containing digits to display by applying
  // shifting factor and rounding adjustment
  uint32_t displayNumber = n * toIntFactor + 0.5;
    20ee:	1e 01 90    	mov.w     [w14+2], w2
    20f0:	ae 01 90    	mov.w     [w14+4], w3
    20f2:	3e 08 90    	mov.w     [w14+22], w0
    20f4:	ce 08 90    	mov.w     [w14+24], w1
    20f6:	aa f9 07    	rcall     0x144c <___mulsf3>
    20f8:	02 00 20    	mov.w     #0x0, w2
    20fa:	03 f0 23    	mov.w     #0x3f00, w3
    20fc:	95 f8 07    	rcall     0x1228 <___addsf3>
    20fe:	35 f9 07    	rcall     0x136a <___fixunssfsi>
    2100:	40 07 98    	mov.w     w0, [w14+8]
    2102:	51 07 98    	mov.w     w1, [w14+10]

  // calculate upper bound on displayNumber given
  // available digits on display
  uint32_t tooBig = 1;
    2104:	10 00 20    	mov.w     #0x1, w0
    2106:	01 00 20    	mov.w     #0x0, w1
    2108:	60 07 98    	mov.w     w0, [w14+12]
    210a:	71 07 98    	mov.w     w1, [w14+14]
  for(i = 0; i < numericDigits; ++i) tooBig *= base;
    210c:	00 00 eb    	clr.w     w0
    210e:	30 07 98    	mov.w     w0, [w14+6]
    2110:	15 00 37    	bra       0x213c <.L43>

00002112 <.L44>:
    2112:	3e 58 90    	mov.b     [w14+27], w0
    2114:	00 80 fb    	ze        w0, w0
    2116:	80 00 eb    	clr.w     w1
    2118:	7e 01 90    	mov.w     [w14+14], w2
    211a:	00 91 b9    	mul.ss    w2, w0, w2
    211c:	02 01 78    	mov.w     w2, w2
    211e:	ee 01 90    	mov.w     [w14+12], w3
    2120:	01 9a b9    	mul.ss    w3, w1, w4
    2122:	84 01 78    	mov.w     w4, w3
    2124:	03 01 41    	add.w     w2, w3, w2
    2126:	ee 01 90    	mov.w     [w14+12], w3
    2128:	00 18 b8    	mul.uu    w3, w0, w0
    212a:	01 01 41    	add.w     w2, w1, w2
    212c:	82 00 78    	mov.w     w2, w1
    212e:	60 07 98    	mov.w     w0, [w14+12]
    2130:	71 07 98    	mov.w     w1, [w14+14]
    2132:	60 07 98    	mov.w     w0, [w14+12]
    2134:	71 07 98    	mov.w     w1, [w14+14]
    2136:	3e 00 90    	mov.w     [w14+6], w0
    2138:	00 00 e8    	inc.w     w0, w0
    213a:	30 07 98    	mov.w     w0, [w14+6]

0000213c <.L43>:
    213c:	9e 80 fb    	ze        [w14], w1
    213e:	3e 00 90    	mov.w     [w14+6], w0
    2140:	80 8f 50    	sub.w     w1, w0, [w15]
    2142:	e7 ff 3c    	bra       GT, 0x2112 <.L44>

  // if displayNumber is too large, try fewer fractional digits
  while(displayNumber >= tooBig) {
    2144:	18 00 37    	bra       0x2176 <.L45>

00002146 <.L46>:
    --fracDigits;
    2146:	2e 58 90    	mov.b     [w14+26], w0
    2148:	00 40 e9    	dec.b     w0, w0
    214a:	20 5f 98    	mov.b     w0, [w14+26]
    toIntFactor /= base;
    214c:	3e 58 90    	mov.b     [w14+27], w0
    214e:	00 80 fb    	ze        w0, w0
    2150:	cf 80 de    	asr.w     w0, #0xf, w1
    2152:	26 f9 07    	rcall     0x13a0 <___floatsisf>
    2154:	00 01 be    	mov.d     w0, w2
    2156:	1e 00 90    	mov.w     [w14+2], w0
    2158:	ae 00 90    	mov.w     [w14+4], w1
    215a:	c3 f8 07    	rcall     0x12e2 <___divsf3>
    215c:	10 07 98    	mov.w     w0, [w14+2]
    215e:	21 07 98    	mov.w     w1, [w14+4]
    displayNumber = n * toIntFactor + 0.5;
    2160:	1e 01 90    	mov.w     [w14+2], w2
    2162:	ae 01 90    	mov.w     [w14+4], w3
    2164:	3e 08 90    	mov.w     [w14+22], w0
    2166:	ce 08 90    	mov.w     [w14+24], w1
    2168:	71 f9 07    	rcall     0x144c <___mulsf3>
    216a:	02 00 20    	mov.w     #0x0, w2
    216c:	03 f0 23    	mov.w     #0x3f00, w3
    216e:	5c f8 07    	rcall     0x1228 <___addsf3>
    2170:	fc f8 07    	rcall     0x136a <___fixunssfsi>
    2172:	40 07 98    	mov.w     w0, [w14+8]
    2174:	51 07 98    	mov.w     w1, [w14+10]

00002176 <.L45>:
    2176:	4e 01 90    	mov.w     [w14+8], w2
    2178:	de 01 90    	mov.w     [w14+10], w3
    217a:	6e 00 90    	mov.w     [w14+12], w0
    217c:	fe 00 90    	mov.w     [w14+14], w1
    217e:	80 0f 51    	sub.w     w2, w0, [w15]
    2180:	81 8f 59    	subb.w    w3, w1, [w15]
    2182:	e1 ff 31    	bra       C, 0x2146 <.L46>
  }

  // did toIntFactor shift the decimal off the display?
  if (toIntFactor < 1) {
    2184:	18 c0 b3    	mov.b     #0x1, w8
    2186:	02 00 20    	mov.w     #0x0, w2
    2188:	03 f8 23    	mov.w     #0x3f80, w3
    218a:	1e 00 90    	mov.w     [w14+2], w0
    218c:	ae 00 90    	mov.w     [w14+4], w1
    218e:	eb f8 07    	rcall     0x1366 <___eqsf2> <___lesf2> <___ltsf2>
    2190:	00 00 e0    	cp0.w     w0
    2192:	01 00 35    	bra       LT, 0x2196 <.L47>
    2194:	00 44 eb    	clr.b     w8

00002196 <.L47>:
    2196:	08 04 e0    	cp0.b     w8
    2198:	03 00 32    	bra       Z, 0x21a0 <.L48> <.LBB2>
    sevseg_printError(ptr);
    219a:	2e 08 90    	mov.w     [w14+20], w0
    219c:	6c 00 07    	rcall     0x2276 <_sevseg_printError> <.LFB15> <.LFE14>
    219e:	68 00 37    	bra       0x2270 <.L38> <.LBE2>

000021a0 <.L48>:
  } else {
    // otherwise, display the number
    int8_t displayPos = 4;
    21a0:	40 c0 b3    	mov.b     #0x4, w0
    21a2:	00 57 98    	mov.b     w0, [w14+16]

    if (displayNumber)  //if displayNumber is not 0
    21a4:	4e 00 90    	mov.w     [w14+8], w0
    21a6:	de 00 90    	mov.w     [w14+10], w1
    21a8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    21aa:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    21ac:	41 00 32    	bra       Z, 0x2230 <.L50> <.LBE3>

000021ae <.LBB3>:
    {
			uint8_t i;
      for(i = 0; displayNumber || i <= fracDigits; ++i) {
    21ae:	00 40 eb    	clr.b     w0
    21b0:	10 57 98    	mov.b     w0, [w14+17]
    21b2:	34 00 37    	bra       0x221c <.L51>

000021b4 <.L55>:
        uint8_t displayDecimal = (fracDigits != 0 && i == fracDigits);
    21b4:	2e 58 90    	mov.b     [w14+26], w0
    21b6:	00 04 e0    	cp0.b     w0
    21b8:	06 00 32    	bra       Z, 0x21c6 <.L52>
    21ba:	9e 50 90    	mov.b     [w14+17], w1
    21bc:	2e 58 90    	mov.b     [w14+26], w0
    21be:	80 cf 50    	sub.b     w1, w0, [w15]
    21c0:	02 00 3a    	bra       NZ, 0x21c6 <.L52>
    21c2:	10 00 20    	mov.w     #0x1, w0
    21c4:	01 00 37    	bra       0x21c8 <.L53>

000021c6 <.L52>:
    21c6:	00 00 eb    	clr.w     w0

000021c8 <.L53>:
    21c8:	20 57 98    	mov.b     w0, [w14+18]
        sevseg_writeDigitNum(ptr, displayPos--, displayNumber % base, displayDecimal);
    21ca:	3e 58 90    	mov.b     [w14+27], w0
    21cc:	00 80 fb    	ze        w0, w0
    21ce:	80 00 eb    	clr.w     w1
    21d0:	4e 02 90    	mov.w     [w14+8], w4
    21d2:	de 02 90    	mov.w     [w14+10], w5
    21d4:	00 01 be    	mov.d     w0, w2
    21d6:	04 00 be    	mov.d     w4, w0
    21d8:	7d f9 07    	rcall     0x14d4 <___umodsi3>
    21da:	80 40 78    	mov.b     w0, w1
    21dc:	0e 50 90    	mov.b     [w14+16], w0
    21de:	0e 51 90    	mov.b     [w14+16], w2
    21e0:	02 41 e9    	dec.b     w2, w2
    21e2:	02 57 98    	mov.b     w2, [w14+16]
    21e4:	ae 51 90    	mov.b     [w14+18], w3
    21e6:	01 41 78    	mov.b     w1, w2
    21e8:	80 40 78    	mov.b     w0, w1
    21ea:	2e 08 90    	mov.w     [w14+20], w0
    21ec:	0e ff 07    	rcall     0x200a <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
        if(displayPos == 2) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    21ee:	0e 50 90    	mov.b     [w14+16], w0
    21f0:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    21f2:	08 00 3a    	bra       NZ, 0x2204 <.L54>
    21f4:	0e 50 90    	mov.b     [w14+16], w0
    21f6:	8e 50 90    	mov.b     [w14+16], w1
    21f8:	81 40 e9    	dec.b     w1, w1
    21fa:	01 57 98    	mov.b     w1, [w14+16]
    21fc:	00 01 eb    	clr.w     w2
    21fe:	80 40 78    	mov.b     w0, w1
    2200:	2e 08 90    	mov.w     [w14+20], w0
    2202:	f1 fe 07    	rcall     0x1fe6 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00002204 <.L54>:
        displayNumber /= base;
    2204:	3e 58 90    	mov.b     [w14+27], w0
    2206:	00 80 fb    	ze        w0, w0
    2208:	80 00 eb    	clr.w     w1
    220a:	00 01 be    	mov.d     w0, w2
    220c:	4e 00 90    	mov.w     [w14+8], w0
    220e:	de 00 90    	mov.w     [w14+10], w1
    2210:	51 f9 07    	rcall     0x14b4 <___udivsi3>
    2212:	40 07 98    	mov.w     w0, [w14+8]
    2214:	51 07 98    	mov.w     w1, [w14+10]

00002216 <.LBE4>:
    2216:	1e 50 90    	mov.b     [w14+17], w0
    2218:	00 40 e8    	inc.b     w0, w0
    221a:	10 57 98    	mov.b     w0, [w14+17]

0000221c <.L51>:
    221c:	4e 00 90    	mov.w     [w14+8], w0
    221e:	de 00 90    	mov.w     [w14+10], w1
    2220:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2222:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2224:	c7 ff 3a    	bra       NZ, 0x21b4 <.L55> <.LBB4>
    2226:	9e 50 90    	mov.b     [w14+17], w1
    2228:	2e 58 90    	mov.b     [w14+26], w0
    222a:	80 cf 50    	sub.b     w1, w0, [w15]
    222c:	c3 ff 36    	bra       LEU, 0x21b4 <.L55> <.LBB4>
    222e:	09 00 37    	bra       0x2242 <.L56>

00002230 <.L50>:
      }
    }
    else {
      sevseg_writeDigitNum(ptr, displayPos--, 0, 0);
    2230:	0e 50 90    	mov.b     [w14+16], w0
    2232:	8e 50 90    	mov.b     [w14+16], w1
    2234:	81 40 e9    	dec.b     w1, w1
    2236:	01 57 98    	mov.b     w1, [w14+16]
    2238:	80 41 eb    	clr.b     w3
    223a:	00 41 eb    	clr.b     w2
    223c:	80 40 78    	mov.b     w0, w1
    223e:	2e 08 90    	mov.w     [w14+20], w0
    2240:	e4 fe 07    	rcall     0x200a <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

00002242 <.L56>:
    }

    // display negative sign if negative
    if(isNegative) sevseg_writeDigitRaw(ptr, displayPos--, 0x40);
    2242:	1e 40 90    	mov.b     [w14+1], w0
    2244:	00 04 e0    	cp0.b     w0
    2246:	11 00 32    	bra       Z, 0x226a <.L58>
    2248:	0e 50 90    	mov.b     [w14+16], w0
    224a:	8e 50 90    	mov.b     [w14+16], w1
    224c:	81 40 e9    	dec.b     w1, w1
    224e:	01 57 98    	mov.b     w1, [w14+16]
    2250:	02 04 20    	mov.w     #0x40, w2
    2252:	80 40 78    	mov.b     w0, w1
    2254:	2e 08 90    	mov.w     [w14+20], w0
    2256:	c7 fe 07    	rcall     0x1fe6 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

    // clear remaining display positions
    while(displayPos >= 0) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    2258:	08 00 37    	bra       0x226a <.L58>

0000225a <.L59>:
    225a:	0e 50 90    	mov.b     [w14+16], w0
    225c:	8e 50 90    	mov.b     [w14+16], w1
    225e:	81 40 e9    	dec.b     w1, w1
    2260:	01 57 98    	mov.b     w1, [w14+16]
    2262:	00 01 eb    	clr.w     w2
    2264:	80 40 78    	mov.b     w0, w1
    2266:	2e 08 90    	mov.w     [w14+20], w0
    2268:	be fe 07    	rcall     0x1fe6 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

0000226a <.L58>:
    226a:	0e 50 90    	mov.b     [w14+16], w0
    226c:	00 04 e0    	cp0.b     w0
    226e:	f5 ff 3d    	bra       GE, 0x225a <.L59>

00002270 <.L38>:
  }
}
    2270:	4f 04 78    	mov.w     [--w15], w8
    2272:	00 80 fa    	ulnk      
    2274:	00 00 06    	return    

00002276 <_sevseg_printError>:

void sevseg_printError(_7SEGMENT* ptr){
    2276:	04 00 fa    	lnk       #0x4
    2278:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
  for(i = 0; i < SEVENSEG_DIGITS; ++i) {
    227a:	00 40 eb    	clr.b     w0
    227c:	00 4f 78    	mov.b     w0, [w14]
    227e:	0b 00 37    	bra       0x2296 <.L61>

00002280 <.L64>:
    sevseg_writeDigitRaw(ptr, i, (i == 2 ? 0x00 : 0x40));
    2280:	1e 40 78    	mov.b     [w14], w0
    2282:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    2284:	02 00 3a    	bra       NZ, 0x228a <.L62>
    2286:	00 00 eb    	clr.w     w0
    2288:	01 00 37    	bra       0x228c <.L63>

0000228a <.L62>:
    228a:	00 04 20    	mov.w     #0x40, w0

0000228c <.L63>:
    228c:	00 01 78    	mov.w     w0, w2
    228e:	9e 40 78    	mov.b     [w14], w1
    2290:	1e 00 90    	mov.w     [w14+2], w0
    2292:	a9 fe 07    	rcall     0x1fe6 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    2294:	1e 4f e8    	inc.b     [w14], [w14]

00002296 <.L61>:
    2296:	1e 40 78    	mov.b     [w14], w0
    2298:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    229a:	f2 ff 36    	bra       LEU, 0x2280 <.L64>
  }
}
    229c:	00 80 fa    	ulnk      
    229e:	00 00 06    	return    

000022a0 <_sevseg_writeColon>:


void sevseg_writeColon(_7SEGMENT* ptr){
    22a0:	02 00 fa    	lnk       #0x2
    22a2:	00 0f 78    	mov.w     w0, [w14]
  /*
  Wire.beginTransmission(i2c_addr);
  Wire.write((uint8_t)0x04);

  Wire.write(displaybuffer[2] & 0xFF);
  Wire.write(displaybuffer[2] >> 8);

  Wire.endTransmission();
  */
  i2c_start();
    22a4:	33 00 07    	rcall     0x230c <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->super.i2c_addr);
    22a6:	1e 00 78    	mov.w     [w14], w0
    22a8:	00 50 90    	mov.b     [w0+16], w0
    22aa:	00 80 fb    	ze        w0, w0
    22ac:	7e 00 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte((uint8_t)0x04); // start at address $02
    22ae:	40 00 20    	mov.w     #0x4, w0
    22b0:	7c 00 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] & 0xFF);
    22b2:	1e 00 78    	mov.w     [w14], w0
    22b4:	20 00 90    	mov.w     [w0+4], w0
    22b6:	80 00 78    	mov.w     w0, w1
    22b8:	f0 0f 20    	mov.w     #0xff, w0
    22ba:	00 80 60    	and.w     w1, w0, w0
    22bc:	76 00 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] >> 8);
    22be:	1e 00 78    	mov.w     [w14], w0
    22c0:	20 00 90    	mov.w     [w0+4], w0
    22c2:	48 00 de    	lsr.w     w0, #0x8, w0
    22c4:	72 00 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    22c6:	56 00 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    22c8:	00 80 fa    	ulnk      
    22ca:	00 00 06    	return    

000022cc <_delay_by_nop>:
    22cc:	08 00 fa    	lnk       #0x8
    22ce:	20 07 98    	mov.w     w0, [w14+4]
    22d0:	31 07 98    	mov.w     w1, [w14+6]
    22d2:	60 00 b8    	mul.uu    w0, #0x0, w0
    22d4:	00 8f be    	mov.d     w0, [w14]
    22d6:	05 00 37    	bra       0x22e2 <.L2>

000022d8 <.L3>:
    22d8:	00 00 00    	nop       
    22da:	12 00 20    	mov.w     #0x1, w2
    22dc:	03 00 20    	mov.w     #0x0, w3
    22de:	1e 0f 41    	add.w     w2, [w14], [w14]
    22e0:	5e 97 49    	addc.w    w3, [++w14], [w14--]

000022e2 <.L2>:
    22e2:	2e 00 90    	mov.w     [w14+4], w0
    22e4:	be 00 90    	mov.w     [w14+6], w1
    22e6:	1e 01 be    	mov.d     [w14], w2
    22e8:	80 0f 51    	sub.w     w2, w0, [w15]
    22ea:	81 8f 59    	subb.w    w3, w1, [w15]
    22ec:	f5 ff 39    	bra       NC, 0x22d8 <.L3>
    22ee:	00 80 fa    	ulnk      
    22f0:	00 00 06    	return    

000022f2 <_i2c_init>:
    22f2:	04 00 fa    	lnk       #0x4
    22f4:	10 07 98    	mov.w     w0, [w14+2]
    22f6:	1e 00 90    	mov.w     [w14+2], w0
    22f8:	a0 13 88    	mov.w     w0, 0x274
    22fa:	77 e2 a9    	bclr.b    0x277, #0x7
    22fc:	77 22 a8    	bset.b    0x277, #0x1
    22fe:	8e a0 a9    	bclr.b    0x8e, #0x5
    2300:	77 e2 a8    	bset.b    0x277, #0x7
    2302:	80 13 80    	mov.w     0x270, w0
    2304:	00 0f 78    	mov.w     w0, [w14]
    2306:	36 00 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
    2308:	00 80 fa    	ulnk      
    230a:	00 00 06    	return    

0000230c <_i2c_start>:
    230c:	02 00 fa    	lnk       #0x2
    230e:	00 00 eb    	clr.w     w0
    2310:	00 0f 78    	mov.w     w0, [w14]
    2312:	76 a2 a9    	bclr.b    0x276, #0x5
    2314:	a0 00 20    	mov.w     #0xa, w0
    2316:	01 00 20    	mov.w     #0x0, w1
    2318:	d9 ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    231a:	76 02 a8    	bset.b    0x276, #0x0
    231c:	00 00 00    	nop       
    231e:	07 00 37    	bra       0x232e <.L6>

00002320 <.L8>:
    2320:	10 00 20    	mov.w     #0x1, w0
    2322:	01 00 20    	mov.w     #0x0, w1
    2324:	d3 ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2326:	1e 0f e8    	inc.w     [w14], [w14]
    2328:	1e 00 78    	mov.w     [w14], w0
    232a:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    232c:	05 00 3c    	bra       GT, 0x2338 <.L9>

0000232e <.L6>:
    232e:	b0 13 80    	mov.w     0x276, w0
    2330:	61 00 60    	and.w     w0, #0x1, w0
    2332:	00 00 e0    	cp0.w     w0
    2334:	f5 ff 3a    	bra       NZ, 0x2320 <.L8>
    2336:	01 00 37    	bra       0x233a <.L7>

00002338 <.L9>:
    2338:	00 00 00    	nop       

0000233a <.L7>:
    233a:	20 00 20    	mov.w     #0x2, w0
    233c:	01 00 20    	mov.w     #0x0, w1
    233e:	c6 ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2340:	00 80 fa    	ulnk      
    2342:	00 00 06    	return    

00002344 <_i2c_restart>:
    2344:	02 00 fa    	lnk       #0x2
    2346:	00 00 eb    	clr.w     w0
    2348:	00 0f 78    	mov.w     w0, [w14]
    234a:	76 22 a8    	bset.b    0x276, #0x1
    234c:	00 00 00    	nop       
    234e:	07 00 37    	bra       0x235e <.L11>

00002350 <.L13>:
    2350:	10 00 20    	mov.w     #0x1, w0
    2352:	01 00 20    	mov.w     #0x0, w1
    2354:	bb ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2356:	1e 0f e8    	inc.w     [w14], [w14]
    2358:	1e 00 78    	mov.w     [w14], w0
    235a:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    235c:	05 00 3c    	bra       GT, 0x2368 <.L14>

0000235e <.L11>:
    235e:	b0 13 80    	mov.w     0x276, w0
    2360:	62 00 60    	and.w     w0, #0x2, w0
    2362:	00 00 e0    	cp0.w     w0
    2364:	f5 ff 3a    	bra       NZ, 0x2350 <.L13>
    2366:	01 00 37    	bra       0x236a <.L12>

00002368 <.L14>:
    2368:	00 00 00    	nop       

0000236a <.L12>:
    236a:	20 00 20    	mov.w     #0x2, w0
    236c:	01 00 20    	mov.w     #0x0, w1
    236e:	ae ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2370:	00 80 fa    	ulnk      
    2372:	00 00 06    	return    

00002374 <_reset_i2c_bus>:
    2374:	02 00 fa    	lnk       #0x2
    2376:	00 00 eb    	clr.w     w0
    2378:	00 0f 78    	mov.w     w0, [w14]
    237a:	76 42 a8    	bset.b    0x276, #0x2
    237c:	07 00 37    	bra       0x238c <.L16>

0000237e <.L18>:
    237e:	10 00 20    	mov.w     #0x1, w0
    2380:	01 00 20    	mov.w     #0x0, w1
    2382:	a4 ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2384:	1e 0f e8    	inc.w     [w14], [w14]
    2386:	1e 00 78    	mov.w     [w14], w0
    2388:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    238a:	05 00 3c    	bra       GT, 0x2396 <.L19>

0000238c <.L16>:
    238c:	b0 13 80    	mov.w     0x276, w0
    238e:	64 00 60    	and.w     w0, #0x4, w0
    2390:	00 00 e0    	cp0.w     w0
    2392:	f5 ff 3a    	bra       NZ, 0x237e <.L18>
    2394:	01 00 37    	bra       0x2398 <.L17>

00002396 <.L19>:
    2396:	00 00 00    	nop       

00002398 <.L17>:
    2398:	76 62 a9    	bclr.b    0x276, #0x3
    239a:	8e a0 a9    	bclr.b    0x8e, #0x5
    239c:	78 e2 a9    	bclr.b    0x278, #0x7
    239e:	79 42 a9    	bclr.b    0x279, #0x2
    23a0:	40 01 20    	mov.w     #0x14, w0
    23a2:	01 00 20    	mov.w     #0x0, w1
    23a4:	93 ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    23a6:	00 80 fa    	ulnk      
    23a8:	00 00 06    	return    

000023aa <_send_i2c_byte>:
    23aa:	04 00 fa    	lnk       #0x4
    23ac:	10 07 98    	mov.w     w0, [w14+2]
    23ae:	00 00 00    	nop       

000023b0 <.L21>:
    23b0:	c0 13 80    	mov.w     0x278, w0
    23b2:	61 00 60    	and.w     w0, #0x1, w0
    23b4:	00 00 e0    	cp0.w     w0
    23b6:	fc ff 3a    	bra       NZ, 0x23b0 <.L21>
    23b8:	8e a0 a9    	bclr.b    0x8e, #0x5
    23ba:	1e 00 90    	mov.w     [w14+2], w0
    23bc:	90 13 88    	mov.w     w0, 0x272
    23be:	00 00 eb    	clr.w     w0
    23c0:	00 0f 78    	mov.w     w0, [w14]
    23c2:	09 00 37    	bra       0x23d6 <.L22>

000023c4 <.L25>:
    23c4:	c1 13 80    	mov.w     0x278, w1
    23c6:	00 00 24    	mov.w     #0x4000, w0
    23c8:	00 80 60    	and.w     w1, w0, w0
    23ca:	00 00 e0    	cp0.w     w0
    23cc:	09 00 32    	bra       Z, 0x23e0 <.L29>
    23ce:	10 00 20    	mov.w     #0x1, w0
    23d0:	01 00 20    	mov.w     #0x0, w1
    23d2:	7c ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    23d4:	1e 0f e8    	inc.w     [w14], [w14]

000023d6 <.L22>:
    23d6:	30 1f 20    	mov.w     #0x1f3, w0
    23d8:	9e 00 78    	mov.w     [w14], w1
    23da:	80 8f 50    	sub.w     w1, w0, [w15]
    23dc:	f3 ff 34    	bra       LE, 0x23c4 <.L25>
    23de:	01 00 37    	bra       0x23e2 <.L24>

000023e0 <.L29>:
    23e0:	00 00 00    	nop       

000023e2 <.L24>:
    23e2:	40 1f 20    	mov.w     #0x1f4, w0
    23e4:	9e 00 78    	mov.w     [w14], w1
    23e6:	80 8f 50    	sub.w     w1, w0, [w15]
    23e8:	02 00 3a    	bra       NZ, 0x23ee <.L26>
    23ea:	10 c0 b3    	mov.b     #0x1, w0
    23ec:	0c 00 37    	bra       0x2406 <.L27>

000023ee <.L26>:
    23ee:	c1 13 80    	mov.w     0x278, w1
    23f0:	00 00 28    	mov.w     #0x8000, w0
    23f2:	00 80 60    	and.w     w1, w0, w0
    23f4:	00 00 e0    	cp0.w     w0
    23f6:	03 00 32    	bra       Z, 0x23fe <.L28>
    23f8:	bd ff 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
    23fa:	10 c0 b3    	mov.b     #0x1, w0
    23fc:	04 00 37    	bra       0x2406 <.L27>

000023fe <.L28>:
    23fe:	20 00 20    	mov.w     #0x2, w0
    2400:	01 00 20    	mov.w     #0x0, w1
    2402:	64 ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2404:	00 40 eb    	clr.b     w0

00002406 <.L27>:
    2406:	00 80 fa    	ulnk      
    2408:	00 00 06    	return    

0000240a <_i2c_read>:
    240a:	04 00 fa    	lnk       #0x4
    240c:	00 00 eb    	clr.w     w0
    240e:	00 0f 78    	mov.w     w0, [w14]
    2410:	00 40 eb    	clr.b     w0
    2412:	20 47 98    	mov.b     w0, [w14+2]
    2414:	76 62 a8    	bset.b    0x276, #0x3
    2416:	05 00 37    	bra       0x2422 <.L31>

00002418 <.L33>:
    2418:	1e 0f e8    	inc.w     [w14], [w14]
    241a:	00 7d 20    	mov.w     #0x7d0, w0
    241c:	9e 00 78    	mov.w     [w14], w1
    241e:	80 8f 50    	sub.w     w1, w0, [w15]
    2420:	05 00 3c    	bra       GT, 0x242c <.L34>

00002422 <.L31>:
    2422:	c0 13 80    	mov.w     0x278, w0
    2424:	62 00 60    	and.w     w0, #0x2, w0
    2426:	00 00 e0    	cp0.w     w0
    2428:	f7 ff 32    	bra       Z, 0x2418 <.L33>
    242a:	01 00 37    	bra       0x242e <.L32>

0000242c <.L34>:
    242c:	00 00 00    	nop       

0000242e <.L32>:
    242e:	80 13 80    	mov.w     0x270, w0
    2430:	20 47 98    	mov.b     w0, [w14+2]
    2432:	2e 40 90    	mov.b     [w14+2], w0
    2434:	00 80 fa    	ulnk      
    2436:	00 00 06    	return    

00002438 <_i2c_read_ack>:
    2438:	04 00 fa    	lnk       #0x4
    243a:	00 00 eb    	clr.w     w0
    243c:	00 0f 78    	mov.w     w0, [w14]
    243e:	00 40 eb    	clr.b     w0
    2440:	20 47 98    	mov.b     w0, [w14+2]
    2442:	76 62 a8    	bset.b    0x276, #0x3
    2444:	05 00 37    	bra       0x2450 <.L36>

00002446 <.L38>:
    2446:	1e 0f e8    	inc.w     [w14], [w14]
    2448:	00 7d 20    	mov.w     #0x7d0, w0
    244a:	9e 00 78    	mov.w     [w14], w1
    244c:	80 8f 50    	sub.w     w1, w0, [w15]
    244e:	05 00 3c    	bra       GT, 0x245a <.L39>

00002450 <.L36>:
    2450:	c0 13 80    	mov.w     0x278, w0
    2452:	62 00 60    	and.w     w0, #0x2, w0
    2454:	00 00 e0    	cp0.w     w0
    2456:	f7 ff 32    	bra       Z, 0x2446 <.L38>
    2458:	01 00 37    	bra       0x245c <.L37>

0000245a <.L39>:
    245a:	00 00 00    	nop       

0000245c <.L37>:
    245c:	80 13 80    	mov.w     0x270, w0
    245e:	20 47 98    	mov.b     w0, [w14+2]
    2460:	76 82 a8    	bset.b    0x276, #0x4
    2462:	a0 00 20    	mov.w     #0xa, w0
    2464:	01 00 20    	mov.w     #0x0, w1
    2466:	32 ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2468:	2e 40 90    	mov.b     [w14+2], w0
    246a:	00 80 fa    	ulnk      
    246c:	00 00 06    	return    

0000246e <_i2c_read_nack>:
    246e:	04 00 fa    	lnk       #0x4
    2470:	00 00 eb    	clr.w     w0
    2472:	00 0f 78    	mov.w     w0, [w14]
    2474:	00 40 eb    	clr.b     w0
    2476:	20 47 98    	mov.b     w0, [w14+2]
    2478:	76 62 a8    	bset.b    0x276, #0x3
    247a:	05 00 37    	bra       0x2486 <.L41>

0000247c <.L43>:
    247c:	1e 0f e8    	inc.w     [w14], [w14]
    247e:	00 7d 20    	mov.w     #0x7d0, w0
    2480:	9e 00 78    	mov.w     [w14], w1
    2482:	80 8f 50    	sub.w     w1, w0, [w15]
    2484:	05 00 3c    	bra       GT, 0x2490 <.L44>

00002486 <.L41>:
    2486:	c0 13 80    	mov.w     0x278, w0
    2488:	62 00 60    	and.w     w0, #0x2, w0
    248a:	00 00 e0    	cp0.w     w0
    248c:	f7 ff 32    	bra       Z, 0x247c <.L43>
    248e:	01 00 37    	bra       0x2492 <.L42>

00002490 <.L44>:
    2490:	00 00 00    	nop       

00002492 <.L42>:
    2492:	80 13 80    	mov.w     0x270, w0
    2494:	20 47 98    	mov.b     w0, [w14+2]
    2496:	76 a2 a8    	bset.b    0x276, #0x5
    2498:	76 82 a8    	bset.b    0x276, #0x4
    249a:	a0 00 20    	mov.w     #0xa, w0
    249c:	01 00 20    	mov.w     #0x0, w1
    249e:	16 ff 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    24a0:	2e 40 90    	mov.b     [w14+2], w0
    24a2:	00 80 fa    	ulnk      
    24a4:	00 00 06    	return    

000024a6 <_I2Cwrite>:
    24a6:	04 00 fa    	lnk       #0x4
    24a8:	00 4f 78    	mov.b     w0, [w14]
    24aa:	11 47 98    	mov.b     w1, [w14+1]
    24ac:	22 47 98    	mov.b     w2, [w14+2]
    24ae:	2e ff 07    	rcall     0x230c <_i2c_start> <.LFB2> <.LFE1>
    24b0:	1e 00 fb    	se        [w14], w0
    24b2:	80 00 78    	mov.w     w0, w1
    24b4:	e0 ff 2f    	mov.w     #0xfffe, w0
    24b6:	00 80 60    	and.w     w1, w0, w0
    24b8:	78 ff 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    24ba:	1e 40 90    	mov.b     [w14+1], w0
    24bc:	00 00 fb    	se        w0, w0
    24be:	75 ff 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    24c0:	2e 40 90    	mov.b     [w14+2], w0
    24c2:	00 00 fb    	se        w0, w0
    24c4:	72 ff 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    24c6:	56 ff 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
    24c8:	00 80 fa    	ulnk      
    24ca:	00 00 06    	return    

000024cc <_I2Cread>:
    24cc:	04 00 fa    	lnk       #0x4
    24ce:	20 47 98    	mov.b     w0, [w14+2]
    24d0:	31 47 98    	mov.b     w1, [w14+3]
    24d2:	1c ff 07    	rcall     0x230c <_i2c_start> <.LFB2> <.LFE1>
    24d4:	2e 40 90    	mov.b     [w14+2], w0
    24d6:	00 00 fb    	se        w0, w0
    24d8:	68 ff 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    24da:	3e 40 90    	mov.b     [w14+3], w0
    24dc:	00 00 fb    	se        w0, w0
    24de:	65 ff 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    24e0:	a0 00 20    	mov.w     #0xa, w0
    24e2:	01 00 20    	mov.w     #0x0, w1
    24e4:	f3 fe 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    24e6:	2e ff 07    	rcall     0x2344 <_i2c_restart> <.LFB3> <.LFE2>
    24e8:	2e 40 90    	mov.b     [w14+2], w0
    24ea:	00 04 a0    	bset.b    w0, #0x0
    24ec:	00 00 fb    	se        w0, w0
    24ee:	5d ff 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    24f0:	8c ff 07    	rcall     0x240a <_i2c_read> <.LFB6> <.LFE5>
    24f2:	00 4f 78    	mov.b     w0, [w14]
    24f4:	3f ff 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
    24f6:	1e 40 78    	mov.b     [w14], w0
    24f8:	00 80 fa    	ulnk      
    24fa:	00 00 06    	return    

000024fc <_I2Cpoll>:
    24fc:	04 00 fa    	lnk       #0x4
    24fe:	20 47 98    	mov.b     w0, [w14+2]
    2500:	00 40 eb    	clr.b     w0
    2502:	00 4f 78    	mov.b     w0, [w14]
    2504:	03 ff 07    	rcall     0x230c <_i2c_start> <.LFB2> <.LFE1>
    2506:	2e 40 90    	mov.b     [w14+2], w0
    2508:	00 00 fb    	se        w0, w0
    250a:	80 00 78    	mov.w     w0, w1
    250c:	e0 ff 2f    	mov.w     #0xfffe, w0
    250e:	00 80 60    	and.w     w1, w0, w0
    2510:	4c ff 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    2512:	00 4f 78    	mov.b     w0, [w14]
    2514:	2f ff 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
    2516:	1e 40 78    	mov.b     [w14], w0
    2518:	00 04 e0    	cp0.b     w0
    251a:	02 00 3a    	bra       NZ, 0x2520 <.L48>
    251c:	10 c0 b3    	mov.b     #0x1, w0
    251e:	01 00 37    	bra       0x2522 <.L49>

00002520 <.L48>:
    2520:	00 40 eb    	clr.b     w0

00002522 <.L49>:
    2522:	00 80 fa    	ulnk      
    2524:	00 00 06    	return    

00002526 <_I2Cwritearray>:
    2526:	08 00 fa    	lnk       #0x8
    2528:	20 47 98    	mov.b     w0, [w14+2]
    252a:	21 07 98    	mov.w     w1, [w14+4]
    252c:	62 47 98    	mov.b     w2, [w14+6]
    252e:	00 40 eb    	clr.b     w0
    2530:	00 4f 78    	mov.b     w0, [w14]
    2532:	ec fe 07    	rcall     0x230c <_i2c_start> <.LFB2> <.LFE1>
    2534:	2e 40 90    	mov.b     [w14+2], w0
    2536:	00 00 fb    	se        w0, w0
    2538:	80 00 78    	mov.w     w0, w1
    253a:	e0 ff 2f    	mov.w     #0xfffe, w0
    253c:	00 80 60    	and.w     w1, w0, w0
    253e:	35 ff 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    2540:	00 4f 78    	mov.b     w0, [w14]
    2542:	00 40 eb    	clr.b     w0
    2544:	10 47 98    	mov.b     w0, [w14+1]
    2546:	0d 00 37    	bra       0x2562 <.L51>

00002548 <.L52>:
    2548:	1e 40 90    	mov.b     [w14+1], w0
    254a:	00 80 fb    	ze        w0, w0
    254c:	ae 00 90    	mov.w     [w14+4], w1
    254e:	00 80 40    	add.w     w1, w0, w0
    2550:	10 40 78    	mov.b     [w0], w0
    2552:	00 00 fb    	se        w0, w0
    2554:	2a ff 07    	rcall     0x23aa <_send_i2c_byte> <.LFB5> <.LFE4>
    2556:	9e 40 78    	mov.b     [w14], w1
    2558:	01 40 70    	ior.b     w0, w1, w0
    255a:	00 4f 78    	mov.b     w0, [w14]
    255c:	1e 40 90    	mov.b     [w14+1], w0
    255e:	00 40 e8    	inc.b     w0, w0
    2560:	10 47 98    	mov.b     w0, [w14+1]

00002562 <.L51>:
    2562:	9e 40 90    	mov.b     [w14+1], w1
    2564:	6e 40 90    	mov.b     [w14+6], w0
    2566:	80 cf 50    	sub.b     w1, w0, [w15]
    2568:	ef ff 39    	bra       NC, 0x2548 <.L52>
    256a:	04 ff 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
    256c:	1e 40 78    	mov.b     [w14], w0
    256e:	00 80 fa    	ulnk      
    2570:	00 00 06    	return    

00002572 <_i2c2_init>:
    2572:	04 00 fa    	lnk       #0x4
    2574:	10 07 98    	mov.w     w0, [w14+2]
    2576:	1e 00 90    	mov.w     [w14+2], w0
    2578:	a0 10 88    	mov.w     w0, 0x214
    257a:	17 e2 a9    	bclr.b    0x217, #0x7
    257c:	17 22 a8    	bset.b    0x217, #0x1
    257e:	8a 40 a9    	bclr.b    0x8a, #0x2
    2580:	17 e2 a8    	bset.b    0x217, #0x7
    2582:	80 10 80    	mov.w     0x210, w0
    2584:	00 0f 78    	mov.w     w0, [w14]
    2586:	f6 fe 07    	rcall     0x2374 <_reset_i2c_bus> <.LFB4> <.LFE3>
    2588:	00 80 fa    	ulnk      
    258a:	00 00 06    	return    

0000258c <_i2c2_start>:
    258c:	02 00 fa    	lnk       #0x2
    258e:	00 00 eb    	clr.w     w0
    2590:	00 0f 78    	mov.w     w0, [w14]
    2592:	16 a2 a9    	bclr.b    0x216, #0x5
    2594:	a0 00 20    	mov.w     #0xa, w0
    2596:	01 00 20    	mov.w     #0x0, w1
    2598:	99 fe 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    259a:	16 02 a8    	bset.b    0x216, #0x0
    259c:	00 00 00    	nop       
    259e:	07 00 37    	bra       0x25ae <.L55>

000025a0 <.L57>:
    25a0:	10 00 20    	mov.w     #0x1, w0
    25a2:	01 00 20    	mov.w     #0x0, w1
    25a4:	93 fe 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    25a6:	1e 0f e8    	inc.w     [w14], [w14]
    25a8:	1e 00 78    	mov.w     [w14], w0
    25aa:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    25ac:	05 00 3c    	bra       GT, 0x25b8 <.L58>

000025ae <.L55>:
    25ae:	b0 10 80    	mov.w     0x216, w0
    25b0:	61 00 60    	and.w     w0, #0x1, w0
    25b2:	00 00 e0    	cp0.w     w0
    25b4:	f5 ff 3a    	bra       NZ, 0x25a0 <.L57>
    25b6:	01 00 37    	bra       0x25ba <.L56>

000025b8 <.L58>:
    25b8:	00 00 00    	nop       

000025ba <.L56>:
    25ba:	20 00 20    	mov.w     #0x2, w0
    25bc:	01 00 20    	mov.w     #0x0, w1
    25be:	86 fe 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    25c0:	00 80 fa    	ulnk      
    25c2:	00 00 06    	return    

000025c4 <_i2c2_restart>:
    25c4:	02 00 fa    	lnk       #0x2
    25c6:	00 00 eb    	clr.w     w0
    25c8:	00 0f 78    	mov.w     w0, [w14]
    25ca:	16 22 a8    	bset.b    0x216, #0x1
    25cc:	00 00 00    	nop       
    25ce:	07 00 37    	bra       0x25de <.L60>

000025d0 <.L62>:
    25d0:	10 00 20    	mov.w     #0x1, w0
    25d2:	01 00 20    	mov.w     #0x0, w1
    25d4:	7b fe 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    25d6:	1e 0f e8    	inc.w     [w14], [w14]
    25d8:	1e 00 78    	mov.w     [w14], w0
    25da:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    25dc:	05 00 3c    	bra       GT, 0x25e8 <.L63>

000025de <.L60>:
    25de:	b0 10 80    	mov.w     0x216, w0
    25e0:	62 00 60    	and.w     w0, #0x2, w0
    25e2:	00 00 e0    	cp0.w     w0
    25e4:	f5 ff 3a    	bra       NZ, 0x25d0 <.L62>
    25e6:	01 00 37    	bra       0x25ea <.L61>

000025e8 <.L63>:
    25e8:	00 00 00    	nop       

000025ea <.L61>:
    25ea:	20 00 20    	mov.w     #0x2, w0
    25ec:	01 00 20    	mov.w     #0x0, w1
    25ee:	6e fe 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    25f0:	00 80 fa    	ulnk      
    25f2:	00 00 06    	return    

000025f4 <_reset_i2c2_bus>:
    25f4:	02 00 fa    	lnk       #0x2
    25f6:	00 00 eb    	clr.w     w0
    25f8:	00 0f 78    	mov.w     w0, [w14]
    25fa:	16 42 a8    	bset.b    0x216, #0x2
    25fc:	07 00 37    	bra       0x260c <.L65>

000025fe <.L67>:
    25fe:	10 00 20    	mov.w     #0x1, w0
    2600:	01 00 20    	mov.w     #0x0, w1
    2602:	64 fe 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2604:	1e 0f e8    	inc.w     [w14], [w14]
    2606:	1e 00 78    	mov.w     [w14], w0
    2608:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    260a:	05 00 3c    	bra       GT, 0x2616 <.L68>

0000260c <.L65>:
    260c:	b0 10 80    	mov.w     0x216, w0
    260e:	64 00 60    	and.w     w0, #0x4, w0
    2610:	00 00 e0    	cp0.w     w0
    2612:	f5 ff 3a    	bra       NZ, 0x25fe <.L67>
    2614:	01 00 37    	bra       0x2618 <.L66>

00002616 <.L68>:
    2616:	00 00 00    	nop       

00002618 <.L66>:
    2618:	16 62 a9    	bclr.b    0x216, #0x3
    261a:	8a 40 a9    	bclr.b    0x8a, #0x2
    261c:	18 e2 a9    	bclr.b    0x218, #0x7
    261e:	19 42 a9    	bclr.b    0x219, #0x2
    2620:	40 01 20    	mov.w     #0x14, w0
    2622:	01 00 20    	mov.w     #0x0, w1
    2624:	53 fe 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2626:	00 80 fa    	ulnk      
    2628:	00 00 06    	return    

0000262a <_send_i2c2_byte>:
    262a:	04 00 fa    	lnk       #0x4
    262c:	10 07 98    	mov.w     w0, [w14+2]
    262e:	00 00 00    	nop       

00002630 <.L70>:
    2630:	c0 10 80    	mov.w     0x218, w0
    2632:	61 00 60    	and.w     w0, #0x1, w0
    2634:	00 00 e0    	cp0.w     w0
    2636:	fc ff 3a    	bra       NZ, 0x2630 <.L70>
    2638:	8a 40 a9    	bclr.b    0x8a, #0x2
    263a:	1e 00 90    	mov.w     [w14+2], w0
    263c:	90 10 88    	mov.w     w0, 0x212
    263e:	00 00 eb    	clr.w     w0
    2640:	00 0f 78    	mov.w     w0, [w14]
    2642:	09 00 37    	bra       0x2656 <.L71>

00002644 <.L74>:
    2644:	c1 10 80    	mov.w     0x218, w1
    2646:	00 00 24    	mov.w     #0x4000, w0
    2648:	00 80 60    	and.w     w1, w0, w0
    264a:	00 00 e0    	cp0.w     w0
    264c:	09 00 32    	bra       Z, 0x2660 <.L78>
    264e:	10 00 20    	mov.w     #0x1, w0
    2650:	01 00 20    	mov.w     #0x0, w1
    2652:	3c fe 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2654:	1e 0f e8    	inc.w     [w14], [w14]

00002656 <.L71>:
    2656:	30 1f 20    	mov.w     #0x1f3, w0
    2658:	9e 00 78    	mov.w     [w14], w1
    265a:	80 8f 50    	sub.w     w1, w0, [w15]
    265c:	f3 ff 34    	bra       LE, 0x2644 <.L74>
    265e:	01 00 37    	bra       0x2662 <.L73>

00002660 <.L78>:
    2660:	00 00 00    	nop       

00002662 <.L73>:
    2662:	40 1f 20    	mov.w     #0x1f4, w0
    2664:	9e 00 78    	mov.w     [w14], w1
    2666:	80 8f 50    	sub.w     w1, w0, [w15]
    2668:	02 00 3a    	bra       NZ, 0x266e <.L75>
    266a:	10 c0 b3    	mov.b     #0x1, w0
    266c:	0c 00 37    	bra       0x2686 <.L76>

0000266e <.L75>:
    266e:	c1 10 80    	mov.w     0x218, w1
    2670:	00 00 28    	mov.w     #0x8000, w0
    2672:	00 80 60    	and.w     w1, w0, w0
    2674:	00 00 e0    	cp0.w     w0
    2676:	03 00 32    	bra       Z, 0x267e <.L77>
    2678:	bd ff 07    	rcall     0x25f4 <_reset_i2c2_bus> <.LFB16> <.LFE15>
    267a:	10 c0 b3    	mov.b     #0x1, w0
    267c:	04 00 37    	bra       0x2686 <.L76>

0000267e <.L77>:
    267e:	20 00 20    	mov.w     #0x2, w0
    2680:	01 00 20    	mov.w     #0x0, w1
    2682:	24 fe 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2684:	00 40 eb    	clr.b     w0

00002686 <.L76>:
    2686:	00 80 fa    	ulnk      
    2688:	00 00 06    	return    

0000268a <_i2c2_read>:
    268a:	04 00 fa    	lnk       #0x4
    268c:	00 00 eb    	clr.w     w0
    268e:	00 0f 78    	mov.w     w0, [w14]
    2690:	00 40 eb    	clr.b     w0
    2692:	20 47 98    	mov.b     w0, [w14+2]
    2694:	16 62 a8    	bset.b    0x216, #0x3
    2696:	05 00 37    	bra       0x26a2 <.L80>

00002698 <.L82>:
    2698:	1e 0f e8    	inc.w     [w14], [w14]
    269a:	00 7d 20    	mov.w     #0x7d0, w0
    269c:	9e 00 78    	mov.w     [w14], w1
    269e:	80 8f 50    	sub.w     w1, w0, [w15]
    26a0:	05 00 3c    	bra       GT, 0x26ac <.L83>

000026a2 <.L80>:
    26a2:	c0 10 80    	mov.w     0x218, w0
    26a4:	62 00 60    	and.w     w0, #0x2, w0
    26a6:	00 00 e0    	cp0.w     w0
    26a8:	f7 ff 32    	bra       Z, 0x2698 <.L82>
    26aa:	01 00 37    	bra       0x26ae <.L81>

000026ac <.L83>:
    26ac:	00 00 00    	nop       

000026ae <.L81>:
    26ae:	80 10 80    	mov.w     0x210, w0
    26b0:	20 47 98    	mov.b     w0, [w14+2]
    26b2:	2e 40 90    	mov.b     [w14+2], w0
    26b4:	00 80 fa    	ulnk      
    26b6:	00 00 06    	return    

000026b8 <_i2c2_read_ack>:
    26b8:	04 00 fa    	lnk       #0x4
    26ba:	00 00 eb    	clr.w     w0
    26bc:	00 0f 78    	mov.w     w0, [w14]
    26be:	00 40 eb    	clr.b     w0
    26c0:	20 47 98    	mov.b     w0, [w14+2]
    26c2:	16 62 a8    	bset.b    0x216, #0x3
    26c4:	05 00 37    	bra       0x26d0 <.L85>

000026c6 <.L87>:
    26c6:	1e 0f e8    	inc.w     [w14], [w14]
    26c8:	00 7d 20    	mov.w     #0x7d0, w0
    26ca:	9e 00 78    	mov.w     [w14], w1
    26cc:	80 8f 50    	sub.w     w1, w0, [w15]
    26ce:	05 00 3c    	bra       GT, 0x26da <.L88>

000026d0 <.L85>:
    26d0:	c0 10 80    	mov.w     0x218, w0
    26d2:	62 00 60    	and.w     w0, #0x2, w0
    26d4:	00 00 e0    	cp0.w     w0
    26d6:	f7 ff 32    	bra       Z, 0x26c6 <.L87>
    26d8:	01 00 37    	bra       0x26dc <.L86>

000026da <.L88>:
    26da:	00 00 00    	nop       

000026dc <.L86>:
    26dc:	80 10 80    	mov.w     0x210, w0
    26de:	20 47 98    	mov.b     w0, [w14+2]
    26e0:	16 82 a8    	bset.b    0x216, #0x4
    26e2:	a0 00 20    	mov.w     #0xa, w0
    26e4:	01 00 20    	mov.w     #0x0, w1
    26e6:	f2 fd 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    26e8:	2e 40 90    	mov.b     [w14+2], w0
    26ea:	00 80 fa    	ulnk      
    26ec:	00 00 06    	return    

000026ee <_i2c2_read_nack>:
    26ee:	04 00 fa    	lnk       #0x4
    26f0:	00 00 eb    	clr.w     w0
    26f2:	00 0f 78    	mov.w     w0, [w14]
    26f4:	00 40 eb    	clr.b     w0
    26f6:	20 47 98    	mov.b     w0, [w14+2]
    26f8:	16 62 a8    	bset.b    0x216, #0x3
    26fa:	05 00 37    	bra       0x2706 <.L90>

000026fc <.L92>:
    26fc:	1e 0f e8    	inc.w     [w14], [w14]
    26fe:	00 7d 20    	mov.w     #0x7d0, w0
    2700:	9e 00 78    	mov.w     [w14], w1
    2702:	80 8f 50    	sub.w     w1, w0, [w15]
    2704:	05 00 3c    	bra       GT, 0x2710 <.L93>

00002706 <.L90>:
    2706:	c0 10 80    	mov.w     0x218, w0
    2708:	62 00 60    	and.w     w0, #0x2, w0
    270a:	00 00 e0    	cp0.w     w0
    270c:	f7 ff 32    	bra       Z, 0x26fc <.L92>
    270e:	01 00 37    	bra       0x2712 <.L91>

00002710 <.L93>:
    2710:	00 00 00    	nop       

00002712 <.L91>:
    2712:	80 10 80    	mov.w     0x210, w0
    2714:	20 47 98    	mov.b     w0, [w14+2]
    2716:	16 a2 a8    	bset.b    0x216, #0x5
    2718:	16 82 a8    	bset.b    0x216, #0x4
    271a:	a0 00 20    	mov.w     #0xa, w0
    271c:	01 00 20    	mov.w     #0x0, w1
    271e:	d6 fd 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2720:	2e 40 90    	mov.b     [w14+2], w0
    2722:	00 80 fa    	ulnk      
    2724:	00 00 06    	return    

00002726 <_I2C2poll>:
    2726:	04 00 fa    	lnk       #0x4
    2728:	20 47 98    	mov.b     w0, [w14+2]
    272a:	00 40 eb    	clr.b     w0
    272c:	00 4f 78    	mov.b     w0, [w14]
    272e:	2e ff 07    	rcall     0x258c <_i2c2_start> <.LFB14> <.LFE13>
    2730:	2e 40 90    	mov.b     [w14+2], w0
    2732:	00 00 fb    	se        w0, w0
    2734:	80 00 78    	mov.w     w0, w1
    2736:	e0 ff 2f    	mov.w     #0xfffe, w0
    2738:	00 80 60    	and.w     w1, w0, w0
    273a:	77 ff 07    	rcall     0x262a <_send_i2c2_byte> <.LFB17> <.LFE16>
    273c:	00 4f 78    	mov.b     w0, [w14]
    273e:	5a ff 07    	rcall     0x25f4 <_reset_i2c2_bus> <.LFB16> <.LFE15>
    2740:	1e 40 78    	mov.b     [w14], w0
    2742:	00 04 e0    	cp0.b     w0
    2744:	02 00 3a    	bra       NZ, 0x274a <.L95>
    2746:	10 c0 b3    	mov.b     #0x1, w0
    2748:	01 00 37    	bra       0x274c <.L96>

0000274a <.L95>:
    274a:	00 40 eb    	clr.b     w0

0000274c <.L96>:
    274c:	00 80 fa    	ulnk      
    274e:	00 00 06    	return    
Disassembly of section .isr.text:

00002750 <__T1Interrupt>:
    2750:	80 9f be    	mov.d     w0, [w15++]
    2752:	32 00 f8    	push      0x32
    2754:	34 00 f8    	push      0x34
    2756:	10 00 20    	mov.w     #0x1, w0
    2758:	a0 01 88    	mov.w     w0, 0x34
    275a:	00 20 20    	mov.w     #0x200, w0
    275c:	90 01 88    	mov.w     w0, 0x32
    275e:	00 00 fa    	lnk       #0x0
    2760:	84 60 a9    	bclr.b    0x84, #0x3
    2762:	00 40 80    	mov.w     0x800, w0
    2764:	00 00 e9    	dec.w     w0, w0
    2766:	00 40 88    	mov.w     w0, 0x800
    2768:	31 40 80    	mov.w     0x806, w1
    276a:	00 86 21    	mov.w     #0x1860, w0
    276c:	80 8f 50    	sub.w     w1, w0, [w15]
    276e:	09 00 3a    	bra       NZ, 0x2782 <.L10>
    2770:	06 21 ef    	clr.w     0x106
    2772:	0a 68 ef    	clr.b     0x80a
    2774:	94 e0 a8    	bset.b    0x94, #0x7
    2776:	11 e1 a8    	bset.b    0x111, #0x7
    2778:	00 b6 84    	mov.w     0x96c0, w0
    277a:	a0 0c 88    	mov.w     w0, 0x194
    277c:	a0 0c 80    	mov.w     0x194, w0
    277e:	00 00 d1    	lsr.w     w0, w0
    2780:	b0 0c 88    	mov.w     w0, 0x196

00002782 <.L10>:
    2782:	00 80 fa    	ulnk      
    2784:	34 00 f9    	pop       0x34
    2786:	32 00 f9    	pop       0x32
    2788:	4f 00 be    	mov.d     [--w15], w0
    278a:	00 40 06    	retfie    

0000278c <__T2Interrupt>:
    278c:	36 00 f8    	push      0x36
    278e:	80 9f be    	mov.d     w0, [w15++]
    2790:	82 9f be    	mov.d     w2, [w15++]
    2792:	84 9f be    	mov.d     w4, [w15++]
    2794:	86 9f be    	mov.d     w6, [w15++]
    2796:	32 00 f8    	push      0x32
    2798:	34 00 f8    	push      0x34
    279a:	10 00 20    	mov.w     #0x1, w0
    279c:	a0 01 88    	mov.w     w0, 0x34
    279e:	00 20 20    	mov.w     #0x200, w0
    27a0:	90 01 88    	mov.w     w0, 0x32
    27a2:	00 00 fa    	lnk       #0x0
    27a4:	84 e0 a9    	bclr.b    0x84, #0x7
    27a6:	0a c8 bf    	mov.b     0x80a, WREG
    27a8:	00 80 fb    	ze        w0, w0
    27aa:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    27ac:	11 00 32    	bra       Z, 0x27d0 <.L15>
    27ae:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    27b0:	20 00 32    	bra       Z, 0x27f2 <.L16>
    27b2:	00 00 e0    	cp0.w     w0
    27b4:	2e 00 3a    	bra       NZ, 0x2812 <.L18>
    27b6:	96 21 ef    	clr.w     0x196
    27b8:	0a c8 bf    	mov.b     0x80a, WREG
    27ba:	00 40 e8    	inc.b     w0, w0
    27bc:	0a e8 b7    	mov.b     WREG, 0x80a
    27be:	ec 22 a9    	bclr.b    0x2ec, #0x1
    27c0:	10 00 20    	mov.w     #0x1, w0
    27c2:	01 00 20    	mov.w     #0x0, w1
    27c4:	83 fd 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    27c6:	dc e2 a8    	bset.b    0x2dc, #0x7
    27c8:	10 00 20    	mov.w     #0x1, w0
    27ca:	01 00 20    	mov.w     #0x0, w1
    27cc:	7f fd 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    27ce:	22 00 37    	bra       0x2814 <.L12>

000027d0 <.L15>:
    27d0:	10 b6 84    	mov.w     0x96c2, w0
    27d2:	a0 0c 88    	mov.w     w0, 0x194
    27d4:	a0 0c 80    	mov.w     0x194, w0
    27d6:	00 00 d1    	lsr.w     w0, w0
    27d8:	b0 0c 88    	mov.w     w0, 0x196
    27da:	dc e2 a9    	bclr.b    0x2dc, #0x7
    27dc:	10 00 20    	mov.w     #0x1, w0
    27de:	01 00 20    	mov.w     #0x0, w1
    27e0:	75 fd 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    27e2:	ec 02 a8    	bset.b    0x2ec, #0x0
    27e4:	10 00 20    	mov.w     #0x1, w0
    27e6:	01 00 20    	mov.w     #0x0, w1
    27e8:	71 fd 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    27ea:	0a c8 bf    	mov.b     0x80a, WREG
    27ec:	00 40 e8    	inc.b     w0, w0
    27ee:	0a e8 b7    	mov.b     WREG, 0x80a
    27f0:	11 00 37    	bra       0x2814 <.L12>

000027f2 <.L16>:
    27f2:	00 b6 84    	mov.w     0x96c0, w0
    27f4:	a0 0c 88    	mov.w     w0, 0x194
    27f6:	96 21 ef    	clr.w     0x196
    27f8:	dc e2 a9    	bclr.b    0x2dc, #0x7
    27fa:	10 00 20    	mov.w     #0x1, w0
    27fc:	01 00 20    	mov.w     #0x0, w1
    27fe:	66 fd 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2800:	ec 02 a8    	bset.b    0x2ec, #0x0
    2802:	10 00 20    	mov.w     #0x1, w0
    2804:	01 00 20    	mov.w     #0x0, w1
    2806:	62 fd 07    	rcall     0x22cc <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2808:	0a c8 bf    	mov.b     0x80a, WREG
    280a:	00 40 e8    	inc.b     w0, w0
    280c:	0a e8 b7    	mov.b     WREG, 0x80a
    280e:	00 00 00    	nop       
    2810:	01 00 37    	bra       0x2814 <.L12>

00002812 <.L18>:
    2812:	00 00 00    	nop       

00002814 <.L12>:
    2814:	00 80 fa    	ulnk      
    2816:	34 00 f9    	pop       0x34
    2818:	32 00 f9    	pop       0x32
    281a:	4f 03 be    	mov.d     [--w15], w6
    281c:	4f 02 be    	mov.d     [--w15], w4
    281e:	4f 01 be    	mov.d     [--w15], w2
    2820:	4f 00 be    	mov.d     [--w15], w0
    2822:	36 00 f9    	pop       0x36
    2824:	00 40 06    	retfie    
Disassembly of section .text:

00002826 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    2826:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    2828:	00 10 20    	mov.w     #0x100, w0
    282a:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    282c:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    282e:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    2830:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    2832:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    2834:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    2836:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    2838:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    283a:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    283c:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    283e:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    2840:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    2842:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    2844:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    2846:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    2848:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    284a:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    284c:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    284e:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    2850:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    2852:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    2854:	f0 03 20    	mov.w     #0x3f, w0
    2856:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    2858:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    285a:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    285c:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    285e:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    2860:	00 0e 20    	mov.w     #0xe0, w0
    2862:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    2864:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    2866:	00 c4 20    	mov.w     #0xc40, w0
    2868:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    286a:	50 00 20    	mov.w     #0x5, w0
    286c:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    286e:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    2870:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    2872:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    2874:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2876:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    2878:	e8 22 a9    	bclr.b    0x2e8, #0x1
    287a:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    287c:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    287e:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    2880:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    2882:	00 80 fa    	ulnk      
    2884:	00 00 06    	return    

00002886 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    2886:	02 00 fa    	lnk       #0x2
    2888:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    288a:	9e 00 78    	mov.w     [w14], w1
    288c:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    288e:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    2890:	00 00 00    	nop       

00002892 <.L3>:
    2892:	00 19 80    	mov.w     0x320, w0
    2894:	61 00 60    	and.w     w0, #0x1, w0
    2896:	00 00 e0    	cp0.w     w0
    2898:	fc ff 32    	bra       Z, 0x2892 <.L3>
    return ADC1BUF0;
    289a:	00 18 80    	mov.w     0x300, w0
}
    289c:	00 80 fa    	ulnk      
    289e:	00 00 06    	return    

000028a0 <_parity>:
    28a0:	02 00 fa    	lnk       #0x2
    28a2:	00 0f 78    	mov.w     w0, [w14]
    28a4:	1e 00 78    	mov.w     [w14], w0
    28a6:	48 00 de    	lsr.w     w0, #0x8, w0
    28a8:	1e 0f 68    	xor.w     w0, [w14], [w14]
    28aa:	1e 00 78    	mov.w     [w14], w0
    28ac:	44 00 de    	lsr.w     w0, #0x4, w0
    28ae:	1e 0f 68    	xor.w     w0, [w14], [w14]
    28b0:	1e 00 78    	mov.w     [w14], w0
    28b2:	42 00 de    	lsr.w     w0, #0x2, w0
    28b4:	1e 0f 68    	xor.w     w0, [w14], [w14]
    28b6:	1e 00 78    	mov.w     [w14], w0
    28b8:	00 00 d1    	lsr.w     w0, w0
    28ba:	1e 0f 68    	xor.w     w0, [w14], [w14]
    28bc:	1e 00 78    	mov.w     [w14], w0
    28be:	00 40 78    	mov.b     w0, w0
    28c0:	61 40 60    	and.b     w0, #0x1, w0
    28c2:	00 80 fa    	ulnk      
    28c4:	00 00 06    	return    
Disassembly of section .dinit:

000028c6 <.dinit>:
    28c6:	2e 0c 00    	nop       
    28c8:	06 00 00    	nop       
    28ca:	82 00 00    	nop       
    28cc:	10 20 30    	bra       OV, 0x68ee
    28ce:	40 50 60    	and.b     w0, [--w0], [w0--]
    28d0:	0e 08 00    	nop       
    28d2:	20 04 00    	nop       
    28d4:	80 00 00    	nop       
    28d6:	00 08 00    	nop       
    28d8:	0c 00 00    	nop       
    28da:	80 00 00    	nop       
    28dc:	0c 08 00    	nop       
    28de:	02 00 00    	nop       
    28e0:	82 00 00    	nop       
    28e2:	e0 00 00    	nop       
    28e4:	00 00 00    	nop       
Disassembly of section .isr:

000028e6 <__DefaultInterrupt>:
    28e6:	00 40 da    	break     
    28e8:	00 00 fe    	reset     
