
auxtest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	32 28 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	32 28 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	32 28 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	32 28 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	32 28 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	32 28 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	32 28 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	32 28 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	32 28 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	32 28 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	32 28 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	32 28 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	32 28 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	32 28 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	32 28 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	32 28 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	32 28 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	32 28 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	32 28 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	32 28 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	32 28 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	32 28 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	32 28 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	32 28 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	32 28 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	32 28 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	32 28 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	32 28 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	32 28 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	32 28 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	32 28 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	32 28 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	32 28 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	32 28 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	32 28 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	32 28 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	32 28 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	32 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	32 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	32 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	32 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	32 28 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	32 28 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	32 28 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	32 28 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	32 28 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	32 28 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	32 28 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	32 28 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	32 28 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	32 28 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	32 28 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	32 28 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	32 28 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	32 28 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	32 28 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	32 28 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	32 28 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	32 28 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	32 28 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	32 28 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	32 28 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	32 28 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	32 28 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	32 28 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	32 28 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	32 28 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	32 28 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	32 28 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	32 28 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	6f 03 21    	mov.w     #0x1036, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	81 00 07    	rcall     0x1228 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	20 81 22    	mov.w     #0x2812, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	a2 23 02    	call      0x23a2 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	00 12 20    	mov.w     #0x120, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	d2 23 04    	goto      0x23d2 <_setup>
    1216:	00 00 00 
    1218:	1a 24 04    	goto      0x241a <_run>
    121a:	00 00 00 
    121c:	ee 24 04    	goto      0x24ee <_end_win>
    121e:	00 00 00 
    1220:	42 25 04    	goto      0x2542 <_end_fail>
    1222:	00 00 00 
    1224:	b0 24 04    	goto      0x24b0 <_solved>
    1226:	00 00 00 

00001228 <__crt_start_mode>:
    1228:	00 00 05    	retlw.w   #0x0, w0

0000122a <___subsf3>:
    122a:	03 f0 a2    	btg.w     w3, #0xf

0000122c <___addsf3>:
    122c:	88 9f be    	mov.d     w8, [w15++]
    122e:	8a 9f be    	mov.d     w10, [w15++]
    1230:	8c 1f 78    	mov.w     w12, [w15++]
    1232:	f6 00 07    	rcall     0x1420 <__funpack2>
    1234:	fd 00 33    	bra       N, 0x1430 <__fPropagateNaN>
    1236:	64 50 e1    	cp.w      w10, #0x4
    1238:	4f 00 32    	bra       Z, 0x12d8 <aisinfinite>

0000123a <checkspecialb>:
    123a:	64 20 e1    	cp.w      w4, #0x4
    123c:	52 00 32    	bra       Z, 0x12e2 <return2>
    123e:	03 82 6c    	xor.w     w9, w3, w4
    1240:	07 00 3b    	bra       NN, 0x1250 <getsign>
    1242:	09 05 d0    	sl.w      w9, w10
    1244:	03 06 d0    	sl.w      w3, w12
    1246:	82 0f 54    	sub.w     w8, w2, [w15]
    1248:	0c 06 5d    	subb.w    w10, w12, w12
    124a:	02 00 39    	bra       NC, 0x1250 <getsign>
    124c:	02 00 32    	bra       Z, 0x1252 <gotsign>
    124e:	89 01 78    	mov.w     w9, w3

00001250 <getsign>:
    1250:	03 06 78    	mov.w     w3, w12

00001252 <gotsign>:
    1252:	85 82 55    	sub.w     w11, w5, w5
    1254:	04 00 3d    	bra       GE, 0x125e <expcanonical>
    1256:	00 03 fd    	exch      w0, w6
    1258:	81 03 fd    	exch      w1, w7
    125a:	85 02 ea    	neg.w     w5, w5
    125c:	8b 85 42    	add.w     w5, w11, w11

0000125e <expcanonical>:
    125e:	84 0f 72    	ior.w     w4, w4, [w15]
    1260:	02 00 3b    	bra       NN, 0x1266 <nonegate>
    1262:	60 00 10    	subr.w    w0, #0x0, w0
    1264:	e0 80 18    	subbr.w   w1, #0x0, w1

00001266 <nonegate>:
    1266:	60 11 b8    	mul.uu    w2, #0x0, w2
    1268:	00 05 eb    	clr.w     w10
    126a:	7a 28 e1    	cp.w      w5, #0x1a
    126c:	0a 00 39    	bra       NC, 0x1282 <aligniter>
    126e:	06 00 78    	mov.w     w6, w0
    1270:	c7 5d dd    	sl.w      w11, #0x7, w11
    1272:	f7 07 b2    	and.w     #0x7f, w7
    1274:	87 80 75    	ior.w     w11, w7, w1
    1276:	2d 00 37    	bra       0x12d2 <signoff>

00001278 <align>:
    1278:	82 81 71    	ior.w     w3, w2, w3
    127a:	0a 01 78    	mov.w     w10, w2
    127c:	61 05 60    	and.w     w0, #0x1, w10
    127e:	81 80 d1    	asr.w     w1, w1
    1280:	00 80 d3    	rrc.w     w0, w0

00001282 <aligniter>:
    1282:	85 02 e9    	dec.w     w5, w5
    1284:	f9 ff 3b    	bra       NN, 0x1278 <align>

00001286 <aligned>:
    1286:	06 04 40    	add.w     w0, w6, w8
    1288:	87 84 48    	addc.w    w1, w7, w9
    128a:	02 00 3b    	bra       NN, 0x1290 <normalizesum>
    128c:	60 04 14    	subr.w    w8, #0x0, w8
    128e:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001290 <normalizesum>:
    1290:	09 88 a3    	btst.z    w9, #0x8
    1292:	07 00 32    	bra       Z, 0x12a2 <checknormal>
    1294:	8a 81 71    	ior.w     w3, w10, w3
    1296:	82 81 71    	ior.w     w3, w2, w3
    1298:	61 01 64    	and.w     w8, #0x1, w2
    129a:	89 04 d1    	lsr.w     w9, w9
    129c:	08 84 d3    	rrc.w     w8, w8
    129e:	8b 05 e8    	inc.w     w11, w11
    12a0:	17 00 37    	bra       0x12d0 <round>

000012a2 <checknormal>:
    12a2:	09 78 a3    	btst.z    w9, #0x7
    12a4:	13 00 3a    	bra       NZ, 0x12cc <discardguard>

000012a6 <underflow>:
    12a6:	0b 00 e0    	cp0.w     w11
    12a8:	13 00 34    	bra       LE, 0x12d0 <round>
    12aa:	8b 05 e9    	dec.w     w11, w11
    12ac:	08 04 44    	add.w     w8, w8, w8
    12ae:	89 84 4c    	addc.w    w9, w9, w9
    12b0:	0a 44 74    	ior.b     w8, w10, w8
    12b2:	09 78 a3    	btst.z    w9, #0x7
    12b4:	0d 00 3a    	bra       NZ, 0x12d0 <round>

000012b6 <normalizeloop>:
    12b6:	0b 00 e0    	cp0.w     w11
    12b8:	07 00 34    	bra       LE, 0x12c8 <normalizeexit>
    12ba:	8b 05 e9    	dec.w     w11, w11
    12bc:	08 04 44    	add.w     w8, w8, w8
    12be:	89 84 4c    	addc.w    w9, w9, w9
    12c0:	01 00 3a    	bra       NZ, 0x12c4 <normalizetest>
    12c2:	0b 00 20    	mov.w     #0x0, w11

000012c4 <normalizetest>:
    12c4:	09 78 a3    	btst.z    w9, #0x7
    12c6:	f7 ff 32    	bra       Z, 0x12b6 <normalizeloop>

000012c8 <normalizeexit>:
    12c8:	00 01 eb    	clr.w     w2
    12ca:	02 00 37    	bra       0x12d0 <round>

000012cc <discardguard>:
    12cc:	82 81 71    	ior.w     w3, w2, w3
    12ce:	0a 01 78    	mov.w     w10, w2

000012d0 <round>:
    12d0:	6c 00 07    	rcall     0x13aa <__fpack>

000012d2 <signoff>:
    12d2:	0c f0 a7    	btsc.w    w12, #0xf
    12d4:	01 f0 a0    	bset.w    w1, #0xf
    12d6:	b5 00 37    	bra       0x1442 <__fbopExit>

000012d8 <aisinfinite>:
    12d8:	64 20 e1    	cp.w      w4, #0x4
    12da:	02 00 3a    	bra       NZ, 0x12e0 <return8>
    12dc:	83 8f 6c    	xor.w     w9, w3, [w15]
    12de:	b5 00 33    	bra       N, 0x144a <__fbopReturnNaN>

000012e0 <return8>:
    12e0:	08 01 be    	mov.d     w8, w2

000012e2 <return2>:
    12e2:	02 00 be    	mov.d     w2, w0
    12e4:	ae 00 37    	bra       0x1442 <__fbopExit>

000012e6 <___divsf3>:
    12e6:	88 9f be    	mov.d     w8, [w15++]
    12e8:	8a 9f be    	mov.d     w10, [w15++]
    12ea:	8c 1f 78    	mov.w     w12, [w15++]
    12ec:	99 00 07    	rcall     0x1420 <__funpack2>
    12ee:	a0 00 33    	bra       N, 0x1430 <__fPropagateNaN>
    12f0:	03 86 6c    	xor.w     w9, w3, w12
    12f2:	64 50 e1    	cp.w      w10, #0x4
    12f4:	2e 00 32    	bra       Z, 0x1352 <aisinfinite>
    12f6:	64 20 e1    	cp.w      w4, #0x4
    12f8:	33 00 32    	bra       Z, 0x1360 <returnZero>
    12fa:	61 50 e1    	cp.w      w10, #0x1
    12fc:	2f 00 32    	bra       Z, 0x135c <aiszero>
    12fe:	61 20 e1    	cp.w      w4, #0x1
    1300:	31 00 32    	bra       Z, 0x1364 <returnInf>

00001302 <finitenonzero>:
    1302:	85 85 55    	sub.w     w11, w5, w11
    1304:	eb 07 b0    	add.w     #0x7e, w11
    1306:	09 00 20    	mov.w     #0x0, w9
    1308:	08 04 20    	mov.w     #0x40, w8
    130a:	05 00 37    	bra       0x1316 <diventry>

0000130c <divnext>:
    130c:	08 04 44    	add.w     w8, w8, w8
    130e:	89 84 4c    	addc.w    w9, w9, w9
    1310:	0a 00 31    	bra       C, 0x1326 <divdone> <formsticky>

00001312 <divloop>:
    1312:	06 03 43    	add.w     w6, w6, w6
    1314:	87 83 4b    	addc.w    w7, w7, w7

00001316 <diventry>:
    1316:	00 01 53    	sub.w     w6, w0, w2
    1318:	81 81 5b    	subb.w    w7, w1, w3
    131a:	f8 ff 33    	bra       N, 0x130c <divnext>
    131c:	02 03 be    	mov.d     w2, w6
    131e:	08 00 a0    	bset.w    w8, #0x0
    1320:	08 04 44    	add.w     w8, w8, w8
    1322:	89 84 4c    	addc.w    w9, w9, w9
    1324:	f6 ff 39    	bra       NC, 0x1312 <divloop>

00001326 <divdone>:
    1326:	c6 39 dd    	sl.w      w7, #0x6, w3
    1328:	83 01 73    	ior.w     w6, w3, w3
    132a:	01 00 32    	bra       Z, 0x132e <stickyok>
    132c:	13 00 20    	mov.w     #0x1, w3

0000132e <stickyok>:
    132e:	89 04 d1    	lsr.w     w9, w9
    1330:	08 84 d3    	rrc.w     w8, w8
    1332:	09 98 a3    	btst.z    w9, #0x9
    1334:	05 00 32    	bra       Z, 0x1340 <guardused>
    1336:	08 00 a7    	btsc.w    w8, #0x0
    1338:	03 00 a0    	bset.w    w3, #0x0
    133a:	89 04 d1    	lsr.w     w9, w9
    133c:	08 84 d3    	rrc.w     w8, w8
    133e:	8b 05 e8    	inc.w     w11, w11

00001340 <guardused>:
    1340:	89 04 d1    	lsr.w     w9, w9
    1342:	08 84 d3    	rrc.w     w8, w8
    1344:	00 01 eb    	clr.w     w2
    1346:	02 81 d2    	rlc.w     w2, w2
    1348:	30 00 07    	rcall     0x13aa <__fpack>

0000134a <return0>:
    134a:	01 f0 a1    	bclr.w    w1, #0xf
    134c:	0c f0 a7    	btsc.w    w12, #0xf
    134e:	01 f0 a0    	bset.w    w1, #0xf
    1350:	78 00 37    	bra       0x1442 <__fbopExit>

00001352 <aisinfinite>:
    1352:	64 20 e1    	cp.w      w4, #0x4
    1354:	7a 00 32    	bra       Z, 0x144a <__fbopReturnNaN>

00001356 <return8>:
    1356:	08 01 be    	mov.d     w8, w2

00001358 <return2>:
    1358:	02 00 be    	mov.d     w2, w0
    135a:	f7 ff 37    	bra       0x134a <return0>

0000135c <aiszero>:
    135c:	61 20 e1    	cp.w      w4, #0x1
    135e:	75 00 32    	bra       Z, 0x144a <__fbopReturnNaN>

00001360 <returnZero>:
    1360:	60 00 b8    	mul.uu    w0, #0x0, w0
    1362:	f3 ff 37    	bra       0x134a <return0>

00001364 <returnInf>:
    1364:	00 00 20    	mov.w     #0x0, w0
    1366:	01 f8 27    	mov.w     #0x7f80, w1
    1368:	f0 ff 37    	bra       0x134a <return0>

0000136a <___eqsf2>:
    136a:	14 00 20    	mov.w     #0x1, w4
    136c:	b8 00 37    	bra       0x14de <__fcompare>

0000136e <___fixunssfsi>:
    136e:	00 01 be    	mov.d     w0, w2
    1370:	42 00 07    	rcall     0x13f6 <__funpack>
    1372:	04 70 a7    	btsc.w    w4, #0x7
    1374:	03 f0 a1    	bclr.w    w3, #0xf
    1376:	03 f8 a3    	btst.z    w3, #0xf
    1378:	13 00 3a    	bra       NZ, 0x13a0 <returnzero>
    137a:	65 09 b1    	sub.w     #0x96, w5
    137c:	10 00 32    	bra       Z, 0x139e <exit>
    137e:	09 00 35    	bra       LT, 0x1392 <shiftright>
    1380:	69 28 e1    	cp.w      w5, #0x9
    1382:	02 00 35    	bra       LT, 0x1388 <shiftleft>
    1384:	01 00 28    	mov.w     #0x8000, w1
    1386:	00 00 05    	retlw.w   #0x0, w0

00001388 <shiftleft>:
    1388:	00 00 40    	add.w     w0, w0, w0
    138a:	81 80 48    	addc.w    w1, w1, w1
    138c:	85 02 e9    	dec.w     w5, w5
    138e:	fc ff 3a    	bra       NZ, 0x1388 <shiftleft>
    1390:	00 00 06    	return    

00001392 <shiftright>:
    1392:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1394:	05 00 35    	bra       LT, 0x13a0 <returnzero>

00001396 <shiftrightloop>:
    1396:	81 00 d1    	lsr.w     w1, w1
    1398:	00 80 d3    	rrc.w     w0, w0
    139a:	85 02 e8    	inc.w     w5, w5
    139c:	fc ff 3a    	bra       NZ, 0x1396 <shiftrightloop>

0000139e <exit>:
    139e:	00 00 06    	return    

000013a0 <returnzero>:
    13a0:	80 00 eb    	clr.w     w1
    13a2:	00 00 05    	retlw.w   #0x0, w0

000013a4 <___floatsisf>:
    13a4:	4f 89 de    	asr.w     w1, #0xf, w2
    13a6:	82 01 78    	mov.w     w2, w3
    13a8:	b5 00 37    	bra       0x1514 <___floatdisf>

000013aa <__fpack>:
    13aa:	81 00 20    	mov.w     #0x8, w1
    13ac:	61 80 55    	sub.w     w11, #0x1, w0
    13ae:	0b 00 3d    	bra       GE, 0x13c6 <notsubnormal>
    13b0:	0b 00 20    	mov.w     #0x0, w11
    13b2:	61 fe 2f    	mov.w     #0xffe6, w1
    13b4:	01 00 e1    	cp.w      w0, w1
    13b6:	1d 00 34    	bra       LE, 0x13f2 <zerosig>

000013b8 <subnormal>:
    13b8:	82 81 71    	ior.w     w3, w2, w3
    13ba:	61 01 64    	and.w     w8, #0x1, w2
    13bc:	89 04 d1    	lsr.w     w9, w9
    13be:	08 84 d3    	rrc.w     w8, w8
    13c0:	00 00 e8    	inc.w     w0, w0
    13c2:	fa ff 3a    	bra       NZ, 0x13b8 <subnormal>
    13c4:	71 00 20    	mov.w     #0x7, w1

000013c6 <notsubnormal>:
    13c6:	61 00 64    	and.w     w8, #0x1, w0
    13c8:	03 00 70    	ior.w     w0, w3, w0
    13ca:	02 00 60    	and.w     w0, w2, w0
    13cc:	09 00 32    	bra       Z, 0x13e0 <packupandgo>
    13ce:	61 04 44    	add.w     w8, #0x1, w8
    13d0:	e0 84 4c    	addc.w    w9, #0x0, w9
    13d2:	09 88 a5    	btst.z    w9, w1
    13d4:	05 00 32    	bra       Z, 0x13e0 <packupandgo>
    13d6:	8b 05 e8    	inc.w     w11, w11
    13d8:	68 08 e1    	cp.w      w1, #0x8
    13da:	02 00 3a    	bra       NZ, 0x13e0 <packupandgo>
    13dc:	89 04 d1    	lsr.w     w9, w9
    13de:	08 84 d3    	rrc.w     w8, w8

000013e0 <packupandgo>:
    13e0:	f2 0f 20    	mov.w     #0xff, w2
    13e2:	02 58 e1    	cp.w      w11, w2
    13e4:	05 00 3d    	bra       GE, 0x13f0 <overflow>
    13e6:	c7 5d dd    	sl.w      w11, #0x7, w11
    13e8:	f9 07 b2    	and.w     #0x7f, w9
    13ea:	89 80 75    	ior.w     w11, w9, w1
    13ec:	08 00 78    	mov.w     w8, w0
    13ee:	00 00 06    	return    

000013f0 <overflow>:
    13f0:	0b f8 27    	mov.w     #0x7f80, w11

000013f2 <zerosig>:
    13f2:	8b 00 78    	mov.w     w11, w1
    13f4:	00 00 05    	retlw.w   #0x0, w0

000013f6 <__funpack>:
    13f6:	c7 0a de    	lsr.w     w1, #0x7, w5
    13f8:	f1 07 b2    	and.w     #0x7f, w1
    13fa:	f5 0f b2    	and.w     #0xff, w5
    13fc:	08 00 32    	bra       Z, 0x140e <zeroorsub>
    13fe:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1400:	02 00 32    	bra       Z, 0x1406 <nanorinf>

00001402 <finitereturn>:
    1402:	01 70 a0    	bset.w    w1, #0x7
    1404:	24 00 05    	retlw.w   #0x2, w4

00001406 <nanorinf>:
    1406:	81 0f 70    	ior.w     w0, w1, [w15]
    1408:	01 00 32    	bra       Z, 0x140c <infinite>
    140a:	04 08 05    	retlw.w   #0x80, w4

0000140c <infinite>:
    140c:	44 00 05    	retlw.w   #0x4, w4

0000140e <zeroorsub>:
    140e:	81 0f 70    	ior.w     w0, w1, [w15]
    1410:	02 00 3a    	bra       NZ, 0x1416 <subnormal>
    1412:	14 00 05    	retlw.w   #0x1, w4

00001414 <normalize>:
    1414:	85 02 e9    	dec.w     w5, w5

00001416 <subnormal>:
    1416:	00 00 40    	add.w     w0, w0, w0
    1418:	81 c0 48    	addc.b    w1, w1, w1
    141a:	fc ff 3b    	bra       NN, 0x1414 <normalize>
    141c:	01 70 a0    	bset.w    w1, #0x7
    141e:	24 00 05    	retlw.w   #0x2, w4

00001420 <__funpack2>:
    1420:	00 04 be    	mov.d     w0, w8
    1422:	e9 ff 07    	rcall     0x13f6 <__funpack>
    1424:	00 03 be    	mov.d     w0, w6
    1426:	04 05 be    	mov.d     w4, w10
    1428:	02 00 be    	mov.d     w2, w0
    142a:	e5 ff 07    	rcall     0x13f6 <__funpack>
    142c:	84 4f 75    	ior.b     w10, w4, [w15]
    142e:	00 00 06    	return    

00001430 <__fPropagateNaN>:
    1430:	02 00 be    	mov.d     w2, w0
    1432:	64 50 e1    	cp.w      w10, #0x4
    1434:	05 00 36    	bra       LEU, 0x1440 <return0>
    1436:	64 20 e1    	cp.w      w4, #0x4
    1438:	02 00 36    	bra       LEU, 0x143e <return8>
    143a:	09 68 a3    	btst.z    w9, #0x6
    143c:	01 00 3a    	bra       NZ, 0x1440 <return0>

0000143e <return8>:
    143e:	08 00 be    	mov.d     w8, w0

00001440 <return0>:
    1440:	01 60 a0    	bset.w    w1, #0x6

00001442 <__fbopExit>:
    1442:	4f 06 78    	mov.w     [--w15], w12
    1444:	4f 05 be    	mov.d     [--w15], w10
    1446:	4f 04 be    	mov.d     [--w15], w8
    1448:	00 00 06    	return    

0000144a <__fbopReturnNaN>:
    144a:	f0 ff 2f    	mov.w     #0xffff, w0
    144c:	f1 ff 27    	mov.w     #0x7fff, w1
    144e:	f9 ff 37    	bra       0x1442 <__fbopExit>

00001450 <___mulsf3>:
    1450:	88 9f be    	mov.d     w8, [w15++]
    1452:	8a 9f be    	mov.d     w10, [w15++]
    1454:	8c 1f 78    	mov.w     w12, [w15++]
    1456:	e4 ff 07    	rcall     0x1420 <__funpack2>
    1458:	eb ff 33    	bra       N, 0x1430 <__fPropagateNaN>
    145a:	03 86 6c    	xor.w     w9, w3, w12
    145c:	64 50 e1    	cp.w      w10, #0x4
    145e:	24 00 32    	bra       Z, 0x14a8 <aisinfinite>
    1460:	64 20 e1    	cp.w      w4, #0x4
    1462:	27 00 32    	bra       Z, 0x14b2 <bisinfinite>
    1464:	61 50 e1    	cp.w      w10, #0x1
    1466:	22 00 32    	bra       Z, 0x14ac <return8>
    1468:	61 20 e1    	cp.w      w4, #0x1
    146a:	21 00 32    	bra       Z, 0x14ae <return2>
    146c:	8b 85 42    	add.w     w5, w11, w11
    146e:	eb 07 b1    	sub.w     #0x7e, w11
    1470:	01 34 b8    	mul.uu    w6, w1, w8
    1472:	00 3a b8    	mul.uu    w7, w0, w4
    1474:	08 04 42    	add.w     w4, w8, w8
    1476:	89 84 4a    	addc.w    w5, w9, w9
    1478:	01 3a b8    	mul.uu    w7, w1, w4
    147a:	00 30 b8    	mul.uu    w6, w0, w0
    147c:	88 80 40    	add.w     w1, w8, w1
    147e:	09 01 4a    	addc.w    w4, w9, w2
    1480:	04 00 33    	bra       N, 0x148a <formsticky>
    1482:	00 00 40    	add.w     w0, w0, w0
    1484:	81 80 48    	addc.w    w1, w1, w1
    1486:	02 01 49    	addc.w    w2, w2, w2
    1488:	8b 05 e9    	dec.w     w11, w11

0000148a <formsticky>:
    148a:	c9 09 dd    	sl.w      w1, #0x9, w3
    148c:	83 01 70    	ior.w     w0, w3, w3
    148e:	01 00 32    	bra       Z, 0x1492 <formRandSig>
    1490:	13 00 20    	mov.w     #0x1, w3

00001492 <formRandSig>:
    1492:	c8 14 de    	lsr.w     w2, #0x8, w9
    1494:	48 14 dd    	sl.w      w2, #0x8, w8
    1496:	47 09 de    	lsr.w     w1, #0x7, w2
    1498:	12 00 b2    	and.w     #0x1, w2
    149a:	c8 08 de    	lsr.w     w1, #0x8, w1
    149c:	08 84 70    	ior.w     w1, w8, w8
    149e:	85 ff 07    	rcall     0x13aa <__fpack>

000014a0 <return0>:
    14a0:	01 f0 a1    	bclr.w    w1, #0xf
    14a2:	0c f0 a7    	btsc.w    w12, #0xf
    14a4:	01 f0 a0    	bset.w    w1, #0xf
    14a6:	cd ff 37    	bra       0x1442 <__fbopExit>

000014a8 <aisinfinite>:
    14a8:	61 20 e1    	cp.w      w4, #0x1
    14aa:	cf ff 32    	bra       Z, 0x144a <__fbopReturnNaN>

000014ac <return8>:
    14ac:	08 01 be    	mov.d     w8, w2

000014ae <return2>:
    14ae:	02 00 be    	mov.d     w2, w0
    14b0:	f7 ff 37    	bra       0x14a0 <return0>

000014b2 <bisinfinite>:
    14b2:	61 50 e1    	cp.w      w10, #0x1
    14b4:	fc ff 3a    	bra       NZ, 0x14ae <return2>
    14b6:	c9 ff 37    	bra       0x144a <__fbopReturnNaN>

000014b8 <___udivsi3>:
    14b8:	60 22 b8    	mul.uu    w4, #0x0, w4
    14ba:	06 02 20    	mov.w     #0x20, w6

000014bc <nextbit>:
    14bc:	00 00 d0    	sl.w      w0, w0
    14be:	81 80 d2    	rlc.w     w1, w1
    14c0:	04 82 d2    	rlc.w     w4, w4
    14c2:	85 82 d2    	rlc.w     w5, w5
    14c4:	00 00 a0    	bset.w    w0, #0x0
    14c6:	02 02 52    	sub.w     w4, w2, w4
    14c8:	83 82 5a    	subb.w    w5, w3, w5
    14ca:	03 00 31    	bra       C, 0x14d2 <iterate>
    14cc:	02 02 42    	add.w     w4, w2, w4
    14ce:	83 82 4a    	addc.w    w5, w3, w5
    14d0:	00 00 a1    	bclr.w    w0, #0x0

000014d2 <iterate>:
    14d2:	06 03 e9    	dec.w     w6, w6
    14d4:	f3 ff 3a    	bra       NZ, 0x14bc <nextbit>
    14d6:	00 00 06    	return    

000014d8 <___umodsi3>:
    14d8:	ef ff 07    	rcall     0x14b8 <___udivsi3>
    14da:	04 00 be    	mov.d     w4, w0
    14dc:	00 00 06    	return    

000014de <__fcompare>:
    14de:	88 9f be    	mov.d     w8, [w15++]
    14e0:	8a 9f be    	mov.d     w10, [w15++]
    14e2:	84 1f 78    	mov.w     w4, [w15++]
    14e4:	9d ff 07    	rcall     0x1420 <__funpack2>
    14e6:	4f 00 78    	mov.w     [--w15], w0
    14e8:	11 00 33    	bra       N, 0x150c <exit>
    14ea:	f0 ff 2f    	mov.w     #0xffff, w0
    14ec:	83 8f 6c    	xor.w     w9, w3, [w15]
    14ee:	06 00 3b    	bra       NN, 0x14fc <comparemag>
    14f0:	04 05 65    	and.w     w10, w4, w10
    14f2:	0a 00 a7    	btsc.w    w10, #0x0
    14f4:	08 00 37    	bra       0x1506 <returnEqual>
    14f6:	09 f0 a6    	btss.w    w9, #0xf
    14f8:	10 00 20    	mov.w     #0x1, w0
    14fa:	08 00 37    	bra       0x150c <exit>

000014fc <comparemag>:
    14fc:	82 0f 54    	sub.w     w8, w2, [w15]
    14fe:	83 8f 5c    	subb.w    w9, w3, [w15]
    1500:	03 00 39    	bra       NC, 0x1508 <adjust>
    1502:	10 00 20    	mov.w     #0x1, w0
    1504:	01 00 3e    	bra       GTU, 0x1508 <adjust>

00001506 <returnEqual>:
    1506:	00 00 20    	mov.w     #0x0, w0

00001508 <adjust>:
    1508:	09 f0 a7    	btsc.w    w9, #0xf
    150a:	00 00 ea    	neg.w     w0, w0

0000150c <exit>:
    150c:	4f 05 be    	mov.d     [--w15], w10
    150e:	4f 04 be    	mov.d     [--w15], w8
    1510:	00 00 e0    	cp0.w     w0
    1512:	00 00 06    	return    

00001514 <___floatdisf>:
    1514:	88 1f 78    	mov.w     w8, [w15++]
    1516:	03 04 78    	mov.w     w3, w8
    1518:	03 00 e0    	cp0.w     w3
    151a:	07 00 3d    	bra       GE, 0x152a <notspecial>

0000151c <negative>:
    151c:	60 00 10    	subr.w    w0, #0x0, w0
    151e:	e0 80 18    	subbr.w   w1, #0x0, w1
    1520:	60 01 19    	subbr.w   w2, #0x0, w2
    1522:	e0 81 19    	subbr.w   w3, #0x0, w3
    1524:	02 00 3b    	bra       NN, 0x152a <notspecial>
    1526:	01 f0 2d    	mov.w     #0xdf00, w1
    1528:	03 00 37    	bra       0x1530 <return0>

0000152a <notspecial>:
    152a:	04 00 07    	rcall     0x1534 <___floatundisf>
    152c:	08 f0 a7    	btsc.w    w8, #0xf
    152e:	01 f0 a0    	bset.w    w1, #0xf

00001530 <return0>:
    1530:	4f 04 78    	mov.w     [--w15], w8
    1532:	00 00 06    	return    

00001534 <___floatundisf>:
    1534:	88 9f be    	mov.d     w8, [w15++]
    1536:	8a 9f be    	mov.d     w10, [w15++]
    1538:	00 82 70    	ior.w     w1, w0, w4
    153a:	04 02 71    	ior.w     w2, w4, w4
    153c:	04 82 71    	ior.w     w3, w4, w4
    153e:	26 00 32    	bra       Z, 0x158c <return0>
    1540:	00 04 be    	mov.d     w0, w8
    1542:	02 00 be    	mov.d     w2, w0
    1544:	60 11 b8    	mul.uu    w2, #0x0, w2
    1546:	6b 09 20    	mov.w     #0x96, w11
    1548:	95 02 20    	mov.w     #0x29, w5
    154a:	01 82 cf    	ff1l      w1, w4
    154c:	0a 00 39    	bra       NC, 0x1562 <fixshift>
    154e:	05 41 b1    	sub.b     #0x10, w5
    1550:	00 82 cf    	ff1l      w0, w4
    1552:	07 00 39    	bra       NC, 0x1562 <fixshift>
    1554:	05 41 b1    	sub.b     #0x10, w5
    1556:	09 82 cf    	ff1l      w9, w4
    1558:	04 00 39    	bra       NC, 0x1562 <fixshift>
    155a:	05 41 b1    	sub.b     #0x10, w5
    155c:	08 82 cf    	ff1l      w8, w4
    155e:	01 00 39    	bra       NC, 0x1562 <fixshift>
    1560:	05 41 b1    	sub.b     #0x10, w5

00001562 <fixshift>:
    1562:	05 42 52    	sub.b     w4, w5, w4
    1564:	12 00 32    	bra       Z, 0x158a <round>
    1566:	0a 00 3b    	bra       NN, 0x157c <shiftleft>

00001568 <shiftright>:
    1568:	82 81 71    	ior.w     w3, w2, w3
    156a:	61 01 64    	and.w     w8, #0x1, w2
    156c:	81 00 d1    	lsr.w     w1, w1
    156e:	00 80 d3    	rrc.w     w0, w0
    1570:	89 84 d3    	rrc.w     w9, w9
    1572:	08 84 d3    	rrc.w     w8, w8
    1574:	8b 05 e8    	inc.w     w11, w11
    1576:	04 42 e8    	inc.b     w4, w4
    1578:	f7 ff 3a    	bra       NZ, 0x1568 <shiftright>
    157a:	07 00 37    	bra       0x158a <round>

0000157c <shiftleft>:
    157c:	08 04 44    	add.w     w8, w8, w8
    157e:	89 84 4c    	addc.w    w9, w9, w9
    1580:	00 00 48    	addc.w    w0, w0, w0
    1582:	81 80 48    	addc.w    w1, w1, w1
    1584:	8b 05 e9    	dec.w     w11, w11
    1586:	04 42 e9    	dec.b     w4, w4
    1588:	f9 ff 3a    	bra       NZ, 0x157c <shiftleft>

0000158a <round>:
    158a:	0f ff 07    	rcall     0x13aa <__fpack>

0000158c <return0>:
    158c:	4f 05 be    	mov.d     [--w15], w10
    158e:	4f 04 be    	mov.d     [--w15], w8
    1590:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	bc 27 04    	goto      0x27bc <.LFE1>
    1026:	00 00 00 
    1028:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	ec 26 04    	goto      0x26ec <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	8a 26 04    	goto      0x268a <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	ba 25 04    	goto      0x25ba <__SI2C2Interrupt>
    10b2:	00 00 00 
    10b4:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	32 28 04    	goto      0x2832 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009592 <_numbertable>:
    9592:	3f 00       	.word 0x3f
    9594:	06 00       	.word 0x6
    9596:	5b 00       	.word 0x5b
    9598:	4f 00       	.word 0x4f
    959a:	66 00       	.word 0x66
    959c:	6d 00       	.word 0x6d
    959e:	7d 00       	.word 0x7d
    95a0:	07 00       	.word 0x7
    95a2:	7f 00       	.word 0x7f
    95a4:	6f 00       	.word 0x6f
    95a6:	77 00       	.word 0x77
    95a8:	7c 00       	.word 0x7c
    95aa:	39 00       	.word 0x39
    95ac:	5e 00       	.word 0x5e
    95ae:	79 00       	.word 0x79
    95b0:	71 00       	.word 0x71

000095b2 <_alphafonttable>:
    95b2:	01 00       	.word 0x1
    95b4:	02 00       	.word 0x2
    95b6:	04 00       	.word 0x4
    95b8:	08 00       	.word 0x8
    95ba:	10 00       	.word 0x10
    95bc:	20 00       	.word 0x20
    95be:	40 00       	.word 0x40
    95c0:	80 00       	.word 0x80
    95c2:	00 01       	.word 0x100
    95c4:	00 02       	.word 0x200
    95c6:	00 04       	.word 0x400
    95c8:	00 08       	.word 0x800
    95ca:	00 10       	.word 0x1000
    95cc:	00 20       	.word 0x2000
    95ce:	00 40       	.word 0x4000
    95d0:	00 80       	.word 0x8000
	...
    95e2:	c9 12       	.word 0x12c9
    95e4:	c0 15       	.word 0x15c0
    95e6:	f9 12       	.word 0x12f9
    95e8:	e3 00       	.word 0xe3
    95ea:	30 05       	.word 0x530
    95ec:	c8 12       	.word 0x12c8
    95ee:	00 3a       	.word 0x3a00
    95f0:	00 17       	.word 0x1700
    95f2:	00 00       	.word 0
    95f4:	06 00       	.word 0x6
    95f6:	20 02       	.word 0x220
    95f8:	ce 12       	.word 0x12ce
    95fa:	ed 12       	.word 0x12ed
    95fc:	24 0c       	.word 0xc24
    95fe:	5d 23       	.word 0x235d
    9600:	00 04       	.word 0x400
    9602:	00 24       	.word 0x2400
    9604:	00 09       	.word 0x900
    9606:	c0 3f       	.word 0x3fc0
    9608:	c0 12       	.word 0x12c0
    960a:	00 08       	.word 0x800
    960c:	c0 00       	.word 0xc0
    960e:	00 00       	.word 0
    9610:	00 0c       	.word 0xc00
    9612:	3f 0c       	.word 0xc3f
    9614:	06 00       	.word 0x6
    9616:	db 00       	.word 0xdb
    9618:	8f 00       	.word 0x8f
    961a:	e6 00       	.word 0xe6
    961c:	69 20       	.word 0x2069
    961e:	fd 00       	.word 0xfd
    9620:	07 00       	.word 0x7
    9622:	ff 00       	.word 0xff
    9624:	ef 00       	.word 0xef
    9626:	00 12       	.word 0x1200
    9628:	00 0a       	.word 0xa00
    962a:	00 24       	.word 0x2400
    962c:	c8 00       	.word 0xc8
    962e:	00 09       	.word 0x900
    9630:	83 10       	.word 0x1083
    9632:	bb 02       	.word 0x2bb
    9634:	f7 00       	.word 0xf7
    9636:	8f 12       	.word 0x128f
    9638:	39 00       	.word 0x39
    963a:	0f 12       	.word 0x120f
    963c:	f9 00       	.word 0xf9
    963e:	71 00       	.word 0x71
    9640:	bd 00       	.word 0xbd
    9642:	f6 00       	.word 0xf6
    9644:	00 12       	.word 0x1200
    9646:	1e 00       	.word 0x1e
    9648:	70 24       	.word 0x2470
    964a:	38 00       	.word 0x38
    964c:	36 05       	.word 0x536
    964e:	36 21       	.word 0x2136
    9650:	3f 00       	.word 0x3f
    9652:	f3 00       	.word 0xf3
    9654:	3f 20       	.word 0x203f
    9656:	f3 20       	.word 0x20f3
    9658:	ed 00       	.word 0xed
    965a:	01 12       	.word 0x1201
    965c:	3e 00       	.word 0x3e
    965e:	30 0c       	.word 0xc30
    9660:	36 28       	.word 0x2836
    9662:	00 2d       	.word 0x2d00
    9664:	00 15       	.word 0x1500
    9666:	09 0c       	.word 0xc09
    9668:	39 00       	.word 0x39
    966a:	00 21       	.word 0x2100
    966c:	0f 00       	.word 0xf
    966e:	03 0c       	.word 0xc03
    9670:	08 00       	.word 0x8
    9672:	00 01       	.word 0x100
    9674:	58 10       	.word 0x1058
    9676:	78 20       	.word 0x2078
    9678:	d8 00       	.word 0xd8
    967a:	8e 08       	.word 0x88e
    967c:	58 08       	.word 0x858
    967e:	71 00       	.word 0x71
    9680:	8e 04       	.word 0x48e
    9682:	70 10       	.word 0x1070
    9684:	00 10       	.word 0x1000
    9686:	0e 00       	.word 0xe
    9688:	00 36       	.word 0x3600
    968a:	30 00       	.word 0x30
    968c:	d4 10       	.word 0x10d4
    968e:	50 10       	.word 0x1050
    9690:	dc 00       	.word 0xdc
    9692:	70 01       	.word 0x170
    9694:	86 04       	.word 0x486
    9696:	50 00       	.word 0x50
    9698:	88 20       	.word 0x2088
    969a:	78 00       	.word 0x78
    969c:	1c 00       	.word 0x1c
    969e:	04 20       	.word 0x2004
    96a0:	14 28       	.word 0x2814
    96a2:	c0 28       	.word 0x28c0
    96a4:	0c 20       	.word 0x200c
    96a6:	48 08       	.word 0x848
    96a8:	49 09       	.word 0x949
    96aa:	00 12       	.word 0x1200
    96ac:	89 24       	.word 0x2489
    96ae:	20 05       	.word 0x520
    96b0:	ff 3f       	.word 0x3fff
Disassembly of section .text:

000016b2 <_led_begin>:

};


void led_begin(_ADAFRUIT_LED* ptr, uint8_t addr){
    16b2:	04 00 fa    	lnk       #0x4
    16b4:	00 0f 78    	mov.w     w0, [w14]
    16b6:	21 47 98    	mov.b     w1, [w14+2]
  ptr->i2c_addr = addr;
    16b8:	1e 00 78    	mov.w     [w14], w0
    16ba:	ae 40 90    	mov.b     [w14+2], w1
    16bc:	01 50 98    	mov.b     w1, [w0+16]
	LED1 = 1;
    16be:	dc e2 a8    	bset.b    0x2dc, #0x7
  i2c_start();
    16c0:	cb 02 07    	rcall     0x1c58 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    16c2:	1e 00 78    	mov.w     [w14], w0
    16c4:	00 50 90    	mov.b     [w0+16], w0
    16c6:	00 80 fb    	ze        w0, w0
    16c8:	16 03 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(0x21); // turn on oscillator
    16ca:	10 02 20    	mov.w     #0x21, w0
    16cc:	14 03 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    16ce:	f8 02 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
  led_blinkRate((_ADAFRUIT_LED *)ptr, HT16K33_BLINK_OFF);
    16d0:	80 40 eb    	clr.b     w1
    16d2:	1e 00 78    	mov.w     [w14], w0
    16d4:	1a 00 07    	rcall     0x170a <_led_blinkRate> <.LFB2> <.LFE1>
  led_setBrightness((_ADAFRUIT_LED *)ptr,15); // set max brightness
    16d6:	f1 c0 b3    	mov.b     #0xf, w1
    16d8:	1e 00 78    	mov.w     [w14], w0
    16da:	02 00 07    	rcall     0x16e0 <_led_setBrightness> <.LFB1> <.LFE0>
}
    16dc:	00 80 fa    	ulnk      
    16de:	00 00 06    	return    

000016e0 <_led_setBrightness>:

void led_setBrightness(_ADAFRUIT_LED* ptr, uint8_t b){
    16e0:	04 00 fa    	lnk       #0x4
    16e2:	00 0f 78    	mov.w     w0, [w14]
    16e4:	21 47 98    	mov.b     w1, [w14+2]
  if (b > 15) b = 15;
    16e6:	2e 40 90    	mov.b     [w14+2], w0
    16e8:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    16ea:	02 00 36    	bra       LEU, 0x16f0 <.L3>
    16ec:	f0 c0 b3    	mov.b     #0xf, w0
    16ee:	20 47 98    	mov.b     w0, [w14+2]

000016f0 <.L3>:
  i2c_start();
    16f0:	b3 02 07    	rcall     0x1c58 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    16f2:	1e 00 78    	mov.w     [w14], w0
    16f4:	00 50 90    	mov.b     [w0+16], w0
    16f6:	00 80 fb    	ze        w0, w0
    16f8:	fe 02 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(HT16K33_CMD_BRIGHTNESS | b);
    16fa:	ae 40 90    	mov.b     [w14+2], w1
    16fc:	00 ce b3    	mov.b     #0xe0, w0
    16fe:	00 c0 70    	ior.b     w1, w0, w0
    1700:	00 80 fb    	ze        w0, w0
    1702:	f9 02 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1704:	dd 02 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1706:	00 80 fa    	ulnk      
    1708:	00 00 06    	return    

0000170a <_led_blinkRate>:

void led_blinkRate(_ADAFRUIT_LED* ptr, uint8_t b){
    170a:	04 00 fa    	lnk       #0x4
    170c:	00 0f 78    	mov.w     w0, [w14]
    170e:	21 47 98    	mov.b     w1, [w14+2]
  i2c_start();
    1710:	a3 02 07    	rcall     0x1c58 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1712:	1e 00 78    	mov.w     [w14], w0
    1714:	00 50 90    	mov.b     [w0+16], w0
    1716:	00 80 fb    	ze        w0, w0
    1718:	ee 02 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
  if (b > 3) b = 0; // turn off if not sure
    171a:	2e 40 90    	mov.b     [w14+2], w0
    171c:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    171e:	02 00 36    	bra       LEU, 0x1724 <.L5>
    1720:	00 40 eb    	clr.b     w0
    1722:	20 47 98    	mov.b     w0, [w14+2]

00001724 <.L5>:
  send_i2c_byte(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1));
    1724:	2e 40 90    	mov.b     [w14+2], w0
    1726:	00 80 fb    	ze        w0, w0
    1728:	00 00 40    	add.w     w0, w0, w0
    172a:	80 00 78    	mov.w     w0, w1
    172c:	10 08 20    	mov.w     #0x81, w0
    172e:	01 00 70    	ior.w     w0, w1, w0
    1730:	e2 02 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1732:	c6 02 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1734:	00 80 fa    	ulnk      
    1736:	00 00 06    	return    

00001738 <_led_writeDisplay>:

void led_writeDisplay(_ADAFRUIT_LED* ptr){
    1738:	04 00 fa    	lnk       #0x4
    173a:	10 07 98    	mov.w     w0, [w14+2]
  i2c_start();
    173c:	8d 02 07    	rcall     0x1c58 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    173e:	1e 00 90    	mov.w     [w14+2], w0
    1740:	00 50 90    	mov.b     [w0+16], w0
    1742:	00 80 fb    	ze        w0, w0
    1744:	d8 02 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
	send_i2c_byte(0x00); // Start at address 0
    1746:	00 00 eb    	clr.w     w0
    1748:	d6 02 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
	uint8_t i;
  for (i=0; i<8; i++) {
    174a:	00 40 eb    	clr.b     w0
    174c:	00 4f 78    	mov.b     w0, [w14]
    174e:	0f 00 37    	bra       0x176e <.L7>

00001750 <.L8>:
    send_i2c_byte(ptr->displaybuffer[i] & 0xFF);
    1750:	1e 80 fb    	ze        [w14], w0
    1752:	9e 00 90    	mov.w     [w14+2], w1
    1754:	00 00 40    	add.w     w0, w0, w0
    1756:	61 00 78    	mov.w     [w1+w0], w0
    1758:	80 00 78    	mov.w     w0, w1
    175a:	f0 0f 20    	mov.w     #0xff, w0
    175c:	00 80 60    	and.w     w1, w0, w0
    175e:	cb 02 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ptr->displaybuffer[i] >> 8);
    1760:	1e 80 fb    	ze        [w14], w0
    1762:	9e 00 90    	mov.w     [w14+2], w1
    1764:	00 00 40    	add.w     w0, w0, w0
    1766:	61 00 78    	mov.w     [w1+w0], w0
    1768:	48 00 de    	lsr.w     w0, #0x8, w0
    176a:	c5 02 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    176c:	1e 4f e8    	inc.b     [w14], [w14]

0000176e <.L7>:
    176e:	1e 40 78    	mov.b     [w14], w0
    1770:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    1772:	ee ff 36    	bra       LEU, 0x1750 <.L8>
  }
  reset_i2c_bus();
    1774:	a5 02 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1776:	00 80 fa    	ulnk      
    1778:	00 00 06    	return    

0000177a <_led_clear>:

void led_clear(_ADAFRUIT_LED* ptr){
    177a:	04 00 fa    	lnk       #0x4
    177c:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
	for (i=0; i<8; i++) {
    177e:	00 40 eb    	clr.b     w0
    1780:	00 4f 78    	mov.b     w0, [w14]
    1782:	07 00 37    	bra       0x1792 <.L10>

00001784 <.L11>:
    ptr->displaybuffer[i] = 0;
    1784:	1e 80 fb    	ze        [w14], w0
    1786:	9e 00 90    	mov.w     [w14+2], w1
    1788:	00 00 40    	add.w     w0, w0, w0
    178a:	00 80 40    	add.w     w1, w0, w0
    178c:	80 00 eb    	clr.w     w1
    178e:	01 08 78    	mov.w     w1, [w0]
    1790:	1e 4f e8    	inc.b     [w14], [w14]

00001792 <.L10>:
    1792:	1e 40 78    	mov.b     [w14], w0
    1794:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    1796:	f6 ff 36    	bra       LEU, 0x1784 <.L11>
  }
}
    1798:	00 80 fa    	ulnk      
    179a:	00 00 06    	return    

0000179c <_alphanum_begin>:

// ALPHANUM ********************************************************************

void alphanum_begin(_ALPHANUM* ptr, uint8_t addr){
    179c:	04 00 fa    	lnk       #0x4
    179e:	00 0f 78    	mov.w     w0, [w14]
    17a0:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr); // Call super constructor
    17a2:	1e 00 78    	mov.w     [w14], w0
    17a4:	ae 40 90    	mov.b     [w14+2], w1
    17a6:	85 ff 07    	rcall     0x16b2 <_led_begin> <.L0> <.LFB0> <.Ltext0>
}
    17a8:	00 80 fa    	ulnk      
    17aa:	00 00 06    	return    

000017ac <_alphanum_writeDigitRaw>:

void alphanum_writeDigitRaw(_ALPHANUM* ptr, uint8_t n, uint16_t bitmask){
    17ac:	06 00 fa    	lnk       #0x6
    17ae:	00 0f 78    	mov.w     w0, [w14]
    17b0:	21 47 98    	mov.b     w1, [w14+2]
    17b2:	22 07 98    	mov.w     w2, [w14+4]
  ptr->super.displaybuffer[n] = bitmask;
    17b4:	2e 40 90    	mov.b     [w14+2], w0
    17b6:	00 80 fb    	ze        w0, w0
    17b8:	9e 00 78    	mov.w     [w14], w1
    17ba:	00 00 40    	add.w     w0, w0, w0
    17bc:	00 80 40    	add.w     w1, w0, w0
    17be:	ae 00 90    	mov.w     [w14+4], w1
    17c0:	01 08 78    	mov.w     w1, [w0]
}
    17c2:	00 80 fa    	ulnk      
    17c4:	00 00 06    	return    

000017c6 <_alphanum_writeDigitAscii>:

void alphanum_writeDigitAscii(_ALPHANUM* ptr, uint8_t n, uint8_t ascii, uint8_t dot){
    17c6:	08 00 fa    	lnk       #0x8
    17c8:	10 07 98    	mov.w     w0, [w14+2]
    17ca:	41 47 98    	mov.b     w1, [w14+4]
    17cc:	52 47 98    	mov.b     w2, [w14+5]
    17ce:	63 47 98    	mov.b     w3, [w14+6]
  uint16_t font = alphafonttable[ascii];
    17d0:	5e 40 90    	mov.b     [w14+5], w0
    17d2:	00 80 fb    	ze        w0, w0
    17d4:	80 00 40    	add.w     w0, w0, w1
    17d6:	20 5b 29    	mov.w     #0x95b2, w0
    17d8:	00 80 40    	add.w     w1, w0, w0
    17da:	10 0f 78    	mov.w     [w0], [w14]
  ptr->super.displaybuffer[n] = font;
    17dc:	4e 40 90    	mov.b     [w14+4], w0
    17de:	00 80 fb    	ze        w0, w0
    17e0:	9e 00 90    	mov.w     [w14+2], w1
    17e2:	00 00 40    	add.w     w0, w0, w0
    17e4:	00 80 40    	add.w     w1, w0, w0
    17e6:	1e 08 78    	mov.w     [w14], [w0]
  if (dot) ptr->super.displaybuffer[n] |= (1<<14);
    17e8:	6e 40 90    	mov.b     [w14+6], w0
    17ea:	00 04 e0    	cp0.b     w0
    17ec:	0c 00 32    	bra       Z, 0x1806 <.L14>
    17ee:	4e 40 90    	mov.b     [w14+4], w0
    17f0:	00 80 fb    	ze        w0, w0
    17f2:	ce 40 90    	mov.b     [w14+4], w1
    17f4:	81 80 fb    	ze        w1, w1
    17f6:	1e 01 90    	mov.w     [w14+2], w2
    17f8:	81 80 40    	add.w     w1, w1, w1
    17fa:	e2 80 78    	mov.w     [w2+w1], w1
    17fc:	01 e0 a0    	bset.w    w1, #0xe
    17fe:	1e 01 90    	mov.w     [w14+2], w2
    1800:	00 00 40    	add.w     w0, w0, w0
    1802:	00 00 41    	add.w     w2, w0, w0
    1804:	01 08 78    	mov.w     w1, [w0]

00001806 <.L14>:
}
    1806:	00 80 fa    	ulnk      
    1808:	00 00 06    	return    

0000180a <_bargraph_begin>:

// 24 BARGRAPH *****************************************************************

void bargraph_begin(_BARGRAPH* ptr, uint8_t addr){
    180a:	04 00 fa    	lnk       #0x4
    180c:	00 0f 78    	mov.w     w0, [w14]
    180e:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr);
    1810:	1e 00 78    	mov.w     [w14], w0
    1812:	ae 40 90    	mov.b     [w14+2], w1
    1814:	4e ff 07    	rcall     0x16b2 <_led_begin> <.L0> <.LFB0> <.Ltext0>
}
    1816:	00 80 fa    	ulnk      
    1818:	00 00 06    	return    

0000181a <_bargraph_setBar>:

void bargraph_setBar(_BARGRAPH* ptr, uint8_t bar, uint8_t color){
    181a:	08 00 fa    	lnk       #0x8
    181c:	20 07 98    	mov.w     w0, [w14+4]
    181e:	61 47 98    	mov.b     w1, [w14+6]
    1820:	72 47 98    	mov.b     w2, [w14+7]
  uint16_t a, c;

  if (bar < 12)
    1822:	6e 40 90    	mov.b     [w14+6], w0
    1824:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1826:	07 00 3e    	bra       GTU, 0x1836 <.L18>
    c = bar / 4;
    1828:	6e 40 90    	mov.b     [w14+6], w0
    182a:	00 80 fb    	ze        w0, w0
    182c:	42 00 de    	lsr.w     w0, #0x2, w0
    182e:	00 40 78    	mov.b     w0, w0
    1830:	00 80 fb    	ze        w0, w0
    1832:	10 07 98    	mov.w     w0, [w14+2]
    1834:	08 00 37    	bra       0x1846 <.L19>

00001836 <.L18>:
  else
    c = (bar - 12) / 4;
    1836:	6e 40 90    	mov.b     [w14+6], w0
    1838:	00 80 fb    	ze        w0, w0
    183a:	6c 00 50    	sub.w     w0, #0xc, w0
    183c:	00 00 e0    	cp0.w     w0
    183e:	01 00 3d    	bra       GE, 0x1842 <.L20>
    1840:	63 00 40    	add.w     w0, #0x3, w0

00001842 <.L20>:
    1842:	42 80 de    	asr.w     w0, #0x2, w0
    1844:	10 07 98    	mov.w     w0, [w14+2]

00001846 <.L19>:

  a = bar % 4;
    1846:	6e 40 90    	mov.b     [w14+6], w0
    1848:	00 80 fb    	ze        w0, w0
    184a:	63 0f 60    	and.w     w0, #0x3, [w14]
  if (bar >= 12)
    184c:	6e 40 90    	mov.b     [w14+6], w0
    184e:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1850:	02 00 36    	bra       LEU, 0x1856 <.L21>
    a += 4;
    1852:	9e 00 78    	mov.w     [w14], w1
    1854:	64 8f 40    	add.w     w1, #0x4, [w14]

00001856 <.L21>:

  //Serial.print("Ano = "); Serial.print(a); Serial.print(" Cath = "); Serial.println(c);
  if (color == LED_RED) {
    1856:	7e 40 90    	mov.b     [w14+7], w0
    1858:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    185a:	1d 00 3a    	bra       NZ, 0x1896 <.L22>
    // Turn on red LED.
    ptr->super.displaybuffer[c] |= _BV(a);
    185c:	ae 00 90    	mov.w     [w14+4], w1
    185e:	1e 00 90    	mov.w     [w14+2], w0
    1860:	00 00 40    	add.w     w0, w0, w0
    1862:	e1 00 78    	mov.w     [w1+w0], w1
    1864:	1e 00 78    	mov.w     [w14], w0
    1866:	12 00 20    	mov.w     #0x1, w2
    1868:	00 10 dd    	sl.w      w2, w0, w0
    186a:	81 00 70    	ior.w     w0, w1, w1
    186c:	2e 01 90    	mov.w     [w14+4], w2
    186e:	1e 00 90    	mov.w     [w14+2], w0
    1870:	00 00 40    	add.w     w0, w0, w0
    1872:	00 00 41    	add.w     w2, w0, w0
    1874:	01 08 78    	mov.w     w1, [w0]
    // Turn off green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a+8);
    1876:	ae 00 90    	mov.w     [w14+4], w1
    1878:	1e 00 90    	mov.w     [w14+2], w0
    187a:	00 00 40    	add.w     w0, w0, w0
    187c:	e1 00 78    	mov.w     [w1+w0], w1
    187e:	1e 01 78    	mov.w     [w14], w2
    1880:	68 00 41    	add.w     w2, #0x8, w0
    1882:	12 00 20    	mov.w     #0x1, w2
    1884:	00 10 dd    	sl.w      w2, w0, w0
    1886:	00 80 ea    	com.w     w0, w0
    1888:	80 80 60    	and.w     w1, w0, w1
    188a:	2e 01 90    	mov.w     [w14+4], w2
    188c:	1e 00 90    	mov.w     [w14+2], w0
    188e:	00 00 40    	add.w     w0, w0, w0
    1890:	00 00 41    	add.w     w2, w0, w0
    1892:	01 08 78    	mov.w     w1, [w0]
    1894:	4c 00 37    	bra       0x192e <.L17>

00001896 <.L22>:
  } else if (color == LED_YELLOW) {
    1896:	7e 40 90    	mov.b     [w14+7], w0
    1898:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    189a:	13 00 3a    	bra       NZ, 0x18c2 <.L24>
    // Turn on red and green LED.
    ptr->super.displaybuffer[c] |= _BV(a) | _BV(a+8);
    189c:	ae 00 90    	mov.w     [w14+4], w1
    189e:	1e 00 90    	mov.w     [w14+2], w0
    18a0:	00 00 40    	add.w     w0, w0, w0
    18a2:	e1 00 78    	mov.w     [w1+w0], w1
    18a4:	1e 00 78    	mov.w     [w14], w0
    18a6:	12 00 20    	mov.w     #0x1, w2
    18a8:	00 11 dd    	sl.w      w2, w0, w2
    18aa:	9e 01 78    	mov.w     [w14], w3
    18ac:	68 80 41    	add.w     w3, #0x8, w0
    18ae:	13 00 20    	mov.w     #0x1, w3
    18b0:	00 18 dd    	sl.w      w3, w0, w0
    18b2:	02 00 70    	ior.w     w0, w2, w0
    18b4:	81 00 70    	ior.w     w0, w1, w1
    18b6:	2e 01 90    	mov.w     [w14+4], w2
    18b8:	1e 00 90    	mov.w     [w14+2], w0
    18ba:	00 00 40    	add.w     w0, w0, w0
    18bc:	00 00 41    	add.w     w2, w0, w0
    18be:	01 08 78    	mov.w     w1, [w0]
    18c0:	36 00 37    	bra       0x192e <.L17>

000018c2 <.L24>:
  } else if (color == LED_OFF) {
    18c2:	7e 40 90    	mov.b     [w14+7], w0
    18c4:	00 04 e0    	cp0.b     w0
    18c6:	14 00 3a    	bra       NZ, 0x18f0 <.L25>
    // Turn off red and green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a) & ~_BV(a+8);
    18c8:	ae 00 90    	mov.w     [w14+4], w1
    18ca:	1e 00 90    	mov.w     [w14+2], w0
    18cc:	00 00 40    	add.w     w0, w0, w0
    18ce:	e1 00 78    	mov.w     [w1+w0], w1
    18d0:	1e 00 78    	mov.w     [w14], w0
    18d2:	12 00 20    	mov.w     #0x1, w2
    18d4:	00 11 dd    	sl.w      w2, w0, w2
    18d6:	9e 01 78    	mov.w     [w14], w3
    18d8:	68 80 41    	add.w     w3, #0x8, w0
    18da:	13 00 20    	mov.w     #0x1, w3
    18dc:	00 18 dd    	sl.w      w3, w0, w0
    18de:	02 00 70    	ior.w     w0, w2, w0
    18e0:	00 80 ea    	com.w     w0, w0
    18e2:	80 80 60    	and.w     w1, w0, w1
    18e4:	2e 01 90    	mov.w     [w14+4], w2
    18e6:	1e 00 90    	mov.w     [w14+2], w0
    18e8:	00 00 40    	add.w     w0, w0, w0
    18ea:	00 00 41    	add.w     w2, w0, w0
    18ec:	01 08 78    	mov.w     w1, [w0]
    18ee:	1f 00 37    	bra       0x192e <.L17>

000018f0 <.L25>:
  } else if (color == LED_GREEN) {
    18f0:	7e 40 90    	mov.b     [w14+7], w0
    18f2:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    18f4:	1c 00 3a    	bra       NZ, 0x192e <.L17>
    // Turn on green LED.
    ptr->super.displaybuffer[c] |= _BV(a+8);
    18f6:	ae 00 90    	mov.w     [w14+4], w1
    18f8:	1e 00 90    	mov.w     [w14+2], w0
    18fa:	00 00 40    	add.w     w0, w0, w0
    18fc:	e1 00 78    	mov.w     [w1+w0], w1
    18fe:	1e 01 78    	mov.w     [w14], w2
    1900:	68 00 41    	add.w     w2, #0x8, w0
    1902:	12 00 20    	mov.w     #0x1, w2
    1904:	00 10 dd    	sl.w      w2, w0, w0
    1906:	81 00 70    	ior.w     w0, w1, w1
    1908:	2e 01 90    	mov.w     [w14+4], w2
    190a:	1e 00 90    	mov.w     [w14+2], w0
    190c:	00 00 40    	add.w     w0, w0, w0
    190e:	00 00 41    	add.w     w2, w0, w0
    1910:	01 08 78    	mov.w     w1, [w0]
    // Turn off red LED.
    ptr->super.displaybuffer[c] &= ~_BV(a);
    1912:	ae 00 90    	mov.w     [w14+4], w1
    1914:	1e 00 90    	mov.w     [w14+2], w0
    1916:	00 00 40    	add.w     w0, w0, w0
    1918:	e1 00 78    	mov.w     [w1+w0], w1
    191a:	1e 00 78    	mov.w     [w14], w0
    191c:	12 00 20    	mov.w     #0x1, w2
    191e:	00 10 dd    	sl.w      w2, w0, w0
    1920:	00 80 ea    	com.w     w0, w0
    1922:	80 80 60    	and.w     w1, w0, w1
    1924:	2e 01 90    	mov.w     [w14+4], w2
    1926:	1e 00 90    	mov.w     [w14+2], w0
    1928:	00 00 40    	add.w     w0, w0, w0
    192a:	00 00 41    	add.w     w2, w0, w0
    192c:	01 08 78    	mov.w     w1, [w0]

0000192e <.L17>:
  }
}
    192e:	00 80 fa    	ulnk      
    1930:	00 00 06    	return    

00001932 <_sevseg_writeDigitRaw>:

// 7SEGMENT ********************************************************************

// uint8_t write(_7SEGMENT* ptr, uint8_t c){
//
//   uint8_t r = 0;
//
//   if (c == '\n') ptr->position = 0;
//   if (c == '\r') ptr->position = 0;
//
//   if ((c >= '0') && (c <= '9')) {
//     sevseg_writeDigitNum(ptr, ptr->position, c-'0', 0);
//     r = 1;
//   }
//
//   ptr->position++;
//   if (ptr->position == 2) ptr->position++;
//
//   return r;
// }

void sevseg_writeDigitRaw(_7SEGMENT* ptr, uint8_t x, uint16_t bitmask){
    1932:	06 00 fa    	lnk       #0x6
    1934:	00 0f 78    	mov.w     w0, [w14]
    1936:	21 47 98    	mov.b     w1, [w14+2]
    1938:	22 07 98    	mov.w     w2, [w14+4]
  if (x > 4) return;
    193a:	2e 40 90    	mov.b     [w14+2], w0
    193c:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    193e:	08 00 3e    	bra       GTU, 0x1950 <.L29>
  ptr->super.displaybuffer[x] = bitmask;
    1940:	2e 40 90    	mov.b     [w14+2], w0
    1942:	00 80 fb    	ze        w0, w0
    1944:	9e 00 78    	mov.w     [w14], w1
    1946:	00 00 40    	add.w     w0, w0, w0
    1948:	00 80 40    	add.w     w1, w0, w0
    194a:	ae 00 90    	mov.w     [w14+4], w1
    194c:	01 08 78    	mov.w     w1, [w0]
    194e:	01 00 37    	bra       0x1952 <.L26>

00001950 <.L29>:
    1950:	00 00 00    	nop       

00001952 <.L26>:
}
    1952:	00 80 fa    	ulnk      
    1954:	00 00 06    	return    

00001956 <_sevseg_writeDigitNum>:

void sevseg_writeDigitNum(_7SEGMENT* ptr, uint8_t x, uint8_t num, uint8_t dot){
    1956:	08 00 fa    	lnk       #0x8
    1958:	10 07 98    	mov.w     w0, [w14+2]
    195a:	41 47 98    	mov.b     w1, [w14+4]
    195c:	52 47 98    	mov.b     w2, [w14+5]
    195e:	63 47 98    	mov.b     w3, [w14+6]
  if (x > 4) return;
    1960:	4e 40 90    	mov.b     [w14+4], w0
    1962:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1964:	11 00 3e    	bra       GTU, 0x1988 <.L33>
	uint16_t zero = 0x0000;
    1966:	00 00 eb    	clr.w     w0
    1968:	00 0f 78    	mov.w     w0, [w14]
  sevseg_writeDigitRaw(ptr, x, (numbertable[num] | (dot << 7)));
    196a:	5e 40 90    	mov.b     [w14+5], w0
    196c:	00 80 fb    	ze        w0, w0
    196e:	80 00 40    	add.w     w0, w0, w1
    1970:	20 59 29    	mov.w     #0x9592, w0
    1972:	00 80 40    	add.w     w1, w0, w0
    1974:	90 00 78    	mov.w     [w0], w1
    1976:	6e 40 90    	mov.b     [w14+6], w0
    1978:	00 80 fb    	ze        w0, w0
    197a:	47 00 dd    	sl.w      w0, #0x7, w0
    197c:	01 00 70    	ior.w     w0, w1, w0
    197e:	00 01 78    	mov.w     w0, w2
    1980:	ce 40 90    	mov.b     [w14+4], w1
    1982:	1e 00 90    	mov.w     [w14+2], w0
    1984:	d6 ff 07    	rcall     0x1932 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    1986:	01 00 37    	bra       0x198a <.L30>

00001988 <.L33>:
    1988:	00 00 00    	nop       

0000198a <.L30>:
}
    198a:	00 80 fa    	ulnk      
    198c:	00 00 06    	return    

0000198e <_sevseg_drawColon>:

void sevseg_drawColon(_7SEGMENT* ptr, uint8_t state){
    198e:	04 00 fa    	lnk       #0x4
    1990:	00 0f 78    	mov.w     w0, [w14]
    1992:	21 47 98    	mov.b     w1, [w14+2]
  if (state)
    1994:	2e 40 90    	mov.b     [w14+2], w0
    1996:	00 04 e0    	cp0.b     w0
    1998:	04 00 32    	bra       Z, 0x19a2 <.L35>
    ptr->super.displaybuffer[2] = 0x2;
    199a:	1e 00 78    	mov.w     [w14], w0
    199c:	21 00 20    	mov.w     #0x2, w1
    199e:	21 00 98    	mov.w     w1, [w0+4]
    19a0:	03 00 37    	bra       0x19a8 <.L34>

000019a2 <.L35>:
  else
    ptr->super.displaybuffer[2] = 0;
    19a2:	1e 00 78    	mov.w     [w14], w0
    19a4:	80 00 eb    	clr.w     w1
    19a6:	21 00 98    	mov.w     w1, [w0+4]

000019a8 <.L34>:
}
    19a8:	00 80 fa    	ulnk      
    19aa:	00 00 06    	return    

000019ac <_sevseg_printNumber>:

void sevseg_printNumber(_7SEGMENT* ptr, long n, uint8_t base){
    19ac:	08 00 fa    	lnk       #0x8
    19ae:	00 0f 78    	mov.w     w0, [w14]
    19b0:	12 07 98    	mov.w     w2, [w14+2]
    19b2:	23 07 98    	mov.w     w3, [w14+4]
    19b4:	61 47 98    	mov.b     w1, [w14+6]
  sevseg_printFloat(ptr, n, 0, base);
    19b6:	1e 00 90    	mov.w     [w14+2], w0
    19b8:	ae 00 90    	mov.w     [w14+4], w1
    19ba:	f4 fc 07    	rcall     0x13a4 <___floatsisf>
    19bc:	00 01 be    	mov.d     w0, w2
    19be:	6e 42 90    	mov.b     [w14+6], w4
    19c0:	80 40 eb    	clr.b     w1
    19c2:	1e 00 78    	mov.w     [w14], w0
    19c4:	02 00 07    	rcall     0x19ca <_sevseg_printFloat> <.LFB14> <.LFE13>
}
    19c6:	00 80 fa    	ulnk      
    19c8:	00 00 06    	return    

000019ca <_sevseg_printFloat>:

void sevseg_printFloat(_7SEGMENT* ptr, double n, uint8_t fracDigits, uint8_t base){
    19ca:	1c 00 fa    	lnk       #0x1c
    19cc:	88 1f 78    	mov.w     w8, [w15++]
    19ce:	20 0f 98    	mov.w     w0, [w14+20]
    19d0:	32 0f 98    	mov.w     w2, [w14+22]
    19d2:	43 0f 98    	mov.w     w3, [w14+24]
    19d4:	21 5f 98    	mov.b     w1, [w14+26]
    19d6:	34 5f 98    	mov.b     w4, [w14+27]
  uint8_t numericDigits = 4;   // available digits on display
    19d8:	40 c0 b3    	mov.b     #0x4, w0
    19da:	00 4f 78    	mov.b     w0, [w14]
  uint8_t isNegative = 0;  // true if the number is negative
    19dc:	00 40 eb    	clr.b     w0
    19de:	10 47 98    	mov.b     w0, [w14+1]

  // is the number negative?
  if(n < 0) {
    19e0:	18 c0 b3    	mov.b     #0x1, w8
    19e2:	60 11 b8    	mul.uu    w2, #0x0, w2
    19e4:	3e 08 90    	mov.w     [w14+22], w0
    19e6:	ce 08 90    	mov.w     [w14+24], w1
    19e8:	c0 fc 07    	rcall     0x136a <___eqsf2> <___lesf2> <___ltsf2>
    19ea:	00 00 e0    	cp0.w     w0
    19ec:	01 00 35    	bra       LT, 0x19f0 <.L39>
    19ee:	00 44 eb    	clr.b     w8

000019f0 <.L39>:
    19f0:	08 04 e0    	cp0.b     w8
    19f2:	08 00 32    	bra       Z, 0x1a04 <.L40>
    isNegative = 1;  // need to draw sign later
    19f4:	10 c0 b3    	mov.b     #0x1, w0
    19f6:	10 47 98    	mov.b     w0, [w14+1]
    --numericDigits;    // the sign will take up one digit
    19f8:	1e 4f e9    	dec.b     [w14], [w14]
    n *= -1;            // pretend the number is positive
    19fa:	3e 08 90    	mov.w     [w14+22], w0
    19fc:	ce 08 90    	mov.w     [w14+24], w1
    19fe:	01 f0 a2    	btg.w     w1, #0xf
    1a00:	30 0f 98    	mov.w     w0, [w14+22]
    1a02:	41 0f 98    	mov.w     w1, [w14+24]

00001a04 <.L40>:
  }

  // calculate the factor required to shift all fractional digits
  // into the integer part of the number
  double toIntFactor = 1.0;
    1a04:	00 00 20    	mov.w     #0x0, w0
    1a06:	01 f8 23    	mov.w     #0x3f80, w1
    1a08:	10 07 98    	mov.w     w0, [w14+2]
    1a0a:	21 07 98    	mov.w     w1, [w14+4]
	int i = 0;
    1a0c:	00 00 eb    	clr.w     w0
    1a0e:	30 07 98    	mov.w     w0, [w14+6]
  for(i = 0; i < fracDigits; ++i) toIntFactor *= base;
    1a10:	00 00 eb    	clr.w     w0
    1a12:	30 07 98    	mov.w     w0, [w14+6]
    1a14:	0d 00 37    	bra       0x1a30 <.L41>

00001a16 <.L42>:
    1a16:	3e 58 90    	mov.b     [w14+27], w0
    1a18:	00 80 fb    	ze        w0, w0
    1a1a:	cf 80 de    	asr.w     w0, #0xf, w1
    1a1c:	c3 fc 07    	rcall     0x13a4 <___floatsisf>
    1a1e:	00 01 be    	mov.d     w0, w2
    1a20:	1e 00 90    	mov.w     [w14+2], w0
    1a22:	ae 00 90    	mov.w     [w14+4], w1
    1a24:	15 fd 07    	rcall     0x1450 <___mulsf3>
    1a26:	10 07 98    	mov.w     w0, [w14+2]
    1a28:	21 07 98    	mov.w     w1, [w14+4]
    1a2a:	3e 00 90    	mov.w     [w14+6], w0
    1a2c:	00 00 e8    	inc.w     w0, w0
    1a2e:	30 07 98    	mov.w     w0, [w14+6]

00001a30 <.L41>:
    1a30:	2e 58 90    	mov.b     [w14+26], w0
    1a32:	80 80 fb    	ze        w0, w1
    1a34:	3e 00 90    	mov.w     [w14+6], w0
    1a36:	80 8f 50    	sub.w     w1, w0, [w15]
    1a38:	ee ff 3c    	bra       GT, 0x1a16 <.L42>

  // create integer containing digits to display by applying
  // shifting factor and rounding adjustment
  uint32_t displayNumber = n * toIntFactor + 0.5;
    1a3a:	1e 01 90    	mov.w     [w14+2], w2
    1a3c:	ae 01 90    	mov.w     [w14+4], w3
    1a3e:	3e 08 90    	mov.w     [w14+22], w0
    1a40:	ce 08 90    	mov.w     [w14+24], w1
    1a42:	06 fd 07    	rcall     0x1450 <___mulsf3>
    1a44:	02 00 20    	mov.w     #0x0, w2
    1a46:	03 f0 23    	mov.w     #0x3f00, w3
    1a48:	f1 fb 07    	rcall     0x122c <___addsf3>
    1a4a:	91 fc 07    	rcall     0x136e <___fixunssfsi>
    1a4c:	40 07 98    	mov.w     w0, [w14+8]
    1a4e:	51 07 98    	mov.w     w1, [w14+10]

  // calculate upper bound on displayNumber given
  // available digits on display
  uint32_t tooBig = 1;
    1a50:	10 00 20    	mov.w     #0x1, w0
    1a52:	01 00 20    	mov.w     #0x0, w1
    1a54:	60 07 98    	mov.w     w0, [w14+12]
    1a56:	71 07 98    	mov.w     w1, [w14+14]
  for(i = 0; i < numericDigits; ++i) tooBig *= base;
    1a58:	00 00 eb    	clr.w     w0
    1a5a:	30 07 98    	mov.w     w0, [w14+6]
    1a5c:	15 00 37    	bra       0x1a88 <.L43>

00001a5e <.L44>:
    1a5e:	3e 58 90    	mov.b     [w14+27], w0
    1a60:	00 80 fb    	ze        w0, w0
    1a62:	80 00 eb    	clr.w     w1
    1a64:	7e 01 90    	mov.w     [w14+14], w2
    1a66:	00 91 b9    	mul.ss    w2, w0, w2
    1a68:	02 01 78    	mov.w     w2, w2
    1a6a:	ee 01 90    	mov.w     [w14+12], w3
    1a6c:	01 9a b9    	mul.ss    w3, w1, w4
    1a6e:	84 01 78    	mov.w     w4, w3
    1a70:	03 01 41    	add.w     w2, w3, w2
    1a72:	ee 01 90    	mov.w     [w14+12], w3
    1a74:	00 18 b8    	mul.uu    w3, w0, w0
    1a76:	01 01 41    	add.w     w2, w1, w2
    1a78:	82 00 78    	mov.w     w2, w1
    1a7a:	60 07 98    	mov.w     w0, [w14+12]
    1a7c:	71 07 98    	mov.w     w1, [w14+14]
    1a7e:	60 07 98    	mov.w     w0, [w14+12]
    1a80:	71 07 98    	mov.w     w1, [w14+14]
    1a82:	3e 00 90    	mov.w     [w14+6], w0
    1a84:	00 00 e8    	inc.w     w0, w0
    1a86:	30 07 98    	mov.w     w0, [w14+6]

00001a88 <.L43>:
    1a88:	9e 80 fb    	ze        [w14], w1
    1a8a:	3e 00 90    	mov.w     [w14+6], w0
    1a8c:	80 8f 50    	sub.w     w1, w0, [w15]
    1a8e:	e7 ff 3c    	bra       GT, 0x1a5e <.L44>

  // if displayNumber is too large, try fewer fractional digits
  while(displayNumber >= tooBig) {
    1a90:	18 00 37    	bra       0x1ac2 <.L45>

00001a92 <.L46>:
    --fracDigits;
    1a92:	2e 58 90    	mov.b     [w14+26], w0
    1a94:	00 40 e9    	dec.b     w0, w0
    1a96:	20 5f 98    	mov.b     w0, [w14+26]
    toIntFactor /= base;
    1a98:	3e 58 90    	mov.b     [w14+27], w0
    1a9a:	00 80 fb    	ze        w0, w0
    1a9c:	cf 80 de    	asr.w     w0, #0xf, w1
    1a9e:	82 fc 07    	rcall     0x13a4 <___floatsisf>
    1aa0:	00 01 be    	mov.d     w0, w2
    1aa2:	1e 00 90    	mov.w     [w14+2], w0
    1aa4:	ae 00 90    	mov.w     [w14+4], w1
    1aa6:	1f fc 07    	rcall     0x12e6 <___divsf3>
    1aa8:	10 07 98    	mov.w     w0, [w14+2]
    1aaa:	21 07 98    	mov.w     w1, [w14+4]
    displayNumber = n * toIntFactor + 0.5;
    1aac:	1e 01 90    	mov.w     [w14+2], w2
    1aae:	ae 01 90    	mov.w     [w14+4], w3
    1ab0:	3e 08 90    	mov.w     [w14+22], w0
    1ab2:	ce 08 90    	mov.w     [w14+24], w1
    1ab4:	cd fc 07    	rcall     0x1450 <___mulsf3>
    1ab6:	02 00 20    	mov.w     #0x0, w2
    1ab8:	03 f0 23    	mov.w     #0x3f00, w3
    1aba:	b8 fb 07    	rcall     0x122c <___addsf3>
    1abc:	58 fc 07    	rcall     0x136e <___fixunssfsi>
    1abe:	40 07 98    	mov.w     w0, [w14+8]
    1ac0:	51 07 98    	mov.w     w1, [w14+10]

00001ac2 <.L45>:
    1ac2:	4e 01 90    	mov.w     [w14+8], w2
    1ac4:	de 01 90    	mov.w     [w14+10], w3
    1ac6:	6e 00 90    	mov.w     [w14+12], w0
    1ac8:	fe 00 90    	mov.w     [w14+14], w1
    1aca:	80 0f 51    	sub.w     w2, w0, [w15]
    1acc:	81 8f 59    	subb.w    w3, w1, [w15]
    1ace:	e1 ff 31    	bra       C, 0x1a92 <.L46>
  }

  // did toIntFactor shift the decimal off the display?
  if (toIntFactor < 1) {
    1ad0:	18 c0 b3    	mov.b     #0x1, w8
    1ad2:	02 00 20    	mov.w     #0x0, w2
    1ad4:	03 f8 23    	mov.w     #0x3f80, w3
    1ad6:	1e 00 90    	mov.w     [w14+2], w0
    1ad8:	ae 00 90    	mov.w     [w14+4], w1
    1ada:	47 fc 07    	rcall     0x136a <___eqsf2> <___lesf2> <___ltsf2>
    1adc:	00 00 e0    	cp0.w     w0
    1ade:	01 00 35    	bra       LT, 0x1ae2 <.L47>
    1ae0:	00 44 eb    	clr.b     w8

00001ae2 <.L47>:
    1ae2:	08 04 e0    	cp0.b     w8
    1ae4:	03 00 32    	bra       Z, 0x1aec <.L48> <.LBB2>
    sevseg_printError(ptr);
    1ae6:	2e 08 90    	mov.w     [w14+20], w0
    1ae8:	6c 00 07    	rcall     0x1bc2 <_sevseg_printError> <.LFB15> <.LFE14>
    1aea:	68 00 37    	bra       0x1bbc <.L38> <.LBE2>

00001aec <.L48>:
  } else {
    // otherwise, display the number
    int8_t displayPos = 4;
    1aec:	40 c0 b3    	mov.b     #0x4, w0
    1aee:	00 57 98    	mov.b     w0, [w14+16]

    if (displayNumber)  //if displayNumber is not 0
    1af0:	4e 00 90    	mov.w     [w14+8], w0
    1af2:	de 00 90    	mov.w     [w14+10], w1
    1af4:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1af6:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1af8:	41 00 32    	bra       Z, 0x1b7c <.L50> <.LBE3>

00001afa <.LBB3>:
    {
			uint8_t i;
      for(i = 0; displayNumber || i <= fracDigits; ++i) {
    1afa:	00 40 eb    	clr.b     w0
    1afc:	10 57 98    	mov.b     w0, [w14+17]
    1afe:	34 00 37    	bra       0x1b68 <.L51>

00001b00 <.L55>:
        uint8_t displayDecimal = (fracDigits != 0 && i == fracDigits);
    1b00:	2e 58 90    	mov.b     [w14+26], w0
    1b02:	00 04 e0    	cp0.b     w0
    1b04:	06 00 32    	bra       Z, 0x1b12 <.L52>
    1b06:	9e 50 90    	mov.b     [w14+17], w1
    1b08:	2e 58 90    	mov.b     [w14+26], w0
    1b0a:	80 cf 50    	sub.b     w1, w0, [w15]
    1b0c:	02 00 3a    	bra       NZ, 0x1b12 <.L52>
    1b0e:	10 00 20    	mov.w     #0x1, w0
    1b10:	01 00 37    	bra       0x1b14 <.L53>

00001b12 <.L52>:
    1b12:	00 00 eb    	clr.w     w0

00001b14 <.L53>:
    1b14:	20 57 98    	mov.b     w0, [w14+18]
        sevseg_writeDigitNum(ptr, displayPos--, displayNumber % base, displayDecimal);
    1b16:	3e 58 90    	mov.b     [w14+27], w0
    1b18:	00 80 fb    	ze        w0, w0
    1b1a:	80 00 eb    	clr.w     w1
    1b1c:	4e 02 90    	mov.w     [w14+8], w4
    1b1e:	de 02 90    	mov.w     [w14+10], w5
    1b20:	00 01 be    	mov.d     w0, w2
    1b22:	04 00 be    	mov.d     w4, w0
    1b24:	d9 fc 07    	rcall     0x14d8 <___umodsi3>
    1b26:	80 40 78    	mov.b     w0, w1
    1b28:	0e 50 90    	mov.b     [w14+16], w0
    1b2a:	0e 51 90    	mov.b     [w14+16], w2
    1b2c:	02 41 e9    	dec.b     w2, w2
    1b2e:	02 57 98    	mov.b     w2, [w14+16]
    1b30:	ae 51 90    	mov.b     [w14+18], w3
    1b32:	01 41 78    	mov.b     w1, w2
    1b34:	80 40 78    	mov.b     w0, w1
    1b36:	2e 08 90    	mov.w     [w14+20], w0
    1b38:	0e ff 07    	rcall     0x1956 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
        if(displayPos == 2) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    1b3a:	0e 50 90    	mov.b     [w14+16], w0
    1b3c:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1b3e:	08 00 3a    	bra       NZ, 0x1b50 <.L54>
    1b40:	0e 50 90    	mov.b     [w14+16], w0
    1b42:	8e 50 90    	mov.b     [w14+16], w1
    1b44:	81 40 e9    	dec.b     w1, w1
    1b46:	01 57 98    	mov.b     w1, [w14+16]
    1b48:	00 01 eb    	clr.w     w2
    1b4a:	80 40 78    	mov.b     w0, w1
    1b4c:	2e 08 90    	mov.w     [w14+20], w0
    1b4e:	f1 fe 07    	rcall     0x1932 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00001b50 <.L54>:
        displayNumber /= base;
    1b50:	3e 58 90    	mov.b     [w14+27], w0
    1b52:	00 80 fb    	ze        w0, w0
    1b54:	80 00 eb    	clr.w     w1
    1b56:	00 01 be    	mov.d     w0, w2
    1b58:	4e 00 90    	mov.w     [w14+8], w0
    1b5a:	de 00 90    	mov.w     [w14+10], w1
    1b5c:	ad fc 07    	rcall     0x14b8 <___udivsi3>
    1b5e:	40 07 98    	mov.w     w0, [w14+8]
    1b60:	51 07 98    	mov.w     w1, [w14+10]

00001b62 <.LBE4>:
    1b62:	1e 50 90    	mov.b     [w14+17], w0
    1b64:	00 40 e8    	inc.b     w0, w0
    1b66:	10 57 98    	mov.b     w0, [w14+17]

00001b68 <.L51>:
    1b68:	4e 00 90    	mov.w     [w14+8], w0
    1b6a:	de 00 90    	mov.w     [w14+10], w1
    1b6c:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1b6e:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1b70:	c7 ff 3a    	bra       NZ, 0x1b00 <.L55> <.LBB4>
    1b72:	9e 50 90    	mov.b     [w14+17], w1
    1b74:	2e 58 90    	mov.b     [w14+26], w0
    1b76:	80 cf 50    	sub.b     w1, w0, [w15]
    1b78:	c3 ff 36    	bra       LEU, 0x1b00 <.L55> <.LBB4>
    1b7a:	09 00 37    	bra       0x1b8e <.L56>

00001b7c <.L50>:
      }
    }
    else {
      sevseg_writeDigitNum(ptr, displayPos--, 0, 0);
    1b7c:	0e 50 90    	mov.b     [w14+16], w0
    1b7e:	8e 50 90    	mov.b     [w14+16], w1
    1b80:	81 40 e9    	dec.b     w1, w1
    1b82:	01 57 98    	mov.b     w1, [w14+16]
    1b84:	80 41 eb    	clr.b     w3
    1b86:	00 41 eb    	clr.b     w2
    1b88:	80 40 78    	mov.b     w0, w1
    1b8a:	2e 08 90    	mov.w     [w14+20], w0
    1b8c:	e4 fe 07    	rcall     0x1956 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

00001b8e <.L56>:
    }

    // display negative sign if negative
    if(isNegative) sevseg_writeDigitRaw(ptr, displayPos--, 0x40);
    1b8e:	1e 40 90    	mov.b     [w14+1], w0
    1b90:	00 04 e0    	cp0.b     w0
    1b92:	11 00 32    	bra       Z, 0x1bb6 <.L58>
    1b94:	0e 50 90    	mov.b     [w14+16], w0
    1b96:	8e 50 90    	mov.b     [w14+16], w1
    1b98:	81 40 e9    	dec.b     w1, w1
    1b9a:	01 57 98    	mov.b     w1, [w14+16]
    1b9c:	02 04 20    	mov.w     #0x40, w2
    1b9e:	80 40 78    	mov.b     w0, w1
    1ba0:	2e 08 90    	mov.w     [w14+20], w0
    1ba2:	c7 fe 07    	rcall     0x1932 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

    // clear remaining display positions
    while(displayPos >= 0) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    1ba4:	08 00 37    	bra       0x1bb6 <.L58>

00001ba6 <.L59>:
    1ba6:	0e 50 90    	mov.b     [w14+16], w0
    1ba8:	8e 50 90    	mov.b     [w14+16], w1
    1baa:	81 40 e9    	dec.b     w1, w1
    1bac:	01 57 98    	mov.b     w1, [w14+16]
    1bae:	00 01 eb    	clr.w     w2
    1bb0:	80 40 78    	mov.b     w0, w1
    1bb2:	2e 08 90    	mov.w     [w14+20], w0
    1bb4:	be fe 07    	rcall     0x1932 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00001bb6 <.L58>:
    1bb6:	0e 50 90    	mov.b     [w14+16], w0
    1bb8:	00 04 e0    	cp0.b     w0
    1bba:	f5 ff 3d    	bra       GE, 0x1ba6 <.L59>

00001bbc <.L38>:
  }
}
    1bbc:	4f 04 78    	mov.w     [--w15], w8
    1bbe:	00 80 fa    	ulnk      
    1bc0:	00 00 06    	return    

00001bc2 <_sevseg_printError>:

void sevseg_printError(_7SEGMENT* ptr){
    1bc2:	04 00 fa    	lnk       #0x4
    1bc4:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
  for(i = 0; i < SEVENSEG_DIGITS; ++i) {
    1bc6:	00 40 eb    	clr.b     w0
    1bc8:	00 4f 78    	mov.b     w0, [w14]
    1bca:	0b 00 37    	bra       0x1be2 <.L61>

00001bcc <.L64>:
    sevseg_writeDigitRaw(ptr, i, (i == 2 ? 0x00 : 0x40));
    1bcc:	1e 40 78    	mov.b     [w14], w0
    1bce:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1bd0:	02 00 3a    	bra       NZ, 0x1bd6 <.L62>
    1bd2:	00 00 eb    	clr.w     w0
    1bd4:	01 00 37    	bra       0x1bd8 <.L63>

00001bd6 <.L62>:
    1bd6:	00 04 20    	mov.w     #0x40, w0

00001bd8 <.L63>:
    1bd8:	00 01 78    	mov.w     w0, w2
    1bda:	9e 40 78    	mov.b     [w14], w1
    1bdc:	1e 00 90    	mov.w     [w14+2], w0
    1bde:	a9 fe 07    	rcall     0x1932 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    1be0:	1e 4f e8    	inc.b     [w14], [w14]

00001be2 <.L61>:
    1be2:	1e 40 78    	mov.b     [w14], w0
    1be4:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1be6:	f2 ff 36    	bra       LEU, 0x1bcc <.L64>
  }
}
    1be8:	00 80 fa    	ulnk      
    1bea:	00 00 06    	return    

00001bec <_sevseg_writeColon>:


void sevseg_writeColon(_7SEGMENT* ptr){
    1bec:	02 00 fa    	lnk       #0x2
    1bee:	00 0f 78    	mov.w     w0, [w14]
  /*
  Wire.beginTransmission(i2c_addr);
  Wire.write((uint8_t)0x04);

  Wire.write(displaybuffer[2] & 0xFF);
  Wire.write(displaybuffer[2] >> 8);

  Wire.endTransmission();
  */
  i2c_start();
    1bf0:	33 00 07    	rcall     0x1c58 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->super.i2c_addr);
    1bf2:	1e 00 78    	mov.w     [w14], w0
    1bf4:	00 50 90    	mov.b     [w0+16], w0
    1bf6:	00 80 fb    	ze        w0, w0
    1bf8:	7e 00 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte((uint8_t)0x04); // start at address $02
    1bfa:	40 00 20    	mov.w     #0x4, w0
    1bfc:	7c 00 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] & 0xFF);
    1bfe:	1e 00 78    	mov.w     [w14], w0
    1c00:	20 00 90    	mov.w     [w0+4], w0
    1c02:	80 00 78    	mov.w     w0, w1
    1c04:	f0 0f 20    	mov.w     #0xff, w0
    1c06:	00 80 60    	and.w     w1, w0, w0
    1c08:	76 00 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] >> 8);
    1c0a:	1e 00 78    	mov.w     [w14], w0
    1c0c:	20 00 90    	mov.w     [w0+4], w0
    1c0e:	48 00 de    	lsr.w     w0, #0x8, w0
    1c10:	72 00 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1c12:	56 00 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1c14:	00 80 fa    	ulnk      
    1c16:	00 00 06    	return    

00001c18 <_delay_by_nop>:
    1c18:	08 00 fa    	lnk       #0x8
    1c1a:	20 07 98    	mov.w     w0, [w14+4]
    1c1c:	31 07 98    	mov.w     w1, [w14+6]
    1c1e:	60 00 b8    	mul.uu    w0, #0x0, w0
    1c20:	00 8f be    	mov.d     w0, [w14]
    1c22:	05 00 37    	bra       0x1c2e <.L2>

00001c24 <.L3>:
    1c24:	00 00 00    	nop       
    1c26:	12 00 20    	mov.w     #0x1, w2
    1c28:	03 00 20    	mov.w     #0x0, w3
    1c2a:	1e 0f 41    	add.w     w2, [w14], [w14]
    1c2c:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00001c2e <.L2>:
    1c2e:	2e 00 90    	mov.w     [w14+4], w0
    1c30:	be 00 90    	mov.w     [w14+6], w1
    1c32:	1e 01 be    	mov.d     [w14], w2
    1c34:	80 0f 51    	sub.w     w2, w0, [w15]
    1c36:	81 8f 59    	subb.w    w3, w1, [w15]
    1c38:	f5 ff 39    	bra       NC, 0x1c24 <.L3>
    1c3a:	00 80 fa    	ulnk      
    1c3c:	00 00 06    	return    

00001c3e <_i2c_init>:
    1c3e:	04 00 fa    	lnk       #0x4
    1c40:	10 07 98    	mov.w     w0, [w14+2]
    1c42:	1e 00 90    	mov.w     [w14+2], w0
    1c44:	a0 13 88    	mov.w     w0, 0x274
    1c46:	77 e2 a9    	bclr.b    0x277, #0x7
    1c48:	77 22 a8    	bset.b    0x277, #0x1
    1c4a:	8e a0 a9    	bclr.b    0x8e, #0x5
    1c4c:	77 e2 a8    	bset.b    0x277, #0x7
    1c4e:	80 13 80    	mov.w     0x270, w0
    1c50:	00 0f 78    	mov.w     w0, [w14]
    1c52:	36 00 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1c54:	00 80 fa    	ulnk      
    1c56:	00 00 06    	return    

00001c58 <_i2c_start>:
    1c58:	02 00 fa    	lnk       #0x2
    1c5a:	00 00 eb    	clr.w     w0
    1c5c:	00 0f 78    	mov.w     w0, [w14]
    1c5e:	76 a2 a9    	bclr.b    0x276, #0x5
    1c60:	a0 00 20    	mov.w     #0xa, w0
    1c62:	01 00 20    	mov.w     #0x0, w1
    1c64:	d9 ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1c66:	76 02 a8    	bset.b    0x276, #0x0
    1c68:	00 00 00    	nop       
    1c6a:	07 00 37    	bra       0x1c7a <.L6>

00001c6c <.L8>:
    1c6c:	10 00 20    	mov.w     #0x1, w0
    1c6e:	01 00 20    	mov.w     #0x0, w1
    1c70:	d3 ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1c72:	1e 0f e8    	inc.w     [w14], [w14]
    1c74:	1e 00 78    	mov.w     [w14], w0
    1c76:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1c78:	05 00 3c    	bra       GT, 0x1c84 <.L9>

00001c7a <.L6>:
    1c7a:	b0 13 80    	mov.w     0x276, w0
    1c7c:	61 00 60    	and.w     w0, #0x1, w0
    1c7e:	00 00 e0    	cp0.w     w0
    1c80:	f5 ff 3a    	bra       NZ, 0x1c6c <.L8>
    1c82:	01 00 37    	bra       0x1c86 <.L7>

00001c84 <.L9>:
    1c84:	00 00 00    	nop       

00001c86 <.L7>:
    1c86:	20 00 20    	mov.w     #0x2, w0
    1c88:	01 00 20    	mov.w     #0x0, w1
    1c8a:	c6 ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1c8c:	00 80 fa    	ulnk      
    1c8e:	00 00 06    	return    

00001c90 <_i2c_restart>:
    1c90:	02 00 fa    	lnk       #0x2
    1c92:	00 00 eb    	clr.w     w0
    1c94:	00 0f 78    	mov.w     w0, [w14]
    1c96:	76 22 a8    	bset.b    0x276, #0x1
    1c98:	00 00 00    	nop       
    1c9a:	07 00 37    	bra       0x1caa <.L11>

00001c9c <.L13>:
    1c9c:	10 00 20    	mov.w     #0x1, w0
    1c9e:	01 00 20    	mov.w     #0x0, w1
    1ca0:	bb ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1ca2:	1e 0f e8    	inc.w     [w14], [w14]
    1ca4:	1e 00 78    	mov.w     [w14], w0
    1ca6:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1ca8:	05 00 3c    	bra       GT, 0x1cb4 <.L14>

00001caa <.L11>:
    1caa:	b0 13 80    	mov.w     0x276, w0
    1cac:	62 00 60    	and.w     w0, #0x2, w0
    1cae:	00 00 e0    	cp0.w     w0
    1cb0:	f5 ff 3a    	bra       NZ, 0x1c9c <.L13>
    1cb2:	01 00 37    	bra       0x1cb6 <.L12>

00001cb4 <.L14>:
    1cb4:	00 00 00    	nop       

00001cb6 <.L12>:
    1cb6:	20 00 20    	mov.w     #0x2, w0
    1cb8:	01 00 20    	mov.w     #0x0, w1
    1cba:	ae ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1cbc:	00 80 fa    	ulnk      
    1cbe:	00 00 06    	return    

00001cc0 <_reset_i2c_bus>:
    1cc0:	02 00 fa    	lnk       #0x2
    1cc2:	00 00 eb    	clr.w     w0
    1cc4:	00 0f 78    	mov.w     w0, [w14]
    1cc6:	76 42 a8    	bset.b    0x276, #0x2
    1cc8:	07 00 37    	bra       0x1cd8 <.L16>

00001cca <.L18>:
    1cca:	10 00 20    	mov.w     #0x1, w0
    1ccc:	01 00 20    	mov.w     #0x0, w1
    1cce:	a4 ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1cd0:	1e 0f e8    	inc.w     [w14], [w14]
    1cd2:	1e 00 78    	mov.w     [w14], w0
    1cd4:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1cd6:	05 00 3c    	bra       GT, 0x1ce2 <.L19>

00001cd8 <.L16>:
    1cd8:	b0 13 80    	mov.w     0x276, w0
    1cda:	64 00 60    	and.w     w0, #0x4, w0
    1cdc:	00 00 e0    	cp0.w     w0
    1cde:	f5 ff 3a    	bra       NZ, 0x1cca <.L18>
    1ce0:	01 00 37    	bra       0x1ce4 <.L17>

00001ce2 <.L19>:
    1ce2:	00 00 00    	nop       

00001ce4 <.L17>:
    1ce4:	76 62 a9    	bclr.b    0x276, #0x3
    1ce6:	8e a0 a9    	bclr.b    0x8e, #0x5
    1ce8:	78 e2 a9    	bclr.b    0x278, #0x7
    1cea:	79 42 a9    	bclr.b    0x279, #0x2
    1cec:	40 01 20    	mov.w     #0x14, w0
    1cee:	01 00 20    	mov.w     #0x0, w1
    1cf0:	93 ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1cf2:	00 80 fa    	ulnk      
    1cf4:	00 00 06    	return    

00001cf6 <_send_i2c_byte>:
    1cf6:	04 00 fa    	lnk       #0x4
    1cf8:	10 07 98    	mov.w     w0, [w14+2]
    1cfa:	00 00 00    	nop       

00001cfc <.L21>:
    1cfc:	c0 13 80    	mov.w     0x278, w0
    1cfe:	61 00 60    	and.w     w0, #0x1, w0
    1d00:	00 00 e0    	cp0.w     w0
    1d02:	fc ff 3a    	bra       NZ, 0x1cfc <.L21>
    1d04:	8e a0 a9    	bclr.b    0x8e, #0x5
    1d06:	1e 00 90    	mov.w     [w14+2], w0
    1d08:	90 13 88    	mov.w     w0, 0x272
    1d0a:	00 00 eb    	clr.w     w0
    1d0c:	00 0f 78    	mov.w     w0, [w14]
    1d0e:	09 00 37    	bra       0x1d22 <.L22>

00001d10 <.L25>:
    1d10:	c1 13 80    	mov.w     0x278, w1
    1d12:	00 00 24    	mov.w     #0x4000, w0
    1d14:	00 80 60    	and.w     w1, w0, w0
    1d16:	00 00 e0    	cp0.w     w0
    1d18:	09 00 32    	bra       Z, 0x1d2c <.L29>
    1d1a:	10 00 20    	mov.w     #0x1, w0
    1d1c:	01 00 20    	mov.w     #0x0, w1
    1d1e:	7c ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1d20:	1e 0f e8    	inc.w     [w14], [w14]

00001d22 <.L22>:
    1d22:	30 1f 20    	mov.w     #0x1f3, w0
    1d24:	9e 00 78    	mov.w     [w14], w1
    1d26:	80 8f 50    	sub.w     w1, w0, [w15]
    1d28:	f3 ff 34    	bra       LE, 0x1d10 <.L25>
    1d2a:	01 00 37    	bra       0x1d2e <.L24>

00001d2c <.L29>:
    1d2c:	00 00 00    	nop       

00001d2e <.L24>:
    1d2e:	40 1f 20    	mov.w     #0x1f4, w0
    1d30:	9e 00 78    	mov.w     [w14], w1
    1d32:	80 8f 50    	sub.w     w1, w0, [w15]
    1d34:	02 00 3a    	bra       NZ, 0x1d3a <.L26>
    1d36:	10 c0 b3    	mov.b     #0x1, w0
    1d38:	0c 00 37    	bra       0x1d52 <.L27>

00001d3a <.L26>:
    1d3a:	c1 13 80    	mov.w     0x278, w1
    1d3c:	00 00 28    	mov.w     #0x8000, w0
    1d3e:	00 80 60    	and.w     w1, w0, w0
    1d40:	00 00 e0    	cp0.w     w0
    1d42:	03 00 32    	bra       Z, 0x1d4a <.L28>
    1d44:	bd ff 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1d46:	10 c0 b3    	mov.b     #0x1, w0
    1d48:	04 00 37    	bra       0x1d52 <.L27>

00001d4a <.L28>:
    1d4a:	20 00 20    	mov.w     #0x2, w0
    1d4c:	01 00 20    	mov.w     #0x0, w1
    1d4e:	64 ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1d50:	00 40 eb    	clr.b     w0

00001d52 <.L27>:
    1d52:	00 80 fa    	ulnk      
    1d54:	00 00 06    	return    

00001d56 <_i2c_read>:
    1d56:	04 00 fa    	lnk       #0x4
    1d58:	00 00 eb    	clr.w     w0
    1d5a:	00 0f 78    	mov.w     w0, [w14]
    1d5c:	00 40 eb    	clr.b     w0
    1d5e:	20 47 98    	mov.b     w0, [w14+2]
    1d60:	76 62 a8    	bset.b    0x276, #0x3
    1d62:	05 00 37    	bra       0x1d6e <.L31>

00001d64 <.L33>:
    1d64:	1e 0f e8    	inc.w     [w14], [w14]
    1d66:	00 7d 20    	mov.w     #0x7d0, w0
    1d68:	9e 00 78    	mov.w     [w14], w1
    1d6a:	80 8f 50    	sub.w     w1, w0, [w15]
    1d6c:	05 00 3c    	bra       GT, 0x1d78 <.L34>

00001d6e <.L31>:
    1d6e:	c0 13 80    	mov.w     0x278, w0
    1d70:	62 00 60    	and.w     w0, #0x2, w0
    1d72:	00 00 e0    	cp0.w     w0
    1d74:	f7 ff 32    	bra       Z, 0x1d64 <.L33>
    1d76:	01 00 37    	bra       0x1d7a <.L32>

00001d78 <.L34>:
    1d78:	00 00 00    	nop       

00001d7a <.L32>:
    1d7a:	80 13 80    	mov.w     0x270, w0
    1d7c:	20 47 98    	mov.b     w0, [w14+2]
    1d7e:	2e 40 90    	mov.b     [w14+2], w0
    1d80:	00 80 fa    	ulnk      
    1d82:	00 00 06    	return    

00001d84 <_i2c_read_ack>:
    1d84:	04 00 fa    	lnk       #0x4
    1d86:	00 00 eb    	clr.w     w0
    1d88:	00 0f 78    	mov.w     w0, [w14]
    1d8a:	00 40 eb    	clr.b     w0
    1d8c:	20 47 98    	mov.b     w0, [w14+2]
    1d8e:	76 62 a8    	bset.b    0x276, #0x3
    1d90:	05 00 37    	bra       0x1d9c <.L36>

00001d92 <.L38>:
    1d92:	1e 0f e8    	inc.w     [w14], [w14]
    1d94:	00 7d 20    	mov.w     #0x7d0, w0
    1d96:	9e 00 78    	mov.w     [w14], w1
    1d98:	80 8f 50    	sub.w     w1, w0, [w15]
    1d9a:	05 00 3c    	bra       GT, 0x1da6 <.L39>

00001d9c <.L36>:
    1d9c:	c0 13 80    	mov.w     0x278, w0
    1d9e:	62 00 60    	and.w     w0, #0x2, w0
    1da0:	00 00 e0    	cp0.w     w0
    1da2:	f7 ff 32    	bra       Z, 0x1d92 <.L38>
    1da4:	01 00 37    	bra       0x1da8 <.L37>

00001da6 <.L39>:
    1da6:	00 00 00    	nop       

00001da8 <.L37>:
    1da8:	80 13 80    	mov.w     0x270, w0
    1daa:	20 47 98    	mov.b     w0, [w14+2]
    1dac:	76 82 a8    	bset.b    0x276, #0x4
    1dae:	a0 00 20    	mov.w     #0xa, w0
    1db0:	01 00 20    	mov.w     #0x0, w1
    1db2:	32 ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1db4:	2e 40 90    	mov.b     [w14+2], w0
    1db6:	00 80 fa    	ulnk      
    1db8:	00 00 06    	return    

00001dba <_i2c_read_nack>:
    1dba:	04 00 fa    	lnk       #0x4
    1dbc:	00 00 eb    	clr.w     w0
    1dbe:	00 0f 78    	mov.w     w0, [w14]
    1dc0:	00 40 eb    	clr.b     w0
    1dc2:	20 47 98    	mov.b     w0, [w14+2]
    1dc4:	76 62 a8    	bset.b    0x276, #0x3
    1dc6:	05 00 37    	bra       0x1dd2 <.L41>

00001dc8 <.L43>:
    1dc8:	1e 0f e8    	inc.w     [w14], [w14]
    1dca:	00 7d 20    	mov.w     #0x7d0, w0
    1dcc:	9e 00 78    	mov.w     [w14], w1
    1dce:	80 8f 50    	sub.w     w1, w0, [w15]
    1dd0:	05 00 3c    	bra       GT, 0x1ddc <.L44>

00001dd2 <.L41>:
    1dd2:	c0 13 80    	mov.w     0x278, w0
    1dd4:	62 00 60    	and.w     w0, #0x2, w0
    1dd6:	00 00 e0    	cp0.w     w0
    1dd8:	f7 ff 32    	bra       Z, 0x1dc8 <.L43>
    1dda:	01 00 37    	bra       0x1dde <.L42>

00001ddc <.L44>:
    1ddc:	00 00 00    	nop       

00001dde <.L42>:
    1dde:	80 13 80    	mov.w     0x270, w0
    1de0:	20 47 98    	mov.b     w0, [w14+2]
    1de2:	76 a2 a8    	bset.b    0x276, #0x5
    1de4:	76 82 a8    	bset.b    0x276, #0x4
    1de6:	a0 00 20    	mov.w     #0xa, w0
    1de8:	01 00 20    	mov.w     #0x0, w1
    1dea:	16 ff 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1dec:	2e 40 90    	mov.b     [w14+2], w0
    1dee:	00 80 fa    	ulnk      
    1df0:	00 00 06    	return    

00001df2 <_I2Cwrite>:
    1df2:	04 00 fa    	lnk       #0x4
    1df4:	00 4f 78    	mov.b     w0, [w14]
    1df6:	11 47 98    	mov.b     w1, [w14+1]
    1df8:	22 47 98    	mov.b     w2, [w14+2]
    1dfa:	2e ff 07    	rcall     0x1c58 <_i2c_start> <.LFB2> <.LFE1>
    1dfc:	1e 00 fb    	se        [w14], w0
    1dfe:	80 00 78    	mov.w     w0, w1
    1e00:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e02:	00 80 60    	and.w     w1, w0, w0
    1e04:	78 ff 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e06:	1e 40 90    	mov.b     [w14+1], w0
    1e08:	00 00 fb    	se        w0, w0
    1e0a:	75 ff 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e0c:	2e 40 90    	mov.b     [w14+2], w0
    1e0e:	00 00 fb    	se        w0, w0
    1e10:	72 ff 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e12:	56 ff 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1e14:	00 80 fa    	ulnk      
    1e16:	00 00 06    	return    

00001e18 <_I2Cread>:
    1e18:	04 00 fa    	lnk       #0x4
    1e1a:	20 47 98    	mov.b     w0, [w14+2]
    1e1c:	31 47 98    	mov.b     w1, [w14+3]
    1e1e:	1c ff 07    	rcall     0x1c58 <_i2c_start> <.LFB2> <.LFE1>
    1e20:	2e 40 90    	mov.b     [w14+2], w0
    1e22:	00 00 fb    	se        w0, w0
    1e24:	68 ff 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e26:	3e 40 90    	mov.b     [w14+3], w0
    1e28:	00 00 fb    	se        w0, w0
    1e2a:	65 ff 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e2c:	a0 00 20    	mov.w     #0xa, w0
    1e2e:	01 00 20    	mov.w     #0x0, w1
    1e30:	f3 fe 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1e32:	2e ff 07    	rcall     0x1c90 <_i2c_restart> <.LFB3> <.LFE2>
    1e34:	2e 40 90    	mov.b     [w14+2], w0
    1e36:	00 04 a0    	bset.b    w0, #0x0
    1e38:	00 00 fb    	se        w0, w0
    1e3a:	5d ff 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e3c:	8c ff 07    	rcall     0x1d56 <_i2c_read> <.LFB6> <.LFE5>
    1e3e:	00 4f 78    	mov.b     w0, [w14]
    1e40:	3f ff 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1e42:	1e 40 78    	mov.b     [w14], w0
    1e44:	00 80 fa    	ulnk      
    1e46:	00 00 06    	return    

00001e48 <_I2Cpoll>:
    1e48:	04 00 fa    	lnk       #0x4
    1e4a:	20 47 98    	mov.b     w0, [w14+2]
    1e4c:	00 40 eb    	clr.b     w0
    1e4e:	00 4f 78    	mov.b     w0, [w14]
    1e50:	03 ff 07    	rcall     0x1c58 <_i2c_start> <.LFB2> <.LFE1>
    1e52:	2e 40 90    	mov.b     [w14+2], w0
    1e54:	00 00 fb    	se        w0, w0
    1e56:	80 00 78    	mov.w     w0, w1
    1e58:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e5a:	00 80 60    	and.w     w1, w0, w0
    1e5c:	4c ff 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e5e:	00 4f 78    	mov.b     w0, [w14]
    1e60:	2f ff 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1e62:	1e 40 78    	mov.b     [w14], w0
    1e64:	00 04 e0    	cp0.b     w0
    1e66:	02 00 3a    	bra       NZ, 0x1e6c <.L48>
    1e68:	10 c0 b3    	mov.b     #0x1, w0
    1e6a:	01 00 37    	bra       0x1e6e <.L49>

00001e6c <.L48>:
    1e6c:	00 40 eb    	clr.b     w0

00001e6e <.L49>:
    1e6e:	00 80 fa    	ulnk      
    1e70:	00 00 06    	return    

00001e72 <_I2Cwritearray>:
    1e72:	08 00 fa    	lnk       #0x8
    1e74:	20 47 98    	mov.b     w0, [w14+2]
    1e76:	21 07 98    	mov.w     w1, [w14+4]
    1e78:	62 47 98    	mov.b     w2, [w14+6]
    1e7a:	00 40 eb    	clr.b     w0
    1e7c:	00 4f 78    	mov.b     w0, [w14]
    1e7e:	ec fe 07    	rcall     0x1c58 <_i2c_start> <.LFB2> <.LFE1>
    1e80:	2e 40 90    	mov.b     [w14+2], w0
    1e82:	00 00 fb    	se        w0, w0
    1e84:	80 00 78    	mov.w     w0, w1
    1e86:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e88:	00 80 60    	and.w     w1, w0, w0
    1e8a:	35 ff 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e8c:	00 4f 78    	mov.b     w0, [w14]
    1e8e:	00 40 eb    	clr.b     w0
    1e90:	10 47 98    	mov.b     w0, [w14+1]
    1e92:	0d 00 37    	bra       0x1eae <.L51>

00001e94 <.L52>:
    1e94:	1e 40 90    	mov.b     [w14+1], w0
    1e96:	00 80 fb    	ze        w0, w0
    1e98:	ae 00 90    	mov.w     [w14+4], w1
    1e9a:	00 80 40    	add.w     w1, w0, w0
    1e9c:	10 40 78    	mov.b     [w0], w0
    1e9e:	00 00 fb    	se        w0, w0
    1ea0:	2a ff 07    	rcall     0x1cf6 <_send_i2c_byte> <.LFB5> <.LFE4>
    1ea2:	9e 40 78    	mov.b     [w14], w1
    1ea4:	01 40 70    	ior.b     w0, w1, w0
    1ea6:	00 4f 78    	mov.b     w0, [w14]
    1ea8:	1e 40 90    	mov.b     [w14+1], w0
    1eaa:	00 40 e8    	inc.b     w0, w0
    1eac:	10 47 98    	mov.b     w0, [w14+1]

00001eae <.L51>:
    1eae:	9e 40 90    	mov.b     [w14+1], w1
    1eb0:	6e 40 90    	mov.b     [w14+6], w0
    1eb2:	80 cf 50    	sub.b     w1, w0, [w15]
    1eb4:	ef ff 39    	bra       NC, 0x1e94 <.L52>
    1eb6:	04 ff 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1eb8:	1e 40 78    	mov.b     [w14], w0
    1eba:	00 80 fa    	ulnk      
    1ebc:	00 00 06    	return    

00001ebe <_i2c2_init>:
    1ebe:	04 00 fa    	lnk       #0x4
    1ec0:	10 07 98    	mov.w     w0, [w14+2]
    1ec2:	1e 00 90    	mov.w     [w14+2], w0
    1ec4:	a0 10 88    	mov.w     w0, 0x214
    1ec6:	17 e2 a9    	bclr.b    0x217, #0x7
    1ec8:	17 22 a8    	bset.b    0x217, #0x1
    1eca:	8a 40 a9    	bclr.b    0x8a, #0x2
    1ecc:	17 e2 a8    	bset.b    0x217, #0x7
    1ece:	80 10 80    	mov.w     0x210, w0
    1ed0:	00 0f 78    	mov.w     w0, [w14]
    1ed2:	f6 fe 07    	rcall     0x1cc0 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1ed4:	00 80 fa    	ulnk      
    1ed6:	00 00 06    	return    

00001ed8 <_i2c2_start>:
    1ed8:	02 00 fa    	lnk       #0x2
    1eda:	00 00 eb    	clr.w     w0
    1edc:	00 0f 78    	mov.w     w0, [w14]
    1ede:	16 a2 a9    	bclr.b    0x216, #0x5
    1ee0:	a0 00 20    	mov.w     #0xa, w0
    1ee2:	01 00 20    	mov.w     #0x0, w1
    1ee4:	99 fe 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1ee6:	16 02 a8    	bset.b    0x216, #0x0
    1ee8:	00 00 00    	nop       
    1eea:	07 00 37    	bra       0x1efa <.L55>

00001eec <.L57>:
    1eec:	10 00 20    	mov.w     #0x1, w0
    1eee:	01 00 20    	mov.w     #0x0, w1
    1ef0:	93 fe 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1ef2:	1e 0f e8    	inc.w     [w14], [w14]
    1ef4:	1e 00 78    	mov.w     [w14], w0
    1ef6:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1ef8:	05 00 3c    	bra       GT, 0x1f04 <.L58>

00001efa <.L55>:
    1efa:	b0 10 80    	mov.w     0x216, w0
    1efc:	61 00 60    	and.w     w0, #0x1, w0
    1efe:	00 00 e0    	cp0.w     w0
    1f00:	f5 ff 3a    	bra       NZ, 0x1eec <.L57>
    1f02:	01 00 37    	bra       0x1f06 <.L56>

00001f04 <.L58>:
    1f04:	00 00 00    	nop       

00001f06 <.L56>:
    1f06:	20 00 20    	mov.w     #0x2, w0
    1f08:	01 00 20    	mov.w     #0x0, w1
    1f0a:	86 fe 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1f0c:	00 80 fa    	ulnk      
    1f0e:	00 00 06    	return    

00001f10 <_i2c2_restart>:
    1f10:	02 00 fa    	lnk       #0x2
    1f12:	00 00 eb    	clr.w     w0
    1f14:	00 0f 78    	mov.w     w0, [w14]
    1f16:	16 22 a8    	bset.b    0x216, #0x1
    1f18:	00 00 00    	nop       
    1f1a:	07 00 37    	bra       0x1f2a <.L60>

00001f1c <.L62>:
    1f1c:	10 00 20    	mov.w     #0x1, w0
    1f1e:	01 00 20    	mov.w     #0x0, w1
    1f20:	7b fe 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1f22:	1e 0f e8    	inc.w     [w14], [w14]
    1f24:	1e 00 78    	mov.w     [w14], w0
    1f26:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f28:	05 00 3c    	bra       GT, 0x1f34 <.L63>

00001f2a <.L60>:
    1f2a:	b0 10 80    	mov.w     0x216, w0
    1f2c:	62 00 60    	and.w     w0, #0x2, w0
    1f2e:	00 00 e0    	cp0.w     w0
    1f30:	f5 ff 3a    	bra       NZ, 0x1f1c <.L62>
    1f32:	01 00 37    	bra       0x1f36 <.L61>

00001f34 <.L63>:
    1f34:	00 00 00    	nop       

00001f36 <.L61>:
    1f36:	20 00 20    	mov.w     #0x2, w0
    1f38:	01 00 20    	mov.w     #0x0, w1
    1f3a:	6e fe 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1f3c:	00 80 fa    	ulnk      
    1f3e:	00 00 06    	return    

00001f40 <_reset_i2c2_bus>:
    1f40:	02 00 fa    	lnk       #0x2
    1f42:	00 00 eb    	clr.w     w0
    1f44:	00 0f 78    	mov.w     w0, [w14]
    1f46:	16 42 a8    	bset.b    0x216, #0x2
    1f48:	07 00 37    	bra       0x1f58 <.L65>

00001f4a <.L67>:
    1f4a:	10 00 20    	mov.w     #0x1, w0
    1f4c:	01 00 20    	mov.w     #0x0, w1
    1f4e:	64 fe 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1f50:	1e 0f e8    	inc.w     [w14], [w14]
    1f52:	1e 00 78    	mov.w     [w14], w0
    1f54:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f56:	05 00 3c    	bra       GT, 0x1f62 <.L68>

00001f58 <.L65>:
    1f58:	b0 10 80    	mov.w     0x216, w0
    1f5a:	64 00 60    	and.w     w0, #0x4, w0
    1f5c:	00 00 e0    	cp0.w     w0
    1f5e:	f5 ff 3a    	bra       NZ, 0x1f4a <.L67>
    1f60:	01 00 37    	bra       0x1f64 <.L66>

00001f62 <.L68>:
    1f62:	00 00 00    	nop       

00001f64 <.L66>:
    1f64:	16 62 a9    	bclr.b    0x216, #0x3
    1f66:	8a 40 a9    	bclr.b    0x8a, #0x2
    1f68:	18 e2 a9    	bclr.b    0x218, #0x7
    1f6a:	19 42 a9    	bclr.b    0x219, #0x2
    1f6c:	40 01 20    	mov.w     #0x14, w0
    1f6e:	01 00 20    	mov.w     #0x0, w1
    1f70:	53 fe 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1f72:	00 80 fa    	ulnk      
    1f74:	00 00 06    	return    

00001f76 <_send_i2c2_byte>:
    1f76:	04 00 fa    	lnk       #0x4
    1f78:	10 07 98    	mov.w     w0, [w14+2]
    1f7a:	00 00 00    	nop       

00001f7c <.L70>:
    1f7c:	c0 10 80    	mov.w     0x218, w0
    1f7e:	61 00 60    	and.w     w0, #0x1, w0
    1f80:	00 00 e0    	cp0.w     w0
    1f82:	fc ff 3a    	bra       NZ, 0x1f7c <.L70>
    1f84:	8a 40 a9    	bclr.b    0x8a, #0x2
    1f86:	1e 00 90    	mov.w     [w14+2], w0
    1f88:	90 10 88    	mov.w     w0, 0x212
    1f8a:	00 00 eb    	clr.w     w0
    1f8c:	00 0f 78    	mov.w     w0, [w14]
    1f8e:	09 00 37    	bra       0x1fa2 <.L71>

00001f90 <.L74>:
    1f90:	c1 10 80    	mov.w     0x218, w1
    1f92:	00 00 24    	mov.w     #0x4000, w0
    1f94:	00 80 60    	and.w     w1, w0, w0
    1f96:	00 00 e0    	cp0.w     w0
    1f98:	09 00 32    	bra       Z, 0x1fac <.L78>
    1f9a:	10 00 20    	mov.w     #0x1, w0
    1f9c:	01 00 20    	mov.w     #0x0, w1
    1f9e:	3c fe 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1fa0:	1e 0f e8    	inc.w     [w14], [w14]

00001fa2 <.L71>:
    1fa2:	30 1f 20    	mov.w     #0x1f3, w0
    1fa4:	9e 00 78    	mov.w     [w14], w1
    1fa6:	80 8f 50    	sub.w     w1, w0, [w15]
    1fa8:	f3 ff 34    	bra       LE, 0x1f90 <.L74>
    1faa:	01 00 37    	bra       0x1fae <.L73>

00001fac <.L78>:
    1fac:	00 00 00    	nop       

00001fae <.L73>:
    1fae:	40 1f 20    	mov.w     #0x1f4, w0
    1fb0:	9e 00 78    	mov.w     [w14], w1
    1fb2:	80 8f 50    	sub.w     w1, w0, [w15]
    1fb4:	02 00 3a    	bra       NZ, 0x1fba <.L75>
    1fb6:	10 c0 b3    	mov.b     #0x1, w0
    1fb8:	0c 00 37    	bra       0x1fd2 <.L76>

00001fba <.L75>:
    1fba:	c1 10 80    	mov.w     0x218, w1
    1fbc:	00 00 28    	mov.w     #0x8000, w0
    1fbe:	00 80 60    	and.w     w1, w0, w0
    1fc0:	00 00 e0    	cp0.w     w0
    1fc2:	03 00 32    	bra       Z, 0x1fca <.L77>
    1fc4:	bd ff 07    	rcall     0x1f40 <_reset_i2c2_bus> <.LFB16> <.LFE15>
    1fc6:	10 c0 b3    	mov.b     #0x1, w0
    1fc8:	04 00 37    	bra       0x1fd2 <.L76>

00001fca <.L77>:
    1fca:	20 00 20    	mov.w     #0x2, w0
    1fcc:	01 00 20    	mov.w     #0x0, w1
    1fce:	24 fe 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1fd0:	00 40 eb    	clr.b     w0

00001fd2 <.L76>:
    1fd2:	00 80 fa    	ulnk      
    1fd4:	00 00 06    	return    

00001fd6 <_i2c2_read>:
    1fd6:	04 00 fa    	lnk       #0x4
    1fd8:	00 00 eb    	clr.w     w0
    1fda:	00 0f 78    	mov.w     w0, [w14]
    1fdc:	00 40 eb    	clr.b     w0
    1fde:	20 47 98    	mov.b     w0, [w14+2]
    1fe0:	16 62 a8    	bset.b    0x216, #0x3
    1fe2:	05 00 37    	bra       0x1fee <.L80>

00001fe4 <.L82>:
    1fe4:	1e 0f e8    	inc.w     [w14], [w14]
    1fe6:	00 7d 20    	mov.w     #0x7d0, w0
    1fe8:	9e 00 78    	mov.w     [w14], w1
    1fea:	80 8f 50    	sub.w     w1, w0, [w15]
    1fec:	05 00 3c    	bra       GT, 0x1ff8 <.L83>

00001fee <.L80>:
    1fee:	c0 10 80    	mov.w     0x218, w0
    1ff0:	62 00 60    	and.w     w0, #0x2, w0
    1ff2:	00 00 e0    	cp0.w     w0
    1ff4:	f7 ff 32    	bra       Z, 0x1fe4 <.L82>
    1ff6:	01 00 37    	bra       0x1ffa <.L81>

00001ff8 <.L83>:
    1ff8:	00 00 00    	nop       

00001ffa <.L81>:
    1ffa:	80 10 80    	mov.w     0x210, w0
    1ffc:	20 47 98    	mov.b     w0, [w14+2]
    1ffe:	2e 40 90    	mov.b     [w14+2], w0
    2000:	00 80 fa    	ulnk      
    2002:	00 00 06    	return    

00002004 <_i2c2_read_ack>:
    2004:	04 00 fa    	lnk       #0x4
    2006:	00 00 eb    	clr.w     w0
    2008:	00 0f 78    	mov.w     w0, [w14]
    200a:	00 40 eb    	clr.b     w0
    200c:	20 47 98    	mov.b     w0, [w14+2]
    200e:	16 62 a8    	bset.b    0x216, #0x3
    2010:	05 00 37    	bra       0x201c <.L85>

00002012 <.L87>:
    2012:	1e 0f e8    	inc.w     [w14], [w14]
    2014:	00 7d 20    	mov.w     #0x7d0, w0
    2016:	9e 00 78    	mov.w     [w14], w1
    2018:	80 8f 50    	sub.w     w1, w0, [w15]
    201a:	05 00 3c    	bra       GT, 0x2026 <.L88>

0000201c <.L85>:
    201c:	c0 10 80    	mov.w     0x218, w0
    201e:	62 00 60    	and.w     w0, #0x2, w0
    2020:	00 00 e0    	cp0.w     w0
    2022:	f7 ff 32    	bra       Z, 0x2012 <.L87>
    2024:	01 00 37    	bra       0x2028 <.L86>

00002026 <.L88>:
    2026:	00 00 00    	nop       

00002028 <.L86>:
    2028:	80 10 80    	mov.w     0x210, w0
    202a:	20 47 98    	mov.b     w0, [w14+2]
    202c:	16 82 a8    	bset.b    0x216, #0x4
    202e:	a0 00 20    	mov.w     #0xa, w0
    2030:	01 00 20    	mov.w     #0x0, w1
    2032:	f2 fd 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2034:	2e 40 90    	mov.b     [w14+2], w0
    2036:	00 80 fa    	ulnk      
    2038:	00 00 06    	return    

0000203a <_i2c2_read_nack>:
    203a:	04 00 fa    	lnk       #0x4
    203c:	00 00 eb    	clr.w     w0
    203e:	00 0f 78    	mov.w     w0, [w14]
    2040:	00 40 eb    	clr.b     w0
    2042:	20 47 98    	mov.b     w0, [w14+2]
    2044:	16 62 a8    	bset.b    0x216, #0x3
    2046:	05 00 37    	bra       0x2052 <.L90>

00002048 <.L92>:
    2048:	1e 0f e8    	inc.w     [w14], [w14]
    204a:	00 7d 20    	mov.w     #0x7d0, w0
    204c:	9e 00 78    	mov.w     [w14], w1
    204e:	80 8f 50    	sub.w     w1, w0, [w15]
    2050:	05 00 3c    	bra       GT, 0x205c <.L93>

00002052 <.L90>:
    2052:	c0 10 80    	mov.w     0x218, w0
    2054:	62 00 60    	and.w     w0, #0x2, w0
    2056:	00 00 e0    	cp0.w     w0
    2058:	f7 ff 32    	bra       Z, 0x2048 <.L92>
    205a:	01 00 37    	bra       0x205e <.L91>

0000205c <.L93>:
    205c:	00 00 00    	nop       

0000205e <.L91>:
    205e:	80 10 80    	mov.w     0x210, w0
    2060:	20 47 98    	mov.b     w0, [w14+2]
    2062:	16 a2 a8    	bset.b    0x216, #0x5
    2064:	16 82 a8    	bset.b    0x216, #0x4
    2066:	a0 00 20    	mov.w     #0xa, w0
    2068:	01 00 20    	mov.w     #0x0, w1
    206a:	d6 fd 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    206c:	2e 40 90    	mov.b     [w14+2], w0
    206e:	00 80 fa    	ulnk      
    2070:	00 00 06    	return    

00002072 <_I2C2poll>:
    2072:	04 00 fa    	lnk       #0x4
    2074:	20 47 98    	mov.b     w0, [w14+2]
    2076:	00 40 eb    	clr.b     w0
    2078:	00 4f 78    	mov.b     w0, [w14]
    207a:	2e ff 07    	rcall     0x1ed8 <_i2c2_start> <.LFB14> <.LFE13>
    207c:	2e 40 90    	mov.b     [w14+2], w0
    207e:	00 00 fb    	se        w0, w0
    2080:	80 00 78    	mov.w     w0, w1
    2082:	e0 ff 2f    	mov.w     #0xfffe, w0
    2084:	00 80 60    	and.w     w1, w0, w0
    2086:	77 ff 07    	rcall     0x1f76 <_send_i2c2_byte> <.LFB17> <.LFE16>
    2088:	00 4f 78    	mov.b     w0, [w14]
    208a:	5a ff 07    	rcall     0x1f40 <_reset_i2c2_bus> <.LFB16> <.LFE15>
    208c:	1e 40 78    	mov.b     [w14], w0
    208e:	00 04 e0    	cp0.b     w0
    2090:	02 00 3a    	bra       NZ, 0x2096 <.L95>
    2092:	10 c0 b3    	mov.b     #0x1, w0
    2094:	01 00 37    	bra       0x2098 <.L96>

00002096 <.L95>:
    2096:	00 40 eb    	clr.b     w0

00002098 <.L96>:
    2098:	00 80 fa    	ulnk      
    209a:	00 00 06    	return    

0000209c <_init_ajuart>:
    209c:	04 00 fa    	lnk       #0x4
    209e:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    20a0:	f2 c2 a8    	bset.b    0x2f2, #0x6
    20a2:	f0 e2 a8    	bset.b    0x2f0, #0x7
    20a4:	00 6c 20    	mov.w     #0x6c0, w0
    20a6:	00 0f 78    	mov.w     w0, [w14]
    20a8:	00 68 20    	mov.w     #0x680, w0
    20aa:	10 07 98    	mov.w     w0, [w14+2]
    20ac:	11 3a 80    	mov.w     0x742, w1
    20ae:	f0 0b 20    	mov.w     #0xbf, w0
    20b0:	00 81 60    	and.w     w1, w0, w2
    20b2:	60 04 20    	mov.w     #0x46, w0
    20b4:	71 05 20    	mov.w     #0x57, w1
    20b6:	23 74 20    	mov.w     #0x742, w3
    20b8:	80 49 78    	mov.b     w0, [w3]
    20ba:	81 49 78    	mov.b     w1, [w3]
    20bc:	82 49 78    	mov.b     w2, [w3]
    20be:	1e 00 90    	mov.w     [w14+2], w0
    20c0:	40 02 b0    	add.w     #0x24, w0
    20c2:	a1 c1 b3    	mov.b     #0x1a, w1
    20c4:	01 48 78    	mov.b     w1, [w0]
    20c6:	9e 00 78    	mov.w     [w14], w1
    20c8:	75 80 40    	add.w     w1, #0x15, w0
    20ca:	31 c0 b3    	mov.b     #0x3, w1
    20cc:	01 48 78    	mov.b     w1, [w0]
    20ce:	10 3a 80    	mov.w     0x742, w0
    20d0:	00 01 78    	mov.w     w0, w2
    20d2:	02 60 a0    	bset.w    w2, #0x6
    20d4:	60 04 20    	mov.w     #0x46, w0
    20d6:	71 05 20    	mov.w     #0x57, w1
    20d8:	23 74 20    	mov.w     #0x742, w3
    20da:	80 49 78    	mov.b     w0, [w3]
    20dc:	81 49 78    	mov.b     w1, [w3]
    20de:	82 49 78    	mov.b     w2, [w3]
    20e0:	80 00 20    	mov.w     #0x8, w0
    20e2:	00 11 88    	mov.w     w0, 0x220
    20e4:	20 02 20    	mov.w     #0x22, w0
    20e6:	40 11 88    	mov.w     w0, 0x228
    20e8:	e0 82 20    	mov.w     #0x82e, w0
    20ea:	d0 40 88    	mov.w     w0, 0x81a
    20ec:	00 40 20    	mov.w     #0x400, w0
    20ee:	e0 40 88    	mov.w     w0, 0x81c
    20f0:	00 00 eb    	clr.w     w0
    20f2:	f0 40 88    	mov.w     w0, 0x81e
    20f4:	00 00 eb    	clr.w     w0
    20f6:	00 41 88    	mov.w     w0, 0x820
    20f8:	00 00 eb    	clr.w     w0
    20fa:	10 41 88    	mov.w     w0, 0x822
    20fc:	00 30 20    	mov.w     #0x300, w0
    20fe:	c0 40 88    	mov.w     w0, 0x818
    2100:	e0 c2 20    	mov.w     #0xc2e, w0
    2102:	20 41 88    	mov.w     w0, 0x824
    2104:	00 40 20    	mov.w     #0x400, w0
    2106:	30 41 88    	mov.w     w0, 0x826
    2108:	00 00 eb    	clr.w     w0
    210a:	40 41 88    	mov.w     w0, 0x828
    210c:	00 00 eb    	clr.w     w0
    210e:	50 41 88    	mov.w     w0, 0x82a
    2110:	00 00 eb    	clr.w     w0
    2112:	60 41 88    	mov.w     w0, 0x82c
    2114:	23 e2 a9    	bclr.b    0x223, #0x7
    2116:	23 a2 a8    	bset.b    0x223, #0x5
    2118:	85 80 a9    	bclr.b    0x85, #0x4
    211a:	95 80 a8    	bset.b    0x95, #0x4
    211c:	85 60 a9    	bclr.b    0x85, #0x3
    211e:	95 60 a8    	bset.b    0x95, #0x3
    2120:	21 e2 a8    	bset.b    0x221, #0x7
    2122:	23 42 a8    	bset.b    0x223, #0x2
    2124:	00 80 fa    	ulnk      
    2126:	00 00 06    	return    

00002128 <_U1_in_waiting>:
    2128:	00 00 fa    	lnk       #0x0
    212a:	60 41 80    	mov.w     0x82c, w0
    212c:	00 80 fa    	ulnk      
    212e:	00 00 06    	return    

00002130 <_U1_flush_tx_buffer>:
    2130:	00 00 fa    	lnk       #0x0
    2132:	11 11 80    	mov.w     0x222, w1
    2134:	00 40 20    	mov.w     #0x400, w0
    2136:	00 80 60    	and.w     w1, w0, w0
    2138:	00 00 e0    	cp0.w     w0
    213a:	01 00 3a    	bra       NZ, 0x213e <.L15>
    213c:	23 42 a8    	bset.b    0x223, #0x2

0000213e <.L15>:
    213e:	00 80 fa    	ulnk      
    2140:	00 00 06    	return    

00002142 <_U1_putc>:
    2142:	02 00 fa    	lnk       #0x2
    2144:	00 4f 78    	mov.b     w0, [w14]
    2146:	00 00 00    	nop       

00002148 <.L18>:
    2148:	11 41 80    	mov.w     0x822, w1
    214a:	e0 40 80    	mov.w     0x81c, w0
    214c:	80 8f 50    	sub.w     w1, w0, [w15]
    214e:	fc ff 32    	bra       Z, 0x2148 <.L18>
    2150:	ff 3f fc    	disi      #0x3fff
    2152:	d1 40 80    	mov.w     0x81a, w1
    2154:	00 41 80    	mov.w     0x820, w0
    2156:	00 80 40    	add.w     w1, w0, w0
    2158:	1e 48 78    	mov.b     [w14], [w0]
    215a:	00 41 80    	mov.w     0x820, w0
    215c:	00 00 e8    	inc.w     w0, w0
    215e:	00 41 88    	mov.w     w0, 0x820
    2160:	01 41 80    	mov.w     0x820, w1
    2162:	e0 40 80    	mov.w     0x81c, w0
    2164:	80 8f 50    	sub.w     w1, w0, [w15]
    2166:	02 00 3a    	bra       NZ, 0x216c <.L19>
    2168:	00 00 eb    	clr.w     w0
    216a:	00 41 88    	mov.w     w0, 0x820

0000216c <.L19>:
    216c:	10 41 80    	mov.w     0x822, w0
    216e:	00 00 e8    	inc.w     w0, w0
    2170:	10 41 88    	mov.w     w0, 0x822
    2172:	52 20 ef    	clr.w     0x52
    2174:	11 41 80    	mov.w     0x822, w1
    2176:	c0 40 80    	mov.w     0x818, w0
    2178:	80 8f 50    	sub.w     w1, w0, [w15]
    217a:	01 00 39    	bra       NC, 0x217e <.L17>
    217c:	23 42 a8    	bset.b    0x223, #0x2

0000217e <.L17>:

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
        U1STAbits.UTXEN = 1;
}
    217e:	00 80 fa    	ulnk      
    2180:	00 00 06    	return    

00002182 <_U1_getc>:

uint8_t U1_getc(void) {
    2182:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    2184:	00 00 00    	nop       

00002186 <.L22>:
    2186:	60 41 80    	mov.w     0x82c, w0
    2188:	00 00 e0    	cp0.w     w0
    218a:	fd ff 32    	bra       Z, 0x2186 <.L22>

    disable_interrupts();
    218c:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    218e:	21 41 80    	mov.w     0x824, w1
    2190:	40 41 80    	mov.w     0x828, w0
    2192:	00 80 40    	add.w     w1, w0, w0
    2194:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    2196:	40 41 80    	mov.w     0x828, w0
    2198:	00 00 e8    	inc.w     w0, w0
    219a:	40 41 88    	mov.w     w0, 0x828
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    219c:	41 41 80    	mov.w     0x828, w1
    219e:	30 41 80    	mov.w     0x826, w0
    21a0:	80 8f 50    	sub.w     w1, w0, [w15]
    21a2:	02 00 3a    	bra       NZ, 0x21a8 <.L23>
        U1_rx_buffer.head = 0;
    21a4:	00 00 eb    	clr.w     w0
    21a6:	40 41 88    	mov.w     w0, 0x828

000021a8 <.L23>:
    U1_rx_buffer.count--;
    21a8:	60 41 80    	mov.w     0x82c, w0
    21aa:	00 00 e9    	dec.w     w0, w0
    21ac:	60 41 88    	mov.w     w0, 0x82c
    enable_interrupts();
    21ae:	52 20 ef    	clr.w     0x52

    return ch;
    21b0:	1e 40 78    	mov.b     [w14], w0
}
    21b2:	00 80 fa    	ulnk      
    21b4:	00 00 06    	return    

000021b6 <_U1_puts>:

void U1_puts(uint8_t *str) {
    21b6:	02 00 fa    	lnk       #0x2
    21b8:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    21ba:	04 00 37    	bra       0x21c4 <.L25>

000021bc <.L26>:
        U1_putc(*str++);
    21bc:	1e 00 78    	mov.w     [w14], w0
    21be:	10 40 78    	mov.b     [w0], w0
    21c0:	1e 0f e8    	inc.w     [w14], [w14]
    21c2:	bf ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>

000021c4 <.L25>:
    21c4:	1e 00 78    	mov.w     [w14], w0
    21c6:	10 40 78    	mov.b     [w0], w0
    21c8:	00 04 e0    	cp0.b     w0
    21ca:	f8 ff 3a    	bra       NZ, 0x21bc <.L26>
    U1_flush_tx_buffer();
    21cc:	b1 ff 07    	rcall     0x2130 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    21ce:	00 80 fa    	ulnk      
    21d0:	00 00 06    	return    

000021d2 <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    21d2:	04 00 fa    	lnk       #0x4
    21d4:	00 0f 78    	mov.w     w0, [w14]
    21d6:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    21d8:	1e 00 90    	mov.w     [w14+2], w0
    21da:	00 00 e0    	cp0.w     w0
    21dc:	1a 00 32    	bra       Z, 0x2212 <.L32>
        return;

    if (len == 1) {
    21de:	1e 00 90    	mov.w     [w14+2], w0
    21e0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    21e2:	04 00 3a    	bra       NZ, 0x21ec <.L30>
        *str = '\0';
    21e4:	1e 00 78    	mov.w     [w14], w0
    21e6:	80 40 eb    	clr.b     w1
    21e8:	01 48 78    	mov.b     w1, [w0]
        return;
    21ea:	14 00 37    	bra       0x2214 <.L27>

000021ec <.L30>:
    }

    while (1) {
        *str = U1_getc();
    21ec:	ca ff 07    	rcall     0x2182 <_U1_getc> <.LFB6> <.LFE5>
    21ee:	9e 00 78    	mov.w     [w14], w1
    21f0:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    21f2:	1e 00 78    	mov.w     [w14], w0
    21f4:	10 40 78    	mov.b     [w0], w0
    21f6:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    21f8:	08 00 32    	bra       Z, 0x220a <.L31>
    21fa:	1e 00 90    	mov.w     [w14+2], w0
    21fc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    21fe:	05 00 32    	bra       Z, 0x220a <.L31>
            break;
        str++;
    2200:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    2202:	1e 00 90    	mov.w     [w14+2], w0
    2204:	00 00 e9    	dec.w     w0, w0
    2206:	10 07 98    	mov.w     w0, [w14+2]
    }
    2208:	f1 ff 37    	bra       0x21ec <.L30>

0000220a <.L31>:
    *str = '\0';
    220a:	1e 00 78    	mov.w     [w14], w0
    220c:	80 40 eb    	clr.b     w1
    220e:	01 48 78    	mov.b     w1, [w0]
    2210:	01 00 37    	bra       0x2214 <.L27>

00002212 <.L32>:
    2212:	00 00 00    	nop       

00002214 <.L27>:
}
    2214:	00 80 fa    	ulnk      
    2216:	00 00 06    	return    

00002218 <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    2218:	08 00 fa    	lnk       #0x8
    221a:	20 07 98    	mov.w     w0, [w14+4]
    221c:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    221e:	3e 00 90    	mov.w     [w14+6], w0
    2220:	00 00 e0    	cp0.w     w0
    2222:	6f 00 32    	bra       Z, 0x2302 <.L46>
        return;

    if (len == 1) {
    2224:	3e 00 90    	mov.w     [w14+6], w0
    2226:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2228:	04 00 3a    	bra       NZ, 0x2232 <.L36>
        *str = '\0';
    222a:	2e 00 90    	mov.w     [w14+4], w0
    222c:	80 40 eb    	clr.b     w1
    222e:	01 48 78    	mov.b     w1, [w0]
        return;
    2230:	69 00 37    	bra       0x2304 <.L33>

00002232 <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    2232:	b0 c1 b3    	mov.b     #0x1b, w0
    2234:	86 ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    2236:	70 c3 b3    	mov.b     #0x37, w0
    2238:	84 ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    223a:	7a ff 07    	rcall     0x2130 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    223c:	ae 00 90    	mov.w     [w14+4], w1
    223e:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    2240:	be 00 90    	mov.w     [w14+6], w1
    2242:	01 0f 78    	mov.w     w1, [w14]
    2244:	03 00 37    	bra       0x224c <.L45>

00002246 <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    2246:	00 00 00    	nop       
    2248:	01 00 37    	bra       0x224c <.L45>

0000224a <.L48>:
    224a:	00 00 00    	nop       

0000224c <.L45>:
    224c:	9a ff 07    	rcall     0x2182 <_U1_getc> <.LFB6> <.LFE5>
    224e:	ae 00 90    	mov.w     [w14+4], w1
    2250:	80 48 78    	mov.b     w0, [w1]
    2252:	2e 00 90    	mov.w     [w14+4], w0
    2254:	10 40 78    	mov.b     [w0], w0
    2256:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2258:	09 00 3a    	bra       NZ, 0x226c <.L37>
    *str = '\0';                            // terminarte the string with null
    225a:	2e 00 90    	mov.w     [w14+4], w0
    225c:	80 40 eb    	clr.b     w1
    225e:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    2260:	a0 c0 b3    	mov.b     #0xa, w0
    2262:	6f ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    2264:	d0 c0 b3    	mov.b     #0xd, w0
    2266:	6d ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    2268:	63 ff 07    	rcall     0x2130 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    226a:	4c 00 37    	bra       0x2304 <.L33>

0000226c <.L37>:
    226c:	2e 00 90    	mov.w     [w14+4], w0
    226e:	10 40 78    	mov.b     [w0], w0
    2270:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2272:	10 00 3a    	bra       NZ, 0x2294 <.L38>
    2274:	b0 c1 b3    	mov.b     #0x1b, w0
    2276:	65 ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    2278:	80 c3 b3    	mov.b     #0x38, w0
    227a:	63 ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    227c:	b0 c1 b3    	mov.b     #0x1b, w0
    227e:	61 ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    2280:	b0 c5 b3    	mov.b     #0x5b, w0
    2282:	5f ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    2284:	b0 c4 b3    	mov.b     #0x4b, w0
    2286:	5d ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    2288:	53 ff 07    	rcall     0x2130 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    228a:	9e 00 90    	mov.w     [w14+2], w1
    228c:	21 07 98    	mov.w     w1, [w14+4]
    228e:	be 00 90    	mov.w     [w14+6], w1
    2290:	01 0f 78    	mov.w     w1, [w14]
    2292:	36 00 37    	bra       0x2300 <.L39>

00002294 <.L38>:
    2294:	2e 00 90    	mov.w     [w14+4], w0
    2296:	10 40 78    	mov.b     [w0], w0
    2298:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    229a:	05 00 32    	bra       Z, 0x22a6 <.L40>
    229c:	2e 00 90    	mov.w     [w14+4], w0
    229e:	90 40 78    	mov.b     [w0], w1
    22a0:	f0 c7 b3    	mov.b     #0x7f, w0
    22a2:	80 cf 50    	sub.b     w1, w0, [w15]
    22a4:	14 00 3a    	bra       NZ, 0x22ce <.L41>

000022a6 <.L40>:
    22a6:	ae 00 90    	mov.w     [w14+4], w1
    22a8:	1e 00 90    	mov.w     [w14+2], w0
    22aa:	80 8f 50    	sub.w     w1, w0, [w15]
    22ac:	0c 00 36    	bra       LEU, 0x22c6 <.L42>
    22ae:	80 c0 b3    	mov.b     #0x8, w0
    22b0:	48 ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    22b2:	00 c2 b3    	mov.b     #0x20, w0
    22b4:	46 ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    22b6:	80 c0 b3    	mov.b     #0x8, w0
    22b8:	44 ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    22ba:	3a ff 07    	rcall     0x2130 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    22bc:	2e 00 90    	mov.w     [w14+4], w0
    22be:	00 00 e9    	dec.w     w0, w0
    22c0:	20 07 98    	mov.w     w0, [w14+4]
    22c2:	1e 0f e8    	inc.w     [w14], [w14]
    22c4:	03 00 37    	bra       0x22cc <.L43>

000022c6 <.L42>:
    22c6:	70 c0 b3    	mov.b     #0x7, w0
    22c8:	3c ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    22ca:	32 ff 07    	rcall     0x2130 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

000022cc <.L43>:
    22cc:	19 00 37    	bra       0x2300 <.L39>

000022ce <.L41>:
    22ce:	1e 00 78    	mov.w     [w14], w0
    22d0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    22d2:	04 00 3a    	bra       NZ, 0x22dc <.L44>
    22d4:	70 c0 b3    	mov.b     #0x7, w0
    22d6:	35 ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    22d8:	2b ff 07    	rcall     0x2130 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    22da:	12 00 37    	bra       0x2300 <.L39>

000022dc <.L44>:
    22dc:	2e 00 90    	mov.w     [w14+4], w0
    22de:	10 40 78    	mov.b     [w0], w0
    22e0:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    22e2:	b1 ff 36    	bra       LEU, 0x2246 <.L47>
    22e4:	2e 00 90    	mov.w     [w14+4], w0
    22e6:	90 40 78    	mov.b     [w0], w1
    22e8:	e0 c7 b3    	mov.b     #0x7e, w0
    22ea:	80 cf 50    	sub.b     w1, w0, [w15]
    22ec:	ae ff 3e    	bra       GTU, 0x224a <.L48>
    22ee:	2e 00 90    	mov.w     [w14+4], w0
    22f0:	10 40 78    	mov.b     [w0], w0
    22f2:	27 ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    22f4:	1d ff 07    	rcall     0x2130 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    22f6:	2e 00 90    	mov.w     [w14+4], w0
    22f8:	00 00 e8    	inc.w     w0, w0
    22fa:	20 07 98    	mov.w     w0, [w14+4]
    22fc:	1e 0f e9    	dec.w     [w14], [w14]
    22fe:	a6 ff 37    	bra       0x224c <.L45>

00002300 <.L39>:
    2300:	a5 ff 37    	bra       0x224c <.L45>

00002302 <.L46>:
    2302:	00 00 00    	nop       

00002304 <.L33>:
}
    2304:	00 80 fa    	ulnk      
    2306:	00 00 06    	return    

00002308 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2308:	08 00 fa    	lnk       #0x8
    230a:	10 07 98    	mov.w     w0, [w14+2]
    230c:	21 07 98    	mov.w     w1, [w14+4]
    230e:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    2310:	1e 00 90    	mov.w     [w14+2], w0
    2312:	60 00 40    	add.w     w0, #0x0, w0
    2314:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2316:	10 00 3e    	bra       GTU, 0x2338 <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    2318:	00 00 eb    	clr.w     w0
    231a:	00 0f 78    	mov.w     w0, [w14]
    231c:	07 00 37    	bra       0x232c <.L52>

0000231e <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    231e:	2e 00 90    	mov.w     [w14+4], w0
    2320:	10 40 78    	mov.b     [w0], w0
    2322:	ae 00 90    	mov.w     [w14+4], w1
    2324:	81 00 e8    	inc.w     w1, w1
    2326:	21 07 98    	mov.w     w1, [w14+4]
    2328:	0c ff 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    232a:	1e 0f e8    	inc.w     [w14], [w14]

0000232c <.L52>:
    232c:	9e 00 78    	mov.w     [w14], w1
    232e:	3e 00 90    	mov.w     [w14+6], w0
    2330:	80 8f 50    	sub.w     w1, w0, [w15]
    2332:	f5 ff 39    	bra       NC, 0x231e <.L53>
            U1_flush_tx_buffer();
    2334:	fd fe 07    	rcall     0x2130 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    2336:	01 00 37    	bra       0x233a <.L54>

00002338 <.L55>:
        default:
            break;
    2338:	00 00 00    	nop       

0000233a <.L54>:
    }
    return len;
    233a:	3e 00 90    	mov.w     [w14+6], w0
}
    233c:	00 80 fa    	ulnk      
    233e:	00 00 06    	return    

00002340 <_updateReading>:
    2340:	06 00 fa    	lnk       #0x6
    2342:	10 07 98    	mov.w     w0, [w14+2]
    2344:	21 07 98    	mov.w     w1, [w14+4]
    2346:	00 40 eb    	clr.b     w0
    2348:	00 4f 78    	mov.b     w0, [w14]
    234a:	09 00 37    	bra       0x235e <.L2>

0000234c <.L3>:
    234c:	1e 80 fb    	ze        [w14], w0
    234e:	ae 00 90    	mov.w     [w14+4], w1
    2350:	00 80 40    	add.w     w1, w0, w0
    2352:	9e 80 fb    	ze        [w14], w1
    2354:	1e 01 90    	mov.w     [w14+2], w2
    2356:	81 00 41    	add.w     w2, w1, w1
    2358:	91 40 78    	mov.b     [w1], w1
    235a:	01 48 78    	mov.b     w1, [w0]
    235c:	1e 4f e8    	inc.b     [w14], [w14]

0000235e <.L2>:
    235e:	1e 40 78    	mov.b     [w14], w0
    2360:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    2362:	f4 ff 36    	bra       LEU, 0x234c <.L3>
    2364:	00 80 fa    	ulnk      
    2366:	00 00 06    	return    

00002368 <_updateAnalog>:
    2368:	04 00 fa    	lnk       #0x4
    236a:	88 1f 78    	mov.w     w8, [w15++]
    236c:	10 07 98    	mov.w     w0, [w14+2]
    236e:	00 40 eb    	clr.b     w0
    2370:	00 4f 78    	mov.b     w0, [w14]
    2372:	08 00 37    	bra       0x2384 <.L5>

00002374 <.L6>:
    2374:	1e 80 fb    	ze        [w14], w0
    2376:	9e 00 90    	mov.w     [w14+2], w1
    2378:	00 84 40    	add.w     w1, w0, w8
    237a:	50 00 20    	mov.w     #0x5, w0
    237c:	12 02 07    	rcall     0x27a2 <_read_analog> <.LFB1> <.LFE0>
    237e:	00 40 78    	mov.b     w0, w0
    2380:	00 4c 78    	mov.b     w0, [w8]
    2382:	1e 4f e8    	inc.b     [w14], [w14]

00002384 <.L5>:
    2384:	1e 40 78    	mov.b     [w14], w0
    2386:	e5 4f 50    	sub.b     w0, #0x5, [w15]
    2388:	f5 ff 36    	bra       LEU, 0x2374 <.L6>
    238a:	4f 04 78    	mov.w     [--w15], w8
    238c:	00 80 fa    	ulnk      
    238e:	00 00 06    	return    

00002390 <_test>:
    2390:	04 00 fa    	lnk       #0x4
    2392:	00 0f 78    	mov.w     w0, [w14]
    2394:	11 07 98    	mov.w     w1, [w14+2]
    2396:	1e 00 90    	mov.w     [w14+2], w0
    2398:	90 40 78    	mov.b     [w0], w1
    239a:	1e 00 78    	mov.w     [w14], w0
    239c:	01 48 78    	mov.b     w1, [w0]
    239e:	00 80 fa    	ulnk      
    23a0:	00 00 06    	return    

000023a2 <_main>:
    23a2:	00 00 fa    	lnk       #0x0
    23a4:	ce 01 07    	rcall     0x2742 <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    23a6:	7a fe 07    	rcall     0x209c <_init_ajuart> <.L0> <.LFB0> <.LFE21> <.Letext0> <.Ltext0>
    23a8:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    23aa:	d8 82 a9    	bclr.b    0x2d8, #0x4
    23ac:	d0 09 20    	mov.w     #0x9d, w0
    23ae:	87 fd 07    	rcall     0x1ebe <_i2c2_init> <.LFB13> <.LFE12>
    23b0:	80 00 20    	mov.w     #0x8, w0
    23b2:	d0 10 88    	mov.w     w0, 0x21a
    23b4:	1c 22 ef    	clr.w     0x21c
    23b6:	9a 20 a8    	bset.b    0x9a, #0x1
    23b8:	00 02 20    	mov.w     #0x20, w0
    23ba:	20 08 88    	mov.w     w0, 0x104
    23bc:	00 71 22    	mov.w     #0x2710, w0
    23be:	10 08 88    	mov.w     w0, 0x102
    23c0:	00 21 ef    	clr.w     0x100
    23c2:	84 60 a9    	bclr.b    0x84, #0x3
    23c4:	94 60 a8    	bset.b    0x94, #0x3
    23c6:	05 e1 a8    	bset.b    0x105, #0x7
    23c8:	20 3d 22    	mov.w     #0x23d2, w0
    23ca:	00 40 88    	mov.w     w0, 0x800

000023cc <.L10>:
    23cc:	00 40 80    	mov.w     0x800, w0
    23ce:	00 00 01    	call      w0
    23d0:	fd ff 37    	bra       0x23cc <.L10>

000023d2 <_setup>:
    23d2:	00 00 fa    	lnk       #0x0
    23d4:	01 40 80    	mov.w     0x800, w1
    23d6:	10 40 80    	mov.w     0x802, w0
    23d8:	80 8f 50    	sub.w     w1, w0, [w15]
    23da:	0a 00 32    	bra       Z, 0x23f0 <.L12>
    23dc:	00 40 80    	mov.w     0x800, w0
    23de:	10 40 88    	mov.w     w0, 0x802
    23e0:	da 82 a8    	bset.b    0x2da, #0x4
    23e2:	10 00 20    	mov.w     #0x1, w0
    23e4:	01 00 20    	mov.w     #0x0, w1
    23e6:	18 fc 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    23e8:	da a2 a8    	bset.b    0x2da, #0x5
    23ea:	0f 68 ef    	clr.b     0x80f
    23ec:	10 68 ef    	clr.b     0x810
    23ee:	11 68 ef    	clr.b     0x811

000023f0 <.L12>:
    23f0:	12 c8 bf    	mov.b     0x812, WREG
    23f2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    23f4:	05 00 32    	bra       Z, 0x2400 <.L13>
    23f6:	91 16 80    	mov.w     0x2d2, w1
    23f8:	00 00 21    	mov.w     #0x1000, w0
    23fa:	00 80 60    	and.w     w1, w0, w0
    23fc:	00 00 e0    	cp0.w     w0
    23fe:	02 00 3a    	bra       NZ, 0x2404 <.L14>

00002400 <.L13>:
    2400:	a0 41 22    	mov.w     #0x241a, w0
    2402:	00 40 88    	mov.w     w0, 0x800

00002404 <.L14>:
    2404:	01 40 80    	mov.w     0x800, w1
    2406:	10 40 80    	mov.w     0x802, w0
    2408:	80 8f 50    	sub.w     w1, w0, [w15]
    240a:	05 00 32    	bra       Z, 0x2416 <.L11>
    240c:	da a2 a9    	bclr.b    0x2da, #0x5
    240e:	10 00 20    	mov.w     #0x1, w0
    2410:	01 00 20    	mov.w     #0x0, w1
    2412:	02 fc 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2414:	da 82 a9    	bclr.b    0x2da, #0x4

00002416 <.L11>:
    2416:	00 80 fa    	ulnk      
    2418:	00 00 06    	return    

0000241a <_run>:
    241a:	00 00 fa    	lnk       #0x0
    241c:	01 40 80    	mov.w     0x800, w1
    241e:	10 40 80    	mov.w     0x802, w0
    2420:	80 8f 50    	sub.w     w1, w0, [w15]
    2422:	08 00 32    	bra       Z, 0x2434 <.L17>
    2424:	00 40 80    	mov.w     0x800, w0
    2426:	10 40 88    	mov.w     w0, 0x802
    2428:	dc e2 a8    	bset.b    0x2dc, #0x7
    242a:	10 00 20    	mov.w     #0x1, w0
    242c:	01 00 20    	mov.w     #0x0, w1
    242e:	f4 fb 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2430:	da a2 a8    	bset.b    0x2da, #0x5
    2432:	06 68 ef    	clr.b     0x806

00002434 <.L17>:
    2434:	13 c8 bf    	mov.b     0x813, WREG
    2436:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2438:	03 00 3a    	bra       NZ, 0x2440 <.L18>
    243a:	e0 4e 22    	mov.w     #0x24ee, w0
    243c:	00 40 88    	mov.w     w0, 0x800
    243e:	05 00 37    	bra       0x244a <.L19>

00002440 <.L18>:
    2440:	14 c8 bf    	mov.b     0x814, WREG
    2442:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2444:	02 00 3a    	bra       NZ, 0x244a <.L19>
    2446:	20 54 22    	mov.w     #0x2542, w0
    2448:	00 40 88    	mov.w     w0, 0x800

0000244a <.L19>:
    244a:	91 16 80    	mov.w     0x2d2, w1
    244c:	00 00 21    	mov.w     #0x1000, w0
    244e:	00 80 60    	and.w     w1, w0, w0
    2450:	00 00 e0    	cp0.w     w0
    2452:	02 00 3a    	bra       NZ, 0x2458 <.L20>
    2454:	00 4b 22    	mov.w     #0x24b0, w0
    2456:	00 40 88    	mov.w     w0, 0x800

00002458 <.L20>:
    2458:	91 16 80    	mov.w     0x2d2, w1
    245a:	00 00 28    	mov.w     #0x8000, w0
    245c:	00 80 60    	and.w     w1, w0, w0
    245e:	00 00 e0    	cp0.w     w0
    2460:	08 00 3a    	bra       NZ, 0x2472 <.L21>
    2462:	06 c8 bf    	mov.b     0x806, WREG
    2464:	00 04 e0    	cp0.b     w0
    2466:	05 00 3a    	bra       NZ, 0x2472 <.L21>
    2468:	10 c8 bf    	mov.b     0x810, WREG
    246a:	00 40 e8    	inc.b     w0, w0
    246c:	10 e8 b7    	mov.b     WREG, 0x810
    246e:	10 c0 b3    	mov.b     #0x1, w0
    2470:	06 e8 b7    	mov.b     WREG, 0x806

00002472 <.L21>:
    2472:	51 16 80    	mov.w     0x2ca, w1
    2474:	00 00 21    	mov.w     #0x1000, w0
    2476:	00 80 60    	and.w     w1, w0, w0
    2478:	00 00 e0    	cp0.w     w0
    247a:	08 00 3a    	bra       NZ, 0x248c <.L22>
    247c:	06 c8 bf    	mov.b     0x806, WREG
    247e:	00 04 e0    	cp0.b     w0
    2480:	05 00 3a    	bra       NZ, 0x248c <.L22>
    2482:	10 c8 bf    	mov.b     0x810, WREG
    2484:	63 40 40    	add.b     w0, #0x3, w0
    2486:	10 e8 b7    	mov.b     WREG, 0x810
    2488:	10 c0 b3    	mov.b     #0x1, w0
    248a:	06 e8 b7    	mov.b     WREG, 0x806

0000248c <.L22>:
    248c:	10 c8 bf    	mov.b     0x810, WREG
    248e:	59 fe 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    2490:	d0 c0 b3    	mov.b     #0xd, w0
    2492:	57 fe 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    2494:	a0 c0 b3    	mov.b     #0xa, w0
    2496:	55 fe 07    	rcall     0x2142 <_U1_putc> <.LFB5> <.LFE4>
    2498:	4b fe 07    	rcall     0x2130 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    249a:	01 40 80    	mov.w     0x800, w1
    249c:	10 40 80    	mov.w     0x802, w0
    249e:	80 8f 50    	sub.w     w1, w0, [w15]
    24a0:	05 00 32    	bra       Z, 0x24ac <.L16>
    24a2:	dc e2 a9    	bclr.b    0x2dc, #0x7
    24a4:	10 00 20    	mov.w     #0x1, w0
    24a6:	01 00 20    	mov.w     #0x0, w1
    24a8:	b7 fb 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    24aa:	da a2 a9    	bclr.b    0x2da, #0x5

000024ac <.L16>:
    24ac:	00 80 fa    	ulnk      
    24ae:	00 00 06    	return    

000024b0 <_solved>:
    24b0:	00 00 fa    	lnk       #0x0
    24b2:	01 40 80    	mov.w     0x800, w1
    24b4:	10 40 80    	mov.w     0x802, w0
    24b6:	80 8f 50    	sub.w     w1, w0, [w15]
    24b8:	06 00 32    	bra       Z, 0x24c6 <.L25>
    24ba:	00 40 80    	mov.w     0x800, w0
    24bc:	10 40 88    	mov.w     w0, 0x802
    24be:	ec 22 a8    	bset.b    0x2ec, #0x1
    24c0:	10 c0 b3    	mov.b     #0x1, w0
    24c2:	0f e8 b7    	mov.b     WREG, 0x80f
    24c4:	da 82 a8    	bset.b    0x2da, #0x4

000024c6 <.L25>:
    24c6:	13 c8 bf    	mov.b     0x813, WREG
    24c8:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    24ca:	03 00 3a    	bra       NZ, 0x24d2 <.L26>
    24cc:	e0 4e 22    	mov.w     #0x24ee, w0
    24ce:	00 40 88    	mov.w     w0, 0x800
    24d0:	05 00 37    	bra       0x24dc <.L27>

000024d2 <.L26>:
    24d2:	14 c8 bf    	mov.b     0x814, WREG
    24d4:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    24d6:	02 00 3a    	bra       NZ, 0x24dc <.L27>
    24d8:	20 54 22    	mov.w     #0x2542, w0
    24da:	00 40 88    	mov.w     w0, 0x800

000024dc <.L27>:
    24dc:	01 40 80    	mov.w     0x800, w1
    24de:	10 40 80    	mov.w     0x802, w0
    24e0:	80 8f 50    	sub.w     w1, w0, [w15]
    24e2:	03 00 32    	bra       Z, 0x24ea <.L24>
    24e4:	ec 22 a9    	bclr.b    0x2ec, #0x1
    24e6:	0f 68 ef    	clr.b     0x80f
    24e8:	da 82 a9    	bclr.b    0x2da, #0x4

000024ea <.L24>:
    24ea:	00 80 fa    	ulnk      
    24ec:	00 00 06    	return    

000024ee <_end_win>:
    24ee:	00 00 fa    	lnk       #0x0
    24f0:	01 40 80    	mov.w     0x800, w1
    24f2:	10 40 80    	mov.w     0x802, w0
    24f4:	80 8f 50    	sub.w     w1, w0, [w15]
    24f6:	0a 00 32    	bra       Z, 0x250c <.L30>
    24f8:	00 40 80    	mov.w     0x800, w0
    24fa:	10 40 88    	mov.w     w0, 0x802
    24fc:	da 82 a8    	bset.b    0x2da, #0x4
    24fe:	00 03 20    	mov.w     #0x30, w0
    2500:	20 08 88    	mov.w     w0, 0x104
    2502:	10 a1 27    	mov.w     #0x7a11, w0
    2504:	10 08 88    	mov.w     w0, 0x102
    2506:	00 21 ef    	clr.w     0x100
    2508:	84 60 a9    	bclr.b    0x84, #0x3
    250a:	05 e1 a8    	bset.b    0x105, #0x7

0000250c <.L30>:
    250c:	20 04 80    	mov.w     0x84, w0
    250e:	68 00 60    	and.w     w0, #0x8, w0
    2510:	00 00 e0    	cp0.w     w0
    2512:	10 00 32    	bra       Z, 0x2534 <.L31>
    2514:	84 60 a9    	bclr.b    0x84, #0x3
    2516:	d0 16 80    	mov.w     0x2da, w0
    2518:	70 00 60    	and.w     w0, #0x10, w0
    251a:	00 f0 a7    	btsc.w    w0, #0xf
    251c:	00 00 ea    	neg.w     w0, w0
    251e:	00 00 e9    	dec.w     w0, w0
    2520:	4f 00 de    	lsr.w     w0, #0xf, w0
    2522:	00 40 78    	mov.b     w0, w0
    2524:	00 80 fb    	ze        w0, w0
    2526:	61 00 60    	and.w     w0, #0x1, w0
    2528:	44 00 dd    	sl.w      w0, #0x4, w0
    252a:	d2 16 80    	mov.w     0x2da, w2
    252c:	f1 fe 2f    	mov.w     #0xffef, w1
    252e:	81 00 61    	and.w     w2, w1, w1
    2530:	01 00 70    	ior.w     w0, w1, w0
    2532:	d0 16 88    	mov.w     w0, 0x2da

00002534 <.L31>:
    2534:	01 40 80    	mov.w     0x800, w1
    2536:	10 40 80    	mov.w     0x802, w0
    2538:	80 8f 50    	sub.w     w1, w0, [w15]
    253a:	01 00 32    	bra       Z, 0x253e <.L29>
    253c:	da 82 a9    	bclr.b    0x2da, #0x4

0000253e <.L29>:
    253e:	00 80 fa    	ulnk      
    2540:	00 00 06    	return    

00002542 <_end_fail>:
    2542:	00 00 fa    	lnk       #0x0
    2544:	01 40 80    	mov.w     0x800, w1
    2546:	10 40 80    	mov.w     0x802, w0
    2548:	80 8f 50    	sub.w     w1, w0, [w15]
    254a:	0a 00 32    	bra       Z, 0x2560 <.L34>
    254c:	00 40 80    	mov.w     0x800, w0
    254e:	10 40 88    	mov.w     w0, 0x802
    2550:	da a2 a8    	bset.b    0x2da, #0x5
    2552:	00 03 20    	mov.w     #0x30, w0
    2554:	20 08 88    	mov.w     w0, 0x104
    2556:	10 a1 27    	mov.w     #0x7a11, w0
    2558:	10 08 88    	mov.w     w0, 0x102
    255a:	00 21 ef    	clr.w     0x100
    255c:	84 60 a9    	bclr.b    0x84, #0x3
    255e:	05 e1 a8    	bset.b    0x105, #0x7

00002560 <.L34>:
    2560:	20 04 80    	mov.w     0x84, w0
    2562:	68 00 60    	and.w     w0, #0x8, w0
    2564:	00 00 e0    	cp0.w     w0
    2566:	11 00 32    	bra       Z, 0x258a <.L35>
    2568:	84 60 a9    	bclr.b    0x84, #0x3
    256a:	d1 16 80    	mov.w     0x2da, w1
    256c:	00 02 20    	mov.w     #0x20, w0
    256e:	00 80 60    	and.w     w1, w0, w0
    2570:	00 f0 a7    	btsc.w    w0, #0xf
    2572:	00 00 ea    	neg.w     w0, w0
    2574:	00 00 e9    	dec.w     w0, w0
    2576:	4f 00 de    	lsr.w     w0, #0xf, w0
    2578:	00 40 78    	mov.b     w0, w0
    257a:	00 80 fb    	ze        w0, w0
    257c:	61 00 60    	and.w     w0, #0x1, w0
    257e:	45 00 dd    	sl.w      w0, #0x5, w0
    2580:	d2 16 80    	mov.w     0x2da, w2
    2582:	f1 fd 2f    	mov.w     #0xffdf, w1
    2584:	81 00 61    	and.w     w2, w1, w1
    2586:	01 00 70    	ior.w     w0, w1, w0
    2588:	d0 16 88    	mov.w     w0, 0x2da

0000258a <.L35>:
    258a:	01 40 80    	mov.w     0x800, w1
    258c:	10 40 80    	mov.w     0x802, w0
    258e:	80 8f 50    	sub.w     w1, w0, [w15]
    2590:	02 00 32    	bra       Z, 0x2596 <.L33>
    2592:	da a2 a9    	bclr.b    0x2da, #0x5
    2594:	05 e1 a9    	bclr.b    0x105, #0x7

00002596 <.L33>:
    2596:	00 80 fa    	ulnk      
    2598:	00 00 06    	return    

0000259a <_ledoff>:
    259a:	00 00 fa    	lnk       #0x0
    259c:	dc e2 a9    	bclr.b    0x2dc, #0x7
    259e:	10 00 20    	mov.w     #0x1, w0
    25a0:	01 00 20    	mov.w     #0x0, w1
    25a2:	3a fb 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    25a4:	ec 02 a9    	bclr.b    0x2ec, #0x0
    25a6:	10 00 20    	mov.w     #0x1, w0
    25a8:	01 00 20    	mov.w     #0x0, w1
    25aa:	36 fb 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    25ac:	ec 22 a9    	bclr.b    0x2ec, #0x1
    25ae:	10 00 20    	mov.w     #0x1, w0
    25b0:	01 00 20    	mov.w     #0x0, w1
    25b2:	32 fb 07    	rcall     0x1c18 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    25b4:	da a2 a9    	bclr.b    0x2da, #0x5
    25b6:	00 80 fa    	ulnk      
    25b8:	00 00 06    	return    
Disassembly of section .isr.text:

000025ba <__SI2C2Interrupt>:
    25ba:	80 9f be    	mov.d     w0, [w15++]
    25bc:	32 00 f8    	push      0x32
    25be:	34 00 f8    	push      0x34
    25c0:	10 00 20    	mov.w     #0x1, w0
    25c2:	a0 01 88    	mov.w     w0, 0x34
    25c4:	00 20 20    	mov.w     #0x200, w0
    25c6:	90 01 88    	mov.w     w0, 0x32
    25c8:	02 00 fa    	lnk       #0x2
    25ca:	8a 20 a9    	bclr.b    0x8a, #0x1
    25cc:	b0 40 80    	mov.w     0x816, w0
    25ce:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25d0:	23 00 32    	bra       Z, 0x2618 <.L4>
    25d2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25d4:	03 00 39    	bra       NC, 0x25dc <.L3>
    25d6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    25d8:	50 00 32    	bra       Z, 0x267a <.L5>
    25da:	51 00 37    	bra       0x267e <.L18>

000025dc <.L3>:
    25dc:	80 10 80    	mov.w     0x210, w0
    25de:	00 4f 78    	mov.b     w0, [w14]
    25e0:	c0 10 80    	mov.w     0x218, w0
    25e2:	64 00 60    	and.w     w0, #0x4, w0
    switch (i2c2_state) {

    case STATE_WAIT_FOR_ADDR:
        u8_c = I2C2RCV;     //clear RBF bit for address
        if (I2C2STATbits.R_W) {   // if data transfer is out from slave // check R/W bit of address byte
    25e4:	00 00 e0    	cp0.w     w0
    25e6:	15 00 32    	bra       Z, 0x2612 <.L6>
            _byte_to_master = (complete_flag << 7) | ((num_strikes & 0b111) << 4) | (error_code & 0b1111) ; // assemble
    25e8:	0f c8 bf    	mov.b     0x80f, WREG
    25ea:	00 80 fb    	ze        w0, w0
    25ec:	47 00 dd    	sl.w      w0, #0x7, w0
    25ee:	80 40 78    	mov.b     w0, w1
    25f0:	10 c8 bf    	mov.b     0x810, WREG
    25f2:	00 80 fb    	ze        w0, w0
    25f4:	67 00 60    	and.w     w0, #0x7, w0
    25f6:	44 00 dd    	sl.w      w0, #0x4, w0
    25f8:	00 40 78    	mov.b     w0, w0
    25fa:	80 c0 70    	ior.b     w1, w0, w1
    25fc:	11 c8 bf    	mov.b     0x811, WREG
    25fe:	6f 40 60    	and.b     w0, #0xf, w0
    2600:	00 c0 70    	ior.b     w1, w0, w0
    2602:	0c e8 b7    	mov.b     WREG, 0x80c
            I2C2TRN = _byte_to_master;   //Set transmit register to first data byte to send back to master
    2604:	0c c8 bf    	mov.b     0x80c, WREG
    2606:	00 80 fb    	ze        w0, w0
    2608:	90 10 88    	mov.w     w0, 0x212
            I2C2CONbits.SCLREL = 1;    //  SCL released during slave read so master can drive it
    260a:	17 82 a8    	bset.b    0x217, #0x4
            i2c2_state = STATE_END_TRANSACTION; //goes to read transaction
    260c:	20 00 20    	mov.w     #0x2, w0
    260e:	b0 40 88    	mov.w     w0, 0x816
        }
        else i2c2_state = STATE_RECEIVE_FROM_MASTER;     // goes to write transaction
        break;
    2610:	37 00 37    	bra       0x2680 <.L1>

00002612 <.L6>:
    2612:	10 00 20    	mov.w     #0x1, w0
    2614:	b0 40 88    	mov.w     w0, 0x816
    2616:	34 00 37    	bra       0x2680 <.L1>

00002618 <.L4>:

    case STATE_RECEIVE_FROM_MASTER:     // write transaction state, character arrived, place in buffer
        _data_from_master = I2C2RCV;        //read the byte
    2618:	80 10 80    	mov.w     0x210, w0
    261a:	00 40 78    	mov.b     w0, w0
    261c:	0d e8 b7    	mov.b     WREG, 0x80d
        switch (_data_from_master >> 5){
    261e:	0d c8 bf    	mov.b     0x80d, WREG
    2620:	00 80 fb    	ze        w0, w0
    2622:	45 00 de    	lsr.w     w0, #0x5, w0
    2624:	00 40 78    	mov.b     w0, w0
    2626:	00 80 fb    	ze        w0, w0
    2628:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    262a:	0f 00 32    	bra       Z, 0x264a <.L12>
    262c:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    262e:	05 00 3c    	bra       GT, 0x263a <.L16>
    2630:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2632:	16 00 32    	bra       Z, 0x2660 <.L10>
    2634:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2636:	17 00 32    	bra       Z, 0x2666 <.L11>
    2638:	19 00 37    	bra       0x266c <.L9>

0000263a <.L16>:
    263a:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    263c:	0a 00 32    	bra       Z, 0x2652 <.L14>
    263e:	11 10 20    	mov.w     #0x101, w1
    2640:	81 0f 50    	sub.w     w0, w1, [w15]
    2642:	18 00 32    	bra       Z, 0x2674 <.L19>
    2644:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    2646:	09 00 32    	bra       Z, 0x265a <.L13>
    2648:	11 00 37    	bra       0x266c <.L9>

0000264a <.L12>:
            case HEADER_SERIAL_NUMBER: // 100
                serial_number = _data_from_master & 0b00011111 ;
    264a:	0d c8 bf    	mov.b     0x80d, WREG
    264c:	7f 40 60    	and.b     w0, #0x1f, w0
    264e:	0e e8 b7    	mov.b     WREG, 0x80e
            break;
    2650:	12 00 37    	bra       0x2676 <.L17>

00002652 <.L14>:
            case HEADER_NUM_STRIKES:    // 111
                num_strikes = _data_from_master & 0b00011111 ;
    2652:	0d c8 bf    	mov.b     0x80d, WREG
    2654:	7f 40 60    	and.b     w0, #0x1f, w0
    2656:	10 e8 b7    	mov.b     WREG, 0x810
            break;
    2658:	0e 00 37    	bra       0x2676 <.L17>

0000265a <.L13>:
            case HEADER_START_GAME:    // 110
                start_flag = 1 ;
    265a:	10 c0 b3    	mov.b     #0x1, w0
    265c:	12 e8 b7    	mov.b     WREG, 0x812
            break;
    265e:	0b 00 37    	bra       0x2676 <.L17>

00002660 <.L10>:
            case HEADER_END_WIN:    // 001
                win_flag = 1 ;
    2660:	10 c0 b3    	mov.b     #0x1, w0
    2662:	13 e8 b7    	mov.b     WREG, 0x813
            break;
    2664:	08 00 37    	bra       0x2676 <.L17>

00002666 <.L11>:
            case HEADER_END_LOSE:    // 010
                lose_flag = 1 ;
    2666:	10 c0 b3    	mov.b     #0x1, w0
    2668:	14 e8 b7    	mov.b     WREG, 0x814
            break;
    266a:	05 00 37    	bra       0x2676 <.L17>

0000266c <.L9>:
            case HEADER_RST_FSM:    // 101
                //this is just to reset the fsm after i2c poll
            break;

            default: error_code ++ ;
    266c:	11 c8 bf    	mov.b     0x811, WREG
    266e:	00 40 e8    	inc.b     w0, w0
    2670:	11 e8 b7    	mov.b     WREG, 0x811
    2672:	01 00 37    	bra       0x2676 <.L17>

00002674 <.L19>:
    2674:	00 00 00    	nop       

00002676 <.L17>:

        }
        i2c2_state = STATE_WAIT_FOR_ADDR;    // go to wait for next transaction
    2676:	16 28 ef    	clr.w     0x816
        break;
    2678:	03 00 37    	bra       0x2680 <.L1>

0000267a <.L5>:

    case STATE_END_TRANSACTION:  //interrupt for last character finished shifting out to master
        i2c2_state = STATE_WAIT_FOR_ADDR;
    267a:	16 28 ef    	clr.w     0x816
        break;
    267c:	01 00 37    	bra       0x2680 <.L1>

0000267e <.L18>:

    default:
        i2c2_state = STATE_WAIT_FOR_ADDR;
    267e:	16 28 ef    	clr.w     0x816

00002680 <.L1>:

    } // end of switch statements
}   // end of ISR
    2680:	00 80 fa    	ulnk      
    2682:	34 00 f9    	pop       0x34
    2684:	32 00 f9    	pop       0x32
    2686:	4f 00 be    	mov.d     [--w15], w0
    2688:	00 40 06    	retfie    

0000268a <__U1TXInterrupt>:
    268a:	80 9f be    	mov.d     w0, [w15++]
    268c:	32 00 f8    	push      0x32
    268e:	34 00 f8    	push      0x34
    2690:	10 00 20    	mov.w     #0x1, w0
    2692:	a0 01 88    	mov.w     w0, 0x34
    2694:	00 20 20    	mov.w     #0x200, w0
    2696:	90 01 88    	mov.w     w0, 0x32
    2698:	02 00 fa    	lnk       #0x2
    269a:	85 80 a9    	bclr.b    0x85, #0x4
    269c:	10 41 80    	mov.w     0x822, w0
    269e:	00 00 e0    	cp0.w     w0
    26a0:	17 00 3a    	bra       NZ, 0x26d0 <.L8>
    26a2:	23 42 a9    	bclr.b    0x223, #0x2
    26a4:	16 00 37    	bra       0x26d2 <.L4>

000026a6 <.L7>:
    26a6:	ff 3f fc    	disi      #0x3fff
    26a8:	d1 40 80    	mov.w     0x81a, w1
    26aa:	f0 40 80    	mov.w     0x81e, w0
    26ac:	00 80 40    	add.w     w1, w0, w0
    26ae:	10 4f 78    	mov.b     [w0], [w14]
    26b0:	f0 40 80    	mov.w     0x81e, w0
    26b2:	00 00 e8    	inc.w     w0, w0
    26b4:	f0 40 88    	mov.w     w0, 0x81e
    26b6:	f1 40 80    	mov.w     0x81e, w1
    26b8:	e0 40 80    	mov.w     0x81c, w0
    26ba:	80 8f 50    	sub.w     w1, w0, [w15]
    26bc:	02 00 3a    	bra       NZ, 0x26c2 <.L5>
    26be:	00 00 eb    	clr.w     w0
    26c0:	f0 40 88    	mov.w     w0, 0x81e

000026c2 <.L5>:
    26c2:	10 41 80    	mov.w     0x822, w0
    26c4:	00 00 e9    	dec.w     w0, w0
    26c6:	10 41 88    	mov.w     w0, 0x822
    26c8:	52 20 ef    	clr.w     0x52
    26ca:	1e 80 fb    	ze        [w14], w0
    26cc:	20 11 88    	mov.w     w0, 0x224
    26ce:	01 00 37    	bra       0x26d2 <.L4>

000026d0 <.L8>:
    26d0:	00 00 00    	nop       

000026d2 <.L4>:
    26d2:	11 11 80    	mov.w     0x222, w1
    26d4:	00 20 20    	mov.w     #0x200, w0
    26d6:	00 80 60    	and.w     w1, w0, w0
    26d8:	00 00 e0    	cp0.w     w0
    26da:	03 00 3a    	bra       NZ, 0x26e2 <.L2>
    26dc:	10 41 80    	mov.w     0x822, w0
    26de:	00 00 e0    	cp0.w     w0
    26e0:	e2 ff 3a    	bra       NZ, 0x26a6 <.L7>

000026e2 <.L2>:
    26e2:	00 80 fa    	ulnk      
    26e4:	34 00 f9    	pop       0x34
    26e6:	32 00 f9    	pop       0x32
    26e8:	4f 00 be    	mov.d     [--w15], w0
    26ea:	00 40 06    	retfie    

000026ec <__U1RXInterrupt>:
    26ec:	80 9f be    	mov.d     w0, [w15++]
    26ee:	32 00 f8    	push      0x32
    26f0:	34 00 f8    	push      0x34
    26f2:	10 00 20    	mov.w     #0x1, w0
    26f4:	a0 01 88    	mov.w     w0, 0x34
    26f6:	00 20 20    	mov.w     #0x200, w0
    26f8:	90 01 88    	mov.w     w0, 0x32
    26fa:	00 00 fa    	lnk       #0x0
    26fc:	85 60 a9    	bclr.b    0x85, #0x3
    26fe:	14 00 37    	bra       0x2728 <.L10>

00002700 <.L13>:
    2700:	ff 3f fc    	disi      #0x3fff
    2702:	21 41 80    	mov.w     0x824, w1
    2704:	50 41 80    	mov.w     0x82a, w0
    2706:	00 80 40    	add.w     w1, w0, w0
    2708:	31 11 80    	mov.w     0x226, w1
    270a:	81 40 78    	mov.b     w1, w1
    270c:	01 48 78    	mov.b     w1, [w0]
    270e:	50 41 80    	mov.w     0x82a, w0
    2710:	00 00 e8    	inc.w     w0, w0
    2712:	50 41 88    	mov.w     w0, 0x82a
    2714:	51 41 80    	mov.w     0x82a, w1
    2716:	30 41 80    	mov.w     0x826, w0
    2718:	80 8f 50    	sub.w     w1, w0, [w15]
    271a:	02 00 3a    	bra       NZ, 0x2720 <.L11>
    271c:	00 00 eb    	clr.w     w0
    271e:	50 41 88    	mov.w     w0, 0x82a

00002720 <.L11>:
    2720:	60 41 80    	mov.w     0x82c, w0
    2722:	00 00 e8    	inc.w     w0, w0
    2724:	60 41 88    	mov.w     w0, 0x82c
    2726:	52 20 ef    	clr.w     0x52

00002728 <.L10>:
    2728:	10 11 80    	mov.w     0x222, w0
    272a:	61 00 60    	and.w     w0, #0x1, w0
    272c:	00 00 e0    	cp0.w     w0
    272e:	04 00 32    	bra       Z, 0x2738 <.L9>
    2730:	61 41 80    	mov.w     0x82c, w1
    2732:	30 41 80    	mov.w     0x826, w0
    2734:	80 8f 50    	sub.w     w1, w0, [w15]
    2736:	e4 ff 3a    	bra       NZ, 0x2700 <.L13>

00002738 <.L9>:
    2738:	00 80 fa    	ulnk      
    273a:	34 00 f9    	pop       0x34
    273c:	32 00 f9    	pop       0x32
    273e:	4f 00 be    	mov.d     [--w15], w0
    2740:	00 40 06    	retfie    
Disassembly of section .text:

00002742 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    2742:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    2744:	00 10 20    	mov.w     #0x100, w0
    2746:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    2748:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    274a:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    274c:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    274e:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    2750:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    2752:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    2754:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    2756:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    2758:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    275a:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    275c:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    275e:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    2760:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    2762:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    2764:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    2766:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    2768:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    276a:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    276c:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    276e:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    2770:	f0 03 20    	mov.w     #0x3f, w0
    2772:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    2774:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    2776:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    2778:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    277a:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    277c:	00 0e 20    	mov.w     #0xe0, w0
    277e:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    2780:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    2782:	00 c4 20    	mov.w     #0xc40, w0
    2784:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    2786:	50 00 20    	mov.w     #0x5, w0
    2788:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    278a:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    278c:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    278e:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    2790:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2792:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    2794:	e8 22 a9    	bclr.b    0x2e8, #0x1
    2796:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    2798:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    279a:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    279c:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    279e:	00 80 fa    	ulnk      
    27a0:	00 00 06    	return    

000027a2 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    27a2:	02 00 fa    	lnk       #0x2
    27a4:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    27a6:	9e 00 78    	mov.w     [w14], w1
    27a8:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    27aa:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    27ac:	00 00 00    	nop       

000027ae <.L3>:
    27ae:	00 19 80    	mov.w     0x320, w0
    27b0:	61 00 60    	and.w     w0, #0x1, w0
    27b2:	00 00 e0    	cp0.w     w0
    27b4:	fc ff 32    	bra       Z, 0x27ae <.L3>
    return ADC1BUF0;
    27b6:	00 18 80    	mov.w     0x300, w0
}
    27b8:	00 80 fa    	ulnk      
    27ba:	00 00 06    	return    
Disassembly of section .isr.text:

000027bc <__T1Interrupt>:
    27bc:	36 00 f8    	push      0x36
    27be:	80 9f be    	mov.d     w0, [w15++]
    27c0:	82 9f be    	mov.d     w2, [w15++]
    27c2:	84 9f be    	mov.d     w4, [w15++]
    27c4:	86 9f be    	mov.d     w6, [w15++]
    27c6:	32 00 f8    	push      0x32
    27c8:	34 00 f8    	push      0x34
    27ca:	10 00 20    	mov.w     #0x1, w0
    27cc:	a0 01 88    	mov.w     w0, 0x34
    27ce:	00 20 20    	mov.w     #0x200, w0
    27d0:	90 01 88    	mov.w     w0, 0x32
    27d2:	00 00 fa    	lnk       #0x0
    27d4:	84 60 a9    	bclr.b    0x84, #0x3
    27d6:	50 00 20    	mov.w     #0x5, w0
    27d8:	e4 ff 07    	rcall     0x27a2 <_read_analog> <.LFB1> <.LFE0>
    27da:	80 40 78    	mov.b     w0, w1
    27dc:	40 03 21    	mov.w     #0x1034, w0
    27de:	01 48 78    	mov.b     w1, [w0]
    27e0:	40 00 20    	mov.w     #0x4, w0
    27e2:	df ff 07    	rcall     0x27a2 <_read_analog> <.LFB1> <.LFE0>
    27e4:	80 40 78    	mov.b     w0, w1
    27e6:	50 03 21    	mov.w     #0x1035, w0
    27e8:	01 48 78    	mov.b     w1, [w0]
    27ea:	30 00 20    	mov.w     #0x3, w0
    27ec:	da ff 07    	rcall     0x27a2 <_read_analog> <.LFB1> <.LFE0>
    27ee:	80 40 78    	mov.b     w0, w1
    27f0:	60 03 21    	mov.w     #0x1036, w0
    27f2:	01 48 78    	mov.b     w1, [w0]
    27f4:	40 40 80    	mov.w     0x808, w0
    27f6:	41 03 21    	mov.w     #0x1034, w1
    27f8:	91 40 78    	mov.b     [w1], w1
    27fa:	01 48 78    	mov.b     w1, [w0]
    27fc:	40 03 21    	mov.w     #0x1034, w0
    27fe:	50 40 88    	mov.w     w0, 0x80a
    2800:	00 80 fa    	ulnk      
    2802:	34 00 f9    	pop       0x34
    2804:	32 00 f9    	pop       0x32
    2806:	4f 03 be    	mov.d     [--w15], w6
    2808:	4f 02 be    	mov.d     [--w15], w4
    280a:	4f 01 be    	mov.d     [--w15], w2
    280c:	4f 00 be    	mov.d     [--w15], w0
    280e:	36 00 f9    	pop       0x36
    2810:	00 40 06    	retfie    
Disassembly of section .dinit:

00002812 <.dinit>:
    2812:	2e 10 00    	nop       
    2814:	08 00 00    	nop       
    2816:	80 00 00    	nop       
    2818:	00 08 00    	nop       
    281a:	0c 00 00    	nop       
    281c:	80 00 00    	nop       
    281e:	0c 08 00    	nop       
    2820:	0c 00 00    	nop       
    2822:	80 00 00    	nop       
    2824:	1a 08 00    	nop       
    2826:	14 08 00    	nop       
    2828:	80 00 00    	nop       
    282a:	18 08 00    	nop       
    282c:	02 00 00    	nop       
    282e:	80 00 00    	nop       
    2830:	00 00 00    	nop       
Disassembly of section .isr:

00002832 <__DefaultInterrupt>:
    2832:	00 40 da    	break     
    2834:	00 00 fe    	reset     
