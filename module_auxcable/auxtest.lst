
auxtest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	80 1e 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	80 1e 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	80 1e 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	80 1e 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	80 1e 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	80 1e 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	80 1e 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	80 1e 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	80 1e 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	80 1e 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	80 1e 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	80 1e 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	80 1e 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	80 1e 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	80 1e 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	80 1e 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	80 1e 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	80 1e 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	80 1e 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	80 1e 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	80 1e 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	80 1e 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	80 1e 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	80 1e 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	80 1e 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	80 1e 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	80 1e 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	80 1e 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	80 1e 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	80 1e 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	80 1e 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	80 1e 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	80 1e 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	80 1e 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	80 1e 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	80 1e 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	80 1e 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	80 1e 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	80 1e 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	80 1e 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	80 1e 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	80 1e 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	80 1e 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	80 1e 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	80 1e 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	80 1e 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	80 1e 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	80 1e 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	80 1e 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	80 1e 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	80 1e 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	80 1e 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	80 1e 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	80 1e 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	80 1e 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	80 1e 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	80 1e 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	80 1e 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	80 1e 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	80 1e 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	80 1e 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	80 1e 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	80 1e 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	80 1e 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	80 1e 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	80 1e 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	80 1e 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	80 1e 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	80 1e 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	80 1e 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f a8 20    	mov.w     #0xa80, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	7b 00 07    	rcall     0x121c <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	60 e6 21    	mov.w     #0x1e66, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	32 1c 02    	call      0x1c32 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	a0 06 20    	mov.w     #0x6a, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	c6 12 04    	goto      0x12c6 <_usb_set_address_callback>
    1216:	00 00 00 
    1218:	0c 1b 04    	goto      0x1b0c <_usb_send_data_packet>
    121a:	00 00 00 

0000121c <__crt_start_mode>:
    121c:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	3a 1e 04    	goto      0x1e3a <__USB1Interrupt>
    10ee:	00 00 00 
    10f0:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	80 1e 04    	goto      0x1e80 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000921e <_Device>:
    921e:	12 01       	.word 0x112
    9220:	00 02       	.word 0x200
    9222:	00 00       	.word 0
    9224:	00 40       	.word 0x4000
    9226:	66 66       	.word 0x6666
    9228:	03 00       	.word 0x3
    922a:	00 00       	.word 0
    922c:	01 02       	.word 0x201
    922e:	00 01       	.word 0x100

00009230 <_Configuration1>:
    9230:	09 02       	.word 0x209
    9232:	12 00       	.word 0x12
    9234:	01 01       	.word 0x101
    9236:	00 a0       	.word 0xa000
    9238:	32 09       	.word 0x932
    923a:	04 00       	.word 0x4
    923c:	00 00       	.word 0
    923e:	ff 00       	.word 0xff
    9240:	ff 00       	.word 0xff

00009242 <_Configurations>:
    9242:	30 92       	.word 0x9230

00009244 <_String0>:
    9244:	04 03       	.word 0x304
    9246:	09 04       	.word 0x409

00009248 <_String1>:
    9248:	1a 03       	.word 0x31a
    924a:	4f 00       	.word 0x4f
    924c:	6c 00       	.word 0x6c
    924e:	69 00       	.word 0x69
    9250:	6e 00       	.word 0x6e
    9252:	20 00       	.word 0x20
    9254:	43 00       	.word 0x43
    9256:	6f 00       	.word 0x6f
    9258:	6c 00       	.word 0x6c
    925a:	6c 00       	.word 0x6c
    925c:	65 00       	.word 0x65
    925e:	67 00       	.word 0x67
    9260:	65 00       	.word 0x65

00009262 <_String2>:
    9262:	20 03       	.word 0x320
    9264:	50 00       	.word 0x50
    9266:	49 00       	.word 0x49
    9268:	43 00       	.word 0x43
    926a:	32 00       	.word 0x32
    926c:	34 00       	.word 0x34
    926e:	46 00       	.word 0x46
    9270:	4a 00       	.word 0x4a
    9272:	31 00       	.word 0x31
    9274:	32 00       	.word 0x32
    9276:	38 00       	.word 0x38
    9278:	47 00       	.word 0x47
    927a:	42 00       	.word 0x42
    927c:	32 00       	.word 0x32
    927e:	30 00       	.word 0x30
    9280:	36 00       	.word 0x36

00009282 <_Strings>:
    9282:	44 92       	.word 0x9244
    9284:	48 92       	.word 0x9248
    9286:	62 92       	.word 0x9262
Disassembly of section .text:

00001288 <_usb_disable_endpoints>:
    usb_service();
}
#endif

void usb_disable_endpoints(uint8_t starting_ep) {
    1288:	06 00 fa    	lnk       #0x6
    128a:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t *U1EP;
    uint8_t ep;

    U1EP = (uint16_t *)&U1EP0;
    128c:	a0 4a 20    	mov.w     #0x4aa, w0
    128e:	10 07 98    	mov.w     w0, [w14+2]
    for (ep = starting_ep; ep < 16; ep++) {
    1290:	ce 40 90    	mov.b     [w14+4], w1
    1292:	01 4f 78    	mov.b     w1, [w14]
    1294:	13 00 37    	bra       0x12bc <.L3>

00001296 <.L4>:
        U1EP[ep] = ENDPT_DISABLED;
    1296:	1e 80 fb    	ze        [w14], w0
    1298:	00 00 40    	add.w     w0, w0, w0
    129a:	9e 00 90    	mov.w     [w14+2], w1
    129c:	00 80 40    	add.w     w1, w0, w0
    129e:	80 00 eb    	clr.w     w1
    12a0:	01 08 78    	mov.w     w1, [w0]
        USB_in_callbacks[ep] = (USB_CALLBACK_T)NULL;
    12a2:	1e 80 fb    	ze        [w14], w0
    12a4:	80 00 40    	add.w     w0, w0, w1
    12a6:	a0 8a 20    	mov.w     #0x8aa, w0
    12a8:	00 80 40    	add.w     w1, w0, w0
    12aa:	80 00 eb    	clr.w     w1
    12ac:	01 08 78    	mov.w     w1, [w0]
        USB_out_callbacks[ep] = (USB_CALLBACK_T)NULL;
    12ae:	1e 80 fb    	ze        [w14], w0
    12b0:	80 00 40    	add.w     w0, w0, w1
    12b2:	a0 8c 20    	mov.w     #0x8ca, w0
    12b4:	00 80 40    	add.w     w1, w0, w0
    12b6:	80 00 eb    	clr.w     w1
    12b8:	01 08 78    	mov.w     w1, [w0]
    12ba:	1e 4f e8    	inc.b     [w14], [w14]

000012bc <.L3>:
    12bc:	1e 40 78    	mov.b     [w14], w0
    12be:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    12c0:	ea ff 36    	bra       LEU, 0x1296 <.L4>
    }
}
    12c2:	00 80 fa    	ulnk      
    12c4:	00 00 06    	return    

000012c6 <_usb_set_address_callback>:

void usb_set_address_callback(void) {
    12c6:	00 00 fa    	lnk       #0x0
    switch (U1ADDR = USB_request.setup.wValue.b[0]) {
    12c8:	e0 89 20    	mov.w     #0x89e, w0
    12ca:	10 40 78    	mov.b     [w0], w0
    12cc:	00 80 fb    	ze        w0, w0
    12ce:	b0 24 88    	mov.w     w0, 0x496
    12d0:	b0 24 80    	mov.w     0x496, w0
    12d2:	00 00 e0    	cp0.w     w0
    12d4:	03 00 3a    	bra       NZ, 0x12dc <.L9>
        case 0:
            USB_USWSTAT = DEFAULT_STATE;
    12d6:	10 c0 b3    	mov.b     #0x1, w0
    12d8:	10 e8 b7    	mov.b     WREG, 0x810
            break;
    12da:	02 00 37    	bra       0x12e0 <.L8>

000012dc <.L9>:
        default:
            USB_USWSTAT = ADDRESS_STATE;
    12dc:	20 c0 b3    	mov.b     #0x2, w0
    12de:	10 e8 b7    	mov.b     WREG, 0x810

000012e0 <.L8>:
    }
    USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    12e0:	00 00 eb    	clr.w     w0
    12e2:	50 45 88    	mov.w     w0, 0x8aa
}
    12e4:	00 80 fa    	ulnk      
    12e6:	00 00 06    	return    

000012e8 <_init_usb>:

void init_usb(void) {
    12e8:	00 00 fa    	lnk       #0x0
    IEC5bits.USB1IE = 0;                    // disable USB interrupt
    12ea:	9e c0 a9    	bclr.b    0x9e, #0x6

    U1CONbits.PPBRST = 1;
    12ec:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    12ee:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    12f0:	f0 0f 20    	mov.w     #0xff, w0
    12f2:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    12f4:	94 24 a9    	bclr.b    0x494, #0x1
    usb_disable_endpoints(0);               // disable all endpoints
    12f6:	00 40 eb    	clr.b     w0
    12f8:	c7 ff 07    	rcall     0x1288 <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
    U1EP0 = ENDPT_CONTROL;
    12fa:	d0 00 20    	mov.w     #0xd, w0
    12fc:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    12fe:	00 a0 20    	mov.w     #0xa00, w0
    1300:	01 c4 b3    	mov.b     #0x40, w1
    1302:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    1304:	c0 81 20    	mov.w     #0x81c, w0
    1306:	10 50 88    	mov.w     w0, 0xa02
    BD[EP0OUT].status = UOWN | DTSEN;       // set UOWN bit (USB can write)
    1308:	10 a0 20    	mov.w     #0xa01, w0
    130a:	81 c8 b3    	mov.b     #0x88, w1
    130c:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    130e:	c0 85 20    	mov.w     #0x85c, w0
    1310:	30 50 88    	mov.w     w0, 0xa06
    BD[EP0IN].status = DTSEN;               // clear UOWN bit (MCU can write)
    1312:	50 a0 20    	mov.w     #0xa05, w0
    1314:	81 c0 b3    	mov.b     #0x8, w1
    1316:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0;
    1318:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0;
    131a:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (uint16_t)BD >> 8;
    131c:	00 a0 20    	mov.w     #0xa00, w0
    131e:	48 00 de    	lsr.w     w0, #0x8, w0
    1320:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    1322:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    1324:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    1326:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    1328:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0;
    132a:	0d 68 ef    	clr.b     0x80d
    USB_USWSTAT = POWERED_STATE;
    132c:	10 68 ef    	clr.b     0x810
    USB_device_status = 1;
    132e:	10 c0 b3    	mov.b     #0x1, w0
    1330:	0e e8 b7    	mov.b     WREG, 0x80e
    USB_request.setup.bmRequestType = NO_REQUEST;
    1332:	c0 89 20    	mov.w     #0x89c, w0
    1334:	80 c0 eb    	setm.b    w1
    1336:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    1338:	d0 89 20    	mov.w     #0x89d, w0
    133a:	80 c0 eb    	setm.b    w1
    133c:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    133e:	00 00 eb    	clr.w     w0
    1340:	30 45 88    	mov.w     w0, 0x8a6
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1342:	00 00 eb    	clr.w     w0
    1344:	40 45 88    	mov.w     w0, 0x8a8
    while (U1CONbits.SE0) {}
    1346:	00 00 00    	nop       

00001348 <.L11>:
    1348:	a1 24 80    	mov.w     0x494, w1
    134a:	00 04 20    	mov.w     #0x40, w0
    134c:	00 80 60    	and.w     w1, w0, w0
    134e:	00 00 e0    	cp0.w     w0
    1350:	fb ff 3a    	bra       NZ, 0x1348 <.L11>

#ifdef USB_INTERRUPT
    U1IE = 0xFF;
    1352:	f0 0f 20    	mov.w     #0xff, w0
    1354:	60 24 88    	mov.w     w0, 0x48c
    U1EIE = 0xFF;
    1356:	f0 0f 20    	mov.w     #0xff, w0
    1358:	80 24 88    	mov.w     w0, 0x490
    IFS5bits.USB1IF = 0;
    135a:	8e c0 a9    	bclr.b    0x8e, #0x6
    IEC5bits.USB1IE = 1;
    135c:	9e c0 a8    	bset.b    0x9e, #0x6
#endif
}
    135e:	00 80 fa    	ulnk      
    1360:	00 00 06    	return    

00001362 <_usb_service>:

void usb_service(void) {
    1362:	04 00 fa    	lnk       #0x4
    BUFDESC *buf_desc_ptr;
    uint8_t ep;

    if (U1IRbits.UERRIF) {
    1364:	50 24 80    	mov.w     0x48a, w0
    1366:	62 00 60    	and.w     w0, #0x2, w0
    1368:	00 00 e0    	cp0.w     w0
    136a:	05 00 32    	bra       Z, 0x1376 <.L13>
        U1EIR = 0xFF;                       // clear all flags in U1EIR to clear U1EIR
    136c:	f0 0f 20    	mov.w     #0xff, w0
    136e:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;                 // clear UERRIF
    1370:	20 00 20    	mov.w     #0x2, w0
    1372:	50 24 88    	mov.w     w0, 0x48a
    1374:	ba 00 37    	bra       0x14ea <.L14>

00001376 <.L13>:
    } else if (U1IRbits.SOFIF) {
    1376:	50 24 80    	mov.w     0x48a, w0
    1378:	64 00 60    	and.w     w0, #0x4, w0
    137a:	00 00 e0    	cp0.w     w0
    137c:	03 00 32    	bra       Z, 0x1384 <.L15>
        U1IR = U1IR_SOFIF;                  // clear SOFIF
    137e:	40 00 20    	mov.w     #0x4, w0
    1380:	50 24 88    	mov.w     w0, 0x48a
    1382:	b3 00 37    	bra       0x14ea <.L14>

00001384 <.L15>:
    } else if (U1IRbits.IDLEIF) {
    1384:	50 24 80    	mov.w     0x48a, w0
    1386:	70 00 60    	and.w     w0, #0x10, w0
    1388:	00 00 e0    	cp0.w     w0
    138a:	03 00 32    	bra       Z, 0x1392 <.L16>
        U1IR = U1IR_IDLEIF;                 // clear IDLEIF
    138c:	00 01 20    	mov.w     #0x10, w0
    138e:	50 24 88    	mov.w     w0, 0x48a
    1390:	ac 00 37    	bra       0x14ea <.L14>

00001392 <.L16>:
//      U1PWRCbits.USUSPND = 1;             // put USB module in suspend mode
    } else if (U1IRbits.RESUMEIF) {
    1392:	51 24 80    	mov.w     0x48a, w1
    1394:	00 02 20    	mov.w     #0x20, w0
    1396:	00 80 60    	and.w     w1, w0, w0
    1398:	00 00 e0    	cp0.w     w0
    139a:	03 00 32    	bra       Z, 0x13a2 <.L17>
        U1IR = U1IR_RESUMEIF;               // clear RESUMEIF
    139c:	00 02 20    	mov.w     #0x20, w0
    139e:	50 24 88    	mov.w     w0, 0x48a
    13a0:	a4 00 37    	bra       0x14ea <.L14>

000013a2 <.L17>:
//      U1PWRCbits.USUSPND = 0;             // resume USB module operation
    } else if (U1IRbits.STALLIF) {
    13a2:	51 24 80    	mov.w     0x48a, w1
    13a4:	00 08 20    	mov.w     #0x80, w0
    13a6:	00 80 60    	and.w     w1, w0, w0
    13a8:	00 00 e0    	cp0.w     w0
    13aa:	03 00 32    	bra       Z, 0x13b2 <.L18>
        U1IR = U1IR_STALLIF;                // clear STALLIF
    13ac:	00 08 20    	mov.w     #0x80, w0
    13ae:	50 24 88    	mov.w     w0, 0x48a
    13b0:	9c 00 37    	bra       0x14ea <.L14>

000013b2 <.L18>:
    } else if (U1IRbits.URSTIF) {
    13b2:	50 24 80    	mov.w     0x48a, w0
    13b4:	61 00 60    	and.w     w0, #0x1, w0
    13b6:	00 00 e0    	cp0.w     w0
    13b8:	27 00 32    	bra       Z, 0x1408 <.L19>
        USB_curr_config = 0;
    13ba:	0d 68 ef    	clr.b     0x80d
        while (U1IRbits.TRNIF) {
    13bc:	08 00 37    	bra       0x13ce <.L20>

000013be <.L21>:
            U1IR = U1IR_TRNIF;              // clear TRNIF to advance the U1STAT FIFO
    13be:	80 00 20    	mov.w     #0x8, w0
    13c0:	50 24 88    	mov.w     w0, 0x48a
	...

000013ce <.L20>:
    13ce:	50 24 80    	mov.w     0x48a, w0
    13d0:	68 00 60    	and.w     w0, #0x8, w0
    13d2:	00 00 e0    	cp0.w     w0
    13d4:	f4 ff 3a    	bra       NZ, 0x13be <.L21>
            __builtin_nop();                // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();                // ...to allow a pending TRNIF to appear
        }
        usb_disable_endpoints(0);           // disable all endpoints
    13d6:	00 40 eb    	clr.b     w0
    13d8:	57 ff 07    	rcall     0x1288 <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    13da:	00 a0 20    	mov.w     #0xa00, w0
    13dc:	01 c4 b3    	mov.b     #0x40, w1
    13de:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    13e0:	c0 81 20    	mov.w     #0x81c, w0
    13e2:	10 50 88    	mov.w     w0, 0xa02
        BD[EP0OUT].status = UOWN | DTSEN;   // set UOWN bit (USB can write)
    13e4:	10 a0 20    	mov.w     #0xa01, w0
    13e6:	81 c8 b3    	mov.b     #0x88, w1
    13e8:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;  // EP0 IN gets a buffer
    13ea:	c0 85 20    	mov.w     #0x85c, w0
    13ec:	30 50 88    	mov.w     w0, 0xa06
        BD[EP0IN].status = DTSEN;           // clear UOWN bit (MCU can write)
    13ee:	50 a0 20    	mov.w     #0xa05, w0
    13f0:	81 c0 b3    	mov.b     #0x8, w1
    13f2:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0;                         // set USB Address to 0
    13f4:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                        // clear all the USB interrupt flags
    13f6:	f0 0f 20    	mov.w     #0xff, w0
    13f8:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;              // EP0 is a control pipe and requires an ACK
    13fa:	d0 00 20    	mov.w     #0xd, w0
    13fc:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                     // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    13fe:	10 c0 b3    	mov.b     #0x1, w0
    1400:	10 e8 b7    	mov.b     WREG, 0x810
        USB_device_status = 1;              // self powered, remote wakeup disabled
    1402:	10 c0 b3    	mov.b     #0x1, w0
    1404:	0e e8 b7    	mov.b     WREG, 0x80e
    1406:	71 00 37    	bra       0x14ea <.L14>

00001408 <.L19>:
    } else if (U1IRbits.TRNIF) {
    1408:	50 24 80    	mov.w     0x48a, w0
    140a:	68 00 60    	and.w     w0, #0x8, w0
    140c:	00 00 e0    	cp0.w     w0
    140e:	6d 00 32    	bra       Z, 0x14ea <.L14>
        buf_desc_ptr = &BD[U1STAT >> 3];    // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    1410:	90 24 80    	mov.w     0x492, w0
    1412:	43 00 de    	lsr.w     w0, #0x3, w0
    1414:	c2 00 dd    	sl.w      w0, #0x2, w1
    1416:	00 a0 20    	mov.w     #0xa00, w0
    1418:	00 8f 40    	add.w     w1, w0, [w14]
        USB_buffer_desc.status = buf_desc_ptr->status;
    141a:	1e 00 78    	mov.w     [w14], w0
    141c:	10 40 90    	mov.b     [w0+1], w0
    141e:	01 e8 b7    	mov.b     WREG, 0x801
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    1420:	1e 00 78    	mov.w     [w14], w0
    1422:	10 40 78    	mov.b     [w0], w0
    1424:	00 e8 b7    	mov.b     WREG, 0x800
        USB_buffer_desc.address = buf_desc_ptr->address;
    1426:	1e 00 78    	mov.w     [w14], w0
    1428:	10 00 90    	mov.w     [w0+2], w0
    142a:	10 40 88    	mov.w     w0, 0x802
        USB_USTAT = U1STAT;                 // save the USB status register
    142c:	90 24 80    	mov.w     0x492, w0
    142e:	00 40 78    	mov.b     w0, w0
    1430:	0f e8 b7    	mov.b     WREG, 0x80f
        U1IR = U1IR_TRNIF;                  // clear TRNIF
    1432:	80 00 20    	mov.w     #0x8, w0
    1434:	50 24 88    	mov.w     w0, 0x48a
        USB_error_flags = 0;                // clear USB error flags
    1436:	0c 68 ef    	clr.b     0x80c
        switch (USB_buffer_desc.status & 0x3C) {    // extract PID bits
    1438:	01 c8 bf    	mov.b     0x801, WREG
    143a:	80 80 fb    	ze        w0, w1
    143c:	c0 03 20    	mov.w     #0x3c, w0
    143e:	00 80 60    	and.w     w1, w0, w0
    1440:	41 02 20    	mov.w     #0x24, w1
    1442:	81 0f 50    	sub.w     w0, w1, [w15]
    1444:	08 00 32    	bra       Z, 0x1456 <.L24>
    1446:	41 03 20    	mov.w     #0x34, w1
    1448:	81 0f 50    	sub.w     w0, w1, [w15]
    144a:	03 00 32    	bra       Z, 0x1452 <.L25>
    144c:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    144e:	17 00 32    	bra       Z, 0x147e <.L23>
    1450:	3d 00 37    	bra       0x14cc <.L22>

00001452 <.L25>:
            case TOKEN_SETUP:
                usb_process_setup_token();
    1452:	4e 00 07    	rcall     0x14f0 <_usb_process_setup_token> <.LFB5> <.LFE4>
                break;
    1454:	3b 00 37    	bra       0x14cc <.L22>

00001456 <.L24>:
            case TOKEN_IN:
                ep = (USB_USTAT >> 4) & 0x0F;
    1456:	0f c8 bf    	mov.b     0x80f, WREG
    1458:	00 80 fb    	ze        w0, w0
    145a:	44 00 de    	lsr.w     w0, #0x4, w0
    145c:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_in_callbacks[ep])
    145e:	2e 40 90    	mov.b     [w14+2], w0
    1460:	00 80 fb    	ze        w0, w0
    1462:	80 00 40    	add.w     w0, w0, w1
    1464:	a0 8a 20    	mov.w     #0x8aa, w0
    1466:	00 80 40    	add.w     w1, w0, w0
    1468:	10 00 78    	mov.w     [w0], w0
    146a:	00 00 e0    	cp0.w     w0
    146c:	2e 00 32    	bra       Z, 0x14ca <.L28>
                    USB_in_callbacks[ep]();
    146e:	2e 40 90    	mov.b     [w14+2], w0
    1470:	00 80 fb    	ze        w0, w0
    1472:	80 00 40    	add.w     w0, w0, w1
    1474:	a0 8a 20    	mov.w     #0x8aa, w0
    1476:	00 80 40    	add.w     w1, w0, w0
    1478:	10 00 78    	mov.w     [w0], w0
    147a:	00 00 01    	call      w0
                break;
    147c:	27 00 37    	bra       0x14cc <.L22>

0000147e <.L23>:
            case TOKEN_OUT:
                ep = (USB_USTAT >> 4) & 0x0F;
    147e:	0f c8 bf    	mov.b     0x80f, WREG
    1480:	00 80 fb    	ze        w0, w0
    1482:	44 00 de    	lsr.w     w0, #0x4, w0
    1484:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_out_callbacks[ep])
    1486:	2e 40 90    	mov.b     [w14+2], w0
    1488:	00 80 fb    	ze        w0, w0
    148a:	80 00 40    	add.w     w0, w0, w1
    148c:	a0 8c 20    	mov.w     #0x8ca, w0
    148e:	00 80 40    	add.w     w1, w0, w0
    1490:	10 00 78    	mov.w     [w0], w0
    1492:	00 00 e0    	cp0.w     w0
    1494:	07 00 32    	bra       Z, 0x14a4 <.L27>
                    USB_out_callbacks[ep]();
    1496:	2e 40 90    	mov.b     [w14+2], w0
    1498:	00 80 fb    	ze        w0, w0
    149a:	80 00 40    	add.w     w0, w0, w1
    149c:	a0 8c 20    	mov.w     #0x8ca, w0
    149e:	00 80 40    	add.w     w1, w0, w0
    14a0:	10 00 78    	mov.w     [w0], w0
    14a2:	00 00 01    	call      w0

000014a4 <.L27>:
                if ((ep == 0) && (USB_request.bytes_left.w == 0)) {
    14a4:	2e 40 90    	mov.b     [w14+2], w0
    14a6:	00 04 e0    	cp0.b     w0
    14a8:	11 00 3a    	bra       NZ, 0x14cc <.L22>
    14aa:	30 45 80    	mov.w     0x8a6, w0
    14ac:	00 00 e0    	cp0.w     w0
    14ae:	0e 00 3a    	bra       NZ, 0x14cc <.L22>
                    BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // reset EP0 OUT buffer
    14b0:	00 a0 20    	mov.w     #0xa00, w0
    14b2:	01 c4 b3    	mov.b     #0x40, w1
    14b4:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0OUT].status = UOWN | DTSEN;
    14b6:	10 a0 20    	mov.w     #0xa01, w0
    14b8:	81 c8 b3    	mov.b     #0x88, w1
    14ba:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0;                // complete status phase of control transfer
    14bc:	40 a0 20    	mov.w     #0xa04, w0
    14be:	80 40 eb    	clr.b     w1
    14c0:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    14c2:	50 a0 20    	mov.w     #0xa05, w0
    14c4:	81 cc b3    	mov.b     #0xc8, w1
    14c6:	01 48 78    	mov.b     w1, [w0]
    14c8:	01 00 37    	bra       0x14cc <.L22>

000014ca <.L28>:
    14ca:	00 00 00    	nop       

000014cc <.L22>:
                }
        }
        if (USB_error_flags & REQUEST_ERROR) {      // if there was a Request Error...
    14cc:	0c c8 bf    	mov.b     0x80c, WREG
    14ce:	00 80 fb    	ze        w0, w0
    14d0:	61 00 60    	and.w     w0, #0x1, w0
    14d2:	00 40 78    	mov.b     w0, w0
    14d4:	00 04 e0    	cp0.b     w0
    14d6:	09 00 32    	bra       Z, 0x14ea <.L14>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // ...get ready to receive the next Setup token...
    14d8:	00 a0 20    	mov.w     #0xa00, w0
    14da:	01 c4 b3    	mov.b     #0x40, w1
    14dc:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | BSTALL;
    14de:	50 a0 20    	mov.w     #0xa05, w0
    14e0:	41 c8 b3    	mov.b     #0x84, w1
    14e2:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = UOWN | BSTALL;      // ...and issue a protocol stall on EP0
    14e4:	10 a0 20    	mov.w     #0xa01, w0
    14e6:	41 c8 b3    	mov.b     #0x84, w1
    14e8:	01 48 78    	mov.b     w1, [w0]

000014ea <.L14>:
        }
    }
    IFS5bits.USB1IF = 0;                    // clear USB Interrupt flag
    14ea:	8e c0 a9    	bclr.b    0x8e, #0x6
}
    14ec:	00 80 fa    	ulnk      
    14ee:	00 00 06    	return    

000014f0 <_usb_process_setup_token>:

void usb_process_setup_token(void) {
    14f0:	02 00 fa    	lnk       #0x2
    uint8_t *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    14f2:	11 40 80    	mov.w     0x802, w1
    14f4:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;           // copy the setup packet received from the host
    14f6:	1e 00 78    	mov.w     [w14], w0
    14f8:	90 40 78    	mov.b     [w0], w1
    14fa:	40 80 20    	mov.w     #0x804, w0
    14fc:	01 48 78    	mov.b     w1, [w0]
    14fe:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    1500:	1e 00 78    	mov.w     [w14], w0
    1502:	90 40 78    	mov.b     [w0], w1
    1504:	40 80 20    	mov.w     #0x804, w0
    1506:	11 40 98    	mov.b     w1, [w0+1]
    1508:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    150a:	1e 00 78    	mov.w     [w14], w0
    150c:	90 40 78    	mov.b     [w0], w1
    150e:	40 80 20    	mov.w     #0x804, w0
    1510:	21 40 98    	mov.b     w1, [w0+2]
    1512:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    1514:	1e 00 78    	mov.w     [w14], w0
    1516:	90 40 78    	mov.b     [w0], w1
    1518:	40 80 20    	mov.w     #0x804, w0
    151a:	31 40 98    	mov.b     w1, [w0+3]
    151c:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    151e:	1e 00 78    	mov.w     [w14], w0
    1520:	90 40 78    	mov.b     [w0], w1
    1522:	40 80 20    	mov.w     #0x804, w0
    1524:	41 40 98    	mov.b     w1, [w0+4]
    1526:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    1528:	1e 00 78    	mov.w     [w14], w0
    152a:	90 40 78    	mov.b     [w0], w1
    152c:	40 80 20    	mov.w     #0x804, w0
    152e:	51 40 98    	mov.b     w1, [w0+5]
    1530:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    1532:	1e 00 78    	mov.w     [w14], w0
    1534:	90 40 78    	mov.b     [w0], w1
    1536:	40 80 20    	mov.w     #0x804, w0
    1538:	61 40 98    	mov.b     w1, [w0+6]
    153a:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    153c:	1e 00 78    	mov.w     [w14], w0
    153e:	90 40 78    	mov.b     [w0], w1
    1540:	40 80 20    	mov.w     #0x804, w0
    1542:	71 40 98    	mov.b     w1, [w0+7]
    1544:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;         // reset the EP0 OUT byte count
    1546:	00 a0 20    	mov.w     #0xa00, w0
    1548:	01 c4 b3    	mov.b     #0x40, w1
    154a:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = DTSEN;                       // return the EP0 IN buffer to us (dequeue any pending requests)
    154c:	50 a0 20    	mov.w     #0xa05, w0
    154e:	81 c0 b3    	mov.b     #0x8, w1
    1550:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType & UOWN) && (USB_setup.wLength.w)) ? UOWN | DTS | DTSEN:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    1552:	40 80 20    	mov.w     #0x804, w0
    1554:	10 40 78    	mov.b     [w0], w0
    1556:	00 04 e0    	cp0.b     w0
    1558:	06 00 35    	bra       LT, 0x1566 <.L30>
    155a:	40 80 20    	mov.w     #0x804, w0
    155c:	30 00 90    	mov.w     [w0+6], w0
    155e:	00 00 e0    	cp0.w     w0
    1560:	02 00 32    	bra       Z, 0x1566 <.L30>
    1562:	80 cc b3    	mov.b     #0xc8, w0
    1564:	01 00 37    	bra       0x1568 <.L31>

00001566 <.L30>:
    1566:	80 c8 b3    	mov.b     #0x88, w0

00001568 <.L31>:
    1568:	11 a0 20    	mov.w     #0xa01, w1
    156a:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                           // assuming there is nothing to dequeue, clear the packet disable bit
    156c:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    156e:	c0 89 20    	mov.w     #0x89c, w0
    1570:	80 c0 eb    	setm.b    w1
    1572:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    1574:	d0 89 20    	mov.w     #0x89d, w0
    1576:	80 c0 eb    	setm.b    w1
    1578:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    157a:	00 00 eb    	clr.w     w0
    157c:	30 45 88    	mov.w     w0, 0x8a6
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    157e:	00 00 eb    	clr.w     w0
    1580:	40 45 88    	mov.w     w0, 0x8a8
    switch (USB_setup.bmRequestType & 0x60) {       // extract request type bits
    1582:	40 80 20    	mov.w     #0x804, w0
    1584:	10 40 78    	mov.b     [w0], w0
    1586:	80 80 fb    	ze        w0, w1
    1588:	00 06 20    	mov.w     #0x60, w0
    158a:	00 80 60    	and.w     w1, w0, w0
    158c:	01 02 20    	mov.w     #0x20, w1
    158e:	81 0f 50    	sub.w     w0, w1, [w15]
    1590:	11 00 32    	bra       Z, 0x15b4 <.L34>
    1592:	01 04 20    	mov.w     #0x40, w1
    1594:	81 0f 50    	sub.w     w0, w1, [w15]
    1596:	04 00 32    	bra       Z, 0x15a0 <.L35>
    1598:	00 00 e0    	cp0.w     w0
    159a:	16 00 3a    	bra       NZ, 0x15c8 <.L41>
        case STANDARD_REQ:
            usb_standard_requests();
    159c:	1a 00 07    	rcall     0x15d2 <_usb_standard_requests> <.LFB6> <.LFE5>
            break;
    159e:	17 00 37    	bra       0x15ce <.L29>

000015a0 <.L35>:
        case VENDOR_REQ:
            if (USB_setup_vendor_callback)
    15a0:	c0 40 80    	mov.w     0x818, w0
    15a2:	00 00 e0    	cp0.w     w0
    15a4:	03 00 32    	bra       Z, 0x15ac <.L37>
                USB_setup_vendor_callback();
    15a6:	c0 40 80    	mov.w     0x818, w0
    15a8:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    15aa:	11 00 37    	bra       0x15ce <.L29>

000015ac <.L37>:
    15ac:	0c c8 bf    	mov.b     0x80c, WREG
    15ae:	00 04 a0    	bset.b    w0, #0x0
    15b0:	0c e8 b7    	mov.b     WREG, 0x80c
    15b2:	0d 00 37    	bra       0x15ce <.L29>

000015b4 <.L34>:
        case CLASS_REQ:
            if (USB_setup_class_callback)
    15b4:	b0 40 80    	mov.w     0x816, w0
    15b6:	00 00 e0    	cp0.w     w0
    15b8:	03 00 32    	bra       Z, 0x15c0 <.L39>
                USB_setup_class_callback();
    15ba:	b0 40 80    	mov.w     0x816, w0
    15bc:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    15be:	07 00 37    	bra       0x15ce <.L29>

000015c0 <.L39>:
    15c0:	0c c8 bf    	mov.b     0x80c, WREG
    15c2:	00 04 a0    	bset.b    w0, #0x0
    15c4:	0c e8 b7    	mov.b     WREG, 0x80c
    15c6:	03 00 37    	bra       0x15ce <.L29>

000015c8 <.L41>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    15c8:	0c c8 bf    	mov.b     0x80c, WREG
    15ca:	00 04 a0    	bset.b    w0, #0x0
    15cc:	0c e8 b7    	mov.b     WREG, 0x80c

000015ce <.L29>:
    }
}
    15ce:	00 80 fa    	ulnk      
    15d0:	00 00 06    	return    

000015d2 <_usb_standard_requests>:

void usb_standard_requests(void) {
    15d2:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    uint16_t *U1EP;
    uint8_t ep;

    switch (USB_setup.bRequest) {
    15d4:	40 80 20    	mov.w     #0x804, w0
    15d6:	10 40 90    	mov.b     [w0+1], w0
    15d8:	00 80 fb    	ze        w0, w0
    15da:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    15dc:	bc 01 32    	bra       Z, 0x1956 <.L47>
    15de:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    15e0:	0c 00 3c    	bra       GT, 0x15fa <.L52>
    15e2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    15e4:	c1 00 32    	bra       Z, 0x1768 <.L45>
    15e6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    15e8:	03 00 3c    	bra       GT, 0x15f0 <.L53>
    15ea:	00 00 e0    	cp0.w     w0
    15ec:	12 00 32    	bra       Z, 0x1612 <.L44>
    15ee:	87 02 37    	bra       0x1afe <.L43>

000015f0 <.L53>:
    15f0:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    15f2:	ba 00 32    	bra       Z, 0x1768 <.L45>
    15f4:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    15f6:	8d 01 32    	bra       Z, 0x1912 <.L46>
    15f8:	82 02 37    	bra       0x1afe <.L43>

000015fa <.L52>:
    15fa:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    15fc:	22 02 32    	bra       Z, 0x1a42 <.L49>
    15fe:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    1600:	03 00 3c    	bra       GT, 0x1608 <.L54>
    1602:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1604:	13 02 32    	bra       Z, 0x1a2c <.L48>
    1606:	7b 02 37    	bra       0x1afe <.L43>

00001608 <.L54>:
    1608:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    160a:	3d 02 32    	bra       Z, 0x1a86 <.L50>
    160c:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    160e:	56 02 32    	bra       Z, 0x1abc <.L51>
    1610:	76 02 37    	bra       0x1afe <.L43>

00001612 <.L44>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType & 0x1F) {   // extract request recipient bits
    1612:	40 80 20    	mov.w     #0x804, w0
    1614:	10 40 78    	mov.b     [w0], w0
    1616:	00 80 fb    	ze        w0, w0
    1618:	7f 00 60    	and.w     w0, #0x1f, w0
    161a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    161c:	13 00 32    	bra       Z, 0x1644 <.L57>
    161e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1620:	32 00 32    	bra       Z, 0x1686 <.L58>
    1622:	00 00 e0    	cp0.w     w0
    1624:	9c 00 3a    	bra       NZ, 0x175e <.L134>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    1626:	30 50 80    	mov.w     0xa06, w0
    1628:	e1 80 20    	mov.w     #0x80e, w1
    162a:	91 40 78    	mov.b     [w1], w1
    162c:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0;
    162e:	30 50 80    	mov.w     0xa06, w0
    1630:	00 00 e8    	inc.w     w0, w0
    1632:	80 40 eb    	clr.b     w1
    1634:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 2;
    1636:	40 a0 20    	mov.w     #0xa04, w0
    1638:	21 c0 b3    	mov.b     #0x2, w1
    163a:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    163c:	50 a0 20    	mov.w     #0xa05, w0
    163e:	81 cc b3    	mov.b     #0xc8, w1
    1640:	01 48 78    	mov.b     w1, [w0]
                    break;
    1642:	91 00 37    	bra       0x1766 <.L59>

00001644 <.L57>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    1644:	10 c8 bf    	mov.b     0x810, WREG
    1646:	00 80 fb    	ze        w0, w0
    1648:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    164a:	03 00 32    	bra       Z, 0x1652 <.L61>
    164c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    164e:	05 00 32    	bra       Z, 0x165a <.L62>
    1650:	19 00 37    	bra       0x1684 <.L60>

00001652 <.L61>:
                        case ADDRESS_STATE:
                            USB_error_flags |= REQUEST_ERROR;
    1652:	0c c8 bf    	mov.b     0x80c, WREG
    1654:	00 04 a0    	bset.b    w0, #0x0
    1656:	0c e8 b7    	mov.b     WREG, 0x80c
                            break;
    1658:	15 00 37    	bra       0x1684 <.L60>

0000165a <.L62>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    165a:	40 80 20    	mov.w     #0x804, w0
    165c:	40 40 90    	mov.b     [w0+4], w0
    165e:	00 04 e0    	cp0.b     w0
    1660:	0e 00 3a    	bra       NZ, 0x167e <.L63>
                                BD[EP0IN].address[0] = 0;
    1662:	30 50 80    	mov.w     0xa06, w0
    1664:	80 40 eb    	clr.b     w1
    1666:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    1668:	30 50 80    	mov.w     0xa06, w0
    166a:	00 00 e8    	inc.w     w0, w0
    166c:	80 40 eb    	clr.b     w1
    166e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    1670:	40 a0 20    	mov.w     #0xa04, w0
    1672:	21 c0 b3    	mov.b     #0x2, w1
    1674:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1676:	50 a0 20    	mov.w     #0xa05, w0
    1678:	81 cc b3    	mov.b     #0xc8, w1
    167a:	01 48 78    	mov.b     w1, [w0]
    167c:	03 00 37    	bra       0x1684 <.L60>

0000167e <.L63>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    167e:	0c c8 bf    	mov.b     0x80c, WREG
    1680:	00 04 a0    	bset.b    w0, #0x0
    1682:	0c e8 b7    	mov.b     WREG, 0x80c

00001684 <.L60>:
                            }
                    }
                    break;
    1684:	70 00 37    	bra       0x1766 <.L59>

00001686 <.L58>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    1686:	10 c8 bf    	mov.b     0x810, WREG
    1688:	00 80 fb    	ze        w0, w0
    168a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    168c:	03 00 32    	bra       Z, 0x1694 <.L65>
    168e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1690:	29 00 32    	bra       Z, 0x16e4 <.L66>
    1692:	61 00 37    	bra       0x1756 <.L135>

00001694 <.L65>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit and see if it is EP0
    1694:	40 80 20    	mov.w     #0x804, w0
    1696:	40 40 90    	mov.b     [w0+4], w0
    1698:	00 80 fb    	ze        w0, w0
    169a:	6f 00 60    	and.w     w0, #0xf, w0
    169c:	00 00 e0    	cp0.w     w0
    169e:	1e 00 3a    	bra       NZ, 0x16dc <.L67>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0] & 0x80) ? BD[EP0IN].status : BD[EP0OUT].status) & 0x04) >> 2;   // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    16a0:	31 50 80    	mov.w     0xa06, w1
    16a2:	40 80 20    	mov.w     #0x804, w0
    16a4:	40 40 90    	mov.b     [w0+4], w0
    16a6:	00 04 e0    	cp0.b     w0
    16a8:	07 00 3d    	bra       GE, 0x16b8 <.L68>
    16aa:	50 a0 20    	mov.w     #0xa05, w0
    16ac:	10 40 78    	mov.b     [w0], w0
    16ae:	00 80 fb    	ze        w0, w0
    16b0:	64 00 60    	and.w     w0, #0x4, w0
    16b2:	42 80 de    	asr.w     w0, #0x2, w0
    16b4:	00 40 78    	mov.b     w0, w0
    16b6:	06 00 37    	bra       0x16c4 <.L69>

000016b8 <.L68>:
    16b8:	10 a0 20    	mov.w     #0xa01, w0
    16ba:	10 40 78    	mov.b     [w0], w0
    16bc:	00 80 fb    	ze        w0, w0
    16be:	64 00 60    	and.w     w0, #0x4, w0
    16c0:	42 80 de    	asr.w     w0, #0x2, w0
    16c2:	00 40 78    	mov.b     w0, w0

000016c4 <.L69>:
    16c4:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0;
    16c6:	30 50 80    	mov.w     0xa06, w0
    16c8:	00 00 e8    	inc.w     w0, w0
    16ca:	80 40 eb    	clr.b     w1
    16cc:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    16ce:	40 a0 20    	mov.w     #0xa04, w0
    16d0:	21 c0 b3    	mov.b     #0x2, w1
    16d2:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    16d4:	50 a0 20    	mov.w     #0xa05, w0
    16d6:	81 cc b3    	mov.b     #0xc8, w1
    16d8:	01 48 78    	mov.b     w1, [w0]
    16da:	03 00 37    	bra       0x16e2 <.L70>

000016dc <.L67>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    16dc:	0c c8 bf    	mov.b     0x80c, WREG
    16de:	00 04 a0    	bset.b    w0, #0x0
    16e0:	0c e8 b7    	mov.b     WREG, 0x80c

000016e2 <.L70>:
                            }
                            break;
    16e2:	3c 00 37    	bra       0x175c <.L71>

000016e4 <.L66>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    16e4:	a0 4a 20    	mov.w     #0x4aa, w0
    16e6:	00 0f 78    	mov.w     w0, [w14]
                            ep = USB_setup.wIndex.b[0] & 0x0F;  // get EP and strip off direction bit for offset from U1EP0
    16e8:	40 80 20    	mov.w     #0x804, w0
    16ea:	40 40 90    	mov.b     [w0+4], w0
    16ec:	6f 40 60    	and.b     w0, #0xf, w0
    16ee:	20 47 98    	mov.b     w0, [w14+2]
                            buf_desc_ptr = &BD[EP0OUT] + ((ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00));  // compute pointer to the buffer descriptor for the specified EP
    16f0:	2e 40 90    	mov.b     [w14+2], w0
    16f2:	00 80 fb    	ze        w0, w0
    16f4:	00 00 40    	add.w     w0, w0, w0
    16f6:	80 00 78    	mov.w     w0, w1
    16f8:	40 80 20    	mov.w     #0x804, w0
    16fa:	40 40 90    	mov.b     [w0+4], w0
    16fc:	00 00 fb    	se        w0, w0
    16fe:	4f 00 de    	lsr.w     w0, #0xf, w0
    1700:	01 00 70    	ior.w     w0, w1, w0
    1702:	c2 00 dd    	sl.w      w0, #0x2, w1
    1704:	00 a0 20    	mov.w     #0xa00, w0
    1706:	00 80 40    	add.w     w1, w0, w0
    1708:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[ep] & ((USB_setup.wIndex.b[0] & 0x80) ? 0x04 : 0x08)) {    // if the specified EP is enabled for transfers in the specified direction...
    170a:	2e 40 90    	mov.b     [w14+2], w0
    170c:	00 80 fb    	ze        w0, w0
    170e:	00 00 40    	add.w     w0, w0, w0
    1710:	1e 00 40    	add.w     w0, [w14], w0
    1712:	90 00 78    	mov.w     [w0], w1
    1714:	40 80 20    	mov.w     #0x804, w0
    1716:	40 40 90    	mov.b     [w0+4], w0
    1718:	00 04 e0    	cp0.b     w0
    171a:	02 00 3d    	bra       GE, 0x1720 <.L72>
    171c:	40 00 20    	mov.w     #0x4, w0
    171e:	01 00 37    	bra       0x1722 <.L73>

00001720 <.L72>:
    1720:	80 00 20    	mov.w     #0x8, w0

00001722 <.L73>:
    1722:	00 80 60    	and.w     w1, w0, w0
    1724:	00 00 e0    	cp0.w     w0
    1726:	13 00 32    	bra       Z, 0x174e <.L74>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status) & 0x04) >> 2;    // ...return the BSTALL bit of the specified EP
    1728:	30 50 80    	mov.w     0xa06, w0
    172a:	ae 00 90    	mov.w     [w14+4], w1
    172c:	91 40 90    	mov.b     [w1+1], w1
    172e:	81 80 fb    	ze        w1, w1
    1730:	e4 80 60    	and.w     w1, #0x4, w1
    1732:	c2 88 de    	asr.w     w1, #0x2, w1
    1734:	81 40 78    	mov.b     w1, w1
    1736:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    1738:	30 50 80    	mov.w     0xa06, w0
    173a:	00 00 e8    	inc.w     w0, w0
    173c:	80 40 eb    	clr.b     w1
    173e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    1740:	40 a0 20    	mov.w     #0xa04, w0
    1742:	21 c0 b3    	mov.b     #0x2, w1
    1744:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1746:	50 a0 20    	mov.w     #0xa05, w0
    1748:	81 cc b3    	mov.b     #0xc8, w1
    174a:	01 48 78    	mov.b     w1, [w0]
    174c:	03 00 37    	bra       0x1754 <.L75>

0000174e <.L74>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    174e:	0c c8 bf    	mov.b     0x80c, WREG
    1750:	00 04 a0    	bset.b    w0, #0x0
    1752:	0c e8 b7    	mov.b     WREG, 0x80c

00001754 <.L75>:
                            }
                            break;
    1754:	03 00 37    	bra       0x175c <.L71>

00001756 <.L135>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    1756:	0c c8 bf    	mov.b     0x80c, WREG
    1758:	00 04 a0    	bset.b    w0, #0x0
    175a:	0c e8 b7    	mov.b     WREG, 0x80c

0000175c <.L71>:
                    }
                    break;
    175c:	04 00 37    	bra       0x1766 <.L59>

0000175e <.L134>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    175e:	0c c8 bf    	mov.b     0x80c, WREG
    1760:	00 04 a0    	bset.b    w0, #0x0
    1762:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    1764:	d1 01 37    	bra       0x1b08 <.L42>

00001766 <.L59>:
    1766:	d0 01 37    	bra       0x1b08 <.L42>

00001768 <.L45>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType & 0x1F) {       // extract request recipient bits
    1768:	40 80 20    	mov.w     #0x804, w0
    176a:	10 40 78    	mov.b     [w0], w0
    176c:	00 80 fb    	ze        w0, w0
    176e:	7f 00 60    	and.w     w0, #0x1f, w0
    1770:	00 00 e0    	cp0.w     w0
    1772:	03 00 32    	bra       Z, 0x177a <.L78>
    1774:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1776:	1e 00 32    	bra       Z, 0x17b4 <.L79>
    1778:	c7 00 37    	bra       0x1908 <.L136>

0000177a <.L78>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    177a:	40 80 20    	mov.w     #0x804, w0
    177c:	20 40 90    	mov.b     [w0+2], w0
    177e:	00 80 fb    	ze        w0, w0
    1780:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1782:	14 00 3a    	bra       NZ, 0x17ac <.L137>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest == CLEAR_FEATURE)
    1784:	40 80 20    	mov.w     #0x804, w0
    1786:	10 40 90    	mov.b     [w0+1], w0
    1788:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    178a:	06 00 3a    	bra       NZ, 0x1798 <.L82>
                                USB_device_status &= 0xFE;
    178c:	e1 80 20    	mov.w     #0x80e, w1
    178e:	91 40 78    	mov.b     [w1], w1
    1790:	e0 cf b3    	mov.b     #0xfe, w0
    1792:	00 c0 60    	and.b     w1, w0, w0
    1794:	0e e8 b7    	mov.b     WREG, 0x80e
    1796:	03 00 37    	bra       0x179e <.L83>

00001798 <.L82>:
                            else
                                USB_device_status |= 0x01;
    1798:	0e c8 bf    	mov.b     0x80e, WREG
    179a:	00 04 a0    	bset.b    w0, #0x0
    179c:	0e e8 b7    	mov.b     WREG, 0x80e

0000179e <.L83>:
                            BD[EP0IN].bytecount = 0;
    179e:	40 a0 20    	mov.w     #0xa04, w0
    17a0:	80 40 eb    	clr.b     w1
    17a2:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    17a4:	50 a0 20    	mov.w     #0xa05, w0
    17a6:	81 cc b3    	mov.b     #0xc8, w1
    17a8:	01 48 78    	mov.b     w1, [w0]
                            break;
    17aa:	03 00 37    	bra       0x17b2 <.L84>

000017ac <.L137>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    17ac:	0c c8 bf    	mov.b     0x80c, WREG
    17ae:	00 04 a0    	bset.b    w0, #0x0
    17b0:	0c e8 b7    	mov.b     WREG, 0x80c

000017b2 <.L84>:
                    }
                    break;
    17b2:	ae 00 37    	bra       0x1910 <.L85>

000017b4 <.L79>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    17b4:	10 c8 bf    	mov.b     0x810, WREG
    17b6:	00 80 fb    	ze        w0, w0
    17b8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    17ba:	03 00 32    	bra       Z, 0x17c2 <.L87>
    17bc:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    17be:	12 00 32    	bra       Z, 0x17e4 <.L88>
    17c0:	9f 00 37    	bra       0x1900 <.L138>

000017c2 <.L87>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit, and see if its EP0
    17c2:	40 80 20    	mov.w     #0x804, w0
    17c4:	40 40 90    	mov.b     [w0+4], w0
    17c6:	00 80 fb    	ze        w0, w0
    17c8:	6f 00 60    	and.w     w0, #0xf, w0
    17ca:	00 00 e0    	cp0.w     w0
    17cc:	07 00 3a    	bra       NZ, 0x17dc <.L89>
                                BD[EP0IN].bytecount = 0;
    17ce:	40 a0 20    	mov.w     #0xa04, w0
    17d0:	80 40 eb    	clr.b     w1
    17d2:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    17d4:	50 a0 20    	mov.w     #0xa05, w0
    17d6:	81 cc b3    	mov.b     #0xc8, w1
    17d8:	01 48 78    	mov.b     w1, [w0]
    17da:	03 00 37    	bra       0x17e2 <.L90>

000017dc <.L89>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    17dc:	0c c8 bf    	mov.b     0x80c, WREG
    17de:	00 04 a0    	bset.b    w0, #0x0
    17e0:	0c e8 b7    	mov.b     WREG, 0x80c

000017e2 <.L90>:
                            }
                            break;
    17e2:	91 00 37    	bra       0x1906 <.L91>

000017e4 <.L88>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    17e4:	a0 4a 20    	mov.w     #0x4aa, w0
    17e6:	00 0f 78    	mov.w     w0, [w14]
                            if (ep = USB_setup.wIndex.b[0] & 0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    17e8:	40 80 20    	mov.w     #0x804, w0
    17ea:	40 40 90    	mov.b     [w0+4], w0
    17ec:	6f 40 60    	and.b     w0, #0xf, w0
    17ee:	20 47 98    	mov.b     w0, [w14+2]
    17f0:	2e 40 90    	mov.b     [w14+2], w0
    17f2:	00 04 e0    	cp0.b     w0
    17f4:	79 00 32    	bra       Z, 0x18e8 <.L92>
                                buf_desc_ptr = &BD[(ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00)]; // compute pointer to the buffer descriptor for the specified EP
    17f6:	2e 40 90    	mov.b     [w14+2], w0
    17f8:	00 80 fb    	ze        w0, w0
    17fa:	00 00 40    	add.w     w0, w0, w0
    17fc:	80 00 78    	mov.w     w0, w1
    17fe:	40 80 20    	mov.w     #0x804, w0
    1800:	40 40 90    	mov.b     [w0+4], w0
    1802:	00 00 fb    	se        w0, w0
    1804:	4f 00 de    	lsr.w     w0, #0xf, w0
    1806:	01 00 70    	ior.w     w0, w1, w0
    1808:	c2 00 dd    	sl.w      w0, #0x2, w1
    180a:	00 a0 20    	mov.w     #0xa00, w0
    180c:	00 80 40    	add.w     w1, w0, w0
    180e:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0] & 0x80) { // if the specified EP direction is IN...
    1810:	40 80 20    	mov.w     #0x804, w0
    1812:	40 40 90    	mov.b     [w0+4], w0
    1814:	00 04 e0    	cp0.b     w0
    1816:	30 00 3d    	bra       GE, 0x1878 <.L93>
                                    if (U1EP[ep] & 0x04) {          // if EPn is enabled for IN transfers...
    1818:	2e 40 90    	mov.b     [w14+2], w0
    181a:	00 80 fb    	ze        w0, w0
    181c:	00 00 40    	add.w     w0, w0, w0
    181e:	1e 00 40    	add.w     w0, [w14], w0
    1820:	10 00 78    	mov.w     [w0], w0
    1822:	64 00 60    	and.w     w0, #0x4, w0
    1824:	00 00 e0    	cp0.w     w0
    1826:	24 00 32    	bra       Z, 0x1870 <.L94>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    1828:	40 80 20    	mov.w     #0x804, w0
    182a:	10 40 90    	mov.b     [w0+1], w0
    182c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    182e:	19 00 3a    	bra       NZ, 0x1862 <.L95>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    1830:	2e 40 90    	mov.b     [w14+2], w0
    1832:	00 80 fb    	ze        w0, w0
    1834:	00 00 40    	add.w     w0, w0, w0
    1836:	9e 00 40    	add.w     w0, [w14], w1
    1838:	2e 40 90    	mov.b     [w14+2], w0
    183a:	00 80 fb    	ze        w0, w0
    183c:	00 00 40    	add.w     w0, w0, w0
    183e:	1e 00 40    	add.w     w0, [w14], w0
    1840:	10 01 78    	mov.w     [w0], w2
    1842:	d0 0f 20    	mov.w     #0xfd, w0
    1844:	00 00 61    	and.w     w2, w0, w0
    1846:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    1848:	2e 00 90    	mov.w     [w14+4], w0
    184a:	90 40 90    	mov.b     [w0+1], w1
    184c:	b0 cf b3    	mov.b     #0xfb, w0
    184e:	80 c0 60    	and.b     w1, w0, w1
    1850:	2e 00 90    	mov.w     [w14+4], w0
    1852:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status |= DTS;
    1854:	2e 00 90    	mov.w     [w14+4], w0
    1856:	10 40 90    	mov.b     [w0+1], w0
    1858:	80 40 78    	mov.b     w0, w1
    185a:	01 64 a0    	bset.b    w1, #0x6
    185c:	2e 00 90    	mov.w     [w14+4], w0
    185e:	11 40 98    	mov.b     w1, [w0+1]
    1860:	43 00 37    	bra       0x18e8 <.L92>

00001862 <.L95>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    1862:	2e 00 90    	mov.w     [w14+4], w0
    1864:	10 40 90    	mov.b     [w0+1], w0
    1866:	80 40 78    	mov.b     w0, w1
    1868:	01 24 a0    	bset.b    w1, #0x2
    186a:	2e 00 90    	mov.w     [w14+4], w0
    186c:	11 40 98    	mov.b     w1, [w0+1]
    186e:	3c 00 37    	bra       0x18e8 <.L92>

00001870 <.L94>:
                                        }
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    1870:	0c c8 bf    	mov.b     0x80c, WREG
    1872:	00 04 a0    	bset.b    w0, #0x0
    1874:	0c e8 b7    	mov.b     WREG, 0x80c
    1876:	38 00 37    	bra       0x18e8 <.L92>

00001878 <.L93>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[ep] & 0x08) {  // if the EP is enabled for OUT transfers...
    1878:	2e 40 90    	mov.b     [w14+2], w0
    187a:	00 80 fb    	ze        w0, w0
    187c:	00 00 40    	add.w     w0, w0, w0
    187e:	1e 00 40    	add.w     w0, [w14], w0
    1880:	10 00 78    	mov.w     [w0], w0
    1882:	68 00 60    	and.w     w0, #0x8, w0
    1884:	00 00 e0    	cp0.w     w0
    1886:	2d 00 32    	bra       Z, 0x18e2 <.L96>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    1888:	40 80 20    	mov.w     #0x804, w0
    188a:	10 40 90    	mov.b     [w0+1], w0
    188c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    188e:	19 00 3a    	bra       NZ, 0x18c2 <.L97>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    1890:	2e 40 90    	mov.b     [w14+2], w0
    1892:	00 80 fb    	ze        w0, w0
    1894:	00 00 40    	add.w     w0, w0, w0
    1896:	9e 00 40    	add.w     w0, [w14], w1
    1898:	2e 40 90    	mov.b     [w14+2], w0
    189a:	00 80 fb    	ze        w0, w0
    189c:	00 00 40    	add.w     w0, w0, w0
    189e:	1e 00 40    	add.w     w0, [w14], w0
    18a0:	10 01 78    	mov.w     [w0], w2
    18a2:	d0 0f 20    	mov.w     #0xfd, w0
    18a4:	00 00 61    	and.w     w2, w0, w0
    18a6:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    18a8:	2e 00 90    	mov.w     [w14+4], w0
    18aa:	90 40 90    	mov.b     [w0+1], w1
    18ac:	b0 cf b3    	mov.b     #0xfb, w0
    18ae:	80 c0 60    	and.b     w1, w0, w1
    18b0:	2e 00 90    	mov.w     [w14+4], w0
    18b2:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status &= ~DTS;
    18b4:	2e 00 90    	mov.w     [w14+4], w0
    18b6:	90 40 90    	mov.b     [w0+1], w1
    18b8:	f0 cb b3    	mov.b     #0xbf, w0
    18ba:	80 c0 60    	and.b     w1, w0, w1
    18bc:	2e 00 90    	mov.w     [w14+4], w0
    18be:	11 40 98    	mov.b     w1, [w0+1]
    18c0:	06 00 37    	bra       0x18ce <.L98>

000018c2 <.L97>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    18c2:	2e 00 90    	mov.w     [w14+4], w0
    18c4:	10 40 90    	mov.b     [w0+1], w0
    18c6:	80 40 78    	mov.b     w0, w1
    18c8:	01 24 a0    	bset.b    w1, #0x2
    18ca:	2e 00 90    	mov.w     [w14+4], w0
    18cc:	11 40 98    	mov.b     w1, [w0+1]

000018ce <.L98>:
                                        }
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? (UOWN | DTSEN) : (UOWN | BSTALL);
    18ce:	40 80 20    	mov.w     #0x804, w0
    18d0:	10 40 90    	mov.b     [w0+1], w0
    18d2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    18d4:	02 00 3a    	bra       NZ, 0x18da <.L99>
    18d6:	80 c8 b3    	mov.b     #0x88, w0
    18d8:	01 00 37    	bra       0x18dc <.L100>

000018da <.L99>:
    18da:	40 c8 b3    	mov.b     #0x84, w0

000018dc <.L100>:
    18dc:	ae 00 90    	mov.w     [w14+4], w1
    18de:	90 40 98    	mov.b     w0, [w1+1]
    18e0:	03 00 37    	bra       0x18e8 <.L92>

000018e2 <.L96>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    18e2:	0c c8 bf    	mov.b     0x80c, WREG
    18e4:	00 04 a0    	bset.b    w0, #0x0
    18e6:	0c e8 b7    	mov.b     WREG, 0x80c

000018e8 <.L92>:
                                    }
                                }
                            }
                            if (!(USB_error_flags & REQUEST_ERROR)) {   // if there was no Request Error...
    18e8:	0c c8 bf    	mov.b     0x80c, WREG
    18ea:	00 80 fb    	ze        w0, w0
    18ec:	61 00 60    	and.w     w0, #0x1, w0
    18ee:	00 00 e0    	cp0.w     w0
    18f0:	06 00 3a    	bra       NZ, 0x18fe <.L101>
                                BD[EP0IN].bytecount = 0;
    18f2:	40 a0 20    	mov.w     #0xa04, w0
    18f4:	80 40 eb    	clr.b     w1
    18f6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // ...send packet as DATA1, set UOWN bit
    18f8:	50 a0 20    	mov.w     #0xa05, w0
    18fa:	81 cc b3    	mov.b     #0xc8, w1
    18fc:	01 48 78    	mov.b     w1, [w0]

000018fe <.L101>:
                            }
                            break;
    18fe:	03 00 37    	bra       0x1906 <.L91>

00001900 <.L138>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    1900:	0c c8 bf    	mov.b     0x80c, WREG
    1902:	00 04 a0    	bset.b    w0, #0x0
    1904:	0c e8 b7    	mov.b     WREG, 0x80c

00001906 <.L91>:
                    }
                    break;
    1906:	04 00 37    	bra       0x1910 <.L85>

00001908 <.L136>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    1908:	0c c8 bf    	mov.b     0x80c, WREG
    190a:	00 04 a0    	bset.b    w0, #0x0
    190c:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    190e:	fc 00 37    	bra       0x1b08 <.L42>

00001910 <.L85>:
    1910:	fb 00 37    	bra       0x1b08 <.L42>

00001912 <.L46>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0] > 0x7F) {     // if new device address is illegal, send Request Error
    1912:	40 80 20    	mov.w     #0x804, w0
    1914:	20 40 90    	mov.b     [w0+2], w0
    1916:	00 04 e0    	cp0.b     w0
    1918:	04 00 3d    	bra       GE, 0x1922 <.L102>
                USB_error_flags |= REQUEST_ERROR;
    191a:	0c c8 bf    	mov.b     0x80c, WREG
    191c:	00 04 a0    	bset.b    w0, #0x0
    191e:	0c e8 b7    	mov.b     WREG, 0x80c
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                USB_in_callbacks[0] = usb_set_address_callback;
                BD[EP0IN].bytecount = 0;
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
            }
            break;
    1920:	f3 00 37    	bra       0x1b08 <.L42>

00001922 <.L102>:
    1922:	40 80 20    	mov.w     #0x804, w0
    1924:	90 40 78    	mov.b     [w0], w1
    1926:	c0 89 20    	mov.w     #0x89c, w0
    1928:	01 48 78    	mov.b     w1, [w0]
    192a:	40 80 20    	mov.w     #0x804, w0
    192c:	90 40 90    	mov.b     [w0+1], w1
    192e:	d0 89 20    	mov.w     #0x89d, w0
    1930:	01 48 78    	mov.b     w1, [w0]
    1932:	40 80 20    	mov.w     #0x804, w0
    1934:	10 00 90    	mov.w     [w0+2], w0
    1936:	f0 44 88    	mov.w     w0, 0x89e
    1938:	40 80 20    	mov.w     #0x804, w0
    193a:	20 00 90    	mov.w     [w0+4], w0
    193c:	00 45 88    	mov.w     w0, 0x8a0
    193e:	40 80 20    	mov.w     #0x804, w0
    1940:	30 00 90    	mov.w     [w0+6], w0
    1942:	10 45 88    	mov.w     w0, 0x8a2
    1944:	60 2c 21    	mov.w     #0x12c6, w0
    1946:	50 45 88    	mov.w     w0, 0x8aa
    1948:	40 a0 20    	mov.w     #0xa04, w0
    194a:	80 40 eb    	clr.b     w1
    194c:	01 48 78    	mov.b     w1, [w0]
    194e:	50 a0 20    	mov.w     #0xa05, w0
    1950:	81 cc b3    	mov.b     #0xc8, w1
    1952:	01 48 78    	mov.b     w1, [w0]
    1954:	d9 00 37    	bra       0x1b08 <.L42>

00001956 <.L47>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    1956:	40 80 20    	mov.w     #0x804, w0
    1958:	90 40 78    	mov.b     [w0], w1
    195a:	c0 89 20    	mov.w     #0x89c, w0
    195c:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    195e:	40 80 20    	mov.w     #0x804, w0
    1960:	90 40 90    	mov.b     [w0+1], w1
    1962:	d0 89 20    	mov.w     #0x89d, w0
    1964:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    1966:	40 80 20    	mov.w     #0x804, w0
    1968:	10 00 90    	mov.w     [w0+2], w0
    196a:	f0 44 88    	mov.w     w0, 0x89e
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    196c:	40 80 20    	mov.w     #0x804, w0
    196e:	20 00 90    	mov.w     [w0+4], w0
    1970:	00 45 88    	mov.w     w0, 0x8a0
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    1972:	40 80 20    	mov.w     #0x804, w0
    1974:	30 00 90    	mov.w     [w0+6], w0
    1976:	10 45 88    	mov.w     w0, 0x8a2
            switch (USB_setup.wValue.b[1]) {
    1978:	40 80 20    	mov.w     #0x804, w0
    197a:	30 40 90    	mov.b     [w0+3], w0
    197c:	00 80 fb    	ze        w0, w0
    197e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1980:	0b 00 32    	bra       Z, 0x1998 <.L106>
    1982:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1984:	24 00 32    	bra       Z, 0x19ce <.L107>
    1986:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1988:	37 00 3a    	bra       NZ, 0x19f8 <.L139>
                case DEVICE:
                    USB_request.data_ptr = Device;
    198a:	e0 21 29    	mov.w     #0x921e, w0
    198c:	20 45 88    	mov.w     w0, 0x8a4
                    USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    198e:	20 45 80    	mov.w     0x8a4, w0
    1990:	10 40 78    	mov.b     [w0], w0
    1992:	00 80 fb    	ze        w0, w0
    1994:	30 45 88    	mov.w     w0, 0x8a6
                    break;
    1996:	39 00 37    	bra       0x1a0a <.L108>

00001998 <.L106>:
                case CONFIGURATION:
                    if (USB_setup.wValue.b[0] < NUM_CONFIGURATIONS) {
    1998:	40 80 20    	mov.w     #0x804, w0
    199a:	20 40 90    	mov.b     [w0+2], w0
    199c:	00 04 e0    	cp0.b     w0
    199e:	13 00 3a    	bra       NZ, 0x19c6 <.L109>
                        USB_request.data_ptr = Configurations[USB_setup.wValue.b[0]];
    19a0:	40 80 20    	mov.w     #0x804, w0
    19a2:	20 40 90    	mov.b     [w0+2], w0
    19a4:	00 80 fb    	ze        w0, w0
    19a6:	80 00 40    	add.w     w0, w0, w1
    19a8:	20 24 29    	mov.w     #0x9242, w0
    19aa:	00 80 40    	add.w     w1, w0, w0
    19ac:	10 00 78    	mov.w     [w0], w0
    19ae:	20 45 88    	mov.w     w0, 0x8a4
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];  // wTotalLength starting at an offset of 2
    19b0:	20 45 80    	mov.w     0x8a4, w0
    19b2:	00 80 e8    	inc2.w    w0, w0
    19b4:	90 40 78    	mov.b     [w0], w1
    19b6:	60 8a 20    	mov.w     #0x8a6, w0
    19b8:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    19ba:	20 45 80    	mov.w     0x8a4, w0
    19bc:	63 00 40    	add.w     w0, #0x3, w0
    19be:	90 40 78    	mov.b     [w0], w1
    19c0:	70 8a 20    	mov.w     #0x8a7, w0
    19c2:	01 48 78    	mov.b     w1, [w0]
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    19c4:	22 00 37    	bra       0x1a0a <.L108>

000019c6 <.L109>:
    19c6:	0c c8 bf    	mov.b     0x80c, WREG
    19c8:	00 04 a0    	bset.b    w0, #0x0
    19ca:	0c e8 b7    	mov.b     WREG, 0x80c
    19cc:	1e 00 37    	bra       0x1a0a <.L108>

000019ce <.L107>:
                case STRING:
                    if (USB_setup.wValue.b[0] < NUM_STRINGS) {
    19ce:	40 80 20    	mov.w     #0x804, w0
    19d0:	20 40 90    	mov.b     [w0+2], w0
    19d2:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    19d4:	0d 00 3e    	bra       GTU, 0x19f0 <.L111>
                        USB_request.data_ptr = Strings[USB_setup.wValue.b[0]];
    19d6:	40 80 20    	mov.w     #0x804, w0
    19d8:	20 40 90    	mov.b     [w0+2], w0
    19da:	00 80 fb    	ze        w0, w0
    19dc:	80 00 40    	add.w     w0, w0, w1
    19de:	20 28 29    	mov.w     #0x9282, w0
    19e0:	00 80 40    	add.w     w1, w0, w0
    19e2:	10 00 78    	mov.w     [w0], w0
    19e4:	20 45 88    	mov.w     w0, 0x8a4
                        USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    19e6:	20 45 80    	mov.w     0x8a4, w0
    19e8:	10 40 78    	mov.b     [w0], w0
    19ea:	00 80 fb    	ze        w0, w0
    19ec:	30 45 88    	mov.w     w0, 0x8a6
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    19ee:	0d 00 37    	bra       0x1a0a <.L108>

000019f0 <.L111>:
    19f0:	0c c8 bf    	mov.b     0x80c, WREG
    19f2:	00 04 a0    	bset.b    w0, #0x0
    19f4:	0c e8 b7    	mov.b     WREG, 0x80c
    19f6:	09 00 37    	bra       0x1a0a <.L108>

000019f8 <.L139>:
                default:
                    if (USB_get_descriptor_callback)
    19f8:	a0 40 80    	mov.w     0x814, w0
    19fa:	00 00 e0    	cp0.w     w0
    19fc:	03 00 32    	bra       Z, 0x1a04 <.L113>
                        USB_get_descriptor_callback();
    19fe:	a0 40 80    	mov.w     0x814, w0
    1a00:	00 00 01    	call      w0
    1a02:	03 00 37    	bra       0x1a0a <.L108>

00001a04 <.L113>:
                    else
                        USB_error_flags |= REQUEST_ERROR;
    1a04:	0c c8 bf    	mov.b     0x80c, WREG
    1a06:	00 04 a0    	bset.b    w0, #0x0
    1a08:	0c e8 b7    	mov.b     WREG, 0x80c

00001a0a <.L108>:
            }
            if (!(USB_error_flags & REQUEST_ERROR)) {
    1a0a:	0c c8 bf    	mov.b     0x80c, WREG
    1a0c:	00 80 fb    	ze        w0, w0
    1a0e:	61 00 60    	and.w     w0, #0x1, w0
    1a10:	00 00 e0    	cp0.w     w0
    1a12:	79 00 3a    	bra       NZ, 0x1b06 <.L144>
                USB_in_callbacks[0] = usb_send_data_packet;
    1a14:	c0 b0 21    	mov.w     #0x1b0c, w0
    1a16:	50 45 88    	mov.w     w0, 0x8aa
                if (USB_setup.wLength.w < USB_request.bytes_left.w)
    1a18:	40 80 20    	mov.w     #0x804, w0
    1a1a:	b0 00 90    	mov.w     [w0+6], w1
    1a1c:	30 45 80    	mov.w     0x8a6, w0
    1a1e:	80 8f 50    	sub.w     w1, w0, [w15]
    1a20:	03 00 31    	bra       C, 0x1a28 <.L115>
                    USB_request.bytes_left.w = USB_setup.wLength.w;
    1a22:	40 80 20    	mov.w     #0x804, w0
    1a24:	30 00 90    	mov.w     [w0+6], w0
    1a26:	30 45 88    	mov.w     w0, 0x8a6

00001a28 <.L115>:
                usb_send_data_packet();
    1a28:	71 00 07    	rcall     0x1b0c <_usb_send_data_packet> <.LFB7> <.LFE6>
            }
            break;
    1a2a:	6e 00 37    	bra       0x1b08 <.L42>

00001a2c <.L48>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config; // copy current device configuration to EP0 IN buffer
    1a2c:	30 50 80    	mov.w     0xa06, w0
    1a2e:	d1 80 20    	mov.w     #0x80d, w1
    1a30:	91 40 78    	mov.b     [w1], w1
    1a32:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 1;
    1a34:	40 a0 20    	mov.w     #0xa04, w0
    1a36:	11 c0 b3    	mov.b     #0x1, w1
    1a38:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1a3a:	50 a0 20    	mov.w     #0xa05, w0
    1a3c:	81 cc b3    	mov.b     #0xc8, w1
    1a3e:	01 48 78    	mov.b     w1, [w0]
            break;
    1a40:	63 00 37    	bra       0x1b08 <.L42>

00001a42 <.L49>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0] <= NUM_CONFIGURATIONS) {
    1a42:	40 80 20    	mov.w     #0x804, w0
    1a44:	20 40 90    	mov.b     [w0+2], w0
    1a46:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1a48:	1a 00 3e    	bra       GTU, 0x1a7e <.L116>
                usb_disable_endpoints(1);           // disable all endpoints except EP0
    1a4a:	10 c0 b3    	mov.b     #0x1, w0
    1a4c:	1d fc 07    	rcall     0x1288 <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    1a4e:	40 80 20    	mov.w     #0x804, w0
    1a50:	20 40 90    	mov.b     [w0+2], w0
    1a52:	0d e8 b7    	mov.b     WREG, 0x80d
    1a54:	0d c8 bf    	mov.b     0x80d, WREG
    1a56:	00 80 fb    	ze        w0, w0
    1a58:	00 00 e0    	cp0.w     w0
    1a5a:	03 00 3a    	bra       NZ, 0x1a62 <.L140>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    1a5c:	20 c0 b3    	mov.b     #0x2, w0
    1a5e:	10 e8 b7    	mov.b     WREG, 0x810
                        break;
    1a60:	07 00 37    	bra       0x1a70 <.L119>

00001a62 <.L140>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    1a62:	30 c0 b3    	mov.b     #0x3, w0
    1a64:	10 e8 b7    	mov.b     WREG, 0x810
                        if (USB_set_config_callback)
    1a66:	90 40 80    	mov.w     0x812, w0
    1a68:	00 00 e0    	cp0.w     w0
    1a6a:	02 00 32    	bra       Z, 0x1a70 <.L119>
                            USB_set_config_callback();
    1a6c:	90 40 80    	mov.w     0x812, w0
    1a6e:	00 00 01    	call      w0

00001a70 <.L119>:
                }
                BD[EP0IN].bytecount = 0;
    1a70:	40 a0 20    	mov.w     #0xa04, w0
    1a72:	80 40 eb    	clr.b     w1
    1a74:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1a76:	50 a0 20    	mov.w     #0xa05, w0
    1a78:	81 cc b3    	mov.b     #0xc8, w1
    1a7a:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1a7c:	45 00 37    	bra       0x1b08 <.L42>

00001a7e <.L116>:
    1a7e:	0c c8 bf    	mov.b     0x80c, WREG
    1a80:	00 04 a0    	bset.b    w0, #0x0
    1a82:	0c e8 b7    	mov.b     WREG, 0x80c
    1a84:	41 00 37    	bra       0x1b08 <.L42>

00001a86 <.L50>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    1a86:	10 c8 bf    	mov.b     0x810, WREG
    1a88:	00 80 fb    	ze        w0, w0
    1a8a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1a8c:	13 00 3a    	bra       NZ, 0x1ab4 <.L141>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1a8e:	40 80 20    	mov.w     #0x804, w0
    1a90:	40 40 90    	mov.b     [w0+4], w0
    1a92:	00 04 e0    	cp0.b     w0
    1a94:	0a 00 3a    	bra       NZ, 0x1aaa <.L123>
                        BD[EP0IN].address[0] = 0;   // always send back 0 for bAlternateSetting
    1a96:	30 50 80    	mov.w     0xa06, w0
    1a98:	80 40 eb    	clr.b     w1
    1a9a:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 1;
    1a9c:	40 a0 20    	mov.w     #0xa04, w0
    1a9e:	11 c0 b3    	mov.b     #0x1, w1
    1aa0:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1aa2:	50 a0 20    	mov.w     #0xa05, w0
    1aa4:	81 cc b3    	mov.b     #0xc8, w1
    1aa6:	01 48 78    	mov.b     w1, [w0]
    1aa8:	03 00 37    	bra       0x1ab0 <.L124>

00001aaa <.L123>:
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    1aaa:	0c c8 bf    	mov.b     0x80c, WREG
    1aac:	00 04 a0    	bset.b    w0, #0x0
    1aae:	0c e8 b7    	mov.b     WREG, 0x80c

00001ab0 <.L124>:
                    }
                    break;
    1ab0:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1ab2:	2a 00 37    	bra       0x1b08 <.L42>

00001ab4 <.L141>:
    1ab4:	0c c8 bf    	mov.b     0x80c, WREG
    1ab6:	00 04 a0    	bset.b    w0, #0x0
    1ab8:	0c e8 b7    	mov.b     WREG, 0x80c
    1aba:	26 00 37    	bra       0x1b08 <.L42>

00001abc <.L51>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    1abc:	10 c8 bf    	mov.b     0x810, WREG
    1abe:	00 80 fb    	ze        w0, w0
    1ac0:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1ac2:	19 00 3a    	bra       NZ, 0x1af6 <.L142>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1ac4:	40 80 20    	mov.w     #0x804, w0
    1ac6:	40 40 90    	mov.b     [w0+4], w0
    1ac8:	00 04 e0    	cp0.b     w0
    1aca:	10 00 3a    	bra       NZ, 0x1aec <.L128>
                        switch (USB_setup.wValue.b[0]) {
    1acc:	40 80 20    	mov.w     #0x804, w0
    1ace:	20 40 90    	mov.b     [w0+2], w0
    1ad0:	00 80 fb    	ze        w0, w0
    1ad2:	00 00 e0    	cp0.w     w0
    1ad4:	07 00 3a    	bra       NZ, 0x1ae4 <.L143>
                            case 0:                 // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0;
    1ad6:	40 a0 20    	mov.w     #0xa04, w0
    1ad8:	80 40 eb    	clr.b     w1
    1ada:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1adc:	50 a0 20    	mov.w     #0xa05, w0
    1ade:	81 cc b3    	mov.b     #0xc8, w1
    1ae0:	01 48 78    	mov.b     w1, [w0]
                                break;
    1ae2:	07 00 37    	bra       0x1af2 <.L132>

00001ae4 <.L143>:
                            default:
                                USB_error_flags |= REQUEST_ERROR;
    1ae4:	0c c8 bf    	mov.b     0x80c, WREG
    1ae6:	00 04 a0    	bset.b    w0, #0x0
    1ae8:	0c e8 b7    	mov.b     WREG, 0x80c
    1aea:	03 00 37    	bra       0x1af2 <.L132>

00001aec <.L128>:
                        }
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    1aec:	0c c8 bf    	mov.b     0x80c, WREG
    1aee:	00 04 a0    	bset.b    w0, #0x0
    1af0:	0c e8 b7    	mov.b     WREG, 0x80c

00001af2 <.L132>:
                    }
                    break;
    1af2:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1af4:	09 00 37    	bra       0x1b08 <.L42>

00001af6 <.L142>:
    1af6:	0c c8 bf    	mov.b     0x80c, WREG
    1af8:	00 04 a0    	bset.b    w0, #0x0
    1afa:	0c e8 b7    	mov.b     WREG, 0x80c
    1afc:	05 00 37    	bra       0x1b08 <.L42>

00001afe <.L43>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= REQUEST_ERROR;
    1afe:	0c c8 bf    	mov.b     0x80c, WREG
    1b00:	00 04 a0    	bset.b    w0, #0x0
    1b02:	0c e8 b7    	mov.b     WREG, 0x80c
    1b04:	01 00 37    	bra       0x1b08 <.L42>

00001b06 <.L144>:
    1b06:	00 00 00    	nop       

00001b08 <.L42>:
    }
}
    1b08:	00 80 fa    	ulnk      
    1b0a:	00 00 06    	return    

00001b0c <_usb_send_data_packet>:

void usb_send_data_packet(void) {
    1b0c:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (USB_request.bytes_left.w < MAX_PACKET_SIZE) {
    1b0e:	31 45 80    	mov.w     0x8a6, w1
    1b10:	f0 03 20    	mov.w     #0x3f, w0
    1b12:	80 8f 50    	sub.w     w1, w0, [w15]
    1b14:	05 00 3e    	bra       GTU, 0x1b20 <.L146>
        packet_length = (uint8_t)USB_request.bytes_left.w;
    1b16:	30 45 80    	mov.w     0x8a6, w0
    1b18:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    1b1a:	00 00 eb    	clr.w     w0
    1b1c:	30 45 88    	mov.w     w0, 0x8a6
    1b1e:	05 00 37    	bra       0x1b2a <.L147>

00001b20 <.L146>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    1b20:	00 c4 b3    	mov.b     #0x40, w0
    1b22:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    1b24:	30 45 80    	mov.w     0x8a6, w0
    1b26:	00 04 b1    	sub.w     #0x40, w0
    1b28:	30 45 88    	mov.w     w0, 0x8a6

00001b2a <.L147>:
    }
    for (i = 0; i < packet_length; i++) {
    1b2a:	00 40 eb    	clr.b     w0
    1b2c:	10 47 98    	mov.b     w0, [w14+1]
    1b2e:	0c 00 37    	bra       0x1b48 <.L148>

00001b30 <.L149>:
        BD[EP0IN].address[i] = *USB_request.data_ptr++;
    1b30:	31 50 80    	mov.w     0xa06, w1
    1b32:	1e 40 90    	mov.b     [w14+1], w0
    1b34:	00 80 fb    	ze        w0, w0
    1b36:	80 80 40    	add.w     w1, w0, w1
    1b38:	20 45 80    	mov.w     0x8a4, w0
    1b3a:	10 41 78    	mov.b     [w0], w2
    1b3c:	82 48 78    	mov.b     w2, [w1]
    1b3e:	00 00 e8    	inc.w     w0, w0
    1b40:	20 45 88    	mov.w     w0, 0x8a4
    1b42:	1e 40 90    	mov.b     [w14+1], w0
    1b44:	00 40 e8    	inc.b     w0, w0
    1b46:	10 47 98    	mov.b     w0, [w14+1]

00001b48 <.L148>:
    1b48:	1e 40 90    	mov.b     [w14+1], w0
    1b4a:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1b4c:	f1 ff 39    	bra       NC, 0x1b30 <.L149>
    }
    BD[EP0IN].bytecount = packet_length;
    1b4e:	40 a0 20    	mov.w     #0xa04, w0
    1b50:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    1b52:	50 a0 20    	mov.w     #0xa05, w0
    1b54:	10 40 78    	mov.b     [w0], w0
    1b56:	00 c0 ea    	com.b     w0, w0
    1b58:	02 c4 b3    	mov.b     #0x40, w2
    1b5a:	82 40 60    	and.b     w0, w2, w1
    1b5c:	80 c8 b3    	mov.b     #0x88, w0
    1b5e:	00 c0 70    	ior.b     w1, w0, w0
    1b60:	80 40 78    	mov.b     w0, w1
    1b62:	50 a0 20    	mov.w     #0xa05, w0
    1b64:	01 48 78    	mov.b     w1, [w0]
    if (USB_request.bytes_left.w == 0) {
    1b66:	30 45 80    	mov.w     0x8a6, w0
    1b68:	00 00 e0    	cp0.w     w0
    1b6a:	0f 00 3a    	bra       NZ, 0x1b8a <.L145>
        if (USB_request.done_callback)
    1b6c:	40 45 80    	mov.w     0x8a8, w0
    1b6e:	00 00 e0    	cp0.w     w0
    1b70:	02 00 32    	bra       Z, 0x1b76 <.L151>
            USB_request.done_callback();
    1b72:	40 45 80    	mov.w     0x8a8, w0
    1b74:	00 00 01    	call      w0

00001b76 <.L151>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    1b76:	c0 89 20    	mov.w     #0x89c, w0
    1b78:	80 c0 eb    	setm.b    w1
    1b7a:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    1b7c:	d0 89 20    	mov.w     #0x89d, w0
    1b7e:	80 c0 eb    	setm.b    w1
    1b80:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1b82:	00 00 eb    	clr.w     w0
    1b84:	40 45 88    	mov.w     w0, 0x8a8
        USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    1b86:	00 00 eb    	clr.w     w0
    1b88:	50 45 88    	mov.w     w0, 0x8aa

00001b8a <.L145>:
    }
}
    1b8a:	00 80 fa    	ulnk      
    1b8c:	00 00 06    	return    

00001b8e <_usb_receive_data_packet>:

void usb_receive_data_packet(void) {
    1b8e:	02 00 fa    	lnk       #0x2
    uint8_t i;

    for (i = 0; i < BD[EP0OUT].bytecount; i++) {
    1b90:	00 40 eb    	clr.b     w0
    1b92:	00 4f 78    	mov.b     w0, [w14]
    1b94:	09 00 37    	bra       0x1ba8 <.L153>

00001b96 <.L154>:
        *USB_request.data_ptr++ = BD[EP0OUT].address[i];
    1b96:	20 45 80    	mov.w     0x8a4, w0
    1b98:	12 50 80    	mov.w     0xa02, w2
    1b9a:	9e 80 fb    	ze        [w14], w1
    1b9c:	81 00 41    	add.w     w2, w1, w1
    1b9e:	91 40 78    	mov.b     [w1], w1
    1ba0:	01 48 78    	mov.b     w1, [w0]
    1ba2:	00 00 e8    	inc.w     w0, w0
    1ba4:	20 45 88    	mov.w     w0, 0x8a4
    1ba6:	1e 4f e8    	inc.b     [w14], [w14]

00001ba8 <.L153>:
    1ba8:	00 a0 20    	mov.w     #0xa00, w0
    1baa:	10 40 78    	mov.b     [w0], w0
    1bac:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1bae:	f3 ff 3e    	bra       GTU, 0x1b96 <.L154>
    }
    USB_request.bytes_left.w -= BD[EP0OUT].bytecount;
    1bb0:	31 45 80    	mov.w     0x8a6, w1
    1bb2:	00 a0 20    	mov.w     #0xa00, w0
    1bb4:	10 40 78    	mov.b     [w0], w0
    1bb6:	00 80 fb    	ze        w0, w0
    1bb8:	00 80 50    	sub.w     w1, w0, w0
    1bba:	30 45 88    	mov.w     w0, 0x8a6
    if (USB_request.bytes_left.w > 0) {
    1bbc:	30 45 80    	mov.w     0x8a6, w0
    1bbe:	00 00 e0    	cp0.w     w0
    1bc0:	0e 00 32    	bra       Z, 0x1bde <.L155>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1bc2:	00 a0 20    	mov.w     #0xa00, w0
    1bc4:	01 c4 b3    	mov.b     #0x40, w1
    1bc6:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].status = ((BD[EP0OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    1bc8:	10 a0 20    	mov.w     #0xa01, w0
    1bca:	10 40 78    	mov.b     [w0], w0
    1bcc:	00 c0 ea    	com.b     w0, w0
    1bce:	02 c4 b3    	mov.b     #0x40, w2
    1bd0:	82 40 60    	and.b     w0, w2, w1
    1bd2:	80 c8 b3    	mov.b     #0x88, w0
    1bd4:	00 c0 70    	ior.b     w1, w0, w0
    1bd6:	80 40 78    	mov.b     w0, w1
    1bd8:	10 a0 20    	mov.w     #0xa01, w0
    1bda:	01 48 78    	mov.b     w1, [w0]
    1bdc:	0f 00 37    	bra       0x1bfc <.L152>

00001bde <.L155>:
    } else {
        if (USB_request.done_callback)
    1bde:	40 45 80    	mov.w     0x8a8, w0
    1be0:	00 00 e0    	cp0.w     w0
    1be2:	02 00 32    	bra       Z, 0x1be8 <.L157>
            USB_request.done_callback();
    1be4:	40 45 80    	mov.w     0x8a8, w0
    1be6:	00 00 01    	call      w0

00001be8 <.L157>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // all data received, so clear device request
    1be8:	c0 89 20    	mov.w     #0x89c, w0
    1bea:	80 c0 eb    	setm.b    w1
    1bec:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    1bee:	d0 89 20    	mov.w     #0x89d, w0
    1bf0:	80 c0 eb    	setm.b    w1
    1bf2:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1bf4:	00 00 eb    	clr.w     w0
    1bf6:	40 45 88    	mov.w     w0, 0x8a8
        USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    1bf8:	00 00 eb    	clr.w     w0
    1bfa:	50 46 88    	mov.w     w0, 0x8ca

00001bfc <.L152>:
    }
}
    1bfc:	00 80 fa    	ulnk      
    1bfe:	00 00 06    	return    

00001c00 <_ledoff>:
    1c00:	00 00 fa    	lnk       #0x0
    1c02:	dc e2 a9    	bclr.b    0x2dc, #0x7
    1c04:	ec 02 a9    	bclr.b    0x2ec, #0x0
    1c06:	ec 22 a9    	bclr.b    0x2ec, #0x1
    1c08:	00 80 fa    	ulnk      
    1c0a:	00 00 06    	return    

00001c0c <_delay_by_nop>:
    1c0c:	08 00 fa    	lnk       #0x8
    1c0e:	20 07 98    	mov.w     w0, [w14+4]
    1c10:	31 07 98    	mov.w     w1, [w14+6]
    1c12:	60 00 b8    	mul.uu    w0, #0x0, w0
    1c14:	00 8f be    	mov.d     w0, [w14]
    1c16:	05 00 37    	bra       0x1c22 <.L3>

00001c18 <.L4>:
    1c18:	00 00 00    	nop       
    1c1a:	12 00 20    	mov.w     #0x1, w2
    1c1c:	03 00 20    	mov.w     #0x0, w3
    1c1e:	1e 0f 41    	add.w     w2, [w14], [w14]
    1c20:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00001c22 <.L3>:
    1c22:	2e 00 90    	mov.w     [w14+4], w0
    1c24:	be 00 90    	mov.w     [w14+6], w1
    1c26:	1e 01 be    	mov.d     [w14], w2
    1c28:	80 0f 51    	sub.w     w2, w0, [w15]
    1c2a:	81 8f 59    	subb.w    w3, w1, [w15]
    1c2c:	f5 ff 39    	bra       NC, 0x1c18 <.L4>
    1c2e:	00 80 fa    	ulnk      
    1c30:	00 00 06    	return    

00001c32 <_main>:
    1c32:	02 00 fa    	lnk       #0x2
    1c34:	c5 00 07    	rcall     0x1dc0 <_init_elecanisms> <.L0> <.LFB0> <.LFE2> <.Letext0> <.Ltext0>

00001c36 <.L29>:
    1c36:	50 00 20    	mov.w     #0x5, w0
    1c38:	f3 00 07    	rcall     0x1e20 <_read_analog> <.LFB1> <.LFE0>
    1c3a:	00 0f 78    	mov.w     w0, [w14]
    1c3c:	40 1f 20    	mov.w     #0x1f4, w0
    1c3e:	9e 00 78    	mov.w     [w14], w1
    1c40:	80 8f 50    	sub.w     w1, w0, [w15]
    1c42:	05 00 36    	bra       LEU, 0x1c4e <.L6>
    1c44:	30 22 20    	mov.w     #0x223, w0
    1c46:	9e 00 78    	mov.w     [w14], w1
    1c48:	80 8f 50    	sub.w     w1, w0, [w15]
    1c4a:	01 00 3e    	bra       GTU, 0x1c4e <.L6>
    1c4c:	1a 28 ef    	clr.w     0x81a

00001c4e <.L6>:
    1c4e:	40 22 20    	mov.w     #0x224, w0
    1c50:	9e 00 78    	mov.w     [w14], w1
    1c52:	80 8f 50    	sub.w     w1, w0, [w15]
    1c54:	06 00 36    	bra       LEU, 0x1c62 <.L7>
    1c56:	50 23 20    	mov.w     #0x235, w0
    1c58:	9e 00 78    	mov.w     [w14], w1
    1c5a:	80 8f 50    	sub.w     w1, w0, [w15]
    1c5c:	02 00 3e    	bra       GTU, 0x1c62 <.L7>
    1c5e:	10 00 20    	mov.w     #0x1, w0
    1c60:	d0 40 88    	mov.w     w0, 0x81a

00001c62 <.L7>:
    1c62:	60 23 20    	mov.w     #0x236, w0
    1c64:	9e 00 78    	mov.w     [w14], w1
    1c66:	80 8f 50    	sub.w     w1, w0, [w15]
    1c68:	06 00 36    	bra       LEU, 0x1c76 <.L8>
    1c6a:	f0 25 20    	mov.w     #0x25f, w0
    1c6c:	9e 00 78    	mov.w     [w14], w1
    1c6e:	80 8f 50    	sub.w     w1, w0, [w15]
    1c70:	02 00 3e    	bra       GTU, 0x1c76 <.L8>
    1c72:	20 00 20    	mov.w     #0x2, w0
    1c74:	d0 40 88    	mov.w     w0, 0x81a

00001c76 <.L8>:
    1c76:	00 26 20    	mov.w     #0x260, w0
    1c78:	9e 00 78    	mov.w     [w14], w1
    1c7a:	80 8f 50    	sub.w     w1, w0, [w15]
    1c7c:	06 00 36    	bra       LEU, 0x1c8a <.L9>
    1c7e:	40 27 20    	mov.w     #0x274, w0
    1c80:	9e 00 78    	mov.w     [w14], w1
    1c82:	80 8f 50    	sub.w     w1, w0, [w15]
    1c84:	02 00 3e    	bra       GTU, 0x1c8a <.L9>
    1c86:	30 00 20    	mov.w     #0x3, w0
    1c88:	d0 40 88    	mov.w     w0, 0x81a

00001c8a <.L9>:
    1c8a:	50 27 20    	mov.w     #0x275, w0
    1c8c:	9e 00 78    	mov.w     [w14], w1
    1c8e:	80 8f 50    	sub.w     w1, w0, [w15]
    1c90:	06 00 36    	bra       LEU, 0x1c9e <.L10>
    1c92:	90 28 20    	mov.w     #0x289, w0
    1c94:	9e 00 78    	mov.w     [w14], w1
    1c96:	80 8f 50    	sub.w     w1, w0, [w15]
    1c98:	02 00 3e    	bra       GTU, 0x1c9e <.L10>
    1c9a:	40 00 20    	mov.w     #0x4, w0
    1c9c:	d0 40 88    	mov.w     w0, 0x81a

00001c9e <.L10>:
    1c9e:	a0 28 20    	mov.w     #0x28a, w0
    1ca0:	9e 00 78    	mov.w     [w14], w1
    1ca2:	80 8f 50    	sub.w     w1, w0, [w15]
    1ca4:	06 00 36    	bra       LEU, 0x1cb2 <.L11>
    1ca6:	20 2a 20    	mov.w     #0x2a2, w0
    1ca8:	9e 00 78    	mov.w     [w14], w1
    1caa:	80 8f 50    	sub.w     w1, w0, [w15]
    1cac:	02 00 3e    	bra       GTU, 0x1cb2 <.L11>
    1cae:	50 00 20    	mov.w     #0x5, w0
    1cb0:	d0 40 88    	mov.w     w0, 0x81a

00001cb2 <.L11>:
    1cb2:	30 2a 20    	mov.w     #0x2a3, w0
    1cb4:	9e 00 78    	mov.w     [w14], w1
    1cb6:	80 8f 50    	sub.w     w1, w0, [w15]
    1cb8:	06 00 36    	bra       LEU, 0x1cc6 <.L12>
    1cba:	20 2b 20    	mov.w     #0x2b2, w0
    1cbc:	9e 00 78    	mov.w     [w14], w1
    1cbe:	80 8f 50    	sub.w     w1, w0, [w15]
    1cc0:	02 00 3e    	bra       GTU, 0x1cc6 <.L12>
    1cc2:	60 00 20    	mov.w     #0x6, w0
    1cc4:	d0 40 88    	mov.w     w0, 0x81a

00001cc6 <.L12>:
    1cc6:	30 2b 20    	mov.w     #0x2b3, w0
    1cc8:	9e 00 78    	mov.w     [w14], w1
    1cca:	80 8f 50    	sub.w     w1, w0, [w15]
    1ccc:	06 00 36    	bra       LEU, 0x1cda <.L13>
    1cce:	30 2c 20    	mov.w     #0x2c3, w0
    1cd0:	9e 00 78    	mov.w     [w14], w1
    1cd2:	80 8f 50    	sub.w     w1, w0, [w15]
    1cd4:	02 00 3e    	bra       GTU, 0x1cda <.L13>
    1cd6:	70 00 20    	mov.w     #0x7, w0
    1cd8:	d0 40 88    	mov.w     w0, 0x81a

00001cda <.L13>:
    1cda:	40 2c 20    	mov.w     #0x2c4, w0
    1cdc:	9e 00 78    	mov.w     [w14], w1
    1cde:	80 8f 50    	sub.w     w1, w0, [w15]
    1ce0:	06 00 36    	bra       LEU, 0x1cee <.L14>
    1ce2:	b0 2d 20    	mov.w     #0x2db, w0
    1ce4:	9e 00 78    	mov.w     [w14], w1
    1ce6:	80 8f 50    	sub.w     w1, w0, [w15]
    1ce8:	02 00 3e    	bra       GTU, 0x1cee <.L14>
    1cea:	80 00 20    	mov.w     #0x8, w0
    1cec:	d0 40 88    	mov.w     w0, 0x81a

00001cee <.L14>:
    1cee:	c0 2d 20    	mov.w     #0x2dc, w0
    1cf0:	9e 00 78    	mov.w     [w14], w1
    1cf2:	80 8f 50    	sub.w     w1, w0, [w15]
    1cf4:	06 00 36    	bra       LEU, 0x1d02 <.L15>
    1cf6:	c0 2f 20    	mov.w     #0x2fc, w0
    1cf8:	9e 00 78    	mov.w     [w14], w1
    1cfa:	80 8f 50    	sub.w     w1, w0, [w15]
    1cfc:	02 00 3e    	bra       GTU, 0x1d02 <.L15>
    1cfe:	90 00 20    	mov.w     #0x9, w0
    1d00:	d0 40 88    	mov.w     w0, 0x81a

00001d02 <.L15>:
    1d02:	d0 2f 20    	mov.w     #0x2fd, w0
    1d04:	9e 00 78    	mov.w     [w14], w1
    1d06:	80 8f 50    	sub.w     w1, w0, [w15]
    1d08:	06 00 36    	bra       LEU, 0x1d16 <.L16>
    1d0a:	50 31 20    	mov.w     #0x315, w0
    1d0c:	9e 00 78    	mov.w     [w14], w1
    1d0e:	80 8f 50    	sub.w     w1, w0, [w15]
    1d10:	02 00 3e    	bra       GTU, 0x1d16 <.L16>
    1d12:	a0 00 20    	mov.w     #0xa, w0
    1d14:	d0 40 88    	mov.w     w0, 0x81a

00001d16 <.L16>:
    1d16:	60 31 20    	mov.w     #0x316, w0
    1d18:	9e 00 78    	mov.w     [w14], w1
    1d1a:	80 8f 50    	sub.w     w1, w0, [w15]
    1d1c:	06 00 36    	bra       LEU, 0x1d2a <.L17>
    1d1e:	f0 32 20    	mov.w     #0x32f, w0
    1d20:	9e 00 78    	mov.w     [w14], w1
    1d22:	80 8f 50    	sub.w     w1, w0, [w15]
    1d24:	02 00 3e    	bra       GTU, 0x1d2a <.L17>
    1d26:	b0 00 20    	mov.w     #0xb, w0
    1d28:	d0 40 88    	mov.w     w0, 0x81a

00001d2a <.L17>:
    1d2a:	00 33 20    	mov.w     #0x330, w0
    1d2c:	9e 00 78    	mov.w     [w14], w1
    1d2e:	80 8f 50    	sub.w     w1, w0, [w15]
    1d30:	06 00 36    	bra       LEU, 0x1d3e <.L18>
    1d32:	90 34 20    	mov.w     #0x349, w0
    1d34:	9e 00 78    	mov.w     [w14], w1
    1d36:	80 8f 50    	sub.w     w1, w0, [w15]
    1d38:	02 00 3e    	bra       GTU, 0x1d3e <.L18>
    1d3a:	c0 00 20    	mov.w     #0xc, w0
    1d3c:	d0 40 88    	mov.w     w0, 0x81a

00001d3e <.L18>:
    1d3e:	a0 34 20    	mov.w     #0x34a, w0
    1d40:	9e 00 78    	mov.w     [w14], w1
    1d42:	80 8f 50    	sub.w     w1, w0, [w15]
    1d44:	06 00 36    	bra       LEU, 0x1d52 <.L19>
    1d46:	f0 35 20    	mov.w     #0x35f, w0
    1d48:	9e 00 78    	mov.w     [w14], w1
    1d4a:	80 8f 50    	sub.w     w1, w0, [w15]
    1d4c:	02 00 3e    	bra       GTU, 0x1d52 <.L19>
    1d4e:	d0 00 20    	mov.w     #0xd, w0
    1d50:	d0 40 88    	mov.w     w0, 0x81a

00001d52 <.L19>:
    1d52:	00 36 20    	mov.w     #0x360, w0
    1d54:	9e 00 78    	mov.w     [w14], w1
    1d56:	80 8f 50    	sub.w     w1, w0, [w15]
    1d58:	06 00 36    	bra       LEU, 0x1d66 <.L20>
    1d5a:	30 38 20    	mov.w     #0x383, w0
    1d5c:	9e 00 78    	mov.w     [w14], w1
    1d5e:	80 8f 50    	sub.w     w1, w0, [w15]
    1d60:	02 00 3e    	bra       GTU, 0x1d66 <.L20>
    1d62:	e0 00 20    	mov.w     #0xe, w0
    1d64:	d0 40 88    	mov.w     w0, 0x81a

00001d66 <.L20>:
    1d66:	40 38 20    	mov.w     #0x384, w0
    1d68:	9e 00 78    	mov.w     [w14], w1
    1d6a:	80 8f 50    	sub.w     w1, w0, [w15]
    1d6c:	06 00 36    	bra       LEU, 0x1d7a <.L21>
    1d6e:	70 39 20    	mov.w     #0x397, w0
    1d70:	9e 00 78    	mov.w     [w14], w1
    1d72:	80 8f 50    	sub.w     w1, w0, [w15]
    1d74:	02 00 3e    	bra       GTU, 0x1d7a <.L21>
    1d76:	f0 00 20    	mov.w     #0xf, w0
    1d78:	d0 40 88    	mov.w     w0, 0x81a

00001d7a <.L21>:
    1d7a:	30 1f 20    	mov.w     #0x1f3, w0
    1d7c:	9e 00 78    	mov.w     [w14], w1
    1d7e:	80 8f 50    	sub.w     w1, w0, [w15]
    1d80:	02 00 3e    	bra       GTU, 0x1d86 <.L22>
    1d82:	00 01 20    	mov.w     #0x10, w0
    1d84:	d0 40 88    	mov.w     w0, 0x81a

00001d86 <.L22>:
    1d86:	80 39 20    	mov.w     #0x398, w0
    1d88:	9e 00 78    	mov.w     [w14], w1
    1d8a:	80 8f 50    	sub.w     w1, w0, [w15]
    1d8c:	02 00 36    	bra       LEU, 0x1d92 <.L23>
    1d8e:	20 01 20    	mov.w     #0x12, w0
    1d90:	d0 40 88    	mov.w     w0, 0x81a

00001d92 <.L23>:
    1d92:	d0 40 80    	mov.w     0x81a, w0
    1d94:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1d96:	10 00 32    	bra       Z, 0x1db8 <.L26>
    1d98:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1d9a:	0b 00 39    	bra       NC, 0x1db2 <.L25>
    1d9c:	f0 0f 50    	sub.w     w0, #0x10, [w15]
    1d9e:	03 00 32    	bra       Z, 0x1da6 <.L27>
    1da0:	f2 0f 50    	sub.w     w0, #0x12, [w15]
    1da2:	04 00 32    	bra       Z, 0x1dac <.L28>

00001da4 <.LBE2>:
    1da4:	48 ff 37    	bra       0x1c36 <.L29> <.LBB2>

00001da6 <.L27>:
    1da6:	2c ff 07    	rcall     0x1c00 <_ledoff> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    1da8:	ec 22 a8    	bset.b    0x2ec, #0x1
    1daa:	09 00 37    	bra       0x1dbe <.L24>

00001dac <.L28>:
            // delay_by_nop(30000);
        break;

        case sbig:
            ledoff();
    1dac:	29 ff 07    	rcall     0x1c00 <_ledoff> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
            // delay_by_nop(30000);
            LED3 = 1;
    1dae:	ec 22 a8    	bset.b    0x2ec, #0x1
            // delay_by_nop(30000);
        break;
    1db0:	06 00 37    	bra       0x1dbe <.L24>

00001db2 <.L25>:

        case s1248:
            ledoff();
    1db2:	26 ff 07    	rcall     0x1c00 <_ledoff> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
            // delay_by_nop(30000);
            LED2 = 1;
    1db4:	ec 02 a8    	bset.b    0x2ec, #0x0
            // delay_by_nop(30000);
        break;
    1db6:	03 00 37    	bra       0x1dbe <.L24>

00001db8 <.L26>:

        case s124:
            ledoff();
    1db8:	23 ff 07    	rcall     0x1c00 <_ledoff> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
            // delay_by_nop(30000);
            LED1 = 1;
    1dba:	dc e2 a8    	bset.b    0x2dc, #0x7
            // delay_by_nop(30000);
        break;
    1dbc:	00 00 00    	nop       

00001dbe <.L24>:

        // default:
        //     state = soops;

    } // end of switch
} //end of while loop
    1dbe:	3b ff 37    	bra       0x1c36 <.L29> <.LBB2>

00001dc0 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    1dc0:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    1dc2:	00 10 20    	mov.w     #0x100, w0
    1dc4:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    1dc6:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    1dc8:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    1dca:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    1dcc:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    1dce:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    1dd0:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    1dd2:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    1dd4:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    1dd6:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    1dd8:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    1dda:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    1ddc:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    1dde:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    1de0:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    1de2:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    1de4:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    1de6:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    1de8:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    1dea:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    1dec:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    1dee:	f0 03 20    	mov.w     #0x3f, w0
    1df0:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    1df2:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    1df4:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    1df6:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    1df8:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    1dfa:	00 0e 20    	mov.w     #0xe0, w0
    1dfc:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    1dfe:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    1e00:	00 c4 20    	mov.w     #0xc40, w0
    1e02:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    1e04:	50 00 20    	mov.w     #0x5, w0
    1e06:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    1e08:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    1e0a:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    1e0c:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    1e0e:	e8 02 a9    	bclr.b    0x2e8, #0x0
    1e10:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    1e12:	e8 22 a9    	bclr.b    0x2e8, #0x1
    1e14:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    1e16:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    1e18:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    1e1a:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    1e1c:	00 80 fa    	ulnk      
    1e1e:	00 00 06    	return    

00001e20 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    1e20:	02 00 fa    	lnk       #0x2
    1e22:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    1e24:	9e 00 78    	mov.w     [w14], w1
    1e26:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    1e28:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    1e2a:	00 00 00    	nop       

00001e2c <.L3>:
    1e2c:	00 19 80    	mov.w     0x320, w0
    1e2e:	61 00 60    	and.w     w0, #0x1, w0
    1e30:	00 00 e0    	cp0.w     w0
    1e32:	fc ff 32    	bra       Z, 0x1e2c <.L3>
    return ADC1BUF0;
    1e34:	00 18 80    	mov.w     0x300, w0
}
    1e36:	00 80 fa    	ulnk      
    1e38:	00 00 06    	return    
Disassembly of section .isr.text:

00001e3a <__USB1Interrupt>:
    1e3a:	36 00 f8    	push      0x36
    1e3c:	80 9f be    	mov.d     w0, [w15++]
    1e3e:	82 9f be    	mov.d     w2, [w15++]
    1e40:	84 9f be    	mov.d     w4, [w15++]
    1e42:	86 9f be    	mov.d     w6, [w15++]
    1e44:	32 00 f8    	push      0x32
    1e46:	34 00 f8    	push      0x34
    1e48:	10 00 20    	mov.w     #0x1, w0
    1e4a:	a0 01 88    	mov.w     w0, 0x34
    1e4c:	00 20 20    	mov.w     #0x200, w0
    1e4e:	90 01 88    	mov.w     w0, 0x32
    1e50:	00 00 fa    	lnk       #0x0
    1e52:	87 fa 07    	rcall     0x1362 <_usb_service> <.LFB4> <.LFE3>
    1e54:	00 80 fa    	ulnk      
    1e56:	34 00 f9    	pop       0x34
    1e58:	32 00 f9    	pop       0x32
    1e5a:	4f 03 be    	mov.d     [--w15], w6
    1e5c:	4f 02 be    	mov.d     [--w15], w4
    1e5e:	4f 01 be    	mov.d     [--w15], w2
    1e60:	4f 00 be    	mov.d     [--w15], w0
    1e62:	36 00 f9    	pop       0x36
    1e64:	00 40 06    	retfie    
Disassembly of section .dinit:

00001e66 <.dinit>:
    1e66:	1a 08 00    	nop       
    1e68:	02 00 00    	nop       
    1e6a:	80 00 00    	nop       
    1e6c:	1c 08 00    	nop       
    1e6e:	ce 00 00    	nop       
    1e70:	80 00 00    	nop       
    1e72:	00 0a 00    	nop       
    1e74:	80 00 00    	nop       
    1e76:	80 00 00    	nop       
    1e78:	00 08 00    	nop       
    1e7a:	1a 00 00    	nop       
    1e7c:	80 00 00    	nop       
    1e7e:	00 00 00    	nop       
Disassembly of section .isr:

00001e80 <__DefaultInterrupt>:
    1e80:	00 40 da    	break     
    1e82:	00 00 fe    	reset     
