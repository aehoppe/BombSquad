
combolock.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	92 34 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	92 34 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	92 34 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	92 34 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	92 34 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	92 34 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	92 34 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	92 34 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	92 34 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	92 34 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	92 34 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	92 34 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	92 34 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	92 34 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	92 34 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	92 34 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	92 34 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	92 34 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	92 34 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	92 34 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	92 34 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	92 34 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	92 34 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	92 34 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	92 34 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	92 34 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	92 34 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	92 34 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	92 34 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	92 34 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	92 34 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	92 34 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	92 34 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	92 34 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	92 34 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	92 34 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	92 34 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	92 34 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	92 34 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	92 34 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	92 34 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	92 34 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	92 34 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	92 34 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	92 34 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	92 34 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	92 34 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	92 34 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	92 34 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	92 34 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	92 34 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	92 34 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	92 34 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	92 34 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	92 34 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	92 34 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	92 34 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	92 34 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	92 34 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	92 34 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	92 34 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	92 34 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	92 34 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	92 34 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	92 34 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	92 34 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	92 34 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	92 34 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	92 34 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	92 34 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	af 10 21    	mov.w     #0x110a, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	89 00 07    	rcall     0x1238 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	e0 3d 23    	mov.w     #0x33de, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	94 2a 02    	call      0x2a94 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	40 13 20    	mov.w     #0x134, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	f0 2b 04    	goto      0x2bf0 <_setup>
    1216:	00 00 00 
    1218:	3c 2b 04    	goto      0x2b3c <_secondnum>
    121a:	00 00 00 
    121c:	ac 2b 04    	goto      0x2bac <_thirdnum>
    121e:	00 00 00 
    1220:	da 2a 04    	goto      0x2ada <_firstnum>
    1222:	00 00 00 
    1224:	10 2d 04    	goto      0x2d10 <_solved>
    1226:	00 00 00 
    1228:	c8 2c 04    	goto      0x2cc8 <_run>
    122a:	00 00 00 
    122c:	56 2d 04    	goto      0x2d56 <_end_win>
    122e:	00 00 00 
    1230:	ac 2d 04    	goto      0x2dac <_end_fail>
    1232:	00 00 00 
    1234:	a2 15 04    	goto      0x15a2 <_prout>
    1236:	00 00 00 

00001238 <__crt_start_mode>:
    1238:	00 00 05    	retlw.w   #0x0, w0

0000123a <___subsf3>:
    123a:	03 f0 a2    	btg.w     w3, #0xf

0000123c <___addsf3>:
    123c:	88 9f be    	mov.d     w8, [w15++]
    123e:	8a 9f be    	mov.d     w10, [w15++]
    1240:	8c 1f 78    	mov.w     w12, [w15++]
    1242:	f6 00 07    	rcall     0x1430 <__funpack2>
    1244:	fd 00 33    	bra       N, 0x1440 <__fPropagateNaN>
    1246:	64 50 e1    	cp.w      w10, #0x4
    1248:	4f 00 32    	bra       Z, 0x12e8 <aisinfinite>

0000124a <checkspecialb>:
    124a:	64 20 e1    	cp.w      w4, #0x4
    124c:	52 00 32    	bra       Z, 0x12f2 <return2>
    124e:	03 82 6c    	xor.w     w9, w3, w4
    1250:	07 00 3b    	bra       NN, 0x1260 <getsign>
    1252:	09 05 d0    	sl.w      w9, w10
    1254:	03 06 d0    	sl.w      w3, w12
    1256:	82 0f 54    	sub.w     w8, w2, [w15]
    1258:	0c 06 5d    	subb.w    w10, w12, w12
    125a:	02 00 39    	bra       NC, 0x1260 <getsign>
    125c:	02 00 32    	bra       Z, 0x1262 <gotsign>
    125e:	89 01 78    	mov.w     w9, w3

00001260 <getsign>:
    1260:	03 06 78    	mov.w     w3, w12

00001262 <gotsign>:
    1262:	85 82 55    	sub.w     w11, w5, w5
    1264:	04 00 3d    	bra       GE, 0x126e <expcanonical>
    1266:	00 03 fd    	exch      w0, w6
    1268:	81 03 fd    	exch      w1, w7
    126a:	85 02 ea    	neg.w     w5, w5
    126c:	8b 85 42    	add.w     w5, w11, w11

0000126e <expcanonical>:
    126e:	84 0f 72    	ior.w     w4, w4, [w15]
    1270:	02 00 3b    	bra       NN, 0x1276 <nonegate>
    1272:	60 00 10    	subr.w    w0, #0x0, w0
    1274:	e0 80 18    	subbr.w   w1, #0x0, w1

00001276 <nonegate>:
    1276:	60 11 b8    	mul.uu    w2, #0x0, w2
    1278:	00 05 eb    	clr.w     w10
    127a:	7a 28 e1    	cp.w      w5, #0x1a
    127c:	0a 00 39    	bra       NC, 0x1292 <aligniter>
    127e:	06 00 78    	mov.w     w6, w0
    1280:	c7 5d dd    	sl.w      w11, #0x7, w11
    1282:	f7 07 b2    	and.w     #0x7f, w7
    1284:	87 80 75    	ior.w     w11, w7, w1
    1286:	2d 00 37    	bra       0x12e2 <signoff>

00001288 <align>:
    1288:	82 81 71    	ior.w     w3, w2, w3
    128a:	0a 01 78    	mov.w     w10, w2
    128c:	61 05 60    	and.w     w0, #0x1, w10
    128e:	81 80 d1    	asr.w     w1, w1
    1290:	00 80 d3    	rrc.w     w0, w0

00001292 <aligniter>:
    1292:	85 02 e9    	dec.w     w5, w5
    1294:	f9 ff 3b    	bra       NN, 0x1288 <align>

00001296 <aligned>:
    1296:	06 04 40    	add.w     w0, w6, w8
    1298:	87 84 48    	addc.w    w1, w7, w9
    129a:	02 00 3b    	bra       NN, 0x12a0 <normalizesum>
    129c:	60 04 14    	subr.w    w8, #0x0, w8
    129e:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012a0 <normalizesum>:
    12a0:	09 88 a3    	btst.z    w9, #0x8
    12a2:	07 00 32    	bra       Z, 0x12b2 <checknormal>
    12a4:	8a 81 71    	ior.w     w3, w10, w3
    12a6:	82 81 71    	ior.w     w3, w2, w3
    12a8:	61 01 64    	and.w     w8, #0x1, w2
    12aa:	89 04 d1    	lsr.w     w9, w9
    12ac:	08 84 d3    	rrc.w     w8, w8
    12ae:	8b 05 e8    	inc.w     w11, w11
    12b0:	17 00 37    	bra       0x12e0 <round>

000012b2 <checknormal>:
    12b2:	09 78 a3    	btst.z    w9, #0x7
    12b4:	13 00 3a    	bra       NZ, 0x12dc <discardguard>

000012b6 <underflow>:
    12b6:	0b 00 e0    	cp0.w     w11
    12b8:	13 00 34    	bra       LE, 0x12e0 <round>
    12ba:	8b 05 e9    	dec.w     w11, w11
    12bc:	08 04 44    	add.w     w8, w8, w8
    12be:	89 84 4c    	addc.w    w9, w9, w9
    12c0:	0a 44 74    	ior.b     w8, w10, w8
    12c2:	09 78 a3    	btst.z    w9, #0x7
    12c4:	0d 00 3a    	bra       NZ, 0x12e0 <round>

000012c6 <normalizeloop>:
    12c6:	0b 00 e0    	cp0.w     w11
    12c8:	07 00 34    	bra       LE, 0x12d8 <normalizeexit>
    12ca:	8b 05 e9    	dec.w     w11, w11
    12cc:	08 04 44    	add.w     w8, w8, w8
    12ce:	89 84 4c    	addc.w    w9, w9, w9
    12d0:	01 00 3a    	bra       NZ, 0x12d4 <normalizetest>
    12d2:	0b 00 20    	mov.w     #0x0, w11

000012d4 <normalizetest>:
    12d4:	09 78 a3    	btst.z    w9, #0x7
    12d6:	f7 ff 32    	bra       Z, 0x12c6 <normalizeloop>

000012d8 <normalizeexit>:
    12d8:	00 01 eb    	clr.w     w2
    12da:	02 00 37    	bra       0x12e0 <round>

000012dc <discardguard>:
    12dc:	82 81 71    	ior.w     w3, w2, w3
    12de:	0a 01 78    	mov.w     w10, w2

000012e0 <round>:
    12e0:	6c 00 07    	rcall     0x13ba <__fpack>

000012e2 <signoff>:
    12e2:	0c f0 a7    	btsc.w    w12, #0xf
    12e4:	01 f0 a0    	bset.w    w1, #0xf
    12e6:	b5 00 37    	bra       0x1452 <__fbopExit>

000012e8 <aisinfinite>:
    12e8:	64 20 e1    	cp.w      w4, #0x4
    12ea:	02 00 3a    	bra       NZ, 0x12f0 <return8>
    12ec:	83 8f 6c    	xor.w     w9, w3, [w15]
    12ee:	b5 00 33    	bra       N, 0x145a <__fbopReturnNaN>

000012f0 <return8>:
    12f0:	08 01 be    	mov.d     w8, w2

000012f2 <return2>:
    12f2:	02 00 be    	mov.d     w2, w0
    12f4:	ae 00 37    	bra       0x1452 <__fbopExit>

000012f6 <___divsf3>:
    12f6:	88 9f be    	mov.d     w8, [w15++]
    12f8:	8a 9f be    	mov.d     w10, [w15++]
    12fa:	8c 1f 78    	mov.w     w12, [w15++]
    12fc:	99 00 07    	rcall     0x1430 <__funpack2>
    12fe:	a0 00 33    	bra       N, 0x1440 <__fPropagateNaN>
    1300:	03 86 6c    	xor.w     w9, w3, w12
    1302:	64 50 e1    	cp.w      w10, #0x4
    1304:	2e 00 32    	bra       Z, 0x1362 <aisinfinite>
    1306:	64 20 e1    	cp.w      w4, #0x4
    1308:	33 00 32    	bra       Z, 0x1370 <returnZero>
    130a:	61 50 e1    	cp.w      w10, #0x1
    130c:	2f 00 32    	bra       Z, 0x136c <aiszero>
    130e:	61 20 e1    	cp.w      w4, #0x1
    1310:	31 00 32    	bra       Z, 0x1374 <returnInf>

00001312 <finitenonzero>:
    1312:	85 85 55    	sub.w     w11, w5, w11
    1314:	eb 07 b0    	add.w     #0x7e, w11
    1316:	09 00 20    	mov.w     #0x0, w9
    1318:	08 04 20    	mov.w     #0x40, w8
    131a:	05 00 37    	bra       0x1326 <diventry>

0000131c <divnext>:
    131c:	08 04 44    	add.w     w8, w8, w8
    131e:	89 84 4c    	addc.w    w9, w9, w9
    1320:	0a 00 31    	bra       C, 0x1336 <divdone> <formsticky>

00001322 <divloop>:
    1322:	06 03 43    	add.w     w6, w6, w6
    1324:	87 83 4b    	addc.w    w7, w7, w7

00001326 <diventry>:
    1326:	00 01 53    	sub.w     w6, w0, w2
    1328:	81 81 5b    	subb.w    w7, w1, w3
    132a:	f8 ff 33    	bra       N, 0x131c <divnext>
    132c:	02 03 be    	mov.d     w2, w6
    132e:	08 00 a0    	bset.w    w8, #0x0
    1330:	08 04 44    	add.w     w8, w8, w8
    1332:	89 84 4c    	addc.w    w9, w9, w9
    1334:	f6 ff 39    	bra       NC, 0x1322 <divloop>

00001336 <divdone>:
    1336:	c6 39 dd    	sl.w      w7, #0x6, w3
    1338:	83 01 73    	ior.w     w6, w3, w3
    133a:	01 00 32    	bra       Z, 0x133e <stickyok>
    133c:	13 00 20    	mov.w     #0x1, w3

0000133e <stickyok>:
    133e:	89 04 d1    	lsr.w     w9, w9
    1340:	08 84 d3    	rrc.w     w8, w8
    1342:	09 98 a3    	btst.z    w9, #0x9
    1344:	05 00 32    	bra       Z, 0x1350 <guardused>
    1346:	08 00 a7    	btsc.w    w8, #0x0
    1348:	03 00 a0    	bset.w    w3, #0x0
    134a:	89 04 d1    	lsr.w     w9, w9
    134c:	08 84 d3    	rrc.w     w8, w8
    134e:	8b 05 e8    	inc.w     w11, w11

00001350 <guardused>:
    1350:	89 04 d1    	lsr.w     w9, w9
    1352:	08 84 d3    	rrc.w     w8, w8
    1354:	00 01 eb    	clr.w     w2
    1356:	02 81 d2    	rlc.w     w2, w2
    1358:	30 00 07    	rcall     0x13ba <__fpack>

0000135a <return0>:
    135a:	01 f0 a1    	bclr.w    w1, #0xf
    135c:	0c f0 a7    	btsc.w    w12, #0xf
    135e:	01 f0 a0    	bset.w    w1, #0xf
    1360:	78 00 37    	bra       0x1452 <__fbopExit>

00001362 <aisinfinite>:
    1362:	64 20 e1    	cp.w      w4, #0x4
    1364:	7a 00 32    	bra       Z, 0x145a <__fbopReturnNaN>

00001366 <return8>:
    1366:	08 01 be    	mov.d     w8, w2

00001368 <return2>:
    1368:	02 00 be    	mov.d     w2, w0
    136a:	f7 ff 37    	bra       0x135a <return0>

0000136c <aiszero>:
    136c:	61 20 e1    	cp.w      w4, #0x1
    136e:	75 00 32    	bra       Z, 0x145a <__fbopReturnNaN>

00001370 <returnZero>:
    1370:	60 00 b8    	mul.uu    w0, #0x0, w0
    1372:	f3 ff 37    	bra       0x135a <return0>

00001374 <returnInf>:
    1374:	00 00 20    	mov.w     #0x0, w0
    1376:	01 f8 27    	mov.w     #0x7f80, w1
    1378:	f0 ff 37    	bra       0x135a <return0>

0000137a <___eqsf2>:
    137a:	14 00 20    	mov.w     #0x1, w4
    137c:	b8 00 37    	bra       0x14ee <__fcompare>

0000137e <___fixunssfsi>:
    137e:	00 01 be    	mov.d     w0, w2
    1380:	42 00 07    	rcall     0x1406 <__funpack>
    1382:	04 70 a7    	btsc.w    w4, #0x7
    1384:	03 f0 a1    	bclr.w    w3, #0xf
    1386:	03 f8 a3    	btst.z    w3, #0xf
    1388:	13 00 3a    	bra       NZ, 0x13b0 <returnzero>
    138a:	65 09 b1    	sub.w     #0x96, w5
    138c:	10 00 32    	bra       Z, 0x13ae <exit>
    138e:	09 00 35    	bra       LT, 0x13a2 <shiftright>
    1390:	69 28 e1    	cp.w      w5, #0x9
    1392:	02 00 35    	bra       LT, 0x1398 <shiftleft>
    1394:	01 00 28    	mov.w     #0x8000, w1
    1396:	00 00 05    	retlw.w   #0x0, w0

00001398 <shiftleft>:
    1398:	00 00 40    	add.w     w0, w0, w0
    139a:	81 80 48    	addc.w    w1, w1, w1
    139c:	85 02 e9    	dec.w     w5, w5
    139e:	fc ff 3a    	bra       NZ, 0x1398 <shiftleft>
    13a0:	00 00 06    	return    

000013a2 <shiftright>:
    13a2:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13a4:	05 00 35    	bra       LT, 0x13b0 <returnzero>

000013a6 <shiftrightloop>:
    13a6:	81 00 d1    	lsr.w     w1, w1
    13a8:	00 80 d3    	rrc.w     w0, w0
    13aa:	85 02 e8    	inc.w     w5, w5
    13ac:	fc ff 3a    	bra       NZ, 0x13a6 <shiftrightloop>

000013ae <exit>:
    13ae:	00 00 06    	return    

000013b0 <returnzero>:
    13b0:	80 00 eb    	clr.w     w1
    13b2:	00 00 05    	retlw.w   #0x0, w0

000013b4 <___floatsisf>:
    13b4:	4f 89 de    	asr.w     w1, #0xf, w2
    13b6:	82 01 78    	mov.w     w2, w3
    13b8:	b5 00 37    	bra       0x1524 <___floatdisf>

000013ba <__fpack>:
    13ba:	81 00 20    	mov.w     #0x8, w1
    13bc:	61 80 55    	sub.w     w11, #0x1, w0
    13be:	0b 00 3d    	bra       GE, 0x13d6 <notsubnormal>
    13c0:	0b 00 20    	mov.w     #0x0, w11
    13c2:	61 fe 2f    	mov.w     #0xffe6, w1
    13c4:	01 00 e1    	cp.w      w0, w1
    13c6:	1d 00 34    	bra       LE, 0x1402 <zerosig>

000013c8 <subnormal>:
    13c8:	82 81 71    	ior.w     w3, w2, w3
    13ca:	61 01 64    	and.w     w8, #0x1, w2
    13cc:	89 04 d1    	lsr.w     w9, w9
    13ce:	08 84 d3    	rrc.w     w8, w8
    13d0:	00 00 e8    	inc.w     w0, w0
    13d2:	fa ff 3a    	bra       NZ, 0x13c8 <subnormal>
    13d4:	71 00 20    	mov.w     #0x7, w1

000013d6 <notsubnormal>:
    13d6:	61 00 64    	and.w     w8, #0x1, w0
    13d8:	03 00 70    	ior.w     w0, w3, w0
    13da:	02 00 60    	and.w     w0, w2, w0
    13dc:	09 00 32    	bra       Z, 0x13f0 <packupandgo>
    13de:	61 04 44    	add.w     w8, #0x1, w8
    13e0:	e0 84 4c    	addc.w    w9, #0x0, w9
    13e2:	09 88 a5    	btst.z    w9, w1
    13e4:	05 00 32    	bra       Z, 0x13f0 <packupandgo>
    13e6:	8b 05 e8    	inc.w     w11, w11
    13e8:	68 08 e1    	cp.w      w1, #0x8
    13ea:	02 00 3a    	bra       NZ, 0x13f0 <packupandgo>
    13ec:	89 04 d1    	lsr.w     w9, w9
    13ee:	08 84 d3    	rrc.w     w8, w8

000013f0 <packupandgo>:
    13f0:	f2 0f 20    	mov.w     #0xff, w2
    13f2:	02 58 e1    	cp.w      w11, w2
    13f4:	05 00 3d    	bra       GE, 0x1400 <overflow>
    13f6:	c7 5d dd    	sl.w      w11, #0x7, w11
    13f8:	f9 07 b2    	and.w     #0x7f, w9
    13fa:	89 80 75    	ior.w     w11, w9, w1
    13fc:	08 00 78    	mov.w     w8, w0
    13fe:	00 00 06    	return    

00001400 <overflow>:
    1400:	0b f8 27    	mov.w     #0x7f80, w11

00001402 <zerosig>:
    1402:	8b 00 78    	mov.w     w11, w1
    1404:	00 00 05    	retlw.w   #0x0, w0

00001406 <__funpack>:
    1406:	c7 0a de    	lsr.w     w1, #0x7, w5
    1408:	f1 07 b2    	and.w     #0x7f, w1
    140a:	f5 0f b2    	and.w     #0xff, w5
    140c:	08 00 32    	bra       Z, 0x141e <zeroorsub>
    140e:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1410:	02 00 32    	bra       Z, 0x1416 <nanorinf>

00001412 <finitereturn>:
    1412:	01 70 a0    	bset.w    w1, #0x7
    1414:	24 00 05    	retlw.w   #0x2, w4

00001416 <nanorinf>:
    1416:	81 0f 70    	ior.w     w0, w1, [w15]
    1418:	01 00 32    	bra       Z, 0x141c <infinite>
    141a:	04 08 05    	retlw.w   #0x80, w4

0000141c <infinite>:
    141c:	44 00 05    	retlw.w   #0x4, w4

0000141e <zeroorsub>:
    141e:	81 0f 70    	ior.w     w0, w1, [w15]
    1420:	02 00 3a    	bra       NZ, 0x1426 <subnormal>
    1422:	14 00 05    	retlw.w   #0x1, w4

00001424 <normalize>:
    1424:	85 02 e9    	dec.w     w5, w5

00001426 <subnormal>:
    1426:	00 00 40    	add.w     w0, w0, w0
    1428:	81 c0 48    	addc.b    w1, w1, w1
    142a:	fc ff 3b    	bra       NN, 0x1424 <normalize>
    142c:	01 70 a0    	bset.w    w1, #0x7
    142e:	24 00 05    	retlw.w   #0x2, w4

00001430 <__funpack2>:
    1430:	00 04 be    	mov.d     w0, w8
    1432:	e9 ff 07    	rcall     0x1406 <__funpack>
    1434:	00 03 be    	mov.d     w0, w6
    1436:	04 05 be    	mov.d     w4, w10
    1438:	02 00 be    	mov.d     w2, w0
    143a:	e5 ff 07    	rcall     0x1406 <__funpack>
    143c:	84 4f 75    	ior.b     w10, w4, [w15]
    143e:	00 00 06    	return    

00001440 <__fPropagateNaN>:
    1440:	02 00 be    	mov.d     w2, w0
    1442:	64 50 e1    	cp.w      w10, #0x4
    1444:	05 00 36    	bra       LEU, 0x1450 <return0>
    1446:	64 20 e1    	cp.w      w4, #0x4
    1448:	02 00 36    	bra       LEU, 0x144e <return8>
    144a:	09 68 a3    	btst.z    w9, #0x6
    144c:	01 00 3a    	bra       NZ, 0x1450 <return0>

0000144e <return8>:
    144e:	08 00 be    	mov.d     w8, w0

00001450 <return0>:
    1450:	01 60 a0    	bset.w    w1, #0x6

00001452 <__fbopExit>:
    1452:	4f 06 78    	mov.w     [--w15], w12
    1454:	4f 05 be    	mov.d     [--w15], w10
    1456:	4f 04 be    	mov.d     [--w15], w8
    1458:	00 00 06    	return    

0000145a <__fbopReturnNaN>:
    145a:	f0 ff 2f    	mov.w     #0xffff, w0
    145c:	f1 ff 27    	mov.w     #0x7fff, w1
    145e:	f9 ff 37    	bra       0x1452 <__fbopExit>

00001460 <___mulsf3>:
    1460:	88 9f be    	mov.d     w8, [w15++]
    1462:	8a 9f be    	mov.d     w10, [w15++]
    1464:	8c 1f 78    	mov.w     w12, [w15++]
    1466:	e4 ff 07    	rcall     0x1430 <__funpack2>
    1468:	eb ff 33    	bra       N, 0x1440 <__fPropagateNaN>
    146a:	03 86 6c    	xor.w     w9, w3, w12
    146c:	64 50 e1    	cp.w      w10, #0x4
    146e:	24 00 32    	bra       Z, 0x14b8 <aisinfinite>
    1470:	64 20 e1    	cp.w      w4, #0x4
    1472:	27 00 32    	bra       Z, 0x14c2 <bisinfinite>
    1474:	61 50 e1    	cp.w      w10, #0x1
    1476:	22 00 32    	bra       Z, 0x14bc <return8>
    1478:	61 20 e1    	cp.w      w4, #0x1
    147a:	21 00 32    	bra       Z, 0x14be <return2>
    147c:	8b 85 42    	add.w     w5, w11, w11
    147e:	eb 07 b1    	sub.w     #0x7e, w11
    1480:	01 34 b8    	mul.uu    w6, w1, w8
    1482:	00 3a b8    	mul.uu    w7, w0, w4
    1484:	08 04 42    	add.w     w4, w8, w8
    1486:	89 84 4a    	addc.w    w5, w9, w9
    1488:	01 3a b8    	mul.uu    w7, w1, w4
    148a:	00 30 b8    	mul.uu    w6, w0, w0
    148c:	88 80 40    	add.w     w1, w8, w1
    148e:	09 01 4a    	addc.w    w4, w9, w2
    1490:	04 00 33    	bra       N, 0x149a <formsticky>
    1492:	00 00 40    	add.w     w0, w0, w0
    1494:	81 80 48    	addc.w    w1, w1, w1
    1496:	02 01 49    	addc.w    w2, w2, w2
    1498:	8b 05 e9    	dec.w     w11, w11

0000149a <formsticky>:
    149a:	c9 09 dd    	sl.w      w1, #0x9, w3
    149c:	83 01 70    	ior.w     w0, w3, w3
    149e:	01 00 32    	bra       Z, 0x14a2 <formRandSig>
    14a0:	13 00 20    	mov.w     #0x1, w3

000014a2 <formRandSig>:
    14a2:	c8 14 de    	lsr.w     w2, #0x8, w9
    14a4:	48 14 dd    	sl.w      w2, #0x8, w8
    14a6:	47 09 de    	lsr.w     w1, #0x7, w2
    14a8:	12 00 b2    	and.w     #0x1, w2
    14aa:	c8 08 de    	lsr.w     w1, #0x8, w1
    14ac:	08 84 70    	ior.w     w1, w8, w8
    14ae:	85 ff 07    	rcall     0x13ba <__fpack>

000014b0 <return0>:
    14b0:	01 f0 a1    	bclr.w    w1, #0xf
    14b2:	0c f0 a7    	btsc.w    w12, #0xf
    14b4:	01 f0 a0    	bset.w    w1, #0xf
    14b6:	cd ff 37    	bra       0x1452 <__fbopExit>

000014b8 <aisinfinite>:
    14b8:	61 20 e1    	cp.w      w4, #0x1
    14ba:	cf ff 32    	bra       Z, 0x145a <__fbopReturnNaN>

000014bc <return8>:
    14bc:	08 01 be    	mov.d     w8, w2

000014be <return2>:
    14be:	02 00 be    	mov.d     w2, w0
    14c0:	f7 ff 37    	bra       0x14b0 <return0>

000014c2 <bisinfinite>:
    14c2:	61 50 e1    	cp.w      w10, #0x1
    14c4:	fc ff 3a    	bra       NZ, 0x14be <return2>
    14c6:	c9 ff 37    	bra       0x145a <__fbopReturnNaN>

000014c8 <___udivsi3>:
    14c8:	60 22 b8    	mul.uu    w4, #0x0, w4
    14ca:	06 02 20    	mov.w     #0x20, w6

000014cc <nextbit>:
    14cc:	00 00 d0    	sl.w      w0, w0
    14ce:	81 80 d2    	rlc.w     w1, w1
    14d0:	04 82 d2    	rlc.w     w4, w4
    14d2:	85 82 d2    	rlc.w     w5, w5
    14d4:	00 00 a0    	bset.w    w0, #0x0
    14d6:	02 02 52    	sub.w     w4, w2, w4
    14d8:	83 82 5a    	subb.w    w5, w3, w5
    14da:	03 00 31    	bra       C, 0x14e2 <iterate>
    14dc:	02 02 42    	add.w     w4, w2, w4
    14de:	83 82 4a    	addc.w    w5, w3, w5
    14e0:	00 00 a1    	bclr.w    w0, #0x0

000014e2 <iterate>:
    14e2:	06 03 e9    	dec.w     w6, w6
    14e4:	f3 ff 3a    	bra       NZ, 0x14cc <nextbit>
    14e6:	00 00 06    	return    

000014e8 <___umodsi3>:
    14e8:	ef ff 07    	rcall     0x14c8 <___udivsi3>
    14ea:	04 00 be    	mov.d     w4, w0
    14ec:	00 00 06    	return    

000014ee <__fcompare>:
    14ee:	88 9f be    	mov.d     w8, [w15++]
    14f0:	8a 9f be    	mov.d     w10, [w15++]
    14f2:	84 1f 78    	mov.w     w4, [w15++]
    14f4:	9d ff 07    	rcall     0x1430 <__funpack2>
    14f6:	4f 00 78    	mov.w     [--w15], w0
    14f8:	11 00 33    	bra       N, 0x151c <exit>
    14fa:	f0 ff 2f    	mov.w     #0xffff, w0
    14fc:	83 8f 6c    	xor.w     w9, w3, [w15]
    14fe:	06 00 3b    	bra       NN, 0x150c <comparemag>
    1500:	04 05 65    	and.w     w10, w4, w10
    1502:	0a 00 a7    	btsc.w    w10, #0x0
    1504:	08 00 37    	bra       0x1516 <returnEqual>
    1506:	09 f0 a6    	btss.w    w9, #0xf
    1508:	10 00 20    	mov.w     #0x1, w0
    150a:	08 00 37    	bra       0x151c <exit>

0000150c <comparemag>:
    150c:	82 0f 54    	sub.w     w8, w2, [w15]
    150e:	83 8f 5c    	subb.w    w9, w3, [w15]
    1510:	03 00 39    	bra       NC, 0x1518 <adjust>
    1512:	10 00 20    	mov.w     #0x1, w0
    1514:	01 00 3e    	bra       GTU, 0x1518 <adjust>

00001516 <returnEqual>:
    1516:	00 00 20    	mov.w     #0x0, w0

00001518 <adjust>:
    1518:	09 f0 a7    	btsc.w    w9, #0xf
    151a:	00 00 ea    	neg.w     w0, w0

0000151c <exit>:
    151c:	4f 05 be    	mov.d     [--w15], w10
    151e:	4f 04 be    	mov.d     [--w15], w8
    1520:	00 00 e0    	cp0.w     w0
    1522:	00 00 06    	return    

00001524 <___floatdisf>:
    1524:	88 1f 78    	mov.w     w8, [w15++]
    1526:	03 04 78    	mov.w     w3, w8
    1528:	03 00 e0    	cp0.w     w3
    152a:	07 00 3d    	bra       GE, 0x153a <notspecial>

0000152c <negative>:
    152c:	60 00 10    	subr.w    w0, #0x0, w0
    152e:	e0 80 18    	subbr.w   w1, #0x0, w1
    1530:	60 01 19    	subbr.w   w2, #0x0, w2
    1532:	e0 81 19    	subbr.w   w3, #0x0, w3
    1534:	02 00 3b    	bra       NN, 0x153a <notspecial>
    1536:	01 f0 2d    	mov.w     #0xdf00, w1
    1538:	03 00 37    	bra       0x1540 <return0>

0000153a <notspecial>:
    153a:	04 00 07    	rcall     0x1544 <___floatundisf>
    153c:	08 f0 a7    	btsc.w    w8, #0xf
    153e:	01 f0 a0    	bset.w    w1, #0xf

00001540 <return0>:
    1540:	4f 04 78    	mov.w     [--w15], w8
    1542:	00 00 06    	return    

00001544 <___floatundisf>:
    1544:	88 9f be    	mov.d     w8, [w15++]
    1546:	8a 9f be    	mov.d     w10, [w15++]
    1548:	00 82 70    	ior.w     w1, w0, w4
    154a:	04 02 71    	ior.w     w2, w4, w4
    154c:	04 82 71    	ior.w     w3, w4, w4
    154e:	26 00 32    	bra       Z, 0x159c <return0>
    1550:	00 04 be    	mov.d     w0, w8
    1552:	02 00 be    	mov.d     w2, w0
    1554:	60 11 b8    	mul.uu    w2, #0x0, w2
    1556:	6b 09 20    	mov.w     #0x96, w11
    1558:	95 02 20    	mov.w     #0x29, w5
    155a:	01 82 cf    	ff1l      w1, w4
    155c:	0a 00 39    	bra       NC, 0x1572 <fixshift>
    155e:	05 41 b1    	sub.b     #0x10, w5
    1560:	00 82 cf    	ff1l      w0, w4
    1562:	07 00 39    	bra       NC, 0x1572 <fixshift>
    1564:	05 41 b1    	sub.b     #0x10, w5
    1566:	09 82 cf    	ff1l      w9, w4
    1568:	04 00 39    	bra       NC, 0x1572 <fixshift>
    156a:	05 41 b1    	sub.b     #0x10, w5
    156c:	08 82 cf    	ff1l      w8, w4
    156e:	01 00 39    	bra       NC, 0x1572 <fixshift>
    1570:	05 41 b1    	sub.b     #0x10, w5

00001572 <fixshift>:
    1572:	05 42 52    	sub.b     w4, w5, w4
    1574:	12 00 32    	bra       Z, 0x159a <round>
    1576:	0a 00 3b    	bra       NN, 0x158c <shiftleft>

00001578 <shiftright>:
    1578:	82 81 71    	ior.w     w3, w2, w3
    157a:	61 01 64    	and.w     w8, #0x1, w2
    157c:	81 00 d1    	lsr.w     w1, w1
    157e:	00 80 d3    	rrc.w     w0, w0
    1580:	89 84 d3    	rrc.w     w9, w9
    1582:	08 84 d3    	rrc.w     w8, w8
    1584:	8b 05 e8    	inc.w     w11, w11
    1586:	04 42 e8    	inc.b     w4, w4
    1588:	f7 ff 3a    	bra       NZ, 0x1578 <shiftright>
    158a:	07 00 37    	bra       0x159a <round>

0000158c <shiftleft>:
    158c:	08 04 44    	add.w     w8, w8, w8
    158e:	89 84 4c    	addc.w    w9, w9, w9
    1590:	00 00 48    	addc.w    w0, w0, w0
    1592:	81 80 48    	addc.w    w1, w1, w1
    1594:	8b 05 e9    	dec.w     w11, w11
    1596:	04 42 e9    	dec.b     w4, w4
    1598:	f9 ff 3a    	bra       NZ, 0x158c <shiftleft>

0000159a <round>:
    159a:	0f ff 07    	rcall     0x13ba <__fpack>

0000159c <return0>:
    159c:	4f 05 be    	mov.d     [--w15], w10
    159e:	4f 04 be    	mov.d     [--w15], w8
    15a0:	00 00 06    	return    

000015a2 <_prout>:
    15a2:	88 1f 78    	mov.w     w8, [w15++]
    15a4:	02 04 78    	mov.w     w2, w8
    15a6:	08 01 78    	mov.w     w8, w2
    15a8:	c4 00 07    	rcall     0x1732 <_memcpy>
    15aa:	08 00 40    	add.w     w0, w8, w0
    15ac:	4f 04 78    	mov.w     [--w15], w8
    15ae:	00 00 06    	return    

000015b0 <__sprintf_cdnopuxX>:
    15b0:	00 00 fa    	lnk       #0x0
    15b2:	88 1f 78    	mov.w     w8, [w15++]
    15b4:	00 04 78    	mov.w     w0, w8
    15b6:	ea 81 57    	sub.w     w15, #0xa, w3
    15b8:	3f b9 97    	mov.w     [w15-10], w2
    15ba:	88 00 78    	mov.w     w8, w1
    15bc:	20 5a 21    	mov.w     #0x15a2, w0
    15be:	07 00 07    	rcall     0x15ce <___Printf_cdnopuxX>
    15c0:	00 00 e0    	cp0.w     w0
    15c2:	02 00 35    	bra       LT, 0x15c8 <.L3>
    15c4:	80 40 eb    	clr.b     w1
    15c6:	01 74 78    	mov.b     w1, [w8+w0]

000015c8 <.L3>:
    15c8:	4f 04 78    	mov.w     [--w15], w8
    15ca:	00 80 fa    	ulnk      
    15cc:	00 00 06    	return    

000015ce <___Printf_cdnopuxX>:
    15ce:	62 00 fa    	lnk       #0x62
    15d0:	88 9f be    	mov.d     w8, [w15++]
    15d2:	8a 1f 78    	mov.w     w10, [w15++]
    15d4:	00 05 78    	mov.w     w0, w10
    15d6:	81 04 78    	mov.w     w1, w9
    15d8:	02 04 78    	mov.w     w2, w8
    15da:	83 00 78    	mov.w     w3, w1
    15dc:	80 f9 2f    	mov.w     #0xff98, w0
    15de:	0f 00 40    	add.w     w0, w15, w0
    15e0:	77 01 07    	rcall     0x18d0 <__Vacopy>
    15e2:	9a 97 9f    	mov.w     w10, [w15-94]
    15e4:	a9 97 9f    	mov.w     w9, [w15-92]
    15e6:	00 00 eb    	clr.w     w0
    15e8:	b0 9f 9f    	mov.w     w0, [w15-74]

000015ea <.L31>:
    15ea:	18 85 fb    	ze        [w8], w10
    15ec:	8a 04 fb    	se        w10, w9
    15ee:	0a 05 ea    	neg.w     w10, w10
    15f0:	4f 55 de    	lsr.w     w10, #0xf, w10
    15f2:	50 02 20    	mov.w     #0x25, w0
    15f4:	80 8f 54    	sub.w     w9, w0, [w15]
    15f6:	0d 00 32    	bra       Z, 0x1612 <.L3>
    15f8:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    15fa:	0b 00 3a    	bra       NZ, 0x1612 <.L3>
    15fc:	0a 01 78    	mov.w     w10, w2
    15fe:	88 00 78    	mov.w     w8, w1
    1600:	2f 90 97    	mov.w     [w15-92], w0
    1602:	9f 91 97    	mov.w     [w15-94], w3
    1604:	03 00 01    	call      w3
    1606:	a0 97 9f    	mov.w     w0, [w15-92]
    1608:	00 00 e0    	cp0.w     w0
    160a:	8e 00 32    	bra       Z, 0x1728 <.L27>
    160c:	3f 98 97    	mov.w     [w15-74], w0
    160e:	00 00 e8    	inc.w     w0, w0
    1610:	b0 9f 9f    	mov.w     w0, [w15-74]

00001612 <.L3>:
    1612:	0a 04 44    	add.w     w8, w10, w8
    1614:	50 02 20    	mov.w     #0x25, w0
    1616:	80 8f 54    	sub.w     w9, w0, [w15]
    1618:	04 00 32    	bra       Z, 0x1622 <.L5>
    161a:	09 00 e0    	cp0.w     w9
    161c:	e6 ff 3a    	bra       NZ, 0x15ea <.L31>
    161e:	3f 98 97    	mov.w     [w15-74], w0
    1620:	84 00 37    	bra       0x172a <.L4>

00001622 <.L5>:
    1622:	00 00 eb    	clr.w     w0
    1624:	90 9f 9f    	mov.w     w0, [w15-78]
    1626:	80 9f 9f    	mov.w     w0, [w15-80]
    1628:	f0 97 9f    	mov.w     w0, [w15-82]
    162a:	e0 97 9f    	mov.w     w0, [w15-84]
    162c:	d0 97 9f    	mov.w     w0, [w15-86]
    162e:	c0 97 9f    	mov.w     w0, [w15-88]
    1630:	07 00 37    	bra       0x1640 <.L34>

00001632 <.L8>:
    1632:	41 10 21    	mov.w     #0x1104, w1
    1634:	01 00 50    	sub.w     w0, w1, w0
    1636:	00 00 40    	add.w     w0, w0, w0
    1638:	81 0f 21    	mov.w     #0x10f8, w1
    163a:	61 00 78    	mov.w     [w1+w0], w0
    163c:	df 98 97    	mov.w     [w15-70], w1
    163e:	01 00 70    	ior.w     w0, w1, w0

00001640 <.L34>:
    1640:	d0 9f 9f    	mov.w     w0, [w15-70]
    1642:	88 04 78    	mov.w     w8, w9
    1644:	09 04 78    	mov.w     w9, w8
    1646:	38 45 78    	mov.b     [w8++], w10
    1648:	8a 00 fb    	se        w10, w1
    164a:	40 10 21    	mov.w     #0x1104, w0
    164c:	79 00 07    	rcall     0x1740 <_strchr>
    164e:	00 00 e0    	cp0.w     w0
    1650:	f0 ff 3a    	bra       NZ, 0x1632 <.L8>
    1652:	a1 c2 b3    	mov.b     #0x2a, w1
    1654:	81 4f 55    	sub.b     w10, w1, [w15]
    1656:	0e 00 3a    	bra       NZ, 0x1674 <.L9>
    1658:	cf 88 97    	mov.w     [w15-104], w1
    165a:	01 80 e9    	dec2.w    w1, w0
    165c:	c0 8f 9f    	mov.w     w0, [w15-104]
    165e:	10 00 78    	mov.w     [w0], w0
    1660:	c0 9f 9f    	mov.w     w0, [w15-72]
    1662:	00 00 e0    	cp0.w     w0
    1664:	05 00 3d    	bra       GE, 0x1670 <.L10>
    1666:	00 00 ea    	neg.w     w0, w0
    1668:	c0 9f 9f    	mov.w     w0, [w15-72]
    166a:	5f 98 97    	mov.w     [w15-70], w0
    166c:	00 20 a0    	bset.w    w0, #0x2
    166e:	d0 9f 9f    	mov.w     w0, [w15-70]

00001670 <.L10>:
    1670:	09 04 e8    	inc.w     w9, w8
    1672:	0f 00 37    	bra       0x1692 <.L11>

00001674 <.L9>:
    1674:	c0 9f 9f    	mov.w     w0, [w15-72]
    1676:	00 00 eb    	clr.w     w0
    1678:	05 00 37    	bra       0x1684 <.L32>

0000167a <.L14>:
    167a:	f2 ff 27    	mov.w     #0x7fff, w2
    167c:	82 0f 50    	sub.w     w0, w2, [w15]
    167e:	02 00 32    	bra       Z, 0x1684 <.L32>
    1680:	6a 01 b9    	mul.su    w0, #0xa, w2
    1682:	02 80 40    	add.w     w1, w2, w0

00001684 <.L32>:
    1684:	09 04 78    	mov.w     w9, w8
    1686:	88 04 78    	mov.w     w8, w9
    1688:	b9 00 fb    	se        [w9++], w1
    168a:	01 03 b1    	sub.w     #0x30, w1
    168c:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    168e:	f5 ff 36    	bra       LEU, 0x167a <.L14>
    1690:	c0 9f 9f    	mov.w     w0, [w15-72]

00001692 <.L11>:
    1692:	e0 c2 b3    	mov.b     #0x2e, w0
    1694:	98 4f 10    	subr.b    w0, [w8], [w15]
    1696:	02 00 32    	bra       Z, 0x169c <.L15>
    1698:	00 80 eb    	setm.w    w0
    169a:	19 00 37    	bra       0x16ce <.L35>

0000169c <.L15>:
    169c:	a0 c2 b3    	mov.b     #0x2a, w0
    169e:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    16a0:	07 00 3a    	bra       NZ, 0x16b0 <.L17>
    16a2:	cf 88 97    	mov.w     [w15-104], w1
    16a4:	01 80 e9    	dec2.w    w1, w0
    16a6:	c0 8f 9f    	mov.w     w0, [w15-104]
    16a8:	10 00 78    	mov.w     [w0], w0
    16aa:	a0 9f 9f    	mov.w     w0, [w15-76]
    16ac:	08 04 e8    	inc.w     w8, w8
    16ae:	10 00 37    	bra       0x16d0 <.L16>

000016b0 <.L17>:
    16b0:	00 00 eb    	clr.w     w0
    16b2:	a0 9f 9f    	mov.w     w0, [w15-76]
    16b4:	88 00 78    	mov.w     w8, w1
    16b6:	05 00 37    	bra       0x16c2 <.L33>

000016b8 <.L20>:
    16b8:	f3 ff 27    	mov.w     #0x7fff, w3
    16ba:	83 0f 50    	sub.w     w0, w3, [w15]
    16bc:	02 00 32    	bra       Z, 0x16c2 <.L33>
    16be:	6a 02 b9    	mul.su    w0, #0xa, w4
    16c0:	04 00 41    	add.w     w2, w4, w0

000016c2 <.L33>:
    16c2:	01 04 78    	mov.w     w1, w8
    16c4:	88 00 78    	mov.w     w8, w1
    16c6:	31 01 fb    	se        [w1++], w2
    16c8:	02 03 b1    	sub.w     #0x30, w2
    16ca:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    16cc:	f5 ff 36    	bra       LEU, 0x16b8 <.L20>

000016ce <.L35>:
    16ce:	a0 9f 9f    	mov.w     w0, [w15-76]

000016d0 <.L16>:
    16d0:	98 44 78    	mov.b     [w8], w9
    16d2:	89 00 fb    	se        w9, w1
    16d4:	00 0f 21    	mov.w     #0x10f0, w0
    16d6:	34 00 07    	rcall     0x1740 <_strchr>
    16d8:	00 00 e0    	cp0.w     w0
    16da:	02 00 32    	bra       Z, 0x16e0 <.L25>
    16dc:	08 04 e8    	inc.w     w8, w8
    16de:	01 00 37    	bra       0x16e2 <.L21>

000016e0 <.L25>:
    16e0:	80 44 eb    	clr.b     w9

000016e2 <.L21>:
    16e2:	c9 7f 9f    	mov.b     w9, [w15-68]
    16e4:	80 c6 b3    	mov.b     #0x68, w0
    16e6:	80 cf 54    	sub.b     w9, w0, [w15]
    16e8:	04 00 3a    	bra       NZ, 0x16f2 <.L22>
    16ea:	98 cf 14    	subr.b    w9, [w8], [w15]
    16ec:	0a 00 3a    	bra       NZ, 0x1702 <.L23>
    16ee:	66 40 50    	sub.b     w0, #0x6, w0
    16f0:	06 00 37    	bra       0x16fe <.L36>

000016f2 <.L22>:
    16f2:	c0 c6 b3    	mov.b     #0x6c, w0
    16f4:	80 cf 54    	sub.b     w9, w0, [w15]
    16f6:	05 00 3a    	bra       NZ, 0x1702 <.L23>
    16f8:	98 cf 14    	subr.b    w9, [w8], [w15]
    16fa:	03 00 3a    	bra       NZ, 0x1702 <.L23>
    16fc:	65 40 40    	add.b     w0, #0x5, w0

000016fe <.L36>:
    16fe:	c0 7f 9f    	mov.b     w0, [w15-68]
    1700:	08 04 e8    	inc.w     w8, w8

00001702 <.L23>:
    1702:	18 01 fb    	se        [w8], w2
    1704:	e3 fb 2f    	mov.w     #0xffbe, w3
    1706:	8f 81 41    	add.w     w3, w15, w3
    1708:	81 f9 2f    	mov.w     #0xff98, w1
    170a:	8f 80 40    	add.w     w1, w15, w1
    170c:	a0 f9 2f    	mov.w     #0xff9a, w0
    170e:	0f 00 40    	add.w     w0, w15, w0
    1710:	e1 00 07    	rcall     0x18d4 <___Putfld_cdnopuxX>
    1712:	00 00 e0    	cp0.w     w0
    1714:	09 00 3a    	bra       NZ, 0x1728 <.L27>
    1716:	e1 fb 2f    	mov.w     #0xffbe, w1
    1718:	8f 80 40    	add.w     w1, w15, w1
    171a:	a0 f9 2f    	mov.w     #0xff9a, w0
    171c:	0f 00 40    	add.w     w0, w15, w0
    171e:	1c 00 07    	rcall     0x1758 <__Puttxt>
    1720:	00 00 e0    	cp0.w     w0
    1722:	02 00 35    	bra       LT, 0x1728 <.L27>
    1724:	08 04 e8    	inc.w     w8, w8
    1726:	61 ff 37    	bra       0x15ea <.L31>

00001728 <.L27>:
    1728:	00 80 eb    	setm.w    w0

0000172a <.L4>:
    172a:	4f 05 78    	mov.w     [--w15], w10
    172c:	4f 04 be    	mov.d     [--w15], w8
    172e:	00 80 fa    	ulnk      
    1730:	00 00 06    	return    

00001732 <_memcpy>:
    1732:	80 01 78    	mov.w     w0, w3
    1734:	02 00 37    	bra       0x173a <.L2>

00001736 <.L3>:
    1736:	b1 59 78    	mov.b     [w1++], [w3++]
    1738:	02 01 e9    	dec.w     w2, w2

0000173a <.L2>:
    173a:	02 00 e0    	cp0.w     w2
    173c:	fc ff 3a    	bra       NZ, 0x1736 <.L3>
    173e:	00 00 06    	return    

00001740 <_strchr>:
    1740:	02 00 37    	bra       0x1746 <.L2>

00001742 <.L4>:
    1742:	03 04 e0    	cp0.b     w3
    1744:	06 00 32    	bra       Z, 0x1752 <.L5>

00001746 <.L2>:
    1746:	00 01 78    	mov.w     w0, w2
    1748:	02 00 78    	mov.w     w2, w0
    174a:	b0 41 78    	mov.b     [w0++], w3
    174c:	81 cf 51    	sub.b     w3, w1, [w15]
    174e:	f9 ff 3a    	bra       NZ, 0x1742 <.L4>
    1750:	01 00 37    	bra       0x1754 <.L3>

00001752 <.L5>:
    1752:	00 01 eb    	clr.w     w2

00001754 <.L3>:
    1754:	02 00 78    	mov.w     w2, w0
    1756:	00 00 06    	return    

00001758 <__Puttxt>:
    1758:	04 00 fa    	lnk       #0x4
    175a:	88 9f be    	mov.d     w8, [w15++]
    175c:	8a 9f be    	mov.d     w10, [w15++]
    175e:	8c 1f 78    	mov.w     w12, [w15++]
    1760:	00 04 78    	mov.w     w0, w8
    1762:	01 06 78    	mov.w     w1, w12
    1764:	f8 0d 90    	mov.w     [w8+30], w11
    1766:	78 00 90    	mov.w     [w8+14], w0
    1768:	80 85 55    	sub.w     w11, w0, w11
    176a:	08 08 90    	mov.w     [w8+16], w0
    176c:	80 85 55    	sub.w     w11, w0, w11
    176e:	18 08 90    	mov.w     [w8+18], w0
    1770:	80 85 55    	sub.w     w11, w0, w11
    1772:	28 08 90    	mov.w     [w8+20], w0
    1774:	80 85 55    	sub.w     w11, w0, w11
    1776:	38 08 90    	mov.w     [w8+22], w0
    1778:	80 85 55    	sub.w     w11, w0, w11
    177a:	48 08 90    	mov.w     [w8+24], w0
    177c:	80 85 55    	sub.w     w11, w0, w11
    177e:	00 02 22    	mov.w     #0x2020, w0
    1780:	90 bf 9f    	mov.w     w0, [w15-14]
    1782:	00 03 23    	mov.w     #0x3030, w0
    1784:	a0 bf 9f    	mov.w     w0, [w15-12]
    1786:	08 10 90    	mov.w     [w8+32], w0
    1788:	00 28 a3    	btst.z    w0, #0x2
    178a:	15 00 3a    	bra       NZ, 0x17b6 <.L2>
    178c:	0b 00 e0    	cp0.w     w11
    178e:	13 00 34    	bra       LE, 0x17b6 <.L2>
    1790:	0b 05 78    	mov.w     w11, w10

00001792 <.L5>:
    1792:	8a 04 78    	mov.w     w10, w9
    1794:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    1796:	01 00 36    	bra       LEU, 0x179a <.L3>
    1798:	29 00 20    	mov.w     #0x2, w9

0000179a <.L3>:
    179a:	c8 01 90    	mov.w     [w8+8], w3
    179c:	09 01 78    	mov.w     w9, w2
    179e:	ee 80 57    	sub.w     w15, #0xe, w1
    17a0:	58 00 90    	mov.w     [w8+10], w0
    17a2:	03 00 01    	call      w3
    17a4:	50 04 98    	mov.w     w0, [w8+10]
    17a6:	00 00 e0    	cp0.w     w0
    17a8:	8c 00 32    	bra       Z, 0x18c2 <.L29>
    17aa:	68 08 90    	mov.w     [w8+28], w0
    17ac:	09 00 40    	add.w     w0, w9, w0
    17ae:	60 0c 98    	mov.w     w0, [w8+28]
    17b0:	09 05 55    	sub.w     w10, w9, w10
    17b2:	42 40 a9    	bclr.b    0x42, #0x2
    17b4:	ee ff 3c    	bra       GT, 0x1792 <.L5>

000017b6 <.L2>:
    17b6:	78 01 90    	mov.w     [w8+14], w2
    17b8:	02 00 e0    	cp0.w     w2
    17ba:	0c 00 34    	bra       LE, 0x17d4 <.L6>
    17bc:	c8 01 90    	mov.w     [w8+8], w3
    17be:	8c 00 78    	mov.w     w12, w1
    17c0:	58 00 90    	mov.w     [w8+10], w0
    17c2:	03 00 01    	call      w3
    17c4:	50 04 98    	mov.w     w0, [w8+10]
    17c6:	80 80 eb    	setm.w    w1
    17c8:	00 00 e0    	cp0.w     w0
    17ca:	7c 00 32    	bra       Z, 0x18c4 <.L4>
    17cc:	e8 08 90    	mov.w     [w8+28], w1
    17ce:	78 00 90    	mov.w     [w8+14], w0
    17d0:	00 80 40    	add.w     w1, w0, w0
    17d2:	60 0c 98    	mov.w     w0, [w8+28]

000017d4 <.L6>:
    17d4:	88 0c 90    	mov.w     [w8+16], w9

000017d6 <.L30>:
    17d6:	09 00 e0    	cp0.w     w9
    17d8:	11 00 34    	bra       LE, 0x17fc <.L7>
    17da:	09 05 78    	mov.w     w9, w10
    17dc:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    17de:	01 00 36    	bra       LEU, 0x17e2 <.L8>
    17e0:	2a 00 20    	mov.w     #0x2, w10

000017e2 <.L8>:
    17e2:	c8 01 90    	mov.w     [w8+8], w3
    17e4:	0a 01 78    	mov.w     w10, w2
    17e6:	ec 80 57    	sub.w     w15, #0xc, w1
    17e8:	58 00 90    	mov.w     [w8+10], w0
    17ea:	03 00 01    	call      w3
    17ec:	50 04 98    	mov.w     w0, [w8+10]
    17ee:	00 00 e0    	cp0.w     w0
    17f0:	68 00 32    	bra       Z, 0x18c2 <.L29>
    17f2:	68 08 90    	mov.w     [w8+28], w0
    17f4:	0a 00 40    	add.w     w0, w10, w0
    17f6:	60 0c 98    	mov.w     w0, [w8+28]
    17f8:	8a 84 54    	sub.w     w9, w10, w9
    17fa:	ed ff 37    	bra       0x17d6 <.L30>

000017fc <.L7>:
    17fc:	18 09 90    	mov.w     [w8+18], w2
    17fe:	02 00 e0    	cp0.w     w2
    1800:	0c 00 34    	bra       LE, 0x181a <.L10>
    1802:	c8 01 90    	mov.w     [w8+8], w3
    1804:	e8 00 90    	mov.w     [w8+12], w1
    1806:	58 00 90    	mov.w     [w8+10], w0
    1808:	03 00 01    	call      w3
    180a:	50 04 98    	mov.w     w0, [w8+10]
    180c:	80 80 eb    	setm.w    w1
    180e:	00 00 e0    	cp0.w     w0
    1810:	59 00 32    	bra       Z, 0x18c4 <.L4>
    1812:	e8 08 90    	mov.w     [w8+28], w1
    1814:	18 08 90    	mov.w     [w8+18], w0
    1816:	00 80 40    	add.w     w1, w0, w0
    1818:	60 0c 98    	mov.w     w0, [w8+28]

0000181a <.L10>:
    181a:	a8 0c 90    	mov.w     [w8+20], w9

0000181c <.L31>:
    181c:	09 00 e0    	cp0.w     w9
    181e:	11 00 34    	bra       LE, 0x1842 <.L11>
    1820:	09 05 78    	mov.w     w9, w10
    1822:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1824:	01 00 36    	bra       LEU, 0x1828 <.L12>
    1826:	2a 00 20    	mov.w     #0x2, w10

00001828 <.L12>:
    1828:	c8 01 90    	mov.w     [w8+8], w3
    182a:	0a 01 78    	mov.w     w10, w2
    182c:	ec 80 57    	sub.w     w15, #0xc, w1
    182e:	58 00 90    	mov.w     [w8+10], w0
    1830:	03 00 01    	call      w3
    1832:	50 04 98    	mov.w     w0, [w8+10]
    1834:	00 00 e0    	cp0.w     w0
    1836:	45 00 32    	bra       Z, 0x18c2 <.L29>
    1838:	68 08 90    	mov.w     [w8+28], w0
    183a:	0a 00 40    	add.w     w0, w10, w0
    183c:	60 0c 98    	mov.w     w0, [w8+28]
    183e:	8a 84 54    	sub.w     w9, w10, w9
    1840:	ed ff 37    	bra       0x181c <.L31>

00001842 <.L11>:
    1842:	38 09 90    	mov.w     [w8+22], w2
    1844:	02 00 e0    	cp0.w     w2
    1846:	0e 00 34    	bra       LE, 0x1864 <.L14>
    1848:	e8 00 90    	mov.w     [w8+12], w1
    184a:	18 08 90    	mov.w     [w8+18], w0
    184c:	80 80 40    	add.w     w1, w0, w1
    184e:	c8 01 90    	mov.w     [w8+8], w3
    1850:	58 00 90    	mov.w     [w8+10], w0
    1852:	03 00 01    	call      w3
    1854:	50 04 98    	mov.w     w0, [w8+10]
    1856:	80 80 eb    	setm.w    w1
    1858:	00 00 e0    	cp0.w     w0
    185a:	34 00 32    	bra       Z, 0x18c4 <.L4>
    185c:	e8 08 90    	mov.w     [w8+28], w1
    185e:	38 08 90    	mov.w     [w8+22], w0
    1860:	00 80 40    	add.w     w1, w0, w0
    1862:	60 0c 98    	mov.w     w0, [w8+28]

00001864 <.L14>:
    1864:	c8 0c 90    	mov.w     [w8+24], w9

00001866 <.L32>:
    1866:	09 00 e0    	cp0.w     w9
    1868:	11 00 34    	bra       LE, 0x188c <.L15>
    186a:	09 05 78    	mov.w     w9, w10
    186c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    186e:	01 00 36    	bra       LEU, 0x1872 <.L16>
    1870:	2a 00 20    	mov.w     #0x2, w10

00001872 <.L16>:
    1872:	c8 01 90    	mov.w     [w8+8], w3
    1874:	0a 01 78    	mov.w     w10, w2
    1876:	ec 80 57    	sub.w     w15, #0xc, w1
    1878:	58 00 90    	mov.w     [w8+10], w0
    187a:	03 00 01    	call      w3
    187c:	50 04 98    	mov.w     w0, [w8+10]
    187e:	00 00 e0    	cp0.w     w0
    1880:	20 00 32    	bra       Z, 0x18c2 <.L29>
    1882:	68 08 90    	mov.w     [w8+28], w0
    1884:	0a 00 40    	add.w     w0, w10, w0
    1886:	60 0c 98    	mov.w     w0, [w8+28]
    1888:	8a 84 54    	sub.w     w9, w10, w9
    188a:	ed ff 37    	bra       0x1866 <.L32>

0000188c <.L15>:
    188c:	08 10 90    	mov.w     [w8+32], w0
    188e:	80 00 eb    	clr.w     w1
    1890:	00 28 a3    	btst.z    w0, #0x2
    1892:	18 00 32    	bra       Z, 0x18c4 <.L4>
    1894:	0b 00 e0    	cp0.w     w11
    1896:	16 00 34    	bra       LE, 0x18c4 <.L4>
    1898:	8b 04 78    	mov.w     w11, w9

0000189a <.L19>:
    189a:	09 05 78    	mov.w     w9, w10
    189c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    189e:	01 00 36    	bra       LEU, 0x18a2 <.L18>
    18a0:	2a 00 20    	mov.w     #0x2, w10

000018a2 <.L18>:
    18a2:	c8 01 90    	mov.w     [w8+8], w3
    18a4:	0a 01 78    	mov.w     w10, w2
    18a6:	ee 80 57    	sub.w     w15, #0xe, w1
    18a8:	58 00 90    	mov.w     [w8+10], w0
    18aa:	03 00 01    	call      w3
    18ac:	50 04 98    	mov.w     w0, [w8+10]
    18ae:	00 00 e0    	cp0.w     w0
    18b0:	08 00 32    	bra       Z, 0x18c2 <.L29>
    18b2:	68 08 90    	mov.w     [w8+28], w0
    18b4:	0a 00 40    	add.w     w0, w10, w0
    18b6:	60 0c 98    	mov.w     w0, [w8+28]
    18b8:	8a 84 54    	sub.w     w9, w10, w9
    18ba:	42 40 a9    	bclr.b    0x42, #0x2
    18bc:	ee ff 3c    	bra       GT, 0x189a <.L19>
    18be:	80 00 eb    	clr.w     w1
    18c0:	01 00 37    	bra       0x18c4 <.L4>

000018c2 <.L29>:
    18c2:	80 80 eb    	setm.w    w1

000018c4 <.L4>:
    18c4:	01 00 78    	mov.w     w1, w0
    18c6:	4f 06 78    	mov.w     [--w15], w12
    18c8:	4f 05 be    	mov.d     [--w15], w10
    18ca:	4f 04 be    	mov.d     [--w15], w8
    18cc:	00 80 fa    	ulnk      
    18ce:	00 00 06    	return    

000018d0 <__Vacopy>:
    18d0:	01 08 78    	mov.w     w1, [w0]
    18d2:	00 00 06    	return    

000018d4 <___Putfld_cdnopuxX>:
    18d4:	88 9f be    	mov.d     w8, [w15++]
    18d6:	8a 9f be    	mov.d     w10, [w15++]
    18d8:	e4 c6 b3    	mov.b     #0x6e, w4
    18da:	84 4f 51    	sub.b     w2, w4, [w15]
    18dc:	be 00 32    	bra       Z, 0x1a5a <.L7>
    18de:	10 00 3c    	bra       GT, 0x1900 <.L9>
    18e0:	6b 42 52    	sub.b     w4, #0xb, w4
    18e2:	84 4f 51    	sub.b     w2, w4, [w15]
    18e4:	18 00 32    	bra       Z, 0x1916 <.L5>
    18e6:	05 00 3c    	bra       GT, 0x18f2 <.L10>
    18e8:	54 c2 b3    	mov.b     #0x25, w4
    18ea:	84 4f 51    	sub.b     w2, w4, [w15]
    18ec:	f6 00 32    	bra       Z, 0x1ada <.L3>
    18ee:	84 c5 b3    	mov.b     #0x58, w4
    18f0:	0f 00 37    	bra       0x1910 <.L47>

000018f2 <.L10>:
    18f2:	44 c6 b3    	mov.b     #0x64, w4
    18f4:	84 4f 51    	sub.b     w2, w4, [w15]
    18f6:	14 00 32    	bra       Z, 0x1920 <.L6>
    18f8:	65 42 42    	add.b     w4, #0x5, w4
    18fa:	84 4f 51    	sub.b     w2, w4, [w15]
    18fc:	f1 00 3a    	bra       NZ, 0x1ae0 <.L2>
    18fe:	10 00 37    	bra       0x1920 <.L6>

00001900 <.L9>:
    1900:	04 c7 b3    	mov.b     #0x70, w4
    1902:	84 4f 51    	sub.b     w2, w4, [w15]
    1904:	dd 00 32    	bra       Z, 0x1ac0 <.L8>
    1906:	56 00 35    	bra       LT, 0x19b4 <.L4>
    1908:	65 42 42    	add.b     w4, #0x5, w4
    190a:	84 4f 51    	sub.b     w2, w4, [w15]
    190c:	53 00 32    	bra       Z, 0x19b4 <.L4>
    190e:	63 42 42    	add.b     w4, #0x3, w4

00001910 <.L47>:
    1910:	84 4f 51    	sub.b     w2, w4, [w15]
    1912:	e6 00 3a    	bra       NZ, 0x1ae0 <.L2>
    1914:	4f 00 37    	bra       0x19b4 <.L4>

00001916 <.L5>:
    1916:	11 81 e9    	dec2.w    [w1], w2
    1918:	82 08 78    	mov.w     w2, [w1]
    191a:	f0 00 90    	mov.w     [w0+14], w1
    191c:	12 41 78    	mov.b     [w2], w2
    191e:	de 00 37    	bra       0x1adc <.L53>

00001920 <.L6>:
    1920:	20 62 90    	mov.b     [w0+34], w4
    1922:	c5 c6 b3    	mov.b     #0x6c, w5
    1924:	85 4f 52    	sub.b     w4, w5, [w15]
    1926:	07 00 3a    	bra       NZ, 0x1936 <.L12>
    1928:	91 02 78    	mov.w     [w1], w5
    192a:	64 82 52    	sub.w     w5, #0x4, w4
    192c:	84 08 78    	mov.w     w4, [w1]
    192e:	14 02 be    	mov.d     [w4], w4
    1930:	4f ab de    	asr.w     w5, #0xf, w6
    1932:	86 03 78    	mov.w     w6, w7
    1934:	14 00 37    	bra       0x195e <.L13>

00001936 <.L12>:
    1936:	15 c7 b3    	mov.b     #0x71, w5
    1938:	85 4f 52    	sub.b     w4, w5, [w15]
    193a:	03 00 3a    	bra       NZ, 0x1942 <.L14>
    193c:	11 04 78    	mov.w     [w1], w8
    193e:	68 02 54    	sub.w     w8, #0x8, w4
    1940:	05 00 37    	bra       0x194c <.L43>

00001942 <.L14>:
    1942:	a5 c6 b3    	mov.b     #0x6a, w5
    1944:	85 4f 52    	sub.b     w4, w5, [w15]
    1946:	06 00 3a    	bra       NZ, 0x1954 <.L15>
    1948:	91 04 78    	mov.w     [w1], w9
    194a:	68 82 54    	sub.w     w9, #0x8, w4

0000194c <.L43>:
    194c:	84 08 78    	mov.w     w4, [w1]
    194e:	54 03 be    	mov.d     [++w4], w6
    1950:	44 02 be    	mov.d     [--w4], w4
    1952:	05 00 37    	bra       0x195e <.L13>

00001954 <.L15>:
    1954:	11 82 e9    	dec2.w    [w1], w4
    1956:	84 08 78    	mov.w     w4, [w1]
    1958:	14 02 78    	mov.w     [w4], w4
    195a:	cf a2 de    	asr.w     w4, #0xf, w5
    195c:	61 2b b9    	mul.su    w5, #0x1, w6

0000195e <.L13>:
    195e:	04 98 be    	mov.d     w4, [w0++]
    1960:	06 90 be    	mov.d     w6, [w0--]
    1962:	a0 60 90    	mov.b     [w0+34], w1
    1964:	88 c6 b3    	mov.b     #0x68, w8
    1966:	88 cf 50    	sub.b     w1, w8, [w15]
    1968:	0d 00 32    	bra       Z, 0x1984 <.L19>
    196a:	28 c6 b3    	mov.b     #0x62, w8
    196c:	88 cf 50    	sub.b     w1, w8, [w15]
    196e:	04 00 3a    	bra       NZ, 0x1978 <.L18>
    1970:	04 02 fb    	se        w4, w4
    1972:	cf a2 de    	asr.w     w4, #0xf, w5
    1974:	61 2b b9    	mul.su    w5, #0x1, w6
    1976:	08 00 37    	bra       0x1988 <.L44>

00001978 <.L18>:
    1978:	48 c7 b3    	mov.b     #0x74, w8
    197a:	88 cf 50    	sub.b     w1, w8, [w15]
    197c:	03 00 32    	bra       Z, 0x1984 <.L19>
    197e:	66 44 44    	add.b     w8, #0x6, w8
    1980:	88 cf 50    	sub.b     w1, w8, [w15]
    1982:	04 00 3a    	bra       NZ, 0x198c <.L17>

00001984 <.L19>:
    1984:	cf a2 de    	asr.w     w4, #0xf, w5
    1986:	61 2b b9    	mul.su    w5, #0x1, w6

00001988 <.L44>:
    1988:	04 98 be    	mov.d     w4, [w0++]
    198a:	06 90 be    	mov.d     w6, [w0--]

0000198c <.L17>:
    198c:	30 02 be    	mov.d     [w0++], w4
    198e:	20 03 be    	mov.d     [w0--], w6
    1990:	f0 00 90    	mov.w     [w0+14], w1
    1992:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1994:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1996:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1998:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    199a:	02 00 3d    	bra       GE, 0x19a0 <.L20>
    199c:	d4 c2 b3    	mov.b     #0x2d, w4
    199e:	08 00 37    	bra       0x19b0 <.L45>

000019a0 <.L20>:
    19a0:	00 12 90    	mov.w     [w0+32], w4
    19a2:	04 18 a3    	btst.z    w4, #0x1
    19a4:	02 00 32    	bra       Z, 0x19aa <.L22>
    19a6:	b4 c2 b3    	mov.b     #0x2b, w4
    19a8:	03 00 37    	bra       0x19b0 <.L45>

000019aa <.L22>:
    19aa:	04 08 a3    	btst.z    w4, #0x0
    19ac:	51 00 32    	bra       Z, 0x1a50 <.L31>
    19ae:	04 c2 b3    	mov.b     #0x20, w4

000019b0 <.L45>:
    19b0:	84 f1 78    	mov.b     w4, [w3+w1]
    19b2:	4c 00 37    	bra       0x1a4c <.L54>

000019b4 <.L4>:
    19b4:	20 62 90    	mov.b     [w0+34], w4
    19b6:	c5 c6 b3    	mov.b     #0x6c, w5
    19b8:	85 4f 52    	sub.b     w4, w5, [w15]
    19ba:	08 00 3a    	bra       NZ, 0x19cc <.L23>
    19bc:	11 05 78    	mov.w     [w1], w10
    19be:	64 02 55    	sub.w     w10, #0x4, w4
    19c0:	84 08 78    	mov.w     w4, [w1]
    19c2:	14 04 be    	mov.d     [w4], w8
    19c4:	60 55 b8    	mul.uu    w10, #0x0, w10
    19c6:	08 02 be    	mov.d     w8, w4
    19c8:	0a 03 be    	mov.d     w10, w6
    19ca:	14 00 37    	bra       0x19f4 <.L24>

000019cc <.L23>:
    19cc:	15 c7 b3    	mov.b     #0x71, w5
    19ce:	85 4f 52    	sub.b     w4, w5, [w15]
    19d0:	03 00 3a    	bra       NZ, 0x19d8 <.L25>
    19d2:	91 04 78    	mov.w     [w1], w9
    19d4:	68 82 54    	sub.w     w9, #0x8, w4
    19d6:	05 00 37    	bra       0x19e2 <.L48>

000019d8 <.L25>:
    19d8:	a5 c6 b3    	mov.b     #0x6a, w5
    19da:	85 4f 52    	sub.b     w4, w5, [w15]
    19dc:	06 00 3a    	bra       NZ, 0x19ea <.L26>
    19de:	11 05 78    	mov.w     [w1], w10
    19e0:	68 02 55    	sub.w     w10, #0x8, w4

000019e2 <.L48>:
    19e2:	84 08 78    	mov.w     w4, [w1]
    19e4:	54 03 be    	mov.d     [++w4], w6
    19e6:	44 02 be    	mov.d     [--w4], w4
    19e8:	05 00 37    	bra       0x19f4 <.L24>

000019ea <.L26>:
    19ea:	11 82 e9    	dec2.w    [w1], w4
    19ec:	84 08 78    	mov.w     w4, [w1]
    19ee:	14 02 78    	mov.w     [w4], w4
    19f0:	80 02 eb    	clr.w     w5
    19f2:	60 33 b8    	mul.uu    w6, #0x0, w6

000019f4 <.L24>:
    19f4:	04 98 be    	mov.d     w4, [w0++]
    19f6:	06 90 be    	mov.d     w6, [w0--]
    19f8:	a0 60 90    	mov.b     [w0+34], w1
    19fa:	88 c6 b3    	mov.b     #0x68, w8
    19fc:	88 cf 50    	sub.b     w1, w8, [w15]
    19fe:	0d 00 32    	bra       Z, 0x1a1a <.L30>
    1a00:	28 c6 b3    	mov.b     #0x62, w8
    1a02:	88 cf 50    	sub.b     w1, w8, [w15]
    1a04:	04 00 3a    	bra       NZ, 0x1a0e <.L29>
    1a06:	04 82 fb    	ze        w4, w4
    1a08:	80 02 eb    	clr.w     w5
    1a0a:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a0c:	08 00 37    	bra       0x1a1e <.L49>

00001a0e <.L29>:
    1a0e:	48 c7 b3    	mov.b     #0x74, w8
    1a10:	88 cf 50    	sub.b     w1, w8, [w15]
    1a12:	03 00 32    	bra       Z, 0x1a1a <.L30>
    1a14:	66 44 44    	add.b     w8, #0x6, w8
    1a16:	88 cf 50    	sub.b     w1, w8, [w15]
    1a18:	04 00 3a    	bra       NZ, 0x1a22 <.L28>

00001a1a <.L30>:
    1a1a:	80 02 eb    	clr.w     w5
    1a1c:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a1e <.L49>:
    1a1e:	04 98 be    	mov.d     w4, [w0++]
    1a20:	06 90 be    	mov.d     w6, [w0--]

00001a22 <.L28>:
    1a22:	80 10 90    	mov.w     [w0+32], w1
    1a24:	01 38 a3    	btst.z    w1, #0x3
    1a26:	14 00 32    	bra       Z, 0x1a50 <.L31>
    1a28:	30 02 be    	mov.d     [w0++], w4
    1a2a:	20 03 be    	mov.d     [w0--], w6
    1a2c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a2e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1a30:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a32:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a34:	0d 00 32    	bra       Z, 0x1a50 <.L31>
    1a36:	81 c7 b3    	mov.b     #0x78, w1
    1a38:	81 4f 51    	sub.b     w2, w1, [w15]
    1a3a:	03 00 32    	bra       Z, 0x1a42 <.L32>
    1a3c:	81 c5 b3    	mov.b     #0x58, w1
    1a3e:	81 4f 51    	sub.b     w2, w1, [w15]
    1a40:	07 00 3a    	bra       NZ, 0x1a50 <.L31>

00001a42 <.L32>:
    1a42:	f0 00 90    	mov.w     [w0+14], w1
    1a44:	04 c3 b3    	mov.b     #0x30, w4
    1a46:	84 f1 78    	mov.b     w4, [w3+w1]
    1a48:	81 00 e8    	inc.w     w1, w1
    1a4a:	82 f1 78    	mov.b     w2, [w3+w1]

00001a4c <.L54>:
    1a4c:	81 00 e8    	inc.w     w1, w1
    1a4e:	71 00 98    	mov.w     w1, [w0+14]

00001a50 <.L31>:
    1a50:	f0 00 90    	mov.w     [w0+14], w1
    1a52:	81 81 41    	add.w     w3, w1, w3
    1a54:	63 00 98    	mov.w     w3, [w0+12]
    1a56:	82 40 78    	mov.b     w2, w1
    1a58:	3e 00 37    	bra       0x1ad6 <.L52>

00001a5a <.L7>:
    1a5a:	a0 61 90    	mov.b     [w0+34], w3
    1a5c:	c4 c6 b3    	mov.b     #0x6c, w4
    1a5e:	11 81 e9    	dec2.w    [w1], w2
    1a60:	84 cf 51    	sub.b     w3, w4, [w15]
    1a62:	22 00 32    	bra       Z, 0x1aa8 <.L37>
    1a64:	0a 00 3c    	bra       GT, 0x1a7a <.L41>
    1a66:	64 42 52    	sub.b     w4, #0x4, w4
    1a68:	84 cf 51    	sub.b     w3, w4, [w15]
    1a6a:	25 00 32    	bra       Z, 0x1ab6 <.L51>
    1a6c:	04 c2 e8    	inc2.b    w4, w4
    1a6e:	84 cf 51    	sub.b     w3, w4, [w15]
    1a70:	13 00 32    	bra       Z, 0x1a98 <.L36>
    1a72:	68 42 52    	sub.b     w4, #0x8, w4
    1a74:	84 cf 51    	sub.b     w3, w4, [w15]
    1a76:	1e 00 3a    	bra       NZ, 0x1ab4 <.L33>
    1a78:	0a 00 37    	bra       0x1a8e <.L55>

00001a7a <.L41>:
    1a7a:	44 c7 b3    	mov.b     #0x74, w4
    1a7c:	84 cf 51    	sub.b     w3, w4, [w15]
    1a7e:	1b 00 32    	bra       Z, 0x1ab6 <.L51>
    1a80:	66 42 42    	add.b     w4, #0x6, w4
    1a82:	84 cf 51    	sub.b     w3, w4, [w15]
    1a84:	18 00 32    	bra       Z, 0x1ab6 <.L51>
    1a86:	69 42 52    	sub.b     w4, #0x9, w4
    1a88:	84 cf 51    	sub.b     w3, w4, [w15]
    1a8a:	14 00 3a    	bra       NZ, 0x1ab4 <.L33>
    1a8c:	05 00 37    	bra       0x1a98 <.L36>

00001a8e <.L55>:
    1a8e:	82 08 78    	mov.w     w2, [w1]
    1a90:	92 00 78    	mov.w     [w2], w1
    1a92:	40 58 90    	mov.b     [w0+28], w0
    1a94:	80 48 78    	mov.b     w0, [w1]
    1a96:	2c 00 37    	bra       0x1af0 <.L11>

00001a98 <.L36>:
    1a98:	82 08 78    	mov.w     w2, [w1]
    1a9a:	92 00 78    	mov.w     [w2], w1
    1a9c:	60 0a 90    	mov.w     [w0+28], w4
    1a9e:	cf a2 de    	asr.w     w4, #0xf, w5
    1aa0:	61 2b b9    	mul.su    w5, #0x1, w6
    1aa2:	84 98 be    	mov.d     w4, [w1++]
    1aa4:	86 90 be    	mov.d     w6, [w1--]
    1aa6:	24 00 37    	bra       0x1af0 <.L11>

00001aa8 <.L37>:
    1aa8:	82 08 78    	mov.w     w2, [w1]
    1aaa:	92 00 78    	mov.w     [w2], w1
    1aac:	60 09 90    	mov.w     [w0+28], w2
    1aae:	cf 91 de    	asr.w     w2, #0xf, w3
    1ab0:	82 88 be    	mov.d     w2, [w1]
    1ab2:	1e 00 37    	bra       0x1af0 <.L11>

00001ab4 <.L33>:
    1ab4:	11 81 e9    	dec2.w    [w1], w2

00001ab6 <.L51>:
    1ab6:	82 08 78    	mov.w     w2, [w1]
    1ab8:	92 00 78    	mov.w     [w2], w1
    1aba:	60 08 90    	mov.w     [w0+28], w0
    1abc:	80 08 78    	mov.w     w0, [w1]
    1abe:	18 00 37    	bra       0x1af0 <.L11>

00001ac0 <.L8>:
    1ac0:	11 81 e9    	dec2.w    [w1], w2
    1ac2:	82 08 78    	mov.w     w2, [w1]
    1ac4:	12 02 78    	mov.w     [w2], w4
    1ac6:	cf a2 de    	asr.w     w4, #0xf, w5
    1ac8:	61 2b b9    	mul.su    w5, #0x1, w6
    1aca:	04 98 be    	mov.d     w4, [w0++]
    1acc:	06 90 be    	mov.d     w6, [w0--]
    1ace:	f0 00 90    	mov.w     [w0+14], w1
    1ad0:	81 81 41    	add.w     w3, w1, w3
    1ad2:	63 00 98    	mov.w     w3, [w0+12]
    1ad4:	81 c7 b3    	mov.b     #0x78, w1

00001ad6 <.L52>:
    1ad6:	10 00 07    	rcall     0x1af8 <__Litob>
    1ad8:	0b 00 37    	bra       0x1af0 <.L11>

00001ada <.L3>:
    1ada:	f0 00 90    	mov.w     [w0+14], w1

00001adc <.L53>:
    1adc:	82 f1 78    	mov.b     w2, [w3+w1]
    1ade:	06 00 37    	bra       0x1aec <.L50>

00001ae0 <.L2>:
    1ae0:	f0 00 90    	mov.w     [w0+14], w1
    1ae2:	81 81 41    	add.w     w3, w1, w3
    1ae4:	02 04 e0    	cp0.b     w2
    1ae6:	01 00 3a    	bra       NZ, 0x1aea <.L42>
    1ae8:	52 c2 b3    	mov.b     #0x25, w2

00001aea <.L42>:
    1aea:	82 49 78    	mov.b     w2, [w3]

00001aec <.L50>:
    1aec:	81 00 e8    	inc.w     w1, w1
    1aee:	71 00 98    	mov.w     w1, [w0+14]

00001af0 <.L11>:
    1af0:	00 00 eb    	clr.w     w0
    1af2:	4f 05 be    	mov.d     [--w15], w10
    1af4:	4f 04 be    	mov.d     [--w15], w8
    1af6:	00 00 06    	return    

00001af8 <__Litob>:
    1af8:	fc 87 47    	add.w     w15, #0x1c, w15
    1afa:	88 9f be    	mov.d     w8, [w15++]
    1afc:	8a 9f be    	mov.d     w10, [w15++]
    1afe:	8c 9f be    	mov.d     w12, [w15++]
    1b00:	8e 1f 78    	mov.w     w14, [w15++]
    1b02:	00 06 78    	mov.w     w0, w12
    1b04:	80 c5 b3    	mov.b     #0x58, w0
    1b06:	80 cf 50    	sub.b     w1, w0, [w15]
    1b08:	0a 00 32    	bra       Z, 0x1b1e <.L35>
    1b0a:	77 40 40    	add.b     w0, #0x17, w0
    1b0c:	80 cf 50    	sub.b     w1, w0, [w15]
    1b0e:	0a 00 32    	bra       Z, 0x1b24 <.L36>
    1b10:	69 40 40    	add.b     w0, #0x9, w0
    1b12:	80 cf 50    	sub.b     w1, w0, [w15]
    1b14:	0b 00 32    	bra       Z, 0x1b2c <.L37>
    1b16:	f0 0d 21    	mov.w     #0x10df, w0
    1b18:	80 bf 9f    	mov.w     w0, [w15-16]
    1b1a:	ae 00 20    	mov.w     #0xa, w14
    1b1c:	0a 00 37    	bra       0x1b32 <.L2>

00001b1e <.L35>:
    1b1e:	e2 0c 21    	mov.w     #0x10ce, w2
    1b20:	82 bf 9f    	mov.w     w2, [w15-16]
    1b22:	06 00 37    	bra       0x1b30 <.L46>

00001b24 <.L36>:
    1b24:	f3 0d 21    	mov.w     #0x10df, w3
    1b26:	83 bf 9f    	mov.w     w3, [w15-16]
    1b28:	8e 00 20    	mov.w     #0x8, w14
    1b2a:	03 00 37    	bra       0x1b32 <.L2>

00001b2c <.L37>:
    1b2c:	f4 0d 21    	mov.w     #0x10df, w4
    1b2e:	84 bf 9f    	mov.w     w4, [w15-16]

00001b30 <.L46>:
    1b30:	0e 01 20    	mov.w     #0x10, w14

00001b32 <.L2>:
    1b32:	3c 02 be    	mov.d     [w12++], w4
    1b34:	2c 03 be    	mov.d     [w12--], w6
    1b36:	06 05 be    	mov.d     w6, w10
    1b38:	04 04 be    	mov.d     w4, w8
    1b3a:	40 c6 b3    	mov.b     #0x64, w0
    1b3c:	80 cf 50    	sub.b     w1, w0, [w15]
    1b3e:	03 00 32    	bra       Z, 0x1b46 <.L3>
    1b40:	65 40 40    	add.b     w0, #0x5, w0
    1b42:	80 cf 50    	sub.b     w1, w0, [w15]
    1b44:	0b 00 3a    	bra       NZ, 0x1b5c <.L4>

00001b46 <.L3>:
    1b46:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b48:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1b4a:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1b4c:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1b4e:	06 00 3d    	bra       GE, 0x1b5c <.L4>
    1b50:	60 00 b8    	mul.uu    w0, #0x0, w0
    1b52:	60 11 b8    	mul.uu    w2, #0x0, w2
    1b54:	04 04 50    	sub.w     w0, w4, w8
    1b56:	85 84 58    	subb.w    w1, w5, w9
    1b58:	06 05 59    	subb.w    w2, w6, w10
    1b5a:	87 85 59    	subb.w    w3, w7, w11

00001b5c <.L4>:
    1b5c:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1b5e:	04 00 32    	bra       Z, 0x1b68 <.L38>
    1b60:	40 00 20    	mov.w     #0x4, w0
    1b62:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1b64:	38 00 3a    	bra       NZ, 0x1bd6 <.L51>
    1b66:	01 00 37    	bra       0x1b6a <.L6>

00001b68 <.L38>:
    1b68:	30 00 20    	mov.w     #0x3, w0

00001b6a <.L6>:
    1b6a:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1b6c:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1b6e:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1b70:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1b72:	04 00 3a    	bra       NZ, 0x1b7c <.L8>
    1b74:	dc 08 90    	mov.w     [w12+26], w1
    1b76:	8d 01 20    	mov.w     #0x18, w13
    1b78:	01 00 e0    	cp0.w     w1
    1b7a:	06 00 32    	bra       Z, 0x1b88 <.L9>

00001b7c <.L8>:
    1b7c:	8e 00 e9    	dec.w     w14, w1
    1b7e:	88 80 60    	and.w     w1, w8, w1
    1b80:	8f ba 97    	mov.w     [w15-16], w5
    1b82:	e5 c0 78    	mov.b     [w5+w1], w1
    1b84:	f1 ef 9f    	mov.b     w1, [w15-17]
    1b86:	7d 01 20    	mov.w     #0x17, w13

00001b88 <.L9>:
    1b88:	80 00 78    	mov.w     w0, w1

00001b8a <.LB101>:
    1b8a:	81 00 e9    	dec.w     w1, w1
    1b8c:	05 00 33    	bra       N, 0x1b98 <.LE101>
    1b8e:	8b 05 d1    	lsr.w     w11, w11
    1b90:	0a 85 d3    	rrc.w     w10, w10
    1b92:	89 84 d3    	rrc.w     w9, w9
    1b94:	08 84 d3    	rrc.w     w8, w8
    1b96:	f9 ff 37    	bra       0x1b8a <.LB101>

00001b98 <.LE101>:
    1b98:	08 9e be    	mov.d     w8, [w12++]
    1b9a:	0a 96 be    	mov.d     w10, [w12--]
    1b9c:	12 00 37    	bra       0x1bc2 <.L10>

00001b9e <.L12>:
    1b9e:	8d 06 e9    	dec.w     w13, w13
    1ba0:	8e 00 e9    	dec.w     w14, w1
    1ba2:	84 80 60    	and.w     w1, w4, w1
    1ba4:	0f b9 97    	mov.w     [w15-16], w2
    1ba6:	e2 c1 78    	mov.b     [w2+w1], w3
    1ba8:	82 fd 2f    	mov.w     #0xffd8, w2
    1baa:	0f 01 41    	add.w     w2, w15, w2
    1bac:	03 f1 7e    	mov.b     w3, [w2+w13]
    1bae:	80 00 78    	mov.w     w0, w1

00001bb0 <.LB115>:
    1bb0:	81 00 e9    	dec.w     w1, w1
    1bb2:	05 00 33    	bra       N, 0x1bbe <.LE115>
    1bb4:	87 83 d1    	asr.w     w7, w7
    1bb6:	06 83 d3    	rrc.w     w6, w6
    1bb8:	85 82 d3    	rrc.w     w5, w5
    1bba:	04 82 d3    	rrc.w     w4, w4
    1bbc:	f9 ff 37    	bra       0x1bb0 <.LB115>

00001bbe <.LE115>:
    1bbe:	04 9e be    	mov.d     w4, [w12++]
    1bc0:	06 96 be    	mov.d     w6, [w12--]

00001bc2 <.L10>:
    1bc2:	3c 02 be    	mov.d     [w12++], w4
    1bc4:	2c 03 be    	mov.d     [w12--], w6
    1bc6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1bc8:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1bca:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1bcc:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1bce:	8b 00 34    	bra       LE, 0x1ce6 <.L11>
    1bd0:	0d 00 e0    	cp0.w     w13
    1bd2:	e5 ff 3c    	bra       GT, 0x1b9e <.L12>
    1bd4:	88 00 37    	bra       0x1ce6 <.L11>

00001bd6 <.L51>:
    1bd6:	2c 60 90    	mov.b     [w12+34], w0
    1bd8:	81 c6 b3    	mov.b     #0x68, w1
    1bda:	81 4f 50    	sub.b     w0, w1, [w15]
    1bdc:	0b 00 32    	bra       Z, 0x1bf4 <.L14>
    1bde:	06 00 3c    	bra       GT, 0x1bec <.L16>
    1be0:	00 04 e0    	cp0.b     w0
    1be2:	08 00 32    	bra       Z, 0x1bf4 <.L14>
    1be4:	e6 c0 50    	sub.b     w1, #0x6, w1
    1be6:	81 4f 50    	sub.b     w0, w1, [w15]
    1be8:	4e 00 3a    	bra       NZ, 0x1c86 <.L13>
    1bea:	04 00 37    	bra       0x1bf4 <.L14>

00001bec <.L16>:
    1bec:	c1 c6 b3    	mov.b     #0x6c, w1
    1bee:	81 4f 50    	sub.b     w0, w1, [w15]
    1bf0:	4a 00 3a    	bra       NZ, 0x1c86 <.L13>
    1bf2:	21 00 37    	bra       0x1c36 <.L52>

00001bf4 <.L14>:
    1bf4:	08 00 e0    	cp0.w     w8
    1bf6:	04 00 3a    	bra       NZ, 0x1c00 <.L17>
    1bf8:	5c 08 90    	mov.w     [w12+26], w0
    1bfa:	8d 01 20    	mov.w     #0x18, w13
    1bfc:	00 00 e0    	cp0.w     w0
    1bfe:	06 00 32    	bra       Z, 0x1c0c <.L18>

00001c00 <.L17>:
    1c00:	11 00 09    	repeat    #0x11
    1c02:	0e 84 d8    	div.uw    w8, w14
    1c04:	0f b9 97    	mov.w     [w15-16], w2
    1c06:	e2 c0 78    	mov.b     [w2+w1], w1
    1c08:	f1 ef 9f    	mov.b     w1, [w15-17]
    1c0a:	7d 01 20    	mov.w     #0x17, w13

00001c0c <.L18>:
    1c0c:	11 00 09    	repeat    #0x11
    1c0e:	0e 84 d8    	div.uw    w8, w14
    1c10:	0a 00 37    	bra       0x1c26 <.L47>

00001c12 <.L21>:
    1c12:	11 00 09    	repeat    #0x11
    1c14:	0e 04 d8    	div.sw    w8, w14
    1c16:	8d 06 e9    	dec.w     w13, w13
    1c18:	0e 81 b9    	mul.ss    w0, w14, w2
    1c1a:	02 04 54    	sub.w     w8, w2, w8
    1c1c:	8f b8 97    	mov.w     [w15-16], w1
    1c1e:	61 41 7c    	mov.b     [w1+w8], w2
    1c20:	81 fd 2f    	mov.w     #0xffd8, w1
    1c22:	8f 80 40    	add.w     w1, w15, w1
    1c24:	82 f0 7e    	mov.b     w2, [w1+w13]

00001c26 <.L47>:
    1c26:	00 04 78    	mov.w     w0, w8
    1c28:	08 00 e0    	cp0.w     w8
    1c2a:	02 00 32    	bra       Z, 0x1c30 <.L20>
    1c2c:	0d 00 e0    	cp0.w     w13
    1c2e:	f1 ff 3c    	bra       GT, 0x1c12 <.L21>

00001c30 <.L20>:
    1c30:	cf c4 de    	asr.w     w8, #0xf, w9
    1c32:	61 4d b9    	mul.su    w9, #0x1, w10
    1c34:	25 00 37    	bra       0x1c80 <.L50>

00001c36 <.L52>:
    1c36:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c38:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c3a:	04 00 3a    	bra       NZ, 0x1c44 <.L22>
    1c3c:	5c 08 90    	mov.w     [w12+26], w0
    1c3e:	8d 01 20    	mov.w     #0x18, w13
    1c40:	00 00 e0    	cp0.w     w0
    1c42:	07 00 32    	bra       Z, 0x1c52 <.L23>

00001c44 <.L22>:
    1c44:	61 71 b9    	mul.su    w14, #0x1, w2
    1c46:	08 00 be    	mov.d     w8, w0
    1c48:	4f fc 07    	rcall     0x14e8 <___umodsi3>
    1c4a:	8f b9 97    	mov.w     [w15-16], w3
    1c4c:	e3 41 78    	mov.b     [w3+w0], w3
    1c4e:	f3 ef 9f    	mov.b     w3, [w15-17]
    1c50:	7d 01 20    	mov.w     #0x17, w13

00001c52 <.L23>:
    1c52:	61 71 b9    	mul.su    w14, #0x1, w2
    1c54:	08 00 be    	mov.d     w8, w0
    1c56:	38 fc 07    	rcall     0x14c8 <___udivsi3>
    1c58:	0b 00 37    	bra       0x1c70 <.L48>

00001c5a <.L26>:
    1c5a:	61 71 b9    	mul.su    w14, #0x1, w2
    1c5c:	08 00 be    	mov.d     w8, w0
    1c5e:	7b 00 07    	rcall     0x1d56 <___divsi3>
    1c60:	8d 06 e9    	dec.w     w13, w13
    1c62:	00 f1 b9    	mul.ss    w14, w0, w2
    1c64:	02 04 54    	sub.w     w8, w2, w8
    1c66:	0f ba 97    	mov.w     [w15-16], w4
    1c68:	e4 42 7c    	mov.b     [w4+w8], w5
    1c6a:	84 fd 2f    	mov.w     #0xffd8, w4
    1c6c:	0f 02 42    	add.w     w4, w15, w4
    1c6e:	05 f2 7e    	mov.b     w5, [w4+w13]

00001c70 <.L48>:
    1c70:	00 04 be    	mov.d     w0, w8
    1c72:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1c74:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1c76:	02 00 32    	bra       Z, 0x1c7c <.L25>
    1c78:	0d 00 e0    	cp0.w     w13
    1c7a:	ef ff 3c    	bra       GT, 0x1c5a <.L26>

00001c7c <.L25>:
    1c7c:	4f cd de    	asr.w     w9, #0xf, w10
    1c7e:	8a 05 78    	mov.w     w10, w11

00001c80 <.L50>:
    1c80:	08 9e be    	mov.d     w8, [w12++]
    1c82:	0a 96 be    	mov.d     w10, [w12--]
    1c84:	30 00 37    	bra       0x1ce6 <.L11>

00001c86 <.L13>:
    1c86:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c88:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c8a:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1c8c:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1c8e:	04 00 3a    	bra       NZ, 0x1c98 <.L27>
    1c90:	5c 08 90    	mov.w     [w12+26], w0
    1c92:	8d 01 20    	mov.w     #0x18, w13
    1c94:	00 00 e0    	cp0.w     w0
    1c96:	09 00 32    	bra       Z, 0x1caa <.L28>

00001c98 <.L27>:
    1c98:	61 72 b9    	mul.su    w14, #0x1, w4
    1c9a:	61 2b b9    	mul.su    w5, #0x1, w6
    1c9c:	08 00 be    	mov.d     w8, w0
    1c9e:	0a 01 be    	mov.d     w10, w2
    1ca0:	09 01 07    	rcall     0x1eb4 <___umoddi3>
    1ca2:	0f ba 97    	mov.w     [w15-16], w4
    1ca4:	64 42 78    	mov.b     [w4+w0], w4
    1ca6:	f4 ef 9f    	mov.b     w4, [w15-17]
    1ca8:	7d 01 20    	mov.w     #0x17, w13

00001caa <.L28>:
    1caa:	61 72 b9    	mul.su    w14, #0x1, w4
    1cac:	61 2b b9    	mul.su    w5, #0x1, w6
    1cae:	08 00 be    	mov.d     w8, w0
    1cb0:	0a 01 be    	mov.d     w10, w2
    1cb2:	f9 00 07    	rcall     0x1ea6 <___udivdi3>
    1cb4:	0d 00 37    	bra       0x1cd0 <.L49>

00001cb6 <.L30>:
    1cb6:	61 72 b9    	mul.su    w14, #0x1, w4
    1cb8:	61 2b b9    	mul.su    w5, #0x1, w6
    1cba:	08 00 be    	mov.d     w8, w0
    1cbc:	0a 01 be    	mov.d     w10, w2
    1cbe:	fe 00 07    	rcall     0x1ebc <___divdi3>
    1cc0:	8d 06 e9    	dec.w     w13, w13
    1cc2:	00 f2 b9    	mul.ss    w14, w0, w4
    1cc4:	04 04 54    	sub.w     w8, w4, w8
    1cc6:	8f ba 97    	mov.w     [w15-16], w5
    1cc8:	65 42 7c    	mov.b     [w5+w8], w4
    1cca:	85 fd 2f    	mov.w     #0xffd8, w5
    1ccc:	8f 82 42    	add.w     w5, w15, w5
    1cce:	84 f2 7e    	mov.b     w4, [w5+w13]

00001cd0 <.L49>:
    1cd0:	00 9e be    	mov.d     w0, [w12++]
    1cd2:	02 96 be    	mov.d     w2, [w12--]
    1cd4:	3c 04 be    	mov.d     [w12++], w8
    1cd6:	2c 05 be    	mov.d     [w12--], w10
    1cd8:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1cda:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1cdc:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1cde:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1ce0:	02 00 34    	bra       LE, 0x1ce6 <.L11>
    1ce2:	0d 00 e0    	cp0.w     w13
    1ce4:	e8 ff 3c    	bra       GT, 0x1cb6 <.L30>

00001ce6 <.L11>:
    1ce6:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1ce8:	10 00 3a    	bra       NZ, 0x1d0a <.L31>
    1cea:	0c 10 90    	mov.w     [w12+32], w0
    1cec:	00 38 a3    	btst.z    w0, #0x3
    1cee:	0d 00 32    	bra       Z, 0x1d0a <.L31>
    1cf0:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    1cf2:	06 00 3e    	bra       GTU, 0x1d00 <.L32>
    1cf4:	85 fd 2f    	mov.w     #0xffd8, w5
    1cf6:	8f 82 42    	add.w     w5, w15, w5
    1cf8:	e5 c0 7e    	mov.b     [w5+w13], w1
    1cfa:	00 c3 b3    	mov.b     #0x30, w0
    1cfc:	80 cf 50    	sub.b     w1, w0, [w15]
    1cfe:	05 00 32    	bra       Z, 0x1d0a <.L31>

00001d00 <.L32>:
    1d00:	8d 06 e9    	dec.w     w13, w13
    1d02:	02 c3 b3    	mov.b     #0x30, w2
    1d04:	81 fd 2f    	mov.w     #0xffd8, w1
    1d06:	8f 80 40    	add.w     w1, w15, w1
    1d08:	82 f0 7e    	mov.b     w2, [w1+w13]

00001d0a <.L31>:
    1d0a:	78 81 16    	subr.w    w13, #0x18, w2
    1d0c:	12 0e 98    	mov.w     w2, [w12+18]
    1d0e:	6c 00 90    	mov.w     [w12+12], w0
    1d10:	83 fd 2f    	mov.w     #0xffd8, w3
    1d12:	8f 81 41    	add.w     w3, w15, w3
    1d14:	8d 80 41    	add.w     w3, w13, w1
    1d16:	0d fd 07    	rcall     0x1732 <_memcpy>
    1d18:	1c 08 90    	mov.w     [w12+18], w0
    1d1a:	dc 08 90    	mov.w     [w12+26], w1
    1d1c:	81 0f 50    	sub.w     w0, w1, [w15]
    1d1e:	06 00 3d    	bra       GE, 0x1d2c <.L33>
    1d20:	00 80 50    	sub.w     w1, w0, w0
    1d22:	00 0e 98    	mov.w     w0, [w12+16]
    1d24:	0c 10 90    	mov.w     [w12+32], w0
    1d26:	00 40 a1    	bclr.w    w0, #0x4
    1d28:	00 16 98    	mov.w     w0, [w12+32]
    1d2a:	0f 00 37    	bra       0x1d4a <.L1>

00001d2c <.L33>:
    1d2c:	01 00 e0    	cp0.w     w1
    1d2e:	0d 00 3d    	bra       GE, 0x1d4a <.L1>
    1d30:	8c 10 90    	mov.w     [w12+32], w1
    1d32:	f4 80 60    	and.w     w1, #0x14, w1
    1d34:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    1d36:	09 00 3a    	bra       NZ, 0x1d4a <.L1>
    1d38:	7c 09 90    	mov.w     [w12+30], w2
    1d3a:	fc 00 90    	mov.w     [w12+14], w1
    1d3c:	81 00 51    	sub.w     w2, w1, w1
    1d3e:	0c 09 90    	mov.w     [w12+16], w2
    1d40:	82 80 50    	sub.w     w1, w2, w1
    1d42:	00 80 50    	sub.w     w1, w0, w0
    1d44:	42 40 a9    	bclr.b    0x42, #0x2
    1d46:	01 00 34    	bra       LE, 0x1d4a <.L1>
    1d48:	00 0e 98    	mov.w     w0, [w12+16]

00001d4a <.L1>:
    1d4a:	4f 07 78    	mov.w     [--w15], w14
    1d4c:	4f 06 be    	mov.d     [--w15], w12
    1d4e:	4f 05 be    	mov.d     [--w15], w10
    1d50:	4f 04 be    	mov.d     [--w15], w8
    1d52:	cf 01 b1    	sub.w     #0x1c, w15
    1d54:	00 00 06    	return    

00001d56 <___divsi3>:
    1d56:	83 9f 68    	xor.w     w1, w3, [w15++]
    1d58:	01 00 e0    	cp0.w     w1
    1d5a:	02 00 3d    	bra       GE, 0x1d60 <divtestb>
    1d5c:	60 00 10    	subr.w    w0, #0x0, w0
    1d5e:	e0 80 18    	subbr.w   w1, #0x0, w1

00001d60 <divtestb>:
    1d60:	03 00 e0    	cp0.w     w3
    1d62:	02 00 3d    	bra       GE, 0x1d68 <calcquot>
    1d64:	60 01 11    	subr.w    w2, #0x0, w2
    1d66:	e0 81 19    	subbr.w   w3, #0x0, w3

00001d68 <calcquot>:
    1d68:	af fb 07    	rcall     0x14c8 <___udivsi3>
    1d6a:	4f 00 e0    	cp0.w     [--w15]
    1d6c:	02 00 3b    	bra       NN, 0x1d72 <returnq>
    1d6e:	60 00 10    	subr.w    w0, #0x0, w0
    1d70:	e0 80 18    	subbr.w   w1, #0x0, w1

00001d72 <returnq>:
    1d72:	00 00 06    	return    

00001d74 <___PplusBdi>:
    1d74:	88 9f be    	mov.d     w8, [w15++]
    1d76:	8a 9f be    	mov.d     w10, [w15++]
    1d78:	30 04 42    	add.w     w4, [w0++], w8
    1d7a:	b0 84 4a    	addc.w    w5, [w0++], w9
    1d7c:	30 05 4b    	addc.w    w6, [w0++], w10
    1d7e:	90 85 4b    	addc.w    w7, [w0], w11
    1d80:	60 00 b1    	sub.w     #0x6, w0
    1d82:	08 98 be    	mov.d     w8, [w0++]
    1d84:	0a 90 be    	mov.d     w10, [w0--]
    1d86:	04 40 e1    	cp.w      w8, w4
    1d88:	05 c8 e1    	cpb.w     w9, w5
    1d8a:	06 d0 e1    	cpb.w     w10, w6
    1d8c:	07 d8 e1    	cpb.w     w11, w7
    1d8e:	02 00 31    	bra       C, 0x1d94 <.L1>
    1d90:	68 00 40    	add.w     w0, #0x8, w0
    1d92:	10 08 e8    	inc.w     [w0], [w0]

00001d94 <.L1>:
    1d94:	4f 05 be    	mov.d     [--w15], w10
    1d96:	4f 04 be    	mov.d     [--w15], w8
    1d98:	00 00 06    	return    

00001d9a <___PminusBdi>:
    1d9a:	88 9f be    	mov.d     w8, [w15++]
    1d9c:	8a 9f be    	mov.d     w10, [w15++]
    1d9e:	30 04 be    	mov.d     [w0++], w8
    1da0:	20 05 be    	mov.d     [w0--], w10
    1da2:	04 18 54    	sub.w     w8, w4, [w0++]
    1da4:	05 98 5c    	subb.w    w9, w5, [w0++]
    1da6:	06 18 5d    	subb.w    w10, w6, [w0++]
    1da8:	07 98 5d    	subb.w    w11, w7, [w0++]
    1daa:	11 00 20    	mov.w     #0x1, w1
    1dac:	04 40 e1    	cp.w      w8, w4
    1dae:	05 c8 e1    	cpb.w     w9, w5
    1db0:	06 d0 e1    	cpb.w     w10, w6
    1db2:	07 d8 e1    	cpb.w     w11, w7
    1db4:	01 00 39    	bra       NC, 0x1db8 <.L4>
    1db6:	80 00 eb    	clr.w     w1

00001db8 <.L4>:
    1db8:	10 88 10    	subr.w    w1, [w0], [w0]
    1dba:	4f 05 be    	mov.d     [--w15], w10
    1dbc:	4f 04 be    	mov.d     [--w15], w8
    1dbe:	00 00 06    	return    

00001dc0 <___udivmoddi3>:
    1dc0:	12 00 fa    	lnk       #0x12
    1dc2:	88 9f be    	mov.d     w8, [w15++]
    1dc4:	8a 9f be    	mov.d     w10, [w15++]
    1dc6:	8c 9f be    	mov.d     w12, [w15++]
    1dc8:	e0 b7 9f    	mov.w     w0, [w15-20]
    1dca:	f1 b7 9f    	mov.w     w1, [w15-18]
    1dcc:	82 bf 9f    	mov.w     w2, [w15-16]
    1dce:	93 bf 9f    	mov.w     w3, [w15-14]
    1dd0:	06 05 be    	mov.d     w6, w10
    1dd2:	04 04 be    	mov.d     w4, w8
    1dd4:	00 00 eb    	clr.w     w0
    1dd6:	d0 b7 9f    	mov.w     w0, [w15-22]
    1dd8:	c0 b7 9f    	mov.w     w0, [w15-24]
    1dda:	b0 b7 9f    	mov.w     w0, [w15-26]
    1ddc:	a0 b7 9f    	mov.w     w0, [w15-28]
    1dde:	90 b7 9f    	mov.w     w0, [w15-30]
    1de0:	00 06 eb    	clr.w     w12

00001de2 <.L9>:
    1de2:	5f b1 97    	mov.w     [w15-22], w2
    1de4:	cf b0 97    	mov.w     [w15-24], w1
    1de6:	82 01 41    	add.w     w2, w2, w3
    1de8:	3f b0 97    	mov.w     [w15-26], w0
    1dea:	02 00 e0    	cp0.w     w2
    1dec:	04 00 3d    	bra       GE, 0x1df6 <.L6>
    1dee:	37 00 07    	rcall     0x1e5e <.LPA0>
    1df0:	7e 80 57    	sub.w     w15, #0x1e, w0
    1df2:	c0 ff 07    	rcall     0x1d74 <___PplusBdi>
    1df4:	03 00 37    	bra       0x1dfc <.L7>

00001df6 <.L6>:
    1df6:	33 00 07    	rcall     0x1e5e <.LPA0>
    1df8:	7e 80 57    	sub.w     w15, #0x1e, w0
    1dfa:	cf ff 07    	rcall     0x1d9a <___PminusBdi>

00001dfc <.L7>:
    1dfc:	df b6 97    	mov.w     [w15-22], w13
    1dfe:	0d 00 e0    	cp0.w     w13
    1e00:	0c 00 35    	bra       LT, 0x1e1a <.L8>
    1e02:	6f b2 97    	mov.w     [w15-20], w4
    1e04:	ff b2 97    	mov.w     [w15-18], w5
    1e06:	0f bb 97    	mov.w     [w15-16], w6
    1e08:	9f bb 97    	mov.w     [w15-14], w7
    1e0a:	10 00 20    	mov.w     #0x1, w0
    1e0c:	01 00 20    	mov.w     #0x0, w1
    1e0e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1e10:	00 02 72    	ior.w     w4, w0, w4
    1e12:	81 82 72    	ior.w     w5, w1, w5
    1e14:	02 03 73    	ior.w     w6, w2, w6
    1e16:	83 83 73    	ior.w     w7, w3, w7
    1e18:	1b 00 07    	rcall     0x1e50 <.LPA2>

00001e1a <.L8>:
    1e1a:	0c 06 e8    	inc.w     w12, w12
    1e1c:	01 04 20    	mov.w     #0x40, w1
    1e1e:	81 0f 56    	sub.w     w12, w1, [w15]
    1e20:	e0 ff 3a    	bra       NZ, 0x1de2 <.L9>
    1e22:	0d 00 e0    	cp0.w     w13
    1e24:	04 00 3d    	bra       GE, 0x1e2e <.L10>
    1e26:	08 02 be    	mov.d     w8, w4
    1e28:	0a 03 be    	mov.d     w10, w6
    1e2a:	7e 80 57    	sub.w     w15, #0x1e, w0
    1e2c:	a3 ff 07    	rcall     0x1d74 <___PplusBdi>

00001e2e <.L10>:
    1e2e:	5f a8 97    	mov.w     [w15-38], w0
    1e30:	00 00 e0    	cp0.w     w0
    1e32:	05 00 3a    	bra       NZ, 0x1e3e <.L11>
    1e34:	1f b2 97    	mov.w     [w15-30], w4
    1e36:	af b2 97    	mov.w     [w15-28], w5
    1e38:	3f b3 97    	mov.w     [w15-26], w6
    1e3a:	cf b3 97    	mov.w     [w15-24], w7
    1e3c:	09 00 07    	rcall     0x1e50 <.LPA2>

00001e3e <.L11>:
    1e3e:	6f b0 97    	mov.w     [w15-20], w0
    1e40:	ff b0 97    	mov.w     [w15-18], w1
    1e42:	0f b9 97    	mov.w     [w15-16], w2
    1e44:	9f b9 97    	mov.w     [w15-14], w3
    1e46:	4f 06 be    	mov.d     [--w15], w12
    1e48:	4f 05 be    	mov.d     [--w15], w10
    1e4a:	4f 04 be    	mov.d     [--w15], w8
    1e4c:	00 80 fa    	ulnk      
    1e4e:	00 00 06    	return    

00001e50 <.LPA2>:
    1e50:	01 00 07    	rcall     0x1e54 <.LPA5>
    1e52:	00 00 06    	return    

00001e54 <.LPA5>:
    1e54:	a4 b7 9f    	mov.w     w4, [w15-28]
    1e56:	b5 b7 9f    	mov.w     w5, [w15-26]
    1e58:	c6 b7 9f    	mov.w     w6, [w15-24]
    1e5a:	d7 b7 9f    	mov.w     w7, [w15-22]
    1e5c:	00 00 06    	return    

00001e5e <.LPA0>:
    1e5e:	4f 09 de    	lsr.w     w1, #0xf, w2
    1e60:	82 81 71    	ior.w     w3, w2, w3
    1e62:	b3 b7 9f    	mov.w     w3, [w15-26]
    1e64:	4f 01 de    	lsr.w     w0, #0xf, w2
    1e66:	81 80 40    	add.w     w1, w1, w1
    1e68:	82 80 70    	ior.w     w1, w2, w1
    1e6a:	a1 b7 9f    	mov.w     w1, [w15-28]
    1e6c:	8f b0 97    	mov.w     [w15-32], w1
    1e6e:	4f 09 de    	lsr.w     w1, #0xf, w2
    1e70:	00 00 40    	add.w     w0, w0, w0
    1e72:	02 00 70    	ior.w     w0, w2, w0
    1e74:	90 b7 9f    	mov.w     w0, [w15-30]
    1e76:	7f a8 97    	mov.w     [w15-34], w0
    1e78:	4f 01 de    	lsr.w     w0, #0xf, w2
    1e7a:	81 80 40    	add.w     w1, w1, w1
    1e7c:	82 80 70    	ior.w     w1, w2, w1
    1e7e:	81 b7 9f    	mov.w     w1, [w15-32]
    1e80:	0d 00 07    	rcall     0x1e9c <.LPA4>
    1e82:	4f 3a de    	lsr.w     w7, #0xf, w4
    1e84:	00 00 40    	add.w     w0, w0, w0
    1e86:	04 00 70    	ior.w     w0, w4, w0
    1e88:	f0 af 9f    	mov.w     w0, [w15-34]
    1e8a:	08 00 07    	rcall     0x1e9c <.LPA4>
    1e8c:	04 02 42    	add.w     w4, w4, w4
    1e8e:	85 82 4a    	addc.w    w5, w5, w5
    1e90:	06 03 4b    	addc.w    w6, w6, w6
    1e92:	87 83 4b    	addc.w    w7, w7, w7
    1e94:	df ff 07    	rcall     0x1e54 <.LPA5>
    1e96:	08 02 be    	mov.d     w8, w4
    1e98:	0a 03 be    	mov.d     w10, w6
    1e9a:	00 00 06    	return    

00001e9c <.LPA4>:
    1e9c:	2f b2 97    	mov.w     [w15-28], w4
    1e9e:	bf b2 97    	mov.w     [w15-26], w5
    1ea0:	4f b3 97    	mov.w     [w15-24], w6
    1ea2:	df b3 97    	mov.w     [w15-22], w7
    1ea4:	00 00 06    	return    

00001ea6 <___udivdi3>:
    1ea6:	88 1f 78    	mov.w     w8, [w15++]
    1ea8:	18 00 20    	mov.w     #0x1, w8
    1eaa:	88 1f 78    	mov.w     w8, [w15++]
    1eac:	89 ff 07    	rcall     0x1dc0 <___udivmoddi3>
    1eae:	8f 87 e9    	dec2.w    w15, w15
    1eb0:	4f 04 78    	mov.w     [--w15], w8
    1eb2:	00 00 06    	return    

00001eb4 <___umoddi3>:
    1eb4:	80 1f eb    	clr.w     [w15++]
    1eb6:	84 ff 07    	rcall     0x1dc0 <___udivmoddi3>
    1eb8:	8f 87 e9    	dec2.w    w15, w15
    1eba:	00 00 06    	return    

00001ebc <___divdi3>:
    1ebc:	88 9f be    	mov.d     w8, [w15++]
    1ebe:	8a 9f be    	mov.d     w10, [w15++]
    1ec0:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1ec2:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1ec4:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1ec6:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1ec8:	0c 00 3d    	bra       GE, 0x1ee2 <.L15>
    1eca:	60 44 b8    	mul.uu    w8, #0x0, w8
    1ecc:	60 55 b8    	mul.uu    w10, #0x0, w10
    1ece:	00 00 54    	sub.w     w8, w0, w0
    1ed0:	81 80 5c    	subb.w    w9, w1, w1
    1ed2:	02 01 5d    	subb.w    w10, w2, w2
    1ed4:	83 81 5d    	subb.w    w11, w3, w3
    1ed6:	18 00 20    	mov.w     #0x1, w8
    1ed8:	15 00 07    	rcall     0x1f04 <.LPA3>
    1eda:	08 00 3d    	bra       GE, 0x1eec <.L16>
    1edc:	18 00 07    	rcall     0x1f0e <.LPA1>
    1ede:	00 04 eb    	clr.w     w8
    1ee0:	05 00 37    	bra       0x1eec <.L16>

00001ee2 <.L15>:
    1ee2:	00 04 eb    	clr.w     w8
    1ee4:	0f 00 07    	rcall     0x1f04 <.LPA3>
    1ee6:	02 00 3d    	bra       GE, 0x1eec <.L16>
    1ee8:	12 00 07    	rcall     0x1f0e <.LPA1>
    1eea:	18 00 20    	mov.w     #0x1, w8

00001eec <.L16>:
    1eec:	dc ff 07    	rcall     0x1ea6 <___udivdi3>
    1eee:	08 00 e0    	cp0.w     w8
    1ef0:	06 00 32    	bra       Z, 0x1efe <.L17>
    1ef2:	60 22 b8    	mul.uu    w4, #0x0, w4
    1ef4:	60 33 b8    	mul.uu    w6, #0x0, w6
    1ef6:	00 00 52    	sub.w     w4, w0, w0
    1ef8:	81 80 5a    	subb.w    w5, w1, w1
    1efa:	02 01 5b    	subb.w    w6, w2, w2
    1efc:	83 81 5b    	subb.w    w7, w3, w3

00001efe <.L17>:
    1efe:	4f 05 be    	mov.d     [--w15], w10
    1f00:	4f 04 be    	mov.d     [--w15], w8
    1f02:	00 00 06    	return    

00001f04 <.LPA3>:
    1f04:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f06:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f08:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1f0a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1f0c:	00 00 06    	return    

00001f0e <.LPA1>:
    1f0e:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f10:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f12:	04 02 54    	sub.w     w8, w4, w4
    1f14:	85 82 5c    	subb.w    w9, w5, w5
    1f16:	06 03 5d    	subb.w    w10, w6, w6
    1f18:	87 83 5d    	subb.w    w11, w7, w7
    1f1a:	00 00 06    	return    

00001f1c <___moddi3>:
    1f1c:	88 9f be    	mov.d     w8, [w15++]
    1f1e:	8a 9f be    	mov.d     w10, [w15++]
    1f20:	8c 1f 78    	mov.w     w12, [w15++]
    1f22:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1f24:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1f26:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1f28:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1f2a:	0d 00 3d    	bra       GE, 0x1f46 <.L21>
    1f2c:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f2e:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f30:	00 00 54    	sub.w     w8, w0, w0
    1f32:	81 80 5c    	subb.w    w9, w1, w1
    1f34:	02 01 5d    	subb.w    w10, w2, w2
    1f36:	83 81 5d    	subb.w    w11, w3, w3
    1f38:	1c 00 20    	mov.w     #0x1, w12
    1f3a:	08 20 e1    	cp.w      w4, w8
    1f3c:	09 a8 e1    	cpb.w     w5, w9
    1f3e:	0a b0 e1    	cpb.w     w6, w10
    1f40:	0b b8 e1    	cpb.w     w7, w11
    1f42:	0d 00 3d    	bra       GE, 0x1f5e <.L22>
    1f44:	08 00 37    	bra       0x1f56 <.L26>

00001f46 <.L21>:
    1f46:	00 06 eb    	clr.w     w12
    1f48:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f4a:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f4c:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1f4e:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1f50:	06 00 3d    	bra       GE, 0x1f5e <.L22>
    1f52:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f54:	60 55 b8    	mul.uu    w10, #0x0, w10

00001f56 <.L26>:
    1f56:	04 02 54    	sub.w     w8, w4, w4
    1f58:	85 82 5c    	subb.w    w9, w5, w5
    1f5a:	06 03 5d    	subb.w    w10, w6, w6
    1f5c:	87 83 5d    	subb.w    w11, w7, w7

00001f5e <.L22>:
    1f5e:	aa ff 07    	rcall     0x1eb4 <___umoddi3>
    1f60:	0c 00 e0    	cp0.w     w12
    1f62:	06 00 32    	bra       Z, 0x1f70 <.L23>
    1f64:	60 22 b8    	mul.uu    w4, #0x0, w4
    1f66:	60 33 b8    	mul.uu    w6, #0x0, w6
    1f68:	00 00 52    	sub.w     w4, w0, w0
    1f6a:	81 80 5a    	subb.w    w5, w1, w1
    1f6c:	02 01 5b    	subb.w    w6, w2, w2
    1f6e:	83 81 5b    	subb.w    w7, w3, w3

00001f70 <.L23>:
    1f70:	4f 06 78    	mov.w     [--w15], w12
    1f72:	4f 05 be    	mov.d     [--w15], w10
    1f74:	4f 04 be    	mov.d     [--w15], w8
    1f76:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	3a 34 04    	goto      0x343a <__T1Interrupt>
    1026:	00 00 00 
    1028:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	e0 32 04    	goto      0x32e0 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	7e 32 04    	goto      0x327e <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	8a 31 04    	goto      0x318a <__SI2C2Interrupt>
    10b2:	00 00 00 
    10b4:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	92 34 04    	goto      0x3492 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009f78 <.LC0-0x125>:
    9f78:	3f 00       	.word 0x3f
    9f7a:	06 00       	.word 0x6
    9f7c:	5b 00       	.word 0x5b
    9f7e:	4f 00       	.word 0x4f
    9f80:	66 00       	.word 0x66
    9f82:	6d 00       	.word 0x6d
    9f84:	7d 00       	.word 0x7d
    9f86:	07 00       	.word 0x7
    9f88:	7f 00       	.word 0x7f
    9f8a:	6f 00       	.word 0x6f
    9f8c:	77 00       	.word 0x77
    9f8e:	7c 00       	.word 0x7c
    9f90:	39 00       	.word 0x39
    9f92:	5e 00       	.word 0x5e
    9f94:	79 00       	.word 0x79
    9f96:	71 00       	.word 0x71
	...
    9f9c:	01 00       	.word 0x1
    9f9e:	02 00       	.word 0x2
    9fa0:	04 00       	.word 0x4
    9fa2:	08 00       	.word 0x8
    9fa4:	10 00       	.word 0x10
    9fa6:	20 00       	.word 0x20
    9fa8:	40 00       	.word 0x40
    9faa:	80 00       	.word 0x80
    9fac:	00 01       	.word 0x100
    9fae:	00 02       	.word 0x200
    9fb0:	00 04       	.word 0x400
    9fb2:	00 08       	.word 0x800
    9fb4:	00 10       	.word 0x1000
    9fb6:	00 20       	.word 0x2000
    9fb8:	00 40       	.word 0x4000
    9fba:	00 80       	.word 0x8000
	...
    9fcc:	c9 12       	.word 0x12c9
    9fce:	c0 15       	.word 0x15c0
    9fd0:	f9 12       	.word 0x12f9
    9fd2:	e3 00       	.word 0xe3
    9fd4:	30 05       	.word 0x530
    9fd6:	c8 12       	.word 0x12c8
    9fd8:	00 3a       	.word 0x3a00
    9fda:	00 17       	.word 0x1700
    9fdc:	00 00       	.word 0
    9fde:	06 00       	.word 0x6
    9fe0:	20 02       	.word 0x220
    9fe2:	ce 12       	.word 0x12ce
    9fe4:	ed 12       	.word 0x12ed
    9fe6:	24 0c       	.word 0xc24
    9fe8:	5d 23       	.word 0x235d
    9fea:	00 04       	.word 0x400
    9fec:	00 24       	.word 0x2400
    9fee:	00 09       	.word 0x900
    9ff0:	c0 3f       	.word 0x3fc0
    9ff2:	c0 12       	.word 0x12c0
    9ff4:	00 08       	.word 0x800
    9ff6:	c0 00       	.word 0xc0
    9ff8:	00 00       	.word 0
    9ffa:	00 0c       	.word 0xc00
    9ffc:	3f 0c       	.word 0xc3f
    9ffe:	06 00       	.word 0x6
    a000:	db 00       	.word 0xdb
    a002:	8f 00       	.word 0x8f
    a004:	e6 00       	.word 0xe6
    a006:	69 20       	.word 0x2069
    a008:	fd 00       	.word 0xfd
    a00a:	07 00       	.word 0x7
    a00c:	ff 00       	.word 0xff
    a00e:	ef 00       	.word 0xef
    a010:	00 12       	.word 0x1200
    a012:	00 0a       	.word 0xa00
    a014:	00 24       	.word 0x2400
    a016:	c8 00       	.word 0xc8
    a018:	00 09       	.word 0x900
    a01a:	83 10       	.word 0x1083
    a01c:	bb 02       	.word 0x2bb
    a01e:	f7 00       	.word 0xf7
    a020:	8f 12       	.word 0x128f
    a022:	39 00       	.word 0x39
    a024:	0f 12       	.word 0x120f
    a026:	f9 00       	.word 0xf9
    a028:	71 00       	.word 0x71
    a02a:	bd 00       	.word 0xbd
    a02c:	f6 00       	.word 0xf6
    a02e:	00 12       	.word 0x1200
    a030:	1e 00       	.word 0x1e
    a032:	70 24       	.word 0x2470
    a034:	38 00       	.word 0x38
    a036:	36 05       	.word 0x536
    a038:	36 21       	.word 0x2136
    a03a:	3f 00       	.word 0x3f
    a03c:	f3 00       	.word 0xf3
    a03e:	3f 20       	.word 0x203f
    a040:	f3 20       	.word 0x20f3
    a042:	ed 00       	.word 0xed
    a044:	01 12       	.word 0x1201
    a046:	3e 00       	.word 0x3e
    a048:	30 0c       	.word 0xc30
    a04a:	36 28       	.word 0x2836
    a04c:	00 2d       	.word 0x2d00
    a04e:	00 15       	.word 0x1500
    a050:	09 0c       	.word 0xc09
    a052:	39 00       	.word 0x39
    a054:	00 21       	.word 0x2100
    a056:	0f 00       	.word 0xf
    a058:	03 0c       	.word 0xc03
    a05a:	08 00       	.word 0x8
    a05c:	00 01       	.word 0x100
    a05e:	58 10       	.word 0x1058
    a060:	78 20       	.word 0x2078
    a062:	d8 00       	.word 0xd8
    a064:	8e 08       	.word 0x88e
    a066:	58 08       	.word 0x858
    a068:	71 00       	.word 0x71
    a06a:	8e 04       	.word 0x48e
    a06c:	70 10       	.word 0x1070
    a06e:	00 10       	.word 0x1000
    a070:	0e 00       	.word 0xe
    a072:	00 36       	.word 0x3600
    a074:	30 00       	.word 0x30
    a076:	d4 10       	.word 0x10d4
    a078:	50 10       	.word 0x1050
    a07a:	dc 00       	.word 0xdc
    a07c:	70 01       	.word 0x170
    a07e:	86 04       	.word 0x486
    a080:	50 00       	.word 0x50
    a082:	88 20       	.word 0x2088
    a084:	78 00       	.word 0x78
    a086:	1c 00       	.word 0x1c
    a088:	04 20       	.word 0x2004
    a08a:	14 28       	.word 0x2814
    a08c:	c0 28       	.word 0x28c0
    a08e:	0c 20       	.word 0x200c
    a090:	48 08       	.word 0x848
    a092:	49 09       	.word 0x949
    a094:	00 12       	.word 0x1200
    a096:	89 24       	.word 0x2489
    a098:	20 05       	.word 0x520
    a09a:	ff 3f       	.word 0x3fff
    a09c:	e0 53       	.word 0x53e0

0000a09d <.LC0>:
    a09d:	00 00       	.word 0
    a09f:	00 00       	.word 0
    a0a1:	00 00       	.word 0
    a0a3:	00 00       	.word 0
    a0a5:	00 00       	.word 0
    a0a7:	00 00       	.word 0
    a0a9:	00 00       	.word 0
	...
Disassembly of section .text:

000020ac <_led_begin>:

};


void led_begin(_ADAFRUIT_LED* ptr, uint8_t addr){
    20ac:	04 00 fa    	lnk       #0x4
    20ae:	00 0f 78    	mov.w     w0, [w14]
    20b0:	21 47 98    	mov.b     w1, [w14+2]
  ptr->i2c_addr = addr;
    20b2:	1e 00 78    	mov.w     [w14], w0
    20b4:	ae 40 90    	mov.b     [w14+2], w1
    20b6:	01 50 98    	mov.b     w1, [w0+16]
  i2c_start();
    20b8:	cb 02 07    	rcall     0x2650 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    20ba:	1e 00 78    	mov.w     [w14], w0
    20bc:	00 50 90    	mov.b     [w0+16], w0
    20be:	00 80 fb    	ze        w0, w0
    20c0:	16 03 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(0x21); // turn on oscillator
    20c2:	10 02 20    	mov.w     #0x21, w0
    20c4:	14 03 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    20c6:	f8 02 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
  led_blinkRate((_ADAFRUIT_LED *)ptr, HT16K33_BLINK_OFF);
    20c8:	80 40 eb    	clr.b     w1
    20ca:	1e 00 78    	mov.w     [w14], w0
    20cc:	1a 00 07    	rcall     0x2102 <_led_blinkRate> <.LFB2> <.LFE1>
  led_setBrightness((_ADAFRUIT_LED *)ptr,15); // set max brightness
    20ce:	f1 c0 b3    	mov.b     #0xf, w1
    20d0:	1e 00 78    	mov.w     [w14], w0
    20d2:	02 00 07    	rcall     0x20d8 <_led_setBrightness> <.LFB1> <.LFE0>
}
    20d4:	00 80 fa    	ulnk      
    20d6:	00 00 06    	return    

000020d8 <_led_setBrightness>:

void led_setBrightness(_ADAFRUIT_LED* ptr, uint8_t b){
    20d8:	04 00 fa    	lnk       #0x4
    20da:	00 0f 78    	mov.w     w0, [w14]
    20dc:	21 47 98    	mov.b     w1, [w14+2]
  if (b > 15) b = 15;
    20de:	2e 40 90    	mov.b     [w14+2], w0
    20e0:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    20e2:	02 00 36    	bra       LEU, 0x20e8 <.L3>
    20e4:	f0 c0 b3    	mov.b     #0xf, w0
    20e6:	20 47 98    	mov.b     w0, [w14+2]

000020e8 <.L3>:
  i2c_start();
    20e8:	b3 02 07    	rcall     0x2650 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    20ea:	1e 00 78    	mov.w     [w14], w0
    20ec:	00 50 90    	mov.b     [w0+16], w0
    20ee:	00 80 fb    	ze        w0, w0
    20f0:	fe 02 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(HT16K33_CMD_BRIGHTNESS | b);
    20f2:	ae 40 90    	mov.b     [w14+2], w1
    20f4:	00 ce b3    	mov.b     #0xe0, w0
    20f6:	00 c0 70    	ior.b     w1, w0, w0
    20f8:	00 80 fb    	ze        w0, w0
    20fa:	f9 02 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    20fc:	dd 02 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    20fe:	00 80 fa    	ulnk      
    2100:	00 00 06    	return    

00002102 <_led_blinkRate>:

void led_blinkRate(_ADAFRUIT_LED* ptr, uint8_t b){
    2102:	04 00 fa    	lnk       #0x4
    2104:	00 0f 78    	mov.w     w0, [w14]
    2106:	21 47 98    	mov.b     w1, [w14+2]
  i2c_start();
    2108:	a3 02 07    	rcall     0x2650 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    210a:	1e 00 78    	mov.w     [w14], w0
    210c:	00 50 90    	mov.b     [w0+16], w0
    210e:	00 80 fb    	ze        w0, w0
    2110:	ee 02 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
  if (b > 3) b = 0; // turn off if not sure
    2112:	2e 40 90    	mov.b     [w14+2], w0
    2114:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    2116:	02 00 36    	bra       LEU, 0x211c <.L5>
    2118:	00 40 eb    	clr.b     w0
    211a:	20 47 98    	mov.b     w0, [w14+2]

0000211c <.L5>:
  send_i2c_byte(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1));
    211c:	2e 40 90    	mov.b     [w14+2], w0
    211e:	00 80 fb    	ze        w0, w0
    2120:	00 00 40    	add.w     w0, w0, w0
    2122:	80 00 78    	mov.w     w0, w1
    2124:	10 08 20    	mov.w     #0x81, w0
    2126:	01 00 70    	ior.w     w0, w1, w0
    2128:	e2 02 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    212a:	c6 02 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    212c:	00 80 fa    	ulnk      
    212e:	00 00 06    	return    

00002130 <_led_writeDisplay>:

void led_writeDisplay(_ADAFRUIT_LED* ptr){
    2130:	04 00 fa    	lnk       #0x4
    2132:	10 07 98    	mov.w     w0, [w14+2]
  i2c_start();
    2134:	8d 02 07    	rcall     0x2650 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    2136:	1e 00 90    	mov.w     [w14+2], w0
    2138:	00 50 90    	mov.b     [w0+16], w0
    213a:	00 80 fb    	ze        w0, w0
    213c:	d8 02 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
	send_i2c_byte(0x00); // Start at address 0
    213e:	00 00 eb    	clr.w     w0
    2140:	d6 02 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
	uint8_t i;
  for (i=0; i<8; i++) {
    2142:	00 40 eb    	clr.b     w0
    2144:	00 4f 78    	mov.b     w0, [w14]
    2146:	0f 00 37    	bra       0x2166 <.L7>

00002148 <.L8>:
    send_i2c_byte(ptr->displaybuffer[i] & 0xFF);
    2148:	1e 80 fb    	ze        [w14], w0
    214a:	9e 00 90    	mov.w     [w14+2], w1
    214c:	00 00 40    	add.w     w0, w0, w0
    214e:	61 00 78    	mov.w     [w1+w0], w0
    2150:	80 00 78    	mov.w     w0, w1
    2152:	f0 0f 20    	mov.w     #0xff, w0
    2154:	00 80 60    	and.w     w1, w0, w0
    2156:	cb 02 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ptr->displaybuffer[i] >> 8);
    2158:	1e 80 fb    	ze        [w14], w0
    215a:	9e 00 90    	mov.w     [w14+2], w1
    215c:	00 00 40    	add.w     w0, w0, w0
    215e:	61 00 78    	mov.w     [w1+w0], w0
    2160:	48 00 de    	lsr.w     w0, #0x8, w0
    2162:	c5 02 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
    2164:	1e 4f e8    	inc.b     [w14], [w14]

00002166 <.L7>:
    2166:	1e 40 78    	mov.b     [w14], w0
    2168:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    216a:	ee ff 36    	bra       LEU, 0x2148 <.L8>
  }
  reset_i2c_bus();
    216c:	a5 02 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    216e:	00 80 fa    	ulnk      
    2170:	00 00 06    	return    

00002172 <_led_clear>:

void led_clear(_ADAFRUIT_LED* ptr){
    2172:	04 00 fa    	lnk       #0x4
    2174:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
	for (i=0; i<8; i++) {
    2176:	00 40 eb    	clr.b     w0
    2178:	00 4f 78    	mov.b     w0, [w14]
    217a:	07 00 37    	bra       0x218a <.L10>

0000217c <.L11>:
    ptr->displaybuffer[i] = 0;
    217c:	1e 80 fb    	ze        [w14], w0
    217e:	9e 00 90    	mov.w     [w14+2], w1
    2180:	00 00 40    	add.w     w0, w0, w0
    2182:	00 80 40    	add.w     w1, w0, w0
    2184:	80 00 eb    	clr.w     w1
    2186:	01 08 78    	mov.w     w1, [w0]
    2188:	1e 4f e8    	inc.b     [w14], [w14]

0000218a <.L10>:
    218a:	1e 40 78    	mov.b     [w14], w0
    218c:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    218e:	f6 ff 36    	bra       LEU, 0x217c <.L11>
  }
}
    2190:	00 80 fa    	ulnk      
    2192:	00 00 06    	return    

00002194 <_alphanum_begin>:

// ALPHANUM ********************************************************************

void alphanum_begin(_ALPHANUM* ptr, uint8_t addr){
    2194:	04 00 fa    	lnk       #0x4
    2196:	00 0f 78    	mov.w     w0, [w14]
    2198:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr); // Call super constructor
    219a:	1e 00 78    	mov.w     [w14], w0
    219c:	ae 40 90    	mov.b     [w14+2], w1
    219e:	86 ff 07    	rcall     0x20ac <_led_begin> <.L0> <.LFB0> <.Ltext0>
}
    21a0:	00 80 fa    	ulnk      
    21a2:	00 00 06    	return    

000021a4 <_alphanum_writeDigitRaw>:

void alphanum_writeDigitRaw(_ALPHANUM* ptr, uint8_t n, uint16_t bitmask){
    21a4:	06 00 fa    	lnk       #0x6
    21a6:	00 0f 78    	mov.w     w0, [w14]
    21a8:	21 47 98    	mov.b     w1, [w14+2]
    21aa:	22 07 98    	mov.w     w2, [w14+4]
  ptr->super.displaybuffer[n] = bitmask;
    21ac:	2e 40 90    	mov.b     [w14+2], w0
    21ae:	00 80 fb    	ze        w0, w0
    21b0:	9e 00 78    	mov.w     [w14], w1
    21b2:	00 00 40    	add.w     w0, w0, w0
    21b4:	00 80 40    	add.w     w1, w0, w0
    21b6:	ae 00 90    	mov.w     [w14+4], w1
    21b8:	01 08 78    	mov.w     w1, [w0]
}
    21ba:	00 80 fa    	ulnk      
    21bc:	00 00 06    	return    

000021be <_alphanum_writeDigitAscii>:

void alphanum_writeDigitAscii(_ALPHANUM* ptr, uint8_t n, uint8_t ascii, uint8_t dot){
    21be:	08 00 fa    	lnk       #0x8
    21c0:	10 07 98    	mov.w     w0, [w14+2]
    21c2:	41 47 98    	mov.b     w1, [w14+4]
    21c4:	52 47 98    	mov.b     w2, [w14+5]
    21c6:	63 47 98    	mov.b     w3, [w14+6]
  uint16_t font = alphafonttable[ascii];
    21c8:	5e 40 90    	mov.b     [w14+5], w0
    21ca:	00 80 fb    	ze        w0, w0
    21cc:	80 00 40    	add.w     w0, w0, w1
    21ce:	c0 f9 29    	mov.w     #0x9f9c, w0
    21d0:	00 80 40    	add.w     w1, w0, w0
    21d2:	10 0f 78    	mov.w     [w0], [w14]
  ptr->super.displaybuffer[n] = font;
    21d4:	4e 40 90    	mov.b     [w14+4], w0
    21d6:	00 80 fb    	ze        w0, w0
    21d8:	9e 00 90    	mov.w     [w14+2], w1
    21da:	00 00 40    	add.w     w0, w0, w0
    21dc:	00 80 40    	add.w     w1, w0, w0
    21de:	1e 08 78    	mov.w     [w14], [w0]
  if (dot) ptr->super.displaybuffer[n] |= (1<<14);
    21e0:	6e 40 90    	mov.b     [w14+6], w0
    21e2:	00 04 e0    	cp0.b     w0
    21e4:	0c 00 32    	bra       Z, 0x21fe <.L14>
    21e6:	4e 40 90    	mov.b     [w14+4], w0
    21e8:	00 80 fb    	ze        w0, w0
    21ea:	ce 40 90    	mov.b     [w14+4], w1
    21ec:	81 80 fb    	ze        w1, w1
    21ee:	1e 01 90    	mov.w     [w14+2], w2
    21f0:	81 80 40    	add.w     w1, w1, w1
    21f2:	e2 80 78    	mov.w     [w2+w1], w1
    21f4:	01 e0 a0    	bset.w    w1, #0xe
    21f6:	1e 01 90    	mov.w     [w14+2], w2
    21f8:	00 00 40    	add.w     w0, w0, w0
    21fa:	00 00 41    	add.w     w2, w0, w0
    21fc:	01 08 78    	mov.w     w1, [w0]

000021fe <.L14>:
}
    21fe:	00 80 fa    	ulnk      
    2200:	00 00 06    	return    

00002202 <_bargraph_begin>:

// 24 BARGRAPH *****************************************************************

void bargraph_begin(_BARGRAPH* ptr, uint8_t addr){
    2202:	04 00 fa    	lnk       #0x4
    2204:	00 0f 78    	mov.w     w0, [w14]
    2206:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr);
    2208:	1e 00 78    	mov.w     [w14], w0
    220a:	ae 40 90    	mov.b     [w14+2], w1
    220c:	4f ff 07    	rcall     0x20ac <_led_begin> <.L0> <.LFB0> <.Ltext0>
}
    220e:	00 80 fa    	ulnk      
    2210:	00 00 06    	return    

00002212 <_bargraph_setBar>:

void bargraph_setBar(_BARGRAPH* ptr, uint8_t bar, uint8_t color){
    2212:	08 00 fa    	lnk       #0x8
    2214:	20 07 98    	mov.w     w0, [w14+4]
    2216:	61 47 98    	mov.b     w1, [w14+6]
    2218:	72 47 98    	mov.b     w2, [w14+7]
  uint16_t a, c;

  if (bar < 12)
    221a:	6e 40 90    	mov.b     [w14+6], w0
    221c:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    221e:	07 00 3e    	bra       GTU, 0x222e <.L18>
    c = bar / 4;
    2220:	6e 40 90    	mov.b     [w14+6], w0
    2222:	00 80 fb    	ze        w0, w0
    2224:	42 00 de    	lsr.w     w0, #0x2, w0
    2226:	00 40 78    	mov.b     w0, w0
    2228:	00 80 fb    	ze        w0, w0
    222a:	10 07 98    	mov.w     w0, [w14+2]
    222c:	08 00 37    	bra       0x223e <.L19>

0000222e <.L18>:
  else
    c = (bar - 12) / 4;
    222e:	6e 40 90    	mov.b     [w14+6], w0
    2230:	00 80 fb    	ze        w0, w0
    2232:	6c 00 50    	sub.w     w0, #0xc, w0
    2234:	00 00 e0    	cp0.w     w0
    2236:	01 00 3d    	bra       GE, 0x223a <.L20>
    2238:	63 00 40    	add.w     w0, #0x3, w0

0000223a <.L20>:
    223a:	42 80 de    	asr.w     w0, #0x2, w0
    223c:	10 07 98    	mov.w     w0, [w14+2]

0000223e <.L19>:

  a = bar % 4;
    223e:	6e 40 90    	mov.b     [w14+6], w0
    2240:	00 80 fb    	ze        w0, w0
    2242:	63 0f 60    	and.w     w0, #0x3, [w14]
  if (bar >= 12)
    2244:	6e 40 90    	mov.b     [w14+6], w0
    2246:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    2248:	02 00 36    	bra       LEU, 0x224e <.L21>
    a += 4;
    224a:	9e 00 78    	mov.w     [w14], w1
    224c:	64 8f 40    	add.w     w1, #0x4, [w14]

0000224e <.L21>:

  //Serial.print("Ano = "); Serial.print(a); Serial.print(" Cath = "); Serial.println(c);
  if (color == LED_RED) {
    224e:	7e 40 90    	mov.b     [w14+7], w0
    2250:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2252:	1d 00 3a    	bra       NZ, 0x228e <.L22>
    // Turn on red LED.
    ptr->super.displaybuffer[c] |= _BV(a);
    2254:	ae 00 90    	mov.w     [w14+4], w1
    2256:	1e 00 90    	mov.w     [w14+2], w0
    2258:	00 00 40    	add.w     w0, w0, w0
    225a:	e1 00 78    	mov.w     [w1+w0], w1
    225c:	1e 00 78    	mov.w     [w14], w0
    225e:	12 00 20    	mov.w     #0x1, w2
    2260:	00 10 dd    	sl.w      w2, w0, w0
    2262:	81 00 70    	ior.w     w0, w1, w1
    2264:	2e 01 90    	mov.w     [w14+4], w2
    2266:	1e 00 90    	mov.w     [w14+2], w0
    2268:	00 00 40    	add.w     w0, w0, w0
    226a:	00 00 41    	add.w     w2, w0, w0
    226c:	01 08 78    	mov.w     w1, [w0]
    // Turn off green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a+8);
    226e:	ae 00 90    	mov.w     [w14+4], w1
    2270:	1e 00 90    	mov.w     [w14+2], w0
    2272:	00 00 40    	add.w     w0, w0, w0
    2274:	e1 00 78    	mov.w     [w1+w0], w1
    2276:	1e 01 78    	mov.w     [w14], w2
    2278:	68 00 41    	add.w     w2, #0x8, w0
    227a:	12 00 20    	mov.w     #0x1, w2
    227c:	00 10 dd    	sl.w      w2, w0, w0
    227e:	00 80 ea    	com.w     w0, w0
    2280:	80 80 60    	and.w     w1, w0, w1
    2282:	2e 01 90    	mov.w     [w14+4], w2
    2284:	1e 00 90    	mov.w     [w14+2], w0
    2286:	00 00 40    	add.w     w0, w0, w0
    2288:	00 00 41    	add.w     w2, w0, w0
    228a:	01 08 78    	mov.w     w1, [w0]
    228c:	4c 00 37    	bra       0x2326 <.L17>

0000228e <.L22>:
  } else if (color == LED_YELLOW) {
    228e:	7e 40 90    	mov.b     [w14+7], w0
    2290:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    2292:	13 00 3a    	bra       NZ, 0x22ba <.L24>
    // Turn on red and green LED.
    ptr->super.displaybuffer[c] |= _BV(a) | _BV(a+8);
    2294:	ae 00 90    	mov.w     [w14+4], w1
    2296:	1e 00 90    	mov.w     [w14+2], w0
    2298:	00 00 40    	add.w     w0, w0, w0
    229a:	e1 00 78    	mov.w     [w1+w0], w1
    229c:	1e 00 78    	mov.w     [w14], w0
    229e:	12 00 20    	mov.w     #0x1, w2
    22a0:	00 11 dd    	sl.w      w2, w0, w2
    22a2:	9e 01 78    	mov.w     [w14], w3
    22a4:	68 80 41    	add.w     w3, #0x8, w0
    22a6:	13 00 20    	mov.w     #0x1, w3
    22a8:	00 18 dd    	sl.w      w3, w0, w0
    22aa:	02 00 70    	ior.w     w0, w2, w0
    22ac:	81 00 70    	ior.w     w0, w1, w1
    22ae:	2e 01 90    	mov.w     [w14+4], w2
    22b0:	1e 00 90    	mov.w     [w14+2], w0
    22b2:	00 00 40    	add.w     w0, w0, w0
    22b4:	00 00 41    	add.w     w2, w0, w0
    22b6:	01 08 78    	mov.w     w1, [w0]
    22b8:	36 00 37    	bra       0x2326 <.L17>

000022ba <.L24>:
  } else if (color == LED_OFF) {
    22ba:	7e 40 90    	mov.b     [w14+7], w0
    22bc:	00 04 e0    	cp0.b     w0
    22be:	14 00 3a    	bra       NZ, 0x22e8 <.L25>
    // Turn off red and green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a) & ~_BV(a+8);
    22c0:	ae 00 90    	mov.w     [w14+4], w1
    22c2:	1e 00 90    	mov.w     [w14+2], w0
    22c4:	00 00 40    	add.w     w0, w0, w0
    22c6:	e1 00 78    	mov.w     [w1+w0], w1
    22c8:	1e 00 78    	mov.w     [w14], w0
    22ca:	12 00 20    	mov.w     #0x1, w2
    22cc:	00 11 dd    	sl.w      w2, w0, w2
    22ce:	9e 01 78    	mov.w     [w14], w3
    22d0:	68 80 41    	add.w     w3, #0x8, w0
    22d2:	13 00 20    	mov.w     #0x1, w3
    22d4:	00 18 dd    	sl.w      w3, w0, w0
    22d6:	02 00 70    	ior.w     w0, w2, w0
    22d8:	00 80 ea    	com.w     w0, w0
    22da:	80 80 60    	and.w     w1, w0, w1
    22dc:	2e 01 90    	mov.w     [w14+4], w2
    22de:	1e 00 90    	mov.w     [w14+2], w0
    22e0:	00 00 40    	add.w     w0, w0, w0
    22e2:	00 00 41    	add.w     w2, w0, w0
    22e4:	01 08 78    	mov.w     w1, [w0]
    22e6:	1f 00 37    	bra       0x2326 <.L17>

000022e8 <.L25>:
  } else if (color == LED_GREEN) {
    22e8:	7e 40 90    	mov.b     [w14+7], w0
    22ea:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    22ec:	1c 00 3a    	bra       NZ, 0x2326 <.L17>
    // Turn on green LED.
    ptr->super.displaybuffer[c] |= _BV(a+8);
    22ee:	ae 00 90    	mov.w     [w14+4], w1
    22f0:	1e 00 90    	mov.w     [w14+2], w0
    22f2:	00 00 40    	add.w     w0, w0, w0
    22f4:	e1 00 78    	mov.w     [w1+w0], w1
    22f6:	1e 01 78    	mov.w     [w14], w2
    22f8:	68 00 41    	add.w     w2, #0x8, w0
    22fa:	12 00 20    	mov.w     #0x1, w2
    22fc:	00 10 dd    	sl.w      w2, w0, w0
    22fe:	81 00 70    	ior.w     w0, w1, w1
    2300:	2e 01 90    	mov.w     [w14+4], w2
    2302:	1e 00 90    	mov.w     [w14+2], w0
    2304:	00 00 40    	add.w     w0, w0, w0
    2306:	00 00 41    	add.w     w2, w0, w0
    2308:	01 08 78    	mov.w     w1, [w0]
    // Turn off red LED.
    ptr->super.displaybuffer[c] &= ~_BV(a);
    230a:	ae 00 90    	mov.w     [w14+4], w1
    230c:	1e 00 90    	mov.w     [w14+2], w0
    230e:	00 00 40    	add.w     w0, w0, w0
    2310:	e1 00 78    	mov.w     [w1+w0], w1
    2312:	1e 00 78    	mov.w     [w14], w0
    2314:	12 00 20    	mov.w     #0x1, w2
    2316:	00 10 dd    	sl.w      w2, w0, w0
    2318:	00 80 ea    	com.w     w0, w0
    231a:	80 80 60    	and.w     w1, w0, w1
    231c:	2e 01 90    	mov.w     [w14+4], w2
    231e:	1e 00 90    	mov.w     [w14+2], w0
    2320:	00 00 40    	add.w     w0, w0, w0
    2322:	00 00 41    	add.w     w2, w0, w0
    2324:	01 08 78    	mov.w     w1, [w0]

00002326 <.L17>:
  }
}
    2326:	00 80 fa    	ulnk      
    2328:	00 00 06    	return    

0000232a <_sevseg_writeDigitRaw>:

// 7SEGMENT ********************************************************************

// uint8_t write(_7SEGMENT* ptr, uint8_t c){
//
//   uint8_t r = 0;
//
//   if (c == '\n') ptr->position = 0;
//   if (c == '\r') ptr->position = 0;
//
//   if ((c >= '0') && (c <= '9')) {
//     sevseg_writeDigitNum(ptr, ptr->position, c-'0', 0);
//     r = 1;
//   }
//
//   ptr->position++;
//   if (ptr->position == 2) ptr->position++;
//
//   return r;
// }

void sevseg_writeDigitRaw(_7SEGMENT* ptr, uint8_t x, uint16_t bitmask){
    232a:	06 00 fa    	lnk       #0x6
    232c:	00 0f 78    	mov.w     w0, [w14]
    232e:	21 47 98    	mov.b     w1, [w14+2]
    2330:	22 07 98    	mov.w     w2, [w14+4]
  if (x > 4) return;
    2332:	2e 40 90    	mov.b     [w14+2], w0
    2334:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    2336:	08 00 3e    	bra       GTU, 0x2348 <.L29>
  ptr->super.displaybuffer[x] = bitmask;
    2338:	2e 40 90    	mov.b     [w14+2], w0
    233a:	00 80 fb    	ze        w0, w0
    233c:	9e 00 78    	mov.w     [w14], w1
    233e:	00 00 40    	add.w     w0, w0, w0
    2340:	00 80 40    	add.w     w1, w0, w0
    2342:	ae 00 90    	mov.w     [w14+4], w1
    2344:	01 08 78    	mov.w     w1, [w0]
    2346:	01 00 37    	bra       0x234a <.L26>

00002348 <.L29>:
    2348:	00 00 00    	nop       

0000234a <.L26>:
}
    234a:	00 80 fa    	ulnk      
    234c:	00 00 06    	return    

0000234e <_sevseg_writeDigitNum>:

void sevseg_writeDigitNum(_7SEGMENT* ptr, uint8_t x, uint8_t num, uint8_t dot){
    234e:	08 00 fa    	lnk       #0x8
    2350:	10 07 98    	mov.w     w0, [w14+2]
    2352:	41 47 98    	mov.b     w1, [w14+4]
    2354:	52 47 98    	mov.b     w2, [w14+5]
    2356:	63 47 98    	mov.b     w3, [w14+6]
  if (x > 4) return;
    2358:	4e 40 90    	mov.b     [w14+4], w0
    235a:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    235c:	11 00 3e    	bra       GTU, 0x2380 <.L33>
	uint16_t zero = 0x0000;
    235e:	00 00 eb    	clr.w     w0
    2360:	00 0f 78    	mov.w     w0, [w14]
  sevseg_writeDigitRaw(ptr, x, (numbertable[num] | (dot << 7)));
    2362:	5e 40 90    	mov.b     [w14+5], w0
    2364:	00 80 fb    	ze        w0, w0
    2366:	80 00 40    	add.w     w0, w0, w1
    2368:	80 f7 29    	mov.w     #0x9f78, w0
    236a:	00 80 40    	add.w     w1, w0, w0
    236c:	90 00 78    	mov.w     [w0], w1
    236e:	6e 40 90    	mov.b     [w14+6], w0
    2370:	00 80 fb    	ze        w0, w0
    2372:	47 00 dd    	sl.w      w0, #0x7, w0
    2374:	01 00 70    	ior.w     w0, w1, w0
    2376:	00 01 78    	mov.w     w0, w2
    2378:	ce 40 90    	mov.b     [w14+4], w1
    237a:	1e 00 90    	mov.w     [w14+2], w0
    237c:	d6 ff 07    	rcall     0x232a <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    237e:	01 00 37    	bra       0x2382 <.L30>

00002380 <.L33>:
    2380:	00 00 00    	nop       

00002382 <.L30>:
}
    2382:	00 80 fa    	ulnk      
    2384:	00 00 06    	return    

00002386 <_sevseg_drawColon>:

void sevseg_drawColon(_7SEGMENT* ptr, uint8_t state){
    2386:	04 00 fa    	lnk       #0x4
    2388:	00 0f 78    	mov.w     w0, [w14]
    238a:	21 47 98    	mov.b     w1, [w14+2]
  if (state)
    238c:	2e 40 90    	mov.b     [w14+2], w0
    238e:	00 04 e0    	cp0.b     w0
    2390:	04 00 32    	bra       Z, 0x239a <.L35>
    ptr->super.displaybuffer[2] = 0x2;
    2392:	1e 00 78    	mov.w     [w14], w0
    2394:	21 00 20    	mov.w     #0x2, w1
    2396:	21 00 98    	mov.w     w1, [w0+4]
    2398:	03 00 37    	bra       0x23a0 <.L34>

0000239a <.L35>:
  else
    ptr->super.displaybuffer[2] = 0;
    239a:	1e 00 78    	mov.w     [w14], w0
    239c:	80 00 eb    	clr.w     w1
    239e:	21 00 98    	mov.w     w1, [w0+4]

000023a0 <.L34>:
}
    23a0:	00 80 fa    	ulnk      
    23a2:	00 00 06    	return    

000023a4 <_sevseg_printNumber>:

void sevseg_printNumber(_7SEGMENT* ptr, long n, uint8_t base){
    23a4:	08 00 fa    	lnk       #0x8
    23a6:	00 0f 78    	mov.w     w0, [w14]
    23a8:	12 07 98    	mov.w     w2, [w14+2]
    23aa:	23 07 98    	mov.w     w3, [w14+4]
    23ac:	61 47 98    	mov.b     w1, [w14+6]
  sevseg_printFloat(ptr, n, 0, base);
    23ae:	1e 00 90    	mov.w     [w14+2], w0
    23b0:	ae 00 90    	mov.w     [w14+4], w1
    23b2:	00 f8 07    	rcall     0x13b4 <___floatsisf>
    23b4:	00 01 be    	mov.d     w0, w2
    23b6:	6e 42 90    	mov.b     [w14+6], w4
    23b8:	80 40 eb    	clr.b     w1
    23ba:	1e 00 78    	mov.w     [w14], w0
    23bc:	02 00 07    	rcall     0x23c2 <_sevseg_printFloat> <.LFB14> <.LFE13>
}
    23be:	00 80 fa    	ulnk      
    23c0:	00 00 06    	return    

000023c2 <_sevseg_printFloat>:

void sevseg_printFloat(_7SEGMENT* ptr, double n, uint8_t fracDigits, uint8_t base){
    23c2:	1c 00 fa    	lnk       #0x1c
    23c4:	88 1f 78    	mov.w     w8, [w15++]
    23c6:	20 0f 98    	mov.w     w0, [w14+20]
    23c8:	32 0f 98    	mov.w     w2, [w14+22]
    23ca:	43 0f 98    	mov.w     w3, [w14+24]
    23cc:	21 5f 98    	mov.b     w1, [w14+26]
    23ce:	34 5f 98    	mov.b     w4, [w14+27]
  uint8_t numericDigits = 4;   // available digits on display
    23d0:	40 c0 b3    	mov.b     #0x4, w0
    23d2:	00 4f 78    	mov.b     w0, [w14]
  uint8_t isNegative = 0;  // true if the number is negative
    23d4:	00 40 eb    	clr.b     w0
    23d6:	10 47 98    	mov.b     w0, [w14+1]

  // is the number negative?
  if(n < 0) {
    23d8:	18 c0 b3    	mov.b     #0x1, w8
    23da:	60 11 b8    	mul.uu    w2, #0x0, w2
    23dc:	3e 08 90    	mov.w     [w14+22], w0
    23de:	ce 08 90    	mov.w     [w14+24], w1
    23e0:	cc f7 07    	rcall     0x137a <___eqsf2> <___lesf2> <___ltsf2>
    23e2:	00 00 e0    	cp0.w     w0
    23e4:	01 00 35    	bra       LT, 0x23e8 <.L39>
    23e6:	00 44 eb    	clr.b     w8

000023e8 <.L39>:
    23e8:	08 04 e0    	cp0.b     w8
    23ea:	08 00 32    	bra       Z, 0x23fc <.L40>
    isNegative = 1;  // need to draw sign later
    23ec:	10 c0 b3    	mov.b     #0x1, w0
    23ee:	10 47 98    	mov.b     w0, [w14+1]
    --numericDigits;    // the sign will take up one digit
    23f0:	1e 4f e9    	dec.b     [w14], [w14]
    n *= -1;            // pretend the number is positive
    23f2:	3e 08 90    	mov.w     [w14+22], w0
    23f4:	ce 08 90    	mov.w     [w14+24], w1
    23f6:	01 f0 a2    	btg.w     w1, #0xf
    23f8:	30 0f 98    	mov.w     w0, [w14+22]
    23fa:	41 0f 98    	mov.w     w1, [w14+24]

000023fc <.L40>:
  }

  // calculate the factor required to shift all fractional digits
  // into the integer part of the number
  double toIntFactor = 1.0;
    23fc:	00 00 20    	mov.w     #0x0, w0
    23fe:	01 f8 23    	mov.w     #0x3f80, w1
    2400:	10 07 98    	mov.w     w0, [w14+2]
    2402:	21 07 98    	mov.w     w1, [w14+4]
	int i = 0;
    2404:	00 00 eb    	clr.w     w0
    2406:	30 07 98    	mov.w     w0, [w14+6]
  for(i = 0; i < fracDigits; ++i) toIntFactor *= base;
    2408:	00 00 eb    	clr.w     w0
    240a:	30 07 98    	mov.w     w0, [w14+6]
    240c:	0d 00 37    	bra       0x2428 <.L41>

0000240e <.L42>:
    240e:	3e 58 90    	mov.b     [w14+27], w0
    2410:	00 80 fb    	ze        w0, w0
    2412:	cf 80 de    	asr.w     w0, #0xf, w1
    2414:	cf f7 07    	rcall     0x13b4 <___floatsisf>
    2416:	00 01 be    	mov.d     w0, w2
    2418:	1e 00 90    	mov.w     [w14+2], w0
    241a:	ae 00 90    	mov.w     [w14+4], w1
    241c:	21 f8 07    	rcall     0x1460 <___mulsf3>
    241e:	10 07 98    	mov.w     w0, [w14+2]
    2420:	21 07 98    	mov.w     w1, [w14+4]
    2422:	3e 00 90    	mov.w     [w14+6], w0
    2424:	00 00 e8    	inc.w     w0, w0
    2426:	30 07 98    	mov.w     w0, [w14+6]

00002428 <.L41>:
    2428:	2e 58 90    	mov.b     [w14+26], w0
    242a:	80 80 fb    	ze        w0, w1
    242c:	3e 00 90    	mov.w     [w14+6], w0
    242e:	80 8f 50    	sub.w     w1, w0, [w15]
    2430:	ee ff 3c    	bra       GT, 0x240e <.L42>

  // create integer containing digits to display by applying
  // shifting factor and rounding adjustment
  uint32_t displayNumber = n * toIntFactor + 0.5;
    2432:	1e 01 90    	mov.w     [w14+2], w2
    2434:	ae 01 90    	mov.w     [w14+4], w3
    2436:	3e 08 90    	mov.w     [w14+22], w0
    2438:	ce 08 90    	mov.w     [w14+24], w1
    243a:	12 f8 07    	rcall     0x1460 <___mulsf3>
    243c:	02 00 20    	mov.w     #0x0, w2
    243e:	03 f0 23    	mov.w     #0x3f00, w3
    2440:	fd f6 07    	rcall     0x123c <___addsf3>
    2442:	9d f7 07    	rcall     0x137e <___fixunssfsi>
    2444:	40 07 98    	mov.w     w0, [w14+8]
    2446:	51 07 98    	mov.w     w1, [w14+10]

  // calculate upper bound on displayNumber given
  // available digits on display
  uint32_t tooBig = 1;
    2448:	10 00 20    	mov.w     #0x1, w0
    244a:	01 00 20    	mov.w     #0x0, w1
    244c:	60 07 98    	mov.w     w0, [w14+12]
    244e:	71 07 98    	mov.w     w1, [w14+14]
  for(i = 0; i < numericDigits; ++i) tooBig *= base;
    2450:	00 00 eb    	clr.w     w0
    2452:	30 07 98    	mov.w     w0, [w14+6]
    2454:	15 00 37    	bra       0x2480 <.L43>

00002456 <.L44>:
    2456:	3e 58 90    	mov.b     [w14+27], w0
    2458:	00 80 fb    	ze        w0, w0
    245a:	80 00 eb    	clr.w     w1
    245c:	7e 01 90    	mov.w     [w14+14], w2
    245e:	00 91 b9    	mul.ss    w2, w0, w2
    2460:	02 01 78    	mov.w     w2, w2
    2462:	ee 01 90    	mov.w     [w14+12], w3
    2464:	01 9a b9    	mul.ss    w3, w1, w4
    2466:	84 01 78    	mov.w     w4, w3
    2468:	03 01 41    	add.w     w2, w3, w2
    246a:	ee 01 90    	mov.w     [w14+12], w3
    246c:	00 18 b8    	mul.uu    w3, w0, w0
    246e:	01 01 41    	add.w     w2, w1, w2
    2470:	82 00 78    	mov.w     w2, w1
    2472:	60 07 98    	mov.w     w0, [w14+12]
    2474:	71 07 98    	mov.w     w1, [w14+14]
    2476:	60 07 98    	mov.w     w0, [w14+12]
    2478:	71 07 98    	mov.w     w1, [w14+14]
    247a:	3e 00 90    	mov.w     [w14+6], w0
    247c:	00 00 e8    	inc.w     w0, w0
    247e:	30 07 98    	mov.w     w0, [w14+6]

00002480 <.L43>:
    2480:	9e 80 fb    	ze        [w14], w1
    2482:	3e 00 90    	mov.w     [w14+6], w0
    2484:	80 8f 50    	sub.w     w1, w0, [w15]
    2486:	e7 ff 3c    	bra       GT, 0x2456 <.L44>

  // if displayNumber is too large, try fewer fractional digits
  while(displayNumber >= tooBig) {
    2488:	18 00 37    	bra       0x24ba <.L45>

0000248a <.L46>:
    --fracDigits;
    248a:	2e 58 90    	mov.b     [w14+26], w0
    248c:	00 40 e9    	dec.b     w0, w0
    248e:	20 5f 98    	mov.b     w0, [w14+26]
    toIntFactor /= base;
    2490:	3e 58 90    	mov.b     [w14+27], w0
    2492:	00 80 fb    	ze        w0, w0
    2494:	cf 80 de    	asr.w     w0, #0xf, w1
    2496:	8e f7 07    	rcall     0x13b4 <___floatsisf>
    2498:	00 01 be    	mov.d     w0, w2
    249a:	1e 00 90    	mov.w     [w14+2], w0
    249c:	ae 00 90    	mov.w     [w14+4], w1
    249e:	2b f7 07    	rcall     0x12f6 <___divsf3>
    24a0:	10 07 98    	mov.w     w0, [w14+2]
    24a2:	21 07 98    	mov.w     w1, [w14+4]
    displayNumber = n * toIntFactor + 0.5;
    24a4:	1e 01 90    	mov.w     [w14+2], w2
    24a6:	ae 01 90    	mov.w     [w14+4], w3
    24a8:	3e 08 90    	mov.w     [w14+22], w0
    24aa:	ce 08 90    	mov.w     [w14+24], w1
    24ac:	d9 f7 07    	rcall     0x1460 <___mulsf3>
    24ae:	02 00 20    	mov.w     #0x0, w2
    24b0:	03 f0 23    	mov.w     #0x3f00, w3
    24b2:	c4 f6 07    	rcall     0x123c <___addsf3>
    24b4:	64 f7 07    	rcall     0x137e <___fixunssfsi>
    24b6:	40 07 98    	mov.w     w0, [w14+8]
    24b8:	51 07 98    	mov.w     w1, [w14+10]

000024ba <.L45>:
    24ba:	4e 01 90    	mov.w     [w14+8], w2
    24bc:	de 01 90    	mov.w     [w14+10], w3
    24be:	6e 00 90    	mov.w     [w14+12], w0
    24c0:	fe 00 90    	mov.w     [w14+14], w1
    24c2:	80 0f 51    	sub.w     w2, w0, [w15]
    24c4:	81 8f 59    	subb.w    w3, w1, [w15]
    24c6:	e1 ff 31    	bra       C, 0x248a <.L46>
  }

  // did toIntFactor shift the decimal off the display?
  if (toIntFactor < 1) {
    24c8:	18 c0 b3    	mov.b     #0x1, w8
    24ca:	02 00 20    	mov.w     #0x0, w2
    24cc:	03 f8 23    	mov.w     #0x3f80, w3
    24ce:	1e 00 90    	mov.w     [w14+2], w0
    24d0:	ae 00 90    	mov.w     [w14+4], w1
    24d2:	53 f7 07    	rcall     0x137a <___eqsf2> <___lesf2> <___ltsf2>
    24d4:	00 00 e0    	cp0.w     w0
    24d6:	01 00 35    	bra       LT, 0x24da <.L47>
    24d8:	00 44 eb    	clr.b     w8

000024da <.L47>:
    24da:	08 04 e0    	cp0.b     w8
    24dc:	03 00 32    	bra       Z, 0x24e4 <.L48> <.LBB2>
    sevseg_printError(ptr);
    24de:	2e 08 90    	mov.w     [w14+20], w0
    24e0:	6c 00 07    	rcall     0x25ba <_sevseg_printError> <.LFB15> <.LFE14>
    24e2:	68 00 37    	bra       0x25b4 <.L38> <.LBE2>

000024e4 <.L48>:
  } else {
    // otherwise, display the number
    int8_t displayPos = 4;
    24e4:	40 c0 b3    	mov.b     #0x4, w0
    24e6:	00 57 98    	mov.b     w0, [w14+16]

    if (displayNumber)  //if displayNumber is not 0
    24e8:	4e 00 90    	mov.w     [w14+8], w0
    24ea:	de 00 90    	mov.w     [w14+10], w1
    24ec:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    24ee:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    24f0:	41 00 32    	bra       Z, 0x2574 <.L50> <.LBE3>

000024f2 <.LBB3>:
    {
			uint8_t i;
      for(i = 0; displayNumber || i <= fracDigits; ++i) {
    24f2:	00 40 eb    	clr.b     w0
    24f4:	10 57 98    	mov.b     w0, [w14+17]
    24f6:	34 00 37    	bra       0x2560 <.L51>

000024f8 <.L55>:
        uint8_t displayDecimal = (fracDigits != 0 && i == fracDigits);
    24f8:	2e 58 90    	mov.b     [w14+26], w0
    24fa:	00 04 e0    	cp0.b     w0
    24fc:	06 00 32    	bra       Z, 0x250a <.L52>
    24fe:	9e 50 90    	mov.b     [w14+17], w1
    2500:	2e 58 90    	mov.b     [w14+26], w0
    2502:	80 cf 50    	sub.b     w1, w0, [w15]
    2504:	02 00 3a    	bra       NZ, 0x250a <.L52>
    2506:	10 00 20    	mov.w     #0x1, w0
    2508:	01 00 37    	bra       0x250c <.L53>

0000250a <.L52>:
    250a:	00 00 eb    	clr.w     w0

0000250c <.L53>:
    250c:	20 57 98    	mov.b     w0, [w14+18]
        sevseg_writeDigitNum(ptr, displayPos--, displayNumber % base, displayDecimal);
    250e:	3e 58 90    	mov.b     [w14+27], w0
    2510:	00 80 fb    	ze        w0, w0
    2512:	80 00 eb    	clr.w     w1
    2514:	4e 02 90    	mov.w     [w14+8], w4
    2516:	de 02 90    	mov.w     [w14+10], w5
    2518:	00 01 be    	mov.d     w0, w2
    251a:	04 00 be    	mov.d     w4, w0
    251c:	e5 f7 07    	rcall     0x14e8 <___umodsi3>
    251e:	80 40 78    	mov.b     w0, w1
    2520:	0e 50 90    	mov.b     [w14+16], w0
    2522:	0e 51 90    	mov.b     [w14+16], w2
    2524:	02 41 e9    	dec.b     w2, w2
    2526:	02 57 98    	mov.b     w2, [w14+16]
    2528:	ae 51 90    	mov.b     [w14+18], w3
    252a:	01 41 78    	mov.b     w1, w2
    252c:	80 40 78    	mov.b     w0, w1
    252e:	2e 08 90    	mov.w     [w14+20], w0
    2530:	0e ff 07    	rcall     0x234e <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
        if(displayPos == 2) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    2532:	0e 50 90    	mov.b     [w14+16], w0
    2534:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    2536:	08 00 3a    	bra       NZ, 0x2548 <.L54>
    2538:	0e 50 90    	mov.b     [w14+16], w0
    253a:	8e 50 90    	mov.b     [w14+16], w1
    253c:	81 40 e9    	dec.b     w1, w1
    253e:	01 57 98    	mov.b     w1, [w14+16]
    2540:	00 01 eb    	clr.w     w2
    2542:	80 40 78    	mov.b     w0, w1
    2544:	2e 08 90    	mov.w     [w14+20], w0
    2546:	f1 fe 07    	rcall     0x232a <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00002548 <.L54>:
        displayNumber /= base;
    2548:	3e 58 90    	mov.b     [w14+27], w0
    254a:	00 80 fb    	ze        w0, w0
    254c:	80 00 eb    	clr.w     w1
    254e:	00 01 be    	mov.d     w0, w2
    2550:	4e 00 90    	mov.w     [w14+8], w0
    2552:	de 00 90    	mov.w     [w14+10], w1
    2554:	b9 f7 07    	rcall     0x14c8 <___udivsi3>
    2556:	40 07 98    	mov.w     w0, [w14+8]
    2558:	51 07 98    	mov.w     w1, [w14+10]

0000255a <.LBE4>:
    255a:	1e 50 90    	mov.b     [w14+17], w0
    255c:	00 40 e8    	inc.b     w0, w0
    255e:	10 57 98    	mov.b     w0, [w14+17]

00002560 <.L51>:
    2560:	4e 00 90    	mov.w     [w14+8], w0
    2562:	de 00 90    	mov.w     [w14+10], w1
    2564:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2566:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2568:	c7 ff 3a    	bra       NZ, 0x24f8 <.L55> <.LBB4>
    256a:	9e 50 90    	mov.b     [w14+17], w1
    256c:	2e 58 90    	mov.b     [w14+26], w0
    256e:	80 cf 50    	sub.b     w1, w0, [w15]
    2570:	c3 ff 36    	bra       LEU, 0x24f8 <.L55> <.LBB4>
    2572:	09 00 37    	bra       0x2586 <.L56>

00002574 <.L50>:
      }
    }
    else {
      sevseg_writeDigitNum(ptr, displayPos--, 0, 0);
    2574:	0e 50 90    	mov.b     [w14+16], w0
    2576:	8e 50 90    	mov.b     [w14+16], w1
    2578:	81 40 e9    	dec.b     w1, w1
    257a:	01 57 98    	mov.b     w1, [w14+16]
    257c:	80 41 eb    	clr.b     w3
    257e:	00 41 eb    	clr.b     w2
    2580:	80 40 78    	mov.b     w0, w1
    2582:	2e 08 90    	mov.w     [w14+20], w0
    2584:	e4 fe 07    	rcall     0x234e <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

00002586 <.L56>:
    }

    // display negative sign if negative
    if(isNegative) sevseg_writeDigitRaw(ptr, displayPos--, 0x40);
    2586:	1e 40 90    	mov.b     [w14+1], w0
    2588:	00 04 e0    	cp0.b     w0
    258a:	11 00 32    	bra       Z, 0x25ae <.L58>
    258c:	0e 50 90    	mov.b     [w14+16], w0
    258e:	8e 50 90    	mov.b     [w14+16], w1
    2590:	81 40 e9    	dec.b     w1, w1
    2592:	01 57 98    	mov.b     w1, [w14+16]
    2594:	02 04 20    	mov.w     #0x40, w2
    2596:	80 40 78    	mov.b     w0, w1
    2598:	2e 08 90    	mov.w     [w14+20], w0
    259a:	c7 fe 07    	rcall     0x232a <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

    // clear remaining display positions
    while(displayPos >= 0) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    259c:	08 00 37    	bra       0x25ae <.L58>

0000259e <.L59>:
    259e:	0e 50 90    	mov.b     [w14+16], w0
    25a0:	8e 50 90    	mov.b     [w14+16], w1
    25a2:	81 40 e9    	dec.b     w1, w1
    25a4:	01 57 98    	mov.b     w1, [w14+16]
    25a6:	00 01 eb    	clr.w     w2
    25a8:	80 40 78    	mov.b     w0, w1
    25aa:	2e 08 90    	mov.w     [w14+20], w0
    25ac:	be fe 07    	rcall     0x232a <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

000025ae <.L58>:
    25ae:	0e 50 90    	mov.b     [w14+16], w0
    25b0:	00 04 e0    	cp0.b     w0
    25b2:	f5 ff 3d    	bra       GE, 0x259e <.L59>

000025b4 <.L38>:
  }
}
    25b4:	4f 04 78    	mov.w     [--w15], w8
    25b6:	00 80 fa    	ulnk      
    25b8:	00 00 06    	return    

000025ba <_sevseg_printError>:

void sevseg_printError(_7SEGMENT* ptr){
    25ba:	04 00 fa    	lnk       #0x4
    25bc:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
  for(i = 0; i < SEVENSEG_DIGITS; ++i) {
    25be:	00 40 eb    	clr.b     w0
    25c0:	00 4f 78    	mov.b     w0, [w14]
    25c2:	0b 00 37    	bra       0x25da <.L61>

000025c4 <.L64>:
    sevseg_writeDigitRaw(ptr, i, (i == 2 ? 0x00 : 0x40));
    25c4:	1e 40 78    	mov.b     [w14], w0
    25c6:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    25c8:	02 00 3a    	bra       NZ, 0x25ce <.L62>
    25ca:	00 00 eb    	clr.w     w0
    25cc:	01 00 37    	bra       0x25d0 <.L63>

000025ce <.L62>:
    25ce:	00 04 20    	mov.w     #0x40, w0

000025d0 <.L63>:
    25d0:	00 01 78    	mov.w     w0, w2
    25d2:	9e 40 78    	mov.b     [w14], w1
    25d4:	1e 00 90    	mov.w     [w14+2], w0
    25d6:	a9 fe 07    	rcall     0x232a <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    25d8:	1e 4f e8    	inc.b     [w14], [w14]

000025da <.L61>:
    25da:	1e 40 78    	mov.b     [w14], w0
    25dc:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    25de:	f2 ff 36    	bra       LEU, 0x25c4 <.L64>
  }
}
    25e0:	00 80 fa    	ulnk      
    25e2:	00 00 06    	return    

000025e4 <_sevseg_writeColon>:


void sevseg_writeColon(_7SEGMENT* ptr){
    25e4:	02 00 fa    	lnk       #0x2
    25e6:	00 0f 78    	mov.w     w0, [w14]
  /*
  Wire.beginTransmission(i2c_addr);
  Wire.write((uint8_t)0x04);

  Wire.write(displaybuffer[2] & 0xFF);
  Wire.write(displaybuffer[2] >> 8);

  Wire.endTransmission();
  */
  i2c_start();
    25e8:	33 00 07    	rcall     0x2650 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->super.i2c_addr);
    25ea:	1e 00 78    	mov.w     [w14], w0
    25ec:	00 50 90    	mov.b     [w0+16], w0
    25ee:	00 80 fb    	ze        w0, w0
    25f0:	7e 00 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte((uint8_t)0x04); // start at address $02
    25f2:	40 00 20    	mov.w     #0x4, w0
    25f4:	7c 00 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] & 0xFF);
    25f6:	1e 00 78    	mov.w     [w14], w0
    25f8:	20 00 90    	mov.w     [w0+4], w0
    25fa:	80 00 78    	mov.w     w0, w1
    25fc:	f0 0f 20    	mov.w     #0xff, w0
    25fe:	00 80 60    	and.w     w1, w0, w0
    2600:	76 00 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] >> 8);
    2602:	1e 00 78    	mov.w     [w14], w0
    2604:	20 00 90    	mov.w     [w0+4], w0
    2606:	48 00 de    	lsr.w     w0, #0x8, w0
    2608:	72 00 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    260a:	56 00 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    260c:	00 80 fa    	ulnk      
    260e:	00 00 06    	return    

00002610 <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    2610:	08 00 fa    	lnk       #0x8
    2612:	20 07 98    	mov.w     w0, [w14+4]
    2614:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    2616:	60 00 b8    	mul.uu    w0, #0x0, w0
    2618:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    261a:	05 00 37    	bra       0x2626 <.L2>

0000261c <.L3>:
        __asm__("nop");
    261c:	00 00 00    	nop       
        count +=1;
    261e:	12 00 20    	mov.w     #0x1, w2
    2620:	03 00 20    	mov.w     #0x0, w3
    2622:	1e 0f 41    	add.w     w2, [w14], [w14]
    2624:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00002626 <.L2>:
    2626:	2e 00 90    	mov.w     [w14+4], w0
    2628:	be 00 90    	mov.w     [w14+6], w1
    262a:	1e 01 be    	mov.d     [w14], w2
    262c:	80 0f 51    	sub.w     w2, w0, [w15]
    262e:	81 8f 59    	subb.w    w3, w1, [w15]
    2630:	f5 ff 39    	bra       NC, 0x261c <.L3>
    }
}
    2632:	00 80 fa    	ulnk      
    2634:	00 00 06    	return    

00002636 <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    2636:	04 00 fa    	lnk       #0x4
    2638:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    263a:	1e 00 90    	mov.w     [w14+2], w0
    263c:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    263e:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    2640:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    2642:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    2644:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    2646:	80 13 80    	mov.w     0x270, w0
    2648:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    264a:	36 00 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    264c:	00 80 fa    	ulnk      
    264e:	00 00 06    	return    

00002650 <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    2650:	02 00 fa    	lnk       #0x2
   int x = 0;
    2652:	00 00 eb    	clr.w     w0
    2654:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    2656:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    2658:	a0 00 20    	mov.w     #0xa, w0
    265a:	01 00 20    	mov.w     #0x0, w1
    265c:	d9 ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    265e:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    2660:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    2662:	07 00 37    	bra       0x2672 <.L6>

00002664 <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    2664:	10 00 20    	mov.w     #0x1, w0
    2666:	01 00 20    	mov.w     #0x0, w1
    2668:	d3 ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    266a:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    266c:	1e 00 78    	mov.w     [w14], w0
    266e:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2670:	05 00 3c    	bra       GT, 0x267c <.L9>

00002672 <.L6>:
    2672:	b0 13 80    	mov.w     0x276, w0
    2674:	61 00 60    	and.w     w0, #0x1, w0
    2676:	00 00 e0    	cp0.w     w0
    2678:	f5 ff 3a    	bra       NZ, 0x2664 <.L8>
    267a:	01 00 37    	bra       0x267e <.L7>

0000267c <.L9>:
      break;
    267c:	00 00 00    	nop       

0000267e <.L7>:
   }
   delay_by_nop(2);
    267e:	20 00 20    	mov.w     #0x2, w0
    2680:	01 00 20    	mov.w     #0x0, w1
    2682:	c6 ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2684:	00 80 fa    	ulnk      
    2686:	00 00 06    	return    

00002688 <_i2c_restart>:

void i2c_restart(void){
    2688:	02 00 fa    	lnk       #0x2
   int x = 0;
    268a:	00 00 eb    	clr.w     w0
    268c:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    268e:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    2690:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    2692:	07 00 37    	bra       0x26a2 <.L11>

00002694 <.L13>:
      delay_by_nop(1);
    2694:	10 00 20    	mov.w     #0x1, w0
    2696:	01 00 20    	mov.w     #0x0, w1
    2698:	bb ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    269a:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    269c:	1e 00 78    	mov.w     [w14], w0
    269e:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    26a0:	05 00 3c    	bra       GT, 0x26ac <.L14>

000026a2 <.L11>:
    26a2:	b0 13 80    	mov.w     0x276, w0
    26a4:	62 00 60    	and.w     w0, #0x2, w0
    26a6:	00 00 e0    	cp0.w     w0
    26a8:	f5 ff 3a    	bra       NZ, 0x2694 <.L13>
    26aa:	01 00 37    	bra       0x26ae <.L12>

000026ac <.L14>:
    26ac:	00 00 00    	nop       

000026ae <.L12>:
   }
   delay_by_nop(2);
    26ae:	20 00 20    	mov.w     #0x2, w0
    26b0:	01 00 20    	mov.w     #0x0, w1
    26b2:	ae ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    26b4:	00 80 fa    	ulnk      
    26b6:	00 00 06    	return    

000026b8 <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    26b8:	02 00 fa    	lnk       #0x2
   int x = 0;
    26ba:	00 00 eb    	clr.w     w0
    26bc:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    26be:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    26c0:	07 00 37    	bra       0x26d0 <.L16>

000026c2 <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    26c2:	10 00 20    	mov.w     #0x1, w0
    26c4:	01 00 20    	mov.w     #0x0, w1
    26c6:	a4 ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    26c8:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    26ca:	1e 00 78    	mov.w     [w14], w0
    26cc:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    26ce:	05 00 3c    	bra       GT, 0x26da <.L19>

000026d0 <.L16>:
    26d0:	b0 13 80    	mov.w     0x276, w0
    26d2:	64 00 60    	and.w     w0, #0x4, w0
    26d4:	00 00 e0    	cp0.w     w0
    26d6:	f5 ff 3a    	bra       NZ, 0x26c2 <.L18>
    26d8:	01 00 37    	bra       0x26dc <.L17>

000026da <.L19>:
    26da:	00 00 00    	nop       

000026dc <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    26dc:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    26de:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    26e0:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    26e2:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    26e4:	40 01 20    	mov.w     #0x14, w0
    26e6:	01 00 20    	mov.w     #0x0, w1
    26e8:	93 ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    26ea:	00 80 fa    	ulnk      
    26ec:	00 00 06    	return    

000026ee <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    26ee:	04 00 fa    	lnk       #0x4
    26f0:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    26f2:	00 00 00    	nop       

000026f4 <.L21>:
    26f4:	c0 13 80    	mov.w     0x278, w0
    26f6:	61 00 60    	and.w     w0, #0x1, w0
    26f8:	00 00 e0    	cp0.w     w0
    26fa:	fc ff 3a    	bra       NZ, 0x26f4 <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    26fc:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    26fe:	1e 00 90    	mov.w     [w14+2], w0
    2700:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    2702:	00 00 eb    	clr.w     w0
    2704:	00 0f 78    	mov.w     w0, [w14]
    2706:	09 00 37    	bra       0x271a <.L22>

00002708 <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    2708:	c1 13 80    	mov.w     0x278, w1
    270a:	00 00 24    	mov.w     #0x4000, w0
    270c:	00 80 60    	and.w     w1, w0, w0
    270e:	00 00 e0    	cp0.w     w0
    2710:	09 00 32    	bra       Z, 0x2724 <.L29>
      delay_by_nop(1); }
    2712:	10 00 20    	mov.w     #0x1, w0
    2714:	01 00 20    	mov.w     #0x0, w1
    2716:	7c ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2718:	1e 0f e8    	inc.w     [w14], [w14]

0000271a <.L22>:
    271a:	30 1f 20    	mov.w     #0x1f3, w0
    271c:	9e 00 78    	mov.w     [w14], w1
    271e:	80 8f 50    	sub.w     w1, w0, [w15]
    2720:	f3 ff 34    	bra       LE, 0x2708 <.L25>
    2722:	01 00 37    	bra       0x2726 <.L24>

00002724 <.L29>:
    2724:	00 00 00    	nop       

00002726 <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    2726:	40 1f 20    	mov.w     #0x1f4, w0
    2728:	9e 00 78    	mov.w     [w14], w1
    272a:	80 8f 50    	sub.w     w1, w0, [w15]
    272c:	02 00 3a    	bra       NZ, 0x2732 <.L26>
        return(1); }    // return 1 to indicate failure
    272e:	10 c0 b3    	mov.b     #0x1, w0
    2730:	0c 00 37    	bra       0x274a <.L27>

00002732 <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    2732:	c1 13 80    	mov.w     0x278, w1
    2734:	00 00 28    	mov.w     #0x8000, w0
    2736:	00 80 60    	and.w     w1, w0, w0
    2738:	00 00 e0    	cp0.w     w0
    273a:	03 00 32    	bra       Z, 0x2742 <.L28>
      reset_i2c_bus();
    273c:	bd ff 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    273e:	10 c0 b3    	mov.b     #0x1, w0
    2740:	04 00 37    	bra       0x274a <.L27>

00002742 <.L28>:

   delay_by_nop(2);
    2742:	20 00 20    	mov.w     #0x2, w0
    2744:	01 00 20    	mov.w     #0x0, w1
    2746:	64 ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    2748:	00 40 eb    	clr.b     w0

0000274a <.L27>:
}
    274a:	00 80 fa    	ulnk      
    274c:	00 00 06    	return    

0000274e <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    274e:	04 00 fa    	lnk       #0x4
   int i = 0;
    2750:	00 00 eb    	clr.w     w0
    2752:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2754:	00 40 eb    	clr.b     w0
    2756:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    2758:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    275a:	05 00 37    	bra       0x2766 <.L31>

0000275c <.L33>:
      i ++;
    275c:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    275e:	00 7d 20    	mov.w     #0x7d0, w0
    2760:	9e 00 78    	mov.w     [w14], w1
    2762:	80 8f 50    	sub.w     w1, w0, [w15]
    2764:	05 00 3c    	bra       GT, 0x2770 <.L34>

00002766 <.L31>:
    2766:	c0 13 80    	mov.w     0x278, w0
    2768:	62 00 60    	and.w     w0, #0x2, w0
    276a:	00 00 e0    	cp0.w     w0
    276c:	f7 ff 32    	bra       Z, 0x275c <.L33>
    276e:	01 00 37    	bra       0x2772 <.L32>

00002770 <.L34>:
    2770:	00 00 00    	nop       

00002772 <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    2772:	80 13 80    	mov.w     0x270, w0
    2774:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    2776:	2e 40 90    	mov.b     [w14+2], w0
}
    2778:	00 80 fa    	ulnk      
    277a:	00 00 06    	return    

0000277c <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    277c:	04 00 fa    	lnk       #0x4
   int i = 0;
    277e:	00 00 eb    	clr.w     w0
    2780:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2782:	00 40 eb    	clr.b     w0
    2784:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    2786:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    2788:	05 00 37    	bra       0x2794 <.L36>

0000278a <.L38>:
      i++;
    278a:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    278c:	00 7d 20    	mov.w     #0x7d0, w0
    278e:	9e 00 78    	mov.w     [w14], w1
    2790:	80 8f 50    	sub.w     w1, w0, [w15]
    2792:	05 00 3c    	bra       GT, 0x279e <.L39>

00002794 <.L36>:
    2794:	c0 13 80    	mov.w     0x278, w0
    2796:	62 00 60    	and.w     w0, #0x2, w0
    2798:	00 00 e0    	cp0.w     w0
    279a:	f7 ff 32    	bra       Z, 0x278a <.L38>
    279c:	01 00 37    	bra       0x27a0 <.L37>

0000279e <.L39>:
    279e:	00 00 00    	nop       

000027a0 <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    27a0:	80 13 80    	mov.w     0x270, w0
    27a2:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    27a4:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    27a6:	a0 00 20    	mov.w     #0xa, w0
    27a8:	01 00 20    	mov.w     #0x0, w1
    27aa:	32 ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    27ac:	2e 40 90    	mov.b     [w14+2], w0
}
    27ae:	00 80 fa    	ulnk      
    27b0:	00 00 06    	return    

000027b2 <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    27b2:	04 00 fa    	lnk       #0x4
   int i = 0;
    27b4:	00 00 eb    	clr.w     w0
    27b6:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    27b8:	00 40 eb    	clr.b     w0
    27ba:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    27bc:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    27be:	05 00 37    	bra       0x27ca <.L41>

000027c0 <.L43>:
      i++;
    27c0:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    27c2:	00 7d 20    	mov.w     #0x7d0, w0
    27c4:	9e 00 78    	mov.w     [w14], w1
    27c6:	80 8f 50    	sub.w     w1, w0, [w15]
    27c8:	05 00 3c    	bra       GT, 0x27d4 <.L44>

000027ca <.L41>:
    27ca:	c0 13 80    	mov.w     0x278, w0
    27cc:	62 00 60    	and.w     w0, #0x2, w0
    27ce:	00 00 e0    	cp0.w     w0
    27d0:	f7 ff 32    	bra       Z, 0x27c0 <.L43>
    27d2:	01 00 37    	bra       0x27d6 <.L42>

000027d4 <.L44>:
    27d4:	00 00 00    	nop       

000027d6 <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    27d6:	80 13 80    	mov.w     0x270, w0
    27d8:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    27da:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    27dc:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    27de:	a0 00 20    	mov.w     #0xa, w0
    27e0:	01 00 20    	mov.w     #0x0, w1
    27e2:	16 ff 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    27e4:	2e 40 90    	mov.b     [w14+2], w0
}
    27e6:	00 80 fa    	ulnk      
    27e8:	00 00 06    	return    

000027ea <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    27ea:	04 00 fa    	lnk       #0x4
    27ec:	00 4f 78    	mov.b     w0, [w14]
    27ee:	11 47 98    	mov.b     w1, [w14+1]
    27f0:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    27f2:	2e ff 07    	rcall     0x2650 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    27f4:	1e 00 fb    	se        [w14], w0
    27f6:	80 00 78    	mov.w     w0, w1
    27f8:	e0 ff 2f    	mov.w     #0xfffe, w0
    27fa:	00 80 60    	and.w     w1, w0, w0
    27fc:	78 ff 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    27fe:	1e 40 90    	mov.b     [w14+1], w0
    2800:	00 00 fb    	se        w0, w0
    2802:	75 ff 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    2804:	2e 40 90    	mov.b     [w14+2], w0
    2806:	00 00 fb    	se        w0, w0
    2808:	72 ff 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    280a:	56 ff 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    280c:	00 80 fa    	ulnk      
    280e:	00 00 06    	return    

00002810 <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    2810:	04 00 fa    	lnk       #0x4
    2812:	20 47 98    	mov.b     w0, [w14+2]
    2814:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    2816:	1c ff 07    	rcall     0x2650 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    2818:	2e 40 90    	mov.b     [w14+2], w0
    281a:	00 00 fb    	se        w0, w0
    281c:	68 ff 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    281e:	3e 40 90    	mov.b     [w14+3], w0
    2820:	00 00 fb    	se        w0, w0
    2822:	65 ff 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    2824:	a0 00 20    	mov.w     #0xa, w0
    2826:	01 00 20    	mov.w     #0x0, w1
    2828:	f3 fe 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   i2c_restart();
    282a:	2e ff 07    	rcall     0x2688 <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    282c:	2e 40 90    	mov.b     [w14+2], w0
    282e:	00 04 a0    	bset.b    w0, #0x0
    2830:	00 00 fb    	se        w0, w0
    2832:	5d ff 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    2834:	8c ff 07    	rcall     0x274e <_i2c_read> <.LFB6> <.LFE5>
    2836:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    2838:	3f ff 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    283a:	1e 40 78    	mov.b     [w14], w0
}
    283c:	00 80 fa    	ulnk      
    283e:	00 00 06    	return    

00002840 <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is there, 0 means it is not there
unsigned char I2Cpoll(char addr){
    2840:	04 00 fa    	lnk       #0x4
    2842:	20 47 98    	mov.b     w0, [w14+2]
    unsigned char temp = 0;
    2844:	00 40 eb    	clr.b     w0
    2846:	00 4f 78    	mov.b     w0, [w14]
    i2c_start();
    2848:	03 ff 07    	rcall     0x2650 <_i2c_start> <.LFB2> <.LFE1>
    temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    284a:	2e 40 90    	mov.b     [w14+2], w0
    284c:	00 00 fb    	se        w0, w0
    284e:	80 00 78    	mov.w     w0, w1
    2850:	e0 ff 2f    	mov.w     #0xfffe, w0
    2852:	00 80 60    	and.w     w1, w0, w0
    2854:	4c ff 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
    2856:	00 4f 78    	mov.b     w0, [w14]
    reset_i2c_bus();
    2858:	2f ff 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
    if (temp == 0) {
    285a:	1e 40 78    	mov.b     [w14], w0
    285c:	00 04 e0    	cp0.b     w0
    285e:	02 00 3a    	bra       NZ, 0x2864 <.L48>
        return 1; // We found it, no error
    2860:	10 c0 b3    	mov.b     #0x1, w0
    2862:	01 00 37    	bra       0x2866 <.L49>

00002864 <.L48>:
    } else return 0;
    2864:	00 40 eb    	clr.b     w0

00002866 <.L49>:
}
    2866:	00 80 fa    	ulnk      
    2868:	00 00 06    	return    

0000286a <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    286a:	08 00 fa    	lnk       #0x8
    286c:	20 47 98    	mov.b     w0, [w14+2]
    286e:	21 07 98    	mov.w     w1, [w14+4]
    2870:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    2872:	00 40 eb    	clr.b     w0
    2874:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    2876:	ec fe 07    	rcall     0x2650 <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    2878:	2e 40 90    	mov.b     [w14+2], w0
    287a:	00 00 fb    	se        w0, w0
    287c:	80 00 78    	mov.w     w0, w1
    287e:	e0 ff 2f    	mov.w     #0xfffe, w0
    2880:	00 80 60    	and.w     w1, w0, w0
    2882:	35 ff 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
    2884:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    2886:	00 40 eb    	clr.b     w0
    2888:	10 47 98    	mov.b     w0, [w14+1]
    288a:	0d 00 37    	bra       0x28a6 <.L51>

0000288c <.L52>:
    err |= send_i2c_byte(dat[j]);
    288c:	1e 40 90    	mov.b     [w14+1], w0
    288e:	00 80 fb    	ze        w0, w0
    2890:	ae 00 90    	mov.w     [w14+4], w1
    2892:	00 80 40    	add.w     w1, w0, w0
    2894:	10 40 78    	mov.b     [w0], w0
    2896:	00 00 fb    	se        w0, w0
    2898:	2a ff 07    	rcall     0x26ee <_send_i2c_byte> <.LFB5> <.LFE4>
    289a:	9e 40 78    	mov.b     [w14], w1
    289c:	01 40 70    	ior.b     w0, w1, w0
    289e:	00 4f 78    	mov.b     w0, [w14]
    28a0:	1e 40 90    	mov.b     [w14+1], w0
    28a2:	00 40 e8    	inc.b     w0, w0
    28a4:	10 47 98    	mov.b     w0, [w14+1]

000028a6 <.L51>:
    28a6:	9e 40 90    	mov.b     [w14+1], w1
    28a8:	6e 40 90    	mov.b     [w14+6], w0
    28aa:	80 cf 50    	sub.b     w1, w0, [w15]
    28ac:	ef ff 39    	bra       NC, 0x288c <.L52>
  }
  reset_i2c_bus();
    28ae:	04 ff 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    28b0:	1e 40 78    	mov.b     [w14], w0
}
    28b2:	00 80 fa    	ulnk      
    28b4:	00 00 06    	return    

000028b6 <_i2c2_init>:

////////////////////////////////////////////////////////////////////////////////
// I2C2 ////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// initiates I2C3 module to baud rate BRG
void i2c2_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    28b6:	04 00 fa    	lnk       #0x4
    28b8:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C2BRG = BRG;           // Sets freq to 100kHz
    28ba:	1e 00 90    	mov.w     [w14+2], w0
    28bc:	a0 10 88    	mov.w     w0, 0x214
   I2C2CONbits.I2CEN = 0;	// Disable I2C Mode
    28be:	17 e2 a9    	bclr.b    0x217, #0x7
   I2C2CONbits.DISSLW = 1;	// Disable slew rate control
    28c0:	17 22 a8    	bset.b    0x217, #0x1
   IFS3bits.MI2C2IF = 0;	 // Clear Interrupt
    28c2:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2CONbits.I2CEN = 1;	// Enable I2C Mode
    28c4:	17 e2 a8    	bset.b    0x217, #0x7
   temp = I2C2RCV;	 // read buffer to clear buffer full
    28c6:	80 10 80    	mov.w     0x210, w0
    28c8:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    28ca:	f6 fe 07    	rcall     0x26b8 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    28cc:	00 80 fa    	ulnk      
    28ce:	00 00 06    	return    

000028d0 <_i2c2_start>:

//function iniates a start condition on bus
void i2c2_start(void){
    28d0:	02 00 fa    	lnk       #0x2
   int x = 0;
    28d2:	00 00 eb    	clr.w     w0
    28d4:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.ACKDT = 0;	//Reset any previous Ack
    28d6:	16 a2 a9    	bclr.b    0x216, #0x5
   delay_by_nop(10);
    28d8:	a0 00 20    	mov.w     #0xa, w0
    28da:	01 00 20    	mov.w     #0x0, w1
    28dc:	99 fe 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C2CONbits.SEN = 1;	//Initiate Start condition
    28de:	16 02 a8    	bset.b    0x216, #0x0
   __asm__("nop");
    28e0:	00 00 00    	nop       

   while (I2C2CONbits.SEN){    //the hardware will automatically clear Start Bit
    28e2:	07 00 37    	bra       0x28f2 <.L55>

000028e4 <.L57>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    28e4:	10 00 20    	mov.w     #0x1, w0
    28e6:	01 00 20    	mov.w     #0x0, w1
    28e8:	93 fe 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    28ea:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    28ec:	1e 00 78    	mov.w     [w14], w0
    28ee:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    28f0:	05 00 3c    	bra       GT, 0x28fc <.L58>

000028f2 <.L55>:
    28f2:	b0 10 80    	mov.w     0x216, w0
    28f4:	61 00 60    	and.w     w0, #0x1, w0
    28f6:	00 00 e0    	cp0.w     w0
    28f8:	f5 ff 3a    	bra       NZ, 0x28e4 <.L57>
    28fa:	01 00 37    	bra       0x28fe <.L56>

000028fc <.L58>:
      break;
    28fc:	00 00 00    	nop       

000028fe <.L56>:
   }
   delay_by_nop(2);
    28fe:	20 00 20    	mov.w     #0x2, w0
    2900:	01 00 20    	mov.w     #0x0, w1
    2902:	86 fe 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2904:	00 80 fa    	ulnk      
    2906:	00 00 06    	return    

00002908 <_i2c2_restart>:

void i2c2_restart(void){
    2908:	02 00 fa    	lnk       #0x2
   int x = 0;
    290a:	00 00 eb    	clr.w     w0
    290c:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.RSEN = 1;	//Initiate restart condition
    290e:	16 22 a8    	bset.b    0x216, #0x1
   __asm__("nop");
    2910:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C2CONbits.RSEN){
    2912:	07 00 37    	bra       0x2922 <.L60>

00002914 <.L62>:
      delay_by_nop(1);
    2914:	10 00 20    	mov.w     #0x1, w0
    2916:	01 00 20    	mov.w     #0x0, w1
    2918:	7b fe 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    291a:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    291c:	1e 00 78    	mov.w     [w14], w0
    291e:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    2920:	05 00 3c    	bra       GT, 0x292c <.L63>

00002922 <.L60>:
    2922:	b0 10 80    	mov.w     0x216, w0
    2924:	62 00 60    	and.w     w0, #0x2, w0
    2926:	00 00 e0    	cp0.w     w0
    2928:	f5 ff 3a    	bra       NZ, 0x2914 <.L62>
    292a:	01 00 37    	bra       0x292e <.L61>

0000292c <.L63>:
    292c:	00 00 00    	nop       

0000292e <.L61>:
   }
   delay_by_nop(2);
    292e:	20 00 20    	mov.w     #0x2, w0
    2930:	01 00 20    	mov.w     #0x0, w1
    2932:	6e fe 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    2934:	00 80 fa    	ulnk      
    2936:	00 00 06    	return    

00002938 <_reset_i2c2_bus>:


//Resets the I2C bus to Idle
void reset_i2c2_bus(void){
    2938:	02 00 fa    	lnk       #0x2
   int x = 0;
    293a:	00 00 eb    	clr.w     w0
    293c:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.PEN = 1;     //initiate stop bit
    293e:	16 42 a8    	bset.b    0x216, #0x2
   while (I2C2CONbits.PEN) {     //wait for hardware clear of stop bit
    2940:	07 00 37    	bra       0x2950 <.L65>

00002942 <.L67>:
      // delay_by_nop(1);
      delay_by_nop(1);
    2942:	10 00 20    	mov.w     #0x1, w0
    2944:	01 00 20    	mov.w     #0x0, w1
    2946:	64 fe 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    2948:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    294a:	1e 00 78    	mov.w     [w14], w0
    294c:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    294e:	05 00 3c    	bra       GT, 0x295a <.L68>

00002950 <.L65>:
    2950:	b0 10 80    	mov.w     0x216, w0
    2952:	64 00 60    	and.w     w0, #0x4, w0
    2954:	00 00 e0    	cp0.w     w0
    2956:	f5 ff 3a    	bra       NZ, 0x2942 <.L67>
    2958:	01 00 37    	bra       0x295c <.L66>

0000295a <.L68>:
    295a:	00 00 00    	nop       

0000295c <.L66>:
   }

   I2C2CONbits.RCEN = 0;
    295c:	16 62 a9    	bclr.b    0x216, #0x3
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    295e:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2STATbits.IWCOL = 0;
    2960:	18 e2 a9    	bclr.b    0x218, #0x7
   I2C2STATbits.BCL = 0;
    2962:	19 42 a9    	bclr.b    0x219, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    2964:	40 01 20    	mov.w     #0x14, w0
    2966:	01 00 20    	mov.w     #0x0, w1
    2968:	53 fe 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    296a:	00 80 fa    	ulnk      
    296c:	00 00 06    	return    

0000296e <_send_i2c2_byte>:


//basic I2C byte send
char send_i2c2_byte(int data){
    296e:	04 00 fa    	lnk       #0x4
    2970:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C2STATbits.TBF) { }
    2972:	00 00 00    	nop       

00002974 <.L70>:
    2974:	c0 10 80    	mov.w     0x218, w0
    2976:	61 00 60    	and.w     w0, #0x1, w0
    2978:	00 00 e0    	cp0.w     w0
    297a:	fc ff 3a    	bra       NZ, 0x2974 <.L70>
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    297c:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2TRN = data; // load the outgoing data byte
    297e:	1e 00 90    	mov.w     [w14+2], w0
    2980:	90 10 88    	mov.w     w0, 0x212

   for (i=0; i<500; i++){           // wait for transmission
    2982:	00 00 eb    	clr.w     w0
    2984:	00 0f 78    	mov.w     w0, [w14]
    2986:	09 00 37    	bra       0x299a <.L71>

00002988 <.L74>:
      if (!I2C2STATbits.TRSTAT) break; // if master transmit not in progress break
    2988:	c1 10 80    	mov.w     0x218, w1
    298a:	00 00 24    	mov.w     #0x4000, w0
    298c:	00 80 60    	and.w     w1, w0, w0
    298e:	00 00 e0    	cp0.w     w0
    2990:	09 00 32    	bra       Z, 0x29a4 <.L78>
      delay_by_nop(1); }
    2992:	10 00 20    	mov.w     #0x1, w0
    2994:	01 00 20    	mov.w     #0x0, w1
    2996:	3c fe 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2998:	1e 0f e8    	inc.w     [w14], [w14]

0000299a <.L71>:
    299a:	30 1f 20    	mov.w     #0x1f3, w0
    299c:	9e 00 78    	mov.w     [w14], w1
    299e:	80 8f 50    	sub.w     w1, w0, [w15]
    29a0:	f3 ff 34    	bra       LE, 0x2988 <.L74>
    29a2:	01 00 37    	bra       0x29a6 <.L73>

000029a4 <.L78>:
    29a4:	00 00 00    	nop       

000029a6 <.L73>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    29a6:	40 1f 20    	mov.w     #0x1f4, w0
    29a8:	9e 00 78    	mov.w     [w14], w1
    29aa:	80 8f 50    	sub.w     w1, w0, [w15]
    29ac:	02 00 3a    	bra       NZ, 0x29b2 <.L75>
        return(1); }    // return 1 to indicate failure
    29ae:	10 c0 b3    	mov.b     #0x1, w0
    29b0:	0c 00 37    	bra       0x29ca <.L76>

000029b2 <.L75>:

   if (I2C2STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    29b2:	c1 10 80    	mov.w     0x218, w1
    29b4:	00 00 28    	mov.w     #0x8000, w0
    29b6:	00 80 60    	and.w     w1, w0, w0
    29b8:	00 00 e0    	cp0.w     w0
    29ba:	03 00 32    	bra       Z, 0x29c2 <.L77>
      reset_i2c2_bus();
    29bc:	bd ff 07    	rcall     0x2938 <_reset_i2c2_bus> <.LFB16> <.LFE15>
      return(1); }            // abort if not found
    29be:	10 c0 b3    	mov.b     #0x1, w0
    29c0:	04 00 37    	bra       0x29ca <.L76>

000029c2 <.L77>:

   delay_by_nop(2);
    29c2:	20 00 20    	mov.w     #0x2, w0
    29c4:	01 00 20    	mov.w     #0x0, w1
    29c6:	24 fe 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    29c8:	00 40 eb    	clr.b     w0

000029ca <.L76>:
}
    29ca:	00 80 fa    	ulnk      
    29cc:	00 00 06    	return    

000029ce <_i2c2_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c2_read(void){
    29ce:	04 00 fa    	lnk       #0x4
   int i = 0;
    29d0:	00 00 eb    	clr.w     w0
    29d2:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    29d4:	00 40 eb    	clr.b     w0
    29d6:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    29d8:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {           //if no response, break
    29da:	05 00 37    	bra       0x29e6 <.L80>

000029dc <.L82>:
      i ++;
    29dc:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    29de:	00 7d 20    	mov.w     #0x7d0, w0
    29e0:	9e 00 78    	mov.w     [w14], w1
    29e2:	80 8f 50    	sub.w     w1, w0, [w15]
    29e4:	05 00 3c    	bra       GT, 0x29f0 <.L83>

000029e6 <.L80>:
    29e6:	c0 10 80    	mov.w     0x218, w0
    29e8:	62 00 60    	and.w     w0, #0x2, w0
    29ea:	00 00 e0    	cp0.w     w0
    29ec:	f7 ff 32    	bra       Z, 0x29dc <.L82>
    29ee:	01 00 37    	bra       0x29f2 <.L81>

000029f0 <.L83>:
    29f0:	00 00 00    	nop       

000029f2 <.L81>:

   data = I2C2RCV;       //get data from I2C2RCV register
    29f2:	80 10 80    	mov.w     0x210, w0
    29f4:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    29f6:	2e 40 90    	mov.b     [w14+2], w0
}
    29f8:	00 80 fa    	ulnk      
    29fa:	00 00 06    	return    

000029fc <_i2c2_read_ack>:


//function reads data, returns the read data, with ack
char i2c2_read_ack(void){	//does not reset bus!!!
    29fc:	04 00 fa    	lnk       #0x4
   int i = 0;
    29fe:	00 00 eb    	clr.w     w0
    2a00:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2a02:	00 40 eb    	clr.b     w0
    2a04:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    2a06:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    2a08:	05 00 37    	bra       0x2a14 <.L85>

00002a0a <.L87>:
      i++;
    2a0a:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2a0c:	00 7d 20    	mov.w     #0x7d0, w0
    2a0e:	9e 00 78    	mov.w     [w14], w1
    2a10:	80 8f 50    	sub.w     w1, w0, [w15]
    2a12:	05 00 3c    	bra       GT, 0x2a1e <.L88>

00002a14 <.L85>:
    2a14:	c0 10 80    	mov.w     0x218, w0
    2a16:	62 00 60    	and.w     w0, #0x2, w0
    2a18:	00 00 e0    	cp0.w     w0
    2a1a:	f7 ff 32    	bra       Z, 0x2a0a <.L87>
    2a1c:	01 00 37    	bra       0x2a20 <.L86>

00002a1e <.L88>:
    2a1e:	00 00 00    	nop       

00002a20 <.L86>:

   data = I2C2RCV;               //get data from I2C2RCV register
    2a20:	80 10 80    	mov.w     0x210, w0
    2a22:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKEN = 1;        //start ACK generation
    2a24:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    2a26:	a0 00 20    	mov.w     #0xa, w0
    2a28:	01 00 20    	mov.w     #0x0, w1
    2a2a:	f2 fd 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2a2c:	2e 40 90    	mov.b     [w14+2], w0
}
    2a2e:	00 80 fa    	ulnk      
    2a30:	00 00 06    	return    

00002a32 <_i2c2_read_nack>:

char i2c2_read_nack(void){	//does not reset bus!!!
    2a32:	04 00 fa    	lnk       #0x4
   int i = 0;
    2a34:	00 00 eb    	clr.w     w0
    2a36:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2a38:	00 40 eb    	clr.b     w0
    2a3a:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    2a3c:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    2a3e:	05 00 37    	bra       0x2a4a <.L90>

00002a40 <.L92>:
      i++;
    2a40:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2a42:	00 7d 20    	mov.w     #0x7d0, w0
    2a44:	9e 00 78    	mov.w     [w14], w1
    2a46:	80 8f 50    	sub.w     w1, w0, [w15]
    2a48:	05 00 3c    	bra       GT, 0x2a54 <.L93>

00002a4a <.L90>:
    2a4a:	c0 10 80    	mov.w     0x218, w0
    2a4c:	62 00 60    	and.w     w0, #0x2, w0
    2a4e:	00 00 e0    	cp0.w     w0
    2a50:	f7 ff 32    	bra       Z, 0x2a40 <.L92>
    2a52:	01 00 37    	bra       0x2a56 <.L91>

00002a54 <.L93>:
    2a54:	00 00 00    	nop       

00002a56 <.L91>:

   data = I2C2RCV;               //get data from I2C2RCV register
    2a56:	80 10 80    	mov.w     0x210, w0
    2a58:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    2a5a:	16 a2 a8    	bset.b    0x216, #0x5
   I2C2CONbits.ACKEN = 1;        //start ack generation
    2a5c:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    2a5e:	a0 00 20    	mov.w     #0xa, w0
    2a60:	01 00 20    	mov.w     #0x0, w1
    2a62:	d6 fd 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2a64:	2e 40 90    	mov.b     [w14+2], w0
}
    2a66:	00 80 fa    	ulnk      
    2a68:	00 00 06    	return    

00002a6a <_I2C2poll>:

// function checks if device at addr i bus
// 1 means it is not there, 0 means it is not there
unsigned char I2C2poll(char addr){
    2a6a:	04 00 fa    	lnk       #0x4
    2a6c:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    2a6e:	00 40 eb    	clr.b     w0
    2a70:	00 4f 78    	mov.b     w0, [w14]
   i2c2_start();
    2a72:	2e ff 07    	rcall     0x28d0 <_i2c2_start> <.LFB14> <.LFE13>
   temp = send_i2c2_byte((addr) & (0xfffe)); // set /W bit
    2a74:	2e 40 90    	mov.b     [w14+2], w0
    2a76:	00 00 fb    	se        w0, w0
    2a78:	80 00 78    	mov.w     w0, w1
    2a7a:	e0 ff 2f    	mov.w     #0xfffe, w0
    2a7c:	00 80 60    	and.w     w1, w0, w0
    2a7e:	77 ff 07    	rcall     0x296e <_send_i2c2_byte> <.LFB17> <.LFE16>
    2a80:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c2_bus();
    2a82:	5a ff 07    	rcall     0x2938 <_reset_i2c2_bus> <.LFB16> <.LFE15>
   if (temp == 0) {
    2a84:	1e 40 78    	mov.b     [w14], w0
    2a86:	00 04 e0    	cp0.b     w0
    2a88:	02 00 3a    	bra       NZ, 0x2a8e <.L95>
       return 1; // We found it, no error
    2a8a:	10 c0 b3    	mov.b     #0x1, w0
    2a8c:	01 00 37    	bra       0x2a90 <.L96>

00002a8e <.L95>:
   } else return 0;
    2a8e:	00 40 eb    	clr.b     w0

00002a90 <.L96>:
}
    2a90:	00 80 fa    	ulnk      
    2a92:	00 00 06    	return    

00002a94 <_main>:
    2a94:	00 00 fa    	lnk       #0x0
    2a96:	4f 04 07    	rcall     0x3336 <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    2a98:	d0 09 20    	mov.w     #0x9d, w0
    2a9a:	0d ff 07    	rcall     0x28b6 <_i2c2_init> <.LFB13> <.LFE12>
    2a9c:	00 01 20    	mov.w     #0x10, w0
    2a9e:	d0 10 88    	mov.w     w0, 0x21a
    2aa0:	1c 22 ef    	clr.w     0x21c
    2aa2:	9a 20 a8    	bset.b    0x9a, #0x1
    2aa4:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    2aa6:	d8 82 a9    	bclr.b    0x2d8, #0x4
    2aa8:	1e 02 07    	rcall     0x2ee6 <_init_ajuart> <.L0> <.LFB0> <.LFE11> <.Letext0> <.Ltext0>
    2aaa:	80 3e 20    	mov.w     #0x3e8, w0
    2aac:	c4 fd 07    	rcall     0x2636 <_i2c_init> <.LFB1> <.LFE0>
    2aae:	c0 09 2a    	mov.w     #0xa09c, w0
    2ab0:	10 40 78    	mov.b     [w0], w0
    2ab2:	80 40 78    	mov.b     w0, w1
    2ab4:	a0 0b 21    	mov.w     #0x10ba, w0
    2ab6:	fa fa 07    	rcall     0x20ac <_led_begin> <.L0> <.LFB0> <.Ltext0>
    2ab8:	00 02 20    	mov.w     #0x20, w0
    2aba:	20 08 88    	mov.w     w0, 0x104
    2abc:	00 71 21    	mov.w     #0x1710, w0
    2abe:	10 08 88    	mov.w     w0, 0x102
    2ac0:	00 21 ef    	clr.w     0x100
    2ac2:	84 60 a9    	bclr.b    0x84, #0x3
    2ac4:	94 60 a8    	bset.b    0x94, #0x3
    2ac6:	05 e1 a8    	bset.b    0x105, #0x7
    2ac8:	00 bf 22    	mov.w     #0x2bf0, w0
    2aca:	00 40 88    	mov.w     w0, 0x800

00002acc <.L5>:
    2acc:	31 81 20    	mov.w     #0x813, w1
    2ace:	91 40 78    	mov.b     [w1], w1
    2ad0:	60 40 80    	mov.w     0x80c, w0
    2ad2:	a7 01 07    	rcall     0x2e22 <_dispNumber> <.LFB11> <.LFE10>
    2ad4:	00 40 80    	mov.w     0x800, w0
    2ad6:	00 00 01    	call      w0
    2ad8:	f9 ff 37    	bra       0x2acc <.L5>

00002ada <_firstnum>:
    2ada:	02 00 fa    	lnk       #0x2
    2adc:	93 01 07    	rcall     0x2e04 <_ledoff> <.LFB10> <.LFE9>
    2ade:	dc e2 a8    	bset.b    0x2dc, #0x7
    2ae0:	71 80 20    	mov.w     #0x807, w1
    2ae2:	91 40 78    	mov.b     [w1], w1
    2ae4:	06 c8 bf    	mov.b     0x806, WREG
    2ae6:	00 c0 50    	sub.b     w1, w0, w0
    2ae8:	00 4f 78    	mov.b     w0, [w14]
    2aea:	1e 40 78    	mov.b     [w14], w0
    2aec:	00 04 e0    	cp0.b     w0
    2aee:	04 00 3d    	bra       GE, 0x2af8 <.L7>
    2af0:	1e 40 78    	mov.b     [w14], w0
    2af2:	f3 4f 40    	add.b     w0, #0x13, [w15]
    2af4:	01 00 35    	bra       LT, 0x2af8 <.L7>
    2af6:	11 68 ef    	clr.b     0x811

00002af8 <.L7>:
    2af8:	61 80 20    	mov.w     #0x806, w1
    2afa:	91 40 78    	mov.b     [w1], w1
    2afc:	0e c8 bf    	mov.b     0x80e, WREG
    2afe:	80 cf 50    	sub.b     w1, w0, [w15]
    2b00:	02 00 3a    	bra       NZ, 0x2b06 <.L8>
    2b02:	10 c0 b3    	mov.b     #0x1, w0
    2b04:	12 e8 b7    	mov.b     WREG, 0x812

00002b06 <.L8>:
    2b06:	71 80 20    	mov.w     #0x807, w1
    2b08:	91 40 78    	mov.b     [w1], w1
    2b0a:	0e c8 bf    	mov.b     0x80e, WREG
    2b0c:	80 cf 50    	sub.b     w1, w0, [w15]
    2b0e:	07 00 3a    	bra       NZ, 0x2b1e <.L9>
    2b10:	12 c8 bf    	mov.b     0x812, WREG
    2b12:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2b14:	04 00 3a    	bra       NZ, 0x2b1e <.L9>
    2b16:	11 c8 bf    	mov.b     0x811, WREG
    2b18:	00 40 e8    	inc.b     w0, w0
    2b1a:	11 e8 b7    	mov.b     WREG, 0x811
    2b1c:	12 68 ef    	clr.b     0x812

00002b1e <.L9>:
    2b1e:	11 c8 bf    	mov.b     0x811, WREG
    2b20:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2b22:	09 00 36    	bra       LEU, 0x2b36 <.L10>
    2b24:	12 c8 bf    	mov.b     0x812, WREG
    2b26:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2b28:	06 00 3a    	bra       NZ, 0x2b36 <.L10>
    2b2a:	c0 b3 22    	mov.w     #0x2b3c, w0
    2b2c:	20 40 88    	mov.w     w0, 0x804
    2b2e:	11 68 ef    	clr.b     0x811
    2b30:	12 68 ef    	clr.b     0x812
    2b32:	06 c8 bf    	mov.b     0x806, WREG
    2b34:	07 e8 b7    	mov.b     WREG, 0x807

00002b36 <.L10>:
    2b36:	13 68 ef    	clr.b     0x813
    2b38:	00 80 fa    	ulnk      
    2b3a:	00 00 06    	return    

00002b3c <_secondnum>:
    2b3c:	02 00 fa    	lnk       #0x2
    2b3e:	62 01 07    	rcall     0x2e04 <_ledoff> <.LFB10> <.LFE9>
    2b40:	ec 02 a8    	bset.b    0x2ec, #0x0
    2b42:	71 80 20    	mov.w     #0x807, w1
    2b44:	91 40 78    	mov.b     [w1], w1
    2b46:	06 c8 bf    	mov.b     0x806, WREG
    2b48:	00 c0 50    	sub.b     w1, w0, w0
    2b4a:	00 4f 78    	mov.b     w0, [w14]
    2b4c:	61 80 20    	mov.w     #0x806, w1
    2b4e:	91 40 78    	mov.b     [w1], w1
    2b50:	0f c8 bf    	mov.b     0x80f, WREG
    2b52:	80 cf 50    	sub.b     w1, w0, [w15]
    2b54:	02 00 3a    	bra       NZ, 0x2b5a <.L12>
    2b56:	10 c0 b3    	mov.b     #0x1, w0
    2b58:	12 e8 b7    	mov.b     WREG, 0x812

00002b5a <.L12>:
    2b5a:	71 80 20    	mov.w     #0x807, w1
    2b5c:	91 40 78    	mov.b     [w1], w1
    2b5e:	0f c8 bf    	mov.b     0x80f, WREG
    2b60:	80 cf 50    	sub.b     w1, w0, [w15]
    2b62:	07 00 3a    	bra       NZ, 0x2b72 <.L13>
    2b64:	12 c8 bf    	mov.b     0x812, WREG
    2b66:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2b68:	04 00 3a    	bra       NZ, 0x2b72 <.L13>
    2b6a:	11 c8 bf    	mov.b     0x811, WREG
    2b6c:	00 40 e8    	inc.b     w0, w0
    2b6e:	11 e8 b7    	mov.b     WREG, 0x811
    2b70:	12 68 ef    	clr.b     0x812

00002b72 <.L13>:
    2b72:	11 c8 bf    	mov.b     0x811, WREG
    2b74:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2b76:	09 00 3a    	bra       NZ, 0x2b8a <.L14>
    2b78:	12 c8 bf    	mov.b     0x812, WREG
    2b7a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2b7c:	06 00 3a    	bra       NZ, 0x2b8a <.L14>
    2b7e:	c0 ba 22    	mov.w     #0x2bac, w0
    2b80:	20 40 88    	mov.w     w0, 0x804
    2b82:	11 68 ef    	clr.b     0x811
    2b84:	12 68 ef    	clr.b     0x812
    2b86:	06 c8 bf    	mov.b     0x806, WREG
    2b88:	07 e8 b7    	mov.b     WREG, 0x807

00002b8a <.L14>:
    2b8a:	1e 40 78    	mov.b     [w14], w0
    2b8c:	00 04 e0    	cp0.b     w0
    2b8e:	0a 00 34    	bra       LE, 0x2ba4 <.L15>
    2b90:	1e 40 78    	mov.b     [w14], w0
    2b92:	f3 4f 50    	sub.b     w0, #0x13, [w15]
    2b94:	07 00 3c    	bra       GT, 0x2ba4 <.L15>
    2b96:	11 68 ef    	clr.b     0x811
    2b98:	12 68 ef    	clr.b     0x812
    2b9a:	a0 ad 22    	mov.w     #0x2ada, w0
    2b9c:	20 40 88    	mov.w     w0, 0x804
    2b9e:	1b c8 bf    	mov.b     0x81b, WREG
    2ba0:	00 40 e8    	inc.b     w0, w0
    2ba2:	1b e8 b7    	mov.b     WREG, 0x81b

00002ba4 <.L15>:
    2ba4:	10 c0 b3    	mov.b     #0x1, w0
    2ba6:	13 e8 b7    	mov.b     WREG, 0x813
    2ba8:	00 80 fa    	ulnk      
    2baa:	00 00 06    	return    

00002bac <_thirdnum>:
    2bac:	02 00 fa    	lnk       #0x2
    2bae:	2a 01 07    	rcall     0x2e04 <_ledoff> <.LFB10> <.LFE9>
    2bb0:	ec 22 a8    	bset.b    0x2ec, #0x1
    2bb2:	71 80 20    	mov.w     #0x807, w1
    2bb4:	91 40 78    	mov.b     [w1], w1
    2bb6:	06 c8 bf    	mov.b     0x806, WREG
    2bb8:	00 c0 50    	sub.b     w1, w0, w0
    2bba:	00 4f 78    	mov.b     w0, [w14]
    2bbc:	61 80 20    	mov.w     #0x806, w1
    2bbe:	91 40 78    	mov.b     [w1], w1
    2bc0:	10 c8 bf    	mov.b     0x810, WREG
    2bc2:	80 cf 50    	sub.b     w1, w0, [w15]
    2bc4:	05 00 3a    	bra       NZ, 0x2bd0 <.L17>
    2bc6:	a0 ad 22    	mov.w     #0x2ada, w0
    2bc8:	20 40 88    	mov.w     w0, 0x804
    2bca:	11 68 ef    	clr.b     0x811
    2bcc:	00 d1 22    	mov.w     #0x2d10, w0
    2bce:	00 40 88    	mov.w     w0, 0x800

00002bd0 <.L17>:
    2bd0:	1e 40 78    	mov.b     [w14], w0
    2bd2:	00 04 e0    	cp0.b     w0
    2bd4:	09 00 3d    	bra       GE, 0x2be8 <.L18>
    2bd6:	1e 40 78    	mov.b     [w14], w0
    2bd8:	f3 4f 40    	add.b     w0, #0x13, [w15]
    2bda:	06 00 35    	bra       LT, 0x2be8 <.L18>
    2bdc:	a0 ad 22    	mov.w     #0x2ada, w0
    2bde:	20 40 88    	mov.w     w0, 0x804
    2be0:	11 68 ef    	clr.b     0x811
    2be2:	1b c8 bf    	mov.b     0x81b, WREG
    2be4:	00 40 e8    	inc.b     w0, w0
    2be6:	1b e8 b7    	mov.b     WREG, 0x81b

00002be8 <.L18>:
    2be8:	20 c0 b3    	mov.b     #0x2, w0
    2bea:	13 e8 b7    	mov.b     WREG, 0x813
    2bec:	00 80 fa    	ulnk      
    2bee:	00 00 06    	return    

00002bf0 <_setup>:
    2bf0:	00 00 fa    	lnk       #0x0
    2bf2:	01 40 80    	mov.w     0x800, w1
    2bf4:	10 40 80    	mov.w     0x802, w0
    2bf6:	80 8f 50    	sub.w     w1, w0, [w15]
    2bf8:	0a 00 32    	bra       Z, 0x2c0e <.L20>
    2bfa:	00 40 80    	mov.w     0x800, w0
    2bfc:	10 40 88    	mov.w     w0, 0x802
    2bfe:	da 82 a8    	bset.b    0x2da, #0x4
    2c00:	10 00 20    	mov.w     #0x1, w0
    2c02:	01 00 20    	mov.w     #0x0, w1
    2c04:	05 fd 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2c06:	da a2 a8    	bset.b    0x2da, #0x5
    2c08:	1a 68 ef    	clr.b     0x81a
    2c0a:	1b 68 ef    	clr.b     0x81b
    2c0c:	1c 68 ef    	clr.b     0x81c

00002c0e <.L20>:
    2c0e:	16 c8 bf    	mov.b     0x816, WREG
    2c10:	00 80 fb    	ze        w0, w0
    2c12:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2c14:	1c 00 32    	bra       Z, 0x2c4e <.L24>
    2c16:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2c18:	05 00 3c    	bra       GT, 0x2c24 <.L28>
    2c1a:	00 00 e0    	cp0.w     w0
    2c1c:	0a 00 32    	bra       Z, 0x2c32 <.L22>
    2c1e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2c20:	0f 00 32    	bra       Z, 0x2c40 <.L23>
    2c22:	31 00 37    	bra       0x2c86 <.L21>

00002c24 <.L28>:
    2c24:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    2c26:	21 00 32    	bra       Z, 0x2c6a <.L26>
    2c28:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    2c2a:	18 00 35    	bra       LT, 0x2c5c <.L25>
    2c2c:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2c2e:	24 00 32    	bra       Z, 0x2c78 <.L27>
    2c30:	2a 00 37    	bra       0x2c86 <.L21>

00002c32 <.L22>:
    2c32:	20 c1 b3    	mov.b     #0x12, w0
    2c34:	0e e8 b7    	mov.b     WREG, 0x80e
    2c36:	70 c0 b3    	mov.b     #0x7, w0
    2c38:	0f e8 b7    	mov.b     WREG, 0x80f
    2c3a:	f0 c0 b3    	mov.b     #0xf, w0
    2c3c:	10 e8 b7    	mov.b     WREG, 0x810
    2c3e:	23 00 37    	bra       0x2c86 <.L21>

00002c40 <.L23>:
    2c40:	e0 c0 b3    	mov.b     #0xe, w0
    2c42:	0e e8 b7    	mov.b     WREG, 0x80e
    2c44:	80 c0 b3    	mov.b     #0x8, w0
    2c46:	0f e8 b7    	mov.b     WREG, 0x80f
    2c48:	50 c1 b3    	mov.b     #0x15, w0
    2c4a:	10 e8 b7    	mov.b     WREG, 0x810
    2c4c:	1c 00 37    	bra       0x2c86 <.L21>

00002c4e <.L24>:
    2c4e:	90 c0 b3    	mov.b     #0x9, w0
    2c50:	0e e8 b7    	mov.b     WREG, 0x80e
    2c52:	60 c0 b3    	mov.b     #0x6, w0
    2c54:	0f e8 b7    	mov.b     WREG, 0x80f
    2c56:	10 c0 b3    	mov.b     #0x1, w0
    2c58:	10 e8 b7    	mov.b     WREG, 0x810
    2c5a:	15 00 37    	bra       0x2c86 <.L21>

00002c5c <.L25>:
    2c5c:	a0 c0 b3    	mov.b     #0xa, w0
    2c5e:	0e e8 b7    	mov.b     WREG, 0x80e
    2c60:	90 c0 b3    	mov.b     #0x9, w0
    2c62:	0f e8 b7    	mov.b     WREG, 0x80f
    2c64:	50 c0 b3    	mov.b     #0x5, w0
    2c66:	10 e8 b7    	mov.b     WREG, 0x810
    2c68:	0e 00 37    	bra       0x2c86 <.L21>

00002c6a <.L26>:
    2c6a:	a0 c1 b3    	mov.b     #0x1a, w0
    2c6c:	0e e8 b7    	mov.b     WREG, 0x80e
    2c6e:	50 c0 b3    	mov.b     #0x5, w0
    2c70:	0f e8 b7    	mov.b     WREG, 0x80f
    2c72:	90 c0 b3    	mov.b     #0x9, w0
    2c74:	10 e8 b7    	mov.b     WREG, 0x810
    2c76:	07 00 37    	bra       0x2c86 <.L21>

00002c78 <.L27>:
    2c78:	60 c1 b3    	mov.b     #0x16, w0
    2c7a:	0e e8 b7    	mov.b     WREG, 0x80e
    2c7c:	90 c0 b3    	mov.b     #0x9, w0
    2c7e:	0f e8 b7    	mov.b     WREG, 0x80f
    2c80:	10 c1 b3    	mov.b     #0x11, w0
    2c82:	10 e8 b7    	mov.b     WREG, 0x810
    2c84:	00 00 00    	nop       

00002c86 <.L21>:
    2c86:	a0 ad 22    	mov.w     #0x2ada, w0
    2c88:	20 40 88    	mov.w     w0, 0x804
    2c8a:	16 c8 bf    	mov.b     0x816, WREG
    2c8c:	00 80 fb    	ze        w0, w0
    2c8e:	80 1f 78    	mov.w     w0, [w15++]
    2c90:	d0 09 2a    	mov.w     #0xa09d, w0
    2c92:	80 1f 78    	mov.w     w0, [w15++]
    2c94:	a0 03 21    	mov.w     #0x103a, w0
    2c96:	8c f4 07    	rcall     0x15b0 <__sprintf_cdnopuxX>
    2c98:	e4 87 57    	sub.w     w15, #0x4, w15
    2c9a:	a0 03 21    	mov.w     #0x103a, w0
    2c9c:	b1 01 07    	rcall     0x3000 <_U1_puts> <.LFB7> <.LFE6>
    2c9e:	d0 c0 b3    	mov.b     #0xd, w0
    2ca0:	75 01 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    2ca2:	a0 c0 b3    	mov.b     #0xa, w0
    2ca4:	73 01 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    2ca6:	69 01 07    	rcall     0x2f7a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2ca8:	1d c8 bf    	mov.b     0x81d, WREG
    2caa:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2cac:	02 00 3a    	bra       NZ, 0x2cb2 <.L29>
    2cae:	80 cc 22    	mov.w     #0x2cc8, w0
    2cb0:	00 40 88    	mov.w     w0, 0x800

00002cb2 <.L29>:
    2cb2:	01 40 80    	mov.w     0x800, w1
    2cb4:	10 40 80    	mov.w     0x802, w0
    2cb6:	80 8f 50    	sub.w     w1, w0, [w15]
    2cb8:	05 00 32    	bra       Z, 0x2cc4 <.L19>
    2cba:	da a2 a9    	bclr.b    0x2da, #0x5
    2cbc:	10 00 20    	mov.w     #0x1, w0
    2cbe:	01 00 20    	mov.w     #0x0, w1
    2cc0:	a7 fc 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2cc2:	da 82 a9    	bclr.b    0x2da, #0x4

00002cc4 <.L19>:
    2cc4:	00 80 fa    	ulnk      
    2cc6:	00 00 06    	return    

00002cc8 <_run>:
    2cc8:	00 00 fa    	lnk       #0x0
    2cca:	01 40 80    	mov.w     0x800, w1
    2ccc:	10 40 80    	mov.w     0x802, w0
    2cce:	80 8f 50    	sub.w     w1, w0, [w15]
    2cd0:	03 00 32    	bra       Z, 0x2cd8 <.L32>
    2cd2:	00 40 80    	mov.w     0x800, w0
    2cd4:	10 40 88    	mov.w     w0, 0x802
    2cd6:	da a2 a8    	bset.b    0x2da, #0x5

00002cd8 <.L32>:
    2cd8:	20 40 80    	mov.w     0x804, w0
    2cda:	00 00 01    	call      w0
    2cdc:	1e c8 bf    	mov.b     0x81e, WREG
    2cde:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2ce0:	03 00 3a    	bra       NZ, 0x2ce8 <.L33>
    2ce2:	60 d5 22    	mov.w     #0x2d56, w0
    2ce4:	00 40 88    	mov.w     w0, 0x800
    2ce6:	0d 00 37    	bra       0x2d02 <.L34>

00002ce8 <.L33>:
    2ce8:	1f c8 bf    	mov.b     0x81f, WREG
    2cea:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2cec:	03 00 3a    	bra       NZ, 0x2cf4 <.L35>
    2cee:	c0 da 22    	mov.w     #0x2dac, w0
    2cf0:	00 40 88    	mov.w     w0, 0x800
    2cf2:	07 00 37    	bra       0x2d02 <.L34>

00002cf4 <.L35>:
    2cf4:	91 16 80    	mov.w     0x2d2, w1
    2cf6:	00 00 21    	mov.w     #0x1000, w0
    2cf8:	00 80 60    	and.w     w1, w0, w0
    2cfa:	00 00 e0    	cp0.w     w0
    2cfc:	02 00 3a    	bra       NZ, 0x2d02 <.L34>
    2cfe:	00 d1 22    	mov.w     #0x2d10, w0
    2d00:	00 40 88    	mov.w     w0, 0x800

00002d02 <.L34>:
    2d02:	01 40 80    	mov.w     0x800, w1
    2d04:	10 40 80    	mov.w     0x802, w0
    2d06:	80 8f 50    	sub.w     w1, w0, [w15]
    2d08:	01 00 32    	bra       Z, 0x2d0c <.L31>
    2d0a:	da a2 a9    	bclr.b    0x2da, #0x5

00002d0c <.L31>:
    2d0c:	00 80 fa    	ulnk      
    2d0e:	00 00 06    	return    

00002d10 <_solved>:
    2d10:	00 00 fa    	lnk       #0x0
    2d12:	01 40 80    	mov.w     0x800, w1
    2d14:	10 40 80    	mov.w     0x802, w0
    2d16:	80 8f 50    	sub.w     w1, w0, [w15]
    2d18:	05 00 32    	bra       Z, 0x2d24 <.L38>
    2d1a:	00 40 80    	mov.w     0x800, w0
    2d1c:	10 40 88    	mov.w     w0, 0x802
    2d1e:	10 c0 b3    	mov.b     #0x1, w0
    2d20:	1a e8 b7    	mov.b     WREG, 0x81a
    2d22:	da 82 a8    	bset.b    0x2da, #0x4

00002d24 <.L38>:
    2d24:	30 c0 b3    	mov.b     #0x3, w0
    2d26:	13 e8 b7    	mov.b     WREG, 0x813
    2d28:	13 c8 bf    	mov.b     0x813, WREG
    2d2a:	80 40 78    	mov.b     w0, w1
    2d2c:	f0 00 20    	mov.w     #0xf, w0
    2d2e:	79 00 07    	rcall     0x2e22 <_dispNumber> <.LFB11> <.LFE10>
    2d30:	1e c8 bf    	mov.b     0x81e, WREG
    2d32:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2d34:	03 00 3a    	bra       NZ, 0x2d3c <.L39>
    2d36:	60 d5 22    	mov.w     #0x2d56, w0
    2d38:	00 40 88    	mov.w     w0, 0x800
    2d3a:	05 00 37    	bra       0x2d46 <.L40>

00002d3c <.L39>:
    2d3c:	1f c8 bf    	mov.b     0x81f, WREG
    2d3e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2d40:	02 00 3a    	bra       NZ, 0x2d46 <.L40>
    2d42:	c0 da 22    	mov.w     #0x2dac, w0
    2d44:	00 40 88    	mov.w     w0, 0x800

00002d46 <.L40>:
    2d46:	01 40 80    	mov.w     0x800, w1
    2d48:	10 40 80    	mov.w     0x802, w0
    2d4a:	80 8f 50    	sub.w     w1, w0, [w15]
    2d4c:	02 00 32    	bra       Z, 0x2d52 <.L37>
    2d4e:	1a 68 ef    	clr.b     0x81a
    2d50:	da 82 a9    	bclr.b    0x2da, #0x4

00002d52 <.L37>:
    2d52:	00 80 fa    	ulnk      
    2d54:	00 00 06    	return    

00002d56 <_end_win>:
    2d56:	00 00 fa    	lnk       #0x0
    2d58:	01 40 80    	mov.w     0x800, w1
    2d5a:	10 40 80    	mov.w     0x802, w0
    2d5c:	80 8f 50    	sub.w     w1, w0, [w15]
    2d5e:	0a 00 32    	bra       Z, 0x2d74 <.L43>
    2d60:	00 40 80    	mov.w     0x800, w0
    2d62:	10 40 88    	mov.w     w0, 0x802
    2d64:	da 82 a8    	bset.b    0x2da, #0x4
    2d66:	00 03 20    	mov.w     #0x30, w0
    2d68:	20 08 88    	mov.w     w0, 0x104
    2d6a:	10 a1 27    	mov.w     #0x7a11, w0
    2d6c:	10 08 88    	mov.w     w0, 0x102
    2d6e:	00 21 ef    	clr.w     0x100
    2d70:	84 60 a9    	bclr.b    0x84, #0x3
    2d72:	05 e1 a8    	bset.b    0x105, #0x7

00002d74 <.L43>:
    2d74:	20 04 80    	mov.w     0x84, w0
    2d76:	68 00 60    	and.w     w0, #0x8, w0
    2d78:	00 00 e0    	cp0.w     w0
    2d7a:	10 00 32    	bra       Z, 0x2d9c <.L44>
    2d7c:	84 60 a9    	bclr.b    0x84, #0x3
    2d7e:	d0 16 80    	mov.w     0x2da, w0
    2d80:	70 00 60    	and.w     w0, #0x10, w0
    2d82:	00 f0 a7    	btsc.w    w0, #0xf
    2d84:	00 00 ea    	neg.w     w0, w0
    2d86:	00 00 e9    	dec.w     w0, w0
    2d88:	4f 00 de    	lsr.w     w0, #0xf, w0
    2d8a:	00 40 78    	mov.b     w0, w0
    2d8c:	00 80 fb    	ze        w0, w0
    2d8e:	61 00 60    	and.w     w0, #0x1, w0
    2d90:	44 00 dd    	sl.w      w0, #0x4, w0
    2d92:	d2 16 80    	mov.w     0x2da, w2
    2d94:	f1 fe 2f    	mov.w     #0xffef, w1
    2d96:	81 00 61    	and.w     w2, w1, w1
    2d98:	01 00 70    	ior.w     w0, w1, w0
    2d9a:	d0 16 88    	mov.w     w0, 0x2da

00002d9c <.L44>:
    2d9c:	01 40 80    	mov.w     0x800, w1
    2d9e:	10 40 80    	mov.w     0x802, w0
    2da0:	80 8f 50    	sub.w     w1, w0, [w15]
    2da2:	02 00 32    	bra       Z, 0x2da8 <.L42>
    2da4:	da 82 a9    	bclr.b    0x2da, #0x4
    2da6:	05 e1 a9    	bclr.b    0x105, #0x7

00002da8 <.L42>:
    2da8:	00 80 fa    	ulnk      
    2daa:	00 00 06    	return    

00002dac <_end_fail>:
    2dac:	00 00 fa    	lnk       #0x0
    2dae:	01 40 80    	mov.w     0x800, w1
    2db0:	10 40 80    	mov.w     0x802, w0
    2db2:	80 8f 50    	sub.w     w1, w0, [w15]
    2db4:	0a 00 32    	bra       Z, 0x2dca <.L47>
    2db6:	00 40 80    	mov.w     0x800, w0
    2db8:	10 40 88    	mov.w     w0, 0x802
    2dba:	da a2 a8    	bset.b    0x2da, #0x5
    2dbc:	00 03 20    	mov.w     #0x30, w0
    2dbe:	20 08 88    	mov.w     w0, 0x104
    2dc0:	10 a1 27    	mov.w     #0x7a11, w0
    2dc2:	10 08 88    	mov.w     w0, 0x102
    2dc4:	00 21 ef    	clr.w     0x100
    2dc6:	84 60 a9    	bclr.b    0x84, #0x3
    2dc8:	05 e1 a8    	bset.b    0x105, #0x7

00002dca <.L47>:
    2dca:	20 04 80    	mov.w     0x84, w0
    2dcc:	68 00 60    	and.w     w0, #0x8, w0
    2dce:	00 00 e0    	cp0.w     w0
    2dd0:	11 00 32    	bra       Z, 0x2df4 <.L48>
    2dd2:	84 60 a9    	bclr.b    0x84, #0x3
    2dd4:	d1 16 80    	mov.w     0x2da, w1
    2dd6:	00 02 20    	mov.w     #0x20, w0
    2dd8:	00 80 60    	and.w     w1, w0, w0
    2dda:	00 f0 a7    	btsc.w    w0, #0xf
    2ddc:	00 00 ea    	neg.w     w0, w0
    2dde:	00 00 e9    	dec.w     w0, w0
    2de0:	4f 00 de    	lsr.w     w0, #0xf, w0
    2de2:	00 40 78    	mov.b     w0, w0
    2de4:	00 80 fb    	ze        w0, w0
    2de6:	61 00 60    	and.w     w0, #0x1, w0
    2de8:	45 00 dd    	sl.w      w0, #0x5, w0
    2dea:	d2 16 80    	mov.w     0x2da, w2
    2dec:	f1 fd 2f    	mov.w     #0xffdf, w1
    2dee:	81 00 61    	and.w     w2, w1, w1
    2df0:	01 00 70    	ior.w     w0, w1, w0
    2df2:	d0 16 88    	mov.w     w0, 0x2da

00002df4 <.L48>:
    2df4:	01 40 80    	mov.w     0x800, w1
    2df6:	10 40 80    	mov.w     0x802, w0
    2df8:	80 8f 50    	sub.w     w1, w0, [w15]
    2dfa:	02 00 32    	bra       Z, 0x2e00 <.L46>
    2dfc:	da a2 a9    	bclr.b    0x2da, #0x5
    2dfe:	05 e1 a9    	bclr.b    0x105, #0x7

00002e00 <.L46>:
    2e00:	00 80 fa    	ulnk      
    2e02:	00 00 06    	return    

00002e04 <_ledoff>:
    2e04:	00 00 fa    	lnk       #0x0
    2e06:	dc e2 a9    	bclr.b    0x2dc, #0x7
    2e08:	10 00 20    	mov.w     #0x1, w0
    2e0a:	01 00 20    	mov.w     #0x0, w1
    2e0c:	01 fc 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2e0e:	ec 02 a9    	bclr.b    0x2ec, #0x0
    2e10:	10 00 20    	mov.w     #0x1, w0
    2e12:	01 00 20    	mov.w     #0x0, w1
    2e14:	fd fb 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2e16:	ec 22 a9    	bclr.b    0x2ec, #0x1
    2e18:	10 00 20    	mov.w     #0x1, w0
    2e1a:	01 00 20    	mov.w     #0x0, w1
    2e1c:	f9 fb 07    	rcall     0x2610 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2e1e:	00 80 fa    	ulnk      
    2e20:	00 00 06    	return    

00002e22 <_dispNumber>:
    2e22:	0a 00 fa    	lnk       #0xa
    2e24:	30 07 98    	mov.w     w0, [w14+6]
    2e26:	01 4f 98    	mov.b     w1, [w14+8]
    2e28:	3e 00 90    	mov.w     [w14+6], w0
    2e2a:	c3 00 de    	lsr.w     w0, #0x3, w1
    2e2c:	50 0c 22    	mov.w     #0x20c5, w0
    2e2e:	00 08 b8    	mul.uu    w1, w0, w0
    2e30:	44 08 de    	lsr.w     w1, #0x4, w0
    2e32:	00 4f 78    	mov.b     w0, [w14]
    2e34:	1e 40 78    	mov.b     [w14], w0
    2e36:	78 00 b9    	mul.su    w0, #0x18, w0
    2e38:	00 00 78    	mov.w     w0, w0
    2e3a:	80 40 78    	mov.b     w0, w1
    2e3c:	3e 00 90    	mov.w     [w14+6], w0
    2e3e:	00 40 78    	mov.b     w0, w0
    2e40:	00 c0 40    	add.b     w1, w0, w0
    2e42:	10 47 98    	mov.b     w0, [w14+1]
    2e44:	1e 40 90    	mov.b     [w14+1], w0
    2e46:	00 80 fb    	ze        w0, w0
    2e48:	c2 00 de    	lsr.w     w0, #0x2, w1
    2e4a:	b0 47 21    	mov.w     #0x147b, w0
    2e4c:	00 08 b8    	mul.uu    w1, w0, w0
    2e4e:	01 00 d1    	lsr.w     w1, w0
    2e50:	20 47 98    	mov.b     w0, [w14+2]
    2e52:	ae 40 90    	mov.b     [w14+2], w1
    2e54:	c0 09 20    	mov.w     #0x9c, w0
    2e56:	00 88 b9    	mul.ss    w1, w0, w0
    2e58:	00 00 78    	mov.w     w0, w0
    2e5a:	00 40 78    	mov.b     w0, w0
    2e5c:	9e 40 90    	mov.b     [w14+1], w1
    2e5e:	00 c0 40    	add.b     w1, w0, w0
    2e60:	10 47 98    	mov.b     w0, [w14+1]
    2e62:	1e 40 90    	mov.b     [w14+1], w0
    2e64:	80 80 fb    	ze        w0, w1
    2e66:	d0 cc 2c    	mov.w     #0xcccd, w0
    2e68:	00 08 b8    	mul.uu    w1, w0, w0
    2e6a:	43 08 de    	lsr.w     w1, #0x3, w0
    2e6c:	30 47 98    	mov.b     w0, [w14+3]
    2e6e:	be 40 90    	mov.b     [w14+3], w1
    2e70:	60 0f 20    	mov.w     #0xf6, w0
    2e72:	00 88 b9    	mul.ss    w1, w0, w0
    2e74:	00 00 78    	mov.w     w0, w0
    2e76:	00 40 78    	mov.b     w0, w0
    2e78:	9e 40 90    	mov.b     [w14+1], w1
    2e7a:	00 c0 40    	add.b     w1, w0, w0
    2e7c:	10 47 98    	mov.b     w0, [w14+1]
    2e7e:	9e 40 90    	mov.b     [w14+1], w1
    2e80:	41 47 98    	mov.b     w1, [w14+4]
    2e82:	0e 48 90    	mov.b     [w14+8], w0
    2e84:	00 80 fb    	ze        w0, w0
    2e86:	00 00 ea    	neg.w     w0, w0
    2e88:	4f 00 de    	lsr.w     w0, #0xf, w0
    2e8a:	00 40 78    	mov.b     w0, w0
    2e8c:	80 41 78    	mov.b     w0, w3
    2e8e:	12 c1 b3    	mov.b     #0x11, w2
    2e90:	80 40 eb    	clr.b     w1
    2e92:	a0 0b 21    	mov.w     #0x10ba, w0
    2e94:	5c fa 07    	rcall     0x234e <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    2e96:	0e 48 90    	mov.b     [w14+8], w0
    2e98:	00 80 fb    	ze        w0, w0
    2e9a:	80 00 e9    	dec.w     w0, w1
    2e9c:	10 c0 b3    	mov.b     #0x1, w0
    2e9e:	01 00 e0    	cp0.w     w1
    2ea0:	01 00 3c    	bra       GT, 0x2ea4 <.L52>
    2ea2:	00 40 eb    	clr.b     w0

00002ea4 <.L52>:
    2ea4:	80 41 78    	mov.b     w0, w3
    2ea6:	3e 41 90    	mov.b     [w14+3], w2
    2ea8:	11 c0 b3    	mov.b     #0x1, w1
    2eaa:	a0 0b 21    	mov.w     #0x10ba, w0
    2eac:	50 fa 07    	rcall     0x234e <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    2eae:	0e 48 90    	mov.b     [w14+8], w0
    2eb0:	00 80 fb    	ze        w0, w0
    2eb2:	80 80 e9    	dec2.w    w0, w1
    2eb4:	10 c0 b3    	mov.b     #0x1, w0
    2eb6:	01 00 e0    	cp0.w     w1
    2eb8:	01 00 3c    	bra       GT, 0x2ebc <.L53>
    2eba:	00 40 eb    	clr.b     w0

00002ebc <.L53>:
    2ebc:	80 41 78    	mov.b     w0, w3
    2ebe:	4e 41 90    	mov.b     [w14+4], w2
    2ec0:	31 c0 b3    	mov.b     #0x3, w1
    2ec2:	a0 0b 21    	mov.w     #0x10ba, w0
    2ec4:	44 fa 07    	rcall     0x234e <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    2ec6:	0e 48 90    	mov.b     [w14+8], w0
    2ec8:	00 80 fb    	ze        w0, w0
    2eca:	e3 00 50    	sub.w     w0, #0x3, w1
    2ecc:	10 c0 b3    	mov.b     #0x1, w0
    2ece:	01 00 e0    	cp0.w     w1
    2ed0:	01 00 3c    	bra       GT, 0x2ed4 <.L54>
    2ed2:	00 40 eb    	clr.b     w0

00002ed4 <.L54>:
    2ed4:	80 41 78    	mov.b     w0, w3
    2ed6:	12 c1 b3    	mov.b     #0x11, w2
    2ed8:	41 c0 b3    	mov.b     #0x4, w1
    2eda:	a0 0b 21    	mov.w     #0x10ba, w0
    2edc:	38 fa 07    	rcall     0x234e <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    2ede:	a0 0b 21    	mov.w     #0x10ba, w0
    2ee0:	27 f9 07    	rcall     0x2130 <_led_writeDisplay> <.LFB3> <.LFE2>
    2ee2:	00 80 fa    	ulnk      
    2ee4:	00 00 06    	return    

00002ee6 <_init_ajuart>:
    2ee6:	04 00 fa    	lnk       #0x4
    2ee8:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    2eea:	f2 c2 a8    	bset.b    0x2f2, #0x6
    2eec:	f0 e2 a8    	bset.b    0x2f0, #0x7
    2eee:	00 6c 20    	mov.w     #0x6c0, w0
    2ef0:	00 0f 78    	mov.w     w0, [w14]
    2ef2:	00 68 20    	mov.w     #0x680, w0
    2ef4:	10 07 98    	mov.w     w0, [w14+2]
    2ef6:	11 3a 80    	mov.w     0x742, w1
    2ef8:	f0 0b 20    	mov.w     #0xbf, w0
    2efa:	00 81 60    	and.w     w1, w0, w2
    2efc:	60 04 20    	mov.w     #0x46, w0
    2efe:	71 05 20    	mov.w     #0x57, w1
    2f00:	23 74 20    	mov.w     #0x742, w3
    2f02:	80 49 78    	mov.b     w0, [w3]
    2f04:	81 49 78    	mov.b     w1, [w3]
    2f06:	82 49 78    	mov.b     w2, [w3]
    2f08:	1e 00 90    	mov.w     [w14+2], w0
    2f0a:	40 02 b0    	add.w     #0x24, w0
    2f0c:	a1 c1 b3    	mov.b     #0x1a, w1
    2f0e:	01 48 78    	mov.b     w1, [w0]
    2f10:	9e 00 78    	mov.w     [w14], w1
    2f12:	75 80 40    	add.w     w1, #0x15, w0
    2f14:	31 c0 b3    	mov.b     #0x3, w1
    2f16:	01 48 78    	mov.b     w1, [w0]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    RPINR[U1RX_RP] = AJ_RX_RP;
    RPOR[AJ_TX_RP] = U1TX_RP;
    __builtin_write_OSCCONL(OSCCON | 0x40);
    2f18:	10 3a 80    	mov.w     0x742, w0
    2f1a:	00 01 78    	mov.w     w0, w2
    2f1c:	02 60 a0    	bset.w    w2, #0x6
    2f1e:	60 04 20    	mov.w     #0x46, w0
    2f20:	71 05 20    	mov.w     #0x57, w1
    2f22:	23 74 20    	mov.w     #0x742, w3
    2f24:	80 49 78    	mov.b     w0, [w3]
    2f26:	81 49 78    	mov.b     w1, [w3]
    2f28:	82 49 78    	mov.b     w2, [w3]

    U1MODE = 0x0008;                // configure UART1 for transmission at
    2f2a:	80 00 20    	mov.w     #0x8, w0
    2f2c:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;                 //   115,200 baud, no parity, 1 stop bit
    2f2e:	20 02 20    	mov.w     #0x22, w0
    2f30:	40 11 88    	mov.w     w0, 0x228

    U1_tx_buffer.data = U1TXbuffer;
    2f32:	a0 83 20    	mov.w     #0x83a, w0
    2f34:	30 41 88    	mov.w     w0, 0x826
    U1_tx_buffer.length = U1_TX_BUFFER_LENGTH;
    2f36:	00 40 20    	mov.w     #0x400, w0
    2f38:	40 41 88    	mov.w     w0, 0x828
    U1_tx_buffer.head = 0;
    2f3a:	00 00 eb    	clr.w     w0
    2f3c:	50 41 88    	mov.w     w0, 0x82a
    U1_tx_buffer.tail = 0;
    2f3e:	00 00 eb    	clr.w     w0
    2f40:	60 41 88    	mov.w     w0, 0x82c
    U1_tx_buffer.count = 0;
    2f42:	00 00 eb    	clr.w     w0
    2f44:	70 41 88    	mov.w     w0, 0x82e
    U1_tx_threshold = 3 * U1_TX_BUFFER_LENGTH / 4;
    2f46:	00 30 20    	mov.w     #0x300, w0
    2f48:	10 41 88    	mov.w     w0, 0x822

    U1_rx_buffer.data = U1RXbuffer;
    2f4a:	a0 c3 20    	mov.w     #0xc3a, w0
    2f4c:	80 41 88    	mov.w     w0, 0x830
    U1_rx_buffer.length = U1_RX_BUFFER_LENGTH;
    2f4e:	00 40 20    	mov.w     #0x400, w0
    2f50:	90 41 88    	mov.w     w0, 0x832
    U1_rx_buffer.head = 0;
    2f52:	00 00 eb    	clr.w     w0
    2f54:	a0 41 88    	mov.w     w0, 0x834
    U1_rx_buffer.tail = 0;
    2f56:	00 00 eb    	clr.w     w0
    2f58:	b0 41 88    	mov.w     w0, 0x836
    U1_rx_buffer.count = 0;
    2f5a:	00 00 eb    	clr.w     w0
    2f5c:	c0 41 88    	mov.w     w0, 0x838

    U1STAbits.UTXISEL1 = 0;         // set UART1 UTXISEL<1:0> = 01, TX interrupt
    2f5e:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;         //   when all transmit operations are done
    2f60:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    2f62:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;            // enable UART1 TX interrupt
    2f64:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    2f66:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;            // enable UART1 RX interrupt
    2f68:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;          // enable UART1 module
    2f6a:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
    2f6c:	23 42 a8    	bset.b    0x223, #0x2
}
    2f6e:	00 80 fa    	ulnk      
    2f70:	00 00 06    	return    

00002f72 <_U1_in_waiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
        disable_interrupts();
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
        U1_tx_buffer.head++;
        if (U1_tx_buffer.head == U1_tx_buffer.length)
            U1_tx_buffer.head = 0;
        U1_tx_buffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    2f72:	00 00 fa    	lnk       #0x0
    return U1_rx_buffer.count;
    2f74:	c0 41 80    	mov.w     0x838, w0
}
    2f76:	00 80 fa    	ulnk      
    2f78:	00 00 06    	return    

00002f7a <_U1_flush_tx_buffer>:

void U1_flush_tx_buffer(void) {
    2f7a:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    2f7c:	11 11 80    	mov.w     0x222, w1
    2f7e:	00 40 20    	mov.w     #0x400, w0
    2f80:	00 80 60    	and.w     w1, w0, w0
    2f82:	00 00 e0    	cp0.w     w0
    2f84:	01 00 3a    	bra       NZ, 0x2f88 <.L15>
        U1STAbits.UTXEN = 1;        //   enable it
    2f86:	23 42 a8    	bset.b    0x223, #0x2

00002f88 <.L15>:
}
    2f88:	00 80 fa    	ulnk      
    2f8a:	00 00 06    	return    

00002f8c <_U1_putc>:

void U1_putc(uint8_t ch) {
    2f8c:	02 00 fa    	lnk       #0x2
    2f8e:	00 4f 78    	mov.b     w0, [w14]
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}
    2f90:	00 00 00    	nop       

00002f92 <.L18>:
    2f92:	71 41 80    	mov.w     0x82e, w1
    2f94:	40 41 80    	mov.w     0x828, w0
    2f96:	80 8f 50    	sub.w     w1, w0, [w15]
    2f98:	fc ff 32    	bra       Z, 0x2f92 <.L18>

    disable_interrupts();
    2f9a:	ff 3f fc    	disi      #0x3fff
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    2f9c:	31 41 80    	mov.w     0x826, w1
    2f9e:	60 41 80    	mov.w     0x82c, w0
    2fa0:	00 80 40    	add.w     w1, w0, w0
    2fa2:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    2fa4:	60 41 80    	mov.w     0x82c, w0
    2fa6:	00 00 e8    	inc.w     w0, w0
    2fa8:	60 41 88    	mov.w     w0, 0x82c
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    2faa:	61 41 80    	mov.w     0x82c, w1
    2fac:	40 41 80    	mov.w     0x828, w0
    2fae:	80 8f 50    	sub.w     w1, w0, [w15]
    2fb0:	02 00 3a    	bra       NZ, 0x2fb6 <.L19>
        U1_tx_buffer.tail = 0;
    2fb2:	00 00 eb    	clr.w     w0
    2fb4:	60 41 88    	mov.w     w0, 0x82c

00002fb6 <.L19>:
    U1_tx_buffer.count++;
    2fb6:	70 41 80    	mov.w     0x82e, w0
    2fb8:	00 00 e8    	inc.w     w0, w0
    2fba:	70 41 88    	mov.w     w0, 0x82e
    enable_interrupts();
    2fbc:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    2fbe:	71 41 80    	mov.w     0x82e, w1
    2fc0:	10 41 80    	mov.w     0x822, w0
    2fc2:	80 8f 50    	sub.w     w1, w0, [w15]
    2fc4:	01 00 39    	bra       NC, 0x2fc8 <.L17>
        U1STAbits.UTXEN = 1;
    2fc6:	23 42 a8    	bset.b    0x223, #0x2

00002fc8 <.L17>:
}
    2fc8:	00 80 fa    	ulnk      
    2fca:	00 00 06    	return    

00002fcc <_U1_getc>:

uint8_t U1_getc(void) {
    2fcc:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    2fce:	00 00 00    	nop       

00002fd0 <.L22>:
    2fd0:	c0 41 80    	mov.w     0x838, w0
    2fd2:	00 00 e0    	cp0.w     w0
    2fd4:	fd ff 32    	bra       Z, 0x2fd0 <.L22>

    disable_interrupts();
    2fd6:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    2fd8:	81 41 80    	mov.w     0x830, w1
    2fda:	a0 41 80    	mov.w     0x834, w0
    2fdc:	00 80 40    	add.w     w1, w0, w0
    2fde:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    2fe0:	a0 41 80    	mov.w     0x834, w0
    2fe2:	00 00 e8    	inc.w     w0, w0
    2fe4:	a0 41 88    	mov.w     w0, 0x834
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    2fe6:	a1 41 80    	mov.w     0x834, w1
    2fe8:	90 41 80    	mov.w     0x832, w0
    2fea:	80 8f 50    	sub.w     w1, w0, [w15]
    2fec:	02 00 3a    	bra       NZ, 0x2ff2 <.L23>
        U1_rx_buffer.head = 0;
    2fee:	00 00 eb    	clr.w     w0
    2ff0:	a0 41 88    	mov.w     w0, 0x834

00002ff2 <.L23>:
    U1_rx_buffer.count--;
    2ff2:	c0 41 80    	mov.w     0x838, w0
    2ff4:	00 00 e9    	dec.w     w0, w0
    2ff6:	c0 41 88    	mov.w     w0, 0x838
    enable_interrupts();
    2ff8:	52 20 ef    	clr.w     0x52

    return ch;
    2ffa:	1e 40 78    	mov.b     [w14], w0
}
    2ffc:	00 80 fa    	ulnk      
    2ffe:	00 00 06    	return    

00003000 <_U1_puts>:

void U1_puts(uint8_t *str) {
    3000:	02 00 fa    	lnk       #0x2
    3002:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    3004:	04 00 37    	bra       0x300e <.L25>

00003006 <.L26>:
        U1_putc(*str++);
    3006:	1e 00 78    	mov.w     [w14], w0
    3008:	10 40 78    	mov.b     [w0], w0
    300a:	1e 0f e8    	inc.w     [w14], [w14]
    300c:	bf ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>

0000300e <.L25>:
    300e:	1e 00 78    	mov.w     [w14], w0
    3010:	10 40 78    	mov.b     [w0], w0
    3012:	00 04 e0    	cp0.b     w0
    3014:	f8 ff 3a    	bra       NZ, 0x3006 <.L26>
    U1_flush_tx_buffer();
    3016:	b1 ff 07    	rcall     0x2f7a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    3018:	00 80 fa    	ulnk      
    301a:	00 00 06    	return    

0000301c <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    301c:	04 00 fa    	lnk       #0x4
    301e:	00 0f 78    	mov.w     w0, [w14]
    3020:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    3022:	1e 00 90    	mov.w     [w14+2], w0
    3024:	00 00 e0    	cp0.w     w0
    3026:	1a 00 32    	bra       Z, 0x305c <.L32>
        return;

    if (len == 1) {
    3028:	1e 00 90    	mov.w     [w14+2], w0
    302a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    302c:	04 00 3a    	bra       NZ, 0x3036 <.L30>
        *str = '\0';
    302e:	1e 00 78    	mov.w     [w14], w0
    3030:	80 40 eb    	clr.b     w1
    3032:	01 48 78    	mov.b     w1, [w0]
        return;
    3034:	14 00 37    	bra       0x305e <.L27>

00003036 <.L30>:
    }

    while (1) {
        *str = U1_getc();
    3036:	ca ff 07    	rcall     0x2fcc <_U1_getc> <.LFB6> <.LFE5>
    3038:	9e 00 78    	mov.w     [w14], w1
    303a:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    303c:	1e 00 78    	mov.w     [w14], w0
    303e:	10 40 78    	mov.b     [w0], w0
    3040:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3042:	08 00 32    	bra       Z, 0x3054 <.L31>
    3044:	1e 00 90    	mov.w     [w14+2], w0
    3046:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3048:	05 00 32    	bra       Z, 0x3054 <.L31>
            break;
        str++;
    304a:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    304c:	1e 00 90    	mov.w     [w14+2], w0
    304e:	00 00 e9    	dec.w     w0, w0
    3050:	10 07 98    	mov.w     w0, [w14+2]
    }
    3052:	f1 ff 37    	bra       0x3036 <.L30>

00003054 <.L31>:
    *str = '\0';
    3054:	1e 00 78    	mov.w     [w14], w0
    3056:	80 40 eb    	clr.b     w1
    3058:	01 48 78    	mov.b     w1, [w0]
    305a:	01 00 37    	bra       0x305e <.L27>

0000305c <.L32>:
    305c:	00 00 00    	nop       

0000305e <.L27>:
}
    305e:	00 80 fa    	ulnk      
    3060:	00 00 06    	return    

00003062 <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    3062:	08 00 fa    	lnk       #0x8
    3064:	20 07 98    	mov.w     w0, [w14+4]
    3066:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    3068:	3e 00 90    	mov.w     [w14+6], w0
    306a:	00 00 e0    	cp0.w     w0
    306c:	6f 00 32    	bra       Z, 0x314c <.L46>
        return;

    if (len == 1) {
    306e:	3e 00 90    	mov.w     [w14+6], w0
    3070:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3072:	04 00 3a    	bra       NZ, 0x307c <.L36>
        *str = '\0';
    3074:	2e 00 90    	mov.w     [w14+4], w0
    3076:	80 40 eb    	clr.b     w1
    3078:	01 48 78    	mov.b     w1, [w0]
        return;
    307a:	69 00 37    	bra       0x314e <.L33>

0000307c <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    307c:	b0 c1 b3    	mov.b     #0x1b, w0
    307e:	86 ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    3080:	70 c3 b3    	mov.b     #0x37, w0
    3082:	84 ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    3084:	7a ff 07    	rcall     0x2f7a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    3086:	ae 00 90    	mov.w     [w14+4], w1
    3088:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    308a:	be 00 90    	mov.w     [w14+6], w1
    308c:	01 0f 78    	mov.w     w1, [w14]
    308e:	03 00 37    	bra       0x3096 <.L45>

00003090 <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    3090:	00 00 00    	nop       
    3092:	01 00 37    	bra       0x3096 <.L45>

00003094 <.L48>:
    3094:	00 00 00    	nop       

00003096 <.L45>:
    3096:	9a ff 07    	rcall     0x2fcc <_U1_getc> <.LFB6> <.LFE5>
    3098:	ae 00 90    	mov.w     [w14+4], w1
    309a:	80 48 78    	mov.b     w0, [w1]
    309c:	2e 00 90    	mov.w     [w14+4], w0
    309e:	10 40 78    	mov.b     [w0], w0
    30a0:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    30a2:	09 00 3a    	bra       NZ, 0x30b6 <.L37>
    *str = '\0';                            // terminarte the string with null
    30a4:	2e 00 90    	mov.w     [w14+4], w0
    30a6:	80 40 eb    	clr.b     w1
    30a8:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    30aa:	a0 c0 b3    	mov.b     #0xa, w0
    30ac:	6f ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    30ae:	d0 c0 b3    	mov.b     #0xd, w0
    30b0:	6d ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    30b2:	63 ff 07    	rcall     0x2f7a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    30b4:	4c 00 37    	bra       0x314e <.L33>

000030b6 <.L37>:
    30b6:	2e 00 90    	mov.w     [w14+4], w0
    30b8:	10 40 78    	mov.b     [w0], w0
    30ba:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    30bc:	10 00 3a    	bra       NZ, 0x30de <.L38>
    30be:	b0 c1 b3    	mov.b     #0x1b, w0
    30c0:	65 ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    30c2:	80 c3 b3    	mov.b     #0x38, w0
    30c4:	63 ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    30c6:	b0 c1 b3    	mov.b     #0x1b, w0
    30c8:	61 ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    30ca:	b0 c5 b3    	mov.b     #0x5b, w0
    30cc:	5f ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    30ce:	b0 c4 b3    	mov.b     #0x4b, w0
    30d0:	5d ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    30d2:	53 ff 07    	rcall     0x2f7a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    30d4:	9e 00 90    	mov.w     [w14+2], w1
    30d6:	21 07 98    	mov.w     w1, [w14+4]
    30d8:	be 00 90    	mov.w     [w14+6], w1
    30da:	01 0f 78    	mov.w     w1, [w14]
    30dc:	36 00 37    	bra       0x314a <.L39>

000030de <.L38>:
    30de:	2e 00 90    	mov.w     [w14+4], w0
    30e0:	10 40 78    	mov.b     [w0], w0
    30e2:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    30e4:	05 00 32    	bra       Z, 0x30f0 <.L40>
    30e6:	2e 00 90    	mov.w     [w14+4], w0
    30e8:	90 40 78    	mov.b     [w0], w1
    30ea:	f0 c7 b3    	mov.b     #0x7f, w0
    30ec:	80 cf 50    	sub.b     w1, w0, [w15]
    30ee:	14 00 3a    	bra       NZ, 0x3118 <.L41>

000030f0 <.L40>:
    30f0:	ae 00 90    	mov.w     [w14+4], w1
    30f2:	1e 00 90    	mov.w     [w14+2], w0
    30f4:	80 8f 50    	sub.w     w1, w0, [w15]
    30f6:	0c 00 36    	bra       LEU, 0x3110 <.L42>
    30f8:	80 c0 b3    	mov.b     #0x8, w0
    30fa:	48 ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    30fc:	00 c2 b3    	mov.b     #0x20, w0
    30fe:	46 ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    3100:	80 c0 b3    	mov.b     #0x8, w0
    3102:	44 ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    3104:	3a ff 07    	rcall     0x2f7a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3106:	2e 00 90    	mov.w     [w14+4], w0
    3108:	00 00 e9    	dec.w     w0, w0
    310a:	20 07 98    	mov.w     w0, [w14+4]
    310c:	1e 0f e8    	inc.w     [w14], [w14]
    310e:	03 00 37    	bra       0x3116 <.L43>

00003110 <.L42>:
    3110:	70 c0 b3    	mov.b     #0x7, w0
    3112:	3c ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    3114:	32 ff 07    	rcall     0x2f7a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

00003116 <.L43>:
    3116:	19 00 37    	bra       0x314a <.L39>

00003118 <.L41>:
    3118:	1e 00 78    	mov.w     [w14], w0
    311a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    311c:	04 00 3a    	bra       NZ, 0x3126 <.L44>
    311e:	70 c0 b3    	mov.b     #0x7, w0
    3120:	35 ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    3122:	2b ff 07    	rcall     0x2f7a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3124:	12 00 37    	bra       0x314a <.L39>

00003126 <.L44>:
    3126:	2e 00 90    	mov.w     [w14+4], w0
    3128:	10 40 78    	mov.b     [w0], w0
    312a:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    312c:	b1 ff 36    	bra       LEU, 0x3090 <.L47>
    312e:	2e 00 90    	mov.w     [w14+4], w0
    3130:	90 40 78    	mov.b     [w0], w1
    3132:	e0 c7 b3    	mov.b     #0x7e, w0
    3134:	80 cf 50    	sub.b     w1, w0, [w15]
    3136:	ae ff 3e    	bra       GTU, 0x3094 <.L48>
    3138:	2e 00 90    	mov.w     [w14+4], w0
    313a:	10 40 78    	mov.b     [w0], w0
    313c:	27 ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    313e:	1d ff 07    	rcall     0x2f7a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3140:	2e 00 90    	mov.w     [w14+4], w0
    3142:	00 00 e8    	inc.w     w0, w0
    3144:	20 07 98    	mov.w     w0, [w14+4]
    3146:	1e 0f e9    	dec.w     [w14], [w14]
    3148:	a6 ff 37    	bra       0x3096 <.L45>

0000314a <.L39>:
    314a:	a5 ff 37    	bra       0x3096 <.L45>

0000314c <.L46>:
    314c:	00 00 00    	nop       

0000314e <.L33>:
}
    314e:	00 80 fa    	ulnk      
    3150:	00 00 06    	return    

00003152 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    3152:	08 00 fa    	lnk       #0x8
    3154:	10 07 98    	mov.w     w0, [w14+2]
    3156:	21 07 98    	mov.w     w1, [w14+4]
    3158:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    315a:	1e 00 90    	mov.w     [w14+2], w0
    315c:	60 00 40    	add.w     w0, #0x0, w0
    315e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3160:	10 00 3e    	bra       GTU, 0x3182 <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    3162:	00 00 eb    	clr.w     w0
    3164:	00 0f 78    	mov.w     w0, [w14]
    3166:	07 00 37    	bra       0x3176 <.L52>

00003168 <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    3168:	2e 00 90    	mov.w     [w14+4], w0
    316a:	10 40 78    	mov.b     [w0], w0
    316c:	ae 00 90    	mov.w     [w14+4], w1
    316e:	81 00 e8    	inc.w     w1, w1
    3170:	21 07 98    	mov.w     w1, [w14+4]
    3172:	0c ff 07    	rcall     0x2f8c <_U1_putc> <.LFB5> <.LFE4>
    3174:	1e 0f e8    	inc.w     [w14], [w14]

00003176 <.L52>:
    3176:	9e 00 78    	mov.w     [w14], w1
    3178:	3e 00 90    	mov.w     [w14+6], w0
    317a:	80 8f 50    	sub.w     w1, w0, [w15]
    317c:	f5 ff 39    	bra       NC, 0x3168 <.L53>
            U1_flush_tx_buffer();
    317e:	fd fe 07    	rcall     0x2f7a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    3180:	01 00 37    	bra       0x3184 <.L54>

00003182 <.L55>:
        default:
            break;
    3182:	00 00 00    	nop       

00003184 <.L54>:
    }
    return len;
    3184:	3e 00 90    	mov.w     [w14+6], w0
}
    3186:	00 80 fa    	ulnk      
    3188:	00 00 06    	return    
Disassembly of section .isr.text:

0000318a <__SI2C2Interrupt>:
    318a:	80 9f be    	mov.d     w0, [w15++]
    318c:	32 00 f8    	push      0x32
    318e:	34 00 f8    	push      0x34
    3190:	10 00 20    	mov.w     #0x1, w0
    3192:	a0 01 88    	mov.w     w0, 0x34
    3194:	00 20 20    	mov.w     #0x200, w0
    3196:	90 01 88    	mov.w     w0, 0x32
    3198:	02 00 fa    	lnk       #0x2
    319a:	8a 20 a9    	bclr.b    0x8a, #0x1
    319c:	00 41 80    	mov.w     0x820, w0
    319e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    31a0:	23 00 32    	bra       Z, 0x31e8 <.L4>
    31a2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    31a4:	03 00 39    	bra       NC, 0x31ac <.L3>
    31a6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    31a8:	62 00 32    	bra       Z, 0x326e <.L5>
    31aa:	63 00 37    	bra       0x3272 <.L19>

000031ac <.L3>:
    31ac:	80 10 80    	mov.w     0x210, w0
    31ae:	00 4f 78    	mov.b     w0, [w14]
    31b0:	c0 10 80    	mov.w     0x218, w0
    31b2:	64 00 60    	and.w     w0, #0x4, w0
    31b4:	00 00 e0    	cp0.w     w0
    31b6:	15 00 32    	bra       Z, 0x31e2 <.L6>
    31b8:	1a c8 bf    	mov.b     0x81a, WREG
    31ba:	00 80 fb    	ze        w0, w0
    31bc:	47 00 dd    	sl.w      w0, #0x7, w0
    31be:	80 40 78    	mov.b     w0, w1
    31c0:	1b c8 bf    	mov.b     0x81b, WREG
    31c2:	00 80 fb    	ze        w0, w0
    31c4:	67 00 60    	and.w     w0, #0x7, w0
    31c6:	44 00 dd    	sl.w      w0, #0x4, w0
    31c8:	00 40 78    	mov.b     w0, w0
    31ca:	80 c0 70    	ior.b     w1, w0, w1
    31cc:	1c c8 bf    	mov.b     0x81c, WREG
    31ce:	6f 40 60    	and.b     w0, #0xf, w0
    31d0:	00 c0 70    	ior.b     w1, w0, w0
    31d2:	14 e8 b7    	mov.b     WREG, 0x814
    31d4:	14 c8 bf    	mov.b     0x814, WREG
    31d6:	00 80 fb    	ze        w0, w0
    31d8:	90 10 88    	mov.w     w0, 0x212
    31da:	17 82 a8    	bset.b    0x217, #0x4
    31dc:	20 00 20    	mov.w     #0x2, w0
    31de:	00 41 88    	mov.w     w0, 0x820
    31e0:	49 00 37    	bra       0x3274 <.L1>

000031e2 <.L6>:
    31e2:	10 00 20    	mov.w     #0x1, w0
    31e4:	00 41 88    	mov.w     w0, 0x820
    31e6:	46 00 37    	bra       0x3274 <.L1>

000031e8 <.L4>:
    31e8:	80 10 80    	mov.w     0x210, w0
    31ea:	00 40 78    	mov.b     w0, w0
    31ec:	15 e8 b7    	mov.b     WREG, 0x815
    31ee:	15 c8 bf    	mov.b     0x815, WREG
    31f0:	00 80 fb    	ze        w0, w0
    31f2:	45 00 de    	lsr.w     w0, #0x5, w0
    31f4:	00 40 78    	mov.b     w0, w0
    31f6:	00 80 fb    	ze        w0, w0
    31f8:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    31fa:	11 00 32    	bra       Z, 0x321e <.L13>
    31fc:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    31fe:	07 00 3c    	bra       GT, 0x320e <.L17>
    3200:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3202:	2b 00 32    	bra       Z, 0x325a <.L11>
    3204:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3206:	0f 00 3c    	bra       GT, 0x3226 <.L12>
    3208:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    320a:	24 00 32    	bra       Z, 0x3254 <.L10>
    320c:	29 00 37    	bra       0x3260 <.L9>

0000320e <.L17>:
    320e:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    3210:	1a 00 32    	bra       Z, 0x3246 <.L15>
    3212:	11 10 20    	mov.w     #0x101, w1
    3214:	81 0f 50    	sub.w     w0, w1, [w15]
    3216:	28 00 32    	bra       Z, 0x3268 <.L20>
    3218:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    321a:	19 00 32    	bra       Z, 0x324e <.L14>
    321c:	21 00 37    	bra       0x3260 <.L9>

0000321e <.L13>:
    321e:	15 c8 bf    	mov.b     0x815, WREG
    3220:	7f 40 60    	and.b     w0, #0x1f, w0
    3222:	16 e8 b7    	mov.b     WREG, 0x816
    3224:	22 00 37    	bra       0x326a <.L18>

00003226 <.L12>:
    3226:	15 c8 bf    	mov.b     0x815, WREG
    3228:	00 80 fb    	ze        w0, w0
    322a:	64 00 60    	and.w     w0, #0x4, w0
    322c:	42 80 de    	asr.w     w0, #0x2, w0
    322e:	00 40 78    	mov.b     w0, w0
    3230:	17 e8 b7    	mov.b     WREG, 0x817
    3232:	15 c8 bf    	mov.b     0x815, WREG
    3234:	00 80 fb    	ze        w0, w0
    3236:	62 00 60    	and.w     w0, #0x2, w0
    3238:	00 80 d1    	asr.w     w0, w0
    323a:	00 40 78    	mov.b     w0, w0
    323c:	18 e8 b7    	mov.b     WREG, 0x818
    323e:	15 c8 bf    	mov.b     0x815, WREG
    3240:	61 40 60    	and.b     w0, #0x1, w0
    3242:	19 e8 b7    	mov.b     WREG, 0x819
    3244:	12 00 37    	bra       0x326a <.L18>

00003246 <.L15>:
    3246:	15 c8 bf    	mov.b     0x815, WREG
    3248:	7f 40 60    	and.b     w0, #0x1f, w0
    324a:	1b e8 b7    	mov.b     WREG, 0x81b
    324c:	0e 00 37    	bra       0x326a <.L18>

0000324e <.L14>:
    324e:	10 c0 b3    	mov.b     #0x1, w0
    3250:	1d e8 b7    	mov.b     WREG, 0x81d
    3252:	0b 00 37    	bra       0x326a <.L18>

00003254 <.L10>:
    3254:	10 c0 b3    	mov.b     #0x1, w0
    3256:	1e e8 b7    	mov.b     WREG, 0x81e
    3258:	08 00 37    	bra       0x326a <.L18>

0000325a <.L11>:
    325a:	10 c0 b3    	mov.b     #0x1, w0
    325c:	1f e8 b7    	mov.b     WREG, 0x81f
    325e:	05 00 37    	bra       0x326a <.L18>

00003260 <.L9>:
    3260:	1c c8 bf    	mov.b     0x81c, WREG
    3262:	00 40 e8    	inc.b     w0, w0
    3264:	1c e8 b7    	mov.b     WREG, 0x81c
    3266:	01 00 37    	bra       0x326a <.L18>

00003268 <.L20>:
    3268:	00 00 00    	nop       

0000326a <.L18>:
    326a:	20 28 ef    	clr.w     0x820
    326c:	03 00 37    	bra       0x3274 <.L1>

0000326e <.L5>:
    326e:	20 28 ef    	clr.w     0x820
    3270:	01 00 37    	bra       0x3274 <.L1>

00003272 <.L19>:
    3272:	20 28 ef    	clr.w     0x820

00003274 <.L1>:
    3274:	00 80 fa    	ulnk      
    3276:	34 00 f9    	pop       0x34
    3278:	32 00 f9    	pop       0x32
    327a:	4f 00 be    	mov.d     [--w15], w0
    327c:	00 40 06    	retfie    

0000327e <__U1TXInterrupt>:
    327e:	80 9f be    	mov.d     w0, [w15++]
    3280:	32 00 f8    	push      0x32
    3282:	34 00 f8    	push      0x34
    3284:	10 00 20    	mov.w     #0x1, w0
    3286:	a0 01 88    	mov.w     w0, 0x34
    3288:	00 20 20    	mov.w     #0x200, w0
    328a:	90 01 88    	mov.w     w0, 0x32
    328c:	02 00 fa    	lnk       #0x2
    328e:	85 80 a9    	bclr.b    0x85, #0x4
    3290:	70 41 80    	mov.w     0x82e, w0
    3292:	00 00 e0    	cp0.w     w0
    3294:	17 00 3a    	bra       NZ, 0x32c4 <.L8>
    3296:	23 42 a9    	bclr.b    0x223, #0x2
    3298:	16 00 37    	bra       0x32c6 <.L4>

0000329a <.L7>:
    329a:	ff 3f fc    	disi      #0x3fff
    329c:	31 41 80    	mov.w     0x826, w1
    329e:	50 41 80    	mov.w     0x82a, w0
    32a0:	00 80 40    	add.w     w1, w0, w0
    32a2:	10 4f 78    	mov.b     [w0], [w14]
    32a4:	50 41 80    	mov.w     0x82a, w0
    32a6:	00 00 e8    	inc.w     w0, w0
    32a8:	50 41 88    	mov.w     w0, 0x82a
    32aa:	51 41 80    	mov.w     0x82a, w1
    32ac:	40 41 80    	mov.w     0x828, w0
    32ae:	80 8f 50    	sub.w     w1, w0, [w15]
    32b0:	02 00 3a    	bra       NZ, 0x32b6 <.L5>
    32b2:	00 00 eb    	clr.w     w0
    32b4:	50 41 88    	mov.w     w0, 0x82a

000032b6 <.L5>:
    32b6:	70 41 80    	mov.w     0x82e, w0
    32b8:	00 00 e9    	dec.w     w0, w0
    32ba:	70 41 88    	mov.w     w0, 0x82e
    32bc:	52 20 ef    	clr.w     0x52
    32be:	1e 80 fb    	ze        [w14], w0
    32c0:	20 11 88    	mov.w     w0, 0x224
    32c2:	01 00 37    	bra       0x32c6 <.L4>

000032c4 <.L8>:
    32c4:	00 00 00    	nop       

000032c6 <.L4>:
    32c6:	11 11 80    	mov.w     0x222, w1
    32c8:	00 20 20    	mov.w     #0x200, w0
    32ca:	00 80 60    	and.w     w1, w0, w0
    32cc:	00 00 e0    	cp0.w     w0
    32ce:	03 00 3a    	bra       NZ, 0x32d6 <.L2>
    32d0:	70 41 80    	mov.w     0x82e, w0
    32d2:	00 00 e0    	cp0.w     w0
    32d4:	e2 ff 3a    	bra       NZ, 0x329a <.L7>

000032d6 <.L2>:
    32d6:	00 80 fa    	ulnk      
    32d8:	34 00 f9    	pop       0x34
    32da:	32 00 f9    	pop       0x32
    32dc:	4f 00 be    	mov.d     [--w15], w0
    32de:	00 40 06    	retfie    

000032e0 <__U1RXInterrupt>:
    32e0:	80 9f be    	mov.d     w0, [w15++]
    32e2:	32 00 f8    	push      0x32
    32e4:	34 00 f8    	push      0x34
    32e6:	10 00 20    	mov.w     #0x1, w0
    32e8:	a0 01 88    	mov.w     w0, 0x34
    32ea:	00 20 20    	mov.w     #0x200, w0
    32ec:	90 01 88    	mov.w     w0, 0x32
    32ee:	00 00 fa    	lnk       #0x0
    32f0:	85 60 a9    	bclr.b    0x85, #0x3
    32f2:	14 00 37    	bra       0x331c <.L10>

000032f4 <.L13>:
    32f4:	ff 3f fc    	disi      #0x3fff
    32f6:	81 41 80    	mov.w     0x830, w1
    32f8:	b0 41 80    	mov.w     0x836, w0
    32fa:	00 80 40    	add.w     w1, w0, w0
    32fc:	31 11 80    	mov.w     0x226, w1
    32fe:	81 40 78    	mov.b     w1, w1
    3300:	01 48 78    	mov.b     w1, [w0]
    3302:	b0 41 80    	mov.w     0x836, w0
    3304:	00 00 e8    	inc.w     w0, w0
    3306:	b0 41 88    	mov.w     w0, 0x836
    3308:	b1 41 80    	mov.w     0x836, w1
    330a:	90 41 80    	mov.w     0x832, w0
    330c:	80 8f 50    	sub.w     w1, w0, [w15]
    330e:	02 00 3a    	bra       NZ, 0x3314 <.L11>
    3310:	00 00 eb    	clr.w     w0
    3312:	b0 41 88    	mov.w     w0, 0x836

00003314 <.L11>:
    3314:	c0 41 80    	mov.w     0x838, w0
    3316:	00 00 e8    	inc.w     w0, w0
    3318:	c0 41 88    	mov.w     w0, 0x838
    331a:	52 20 ef    	clr.w     0x52

0000331c <.L10>:
    331c:	10 11 80    	mov.w     0x222, w0
    331e:	61 00 60    	and.w     w0, #0x1, w0
    3320:	00 00 e0    	cp0.w     w0
    3322:	04 00 32    	bra       Z, 0x332c <.L9>
    3324:	c1 41 80    	mov.w     0x838, w1
    3326:	90 41 80    	mov.w     0x832, w0
    3328:	80 8f 50    	sub.w     w1, w0, [w15]
    332a:	e4 ff 3a    	bra       NZ, 0x32f4 <.L13>

0000332c <.L9>:
    332c:	00 80 fa    	ulnk      
    332e:	34 00 f9    	pop       0x34
    3330:	32 00 f9    	pop       0x32
    3332:	4f 00 be    	mov.d     [--w15], w0
    3334:	00 40 06    	retfie    
Disassembly of section .text:

00003336 <_init_elecanisms>:
#include "elecanisms.h"

uint16_t rand_val;

void init_elecanisms(void) {
    3336:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2),
    3338:	00 10 20    	mov.w     #0x100, w0
    333a:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    333c:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    333e:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    3340:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    3342:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    3344:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    3346:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    3348:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    334a:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    334c:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    334e:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    3350:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    3352:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    3354:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    3356:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    3358:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    335a:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    335c:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    335e:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    3360:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    3362:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    3364:	f0 03 20    	mov.w     #0x3f, w0
    3366:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    3368:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    336a:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    336c:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    336e:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module:
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0;
    3370:	00 0e 20    	mov.w     #0xe0, w0
    3372:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    3374:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    3376:	00 c4 20    	mov.w     #0xc40, w0
    3378:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    337a:	50 00 20    	mov.w     #0x5, w0
    337c:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    337e:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    3380:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    3382:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    3384:	e8 02 a9    	bclr.b    0x2e8, #0x0
    3386:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    3388:	e8 22 a9    	bclr.b    0x2e8, #0x1
    338a:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    338c:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    338e:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    3390:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    3392:	00 80 fa    	ulnk      
    3394:	00 00 06    	return    

00003396 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    3396:	02 00 fa    	lnk       #0x2
    3398:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    339a:	9e 00 78    	mov.w     [w14], w1
    339c:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    339e:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    33a0:	00 00 00    	nop       

000033a2 <.L3>:
    33a2:	00 19 80    	mov.w     0x320, w0
    33a4:	61 00 60    	and.w     w0, #0x1, w0
    33a6:	00 00 e0    	cp0.w     w0
    33a8:	fc ff 32    	bra       Z, 0x33a2 <.L3>
    return ADC1BUF0;
    33aa:	00 18 80    	mov.w     0x300, w0
}
    33ac:	00 80 fa    	ulnk      
    33ae:	00 00 06    	return    

000033b0 <_rand_next>:

void rand_next(void) {
    33b0:	02 00 fa    	lnk       #0x2
    uint16_t val;

    // See "A List of Maximum Period NLFSRs" by Elena Dubrova, p. 7
    val = (rand_val ^ (rand_val >> 2) ^ (rand_val >> 13) ^ ((rand_val >> 2) & (rand_val >> 3))) & 1;
    33b2:	20 41 80    	mov.w     0x824, w0
    33b4:	c2 00 de    	lsr.w     w0, #0x2, w1
    33b6:	20 41 80    	mov.w     0x824, w0
    33b8:	80 80 68    	xor.w     w1, w0, w1
    33ba:	20 41 80    	mov.w     0x824, w0
    33bc:	4d 00 de    	lsr.w     w0, #0xd, w0
    33be:	80 80 68    	xor.w     w1, w0, w1
    33c0:	20 41 80    	mov.w     0x824, w0
    33c2:	42 01 de    	lsr.w     w0, #0x2, w2
    33c4:	20 41 80    	mov.w     0x824, w0
    33c6:	43 00 de    	lsr.w     w0, #0x3, w0
    33c8:	00 00 61    	and.w     w2, w0, w0
    33ca:	00 80 68    	xor.w     w1, w0, w0
    33cc:	61 0f 60    	and.w     w0, #0x1, [w14]
    rand_val = (rand_val >> 1) | (val << 15);
    33ce:	20 41 80    	mov.w     0x824, w0
    33d0:	80 00 d1    	lsr.w     w0, w1
    33d2:	1e 00 78    	mov.w     [w14], w0
    33d4:	4f 00 dd    	sl.w      w0, #0xf, w0
    33d6:	01 00 70    	ior.w     w0, w1, w0
    33d8:	20 41 88    	mov.w     w0, 0x824
}
    33da:	00 80 fa    	ulnk      
    33dc:	00 00 06    	return    
Disassembly of section .dinit:

000033de <.dinit>:
    33de:	3a 10 00    	nop       
    33e0:	94 00 00    	nop       
    33e2:	80 00 00    	nop       
    33e4:	00 08 00    	nop       
    33e6:	14 00 00    	nop       
    33e8:	80 00 00    	nop       
    33ea:	14 08 00    	nop       
    33ec:	0e 00 00    	nop       
    33ee:	80 00 00    	nop       
    33f0:	26 08 00    	nop       
    33f2:	14 08 00    	nop       
    33f4:	80 00 00    	nop       
    33f6:	22 08 00    	nop       
    33f8:	02 00 00    	nop       
    33fa:	80 00 00    	nop       
    33fc:	24 08 00    	nop       
    33fe:	02 00 00    	nop       
    3400:	80 00 00    	nop       
    3402:	f0 10 00    	nop       
    3404:	1a 00 00    	nop       
    3406:	82 00 00    	nop       
    3408:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    340a:	74 7a 4c    	.pword 0x4c7a74
    340c:	00 00 01    	call      w0
    340e:	00 02 00    	nop       
    3410:	04 00 08    	do        #0x4, 0x5414
    3412:	00 10 00 
    3414:	00 00 20    	mov.w     #0x0, w0
    3416:	2b 2d 23    	mov.w     #0x32d2, w11
    3418:	30 00 00    	nop       
    341a:	ce 10 00    	nop       
    341c:	22 00 00    	nop       
    341e:	82 00 00    	nop       
    3420:	30 31 32    	bra       Z, 0x9682
    3422:	33 34 35    	bra       LT, 0x9c8a
    3424:	36 37 38    	bra       NOV, 0xa292
    3426:	39 41 42    	add.b     w4, [w9++], w2
    3428:	43 44 45    	add.b     w10, [--w3], w8
    342a:	46 00 30    	bra       OV, 0x34b8
    342c:	31 32 33    	bra       N, 0x9890
    342e:	34 35 36    	bra       LEU, 0x9e98
    3430:	37 38 39    	bra       NC, 0xa4a0
    3432:	61 62 63    	and.b     w6, #0x1, [--w4]
    3434:	64 65 66    	and.b     w12, #0x4, [--w10]
	...
Disassembly of section .isr.text:

0000343a <__T1Interrupt>:
    343a:	36 00 f8    	push      0x36
    343c:	80 9f be    	mov.d     w0, [w15++]
    343e:	82 9f be    	mov.d     w2, [w15++]
    3440:	84 9f be    	mov.d     w4, [w15++]
    3442:	86 9f be    	mov.d     w6, [w15++]
    3444:	32 00 f8    	push      0x32
    3446:	34 00 f8    	push      0x34
    3448:	10 00 20    	mov.w     #0x1, w0
    344a:	a0 01 88    	mov.w     w0, 0x34
    344c:	00 20 20    	mov.w     #0x200, w0
    344e:	90 01 88    	mov.w     w0, 0x32
    3450:	00 00 fa    	lnk       #0x0
    3452:	84 60 a9    	bclr.b    0x84, #0x3
    3454:	40 40 80    	mov.w     0x808, w0
    3456:	50 40 88    	mov.w     w0, 0x80a
    3458:	50 00 20    	mov.w     #0x5, w0
    345a:	9d ff 07    	rcall     0x3396 <_read_analog> <.LFB1> <.LFE0>
    345c:	45 00 de    	lsr.w     w0, #0x5, w0
    345e:	40 40 88    	mov.w     w0, 0x808
    3460:	41 40 80    	mov.w     0x808, w1
    3462:	50 40 80    	mov.w     0x80a, w0
    3464:	80 8f 50    	sub.w     w1, w0, [w15]
    3466:	02 00 3a    	bra       NZ, 0x346c <.L2>
    3468:	40 40 80    	mov.w     0x808, w0
    346a:	60 40 88    	mov.w     w0, 0x80c

0000346c <.L2>:
    346c:	06 c8 bf    	mov.b     0x806, WREG
    346e:	80 80 fb    	ze        w0, w1
    3470:	60 40 80    	mov.w     0x80c, w0
    3472:	80 8f 50    	sub.w     w1, w0, [w15]
    3474:	05 00 32    	bra       Z, 0x3480 <.L1>
    3476:	06 c8 bf    	mov.b     0x806, WREG
    3478:	07 e8 b7    	mov.b     WREG, 0x807
    347a:	60 40 80    	mov.w     0x80c, w0
    347c:	00 40 78    	mov.b     w0, w0
    347e:	06 e8 b7    	mov.b     WREG, 0x806

00003480 <.L1>:
    3480:	00 80 fa    	ulnk      
    3482:	34 00 f9    	pop       0x34
    3484:	32 00 f9    	pop       0x32
    3486:	4f 03 be    	mov.d     [--w15], w6
    3488:	4f 02 be    	mov.d     [--w15], w4
    348a:	4f 01 be    	mov.d     [--w15], w2
    348c:	4f 00 be    	mov.d     [--w15], w0
    348e:	36 00 f9    	pop       0x36
    3490:	00 40 06    	retfie    
Disassembly of section .isr:

00003492 <__DefaultInterrupt>:
    3492:	00 40 da    	break     
    3494:	00 00 fe    	reset     
