
combolock.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	ea 29 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	ea 29 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	ea 29 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	ea 29 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	ea 29 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	ea 29 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	ea 29 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	ea 29 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	ea 29 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	ea 29 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	ea 29 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	ea 29 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	ea 29 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	ea 29 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	ea 29 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	ea 29 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	ea 29 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	ea 29 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	ea 29 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	ea 29 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	ea 29 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	ea 29 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	ea 29 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	ea 29 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	ea 29 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	ea 29 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	ea 29 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	ea 29 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	ea 29 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	ea 29 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	ea 29 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	ea 29 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	ea 29 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	ea 29 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	ea 29 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	ea 29 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	ea 29 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	ea 29 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	ea 29 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	ea 29 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	ea 29 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	ea 29 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	ea 29 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	ea 29 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	ea 29 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	ea 29 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	ea 29 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	ea 29 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	ea 29 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	ea 29 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	ea 29 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	ea 29 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	ea 29 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	ea 29 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	ea 29 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	ea 29 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	ea 29 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	ea 29 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	ea 29 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	ea 29 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	ea 29 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	ea 29 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	ea 29 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	ea 29 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	ea 29 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	ea 29 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	ea 29 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	ea 29 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	ea 29 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	ea 29 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	ef 04 21    	mov.w     #0x104e, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	87 00 07    	rcall     0x1234 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	40 9c 22    	mov.w     #0x29c4, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	ac 20 02    	call      0x20ac <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	60 12 20    	mov.w     #0x126, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	08 22 04    	goto      0x2208 <_setup>
    1216:	00 00 00 
    1218:	54 21 04    	goto      0x2154 <_secondnum>
    121a:	00 00 00 
    121c:	c4 21 04    	goto      0x21c4 <_thirdnum>
    121e:	00 00 00 
    1220:	f2 20 04    	goto      0x20f2 <_firstnum>
    1222:	00 00 00 
    1224:	9e 22 04    	goto      0x229e <_solved>
    1226:	00 00 00 
    1228:	56 22 04    	goto      0x2256 <_run>
    122a:	00 00 00 
    122c:	e4 22 04    	goto      0x22e4 <_end_win>
    122e:	00 00 00 
    1230:	3a 23 04    	goto      0x233a <_end_fail>
    1232:	00 00 00 

00001234 <__crt_start_mode>:
    1234:	00 00 05    	retlw.w   #0x0, w0

00001236 <___subsf3>:
    1236:	03 f0 a2    	btg.w     w3, #0xf

00001238 <___addsf3>:
    1238:	88 9f be    	mov.d     w8, [w15++]
    123a:	8a 9f be    	mov.d     w10, [w15++]
    123c:	8c 1f 78    	mov.w     w12, [w15++]
    123e:	f6 00 07    	rcall     0x142c <__funpack2>
    1240:	fd 00 33    	bra       N, 0x143c <__fPropagateNaN>
    1242:	64 50 e1    	cp.w      w10, #0x4
    1244:	4f 00 32    	bra       Z, 0x12e4 <aisinfinite>

00001246 <checkspecialb>:
    1246:	64 20 e1    	cp.w      w4, #0x4
    1248:	52 00 32    	bra       Z, 0x12ee <return2>
    124a:	03 82 6c    	xor.w     w9, w3, w4
    124c:	07 00 3b    	bra       NN, 0x125c <getsign>
    124e:	09 05 d0    	sl.w      w9, w10
    1250:	03 06 d0    	sl.w      w3, w12
    1252:	82 0f 54    	sub.w     w8, w2, [w15]
    1254:	0c 06 5d    	subb.w    w10, w12, w12
    1256:	02 00 39    	bra       NC, 0x125c <getsign>
    1258:	02 00 32    	bra       Z, 0x125e <gotsign>
    125a:	89 01 78    	mov.w     w9, w3

0000125c <getsign>:
    125c:	03 06 78    	mov.w     w3, w12

0000125e <gotsign>:
    125e:	85 82 55    	sub.w     w11, w5, w5
    1260:	04 00 3d    	bra       GE, 0x126a <expcanonical>
    1262:	00 03 fd    	exch      w0, w6
    1264:	81 03 fd    	exch      w1, w7
    1266:	85 02 ea    	neg.w     w5, w5
    1268:	8b 85 42    	add.w     w5, w11, w11

0000126a <expcanonical>:
    126a:	84 0f 72    	ior.w     w4, w4, [w15]
    126c:	02 00 3b    	bra       NN, 0x1272 <nonegate>
    126e:	60 00 10    	subr.w    w0, #0x0, w0
    1270:	e0 80 18    	subbr.w   w1, #0x0, w1

00001272 <nonegate>:
    1272:	60 11 b8    	mul.uu    w2, #0x0, w2
    1274:	00 05 eb    	clr.w     w10
    1276:	7a 28 e1    	cp.w      w5, #0x1a
    1278:	0a 00 39    	bra       NC, 0x128e <aligniter>
    127a:	06 00 78    	mov.w     w6, w0
    127c:	c7 5d dd    	sl.w      w11, #0x7, w11
    127e:	f7 07 b2    	and.w     #0x7f, w7
    1280:	87 80 75    	ior.w     w11, w7, w1
    1282:	2d 00 37    	bra       0x12de <signoff>

00001284 <align>:
    1284:	82 81 71    	ior.w     w3, w2, w3
    1286:	0a 01 78    	mov.w     w10, w2
    1288:	61 05 60    	and.w     w0, #0x1, w10
    128a:	81 80 d1    	asr.w     w1, w1
    128c:	00 80 d3    	rrc.w     w0, w0

0000128e <aligniter>:
    128e:	85 02 e9    	dec.w     w5, w5
    1290:	f9 ff 3b    	bra       NN, 0x1284 <align>

00001292 <aligned>:
    1292:	06 04 40    	add.w     w0, w6, w8
    1294:	87 84 48    	addc.w    w1, w7, w9
    1296:	02 00 3b    	bra       NN, 0x129c <normalizesum>
    1298:	60 04 14    	subr.w    w8, #0x0, w8
    129a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000129c <normalizesum>:
    129c:	09 88 a3    	btst.z    w9, #0x8
    129e:	07 00 32    	bra       Z, 0x12ae <checknormal>
    12a0:	8a 81 71    	ior.w     w3, w10, w3
    12a2:	82 81 71    	ior.w     w3, w2, w3
    12a4:	61 01 64    	and.w     w8, #0x1, w2
    12a6:	89 04 d1    	lsr.w     w9, w9
    12a8:	08 84 d3    	rrc.w     w8, w8
    12aa:	8b 05 e8    	inc.w     w11, w11
    12ac:	17 00 37    	bra       0x12dc <round>

000012ae <checknormal>:
    12ae:	09 78 a3    	btst.z    w9, #0x7
    12b0:	13 00 3a    	bra       NZ, 0x12d8 <discardguard>

000012b2 <underflow>:
    12b2:	0b 00 e0    	cp0.w     w11
    12b4:	13 00 34    	bra       LE, 0x12dc <round>
    12b6:	8b 05 e9    	dec.w     w11, w11
    12b8:	08 04 44    	add.w     w8, w8, w8
    12ba:	89 84 4c    	addc.w    w9, w9, w9
    12bc:	0a 44 74    	ior.b     w8, w10, w8
    12be:	09 78 a3    	btst.z    w9, #0x7
    12c0:	0d 00 3a    	bra       NZ, 0x12dc <round>

000012c2 <normalizeloop>:
    12c2:	0b 00 e0    	cp0.w     w11
    12c4:	07 00 34    	bra       LE, 0x12d4 <normalizeexit>
    12c6:	8b 05 e9    	dec.w     w11, w11
    12c8:	08 04 44    	add.w     w8, w8, w8
    12ca:	89 84 4c    	addc.w    w9, w9, w9
    12cc:	01 00 3a    	bra       NZ, 0x12d0 <normalizetest>
    12ce:	0b 00 20    	mov.w     #0x0, w11

000012d0 <normalizetest>:
    12d0:	09 78 a3    	btst.z    w9, #0x7
    12d2:	f7 ff 32    	bra       Z, 0x12c2 <normalizeloop>

000012d4 <normalizeexit>:
    12d4:	00 01 eb    	clr.w     w2
    12d6:	02 00 37    	bra       0x12dc <round>

000012d8 <discardguard>:
    12d8:	82 81 71    	ior.w     w3, w2, w3
    12da:	0a 01 78    	mov.w     w10, w2

000012dc <round>:
    12dc:	6c 00 07    	rcall     0x13b6 <__fpack>

000012de <signoff>:
    12de:	0c f0 a7    	btsc.w    w12, #0xf
    12e0:	01 f0 a0    	bset.w    w1, #0xf
    12e2:	b5 00 37    	bra       0x144e <__fbopExit>

000012e4 <aisinfinite>:
    12e4:	64 20 e1    	cp.w      w4, #0x4
    12e6:	02 00 3a    	bra       NZ, 0x12ec <return8>
    12e8:	83 8f 6c    	xor.w     w9, w3, [w15]
    12ea:	b5 00 33    	bra       N, 0x1456 <__fbopReturnNaN>

000012ec <return8>:
    12ec:	08 01 be    	mov.d     w8, w2

000012ee <return2>:
    12ee:	02 00 be    	mov.d     w2, w0
    12f0:	ae 00 37    	bra       0x144e <__fbopExit>

000012f2 <___divsf3>:
    12f2:	88 9f be    	mov.d     w8, [w15++]
    12f4:	8a 9f be    	mov.d     w10, [w15++]
    12f6:	8c 1f 78    	mov.w     w12, [w15++]
    12f8:	99 00 07    	rcall     0x142c <__funpack2>
    12fa:	a0 00 33    	bra       N, 0x143c <__fPropagateNaN>
    12fc:	03 86 6c    	xor.w     w9, w3, w12
    12fe:	64 50 e1    	cp.w      w10, #0x4
    1300:	2e 00 32    	bra       Z, 0x135e <aisinfinite>
    1302:	64 20 e1    	cp.w      w4, #0x4
    1304:	33 00 32    	bra       Z, 0x136c <returnZero>
    1306:	61 50 e1    	cp.w      w10, #0x1
    1308:	2f 00 32    	bra       Z, 0x1368 <aiszero>
    130a:	61 20 e1    	cp.w      w4, #0x1
    130c:	31 00 32    	bra       Z, 0x1370 <returnInf>

0000130e <finitenonzero>:
    130e:	85 85 55    	sub.w     w11, w5, w11
    1310:	eb 07 b0    	add.w     #0x7e, w11
    1312:	09 00 20    	mov.w     #0x0, w9
    1314:	08 04 20    	mov.w     #0x40, w8
    1316:	05 00 37    	bra       0x1322 <diventry>

00001318 <divnext>:
    1318:	08 04 44    	add.w     w8, w8, w8
    131a:	89 84 4c    	addc.w    w9, w9, w9
    131c:	0a 00 31    	bra       C, 0x1332 <divdone> <formsticky>

0000131e <divloop>:
    131e:	06 03 43    	add.w     w6, w6, w6
    1320:	87 83 4b    	addc.w    w7, w7, w7

00001322 <diventry>:
    1322:	00 01 53    	sub.w     w6, w0, w2
    1324:	81 81 5b    	subb.w    w7, w1, w3
    1326:	f8 ff 33    	bra       N, 0x1318 <divnext>
    1328:	02 03 be    	mov.d     w2, w6
    132a:	08 00 a0    	bset.w    w8, #0x0
    132c:	08 04 44    	add.w     w8, w8, w8
    132e:	89 84 4c    	addc.w    w9, w9, w9
    1330:	f6 ff 39    	bra       NC, 0x131e <divloop>

00001332 <divdone>:
    1332:	c6 39 dd    	sl.w      w7, #0x6, w3
    1334:	83 01 73    	ior.w     w6, w3, w3
    1336:	01 00 32    	bra       Z, 0x133a <stickyok>
    1338:	13 00 20    	mov.w     #0x1, w3

0000133a <stickyok>:
    133a:	89 04 d1    	lsr.w     w9, w9
    133c:	08 84 d3    	rrc.w     w8, w8
    133e:	09 98 a3    	btst.z    w9, #0x9
    1340:	05 00 32    	bra       Z, 0x134c <guardused>
    1342:	08 00 a7    	btsc.w    w8, #0x0
    1344:	03 00 a0    	bset.w    w3, #0x0
    1346:	89 04 d1    	lsr.w     w9, w9
    1348:	08 84 d3    	rrc.w     w8, w8
    134a:	8b 05 e8    	inc.w     w11, w11

0000134c <guardused>:
    134c:	89 04 d1    	lsr.w     w9, w9
    134e:	08 84 d3    	rrc.w     w8, w8
    1350:	00 01 eb    	clr.w     w2
    1352:	02 81 d2    	rlc.w     w2, w2
    1354:	30 00 07    	rcall     0x13b6 <__fpack>

00001356 <return0>:
    1356:	01 f0 a1    	bclr.w    w1, #0xf
    1358:	0c f0 a7    	btsc.w    w12, #0xf
    135a:	01 f0 a0    	bset.w    w1, #0xf
    135c:	78 00 37    	bra       0x144e <__fbopExit>

0000135e <aisinfinite>:
    135e:	64 20 e1    	cp.w      w4, #0x4
    1360:	7a 00 32    	bra       Z, 0x1456 <__fbopReturnNaN>

00001362 <return8>:
    1362:	08 01 be    	mov.d     w8, w2

00001364 <return2>:
    1364:	02 00 be    	mov.d     w2, w0
    1366:	f7 ff 37    	bra       0x1356 <return0>

00001368 <aiszero>:
    1368:	61 20 e1    	cp.w      w4, #0x1
    136a:	75 00 32    	bra       Z, 0x1456 <__fbopReturnNaN>

0000136c <returnZero>:
    136c:	60 00 b8    	mul.uu    w0, #0x0, w0
    136e:	f3 ff 37    	bra       0x1356 <return0>

00001370 <returnInf>:
    1370:	00 00 20    	mov.w     #0x0, w0
    1372:	01 f8 27    	mov.w     #0x7f80, w1
    1374:	f0 ff 37    	bra       0x1356 <return0>

00001376 <___eqsf2>:
    1376:	14 00 20    	mov.w     #0x1, w4
    1378:	b8 00 37    	bra       0x14ea <__fcompare>

0000137a <___fixunssfsi>:
    137a:	00 01 be    	mov.d     w0, w2
    137c:	42 00 07    	rcall     0x1402 <__funpack>
    137e:	04 70 a7    	btsc.w    w4, #0x7
    1380:	03 f0 a1    	bclr.w    w3, #0xf
    1382:	03 f8 a3    	btst.z    w3, #0xf
    1384:	13 00 3a    	bra       NZ, 0x13ac <returnzero>
    1386:	65 09 b1    	sub.w     #0x96, w5
    1388:	10 00 32    	bra       Z, 0x13aa <exit>
    138a:	09 00 35    	bra       LT, 0x139e <shiftright>
    138c:	69 28 e1    	cp.w      w5, #0x9
    138e:	02 00 35    	bra       LT, 0x1394 <shiftleft>
    1390:	01 00 28    	mov.w     #0x8000, w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <shiftleft>:
    1394:	00 00 40    	add.w     w0, w0, w0
    1396:	81 80 48    	addc.w    w1, w1, w1
    1398:	85 02 e9    	dec.w     w5, w5
    139a:	fc ff 3a    	bra       NZ, 0x1394 <shiftleft>
    139c:	00 00 06    	return    

0000139e <shiftright>:
    139e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13a0:	05 00 35    	bra       LT, 0x13ac <returnzero>

000013a2 <shiftrightloop>:
    13a2:	81 00 d1    	lsr.w     w1, w1
    13a4:	00 80 d3    	rrc.w     w0, w0
    13a6:	85 02 e8    	inc.w     w5, w5
    13a8:	fc ff 3a    	bra       NZ, 0x13a2 <shiftrightloop>

000013aa <exit>:
    13aa:	00 00 06    	return    

000013ac <returnzero>:
    13ac:	80 00 eb    	clr.w     w1
    13ae:	00 00 05    	retlw.w   #0x0, w0

000013b0 <___floatsisf>:
    13b0:	4f 89 de    	asr.w     w1, #0xf, w2
    13b2:	82 01 78    	mov.w     w2, w3
    13b4:	b5 00 37    	bra       0x1520 <___floatdisf>

000013b6 <__fpack>:
    13b6:	81 00 20    	mov.w     #0x8, w1
    13b8:	61 80 55    	sub.w     w11, #0x1, w0
    13ba:	0b 00 3d    	bra       GE, 0x13d2 <notsubnormal>
    13bc:	0b 00 20    	mov.w     #0x0, w11
    13be:	61 fe 2f    	mov.w     #0xffe6, w1
    13c0:	01 00 e1    	cp.w      w0, w1
    13c2:	1d 00 34    	bra       LE, 0x13fe <zerosig>

000013c4 <subnormal>:
    13c4:	82 81 71    	ior.w     w3, w2, w3
    13c6:	61 01 64    	and.w     w8, #0x1, w2
    13c8:	89 04 d1    	lsr.w     w9, w9
    13ca:	08 84 d3    	rrc.w     w8, w8
    13cc:	00 00 e8    	inc.w     w0, w0
    13ce:	fa ff 3a    	bra       NZ, 0x13c4 <subnormal>
    13d0:	71 00 20    	mov.w     #0x7, w1

000013d2 <notsubnormal>:
    13d2:	61 00 64    	and.w     w8, #0x1, w0
    13d4:	03 00 70    	ior.w     w0, w3, w0
    13d6:	02 00 60    	and.w     w0, w2, w0
    13d8:	09 00 32    	bra       Z, 0x13ec <packupandgo>
    13da:	61 04 44    	add.w     w8, #0x1, w8
    13dc:	e0 84 4c    	addc.w    w9, #0x0, w9
    13de:	09 88 a5    	btst.z    w9, w1
    13e0:	05 00 32    	bra       Z, 0x13ec <packupandgo>
    13e2:	8b 05 e8    	inc.w     w11, w11
    13e4:	68 08 e1    	cp.w      w1, #0x8
    13e6:	02 00 3a    	bra       NZ, 0x13ec <packupandgo>
    13e8:	89 04 d1    	lsr.w     w9, w9
    13ea:	08 84 d3    	rrc.w     w8, w8

000013ec <packupandgo>:
    13ec:	f2 0f 20    	mov.w     #0xff, w2
    13ee:	02 58 e1    	cp.w      w11, w2
    13f0:	05 00 3d    	bra       GE, 0x13fc <overflow>
    13f2:	c7 5d dd    	sl.w      w11, #0x7, w11
    13f4:	f9 07 b2    	and.w     #0x7f, w9
    13f6:	89 80 75    	ior.w     w11, w9, w1
    13f8:	08 00 78    	mov.w     w8, w0
    13fa:	00 00 06    	return    

000013fc <overflow>:
    13fc:	0b f8 27    	mov.w     #0x7f80, w11

000013fe <zerosig>:
    13fe:	8b 00 78    	mov.w     w11, w1
    1400:	00 00 05    	retlw.w   #0x0, w0

00001402 <__funpack>:
    1402:	c7 0a de    	lsr.w     w1, #0x7, w5
    1404:	f1 07 b2    	and.w     #0x7f, w1
    1406:	f5 0f b2    	and.w     #0xff, w5
    1408:	08 00 32    	bra       Z, 0x141a <zeroorsub>
    140a:	e1 cf 42    	add.b     w5, #0x1, [w15]
    140c:	02 00 32    	bra       Z, 0x1412 <nanorinf>

0000140e <finitereturn>:
    140e:	01 70 a0    	bset.w    w1, #0x7
    1410:	24 00 05    	retlw.w   #0x2, w4

00001412 <nanorinf>:
    1412:	81 0f 70    	ior.w     w0, w1, [w15]
    1414:	01 00 32    	bra       Z, 0x1418 <infinite>
    1416:	04 08 05    	retlw.w   #0x80, w4

00001418 <infinite>:
    1418:	44 00 05    	retlw.w   #0x4, w4

0000141a <zeroorsub>:
    141a:	81 0f 70    	ior.w     w0, w1, [w15]
    141c:	02 00 3a    	bra       NZ, 0x1422 <subnormal>
    141e:	14 00 05    	retlw.w   #0x1, w4

00001420 <normalize>:
    1420:	85 02 e9    	dec.w     w5, w5

00001422 <subnormal>:
    1422:	00 00 40    	add.w     w0, w0, w0
    1424:	81 c0 48    	addc.b    w1, w1, w1
    1426:	fc ff 3b    	bra       NN, 0x1420 <normalize>
    1428:	01 70 a0    	bset.w    w1, #0x7
    142a:	24 00 05    	retlw.w   #0x2, w4

0000142c <__funpack2>:
    142c:	00 04 be    	mov.d     w0, w8
    142e:	e9 ff 07    	rcall     0x1402 <__funpack>
    1430:	00 03 be    	mov.d     w0, w6
    1432:	04 05 be    	mov.d     w4, w10
    1434:	02 00 be    	mov.d     w2, w0
    1436:	e5 ff 07    	rcall     0x1402 <__funpack>
    1438:	84 4f 75    	ior.b     w10, w4, [w15]
    143a:	00 00 06    	return    

0000143c <__fPropagateNaN>:
    143c:	02 00 be    	mov.d     w2, w0
    143e:	64 50 e1    	cp.w      w10, #0x4
    1440:	05 00 36    	bra       LEU, 0x144c <return0>
    1442:	64 20 e1    	cp.w      w4, #0x4
    1444:	02 00 36    	bra       LEU, 0x144a <return8>
    1446:	09 68 a3    	btst.z    w9, #0x6
    1448:	01 00 3a    	bra       NZ, 0x144c <return0>

0000144a <return8>:
    144a:	08 00 be    	mov.d     w8, w0

0000144c <return0>:
    144c:	01 60 a0    	bset.w    w1, #0x6

0000144e <__fbopExit>:
    144e:	4f 06 78    	mov.w     [--w15], w12
    1450:	4f 05 be    	mov.d     [--w15], w10
    1452:	4f 04 be    	mov.d     [--w15], w8
    1454:	00 00 06    	return    

00001456 <__fbopReturnNaN>:
    1456:	f0 ff 2f    	mov.w     #0xffff, w0
    1458:	f1 ff 27    	mov.w     #0x7fff, w1
    145a:	f9 ff 37    	bra       0x144e <__fbopExit>

0000145c <___mulsf3>:
    145c:	88 9f be    	mov.d     w8, [w15++]
    145e:	8a 9f be    	mov.d     w10, [w15++]
    1460:	8c 1f 78    	mov.w     w12, [w15++]
    1462:	e4 ff 07    	rcall     0x142c <__funpack2>
    1464:	eb ff 33    	bra       N, 0x143c <__fPropagateNaN>
    1466:	03 86 6c    	xor.w     w9, w3, w12
    1468:	64 50 e1    	cp.w      w10, #0x4
    146a:	24 00 32    	bra       Z, 0x14b4 <aisinfinite>
    146c:	64 20 e1    	cp.w      w4, #0x4
    146e:	27 00 32    	bra       Z, 0x14be <bisinfinite>
    1470:	61 50 e1    	cp.w      w10, #0x1
    1472:	22 00 32    	bra       Z, 0x14b8 <return8>
    1474:	61 20 e1    	cp.w      w4, #0x1
    1476:	21 00 32    	bra       Z, 0x14ba <return2>
    1478:	8b 85 42    	add.w     w5, w11, w11
    147a:	eb 07 b1    	sub.w     #0x7e, w11
    147c:	01 34 b8    	mul.uu    w6, w1, w8
    147e:	00 3a b8    	mul.uu    w7, w0, w4
    1480:	08 04 42    	add.w     w4, w8, w8
    1482:	89 84 4a    	addc.w    w5, w9, w9
    1484:	01 3a b8    	mul.uu    w7, w1, w4
    1486:	00 30 b8    	mul.uu    w6, w0, w0
    1488:	88 80 40    	add.w     w1, w8, w1
    148a:	09 01 4a    	addc.w    w4, w9, w2
    148c:	04 00 33    	bra       N, 0x1496 <formsticky>
    148e:	00 00 40    	add.w     w0, w0, w0
    1490:	81 80 48    	addc.w    w1, w1, w1
    1492:	02 01 49    	addc.w    w2, w2, w2
    1494:	8b 05 e9    	dec.w     w11, w11

00001496 <formsticky>:
    1496:	c9 09 dd    	sl.w      w1, #0x9, w3
    1498:	83 01 70    	ior.w     w0, w3, w3
    149a:	01 00 32    	bra       Z, 0x149e <formRandSig>
    149c:	13 00 20    	mov.w     #0x1, w3

0000149e <formRandSig>:
    149e:	c8 14 de    	lsr.w     w2, #0x8, w9
    14a0:	48 14 dd    	sl.w      w2, #0x8, w8
    14a2:	47 09 de    	lsr.w     w1, #0x7, w2
    14a4:	12 00 b2    	and.w     #0x1, w2
    14a6:	c8 08 de    	lsr.w     w1, #0x8, w1
    14a8:	08 84 70    	ior.w     w1, w8, w8
    14aa:	85 ff 07    	rcall     0x13b6 <__fpack>

000014ac <return0>:
    14ac:	01 f0 a1    	bclr.w    w1, #0xf
    14ae:	0c f0 a7    	btsc.w    w12, #0xf
    14b0:	01 f0 a0    	bset.w    w1, #0xf
    14b2:	cd ff 37    	bra       0x144e <__fbopExit>

000014b4 <aisinfinite>:
    14b4:	61 20 e1    	cp.w      w4, #0x1
    14b6:	cf ff 32    	bra       Z, 0x1456 <__fbopReturnNaN>

000014b8 <return8>:
    14b8:	08 01 be    	mov.d     w8, w2

000014ba <return2>:
    14ba:	02 00 be    	mov.d     w2, w0
    14bc:	f7 ff 37    	bra       0x14ac <return0>

000014be <bisinfinite>:
    14be:	61 50 e1    	cp.w      w10, #0x1
    14c0:	fc ff 3a    	bra       NZ, 0x14ba <return2>
    14c2:	c9 ff 37    	bra       0x1456 <__fbopReturnNaN>

000014c4 <___udivsi3>:
    14c4:	60 22 b8    	mul.uu    w4, #0x0, w4
    14c6:	06 02 20    	mov.w     #0x20, w6

000014c8 <nextbit>:
    14c8:	00 00 d0    	sl.w      w0, w0
    14ca:	81 80 d2    	rlc.w     w1, w1
    14cc:	04 82 d2    	rlc.w     w4, w4
    14ce:	85 82 d2    	rlc.w     w5, w5
    14d0:	00 00 a0    	bset.w    w0, #0x0
    14d2:	02 02 52    	sub.w     w4, w2, w4
    14d4:	83 82 5a    	subb.w    w5, w3, w5
    14d6:	03 00 31    	bra       C, 0x14de <iterate>
    14d8:	02 02 42    	add.w     w4, w2, w4
    14da:	83 82 4a    	addc.w    w5, w3, w5
    14dc:	00 00 a1    	bclr.w    w0, #0x0

000014de <iterate>:
    14de:	06 03 e9    	dec.w     w6, w6
    14e0:	f3 ff 3a    	bra       NZ, 0x14c8 <nextbit>
    14e2:	00 00 06    	return    

000014e4 <___umodsi3>:
    14e4:	ef ff 07    	rcall     0x14c4 <___udivsi3>
    14e6:	04 00 be    	mov.d     w4, w0
    14e8:	00 00 06    	return    

000014ea <__fcompare>:
    14ea:	88 9f be    	mov.d     w8, [w15++]
    14ec:	8a 9f be    	mov.d     w10, [w15++]
    14ee:	84 1f 78    	mov.w     w4, [w15++]
    14f0:	9d ff 07    	rcall     0x142c <__funpack2>
    14f2:	4f 00 78    	mov.w     [--w15], w0
    14f4:	11 00 33    	bra       N, 0x1518 <exit>
    14f6:	f0 ff 2f    	mov.w     #0xffff, w0
    14f8:	83 8f 6c    	xor.w     w9, w3, [w15]
    14fa:	06 00 3b    	bra       NN, 0x1508 <comparemag>
    14fc:	04 05 65    	and.w     w10, w4, w10
    14fe:	0a 00 a7    	btsc.w    w10, #0x0
    1500:	08 00 37    	bra       0x1512 <returnEqual>
    1502:	09 f0 a6    	btss.w    w9, #0xf
    1504:	10 00 20    	mov.w     #0x1, w0
    1506:	08 00 37    	bra       0x1518 <exit>

00001508 <comparemag>:
    1508:	82 0f 54    	sub.w     w8, w2, [w15]
    150a:	83 8f 5c    	subb.w    w9, w3, [w15]
    150c:	03 00 39    	bra       NC, 0x1514 <adjust>
    150e:	10 00 20    	mov.w     #0x1, w0
    1510:	01 00 3e    	bra       GTU, 0x1514 <adjust>

00001512 <returnEqual>:
    1512:	00 00 20    	mov.w     #0x0, w0

00001514 <adjust>:
    1514:	09 f0 a7    	btsc.w    w9, #0xf
    1516:	00 00 ea    	neg.w     w0, w0

00001518 <exit>:
    1518:	4f 05 be    	mov.d     [--w15], w10
    151a:	4f 04 be    	mov.d     [--w15], w8
    151c:	00 00 e0    	cp0.w     w0
    151e:	00 00 06    	return    

00001520 <___floatdisf>:
    1520:	88 1f 78    	mov.w     w8, [w15++]
    1522:	03 04 78    	mov.w     w3, w8
    1524:	03 00 e0    	cp0.w     w3
    1526:	07 00 3d    	bra       GE, 0x1536 <notspecial>

00001528 <negative>:
    1528:	60 00 10    	subr.w    w0, #0x0, w0
    152a:	e0 80 18    	subbr.w   w1, #0x0, w1
    152c:	60 01 19    	subbr.w   w2, #0x0, w2
    152e:	e0 81 19    	subbr.w   w3, #0x0, w3
    1530:	02 00 3b    	bra       NN, 0x1536 <notspecial>
    1532:	01 f0 2d    	mov.w     #0xdf00, w1
    1534:	03 00 37    	bra       0x153c <return0>

00001536 <notspecial>:
    1536:	04 00 07    	rcall     0x1540 <___floatundisf>
    1538:	08 f0 a7    	btsc.w    w8, #0xf
    153a:	01 f0 a0    	bset.w    w1, #0xf

0000153c <return0>:
    153c:	4f 04 78    	mov.w     [--w15], w8
    153e:	00 00 06    	return    

00001540 <___floatundisf>:
    1540:	88 9f be    	mov.d     w8, [w15++]
    1542:	8a 9f be    	mov.d     w10, [w15++]
    1544:	00 82 70    	ior.w     w1, w0, w4
    1546:	04 02 71    	ior.w     w2, w4, w4
    1548:	04 82 71    	ior.w     w3, w4, w4
    154a:	26 00 32    	bra       Z, 0x1598 <return0>
    154c:	00 04 be    	mov.d     w0, w8
    154e:	02 00 be    	mov.d     w2, w0
    1550:	60 11 b8    	mul.uu    w2, #0x0, w2
    1552:	6b 09 20    	mov.w     #0x96, w11
    1554:	95 02 20    	mov.w     #0x29, w5
    1556:	01 82 cf    	ff1l      w1, w4
    1558:	0a 00 39    	bra       NC, 0x156e <fixshift>
    155a:	05 41 b1    	sub.b     #0x10, w5
    155c:	00 82 cf    	ff1l      w0, w4
    155e:	07 00 39    	bra       NC, 0x156e <fixshift>
    1560:	05 41 b1    	sub.b     #0x10, w5
    1562:	09 82 cf    	ff1l      w9, w4
    1564:	04 00 39    	bra       NC, 0x156e <fixshift>
    1566:	05 41 b1    	sub.b     #0x10, w5
    1568:	08 82 cf    	ff1l      w8, w4
    156a:	01 00 39    	bra       NC, 0x156e <fixshift>
    156c:	05 41 b1    	sub.b     #0x10, w5

0000156e <fixshift>:
    156e:	05 42 52    	sub.b     w4, w5, w4
    1570:	12 00 32    	bra       Z, 0x1596 <round>
    1572:	0a 00 3b    	bra       NN, 0x1588 <shiftleft>

00001574 <shiftright>:
    1574:	82 81 71    	ior.w     w3, w2, w3
    1576:	61 01 64    	and.w     w8, #0x1, w2
    1578:	81 00 d1    	lsr.w     w1, w1
    157a:	00 80 d3    	rrc.w     w0, w0
    157c:	89 84 d3    	rrc.w     w9, w9
    157e:	08 84 d3    	rrc.w     w8, w8
    1580:	8b 05 e8    	inc.w     w11, w11
    1582:	04 42 e8    	inc.b     w4, w4
    1584:	f7 ff 3a    	bra       NZ, 0x1574 <shiftright>
    1586:	07 00 37    	bra       0x1596 <round>

00001588 <shiftleft>:
    1588:	08 04 44    	add.w     w8, w8, w8
    158a:	89 84 4c    	addc.w    w9, w9, w9
    158c:	00 00 48    	addc.w    w0, w0, w0
    158e:	81 80 48    	addc.w    w1, w1, w1
    1590:	8b 05 e9    	dec.w     w11, w11
    1592:	04 42 e9    	dec.b     w4, w4
    1594:	f9 ff 3a    	bra       NZ, 0x1588 <shiftleft>

00001596 <round>:
    1596:	0f ff 07    	rcall     0x13b6 <__fpack>

00001598 <return0>:
    1598:	4f 05 be    	mov.d     [--w15], w10
    159a:	4f 04 be    	mov.d     [--w15], w8
    159c:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	6c 29 04    	goto      0x296c <.LFE2>
    1026:	00 00 00 
    1028:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	6e 28 04    	goto      0x286e <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	0c 28 04    	goto      0x280c <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	18 27 04    	goto      0x2718 <__SI2C2Interrupt>
    10b2:	00 00 00 
    10b4:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	ea 29 04    	goto      0x29ea <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000959e <_numbertable>:
    959e:	3f 00       	.word 0x3f
    95a0:	06 00       	.word 0x6
    95a2:	5b 00       	.word 0x5b
    95a4:	4f 00       	.word 0x4f
    95a6:	66 00       	.word 0x66
    95a8:	6d 00       	.word 0x6d
    95aa:	7d 00       	.word 0x7d
    95ac:	07 00       	.word 0x7
    95ae:	7f 00       	.word 0x7f
    95b0:	6f 00       	.word 0x6f
    95b2:	77 00       	.word 0x77
    95b4:	7c 00       	.word 0x7c
    95b6:	39 00       	.word 0x39
    95b8:	5e 00       	.word 0x5e
    95ba:	79 00       	.word 0x79
    95bc:	71 00       	.word 0x71
	...

000095c2 <_alphafonttable>:
    95c2:	01 00       	.word 0x1
    95c4:	02 00       	.word 0x2
    95c6:	04 00       	.word 0x4
    95c8:	08 00       	.word 0x8
    95ca:	10 00       	.word 0x10
    95cc:	20 00       	.word 0x20
    95ce:	40 00       	.word 0x40
    95d0:	80 00       	.word 0x80
    95d2:	00 01       	.word 0x100
    95d4:	00 02       	.word 0x200
    95d6:	00 04       	.word 0x400
    95d8:	00 08       	.word 0x800
    95da:	00 10       	.word 0x1000
    95dc:	00 20       	.word 0x2000
    95de:	00 40       	.word 0x4000
    95e0:	00 80       	.word 0x8000
	...
    95f2:	c9 12       	.word 0x12c9
    95f4:	c0 15       	.word 0x15c0
    95f6:	f9 12       	.word 0x12f9
    95f8:	e3 00       	.word 0xe3
    95fa:	30 05       	.word 0x530
    95fc:	c8 12       	.word 0x12c8
    95fe:	00 3a       	.word 0x3a00
    9600:	00 17       	.word 0x1700
    9602:	00 00       	.word 0
    9604:	06 00       	.word 0x6
    9606:	20 02       	.word 0x220
    9608:	ce 12       	.word 0x12ce
    960a:	ed 12       	.word 0x12ed
    960c:	24 0c       	.word 0xc24
    960e:	5d 23       	.word 0x235d
    9610:	00 04       	.word 0x400
    9612:	00 24       	.word 0x2400
    9614:	00 09       	.word 0x900
    9616:	c0 3f       	.word 0x3fc0
    9618:	c0 12       	.word 0x12c0
    961a:	00 08       	.word 0x800
    961c:	c0 00       	.word 0xc0
    961e:	00 00       	.word 0
    9620:	00 0c       	.word 0xc00
    9622:	3f 0c       	.word 0xc3f
    9624:	06 00       	.word 0x6
    9626:	db 00       	.word 0xdb
    9628:	8f 00       	.word 0x8f
    962a:	e6 00       	.word 0xe6
    962c:	69 20       	.word 0x2069
    962e:	fd 00       	.word 0xfd
    9630:	07 00       	.word 0x7
    9632:	ff 00       	.word 0xff
    9634:	ef 00       	.word 0xef
    9636:	00 12       	.word 0x1200
    9638:	00 0a       	.word 0xa00
    963a:	00 24       	.word 0x2400
    963c:	c8 00       	.word 0xc8
    963e:	00 09       	.word 0x900
    9640:	83 10       	.word 0x1083
    9642:	bb 02       	.word 0x2bb
    9644:	f7 00       	.word 0xf7
    9646:	8f 12       	.word 0x128f
    9648:	39 00       	.word 0x39
    964a:	0f 12       	.word 0x120f
    964c:	f9 00       	.word 0xf9
    964e:	71 00       	.word 0x71
    9650:	bd 00       	.word 0xbd
    9652:	f6 00       	.word 0xf6
    9654:	00 12       	.word 0x1200
    9656:	1e 00       	.word 0x1e
    9658:	70 24       	.word 0x2470
    965a:	38 00       	.word 0x38
    965c:	36 05       	.word 0x536
    965e:	36 21       	.word 0x2136
    9660:	3f 00       	.word 0x3f
    9662:	f3 00       	.word 0xf3
    9664:	3f 20       	.word 0x203f
    9666:	f3 20       	.word 0x20f3
    9668:	ed 00       	.word 0xed
    966a:	01 12       	.word 0x1201
    966c:	3e 00       	.word 0x3e
    966e:	30 0c       	.word 0xc30
    9670:	36 28       	.word 0x2836
    9672:	00 2d       	.word 0x2d00
    9674:	00 15       	.word 0x1500
    9676:	09 0c       	.word 0xc09
    9678:	39 00       	.word 0x39
    967a:	00 21       	.word 0x2100
    967c:	0f 00       	.word 0xf
    967e:	03 0c       	.word 0xc03
    9680:	08 00       	.word 0x8
    9682:	00 01       	.word 0x100
    9684:	58 10       	.word 0x1058
    9686:	78 20       	.word 0x2078
    9688:	d8 00       	.word 0xd8
    968a:	8e 08       	.word 0x88e
    968c:	58 08       	.word 0x858
    968e:	71 00       	.word 0x71
    9690:	8e 04       	.word 0x48e
    9692:	70 10       	.word 0x1070
    9694:	00 10       	.word 0x1000
    9696:	0e 00       	.word 0xe
    9698:	00 36       	.word 0x3600
    969a:	30 00       	.word 0x30
    969c:	d4 10       	.word 0x10d4
    969e:	50 10       	.word 0x1050
    96a0:	dc 00       	.word 0xdc
    96a2:	70 01       	.word 0x170
    96a4:	86 04       	.word 0x486
    96a6:	50 00       	.word 0x50
    96a8:	88 20       	.word 0x2088
    96aa:	78 00       	.word 0x78
    96ac:	1c 00       	.word 0x1c
    96ae:	04 20       	.word 0x2004
    96b0:	14 28       	.word 0x2814
    96b2:	c0 28       	.word 0x28c0
    96b4:	0c 20       	.word 0x200c
    96b6:	48 08       	.word 0x848
    96b8:	49 09       	.word 0x949
    96ba:	00 12       	.word 0x1200
    96bc:	89 24       	.word 0x2489
    96be:	20 05       	.word 0x520
    96c0:	ff 3f       	.word 0x3fff

000096c2 <_adafruit_display_addr>:
    96c2:	e0 00       	.word 0xe0
Disassembly of section .text:

000016c4 <_led_begin>:

};


void led_begin(_ADAFRUIT_LED* ptr, uint8_t addr){
    16c4:	04 00 fa    	lnk       #0x4
    16c6:	00 0f 78    	mov.w     w0, [w14]
    16c8:	21 47 98    	mov.b     w1, [w14+2]
  ptr->i2c_addr = addr;
    16ca:	1e 00 78    	mov.w     [w14], w0
    16cc:	ae 40 90    	mov.b     [w14+2], w1
    16ce:	01 50 98    	mov.b     w1, [w0+16]
  i2c_start();
    16d0:	cb 02 07    	rcall     0x1c68 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    16d2:	1e 00 78    	mov.w     [w14], w0
    16d4:	00 50 90    	mov.b     [w0+16], w0
    16d6:	00 80 fb    	ze        w0, w0
    16d8:	16 03 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(0x21); // turn on oscillator
    16da:	10 02 20    	mov.w     #0x21, w0
    16dc:	14 03 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    16de:	f8 02 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
  led_blinkRate((_ADAFRUIT_LED *)ptr, HT16K33_BLINK_OFF);
    16e0:	80 40 eb    	clr.b     w1
    16e2:	1e 00 78    	mov.w     [w14], w0
    16e4:	1a 00 07    	rcall     0x171a <_led_blinkRate> <.LFB2> <.LFE1>
  led_setBrightness((_ADAFRUIT_LED *)ptr,15); // set max brightness
    16e6:	f1 c0 b3    	mov.b     #0xf, w1
    16e8:	1e 00 78    	mov.w     [w14], w0
    16ea:	02 00 07    	rcall     0x16f0 <_led_setBrightness> <.LFB1> <.LFE0>
}
    16ec:	00 80 fa    	ulnk      
    16ee:	00 00 06    	return    

000016f0 <_led_setBrightness>:

void led_setBrightness(_ADAFRUIT_LED* ptr, uint8_t b){
    16f0:	04 00 fa    	lnk       #0x4
    16f2:	00 0f 78    	mov.w     w0, [w14]
    16f4:	21 47 98    	mov.b     w1, [w14+2]
  if (b > 15) b = 15;
    16f6:	2e 40 90    	mov.b     [w14+2], w0
    16f8:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    16fa:	02 00 36    	bra       LEU, 0x1700 <.L3>
    16fc:	f0 c0 b3    	mov.b     #0xf, w0
    16fe:	20 47 98    	mov.b     w0, [w14+2]

00001700 <.L3>:
  i2c_start();
    1700:	b3 02 07    	rcall     0x1c68 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1702:	1e 00 78    	mov.w     [w14], w0
    1704:	00 50 90    	mov.b     [w0+16], w0
    1706:	00 80 fb    	ze        w0, w0
    1708:	fe 02 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(HT16K33_CMD_BRIGHTNESS | b);
    170a:	ae 40 90    	mov.b     [w14+2], w1
    170c:	00 ce b3    	mov.b     #0xe0, w0
    170e:	00 c0 70    	ior.b     w1, w0, w0
    1710:	00 80 fb    	ze        w0, w0
    1712:	f9 02 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1714:	dd 02 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1716:	00 80 fa    	ulnk      
    1718:	00 00 06    	return    

0000171a <_led_blinkRate>:

void led_blinkRate(_ADAFRUIT_LED* ptr, uint8_t b){
    171a:	04 00 fa    	lnk       #0x4
    171c:	00 0f 78    	mov.w     w0, [w14]
    171e:	21 47 98    	mov.b     w1, [w14+2]
  i2c_start();
    1720:	a3 02 07    	rcall     0x1c68 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1722:	1e 00 78    	mov.w     [w14], w0
    1724:	00 50 90    	mov.b     [w0+16], w0
    1726:	00 80 fb    	ze        w0, w0
    1728:	ee 02 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
  if (b > 3) b = 0; // turn off if not sure
    172a:	2e 40 90    	mov.b     [w14+2], w0
    172c:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    172e:	02 00 36    	bra       LEU, 0x1734 <.L5>
    1730:	00 40 eb    	clr.b     w0
    1732:	20 47 98    	mov.b     w0, [w14+2]

00001734 <.L5>:
  send_i2c_byte(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1));
    1734:	2e 40 90    	mov.b     [w14+2], w0
    1736:	00 80 fb    	ze        w0, w0
    1738:	00 00 40    	add.w     w0, w0, w0
    173a:	80 00 78    	mov.w     w0, w1
    173c:	10 08 20    	mov.w     #0x81, w0
    173e:	01 00 70    	ior.w     w0, w1, w0
    1740:	e2 02 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1742:	c6 02 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1744:	00 80 fa    	ulnk      
    1746:	00 00 06    	return    

00001748 <_led_writeDisplay>:

void led_writeDisplay(_ADAFRUIT_LED* ptr){
    1748:	04 00 fa    	lnk       #0x4
    174a:	10 07 98    	mov.w     w0, [w14+2]
  i2c_start();
    174c:	8d 02 07    	rcall     0x1c68 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    174e:	1e 00 90    	mov.w     [w14+2], w0
    1750:	00 50 90    	mov.b     [w0+16], w0
    1752:	00 80 fb    	ze        w0, w0
    1754:	d8 02 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
	send_i2c_byte(0x00); // Start at address 0
    1756:	00 00 eb    	clr.w     w0
    1758:	d6 02 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
	uint8_t i;
  for (i=0; i<8; i++) {
    175a:	00 40 eb    	clr.b     w0
    175c:	00 4f 78    	mov.b     w0, [w14]
    175e:	0f 00 37    	bra       0x177e <.L7>

00001760 <.L8>:
    send_i2c_byte(ptr->displaybuffer[i] & 0xFF);
    1760:	1e 80 fb    	ze        [w14], w0
    1762:	9e 00 90    	mov.w     [w14+2], w1
    1764:	00 00 40    	add.w     w0, w0, w0
    1766:	61 00 78    	mov.w     [w1+w0], w0
    1768:	80 00 78    	mov.w     w0, w1
    176a:	f0 0f 20    	mov.w     #0xff, w0
    176c:	00 80 60    	and.w     w1, w0, w0
    176e:	cb 02 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ptr->displaybuffer[i] >> 8);
    1770:	1e 80 fb    	ze        [w14], w0
    1772:	9e 00 90    	mov.w     [w14+2], w1
    1774:	00 00 40    	add.w     w0, w0, w0
    1776:	61 00 78    	mov.w     [w1+w0], w0
    1778:	48 00 de    	lsr.w     w0, #0x8, w0
    177a:	c5 02 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
    177c:	1e 4f e8    	inc.b     [w14], [w14]

0000177e <.L7>:
    177e:	1e 40 78    	mov.b     [w14], w0
    1780:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    1782:	ee ff 36    	bra       LEU, 0x1760 <.L8>
  }
  reset_i2c_bus();
    1784:	a5 02 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1786:	00 80 fa    	ulnk      
    1788:	00 00 06    	return    

0000178a <_led_clear>:

void led_clear(_ADAFRUIT_LED* ptr){
    178a:	04 00 fa    	lnk       #0x4
    178c:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
	for (i=0; i<8; i++) {
    178e:	00 40 eb    	clr.b     w0
    1790:	00 4f 78    	mov.b     w0, [w14]
    1792:	07 00 37    	bra       0x17a2 <.L10>

00001794 <.L11>:
    ptr->displaybuffer[i] = 0;
    1794:	1e 80 fb    	ze        [w14], w0
    1796:	9e 00 90    	mov.w     [w14+2], w1
    1798:	00 00 40    	add.w     w0, w0, w0
    179a:	00 80 40    	add.w     w1, w0, w0
    179c:	80 00 eb    	clr.w     w1
    179e:	01 08 78    	mov.w     w1, [w0]
    17a0:	1e 4f e8    	inc.b     [w14], [w14]

000017a2 <.L10>:
    17a2:	1e 40 78    	mov.b     [w14], w0
    17a4:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    17a6:	f6 ff 36    	bra       LEU, 0x1794 <.L11>
  }
}
    17a8:	00 80 fa    	ulnk      
    17aa:	00 00 06    	return    

000017ac <_alphanum_begin>:

// ALPHANUM ********************************************************************

void alphanum_begin(_ALPHANUM* ptr, uint8_t addr){
    17ac:	04 00 fa    	lnk       #0x4
    17ae:	00 0f 78    	mov.w     w0, [w14]
    17b0:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr); // Call super constructor
    17b2:	1e 00 78    	mov.w     [w14], w0
    17b4:	ae 40 90    	mov.b     [w14+2], w1
    17b6:	86 ff 07    	rcall     0x16c4 <_led_begin> <.L0> <.LFB0> <.Ltext0>
}
    17b8:	00 80 fa    	ulnk      
    17ba:	00 00 06    	return    

000017bc <_alphanum_writeDigitRaw>:

void alphanum_writeDigitRaw(_ALPHANUM* ptr, uint8_t n, uint16_t bitmask){
    17bc:	06 00 fa    	lnk       #0x6
    17be:	00 0f 78    	mov.w     w0, [w14]
    17c0:	21 47 98    	mov.b     w1, [w14+2]
    17c2:	22 07 98    	mov.w     w2, [w14+4]
  ptr->super.displaybuffer[n] = bitmask;
    17c4:	2e 40 90    	mov.b     [w14+2], w0
    17c6:	00 80 fb    	ze        w0, w0
    17c8:	9e 00 78    	mov.w     [w14], w1
    17ca:	00 00 40    	add.w     w0, w0, w0
    17cc:	00 80 40    	add.w     w1, w0, w0
    17ce:	ae 00 90    	mov.w     [w14+4], w1
    17d0:	01 08 78    	mov.w     w1, [w0]
}
    17d2:	00 80 fa    	ulnk      
    17d4:	00 00 06    	return    

000017d6 <_alphanum_writeDigitAscii>:

void alphanum_writeDigitAscii(_ALPHANUM* ptr, uint8_t n, uint8_t ascii, uint8_t dot){
    17d6:	08 00 fa    	lnk       #0x8
    17d8:	10 07 98    	mov.w     w0, [w14+2]
    17da:	41 47 98    	mov.b     w1, [w14+4]
    17dc:	52 47 98    	mov.b     w2, [w14+5]
    17de:	63 47 98    	mov.b     w3, [w14+6]
  uint16_t font = alphafonttable[ascii];
    17e0:	5e 40 90    	mov.b     [w14+5], w0
    17e2:	00 80 fb    	ze        w0, w0
    17e4:	80 00 40    	add.w     w0, w0, w1
    17e6:	20 5c 29    	mov.w     #0x95c2, w0
    17e8:	00 80 40    	add.w     w1, w0, w0
    17ea:	10 0f 78    	mov.w     [w0], [w14]
  ptr->super.displaybuffer[n] = font;
    17ec:	4e 40 90    	mov.b     [w14+4], w0
    17ee:	00 80 fb    	ze        w0, w0
    17f0:	9e 00 90    	mov.w     [w14+2], w1
    17f2:	00 00 40    	add.w     w0, w0, w0
    17f4:	00 80 40    	add.w     w1, w0, w0
    17f6:	1e 08 78    	mov.w     [w14], [w0]
  if (dot) ptr->super.displaybuffer[n] |= (1<<14);
    17f8:	6e 40 90    	mov.b     [w14+6], w0
    17fa:	00 04 e0    	cp0.b     w0
    17fc:	0c 00 32    	bra       Z, 0x1816 <.L14>
    17fe:	4e 40 90    	mov.b     [w14+4], w0
    1800:	00 80 fb    	ze        w0, w0
    1802:	ce 40 90    	mov.b     [w14+4], w1
    1804:	81 80 fb    	ze        w1, w1
    1806:	1e 01 90    	mov.w     [w14+2], w2
    1808:	81 80 40    	add.w     w1, w1, w1
    180a:	e2 80 78    	mov.w     [w2+w1], w1
    180c:	01 e0 a0    	bset.w    w1, #0xe
    180e:	1e 01 90    	mov.w     [w14+2], w2
    1810:	00 00 40    	add.w     w0, w0, w0
    1812:	00 00 41    	add.w     w2, w0, w0
    1814:	01 08 78    	mov.w     w1, [w0]

00001816 <.L14>:
}
    1816:	00 80 fa    	ulnk      
    1818:	00 00 06    	return    

0000181a <_bargraph_begin>:

// 24 BARGRAPH *****************************************************************

void bargraph_begin(_BARGRAPH* ptr, uint8_t addr){
    181a:	04 00 fa    	lnk       #0x4
    181c:	00 0f 78    	mov.w     w0, [w14]
    181e:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr);
    1820:	1e 00 78    	mov.w     [w14], w0
    1822:	ae 40 90    	mov.b     [w14+2], w1
    1824:	4f ff 07    	rcall     0x16c4 <_led_begin> <.L0> <.LFB0> <.Ltext0>
}
    1826:	00 80 fa    	ulnk      
    1828:	00 00 06    	return    

0000182a <_bargraph_setBar>:

void bargraph_setBar(_BARGRAPH* ptr, uint8_t bar, uint8_t color){
    182a:	08 00 fa    	lnk       #0x8
    182c:	20 07 98    	mov.w     w0, [w14+4]
    182e:	61 47 98    	mov.b     w1, [w14+6]
    1830:	72 47 98    	mov.b     w2, [w14+7]
  uint16_t a, c;

  if (bar < 12)
    1832:	6e 40 90    	mov.b     [w14+6], w0
    1834:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1836:	07 00 3e    	bra       GTU, 0x1846 <.L18>
    c = bar / 4;
    1838:	6e 40 90    	mov.b     [w14+6], w0
    183a:	00 80 fb    	ze        w0, w0
    183c:	42 00 de    	lsr.w     w0, #0x2, w0
    183e:	00 40 78    	mov.b     w0, w0
    1840:	00 80 fb    	ze        w0, w0
    1842:	10 07 98    	mov.w     w0, [w14+2]
    1844:	08 00 37    	bra       0x1856 <.L19>

00001846 <.L18>:
  else
    c = (bar - 12) / 4;
    1846:	6e 40 90    	mov.b     [w14+6], w0
    1848:	00 80 fb    	ze        w0, w0
    184a:	6c 00 50    	sub.w     w0, #0xc, w0
    184c:	00 00 e0    	cp0.w     w0
    184e:	01 00 3d    	bra       GE, 0x1852 <.L20>
    1850:	63 00 40    	add.w     w0, #0x3, w0

00001852 <.L20>:
    1852:	42 80 de    	asr.w     w0, #0x2, w0
    1854:	10 07 98    	mov.w     w0, [w14+2]

00001856 <.L19>:

  a = bar % 4;
    1856:	6e 40 90    	mov.b     [w14+6], w0
    1858:	00 80 fb    	ze        w0, w0
    185a:	63 0f 60    	and.w     w0, #0x3, [w14]
  if (bar >= 12)
    185c:	6e 40 90    	mov.b     [w14+6], w0
    185e:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1860:	02 00 36    	bra       LEU, 0x1866 <.L21>
    a += 4;
    1862:	9e 00 78    	mov.w     [w14], w1
    1864:	64 8f 40    	add.w     w1, #0x4, [w14]

00001866 <.L21>:

  //Serial.print("Ano = "); Serial.print(a); Serial.print(" Cath = "); Serial.println(c);
  if (color == LED_RED) {
    1866:	7e 40 90    	mov.b     [w14+7], w0
    1868:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    186a:	1d 00 3a    	bra       NZ, 0x18a6 <.L22>
    // Turn on red LED.
    ptr->super.displaybuffer[c] |= _BV(a);
    186c:	ae 00 90    	mov.w     [w14+4], w1
    186e:	1e 00 90    	mov.w     [w14+2], w0
    1870:	00 00 40    	add.w     w0, w0, w0
    1872:	e1 00 78    	mov.w     [w1+w0], w1
    1874:	1e 00 78    	mov.w     [w14], w0
    1876:	12 00 20    	mov.w     #0x1, w2
    1878:	00 10 dd    	sl.w      w2, w0, w0
    187a:	81 00 70    	ior.w     w0, w1, w1
    187c:	2e 01 90    	mov.w     [w14+4], w2
    187e:	1e 00 90    	mov.w     [w14+2], w0
    1880:	00 00 40    	add.w     w0, w0, w0
    1882:	00 00 41    	add.w     w2, w0, w0
    1884:	01 08 78    	mov.w     w1, [w0]
    // Turn off green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a+8);
    1886:	ae 00 90    	mov.w     [w14+4], w1
    1888:	1e 00 90    	mov.w     [w14+2], w0
    188a:	00 00 40    	add.w     w0, w0, w0
    188c:	e1 00 78    	mov.w     [w1+w0], w1
    188e:	1e 01 78    	mov.w     [w14], w2
    1890:	68 00 41    	add.w     w2, #0x8, w0
    1892:	12 00 20    	mov.w     #0x1, w2
    1894:	00 10 dd    	sl.w      w2, w0, w0
    1896:	00 80 ea    	com.w     w0, w0
    1898:	80 80 60    	and.w     w1, w0, w1
    189a:	2e 01 90    	mov.w     [w14+4], w2
    189c:	1e 00 90    	mov.w     [w14+2], w0
    189e:	00 00 40    	add.w     w0, w0, w0
    18a0:	00 00 41    	add.w     w2, w0, w0
    18a2:	01 08 78    	mov.w     w1, [w0]
    18a4:	4c 00 37    	bra       0x193e <.L17>

000018a6 <.L22>:
  } else if (color == LED_YELLOW) {
    18a6:	7e 40 90    	mov.b     [w14+7], w0
    18a8:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    18aa:	13 00 3a    	bra       NZ, 0x18d2 <.L24>
    // Turn on red and green LED.
    ptr->super.displaybuffer[c] |= _BV(a) | _BV(a+8);
    18ac:	ae 00 90    	mov.w     [w14+4], w1
    18ae:	1e 00 90    	mov.w     [w14+2], w0
    18b0:	00 00 40    	add.w     w0, w0, w0
    18b2:	e1 00 78    	mov.w     [w1+w0], w1
    18b4:	1e 00 78    	mov.w     [w14], w0
    18b6:	12 00 20    	mov.w     #0x1, w2
    18b8:	00 11 dd    	sl.w      w2, w0, w2
    18ba:	9e 01 78    	mov.w     [w14], w3
    18bc:	68 80 41    	add.w     w3, #0x8, w0
    18be:	13 00 20    	mov.w     #0x1, w3
    18c0:	00 18 dd    	sl.w      w3, w0, w0
    18c2:	02 00 70    	ior.w     w0, w2, w0
    18c4:	81 00 70    	ior.w     w0, w1, w1
    18c6:	2e 01 90    	mov.w     [w14+4], w2
    18c8:	1e 00 90    	mov.w     [w14+2], w0
    18ca:	00 00 40    	add.w     w0, w0, w0
    18cc:	00 00 41    	add.w     w2, w0, w0
    18ce:	01 08 78    	mov.w     w1, [w0]
    18d0:	36 00 37    	bra       0x193e <.L17>

000018d2 <.L24>:
  } else if (color == LED_OFF) {
    18d2:	7e 40 90    	mov.b     [w14+7], w0
    18d4:	00 04 e0    	cp0.b     w0
    18d6:	14 00 3a    	bra       NZ, 0x1900 <.L25>
    // Turn off red and green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a) & ~_BV(a+8);
    18d8:	ae 00 90    	mov.w     [w14+4], w1
    18da:	1e 00 90    	mov.w     [w14+2], w0
    18dc:	00 00 40    	add.w     w0, w0, w0
    18de:	e1 00 78    	mov.w     [w1+w0], w1
    18e0:	1e 00 78    	mov.w     [w14], w0
    18e2:	12 00 20    	mov.w     #0x1, w2
    18e4:	00 11 dd    	sl.w      w2, w0, w2
    18e6:	9e 01 78    	mov.w     [w14], w3
    18e8:	68 80 41    	add.w     w3, #0x8, w0
    18ea:	13 00 20    	mov.w     #0x1, w3
    18ec:	00 18 dd    	sl.w      w3, w0, w0
    18ee:	02 00 70    	ior.w     w0, w2, w0
    18f0:	00 80 ea    	com.w     w0, w0
    18f2:	80 80 60    	and.w     w1, w0, w1
    18f4:	2e 01 90    	mov.w     [w14+4], w2
    18f6:	1e 00 90    	mov.w     [w14+2], w0
    18f8:	00 00 40    	add.w     w0, w0, w0
    18fa:	00 00 41    	add.w     w2, w0, w0
    18fc:	01 08 78    	mov.w     w1, [w0]
    18fe:	1f 00 37    	bra       0x193e <.L17>

00001900 <.L25>:
  } else if (color == LED_GREEN) {
    1900:	7e 40 90    	mov.b     [w14+7], w0
    1902:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    1904:	1c 00 3a    	bra       NZ, 0x193e <.L17>
    // Turn on green LED.
    ptr->super.displaybuffer[c] |= _BV(a+8);
    1906:	ae 00 90    	mov.w     [w14+4], w1
    1908:	1e 00 90    	mov.w     [w14+2], w0
    190a:	00 00 40    	add.w     w0, w0, w0
    190c:	e1 00 78    	mov.w     [w1+w0], w1
    190e:	1e 01 78    	mov.w     [w14], w2
    1910:	68 00 41    	add.w     w2, #0x8, w0
    1912:	12 00 20    	mov.w     #0x1, w2
    1914:	00 10 dd    	sl.w      w2, w0, w0
    1916:	81 00 70    	ior.w     w0, w1, w1
    1918:	2e 01 90    	mov.w     [w14+4], w2
    191a:	1e 00 90    	mov.w     [w14+2], w0
    191c:	00 00 40    	add.w     w0, w0, w0
    191e:	00 00 41    	add.w     w2, w0, w0
    1920:	01 08 78    	mov.w     w1, [w0]
    // Turn off red LED.
    ptr->super.displaybuffer[c] &= ~_BV(a);
    1922:	ae 00 90    	mov.w     [w14+4], w1
    1924:	1e 00 90    	mov.w     [w14+2], w0
    1926:	00 00 40    	add.w     w0, w0, w0
    1928:	e1 00 78    	mov.w     [w1+w0], w1
    192a:	1e 00 78    	mov.w     [w14], w0
    192c:	12 00 20    	mov.w     #0x1, w2
    192e:	00 10 dd    	sl.w      w2, w0, w0
    1930:	00 80 ea    	com.w     w0, w0
    1932:	80 80 60    	and.w     w1, w0, w1
    1934:	2e 01 90    	mov.w     [w14+4], w2
    1936:	1e 00 90    	mov.w     [w14+2], w0
    1938:	00 00 40    	add.w     w0, w0, w0
    193a:	00 00 41    	add.w     w2, w0, w0
    193c:	01 08 78    	mov.w     w1, [w0]

0000193e <.L17>:
  }
}
    193e:	00 80 fa    	ulnk      
    1940:	00 00 06    	return    

00001942 <_sevseg_writeDigitRaw>:

// 7SEGMENT ********************************************************************

// uint8_t write(_7SEGMENT* ptr, uint8_t c){
//
//   uint8_t r = 0;
//
//   if (c == '\n') ptr->position = 0;
//   if (c == '\r') ptr->position = 0;
//
//   if ((c >= '0') && (c <= '9')) {
//     sevseg_writeDigitNum(ptr, ptr->position, c-'0', 0);
//     r = 1;
//   }
//
//   ptr->position++;
//   if (ptr->position == 2) ptr->position++;
//
//   return r;
// }

void sevseg_writeDigitRaw(_7SEGMENT* ptr, uint8_t x, uint16_t bitmask){
    1942:	06 00 fa    	lnk       #0x6
    1944:	00 0f 78    	mov.w     w0, [w14]
    1946:	21 47 98    	mov.b     w1, [w14+2]
    1948:	22 07 98    	mov.w     w2, [w14+4]
  if (x > 4) return;
    194a:	2e 40 90    	mov.b     [w14+2], w0
    194c:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    194e:	08 00 3e    	bra       GTU, 0x1960 <.L29>
  ptr->super.displaybuffer[x] = bitmask;
    1950:	2e 40 90    	mov.b     [w14+2], w0
    1952:	00 80 fb    	ze        w0, w0
    1954:	9e 00 78    	mov.w     [w14], w1
    1956:	00 00 40    	add.w     w0, w0, w0
    1958:	00 80 40    	add.w     w1, w0, w0
    195a:	ae 00 90    	mov.w     [w14+4], w1
    195c:	01 08 78    	mov.w     w1, [w0]
    195e:	01 00 37    	bra       0x1962 <.L26>

00001960 <.L29>:
    1960:	00 00 00    	nop       

00001962 <.L26>:
}
    1962:	00 80 fa    	ulnk      
    1964:	00 00 06    	return    

00001966 <_sevseg_writeDigitNum>:

void sevseg_writeDigitNum(_7SEGMENT* ptr, uint8_t x, uint8_t num, uint8_t dot){
    1966:	08 00 fa    	lnk       #0x8
    1968:	10 07 98    	mov.w     w0, [w14+2]
    196a:	41 47 98    	mov.b     w1, [w14+4]
    196c:	52 47 98    	mov.b     w2, [w14+5]
    196e:	63 47 98    	mov.b     w3, [w14+6]
  if (x > 4) return;
    1970:	4e 40 90    	mov.b     [w14+4], w0
    1972:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1974:	11 00 3e    	bra       GTU, 0x1998 <.L33>
	uint16_t zero = 0x0000;
    1976:	00 00 eb    	clr.w     w0
    1978:	00 0f 78    	mov.w     w0, [w14]
  sevseg_writeDigitRaw(ptr, x, (numbertable[num] | (dot << 7)));
    197a:	5e 40 90    	mov.b     [w14+5], w0
    197c:	00 80 fb    	ze        w0, w0
    197e:	80 00 40    	add.w     w0, w0, w1
    1980:	e0 59 29    	mov.w     #0x959e, w0
    1982:	00 80 40    	add.w     w1, w0, w0
    1984:	90 00 78    	mov.w     [w0], w1
    1986:	6e 40 90    	mov.b     [w14+6], w0
    1988:	00 80 fb    	ze        w0, w0
    198a:	47 00 dd    	sl.w      w0, #0x7, w0
    198c:	01 00 70    	ior.w     w0, w1, w0
    198e:	00 01 78    	mov.w     w0, w2
    1990:	ce 40 90    	mov.b     [w14+4], w1
    1992:	1e 00 90    	mov.w     [w14+2], w0
    1994:	d6 ff 07    	rcall     0x1942 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    1996:	01 00 37    	bra       0x199a <.L30>

00001998 <.L33>:
    1998:	00 00 00    	nop       

0000199a <.L30>:
}
    199a:	00 80 fa    	ulnk      
    199c:	00 00 06    	return    

0000199e <_sevseg_drawColon>:

void sevseg_drawColon(_7SEGMENT* ptr, uint8_t state){
    199e:	04 00 fa    	lnk       #0x4
    19a0:	00 0f 78    	mov.w     w0, [w14]
    19a2:	21 47 98    	mov.b     w1, [w14+2]
  if (state)
    19a4:	2e 40 90    	mov.b     [w14+2], w0
    19a6:	00 04 e0    	cp0.b     w0
    19a8:	04 00 32    	bra       Z, 0x19b2 <.L35>
    ptr->super.displaybuffer[2] = 0x2;
    19aa:	1e 00 78    	mov.w     [w14], w0
    19ac:	21 00 20    	mov.w     #0x2, w1
    19ae:	21 00 98    	mov.w     w1, [w0+4]
    19b0:	03 00 37    	bra       0x19b8 <.L34>

000019b2 <.L35>:
  else
    ptr->super.displaybuffer[2] = 0;
    19b2:	1e 00 78    	mov.w     [w14], w0
    19b4:	80 00 eb    	clr.w     w1
    19b6:	21 00 98    	mov.w     w1, [w0+4]

000019b8 <.L34>:
}
    19b8:	00 80 fa    	ulnk      
    19ba:	00 00 06    	return    

000019bc <_sevseg_printNumber>:

void sevseg_printNumber(_7SEGMENT* ptr, long n, uint8_t base){
    19bc:	08 00 fa    	lnk       #0x8
    19be:	00 0f 78    	mov.w     w0, [w14]
    19c0:	12 07 98    	mov.w     w2, [w14+2]
    19c2:	23 07 98    	mov.w     w3, [w14+4]
    19c4:	61 47 98    	mov.b     w1, [w14+6]
  sevseg_printFloat(ptr, n, 0, base);
    19c6:	1e 00 90    	mov.w     [w14+2], w0
    19c8:	ae 00 90    	mov.w     [w14+4], w1
    19ca:	f2 fc 07    	rcall     0x13b0 <___floatsisf>
    19cc:	00 01 be    	mov.d     w0, w2
    19ce:	6e 42 90    	mov.b     [w14+6], w4
    19d0:	80 40 eb    	clr.b     w1
    19d2:	1e 00 78    	mov.w     [w14], w0
    19d4:	02 00 07    	rcall     0x19da <_sevseg_printFloat> <.LFB14> <.LFE13>
}
    19d6:	00 80 fa    	ulnk      
    19d8:	00 00 06    	return    

000019da <_sevseg_printFloat>:

void sevseg_printFloat(_7SEGMENT* ptr, double n, uint8_t fracDigits, uint8_t base){
    19da:	1c 00 fa    	lnk       #0x1c
    19dc:	88 1f 78    	mov.w     w8, [w15++]
    19de:	20 0f 98    	mov.w     w0, [w14+20]
    19e0:	32 0f 98    	mov.w     w2, [w14+22]
    19e2:	43 0f 98    	mov.w     w3, [w14+24]
    19e4:	21 5f 98    	mov.b     w1, [w14+26]
    19e6:	34 5f 98    	mov.b     w4, [w14+27]
  uint8_t numericDigits = 4;   // available digits on display
    19e8:	40 c0 b3    	mov.b     #0x4, w0
    19ea:	00 4f 78    	mov.b     w0, [w14]
  uint8_t isNegative = 0;  // true if the number is negative
    19ec:	00 40 eb    	clr.b     w0
    19ee:	10 47 98    	mov.b     w0, [w14+1]

  // is the number negative?
  if(n < 0) {
    19f0:	18 c0 b3    	mov.b     #0x1, w8
    19f2:	60 11 b8    	mul.uu    w2, #0x0, w2
    19f4:	3e 08 90    	mov.w     [w14+22], w0
    19f6:	ce 08 90    	mov.w     [w14+24], w1
    19f8:	be fc 07    	rcall     0x1376 <___eqsf2> <___lesf2> <___ltsf2>
    19fa:	00 00 e0    	cp0.w     w0
    19fc:	01 00 35    	bra       LT, 0x1a00 <.L39>
    19fe:	00 44 eb    	clr.b     w8

00001a00 <.L39>:
    1a00:	08 04 e0    	cp0.b     w8
    1a02:	08 00 32    	bra       Z, 0x1a14 <.L40>
    isNegative = 1;  // need to draw sign later
    1a04:	10 c0 b3    	mov.b     #0x1, w0
    1a06:	10 47 98    	mov.b     w0, [w14+1]
    --numericDigits;    // the sign will take up one digit
    1a08:	1e 4f e9    	dec.b     [w14], [w14]
    n *= -1;            // pretend the number is positive
    1a0a:	3e 08 90    	mov.w     [w14+22], w0
    1a0c:	ce 08 90    	mov.w     [w14+24], w1
    1a0e:	01 f0 a2    	btg.w     w1, #0xf
    1a10:	30 0f 98    	mov.w     w0, [w14+22]
    1a12:	41 0f 98    	mov.w     w1, [w14+24]

00001a14 <.L40>:
  }

  // calculate the factor required to shift all fractional digits
  // into the integer part of the number
  double toIntFactor = 1.0;
    1a14:	00 00 20    	mov.w     #0x0, w0
    1a16:	01 f8 23    	mov.w     #0x3f80, w1
    1a18:	10 07 98    	mov.w     w0, [w14+2]
    1a1a:	21 07 98    	mov.w     w1, [w14+4]
	int i = 0;
    1a1c:	00 00 eb    	clr.w     w0
    1a1e:	30 07 98    	mov.w     w0, [w14+6]
  for(i = 0; i < fracDigits; ++i) toIntFactor *= base;
    1a20:	00 00 eb    	clr.w     w0
    1a22:	30 07 98    	mov.w     w0, [w14+6]
    1a24:	0d 00 37    	bra       0x1a40 <.L41>

00001a26 <.L42>:
    1a26:	3e 58 90    	mov.b     [w14+27], w0
    1a28:	00 80 fb    	ze        w0, w0
    1a2a:	cf 80 de    	asr.w     w0, #0xf, w1
    1a2c:	c1 fc 07    	rcall     0x13b0 <___floatsisf>
    1a2e:	00 01 be    	mov.d     w0, w2
    1a30:	1e 00 90    	mov.w     [w14+2], w0
    1a32:	ae 00 90    	mov.w     [w14+4], w1
    1a34:	13 fd 07    	rcall     0x145c <___mulsf3>
    1a36:	10 07 98    	mov.w     w0, [w14+2]
    1a38:	21 07 98    	mov.w     w1, [w14+4]
    1a3a:	3e 00 90    	mov.w     [w14+6], w0
    1a3c:	00 00 e8    	inc.w     w0, w0
    1a3e:	30 07 98    	mov.w     w0, [w14+6]

00001a40 <.L41>:
    1a40:	2e 58 90    	mov.b     [w14+26], w0
    1a42:	80 80 fb    	ze        w0, w1
    1a44:	3e 00 90    	mov.w     [w14+6], w0
    1a46:	80 8f 50    	sub.w     w1, w0, [w15]
    1a48:	ee ff 3c    	bra       GT, 0x1a26 <.L42>

  // create integer containing digits to display by applying
  // shifting factor and rounding adjustment
  uint32_t displayNumber = n * toIntFactor + 0.5;
    1a4a:	1e 01 90    	mov.w     [w14+2], w2
    1a4c:	ae 01 90    	mov.w     [w14+4], w3
    1a4e:	3e 08 90    	mov.w     [w14+22], w0
    1a50:	ce 08 90    	mov.w     [w14+24], w1
    1a52:	04 fd 07    	rcall     0x145c <___mulsf3>
    1a54:	02 00 20    	mov.w     #0x0, w2
    1a56:	03 f0 23    	mov.w     #0x3f00, w3
    1a58:	ef fb 07    	rcall     0x1238 <___addsf3>
    1a5a:	8f fc 07    	rcall     0x137a <___fixunssfsi>
    1a5c:	40 07 98    	mov.w     w0, [w14+8]
    1a5e:	51 07 98    	mov.w     w1, [w14+10]

  // calculate upper bound on displayNumber given
  // available digits on display
  uint32_t tooBig = 1;
    1a60:	10 00 20    	mov.w     #0x1, w0
    1a62:	01 00 20    	mov.w     #0x0, w1
    1a64:	60 07 98    	mov.w     w0, [w14+12]
    1a66:	71 07 98    	mov.w     w1, [w14+14]
  for(i = 0; i < numericDigits; ++i) tooBig *= base;
    1a68:	00 00 eb    	clr.w     w0
    1a6a:	30 07 98    	mov.w     w0, [w14+6]
    1a6c:	15 00 37    	bra       0x1a98 <.L43>

00001a6e <.L44>:
    1a6e:	3e 58 90    	mov.b     [w14+27], w0
    1a70:	00 80 fb    	ze        w0, w0
    1a72:	80 00 eb    	clr.w     w1
    1a74:	7e 01 90    	mov.w     [w14+14], w2
    1a76:	00 91 b9    	mul.ss    w2, w0, w2
    1a78:	02 01 78    	mov.w     w2, w2
    1a7a:	ee 01 90    	mov.w     [w14+12], w3
    1a7c:	01 9a b9    	mul.ss    w3, w1, w4
    1a7e:	84 01 78    	mov.w     w4, w3
    1a80:	03 01 41    	add.w     w2, w3, w2
    1a82:	ee 01 90    	mov.w     [w14+12], w3
    1a84:	00 18 b8    	mul.uu    w3, w0, w0
    1a86:	01 01 41    	add.w     w2, w1, w2
    1a88:	82 00 78    	mov.w     w2, w1
    1a8a:	60 07 98    	mov.w     w0, [w14+12]
    1a8c:	71 07 98    	mov.w     w1, [w14+14]
    1a8e:	60 07 98    	mov.w     w0, [w14+12]
    1a90:	71 07 98    	mov.w     w1, [w14+14]
    1a92:	3e 00 90    	mov.w     [w14+6], w0
    1a94:	00 00 e8    	inc.w     w0, w0
    1a96:	30 07 98    	mov.w     w0, [w14+6]

00001a98 <.L43>:
    1a98:	9e 80 fb    	ze        [w14], w1
    1a9a:	3e 00 90    	mov.w     [w14+6], w0
    1a9c:	80 8f 50    	sub.w     w1, w0, [w15]
    1a9e:	e7 ff 3c    	bra       GT, 0x1a6e <.L44>

  // if displayNumber is too large, try fewer fractional digits
  while(displayNumber >= tooBig) {
    1aa0:	18 00 37    	bra       0x1ad2 <.L45>

00001aa2 <.L46>:
    --fracDigits;
    1aa2:	2e 58 90    	mov.b     [w14+26], w0
    1aa4:	00 40 e9    	dec.b     w0, w0
    1aa6:	20 5f 98    	mov.b     w0, [w14+26]
    toIntFactor /= base;
    1aa8:	3e 58 90    	mov.b     [w14+27], w0
    1aaa:	00 80 fb    	ze        w0, w0
    1aac:	cf 80 de    	asr.w     w0, #0xf, w1
    1aae:	80 fc 07    	rcall     0x13b0 <___floatsisf>
    1ab0:	00 01 be    	mov.d     w0, w2
    1ab2:	1e 00 90    	mov.w     [w14+2], w0
    1ab4:	ae 00 90    	mov.w     [w14+4], w1
    1ab6:	1d fc 07    	rcall     0x12f2 <___divsf3>
    1ab8:	10 07 98    	mov.w     w0, [w14+2]
    1aba:	21 07 98    	mov.w     w1, [w14+4]
    displayNumber = n * toIntFactor + 0.5;
    1abc:	1e 01 90    	mov.w     [w14+2], w2
    1abe:	ae 01 90    	mov.w     [w14+4], w3
    1ac0:	3e 08 90    	mov.w     [w14+22], w0
    1ac2:	ce 08 90    	mov.w     [w14+24], w1
    1ac4:	cb fc 07    	rcall     0x145c <___mulsf3>
    1ac6:	02 00 20    	mov.w     #0x0, w2
    1ac8:	03 f0 23    	mov.w     #0x3f00, w3
    1aca:	b6 fb 07    	rcall     0x1238 <___addsf3>
    1acc:	56 fc 07    	rcall     0x137a <___fixunssfsi>
    1ace:	40 07 98    	mov.w     w0, [w14+8]
    1ad0:	51 07 98    	mov.w     w1, [w14+10]

00001ad2 <.L45>:
    1ad2:	4e 01 90    	mov.w     [w14+8], w2
    1ad4:	de 01 90    	mov.w     [w14+10], w3
    1ad6:	6e 00 90    	mov.w     [w14+12], w0
    1ad8:	fe 00 90    	mov.w     [w14+14], w1
    1ada:	80 0f 51    	sub.w     w2, w0, [w15]
    1adc:	81 8f 59    	subb.w    w3, w1, [w15]
    1ade:	e1 ff 31    	bra       C, 0x1aa2 <.L46>
  }

  // did toIntFactor shift the decimal off the display?
  if (toIntFactor < 1) {
    1ae0:	18 c0 b3    	mov.b     #0x1, w8
    1ae2:	02 00 20    	mov.w     #0x0, w2
    1ae4:	03 f8 23    	mov.w     #0x3f80, w3
    1ae6:	1e 00 90    	mov.w     [w14+2], w0
    1ae8:	ae 00 90    	mov.w     [w14+4], w1
    1aea:	45 fc 07    	rcall     0x1376 <___eqsf2> <___lesf2> <___ltsf2>
    1aec:	00 00 e0    	cp0.w     w0
    1aee:	01 00 35    	bra       LT, 0x1af2 <.L47>
    1af0:	00 44 eb    	clr.b     w8

00001af2 <.L47>:
    1af2:	08 04 e0    	cp0.b     w8
    1af4:	03 00 32    	bra       Z, 0x1afc <.L48> <.LBB2>
    sevseg_printError(ptr);
    1af6:	2e 08 90    	mov.w     [w14+20], w0
    1af8:	6c 00 07    	rcall     0x1bd2 <_sevseg_printError> <.LFB15> <.LFE14>
    1afa:	68 00 37    	bra       0x1bcc <.L38> <.LBE2>

00001afc <.L48>:
  } else {
    // otherwise, display the number
    int8_t displayPos = 4;
    1afc:	40 c0 b3    	mov.b     #0x4, w0
    1afe:	00 57 98    	mov.b     w0, [w14+16]

    if (displayNumber)  //if displayNumber is not 0
    1b00:	4e 00 90    	mov.w     [w14+8], w0
    1b02:	de 00 90    	mov.w     [w14+10], w1
    1b04:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1b06:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1b08:	41 00 32    	bra       Z, 0x1b8c <.L50> <.LBE3>

00001b0a <.LBB3>:
    {
			uint8_t i;
      for(i = 0; displayNumber || i <= fracDigits; ++i) {
    1b0a:	00 40 eb    	clr.b     w0
    1b0c:	10 57 98    	mov.b     w0, [w14+17]
    1b0e:	34 00 37    	bra       0x1b78 <.L51>

00001b10 <.L55>:
        uint8_t displayDecimal = (fracDigits != 0 && i == fracDigits);
    1b10:	2e 58 90    	mov.b     [w14+26], w0
    1b12:	00 04 e0    	cp0.b     w0
    1b14:	06 00 32    	bra       Z, 0x1b22 <.L52>
    1b16:	9e 50 90    	mov.b     [w14+17], w1
    1b18:	2e 58 90    	mov.b     [w14+26], w0
    1b1a:	80 cf 50    	sub.b     w1, w0, [w15]
    1b1c:	02 00 3a    	bra       NZ, 0x1b22 <.L52>
    1b1e:	10 00 20    	mov.w     #0x1, w0
    1b20:	01 00 37    	bra       0x1b24 <.L53>

00001b22 <.L52>:
    1b22:	00 00 eb    	clr.w     w0

00001b24 <.L53>:
    1b24:	20 57 98    	mov.b     w0, [w14+18]
        sevseg_writeDigitNum(ptr, displayPos--, displayNumber % base, displayDecimal);
    1b26:	3e 58 90    	mov.b     [w14+27], w0
    1b28:	00 80 fb    	ze        w0, w0
    1b2a:	80 00 eb    	clr.w     w1
    1b2c:	4e 02 90    	mov.w     [w14+8], w4
    1b2e:	de 02 90    	mov.w     [w14+10], w5
    1b30:	00 01 be    	mov.d     w0, w2
    1b32:	04 00 be    	mov.d     w4, w0
    1b34:	d7 fc 07    	rcall     0x14e4 <___umodsi3>
    1b36:	80 40 78    	mov.b     w0, w1
    1b38:	0e 50 90    	mov.b     [w14+16], w0
    1b3a:	0e 51 90    	mov.b     [w14+16], w2
    1b3c:	02 41 e9    	dec.b     w2, w2
    1b3e:	02 57 98    	mov.b     w2, [w14+16]
    1b40:	ae 51 90    	mov.b     [w14+18], w3
    1b42:	01 41 78    	mov.b     w1, w2
    1b44:	80 40 78    	mov.b     w0, w1
    1b46:	2e 08 90    	mov.w     [w14+20], w0
    1b48:	0e ff 07    	rcall     0x1966 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
        if(displayPos == 2) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    1b4a:	0e 50 90    	mov.b     [w14+16], w0
    1b4c:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1b4e:	08 00 3a    	bra       NZ, 0x1b60 <.L54>
    1b50:	0e 50 90    	mov.b     [w14+16], w0
    1b52:	8e 50 90    	mov.b     [w14+16], w1
    1b54:	81 40 e9    	dec.b     w1, w1
    1b56:	01 57 98    	mov.b     w1, [w14+16]
    1b58:	00 01 eb    	clr.w     w2
    1b5a:	80 40 78    	mov.b     w0, w1
    1b5c:	2e 08 90    	mov.w     [w14+20], w0
    1b5e:	f1 fe 07    	rcall     0x1942 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00001b60 <.L54>:
        displayNumber /= base;
    1b60:	3e 58 90    	mov.b     [w14+27], w0
    1b62:	00 80 fb    	ze        w0, w0
    1b64:	80 00 eb    	clr.w     w1
    1b66:	00 01 be    	mov.d     w0, w2
    1b68:	4e 00 90    	mov.w     [w14+8], w0
    1b6a:	de 00 90    	mov.w     [w14+10], w1
    1b6c:	ab fc 07    	rcall     0x14c4 <___udivsi3>
    1b6e:	40 07 98    	mov.w     w0, [w14+8]
    1b70:	51 07 98    	mov.w     w1, [w14+10]

00001b72 <.LBE4>:
    1b72:	1e 50 90    	mov.b     [w14+17], w0
    1b74:	00 40 e8    	inc.b     w0, w0
    1b76:	10 57 98    	mov.b     w0, [w14+17]

00001b78 <.L51>:
    1b78:	4e 00 90    	mov.w     [w14+8], w0
    1b7a:	de 00 90    	mov.w     [w14+10], w1
    1b7c:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1b7e:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1b80:	c7 ff 3a    	bra       NZ, 0x1b10 <.L55> <.LBB4>
    1b82:	9e 50 90    	mov.b     [w14+17], w1
    1b84:	2e 58 90    	mov.b     [w14+26], w0
    1b86:	80 cf 50    	sub.b     w1, w0, [w15]
    1b88:	c3 ff 36    	bra       LEU, 0x1b10 <.L55> <.LBB4>
    1b8a:	09 00 37    	bra       0x1b9e <.L56>

00001b8c <.L50>:
      }
    }
    else {
      sevseg_writeDigitNum(ptr, displayPos--, 0, 0);
    1b8c:	0e 50 90    	mov.b     [w14+16], w0
    1b8e:	8e 50 90    	mov.b     [w14+16], w1
    1b90:	81 40 e9    	dec.b     w1, w1
    1b92:	01 57 98    	mov.b     w1, [w14+16]
    1b94:	80 41 eb    	clr.b     w3
    1b96:	00 41 eb    	clr.b     w2
    1b98:	80 40 78    	mov.b     w0, w1
    1b9a:	2e 08 90    	mov.w     [w14+20], w0
    1b9c:	e4 fe 07    	rcall     0x1966 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

00001b9e <.L56>:
    }

    // display negative sign if negative
    if(isNegative) sevseg_writeDigitRaw(ptr, displayPos--, 0x40);
    1b9e:	1e 40 90    	mov.b     [w14+1], w0
    1ba0:	00 04 e0    	cp0.b     w0
    1ba2:	11 00 32    	bra       Z, 0x1bc6 <.L58>
    1ba4:	0e 50 90    	mov.b     [w14+16], w0
    1ba6:	8e 50 90    	mov.b     [w14+16], w1
    1ba8:	81 40 e9    	dec.b     w1, w1
    1baa:	01 57 98    	mov.b     w1, [w14+16]
    1bac:	02 04 20    	mov.w     #0x40, w2
    1bae:	80 40 78    	mov.b     w0, w1
    1bb0:	2e 08 90    	mov.w     [w14+20], w0
    1bb2:	c7 fe 07    	rcall     0x1942 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

    // clear remaining display positions
    while(displayPos >= 0) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    1bb4:	08 00 37    	bra       0x1bc6 <.L58>

00001bb6 <.L59>:
    1bb6:	0e 50 90    	mov.b     [w14+16], w0
    1bb8:	8e 50 90    	mov.b     [w14+16], w1
    1bba:	81 40 e9    	dec.b     w1, w1
    1bbc:	01 57 98    	mov.b     w1, [w14+16]
    1bbe:	00 01 eb    	clr.w     w2
    1bc0:	80 40 78    	mov.b     w0, w1
    1bc2:	2e 08 90    	mov.w     [w14+20], w0
    1bc4:	be fe 07    	rcall     0x1942 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00001bc6 <.L58>:
    1bc6:	0e 50 90    	mov.b     [w14+16], w0
    1bc8:	00 04 e0    	cp0.b     w0
    1bca:	f5 ff 3d    	bra       GE, 0x1bb6 <.L59>

00001bcc <.L38>:
  }
}
    1bcc:	4f 04 78    	mov.w     [--w15], w8
    1bce:	00 80 fa    	ulnk      
    1bd0:	00 00 06    	return    

00001bd2 <_sevseg_printError>:

void sevseg_printError(_7SEGMENT* ptr){
    1bd2:	04 00 fa    	lnk       #0x4
    1bd4:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
  for(i = 0; i < SEVENSEG_DIGITS; ++i) {
    1bd6:	00 40 eb    	clr.b     w0
    1bd8:	00 4f 78    	mov.b     w0, [w14]
    1bda:	0b 00 37    	bra       0x1bf2 <.L61>

00001bdc <.L64>:
    sevseg_writeDigitRaw(ptr, i, (i == 2 ? 0x00 : 0x40));
    1bdc:	1e 40 78    	mov.b     [w14], w0
    1bde:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1be0:	02 00 3a    	bra       NZ, 0x1be6 <.L62>
    1be2:	00 00 eb    	clr.w     w0
    1be4:	01 00 37    	bra       0x1be8 <.L63>

00001be6 <.L62>:
    1be6:	00 04 20    	mov.w     #0x40, w0

00001be8 <.L63>:
    1be8:	00 01 78    	mov.w     w0, w2
    1bea:	9e 40 78    	mov.b     [w14], w1
    1bec:	1e 00 90    	mov.w     [w14+2], w0
    1bee:	a9 fe 07    	rcall     0x1942 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    1bf0:	1e 4f e8    	inc.b     [w14], [w14]

00001bf2 <.L61>:
    1bf2:	1e 40 78    	mov.b     [w14], w0
    1bf4:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1bf6:	f2 ff 36    	bra       LEU, 0x1bdc <.L64>
  }
}
    1bf8:	00 80 fa    	ulnk      
    1bfa:	00 00 06    	return    

00001bfc <_sevseg_writeColon>:


void sevseg_writeColon(_7SEGMENT* ptr){
    1bfc:	02 00 fa    	lnk       #0x2
    1bfe:	00 0f 78    	mov.w     w0, [w14]
  /*
  Wire.beginTransmission(i2c_addr);
  Wire.write((uint8_t)0x04);

  Wire.write(displaybuffer[2] & 0xFF);
  Wire.write(displaybuffer[2] >> 8);

  Wire.endTransmission();
  */
  i2c_start();
    1c00:	33 00 07    	rcall     0x1c68 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->super.i2c_addr);
    1c02:	1e 00 78    	mov.w     [w14], w0
    1c04:	00 50 90    	mov.b     [w0+16], w0
    1c06:	00 80 fb    	ze        w0, w0
    1c08:	7e 00 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte((uint8_t)0x04); // start at address $02
    1c0a:	40 00 20    	mov.w     #0x4, w0
    1c0c:	7c 00 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] & 0xFF);
    1c0e:	1e 00 78    	mov.w     [w14], w0
    1c10:	20 00 90    	mov.w     [w0+4], w0
    1c12:	80 00 78    	mov.w     w0, w1
    1c14:	f0 0f 20    	mov.w     #0xff, w0
    1c16:	00 80 60    	and.w     w1, w0, w0
    1c18:	76 00 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] >> 8);
    1c1a:	1e 00 78    	mov.w     [w14], w0
    1c1c:	20 00 90    	mov.w     [w0+4], w0
    1c1e:	48 00 de    	lsr.w     w0, #0x8, w0
    1c20:	72 00 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1c22:	56 00 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1c24:	00 80 fa    	ulnk      
    1c26:	00 00 06    	return    

00001c28 <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    1c28:	08 00 fa    	lnk       #0x8
    1c2a:	20 07 98    	mov.w     w0, [w14+4]
    1c2c:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    1c2e:	60 00 b8    	mul.uu    w0, #0x0, w0
    1c30:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    1c32:	05 00 37    	bra       0x1c3e <.L2>

00001c34 <.L3>:
        __asm__("nop");
    1c34:	00 00 00    	nop       
        count +=1;
    1c36:	12 00 20    	mov.w     #0x1, w2
    1c38:	03 00 20    	mov.w     #0x0, w3
    1c3a:	1e 0f 41    	add.w     w2, [w14], [w14]
    1c3c:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00001c3e <.L2>:
    1c3e:	2e 00 90    	mov.w     [w14+4], w0
    1c40:	be 00 90    	mov.w     [w14+6], w1
    1c42:	1e 01 be    	mov.d     [w14], w2
    1c44:	80 0f 51    	sub.w     w2, w0, [w15]
    1c46:	81 8f 59    	subb.w    w3, w1, [w15]
    1c48:	f5 ff 39    	bra       NC, 0x1c34 <.L3>
    }
}
    1c4a:	00 80 fa    	ulnk      
    1c4c:	00 00 06    	return    

00001c4e <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    1c4e:	04 00 fa    	lnk       #0x4
    1c50:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    1c52:	1e 00 90    	mov.w     [w14+2], w0
    1c54:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    1c56:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    1c58:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    1c5a:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    1c5c:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    1c5e:	80 13 80    	mov.w     0x270, w0
    1c60:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    1c62:	36 00 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1c64:	00 80 fa    	ulnk      
    1c66:	00 00 06    	return    

00001c68 <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    1c68:	02 00 fa    	lnk       #0x2
   int x = 0;
    1c6a:	00 00 eb    	clr.w     w0
    1c6c:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    1c6e:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    1c70:	a0 00 20    	mov.w     #0xa, w0
    1c72:	01 00 20    	mov.w     #0x0, w1
    1c74:	d9 ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    1c76:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    1c78:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    1c7a:	07 00 37    	bra       0x1c8a <.L6>

00001c7c <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    1c7c:	10 00 20    	mov.w     #0x1, w0
    1c7e:	01 00 20    	mov.w     #0x0, w1
    1c80:	d3 ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1c82:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    1c84:	1e 00 78    	mov.w     [w14], w0
    1c86:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1c88:	05 00 3c    	bra       GT, 0x1c94 <.L9>

00001c8a <.L6>:
    1c8a:	b0 13 80    	mov.w     0x276, w0
    1c8c:	61 00 60    	and.w     w0, #0x1, w0
    1c8e:	00 00 e0    	cp0.w     w0
    1c90:	f5 ff 3a    	bra       NZ, 0x1c7c <.L8>
    1c92:	01 00 37    	bra       0x1c96 <.L7>

00001c94 <.L9>:
      break;
    1c94:	00 00 00    	nop       

00001c96 <.L7>:
   }
   delay_by_nop(2);
    1c96:	20 00 20    	mov.w     #0x2, w0
    1c98:	01 00 20    	mov.w     #0x0, w1
    1c9a:	c6 ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1c9c:	00 80 fa    	ulnk      
    1c9e:	00 00 06    	return    

00001ca0 <_i2c_restart>:

void i2c_restart(void){
    1ca0:	02 00 fa    	lnk       #0x2
   int x = 0;
    1ca2:	00 00 eb    	clr.w     w0
    1ca4:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    1ca6:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    1ca8:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    1caa:	07 00 37    	bra       0x1cba <.L11>

00001cac <.L13>:
      delay_by_nop(1);
    1cac:	10 00 20    	mov.w     #0x1, w0
    1cae:	01 00 20    	mov.w     #0x0, w1
    1cb0:	bb ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1cb2:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    1cb4:	1e 00 78    	mov.w     [w14], w0
    1cb6:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1cb8:	05 00 3c    	bra       GT, 0x1cc4 <.L14>

00001cba <.L11>:
    1cba:	b0 13 80    	mov.w     0x276, w0
    1cbc:	62 00 60    	and.w     w0, #0x2, w0
    1cbe:	00 00 e0    	cp0.w     w0
    1cc0:	f5 ff 3a    	bra       NZ, 0x1cac <.L13>
    1cc2:	01 00 37    	bra       0x1cc6 <.L12>

00001cc4 <.L14>:
    1cc4:	00 00 00    	nop       

00001cc6 <.L12>:
   }
   delay_by_nop(2);
    1cc6:	20 00 20    	mov.w     #0x2, w0
    1cc8:	01 00 20    	mov.w     #0x0, w1
    1cca:	ae ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1ccc:	00 80 fa    	ulnk      
    1cce:	00 00 06    	return    

00001cd0 <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    1cd0:	02 00 fa    	lnk       #0x2
   int x = 0;
    1cd2:	00 00 eb    	clr.w     w0
    1cd4:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    1cd6:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    1cd8:	07 00 37    	bra       0x1ce8 <.L16>

00001cda <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    1cda:	10 00 20    	mov.w     #0x1, w0
    1cdc:	01 00 20    	mov.w     #0x0, w1
    1cde:	a4 ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    1ce0:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    1ce2:	1e 00 78    	mov.w     [w14], w0
    1ce4:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1ce6:	05 00 3c    	bra       GT, 0x1cf2 <.L19>

00001ce8 <.L16>:
    1ce8:	b0 13 80    	mov.w     0x276, w0
    1cea:	64 00 60    	and.w     w0, #0x4, w0
    1cec:	00 00 e0    	cp0.w     w0
    1cee:	f5 ff 3a    	bra       NZ, 0x1cda <.L18>
    1cf0:	01 00 37    	bra       0x1cf4 <.L17>

00001cf2 <.L19>:
    1cf2:	00 00 00    	nop       

00001cf4 <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    1cf4:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    1cf6:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    1cf8:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    1cfa:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    1cfc:	40 01 20    	mov.w     #0x14, w0
    1cfe:	01 00 20    	mov.w     #0x0, w1
    1d00:	93 ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1d02:	00 80 fa    	ulnk      
    1d04:	00 00 06    	return    

00001d06 <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    1d06:	04 00 fa    	lnk       #0x4
    1d08:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    1d0a:	00 00 00    	nop       

00001d0c <.L21>:
    1d0c:	c0 13 80    	mov.w     0x278, w0
    1d0e:	61 00 60    	and.w     w0, #0x1, w0
    1d10:	00 00 e0    	cp0.w     w0
    1d12:	fc ff 3a    	bra       NZ, 0x1d0c <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    1d14:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    1d16:	1e 00 90    	mov.w     [w14+2], w0
    1d18:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    1d1a:	00 00 eb    	clr.w     w0
    1d1c:	00 0f 78    	mov.w     w0, [w14]
    1d1e:	09 00 37    	bra       0x1d32 <.L22>

00001d20 <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    1d20:	c1 13 80    	mov.w     0x278, w1
    1d22:	00 00 24    	mov.w     #0x4000, w0
    1d24:	00 80 60    	and.w     w1, w0, w0
    1d26:	00 00 e0    	cp0.w     w0
    1d28:	09 00 32    	bra       Z, 0x1d3c <.L29>
      delay_by_nop(1); }
    1d2a:	10 00 20    	mov.w     #0x1, w0
    1d2c:	01 00 20    	mov.w     #0x0, w1
    1d2e:	7c ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1d30:	1e 0f e8    	inc.w     [w14], [w14]

00001d32 <.L22>:
    1d32:	30 1f 20    	mov.w     #0x1f3, w0
    1d34:	9e 00 78    	mov.w     [w14], w1
    1d36:	80 8f 50    	sub.w     w1, w0, [w15]
    1d38:	f3 ff 34    	bra       LE, 0x1d20 <.L25>
    1d3a:	01 00 37    	bra       0x1d3e <.L24>

00001d3c <.L29>:
    1d3c:	00 00 00    	nop       

00001d3e <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    1d3e:	40 1f 20    	mov.w     #0x1f4, w0
    1d40:	9e 00 78    	mov.w     [w14], w1
    1d42:	80 8f 50    	sub.w     w1, w0, [w15]
    1d44:	02 00 3a    	bra       NZ, 0x1d4a <.L26>
        return(1); }    // return 1 to indicate failure
    1d46:	10 c0 b3    	mov.b     #0x1, w0
    1d48:	0c 00 37    	bra       0x1d62 <.L27>

00001d4a <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    1d4a:	c1 13 80    	mov.w     0x278, w1
    1d4c:	00 00 28    	mov.w     #0x8000, w0
    1d4e:	00 80 60    	and.w     w1, w0, w0
    1d50:	00 00 e0    	cp0.w     w0
    1d52:	03 00 32    	bra       Z, 0x1d5a <.L28>
      reset_i2c_bus();
    1d54:	bd ff 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    1d56:	10 c0 b3    	mov.b     #0x1, w0
    1d58:	04 00 37    	bra       0x1d62 <.L27>

00001d5a <.L28>:

   delay_by_nop(2);
    1d5a:	20 00 20    	mov.w     #0x2, w0
    1d5c:	01 00 20    	mov.w     #0x0, w1
    1d5e:	64 ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    1d60:	00 40 eb    	clr.b     w0

00001d62 <.L27>:
}
    1d62:	00 80 fa    	ulnk      
    1d64:	00 00 06    	return    

00001d66 <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    1d66:	04 00 fa    	lnk       #0x4
   int i = 0;
    1d68:	00 00 eb    	clr.w     w0
    1d6a:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1d6c:	00 40 eb    	clr.b     w0
    1d6e:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1d70:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    1d72:	05 00 37    	bra       0x1d7e <.L31>

00001d74 <.L33>:
      i ++;
    1d74:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    1d76:	00 7d 20    	mov.w     #0x7d0, w0
    1d78:	9e 00 78    	mov.w     [w14], w1
    1d7a:	80 8f 50    	sub.w     w1, w0, [w15]
    1d7c:	05 00 3c    	bra       GT, 0x1d88 <.L34>

00001d7e <.L31>:
    1d7e:	c0 13 80    	mov.w     0x278, w0
    1d80:	62 00 60    	and.w     w0, #0x2, w0
    1d82:	00 00 e0    	cp0.w     w0
    1d84:	f7 ff 32    	bra       Z, 0x1d74 <.L33>
    1d86:	01 00 37    	bra       0x1d8a <.L32>

00001d88 <.L34>:
    1d88:	00 00 00    	nop       

00001d8a <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    1d8a:	80 13 80    	mov.w     0x270, w0
    1d8c:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    1d8e:	2e 40 90    	mov.b     [w14+2], w0
}
    1d90:	00 80 fa    	ulnk      
    1d92:	00 00 06    	return    

00001d94 <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    1d94:	04 00 fa    	lnk       #0x4
   int i = 0;
    1d96:	00 00 eb    	clr.w     w0
    1d98:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1d9a:	00 40 eb    	clr.b     w0
    1d9c:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1d9e:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    1da0:	05 00 37    	bra       0x1dac <.L36>

00001da2 <.L38>:
      i++;
    1da2:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1da4:	00 7d 20    	mov.w     #0x7d0, w0
    1da6:	9e 00 78    	mov.w     [w14], w1
    1da8:	80 8f 50    	sub.w     w1, w0, [w15]
    1daa:	05 00 3c    	bra       GT, 0x1db6 <.L39>

00001dac <.L36>:
    1dac:	c0 13 80    	mov.w     0x278, w0
    1dae:	62 00 60    	and.w     w0, #0x2, w0
    1db0:	00 00 e0    	cp0.w     w0
    1db2:	f7 ff 32    	bra       Z, 0x1da2 <.L38>
    1db4:	01 00 37    	bra       0x1db8 <.L37>

00001db6 <.L39>:
    1db6:	00 00 00    	nop       

00001db8 <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    1db8:	80 13 80    	mov.w     0x270, w0
    1dba:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    1dbc:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    1dbe:	a0 00 20    	mov.w     #0xa, w0
    1dc0:	01 00 20    	mov.w     #0x0, w1
    1dc2:	32 ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    1dc4:	2e 40 90    	mov.b     [w14+2], w0
}
    1dc6:	00 80 fa    	ulnk      
    1dc8:	00 00 06    	return    

00001dca <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    1dca:	04 00 fa    	lnk       #0x4
   int i = 0;
    1dcc:	00 00 eb    	clr.w     w0
    1dce:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1dd0:	00 40 eb    	clr.b     w0
    1dd2:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1dd4:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    1dd6:	05 00 37    	bra       0x1de2 <.L41>

00001dd8 <.L43>:
      i++;
    1dd8:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1dda:	00 7d 20    	mov.w     #0x7d0, w0
    1ddc:	9e 00 78    	mov.w     [w14], w1
    1dde:	80 8f 50    	sub.w     w1, w0, [w15]
    1de0:	05 00 3c    	bra       GT, 0x1dec <.L44>

00001de2 <.L41>:
    1de2:	c0 13 80    	mov.w     0x278, w0
    1de4:	62 00 60    	and.w     w0, #0x2, w0
    1de6:	00 00 e0    	cp0.w     w0
    1de8:	f7 ff 32    	bra       Z, 0x1dd8 <.L43>
    1dea:	01 00 37    	bra       0x1dee <.L42>

00001dec <.L44>:
    1dec:	00 00 00    	nop       

00001dee <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    1dee:	80 13 80    	mov.w     0x270, w0
    1df0:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    1df2:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    1df4:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    1df6:	a0 00 20    	mov.w     #0xa, w0
    1df8:	01 00 20    	mov.w     #0x0, w1
    1dfa:	16 ff 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    1dfc:	2e 40 90    	mov.b     [w14+2], w0
}
    1dfe:	00 80 fa    	ulnk      
    1e00:	00 00 06    	return    

00001e02 <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    1e02:	04 00 fa    	lnk       #0x4
    1e04:	00 4f 78    	mov.b     w0, [w14]
    1e06:	11 47 98    	mov.b     w1, [w14+1]
    1e08:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    1e0a:	2e ff 07    	rcall     0x1c68 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    1e0c:	1e 00 fb    	se        [w14], w0
    1e0e:	80 00 78    	mov.w     w0, w1
    1e10:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e12:	00 80 60    	and.w     w1, w0, w0
    1e14:	78 ff 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1e16:	1e 40 90    	mov.b     [w14+1], w0
    1e18:	00 00 fb    	se        w0, w0
    1e1a:	75 ff 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    1e1c:	2e 40 90    	mov.b     [w14+2], w0
    1e1e:	00 00 fb    	se        w0, w0
    1e20:	72 ff 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    1e22:	56 ff 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1e24:	00 80 fa    	ulnk      
    1e26:	00 00 06    	return    

00001e28 <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    1e28:	04 00 fa    	lnk       #0x4
    1e2a:	20 47 98    	mov.b     w0, [w14+2]
    1e2c:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    1e2e:	1c ff 07    	rcall     0x1c68 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    1e30:	2e 40 90    	mov.b     [w14+2], w0
    1e32:	00 00 fb    	se        w0, w0
    1e34:	68 ff 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1e36:	3e 40 90    	mov.b     [w14+3], w0
    1e38:	00 00 fb    	se        w0, w0
    1e3a:	65 ff 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    1e3c:	a0 00 20    	mov.w     #0xa, w0
    1e3e:	01 00 20    	mov.w     #0x0, w1
    1e40:	f3 fe 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   i2c_restart();
    1e42:	2e ff 07    	rcall     0x1ca0 <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    1e44:	2e 40 90    	mov.b     [w14+2], w0
    1e46:	00 04 a0    	bset.b    w0, #0x0
    1e48:	00 00 fb    	se        w0, w0
    1e4a:	5d ff 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    1e4c:	8c ff 07    	rcall     0x1d66 <_i2c_read> <.LFB6> <.LFE5>
    1e4e:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    1e50:	3f ff 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    1e52:	1e 40 78    	mov.b     [w14], w0
}
    1e54:	00 80 fa    	ulnk      
    1e56:	00 00 06    	return    

00001e58 <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is there, 0 means it is not there
unsigned char I2Cpoll(char addr){
    1e58:	04 00 fa    	lnk       #0x4
    1e5a:	20 47 98    	mov.b     w0, [w14+2]
    unsigned char temp = 0;
    1e5c:	00 40 eb    	clr.b     w0
    1e5e:	00 4f 78    	mov.b     w0, [w14]
    i2c_start();
    1e60:	03 ff 07    	rcall     0x1c68 <_i2c_start> <.LFB2> <.LFE1>
    temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    1e62:	2e 40 90    	mov.b     [w14+2], w0
    1e64:	00 00 fb    	se        w0, w0
    1e66:	80 00 78    	mov.w     w0, w1
    1e68:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e6a:	00 80 60    	and.w     w1, w0, w0
    1e6c:	4c ff 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e6e:	00 4f 78    	mov.b     w0, [w14]
    reset_i2c_bus();
    1e70:	2f ff 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
    if (temp == 0) {
    1e72:	1e 40 78    	mov.b     [w14], w0
    1e74:	00 04 e0    	cp0.b     w0
    1e76:	02 00 3a    	bra       NZ, 0x1e7c <.L48>
        return 1; // We found it, no error
    1e78:	10 c0 b3    	mov.b     #0x1, w0
    1e7a:	01 00 37    	bra       0x1e7e <.L49>

00001e7c <.L48>:
    } else return 0;
    1e7c:	00 40 eb    	clr.b     w0

00001e7e <.L49>:
}
    1e7e:	00 80 fa    	ulnk      
    1e80:	00 00 06    	return    

00001e82 <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    1e82:	08 00 fa    	lnk       #0x8
    1e84:	20 47 98    	mov.b     w0, [w14+2]
    1e86:	21 07 98    	mov.w     w1, [w14+4]
    1e88:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    1e8a:	00 40 eb    	clr.b     w0
    1e8c:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    1e8e:	ec fe 07    	rcall     0x1c68 <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    1e90:	2e 40 90    	mov.b     [w14+2], w0
    1e92:	00 00 fb    	se        w0, w0
    1e94:	80 00 78    	mov.w     w0, w1
    1e96:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e98:	00 80 60    	and.w     w1, w0, w0
    1e9a:	35 ff 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e9c:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    1e9e:	00 40 eb    	clr.b     w0
    1ea0:	10 47 98    	mov.b     w0, [w14+1]
    1ea2:	0d 00 37    	bra       0x1ebe <.L51>

00001ea4 <.L52>:
    err |= send_i2c_byte(dat[j]);
    1ea4:	1e 40 90    	mov.b     [w14+1], w0
    1ea6:	00 80 fb    	ze        w0, w0
    1ea8:	ae 00 90    	mov.w     [w14+4], w1
    1eaa:	00 80 40    	add.w     w1, w0, w0
    1eac:	10 40 78    	mov.b     [w0], w0
    1eae:	00 00 fb    	se        w0, w0
    1eb0:	2a ff 07    	rcall     0x1d06 <_send_i2c_byte> <.LFB5> <.LFE4>
    1eb2:	9e 40 78    	mov.b     [w14], w1
    1eb4:	01 40 70    	ior.b     w0, w1, w0
    1eb6:	00 4f 78    	mov.b     w0, [w14]
    1eb8:	1e 40 90    	mov.b     [w14+1], w0
    1eba:	00 40 e8    	inc.b     w0, w0
    1ebc:	10 47 98    	mov.b     w0, [w14+1]

00001ebe <.L51>:
    1ebe:	9e 40 90    	mov.b     [w14+1], w1
    1ec0:	6e 40 90    	mov.b     [w14+6], w0
    1ec2:	80 cf 50    	sub.b     w1, w0, [w15]
    1ec4:	ef ff 39    	bra       NC, 0x1ea4 <.L52>
  }
  reset_i2c_bus();
    1ec6:	04 ff 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    1ec8:	1e 40 78    	mov.b     [w14], w0
}
    1eca:	00 80 fa    	ulnk      
    1ecc:	00 00 06    	return    

00001ece <_i2c2_init>:

////////////////////////////////////////////////////////////////////////////////
// I2C2 ////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// initiates I2C3 module to baud rate BRG
void i2c2_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    1ece:	04 00 fa    	lnk       #0x4
    1ed0:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C2BRG = BRG;           // Sets freq to 100kHz
    1ed2:	1e 00 90    	mov.w     [w14+2], w0
    1ed4:	a0 10 88    	mov.w     w0, 0x214
   I2C2CONbits.I2CEN = 0;	// Disable I2C Mode
    1ed6:	17 e2 a9    	bclr.b    0x217, #0x7
   I2C2CONbits.DISSLW = 1;	// Disable slew rate control
    1ed8:	17 22 a8    	bset.b    0x217, #0x1
   IFS3bits.MI2C2IF = 0;	 // Clear Interrupt
    1eda:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2CONbits.I2CEN = 1;	// Enable I2C Mode
    1edc:	17 e2 a8    	bset.b    0x217, #0x7
   temp = I2C2RCV;	 // read buffer to clear buffer full
    1ede:	80 10 80    	mov.w     0x210, w0
    1ee0:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    1ee2:	f6 fe 07    	rcall     0x1cd0 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1ee4:	00 80 fa    	ulnk      
    1ee6:	00 00 06    	return    

00001ee8 <_i2c2_start>:

//function iniates a start condition on bus
void i2c2_start(void){
    1ee8:	02 00 fa    	lnk       #0x2
   int x = 0;
    1eea:	00 00 eb    	clr.w     w0
    1eec:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.ACKDT = 0;	//Reset any previous Ack
    1eee:	16 a2 a9    	bclr.b    0x216, #0x5
   delay_by_nop(10);
    1ef0:	a0 00 20    	mov.w     #0xa, w0
    1ef2:	01 00 20    	mov.w     #0x0, w1
    1ef4:	99 fe 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C2CONbits.SEN = 1;	//Initiate Start condition
    1ef6:	16 02 a8    	bset.b    0x216, #0x0
   __asm__("nop");
    1ef8:	00 00 00    	nop       

   while (I2C2CONbits.SEN){    //the hardware will automatically clear Start Bit
    1efa:	07 00 37    	bra       0x1f0a <.L55>

00001efc <.L57>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    1efc:	10 00 20    	mov.w     #0x1, w0
    1efe:	01 00 20    	mov.w     #0x0, w1
    1f00:	93 fe 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1f02:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    1f04:	1e 00 78    	mov.w     [w14], w0
    1f06:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f08:	05 00 3c    	bra       GT, 0x1f14 <.L58>

00001f0a <.L55>:
    1f0a:	b0 10 80    	mov.w     0x216, w0
    1f0c:	61 00 60    	and.w     w0, #0x1, w0
    1f0e:	00 00 e0    	cp0.w     w0
    1f10:	f5 ff 3a    	bra       NZ, 0x1efc <.L57>
    1f12:	01 00 37    	bra       0x1f16 <.L56>

00001f14 <.L58>:
      break;
    1f14:	00 00 00    	nop       

00001f16 <.L56>:
   }
   delay_by_nop(2);
    1f16:	20 00 20    	mov.w     #0x2, w0
    1f18:	01 00 20    	mov.w     #0x0, w1
    1f1a:	86 fe 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1f1c:	00 80 fa    	ulnk      
    1f1e:	00 00 06    	return    

00001f20 <_i2c2_restart>:

void i2c2_restart(void){
    1f20:	02 00 fa    	lnk       #0x2
   int x = 0;
    1f22:	00 00 eb    	clr.w     w0
    1f24:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.RSEN = 1;	//Initiate restart condition
    1f26:	16 22 a8    	bset.b    0x216, #0x1
   __asm__("nop");
    1f28:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C2CONbits.RSEN){
    1f2a:	07 00 37    	bra       0x1f3a <.L60>

00001f2c <.L62>:
      delay_by_nop(1);
    1f2c:	10 00 20    	mov.w     #0x1, w0
    1f2e:	01 00 20    	mov.w     #0x0, w1
    1f30:	7b fe 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1f32:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    1f34:	1e 00 78    	mov.w     [w14], w0
    1f36:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f38:	05 00 3c    	bra       GT, 0x1f44 <.L63>

00001f3a <.L60>:
    1f3a:	b0 10 80    	mov.w     0x216, w0
    1f3c:	62 00 60    	and.w     w0, #0x2, w0
    1f3e:	00 00 e0    	cp0.w     w0
    1f40:	f5 ff 3a    	bra       NZ, 0x1f2c <.L62>
    1f42:	01 00 37    	bra       0x1f46 <.L61>

00001f44 <.L63>:
    1f44:	00 00 00    	nop       

00001f46 <.L61>:
   }
   delay_by_nop(2);
    1f46:	20 00 20    	mov.w     #0x2, w0
    1f48:	01 00 20    	mov.w     #0x0, w1
    1f4a:	6e fe 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1f4c:	00 80 fa    	ulnk      
    1f4e:	00 00 06    	return    

00001f50 <_reset_i2c2_bus>:


//Resets the I2C bus to Idle
void reset_i2c2_bus(void){
    1f50:	02 00 fa    	lnk       #0x2
   int x = 0;
    1f52:	00 00 eb    	clr.w     w0
    1f54:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.PEN = 1;     //initiate stop bit
    1f56:	16 42 a8    	bset.b    0x216, #0x2
   while (I2C2CONbits.PEN) {     //wait for hardware clear of stop bit
    1f58:	07 00 37    	bra       0x1f68 <.L65>

00001f5a <.L67>:
      // delay_by_nop(1);
      delay_by_nop(1);
    1f5a:	10 00 20    	mov.w     #0x1, w0
    1f5c:	01 00 20    	mov.w     #0x0, w1
    1f5e:	64 fe 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    1f60:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    1f62:	1e 00 78    	mov.w     [w14], w0
    1f64:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f66:	05 00 3c    	bra       GT, 0x1f72 <.L68>

00001f68 <.L65>:
    1f68:	b0 10 80    	mov.w     0x216, w0
    1f6a:	64 00 60    	and.w     w0, #0x4, w0
    1f6c:	00 00 e0    	cp0.w     w0
    1f6e:	f5 ff 3a    	bra       NZ, 0x1f5a <.L67>
    1f70:	01 00 37    	bra       0x1f74 <.L66>

00001f72 <.L68>:
    1f72:	00 00 00    	nop       

00001f74 <.L66>:
   }

   I2C2CONbits.RCEN = 0;
    1f74:	16 62 a9    	bclr.b    0x216, #0x3
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    1f76:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2STATbits.IWCOL = 0;
    1f78:	18 e2 a9    	bclr.b    0x218, #0x7
   I2C2STATbits.BCL = 0;
    1f7a:	19 42 a9    	bclr.b    0x219, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    1f7c:	40 01 20    	mov.w     #0x14, w0
    1f7e:	01 00 20    	mov.w     #0x0, w1
    1f80:	53 fe 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1f82:	00 80 fa    	ulnk      
    1f84:	00 00 06    	return    

00001f86 <_send_i2c2_byte>:


//basic I2C byte send
char send_i2c2_byte(int data){
    1f86:	04 00 fa    	lnk       #0x4
    1f88:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C2STATbits.TBF) { }
    1f8a:	00 00 00    	nop       

00001f8c <.L70>:
    1f8c:	c0 10 80    	mov.w     0x218, w0
    1f8e:	61 00 60    	and.w     w0, #0x1, w0
    1f90:	00 00 e0    	cp0.w     w0
    1f92:	fc ff 3a    	bra       NZ, 0x1f8c <.L70>
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    1f94:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2TRN = data; // load the outgoing data byte
    1f96:	1e 00 90    	mov.w     [w14+2], w0
    1f98:	90 10 88    	mov.w     w0, 0x212

   for (i=0; i<500; i++){           // wait for transmission
    1f9a:	00 00 eb    	clr.w     w0
    1f9c:	00 0f 78    	mov.w     w0, [w14]
    1f9e:	09 00 37    	bra       0x1fb2 <.L71>

00001fa0 <.L74>:
      if (!I2C2STATbits.TRSTAT) break; // if master transmit not in progress break
    1fa0:	c1 10 80    	mov.w     0x218, w1
    1fa2:	00 00 24    	mov.w     #0x4000, w0
    1fa4:	00 80 60    	and.w     w1, w0, w0
    1fa6:	00 00 e0    	cp0.w     w0
    1fa8:	09 00 32    	bra       Z, 0x1fbc <.L78>
      delay_by_nop(1); }
    1faa:	10 00 20    	mov.w     #0x1, w0
    1fac:	01 00 20    	mov.w     #0x0, w1
    1fae:	3c fe 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1fb0:	1e 0f e8    	inc.w     [w14], [w14]

00001fb2 <.L71>:
    1fb2:	30 1f 20    	mov.w     #0x1f3, w0
    1fb4:	9e 00 78    	mov.w     [w14], w1
    1fb6:	80 8f 50    	sub.w     w1, w0, [w15]
    1fb8:	f3 ff 34    	bra       LE, 0x1fa0 <.L74>
    1fba:	01 00 37    	bra       0x1fbe <.L73>

00001fbc <.L78>:
    1fbc:	00 00 00    	nop       

00001fbe <.L73>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    1fbe:	40 1f 20    	mov.w     #0x1f4, w0
    1fc0:	9e 00 78    	mov.w     [w14], w1
    1fc2:	80 8f 50    	sub.w     w1, w0, [w15]
    1fc4:	02 00 3a    	bra       NZ, 0x1fca <.L75>
        return(1); }    // return 1 to indicate failure
    1fc6:	10 c0 b3    	mov.b     #0x1, w0
    1fc8:	0c 00 37    	bra       0x1fe2 <.L76>

00001fca <.L75>:

   if (I2C2STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    1fca:	c1 10 80    	mov.w     0x218, w1
    1fcc:	00 00 28    	mov.w     #0x8000, w0
    1fce:	00 80 60    	and.w     w1, w0, w0
    1fd0:	00 00 e0    	cp0.w     w0
    1fd2:	03 00 32    	bra       Z, 0x1fda <.L77>
      reset_i2c2_bus();
    1fd4:	bd ff 07    	rcall     0x1f50 <_reset_i2c2_bus> <.LFB16> <.LFE15>
      return(1); }            // abort if not found
    1fd6:	10 c0 b3    	mov.b     #0x1, w0
    1fd8:	04 00 37    	bra       0x1fe2 <.L76>

00001fda <.L77>:

   delay_by_nop(2);
    1fda:	20 00 20    	mov.w     #0x2, w0
    1fdc:	01 00 20    	mov.w     #0x0, w1
    1fde:	24 fe 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    1fe0:	00 40 eb    	clr.b     w0

00001fe2 <.L76>:
}
    1fe2:	00 80 fa    	ulnk      
    1fe4:	00 00 06    	return    

00001fe6 <_i2c2_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c2_read(void){
    1fe6:	04 00 fa    	lnk       #0x4
   int i = 0;
    1fe8:	00 00 eb    	clr.w     w0
    1fea:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1fec:	00 40 eb    	clr.b     w0
    1fee:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    1ff0:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {           //if no response, break
    1ff2:	05 00 37    	bra       0x1ffe <.L80>

00001ff4 <.L82>:
      i ++;
    1ff4:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    1ff6:	00 7d 20    	mov.w     #0x7d0, w0
    1ff8:	9e 00 78    	mov.w     [w14], w1
    1ffa:	80 8f 50    	sub.w     w1, w0, [w15]
    1ffc:	05 00 3c    	bra       GT, 0x2008 <.L83>

00001ffe <.L80>:
    1ffe:	c0 10 80    	mov.w     0x218, w0
    2000:	62 00 60    	and.w     w0, #0x2, w0
    2002:	00 00 e0    	cp0.w     w0
    2004:	f7 ff 32    	bra       Z, 0x1ff4 <.L82>
    2006:	01 00 37    	bra       0x200a <.L81>

00002008 <.L83>:
    2008:	00 00 00    	nop       

0000200a <.L81>:

   data = I2C2RCV;       //get data from I2C2RCV register
    200a:	80 10 80    	mov.w     0x210, w0
    200c:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    200e:	2e 40 90    	mov.b     [w14+2], w0
}
    2010:	00 80 fa    	ulnk      
    2012:	00 00 06    	return    

00002014 <_i2c2_read_ack>:


//function reads data, returns the read data, with ack
char i2c2_read_ack(void){	//does not reset bus!!!
    2014:	04 00 fa    	lnk       #0x4
   int i = 0;
    2016:	00 00 eb    	clr.w     w0
    2018:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    201a:	00 40 eb    	clr.b     w0
    201c:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    201e:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    2020:	05 00 37    	bra       0x202c <.L85>

00002022 <.L87>:
      i++;
    2022:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2024:	00 7d 20    	mov.w     #0x7d0, w0
    2026:	9e 00 78    	mov.w     [w14], w1
    2028:	80 8f 50    	sub.w     w1, w0, [w15]
    202a:	05 00 3c    	bra       GT, 0x2036 <.L88>

0000202c <.L85>:
    202c:	c0 10 80    	mov.w     0x218, w0
    202e:	62 00 60    	and.w     w0, #0x2, w0
    2030:	00 00 e0    	cp0.w     w0
    2032:	f7 ff 32    	bra       Z, 0x2022 <.L87>
    2034:	01 00 37    	bra       0x2038 <.L86>

00002036 <.L88>:
    2036:	00 00 00    	nop       

00002038 <.L86>:

   data = I2C2RCV;               //get data from I2C2RCV register
    2038:	80 10 80    	mov.w     0x210, w0
    203a:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKEN = 1;        //start ACK generation
    203c:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    203e:	a0 00 20    	mov.w     #0xa, w0
    2040:	01 00 20    	mov.w     #0x0, w1
    2042:	f2 fd 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2044:	2e 40 90    	mov.b     [w14+2], w0
}
    2046:	00 80 fa    	ulnk      
    2048:	00 00 06    	return    

0000204a <_i2c2_read_nack>:

char i2c2_read_nack(void){	//does not reset bus!!!
    204a:	04 00 fa    	lnk       #0x4
   int i = 0;
    204c:	00 00 eb    	clr.w     w0
    204e:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2050:	00 40 eb    	clr.b     w0
    2052:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    2054:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    2056:	05 00 37    	bra       0x2062 <.L90>

00002058 <.L92>:
      i++;
    2058:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    205a:	00 7d 20    	mov.w     #0x7d0, w0
    205c:	9e 00 78    	mov.w     [w14], w1
    205e:	80 8f 50    	sub.w     w1, w0, [w15]
    2060:	05 00 3c    	bra       GT, 0x206c <.L93>

00002062 <.L90>:
    2062:	c0 10 80    	mov.w     0x218, w0
    2064:	62 00 60    	and.w     w0, #0x2, w0
    2066:	00 00 e0    	cp0.w     w0
    2068:	f7 ff 32    	bra       Z, 0x2058 <.L92>
    206a:	01 00 37    	bra       0x206e <.L91>

0000206c <.L93>:
    206c:	00 00 00    	nop       

0000206e <.L91>:

   data = I2C2RCV;               //get data from I2C2RCV register
    206e:	80 10 80    	mov.w     0x210, w0
    2070:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    2072:	16 a2 a8    	bset.b    0x216, #0x5
   I2C2CONbits.ACKEN = 1;        //start ack generation
    2074:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    2076:	a0 00 20    	mov.w     #0xa, w0
    2078:	01 00 20    	mov.w     #0x0, w1
    207a:	d6 fd 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    207c:	2e 40 90    	mov.b     [w14+2], w0
}
    207e:	00 80 fa    	ulnk      
    2080:	00 00 06    	return    

00002082 <_I2C2poll>:

// function checks if device at addr i bus
// 1 means it is not there, 0 means it is not there
unsigned char I2C2poll(char addr){
    2082:	04 00 fa    	lnk       #0x4
    2084:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    2086:	00 40 eb    	clr.b     w0
    2088:	00 4f 78    	mov.b     w0, [w14]
   i2c2_start();
    208a:	2e ff 07    	rcall     0x1ee8 <_i2c2_start> <.LFB14> <.LFE13>
   temp = send_i2c2_byte((addr) & (0xfffe)); // set /W bit
    208c:	2e 40 90    	mov.b     [w14+2], w0
    208e:	00 00 fb    	se        w0, w0
    2090:	80 00 78    	mov.w     w0, w1
    2092:	e0 ff 2f    	mov.w     #0xfffe, w0
    2094:	00 80 60    	and.w     w1, w0, w0
    2096:	77 ff 07    	rcall     0x1f86 <_send_i2c2_byte> <.LFB17> <.LFE16>
    2098:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c2_bus();
    209a:	5a ff 07    	rcall     0x1f50 <_reset_i2c2_bus> <.LFB16> <.LFE15>
   if (temp == 0) {
    209c:	1e 40 78    	mov.b     [w14], w0
    209e:	00 04 e0    	cp0.b     w0
    20a0:	02 00 3a    	bra       NZ, 0x20a6 <.L95>
       return 1; // We found it, no error
    20a2:	10 c0 b3    	mov.b     #0x1, w0
    20a4:	01 00 37    	bra       0x20a8 <.L96>

000020a6 <.L95>:
   } else return 0;
    20a6:	00 40 eb    	clr.b     w0

000020a8 <.L96>:
}
    20a8:	00 80 fa    	ulnk      
    20aa:	00 00 06    	return    

000020ac <_main>:
    20ac:	00 00 fa    	lnk       #0x0
    20ae:	0a 04 07    	rcall     0x28c4 <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    20b0:	d0 09 20    	mov.w     #0x9d, w0
    20b2:	0d ff 07    	rcall     0x1ece <_i2c2_init> <.LFB13> <.LFE12>
    20b4:	00 01 20    	mov.w     #0x10, w0
    20b6:	d0 10 88    	mov.w     w0, 0x21a
    20b8:	1c 22 ef    	clr.w     0x21c
    20ba:	9a 20 a8    	bset.b    0x9a, #0x1
    20bc:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    20be:	d8 82 a9    	bclr.b    0x2d8, #0x4
    20c0:	d9 01 07    	rcall     0x2474 <_init_ajuart> <.L0> <.LFB0> <.LFE11> <.Letext0> <.Ltext0>
    20c2:	80 3e 20    	mov.w     #0x3e8, w0
    20c4:	c4 fd 07    	rcall     0x1c4e <_i2c_init> <.LFB1> <.LFE0>
    20c6:	20 6c 29    	mov.w     #0x96c2, w0
    20c8:	10 40 78    	mov.b     [w0], w0
    20ca:	80 40 78    	mov.b     w0, w1
    20cc:	a0 03 21    	mov.w     #0x103a, w0
    20ce:	fa fa 07    	rcall     0x16c4 <_led_begin> <.L0> <.LFB0> <.Ltext0>
    20d0:	00 02 20    	mov.w     #0x20, w0
    20d2:	20 08 88    	mov.w     w0, 0x104
    20d4:	00 71 21    	mov.w     #0x1710, w0
    20d6:	10 08 88    	mov.w     w0, 0x102
    20d8:	00 21 ef    	clr.w     0x100
    20da:	84 60 a9    	bclr.b    0x84, #0x3
    20dc:	94 60 a8    	bset.b    0x94, #0x3
    20de:	05 e1 a8    	bset.b    0x105, #0x7
    20e0:	80 20 22    	mov.w     #0x2208, w0
    20e2:	00 40 88    	mov.w     w0, 0x800

000020e4 <.L5>:
    20e4:	31 81 20    	mov.w     #0x813, w1
    20e6:	91 40 78    	mov.b     [w1], w1
    20e8:	60 40 80    	mov.w     0x80c, w0
    20ea:	62 01 07    	rcall     0x23b0 <_dispNumber> <.LFB11> <.LFE10>
    20ec:	00 40 80    	mov.w     0x800, w0
    20ee:	00 00 01    	call      w0
    20f0:	f9 ff 37    	bra       0x20e4 <.L5>

000020f2 <_firstnum>:
    20f2:	02 00 fa    	lnk       #0x2
    20f4:	4e 01 07    	rcall     0x2392 <_ledoff> <.LFB10> <.LFE9>
    20f6:	dc e2 a8    	bset.b    0x2dc, #0x7
    20f8:	71 80 20    	mov.w     #0x807, w1
    20fa:	91 40 78    	mov.b     [w1], w1
    20fc:	06 c8 bf    	mov.b     0x806, WREG
    20fe:	00 c0 50    	sub.b     w1, w0, w0
    2100:	00 4f 78    	mov.b     w0, [w14]
    2102:	1e 40 78    	mov.b     [w14], w0
    2104:	00 04 e0    	cp0.b     w0
    2106:	04 00 3d    	bra       GE, 0x2110 <.L7>
    2108:	1e 40 78    	mov.b     [w14], w0
    210a:	f3 4f 40    	add.b     w0, #0x13, [w15]
    210c:	01 00 35    	bra       LT, 0x2110 <.L7>
    210e:	11 68 ef    	clr.b     0x811

00002110 <.L7>:
    2110:	61 80 20    	mov.w     #0x806, w1
    2112:	91 40 78    	mov.b     [w1], w1
    2114:	0e c8 bf    	mov.b     0x80e, WREG
    2116:	80 cf 50    	sub.b     w1, w0, [w15]
    2118:	02 00 3a    	bra       NZ, 0x211e <.L8>
    211a:	10 c0 b3    	mov.b     #0x1, w0
    211c:	12 e8 b7    	mov.b     WREG, 0x812

0000211e <.L8>:
    211e:	71 80 20    	mov.w     #0x807, w1
    2120:	91 40 78    	mov.b     [w1], w1
    2122:	0e c8 bf    	mov.b     0x80e, WREG
    2124:	80 cf 50    	sub.b     w1, w0, [w15]
    2126:	07 00 3a    	bra       NZ, 0x2136 <.L9>
    2128:	12 c8 bf    	mov.b     0x812, WREG
    212a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    212c:	04 00 3a    	bra       NZ, 0x2136 <.L9>
    212e:	11 c8 bf    	mov.b     0x811, WREG
    2130:	00 40 e8    	inc.b     w0, w0
    2132:	11 e8 b7    	mov.b     WREG, 0x811
    2134:	12 68 ef    	clr.b     0x812

00002136 <.L9>:
    2136:	11 c8 bf    	mov.b     0x811, WREG
    2138:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    213a:	09 00 36    	bra       LEU, 0x214e <.L10>
    213c:	12 c8 bf    	mov.b     0x812, WREG
    213e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2140:	06 00 3a    	bra       NZ, 0x214e <.L10>
    2142:	40 15 22    	mov.w     #0x2154, w0
    2144:	20 40 88    	mov.w     w0, 0x804
    2146:	11 68 ef    	clr.b     0x811
    2148:	12 68 ef    	clr.b     0x812
    214a:	06 c8 bf    	mov.b     0x806, WREG
    214c:	07 e8 b7    	mov.b     WREG, 0x807

0000214e <.L10>:
    214e:	13 68 ef    	clr.b     0x813
    2150:	00 80 fa    	ulnk      
    2152:	00 00 06    	return    

00002154 <_secondnum>:
    2154:	02 00 fa    	lnk       #0x2
    2156:	1d 01 07    	rcall     0x2392 <_ledoff> <.LFB10> <.LFE9>
    2158:	ec 02 a8    	bset.b    0x2ec, #0x0
    215a:	71 80 20    	mov.w     #0x807, w1
    215c:	91 40 78    	mov.b     [w1], w1
    215e:	06 c8 bf    	mov.b     0x806, WREG
    2160:	00 c0 50    	sub.b     w1, w0, w0
    2162:	00 4f 78    	mov.b     w0, [w14]
    2164:	61 80 20    	mov.w     #0x806, w1
    2166:	91 40 78    	mov.b     [w1], w1
    2168:	0f c8 bf    	mov.b     0x80f, WREG
    216a:	80 cf 50    	sub.b     w1, w0, [w15]
    216c:	02 00 3a    	bra       NZ, 0x2172 <.L12>
    216e:	10 c0 b3    	mov.b     #0x1, w0
    2170:	12 e8 b7    	mov.b     WREG, 0x812

00002172 <.L12>:
    2172:	71 80 20    	mov.w     #0x807, w1
    2174:	91 40 78    	mov.b     [w1], w1
    2176:	0f c8 bf    	mov.b     0x80f, WREG
    2178:	80 cf 50    	sub.b     w1, w0, [w15]
    217a:	07 00 3a    	bra       NZ, 0x218a <.L13>
    217c:	12 c8 bf    	mov.b     0x812, WREG
    217e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2180:	04 00 3a    	bra       NZ, 0x218a <.L13>
    2182:	11 c8 bf    	mov.b     0x811, WREG
    2184:	00 40 e8    	inc.b     w0, w0
    2186:	11 e8 b7    	mov.b     WREG, 0x811
    2188:	12 68 ef    	clr.b     0x812

0000218a <.L13>:
    218a:	11 c8 bf    	mov.b     0x811, WREG
    218c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    218e:	09 00 3a    	bra       NZ, 0x21a2 <.L14>
    2190:	12 c8 bf    	mov.b     0x812, WREG
    2192:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2194:	06 00 3a    	bra       NZ, 0x21a2 <.L14>
    2196:	40 1c 22    	mov.w     #0x21c4, w0
    2198:	20 40 88    	mov.w     w0, 0x804
    219a:	11 68 ef    	clr.b     0x811
    219c:	12 68 ef    	clr.b     0x812
    219e:	06 c8 bf    	mov.b     0x806, WREG
    21a0:	07 e8 b7    	mov.b     WREG, 0x807

000021a2 <.L14>:
    21a2:	1e 40 78    	mov.b     [w14], w0
    21a4:	00 04 e0    	cp0.b     w0
    21a6:	0a 00 34    	bra       LE, 0x21bc <.L15>
    21a8:	1e 40 78    	mov.b     [w14], w0
    21aa:	f3 4f 50    	sub.b     w0, #0x13, [w15]
    21ac:	07 00 3c    	bra       GT, 0x21bc <.L15>
    21ae:	11 68 ef    	clr.b     0x811
    21b0:	12 68 ef    	clr.b     0x812
    21b2:	20 0f 22    	mov.w     #0x20f2, w0
    21b4:	20 40 88    	mov.w     w0, 0x804
    21b6:	1b c8 bf    	mov.b     0x81b, WREG
    21b8:	00 40 e8    	inc.b     w0, w0
    21ba:	1b e8 b7    	mov.b     WREG, 0x81b

000021bc <.L15>:
    21bc:	10 c0 b3    	mov.b     #0x1, w0
    21be:	13 e8 b7    	mov.b     WREG, 0x813
    21c0:	00 80 fa    	ulnk      
    21c2:	00 00 06    	return    

000021c4 <_thirdnum>:
    21c4:	02 00 fa    	lnk       #0x2
    21c6:	e5 00 07    	rcall     0x2392 <_ledoff> <.LFB10> <.LFE9>
    21c8:	ec 22 a8    	bset.b    0x2ec, #0x1
    21ca:	71 80 20    	mov.w     #0x807, w1
    21cc:	91 40 78    	mov.b     [w1], w1
    21ce:	06 c8 bf    	mov.b     0x806, WREG
    21d0:	00 c0 50    	sub.b     w1, w0, w0
    21d2:	00 4f 78    	mov.b     w0, [w14]
    21d4:	61 80 20    	mov.w     #0x806, w1
    21d6:	91 40 78    	mov.b     [w1], w1
    21d8:	10 c8 bf    	mov.b     0x810, WREG
    21da:	80 cf 50    	sub.b     w1, w0, [w15]
    21dc:	05 00 3a    	bra       NZ, 0x21e8 <.L17>
    21de:	20 0f 22    	mov.w     #0x20f2, w0
    21e0:	20 40 88    	mov.w     w0, 0x804
    21e2:	11 68 ef    	clr.b     0x811
    21e4:	e0 29 22    	mov.w     #0x229e, w0
    21e6:	00 40 88    	mov.w     w0, 0x800

000021e8 <.L17>:
    21e8:	1e 40 78    	mov.b     [w14], w0
    21ea:	00 04 e0    	cp0.b     w0
    21ec:	09 00 3d    	bra       GE, 0x2200 <.L18>
    21ee:	1e 40 78    	mov.b     [w14], w0
    21f0:	f3 4f 40    	add.b     w0, #0x13, [w15]
    21f2:	06 00 35    	bra       LT, 0x2200 <.L18>
    21f4:	20 0f 22    	mov.w     #0x20f2, w0
    21f6:	20 40 88    	mov.w     w0, 0x804
    21f8:	11 68 ef    	clr.b     0x811
    21fa:	1b c8 bf    	mov.b     0x81b, WREG
    21fc:	00 40 e8    	inc.b     w0, w0
    21fe:	1b e8 b7    	mov.b     WREG, 0x81b

00002200 <.L18>:
    2200:	20 c0 b3    	mov.b     #0x2, w0
    2202:	13 e8 b7    	mov.b     WREG, 0x813
    2204:	00 80 fa    	ulnk      
    2206:	00 00 06    	return    

00002208 <_setup>:
    2208:	00 00 fa    	lnk       #0x0
    220a:	01 40 80    	mov.w     0x800, w1
    220c:	10 40 80    	mov.w     0x802, w0
    220e:	80 8f 50    	sub.w     w1, w0, [w15]
    2210:	0a 00 32    	bra       Z, 0x2226 <.L20>
    2212:	00 40 80    	mov.w     0x800, w0
    2214:	10 40 88    	mov.w     w0, 0x802
    2216:	da 82 a8    	bset.b    0x2da, #0x4
    2218:	10 00 20    	mov.w     #0x1, w0
    221a:	01 00 20    	mov.w     #0x0, w1
    221c:	05 fd 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    221e:	da a2 a8    	bset.b    0x2da, #0x5
    2220:	1a 68 ef    	clr.b     0x81a
    2222:	1b 68 ef    	clr.b     0x81b
    2224:	1c 68 ef    	clr.b     0x81c

00002226 <.L20>:
    2226:	50 c0 b3    	mov.b     #0x5, w0
    2228:	0e e8 b7    	mov.b     WREG, 0x80e
    222a:	a0 c0 b3    	mov.b     #0xa, w0
    222c:	0f e8 b7    	mov.b     WREG, 0x80f
    222e:	f0 c0 b3    	mov.b     #0xf, w0
    2230:	10 e8 b7    	mov.b     WREG, 0x810
    2232:	20 0f 22    	mov.w     #0x20f2, w0
    2234:	20 40 88    	mov.w     w0, 0x804
    2236:	1d c8 bf    	mov.b     0x81d, WREG
    2238:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    223a:	02 00 3a    	bra       NZ, 0x2240 <.L21>
    223c:	60 25 22    	mov.w     #0x2256, w0
    223e:	00 40 88    	mov.w     w0, 0x800

00002240 <.L21>:
    2240:	01 40 80    	mov.w     0x800, w1
    2242:	10 40 80    	mov.w     0x802, w0
    2244:	80 8f 50    	sub.w     w1, w0, [w15]
    2246:	05 00 32    	bra       Z, 0x2252 <.L19>
    2248:	da a2 a9    	bclr.b    0x2da, #0x5
    224a:	10 00 20    	mov.w     #0x1, w0
    224c:	01 00 20    	mov.w     #0x0, w1
    224e:	ec fc 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2250:	da 82 a9    	bclr.b    0x2da, #0x4

00002252 <.L19>:
    2252:	00 80 fa    	ulnk      
    2254:	00 00 06    	return    

00002256 <_run>:
    2256:	00 00 fa    	lnk       #0x0
    2258:	01 40 80    	mov.w     0x800, w1
    225a:	10 40 80    	mov.w     0x802, w0
    225c:	80 8f 50    	sub.w     w1, w0, [w15]
    225e:	03 00 32    	bra       Z, 0x2266 <.L24>
    2260:	00 40 80    	mov.w     0x800, w0
    2262:	10 40 88    	mov.w     w0, 0x802
    2264:	da a2 a8    	bset.b    0x2da, #0x5

00002266 <.L24>:
    2266:	20 40 80    	mov.w     0x804, w0
    2268:	00 00 01    	call      w0
    226a:	1e c8 bf    	mov.b     0x81e, WREG
    226c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    226e:	03 00 3a    	bra       NZ, 0x2276 <.L25>
    2270:	40 2e 22    	mov.w     #0x22e4, w0
    2272:	00 40 88    	mov.w     w0, 0x800
    2274:	0d 00 37    	bra       0x2290 <.L26>

00002276 <.L25>:
    2276:	1f c8 bf    	mov.b     0x81f, WREG
    2278:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    227a:	03 00 3a    	bra       NZ, 0x2282 <.L27>
    227c:	a0 33 22    	mov.w     #0x233a, w0
    227e:	00 40 88    	mov.w     w0, 0x800
    2280:	07 00 37    	bra       0x2290 <.L26>

00002282 <.L27>:
    2282:	91 16 80    	mov.w     0x2d2, w1
    2284:	00 00 21    	mov.w     #0x1000, w0
    2286:	00 80 60    	and.w     w1, w0, w0
    2288:	00 00 e0    	cp0.w     w0
    228a:	02 00 3a    	bra       NZ, 0x2290 <.L26>
    228c:	e0 29 22    	mov.w     #0x229e, w0
    228e:	00 40 88    	mov.w     w0, 0x800

00002290 <.L26>:
    2290:	01 40 80    	mov.w     0x800, w1
    2292:	10 40 80    	mov.w     0x802, w0
    2294:	80 8f 50    	sub.w     w1, w0, [w15]
    2296:	01 00 32    	bra       Z, 0x229a <.L23>
    2298:	da a2 a9    	bclr.b    0x2da, #0x5

0000229a <.L23>:
    229a:	00 80 fa    	ulnk      
    229c:	00 00 06    	return    

0000229e <_solved>:
    229e:	00 00 fa    	lnk       #0x0
    22a0:	01 40 80    	mov.w     0x800, w1
    22a2:	10 40 80    	mov.w     0x802, w0
    22a4:	80 8f 50    	sub.w     w1, w0, [w15]
    22a6:	05 00 32    	bra       Z, 0x22b2 <.L30>
    22a8:	00 40 80    	mov.w     0x800, w0
    22aa:	10 40 88    	mov.w     w0, 0x802
    22ac:	10 c0 b3    	mov.b     #0x1, w0
    22ae:	1a e8 b7    	mov.b     WREG, 0x81a
    22b0:	da 82 a8    	bset.b    0x2da, #0x4

000022b2 <.L30>:
    22b2:	30 c0 b3    	mov.b     #0x3, w0
    22b4:	13 e8 b7    	mov.b     WREG, 0x813
    22b6:	13 c8 bf    	mov.b     0x813, WREG
    22b8:	80 40 78    	mov.b     w0, w1
    22ba:	f0 00 20    	mov.w     #0xf, w0
    22bc:	79 00 07    	rcall     0x23b0 <_dispNumber> <.LFB11> <.LFE10>
    22be:	1e c8 bf    	mov.b     0x81e, WREG
    22c0:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    22c2:	03 00 3a    	bra       NZ, 0x22ca <.L31>
    22c4:	40 2e 22    	mov.w     #0x22e4, w0
    22c6:	00 40 88    	mov.w     w0, 0x800
    22c8:	05 00 37    	bra       0x22d4 <.L32>

000022ca <.L31>:
    22ca:	1f c8 bf    	mov.b     0x81f, WREG
    22cc:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    22ce:	02 00 3a    	bra       NZ, 0x22d4 <.L32>
    22d0:	a0 33 22    	mov.w     #0x233a, w0
    22d2:	00 40 88    	mov.w     w0, 0x800

000022d4 <.L32>:
    22d4:	01 40 80    	mov.w     0x800, w1
    22d6:	10 40 80    	mov.w     0x802, w0
    22d8:	80 8f 50    	sub.w     w1, w0, [w15]
    22da:	02 00 32    	bra       Z, 0x22e0 <.L29>
    22dc:	1a 68 ef    	clr.b     0x81a
    22de:	da 82 a9    	bclr.b    0x2da, #0x4

000022e0 <.L29>:
    22e0:	00 80 fa    	ulnk      
    22e2:	00 00 06    	return    

000022e4 <_end_win>:
    22e4:	00 00 fa    	lnk       #0x0
    22e6:	01 40 80    	mov.w     0x800, w1
    22e8:	10 40 80    	mov.w     0x802, w0
    22ea:	80 8f 50    	sub.w     w1, w0, [w15]
    22ec:	0a 00 32    	bra       Z, 0x2302 <.L35>
    22ee:	00 40 80    	mov.w     0x800, w0
    22f0:	10 40 88    	mov.w     w0, 0x802
    22f2:	da 82 a8    	bset.b    0x2da, #0x4
    22f4:	00 03 20    	mov.w     #0x30, w0
    22f6:	20 08 88    	mov.w     w0, 0x104
    22f8:	10 a1 27    	mov.w     #0x7a11, w0
    22fa:	10 08 88    	mov.w     w0, 0x102
    22fc:	00 21 ef    	clr.w     0x100
    22fe:	84 60 a9    	bclr.b    0x84, #0x3
    2300:	05 e1 a8    	bset.b    0x105, #0x7

00002302 <.L35>:
    2302:	20 04 80    	mov.w     0x84, w0
    2304:	68 00 60    	and.w     w0, #0x8, w0
    2306:	00 00 e0    	cp0.w     w0
    2308:	10 00 32    	bra       Z, 0x232a <.L36>
    230a:	84 60 a9    	bclr.b    0x84, #0x3
    230c:	d0 16 80    	mov.w     0x2da, w0
    230e:	70 00 60    	and.w     w0, #0x10, w0
    2310:	00 f0 a7    	btsc.w    w0, #0xf
    2312:	00 00 ea    	neg.w     w0, w0
    2314:	00 00 e9    	dec.w     w0, w0
    2316:	4f 00 de    	lsr.w     w0, #0xf, w0
    2318:	00 40 78    	mov.b     w0, w0
    231a:	00 80 fb    	ze        w0, w0
    231c:	61 00 60    	and.w     w0, #0x1, w0
    231e:	44 00 dd    	sl.w      w0, #0x4, w0
    2320:	d2 16 80    	mov.w     0x2da, w2
    2322:	f1 fe 2f    	mov.w     #0xffef, w1
    2324:	81 00 61    	and.w     w2, w1, w1
    2326:	01 00 70    	ior.w     w0, w1, w0
    2328:	d0 16 88    	mov.w     w0, 0x2da

0000232a <.L36>:
    232a:	01 40 80    	mov.w     0x800, w1
    232c:	10 40 80    	mov.w     0x802, w0
    232e:	80 8f 50    	sub.w     w1, w0, [w15]
    2330:	02 00 32    	bra       Z, 0x2336 <.L34>
    2332:	da 82 a9    	bclr.b    0x2da, #0x4
    2334:	05 e1 a9    	bclr.b    0x105, #0x7

00002336 <.L34>:
    2336:	00 80 fa    	ulnk      
    2338:	00 00 06    	return    

0000233a <_end_fail>:
    233a:	00 00 fa    	lnk       #0x0
    233c:	01 40 80    	mov.w     0x800, w1
    233e:	10 40 80    	mov.w     0x802, w0
    2340:	80 8f 50    	sub.w     w1, w0, [w15]
    2342:	0a 00 32    	bra       Z, 0x2358 <.L39>
    2344:	00 40 80    	mov.w     0x800, w0
    2346:	10 40 88    	mov.w     w0, 0x802
    2348:	da a2 a8    	bset.b    0x2da, #0x5
    234a:	00 03 20    	mov.w     #0x30, w0
    234c:	20 08 88    	mov.w     w0, 0x104
    234e:	10 a1 27    	mov.w     #0x7a11, w0
    2350:	10 08 88    	mov.w     w0, 0x102
    2352:	00 21 ef    	clr.w     0x100
    2354:	84 60 a9    	bclr.b    0x84, #0x3
    2356:	05 e1 a8    	bset.b    0x105, #0x7

00002358 <.L39>:
    2358:	20 04 80    	mov.w     0x84, w0
    235a:	68 00 60    	and.w     w0, #0x8, w0
    235c:	00 00 e0    	cp0.w     w0
    235e:	11 00 32    	bra       Z, 0x2382 <.L40>
    2360:	84 60 a9    	bclr.b    0x84, #0x3
    2362:	d1 16 80    	mov.w     0x2da, w1
    2364:	00 02 20    	mov.w     #0x20, w0
    2366:	00 80 60    	and.w     w1, w0, w0
    2368:	00 f0 a7    	btsc.w    w0, #0xf
    236a:	00 00 ea    	neg.w     w0, w0
    236c:	00 00 e9    	dec.w     w0, w0
    236e:	4f 00 de    	lsr.w     w0, #0xf, w0
    2370:	00 40 78    	mov.b     w0, w0
    2372:	00 80 fb    	ze        w0, w0
    2374:	61 00 60    	and.w     w0, #0x1, w0
    2376:	45 00 dd    	sl.w      w0, #0x5, w0
    2378:	d2 16 80    	mov.w     0x2da, w2
    237a:	f1 fd 2f    	mov.w     #0xffdf, w1
    237c:	81 00 61    	and.w     w2, w1, w1
    237e:	01 00 70    	ior.w     w0, w1, w0
    2380:	d0 16 88    	mov.w     w0, 0x2da

00002382 <.L40>:
    2382:	01 40 80    	mov.w     0x800, w1
    2384:	10 40 80    	mov.w     0x802, w0
    2386:	80 8f 50    	sub.w     w1, w0, [w15]
    2388:	02 00 32    	bra       Z, 0x238e <.L38>
    238a:	da a2 a9    	bclr.b    0x2da, #0x5
    238c:	05 e1 a9    	bclr.b    0x105, #0x7

0000238e <.L38>:
    238e:	00 80 fa    	ulnk      
    2390:	00 00 06    	return    

00002392 <_ledoff>:
    2392:	00 00 fa    	lnk       #0x0
    2394:	dc e2 a9    	bclr.b    0x2dc, #0x7
    2396:	10 00 20    	mov.w     #0x1, w0
    2398:	01 00 20    	mov.w     #0x0, w1
    239a:	46 fc 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    239c:	ec 02 a9    	bclr.b    0x2ec, #0x0
    239e:	10 00 20    	mov.w     #0x1, w0
    23a0:	01 00 20    	mov.w     #0x0, w1
    23a2:	42 fc 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    23a4:	ec 22 a9    	bclr.b    0x2ec, #0x1
    23a6:	10 00 20    	mov.w     #0x1, w0
    23a8:	01 00 20    	mov.w     #0x0, w1
    23aa:	3e fc 07    	rcall     0x1c28 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    23ac:	00 80 fa    	ulnk      
    23ae:	00 00 06    	return    

000023b0 <_dispNumber>:
    23b0:	0a 00 fa    	lnk       #0xa
    23b2:	30 07 98    	mov.w     w0, [w14+6]
    23b4:	01 4f 98    	mov.b     w1, [w14+8]
    23b6:	3e 00 90    	mov.w     [w14+6], w0
    23b8:	c3 00 de    	lsr.w     w0, #0x3, w1
    23ba:	50 0c 22    	mov.w     #0x20c5, w0
    23bc:	00 08 b8    	mul.uu    w1, w0, w0
    23be:	44 08 de    	lsr.w     w1, #0x4, w0
    23c0:	00 4f 78    	mov.b     w0, [w14]
    23c2:	1e 40 78    	mov.b     [w14], w0
    23c4:	78 00 b9    	mul.su    w0, #0x18, w0
    23c6:	00 00 78    	mov.w     w0, w0
    23c8:	80 40 78    	mov.b     w0, w1
    23ca:	3e 00 90    	mov.w     [w14+6], w0
    23cc:	00 40 78    	mov.b     w0, w0
    23ce:	00 c0 40    	add.b     w1, w0, w0
    23d0:	10 47 98    	mov.b     w0, [w14+1]
    23d2:	1e 40 90    	mov.b     [w14+1], w0
    23d4:	00 80 fb    	ze        w0, w0
    23d6:	c2 00 de    	lsr.w     w0, #0x2, w1
    23d8:	b0 47 21    	mov.w     #0x147b, w0
    23da:	00 08 b8    	mul.uu    w1, w0, w0
    23dc:	01 00 d1    	lsr.w     w1, w0
    23de:	20 47 98    	mov.b     w0, [w14+2]
    23e0:	ae 40 90    	mov.b     [w14+2], w1
    23e2:	c0 09 20    	mov.w     #0x9c, w0
    23e4:	00 88 b9    	mul.ss    w1, w0, w0
    23e6:	00 00 78    	mov.w     w0, w0
    23e8:	00 40 78    	mov.b     w0, w0
    23ea:	9e 40 90    	mov.b     [w14+1], w1
    23ec:	00 c0 40    	add.b     w1, w0, w0
    23ee:	10 47 98    	mov.b     w0, [w14+1]
    23f0:	1e 40 90    	mov.b     [w14+1], w0
    23f2:	80 80 fb    	ze        w0, w1
    23f4:	d0 cc 2c    	mov.w     #0xcccd, w0
    23f6:	00 08 b8    	mul.uu    w1, w0, w0
    23f8:	43 08 de    	lsr.w     w1, #0x3, w0
    23fa:	30 47 98    	mov.b     w0, [w14+3]
    23fc:	be 40 90    	mov.b     [w14+3], w1
    23fe:	60 0f 20    	mov.w     #0xf6, w0
    2400:	00 88 b9    	mul.ss    w1, w0, w0
    2402:	00 00 78    	mov.w     w0, w0
    2404:	00 40 78    	mov.b     w0, w0
    2406:	9e 40 90    	mov.b     [w14+1], w1
    2408:	00 c0 40    	add.b     w1, w0, w0
    240a:	10 47 98    	mov.b     w0, [w14+1]
    240c:	9e 40 90    	mov.b     [w14+1], w1
    240e:	41 47 98    	mov.b     w1, [w14+4]
    2410:	0e 48 90    	mov.b     [w14+8], w0
    2412:	00 80 fb    	ze        w0, w0
    2414:	00 00 ea    	neg.w     w0, w0
    2416:	4f 00 de    	lsr.w     w0, #0xf, w0
    2418:	00 40 78    	mov.b     w0, w0
    241a:	80 41 78    	mov.b     w0, w3
    241c:	12 c1 b3    	mov.b     #0x11, w2
    241e:	80 40 eb    	clr.b     w1
    2420:	a0 03 21    	mov.w     #0x103a, w0
    2422:	a1 fa 07    	rcall     0x1966 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    2424:	0e 48 90    	mov.b     [w14+8], w0
    2426:	00 80 fb    	ze        w0, w0
    2428:	80 00 e9    	dec.w     w0, w1
    242a:	10 c0 b3    	mov.b     #0x1, w0
    242c:	01 00 e0    	cp0.w     w1
    242e:	01 00 3c    	bra       GT, 0x2432 <.L44>
    2430:	00 40 eb    	clr.b     w0

00002432 <.L44>:
    2432:	80 41 78    	mov.b     w0, w3
    2434:	3e 41 90    	mov.b     [w14+3], w2
    2436:	11 c0 b3    	mov.b     #0x1, w1
    2438:	a0 03 21    	mov.w     #0x103a, w0
    243a:	95 fa 07    	rcall     0x1966 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    243c:	0e 48 90    	mov.b     [w14+8], w0
    243e:	00 80 fb    	ze        w0, w0
    2440:	80 80 e9    	dec2.w    w0, w1
    2442:	10 c0 b3    	mov.b     #0x1, w0
    2444:	01 00 e0    	cp0.w     w1
    2446:	01 00 3c    	bra       GT, 0x244a <.L45>
    2448:	00 40 eb    	clr.b     w0

0000244a <.L45>:
    244a:	80 41 78    	mov.b     w0, w3
    244c:	4e 41 90    	mov.b     [w14+4], w2
    244e:	31 c0 b3    	mov.b     #0x3, w1
    2450:	a0 03 21    	mov.w     #0x103a, w0
    2452:	89 fa 07    	rcall     0x1966 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    2454:	0e 48 90    	mov.b     [w14+8], w0
    2456:	00 80 fb    	ze        w0, w0
    2458:	e3 00 50    	sub.w     w0, #0x3, w1
    245a:	10 c0 b3    	mov.b     #0x1, w0
    245c:	01 00 e0    	cp0.w     w1
    245e:	01 00 3c    	bra       GT, 0x2462 <.L46>
    2460:	00 40 eb    	clr.b     w0

00002462 <.L46>:
    2462:	80 41 78    	mov.b     w0, w3
    2464:	12 c1 b3    	mov.b     #0x11, w2
    2466:	41 c0 b3    	mov.b     #0x4, w1
    2468:	a0 03 21    	mov.w     #0x103a, w0
    246a:	7d fa 07    	rcall     0x1966 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    246c:	a0 03 21    	mov.w     #0x103a, w0
    246e:	6c f9 07    	rcall     0x1748 <_led_writeDisplay> <.LFB3> <.LFE2>
    2470:	00 80 fa    	ulnk      
    2472:	00 00 06    	return    

00002474 <_init_ajuart>:
    2474:	04 00 fa    	lnk       #0x4
    2476:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    2478:	f2 c2 a8    	bset.b    0x2f2, #0x6
    247a:	f0 e2 a8    	bset.b    0x2f0, #0x7
    247c:	00 6c 20    	mov.w     #0x6c0, w0
    247e:	00 0f 78    	mov.w     w0, [w14]
    2480:	00 68 20    	mov.w     #0x680, w0
    2482:	10 07 98    	mov.w     w0, [w14+2]
    2484:	11 3a 80    	mov.w     0x742, w1
    2486:	f0 0b 20    	mov.w     #0xbf, w0
    2488:	00 81 60    	and.w     w1, w0, w2
    248a:	60 04 20    	mov.w     #0x46, w0
    248c:	71 05 20    	mov.w     #0x57, w1
    248e:	23 74 20    	mov.w     #0x742, w3
    2490:	80 49 78    	mov.b     w0, [w3]
    2492:	81 49 78    	mov.b     w1, [w3]
    2494:	82 49 78    	mov.b     w2, [w3]
    2496:	1e 00 90    	mov.w     [w14+2], w0
    2498:	40 02 b0    	add.w     #0x24, w0
    249a:	a1 c1 b3    	mov.b     #0x1a, w1
    249c:	01 48 78    	mov.b     w1, [w0]
    249e:	9e 00 78    	mov.w     [w14], w1
    24a0:	75 80 40    	add.w     w1, #0x15, w0
    24a2:	31 c0 b3    	mov.b     #0x3, w1
    24a4:	01 48 78    	mov.b     w1, [w0]
    24a6:	10 3a 80    	mov.w     0x742, w0
    24a8:	00 01 78    	mov.w     w0, w2
    24aa:	02 60 a0    	bset.w    w2, #0x6
    24ac:	60 04 20    	mov.w     #0x46, w0
    24ae:	71 05 20    	mov.w     #0x57, w1
    24b0:	23 74 20    	mov.w     #0x742, w3
    24b2:	80 49 78    	mov.b     w0, [w3]
    24b4:	81 49 78    	mov.b     w1, [w3]
    24b6:	82 49 78    	mov.b     w2, [w3]
    24b8:	80 00 20    	mov.w     #0x8, w0
    24ba:	00 11 88    	mov.w     w0, 0x220
    24bc:	20 02 20    	mov.w     #0x22, w0
    24be:	40 11 88    	mov.w     w0, 0x228
    24c0:	a0 83 20    	mov.w     #0x83a, w0
    24c2:	30 41 88    	mov.w     w0, 0x826
    24c4:	00 40 20    	mov.w     #0x400, w0
    24c6:	40 41 88    	mov.w     w0, 0x828
    24c8:	00 00 eb    	clr.w     w0
    24ca:	50 41 88    	mov.w     w0, 0x82a
    24cc:	00 00 eb    	clr.w     w0
    24ce:	60 41 88    	mov.w     w0, 0x82c
    24d0:	00 00 eb    	clr.w     w0
    24d2:	70 41 88    	mov.w     w0, 0x82e
    24d4:	00 30 20    	mov.w     #0x300, w0
    24d6:	10 41 88    	mov.w     w0, 0x822
    24d8:	a0 c3 20    	mov.w     #0xc3a, w0
    24da:	80 41 88    	mov.w     w0, 0x830
    24dc:	00 40 20    	mov.w     #0x400, w0
    24de:	90 41 88    	mov.w     w0, 0x832
    24e0:	00 00 eb    	clr.w     w0
    24e2:	a0 41 88    	mov.w     w0, 0x834
    24e4:	00 00 eb    	clr.w     w0
    24e6:	b0 41 88    	mov.w     w0, 0x836
    24e8:	00 00 eb    	clr.w     w0
    24ea:	c0 41 88    	mov.w     w0, 0x838
    24ec:	23 e2 a9    	bclr.b    0x223, #0x7
    24ee:	23 a2 a8    	bset.b    0x223, #0x5
    24f0:	85 80 a9    	bclr.b    0x85, #0x4
    24f2:	95 80 a8    	bset.b    0x95, #0x4
    24f4:	85 60 a9    	bclr.b    0x85, #0x3
    24f6:	95 60 a8    	bset.b    0x95, #0x3
    24f8:	21 e2 a8    	bset.b    0x221, #0x7
    24fa:	23 42 a8    	bset.b    0x223, #0x2
    24fc:	00 80 fa    	ulnk      
    24fe:	00 00 06    	return    

00002500 <_U1_in_waiting>:
    2500:	00 00 fa    	lnk       #0x0
    2502:	c0 41 80    	mov.w     0x838, w0
    2504:	00 80 fa    	ulnk      
    2506:	00 00 06    	return    

00002508 <_U1_flush_tx_buffer>:
    2508:	00 00 fa    	lnk       #0x0
    250a:	11 11 80    	mov.w     0x222, w1
    250c:	00 40 20    	mov.w     #0x400, w0
    250e:	00 80 60    	and.w     w1, w0, w0
    2510:	00 00 e0    	cp0.w     w0
    2512:	01 00 3a    	bra       NZ, 0x2516 <.L15>
    2514:	23 42 a8    	bset.b    0x223, #0x2

00002516 <.L15>:
    2516:	00 80 fa    	ulnk      
    2518:	00 00 06    	return    

0000251a <_U1_putc>:
    251a:	02 00 fa    	lnk       #0x2
    251c:	00 4f 78    	mov.b     w0, [w14]
    251e:	00 00 00    	nop       

00002520 <.L18>:
    2520:	71 41 80    	mov.w     0x82e, w1
    2522:	40 41 80    	mov.w     0x828, w0
    2524:	80 8f 50    	sub.w     w1, w0, [w15]
    2526:	fc ff 32    	bra       Z, 0x2520 <.L18>
    2528:	ff 3f fc    	disi      #0x3fff
    252a:	31 41 80    	mov.w     0x826, w1
    252c:	60 41 80    	mov.w     0x82c, w0
    252e:	00 80 40    	add.w     w1, w0, w0
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}

    disable_interrupts();
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    2530:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    2532:	60 41 80    	mov.w     0x82c, w0
    2534:	00 00 e8    	inc.w     w0, w0
    2536:	60 41 88    	mov.w     w0, 0x82c
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    2538:	61 41 80    	mov.w     0x82c, w1
    253a:	40 41 80    	mov.w     0x828, w0
    253c:	80 8f 50    	sub.w     w1, w0, [w15]
    253e:	02 00 3a    	bra       NZ, 0x2544 <.L19>
        U1_tx_buffer.tail = 0;
    2540:	00 00 eb    	clr.w     w0
    2542:	60 41 88    	mov.w     w0, 0x82c

00002544 <.L19>:
    U1_tx_buffer.count++;
    2544:	70 41 80    	mov.w     0x82e, w0
    2546:	00 00 e8    	inc.w     w0, w0
    2548:	70 41 88    	mov.w     w0, 0x82e
    enable_interrupts();
    254a:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    254c:	71 41 80    	mov.w     0x82e, w1
    254e:	10 41 80    	mov.w     0x822, w0
    2550:	80 8f 50    	sub.w     w1, w0, [w15]
    2552:	01 00 39    	bra       NC, 0x2556 <.L17>
        U1STAbits.UTXEN = 1;
    2554:	23 42 a8    	bset.b    0x223, #0x2

00002556 <.L17>:
}
    2556:	00 80 fa    	ulnk      
    2558:	00 00 06    	return    

0000255a <_U1_getc>:

uint8_t U1_getc(void) {
    255a:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    255c:	00 00 00    	nop       

0000255e <.L22>:
    255e:	c0 41 80    	mov.w     0x838, w0
    2560:	00 00 e0    	cp0.w     w0
    2562:	fd ff 32    	bra       Z, 0x255e <.L22>

    disable_interrupts();
    2564:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    2566:	81 41 80    	mov.w     0x830, w1
    2568:	a0 41 80    	mov.w     0x834, w0
    256a:	00 80 40    	add.w     w1, w0, w0
    256c:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    256e:	a0 41 80    	mov.w     0x834, w0
    2570:	00 00 e8    	inc.w     w0, w0
    2572:	a0 41 88    	mov.w     w0, 0x834
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    2574:	a1 41 80    	mov.w     0x834, w1
    2576:	90 41 80    	mov.w     0x832, w0
    2578:	80 8f 50    	sub.w     w1, w0, [w15]
    257a:	02 00 3a    	bra       NZ, 0x2580 <.L23>
        U1_rx_buffer.head = 0;
    257c:	00 00 eb    	clr.w     w0
    257e:	a0 41 88    	mov.w     w0, 0x834

00002580 <.L23>:
    U1_rx_buffer.count--;
    2580:	c0 41 80    	mov.w     0x838, w0
    2582:	00 00 e9    	dec.w     w0, w0
    2584:	c0 41 88    	mov.w     w0, 0x838
    enable_interrupts();
    2586:	52 20 ef    	clr.w     0x52

    return ch;
    2588:	1e 40 78    	mov.b     [w14], w0
}
    258a:	00 80 fa    	ulnk      
    258c:	00 00 06    	return    

0000258e <_U1_puts>:

void U1_puts(uint8_t *str) {
    258e:	02 00 fa    	lnk       #0x2
    2590:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    2592:	04 00 37    	bra       0x259c <.L25>

00002594 <.L26>:
        U1_putc(*str++);
    2594:	1e 00 78    	mov.w     [w14], w0
    2596:	10 40 78    	mov.b     [w0], w0
    2598:	1e 0f e8    	inc.w     [w14], [w14]
    259a:	bf ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>

0000259c <.L25>:
    259c:	1e 00 78    	mov.w     [w14], w0
    259e:	10 40 78    	mov.b     [w0], w0
    25a0:	00 04 e0    	cp0.b     w0
    25a2:	f8 ff 3a    	bra       NZ, 0x2594 <.L26>
    U1_flush_tx_buffer();
    25a4:	b1 ff 07    	rcall     0x2508 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    25a6:	00 80 fa    	ulnk      
    25a8:	00 00 06    	return    

000025aa <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    25aa:	04 00 fa    	lnk       #0x4
    25ac:	00 0f 78    	mov.w     w0, [w14]
    25ae:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    25b0:	1e 00 90    	mov.w     [w14+2], w0
    25b2:	00 00 e0    	cp0.w     w0
    25b4:	1a 00 32    	bra       Z, 0x25ea <.L32>
        return;

    if (len == 1) {
    25b6:	1e 00 90    	mov.w     [w14+2], w0
    25b8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25ba:	04 00 3a    	bra       NZ, 0x25c4 <.L30>
        *str = '\0';
    25bc:	1e 00 78    	mov.w     [w14], w0
    25be:	80 40 eb    	clr.b     w1
    25c0:	01 48 78    	mov.b     w1, [w0]
        return;
    25c2:	14 00 37    	bra       0x25ec <.L27>

000025c4 <.L30>:
    }

    while (1) {
        *str = U1_getc();
    25c4:	ca ff 07    	rcall     0x255a <_U1_getc> <.LFB6> <.LFE5>
    25c6:	9e 00 78    	mov.w     [w14], w1
    25c8:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    25ca:	1e 00 78    	mov.w     [w14], w0
    25cc:	10 40 78    	mov.b     [w0], w0
    25ce:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    25d0:	08 00 32    	bra       Z, 0x25e2 <.L31>
    25d2:	1e 00 90    	mov.w     [w14+2], w0
    25d4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25d6:	05 00 32    	bra       Z, 0x25e2 <.L31>
            break;
        str++;
    25d8:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    25da:	1e 00 90    	mov.w     [w14+2], w0
    25dc:	00 00 e9    	dec.w     w0, w0
    25de:	10 07 98    	mov.w     w0, [w14+2]
    }
    25e0:	f1 ff 37    	bra       0x25c4 <.L30>

000025e2 <.L31>:
    *str = '\0';
    25e2:	1e 00 78    	mov.w     [w14], w0
    25e4:	80 40 eb    	clr.b     w1
    25e6:	01 48 78    	mov.b     w1, [w0]
    25e8:	01 00 37    	bra       0x25ec <.L27>

000025ea <.L32>:
    25ea:	00 00 00    	nop       

000025ec <.L27>:
}
    25ec:	00 80 fa    	ulnk      
    25ee:	00 00 06    	return    

000025f0 <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    25f0:	08 00 fa    	lnk       #0x8
    25f2:	20 07 98    	mov.w     w0, [w14+4]
    25f4:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    25f6:	3e 00 90    	mov.w     [w14+6], w0
    25f8:	00 00 e0    	cp0.w     w0
    25fa:	6f 00 32    	bra       Z, 0x26da <.L46>
        return;

    if (len == 1) {
    25fc:	3e 00 90    	mov.w     [w14+6], w0
    25fe:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2600:	04 00 3a    	bra       NZ, 0x260a <.L36>
        *str = '\0';
    2602:	2e 00 90    	mov.w     [w14+4], w0
    2604:	80 40 eb    	clr.b     w1
    2606:	01 48 78    	mov.b     w1, [w0]
        return;
    2608:	69 00 37    	bra       0x26dc <.L33>

0000260a <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    260a:	b0 c1 b3    	mov.b     #0x1b, w0
    260c:	86 ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    260e:	70 c3 b3    	mov.b     #0x37, w0
    2610:	84 ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    2612:	7a ff 07    	rcall     0x2508 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    2614:	ae 00 90    	mov.w     [w14+4], w1
    2616:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    2618:	be 00 90    	mov.w     [w14+6], w1
    261a:	01 0f 78    	mov.w     w1, [w14]
    261c:	03 00 37    	bra       0x2624 <.L45>

0000261e <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    261e:	00 00 00    	nop       
    2620:	01 00 37    	bra       0x2624 <.L45>

00002622 <.L48>:
    2622:	00 00 00    	nop       

00002624 <.L45>:
    2624:	9a ff 07    	rcall     0x255a <_U1_getc> <.LFB6> <.LFE5>
    2626:	ae 00 90    	mov.w     [w14+4], w1
    2628:	80 48 78    	mov.b     w0, [w1]
    262a:	2e 00 90    	mov.w     [w14+4], w0
    262c:	10 40 78    	mov.b     [w0], w0
    262e:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2630:	09 00 3a    	bra       NZ, 0x2644 <.L37>
    *str = '\0';                            // terminarte the string with null
    2632:	2e 00 90    	mov.w     [w14+4], w0
    2634:	80 40 eb    	clr.b     w1
    2636:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    2638:	a0 c0 b3    	mov.b     #0xa, w0
    263a:	6f ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    263c:	d0 c0 b3    	mov.b     #0xd, w0
    263e:	6d ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    2640:	63 ff 07    	rcall     0x2508 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2642:	4c 00 37    	bra       0x26dc <.L33>

00002644 <.L37>:
    2644:	2e 00 90    	mov.w     [w14+4], w0
    2646:	10 40 78    	mov.b     [w0], w0
    2648:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    264a:	10 00 3a    	bra       NZ, 0x266c <.L38>
    264c:	b0 c1 b3    	mov.b     #0x1b, w0
    264e:	65 ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    2650:	80 c3 b3    	mov.b     #0x38, w0
    2652:	63 ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    2654:	b0 c1 b3    	mov.b     #0x1b, w0
    2656:	61 ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    2658:	b0 c5 b3    	mov.b     #0x5b, w0
    265a:	5f ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    265c:	b0 c4 b3    	mov.b     #0x4b, w0
    265e:	5d ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    2660:	53 ff 07    	rcall     0x2508 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2662:	9e 00 90    	mov.w     [w14+2], w1
    2664:	21 07 98    	mov.w     w1, [w14+4]
    2666:	be 00 90    	mov.w     [w14+6], w1
    2668:	01 0f 78    	mov.w     w1, [w14]
    266a:	36 00 37    	bra       0x26d8 <.L39>

0000266c <.L38>:
    266c:	2e 00 90    	mov.w     [w14+4], w0
    266e:	10 40 78    	mov.b     [w0], w0
    2670:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2672:	05 00 32    	bra       Z, 0x267e <.L40>
    2674:	2e 00 90    	mov.w     [w14+4], w0
    2676:	90 40 78    	mov.b     [w0], w1
    2678:	f0 c7 b3    	mov.b     #0x7f, w0
    267a:	80 cf 50    	sub.b     w1, w0, [w15]
    267c:	14 00 3a    	bra       NZ, 0x26a6 <.L41>

0000267e <.L40>:
    267e:	ae 00 90    	mov.w     [w14+4], w1
    2680:	1e 00 90    	mov.w     [w14+2], w0
    2682:	80 8f 50    	sub.w     w1, w0, [w15]
    2684:	0c 00 36    	bra       LEU, 0x269e <.L42>
    2686:	80 c0 b3    	mov.b     #0x8, w0
    2688:	48 ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    268a:	00 c2 b3    	mov.b     #0x20, w0
    268c:	46 ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    268e:	80 c0 b3    	mov.b     #0x8, w0
    2690:	44 ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    2692:	3a ff 07    	rcall     0x2508 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2694:	2e 00 90    	mov.w     [w14+4], w0
    2696:	00 00 e9    	dec.w     w0, w0
    2698:	20 07 98    	mov.w     w0, [w14+4]
    269a:	1e 0f e8    	inc.w     [w14], [w14]
    269c:	03 00 37    	bra       0x26a4 <.L43>

0000269e <.L42>:
    269e:	70 c0 b3    	mov.b     #0x7, w0
    26a0:	3c ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    26a2:	32 ff 07    	rcall     0x2508 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

000026a4 <.L43>:
    26a4:	19 00 37    	bra       0x26d8 <.L39>

000026a6 <.L41>:
    26a6:	1e 00 78    	mov.w     [w14], w0
    26a8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    26aa:	04 00 3a    	bra       NZ, 0x26b4 <.L44>
    26ac:	70 c0 b3    	mov.b     #0x7, w0
    26ae:	35 ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    26b0:	2b ff 07    	rcall     0x2508 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    26b2:	12 00 37    	bra       0x26d8 <.L39>

000026b4 <.L44>:
    26b4:	2e 00 90    	mov.w     [w14+4], w0
    26b6:	10 40 78    	mov.b     [w0], w0
    26b8:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    26ba:	b1 ff 36    	bra       LEU, 0x261e <.L47>
    26bc:	2e 00 90    	mov.w     [w14+4], w0
    26be:	90 40 78    	mov.b     [w0], w1
    26c0:	e0 c7 b3    	mov.b     #0x7e, w0
    26c2:	80 cf 50    	sub.b     w1, w0, [w15]
    26c4:	ae ff 3e    	bra       GTU, 0x2622 <.L48>
    26c6:	2e 00 90    	mov.w     [w14+4], w0
    26c8:	10 40 78    	mov.b     [w0], w0
    26ca:	27 ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    26cc:	1d ff 07    	rcall     0x2508 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    26ce:	2e 00 90    	mov.w     [w14+4], w0
    26d0:	00 00 e8    	inc.w     w0, w0
    26d2:	20 07 98    	mov.w     w0, [w14+4]
    26d4:	1e 0f e9    	dec.w     [w14], [w14]
    26d6:	a6 ff 37    	bra       0x2624 <.L45>

000026d8 <.L39>:
    26d8:	a5 ff 37    	bra       0x2624 <.L45>

000026da <.L46>:
    26da:	00 00 00    	nop       

000026dc <.L33>:
}
    26dc:	00 80 fa    	ulnk      
    26de:	00 00 06    	return    

000026e0 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    26e0:	08 00 fa    	lnk       #0x8
    26e2:	10 07 98    	mov.w     w0, [w14+2]
    26e4:	21 07 98    	mov.w     w1, [w14+4]
    26e6:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    26e8:	1e 00 90    	mov.w     [w14+2], w0
    26ea:	60 00 40    	add.w     w0, #0x0, w0
    26ec:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    26ee:	10 00 3e    	bra       GTU, 0x2710 <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    26f0:	00 00 eb    	clr.w     w0
    26f2:	00 0f 78    	mov.w     w0, [w14]
    26f4:	07 00 37    	bra       0x2704 <.L52>

000026f6 <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    26f6:	2e 00 90    	mov.w     [w14+4], w0
    26f8:	10 40 78    	mov.b     [w0], w0
    26fa:	ae 00 90    	mov.w     [w14+4], w1
    26fc:	81 00 e8    	inc.w     w1, w1
    26fe:	21 07 98    	mov.w     w1, [w14+4]
    2700:	0c ff 07    	rcall     0x251a <_U1_putc> <.LFB5> <.LFE4>
    2702:	1e 0f e8    	inc.w     [w14], [w14]

00002704 <.L52>:
    2704:	9e 00 78    	mov.w     [w14], w1
    2706:	3e 00 90    	mov.w     [w14+6], w0
    2708:	80 8f 50    	sub.w     w1, w0, [w15]
    270a:	f5 ff 39    	bra       NC, 0x26f6 <.L53>
            U1_flush_tx_buffer();
    270c:	fd fe 07    	rcall     0x2508 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    270e:	01 00 37    	bra       0x2712 <.L54>

00002710 <.L55>:
        default:
            break;
    2710:	00 00 00    	nop       

00002712 <.L54>:
    }
    return len;
    2712:	3e 00 90    	mov.w     [w14+6], w0
}
    2714:	00 80 fa    	ulnk      
    2716:	00 00 06    	return    
Disassembly of section .isr.text:

00002718 <__SI2C2Interrupt>:
    2718:	80 9f be    	mov.d     w0, [w15++]
    271a:	32 00 f8    	push      0x32
    271c:	34 00 f8    	push      0x34
    271e:	10 00 20    	mov.w     #0x1, w0
    2720:	a0 01 88    	mov.w     w0, 0x34
    2722:	00 20 20    	mov.w     #0x200, w0
    2724:	90 01 88    	mov.w     w0, 0x32
    2726:	02 00 fa    	lnk       #0x2
    2728:	8a 20 a9    	bclr.b    0x8a, #0x1
    272a:	00 41 80    	mov.w     0x820, w0
    272c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    272e:	23 00 32    	bra       Z, 0x2776 <.L4>
    2730:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2732:	03 00 39    	bra       NC, 0x273a <.L3>
    2734:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2736:	62 00 32    	bra       Z, 0x27fc <.L5>
    2738:	63 00 37    	bra       0x2800 <.L19>

0000273a <.L3>:
    273a:	80 10 80    	mov.w     0x210, w0
    273c:	00 4f 78    	mov.b     w0, [w14]
    273e:	c0 10 80    	mov.w     0x218, w0
    2740:	64 00 60    	and.w     w0, #0x4, w0
    2742:	00 00 e0    	cp0.w     w0
    2744:	15 00 32    	bra       Z, 0x2770 <.L6>
    2746:	1a c8 bf    	mov.b     0x81a, WREG
    2748:	00 80 fb    	ze        w0, w0
    274a:	47 00 dd    	sl.w      w0, #0x7, w0
    274c:	80 40 78    	mov.b     w0, w1
    274e:	1b c8 bf    	mov.b     0x81b, WREG
    2750:	00 80 fb    	ze        w0, w0
    2752:	67 00 60    	and.w     w0, #0x7, w0
    2754:	44 00 dd    	sl.w      w0, #0x4, w0
    2756:	00 40 78    	mov.b     w0, w0
    2758:	80 c0 70    	ior.b     w1, w0, w1
    275a:	1c c8 bf    	mov.b     0x81c, WREG
    275c:	6f 40 60    	and.b     w0, #0xf, w0
    275e:	00 c0 70    	ior.b     w1, w0, w0
    2760:	14 e8 b7    	mov.b     WREG, 0x814
    2762:	14 c8 bf    	mov.b     0x814, WREG
    2764:	00 80 fb    	ze        w0, w0
    2766:	90 10 88    	mov.w     w0, 0x212
    2768:	17 82 a8    	bset.b    0x217, #0x4
    276a:	20 00 20    	mov.w     #0x2, w0
    276c:	00 41 88    	mov.w     w0, 0x820
    276e:	49 00 37    	bra       0x2802 <.L1>

00002770 <.L6>:
    2770:	10 00 20    	mov.w     #0x1, w0
    2772:	00 41 88    	mov.w     w0, 0x820
    2774:	46 00 37    	bra       0x2802 <.L1>

00002776 <.L4>:
    2776:	80 10 80    	mov.w     0x210, w0
    2778:	00 40 78    	mov.b     w0, w0
    277a:	15 e8 b7    	mov.b     WREG, 0x815
    277c:	15 c8 bf    	mov.b     0x815, WREG
    277e:	00 80 fb    	ze        w0, w0
    2780:	45 00 de    	lsr.w     w0, #0x5, w0
    2782:	00 40 78    	mov.b     w0, w0
    2784:	00 80 fb    	ze        w0, w0
    2786:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    2788:	11 00 32    	bra       Z, 0x27ac <.L13>
    278a:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    278c:	07 00 3c    	bra       GT, 0x279c <.L17>
    278e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2790:	2b 00 32    	bra       Z, 0x27e8 <.L11>
    2792:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2794:	0f 00 3c    	bra       GT, 0x27b4 <.L12>
    2796:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2798:	24 00 32    	bra       Z, 0x27e2 <.L10>
    279a:	29 00 37    	bra       0x27ee <.L9>

0000279c <.L17>:
    279c:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    279e:	1a 00 32    	bra       Z, 0x27d4 <.L15>
    27a0:	11 10 20    	mov.w     #0x101, w1
    27a2:	81 0f 50    	sub.w     w0, w1, [w15]
    27a4:	28 00 32    	bra       Z, 0x27f6 <.L20>
    27a6:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    27a8:	19 00 32    	bra       Z, 0x27dc <.L14>
    27aa:	21 00 37    	bra       0x27ee <.L9>

000027ac <.L13>:
    27ac:	15 c8 bf    	mov.b     0x815, WREG
    27ae:	7f 40 60    	and.b     w0, #0x1f, w0
    27b0:	16 e8 b7    	mov.b     WREG, 0x816
    27b2:	22 00 37    	bra       0x27f8 <.L18>

000027b4 <.L12>:
    27b4:	15 c8 bf    	mov.b     0x815, WREG
    27b6:	00 80 fb    	ze        w0, w0
    27b8:	64 00 60    	and.w     w0, #0x4, w0
    27ba:	42 80 de    	asr.w     w0, #0x2, w0
    27bc:	00 40 78    	mov.b     w0, w0
    27be:	17 e8 b7    	mov.b     WREG, 0x817
    27c0:	15 c8 bf    	mov.b     0x815, WREG
    27c2:	00 80 fb    	ze        w0, w0
    27c4:	62 00 60    	and.w     w0, #0x2, w0
    27c6:	00 80 d1    	asr.w     w0, w0
    27c8:	00 40 78    	mov.b     w0, w0
    27ca:	18 e8 b7    	mov.b     WREG, 0x818
    27cc:	15 c8 bf    	mov.b     0x815, WREG
    27ce:	61 40 60    	and.b     w0, #0x1, w0
    27d0:	19 e8 b7    	mov.b     WREG, 0x819
    27d2:	12 00 37    	bra       0x27f8 <.L18>

000027d4 <.L15>:
    27d4:	15 c8 bf    	mov.b     0x815, WREG
    27d6:	7f 40 60    	and.b     w0, #0x1f, w0
    27d8:	1b e8 b7    	mov.b     WREG, 0x81b
    27da:	0e 00 37    	bra       0x27f8 <.L18>

000027dc <.L14>:
    27dc:	10 c0 b3    	mov.b     #0x1, w0
    27de:	1d e8 b7    	mov.b     WREG, 0x81d
    27e0:	0b 00 37    	bra       0x27f8 <.L18>

000027e2 <.L10>:
    27e2:	10 c0 b3    	mov.b     #0x1, w0
    27e4:	1e e8 b7    	mov.b     WREG, 0x81e
    27e6:	08 00 37    	bra       0x27f8 <.L18>

000027e8 <.L11>:
    27e8:	10 c0 b3    	mov.b     #0x1, w0
    27ea:	1f e8 b7    	mov.b     WREG, 0x81f
    27ec:	05 00 37    	bra       0x27f8 <.L18>

000027ee <.L9>:
    27ee:	1c c8 bf    	mov.b     0x81c, WREG
    27f0:	00 40 e8    	inc.b     w0, w0
    27f2:	1c e8 b7    	mov.b     WREG, 0x81c
    27f4:	01 00 37    	bra       0x27f8 <.L18>

000027f6 <.L20>:
    27f6:	00 00 00    	nop       

000027f8 <.L18>:
    27f8:	20 28 ef    	clr.w     0x820
    27fa:	03 00 37    	bra       0x2802 <.L1>

000027fc <.L5>:
    27fc:	20 28 ef    	clr.w     0x820
    27fe:	01 00 37    	bra       0x2802 <.L1>

00002800 <.L19>:
    2800:	20 28 ef    	clr.w     0x820

00002802 <.L1>:
    2802:	00 80 fa    	ulnk      
    2804:	34 00 f9    	pop       0x34
    2806:	32 00 f9    	pop       0x32
    2808:	4f 00 be    	mov.d     [--w15], w0
    280a:	00 40 06    	retfie    

0000280c <__U1TXInterrupt>:
    280c:	80 9f be    	mov.d     w0, [w15++]
    280e:	32 00 f8    	push      0x32
    2810:	34 00 f8    	push      0x34
    2812:	10 00 20    	mov.w     #0x1, w0
    2814:	a0 01 88    	mov.w     w0, 0x34
    2816:	00 20 20    	mov.w     #0x200, w0
    2818:	90 01 88    	mov.w     w0, 0x32
    281a:	02 00 fa    	lnk       #0x2
    281c:	85 80 a9    	bclr.b    0x85, #0x4
    281e:	70 41 80    	mov.w     0x82e, w0
    2820:	00 00 e0    	cp0.w     w0
    2822:	17 00 3a    	bra       NZ, 0x2852 <.L8>
    2824:	23 42 a9    	bclr.b    0x223, #0x2
    2826:	16 00 37    	bra       0x2854 <.L4>

00002828 <.L7>:
    2828:	ff 3f fc    	disi      #0x3fff
    282a:	31 41 80    	mov.w     0x826, w1
    282c:	50 41 80    	mov.w     0x82a, w0
    282e:	00 80 40    	add.w     w1, w0, w0
    2830:	10 4f 78    	mov.b     [w0], [w14]
    2832:	50 41 80    	mov.w     0x82a, w0
    2834:	00 00 e8    	inc.w     w0, w0
    2836:	50 41 88    	mov.w     w0, 0x82a
    2838:	51 41 80    	mov.w     0x82a, w1
    283a:	40 41 80    	mov.w     0x828, w0
    283c:	80 8f 50    	sub.w     w1, w0, [w15]
    283e:	02 00 3a    	bra       NZ, 0x2844 <.L5>
    2840:	00 00 eb    	clr.w     w0
    2842:	50 41 88    	mov.w     w0, 0x82a

00002844 <.L5>:
    2844:	70 41 80    	mov.w     0x82e, w0
    2846:	00 00 e9    	dec.w     w0, w0
    2848:	70 41 88    	mov.w     w0, 0x82e
    284a:	52 20 ef    	clr.w     0x52
    284c:	1e 80 fb    	ze        [w14], w0
    284e:	20 11 88    	mov.w     w0, 0x224
    2850:	01 00 37    	bra       0x2854 <.L4>

00002852 <.L8>:
    2852:	00 00 00    	nop       

00002854 <.L4>:
    2854:	11 11 80    	mov.w     0x222, w1
    2856:	00 20 20    	mov.w     #0x200, w0
    2858:	00 80 60    	and.w     w1, w0, w0
    285a:	00 00 e0    	cp0.w     w0
    285c:	03 00 3a    	bra       NZ, 0x2864 <.L2>
    285e:	70 41 80    	mov.w     0x82e, w0
    2860:	00 00 e0    	cp0.w     w0
    2862:	e2 ff 3a    	bra       NZ, 0x2828 <.L7>

00002864 <.L2>:
    2864:	00 80 fa    	ulnk      
    2866:	34 00 f9    	pop       0x34
    2868:	32 00 f9    	pop       0x32
    286a:	4f 00 be    	mov.d     [--w15], w0
    286c:	00 40 06    	retfie    

0000286e <__U1RXInterrupt>:
    286e:	80 9f be    	mov.d     w0, [w15++]
    2870:	32 00 f8    	push      0x32
    2872:	34 00 f8    	push      0x34
    2874:	10 00 20    	mov.w     #0x1, w0
    2876:	a0 01 88    	mov.w     w0, 0x34
    2878:	00 20 20    	mov.w     #0x200, w0
    287a:	90 01 88    	mov.w     w0, 0x32
    287c:	00 00 fa    	lnk       #0x0
    287e:	85 60 a9    	bclr.b    0x85, #0x3
    2880:	14 00 37    	bra       0x28aa <.L10>

00002882 <.L13>:
    2882:	ff 3f fc    	disi      #0x3fff
    2884:	81 41 80    	mov.w     0x830, w1
    2886:	b0 41 80    	mov.w     0x836, w0
    2888:	00 80 40    	add.w     w1, w0, w0
    288a:	31 11 80    	mov.w     0x226, w1
    288c:	81 40 78    	mov.b     w1, w1
    288e:	01 48 78    	mov.b     w1, [w0]
    2890:	b0 41 80    	mov.w     0x836, w0
    2892:	00 00 e8    	inc.w     w0, w0
    2894:	b0 41 88    	mov.w     w0, 0x836
    2896:	b1 41 80    	mov.w     0x836, w1
    2898:	90 41 80    	mov.w     0x832, w0
    289a:	80 8f 50    	sub.w     w1, w0, [w15]
    289c:	02 00 3a    	bra       NZ, 0x28a2 <.L11>
    289e:	00 00 eb    	clr.w     w0
    28a0:	b0 41 88    	mov.w     w0, 0x836

000028a2 <.L11>:
    28a2:	c0 41 80    	mov.w     0x838, w0
    28a4:	00 00 e8    	inc.w     w0, w0
    28a6:	c0 41 88    	mov.w     w0, 0x838
    28a8:	52 20 ef    	clr.w     0x52

000028aa <.L10>:
    28aa:	10 11 80    	mov.w     0x222, w0
    28ac:	61 00 60    	and.w     w0, #0x1, w0
    28ae:	00 00 e0    	cp0.w     w0
    28b0:	04 00 32    	bra       Z, 0x28ba <.L9>
    28b2:	c1 41 80    	mov.w     0x838, w1
    28b4:	90 41 80    	mov.w     0x832, w0
    28b6:	80 8f 50    	sub.w     w1, w0, [w15]
    28b8:	e4 ff 3a    	bra       NZ, 0x2882 <.L13>

000028ba <.L9>:
    28ba:	00 80 fa    	ulnk      
    28bc:	34 00 f9    	pop       0x34
    28be:	32 00 f9    	pop       0x32
    28c0:	4f 00 be    	mov.d     [--w15], w0
    28c2:	00 40 06    	retfie    
Disassembly of section .text:

000028c4 <_init_elecanisms>:
#include "elecanisms.h"

uint16_t rand_val;

void init_elecanisms(void) {
    28c4:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2),
    28c6:	00 10 20    	mov.w     #0x100, w0
    28c8:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    28ca:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    28cc:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    28ce:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    28d0:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    28d2:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    28d4:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    28d6:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    28d8:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    28da:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    28dc:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    28de:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    28e0:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    28e2:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    28e4:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    28e6:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    28e8:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    28ea:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    28ec:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    28ee:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    28f0:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    28f2:	f0 03 20    	mov.w     #0x3f, w0
    28f4:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    28f6:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    28f8:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    28fa:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    28fc:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module:
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0;
    28fe:	00 0e 20    	mov.w     #0xe0, w0
    2900:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    2902:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    2904:	00 c4 20    	mov.w     #0xc40, w0
    2906:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    2908:	50 00 20    	mov.w     #0x5, w0
    290a:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    290c:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    290e:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    2910:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    2912:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2914:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    2916:	e8 22 a9    	bclr.b    0x2e8, #0x1
    2918:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    291a:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    291c:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    291e:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    2920:	00 80 fa    	ulnk      
    2922:	00 00 06    	return    

00002924 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    2924:	02 00 fa    	lnk       #0x2
    2926:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    2928:	9e 00 78    	mov.w     [w14], w1
    292a:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    292c:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    292e:	00 00 00    	nop       

00002930 <.L3>:
    2930:	00 19 80    	mov.w     0x320, w0
    2932:	61 00 60    	and.w     w0, #0x1, w0
    2934:	00 00 e0    	cp0.w     w0
    2936:	fc ff 32    	bra       Z, 0x2930 <.L3>
    return ADC1BUF0;
    2938:	00 18 80    	mov.w     0x300, w0
}
    293a:	00 80 fa    	ulnk      
    293c:	00 00 06    	return    

0000293e <_rand_next>:

void rand_next(void) {
    293e:	02 00 fa    	lnk       #0x2
    uint16_t val;

    // See "A List of Maximum Period NLFSRs" by Elena Dubrova, p. 7
    val = (rand_val ^ (rand_val >> 2) ^ (rand_val >> 13) ^ ((rand_val >> 2) & (rand_val >> 3))) & 1;
    2940:	20 41 80    	mov.w     0x824, w0
    2942:	c2 00 de    	lsr.w     w0, #0x2, w1
    2944:	20 41 80    	mov.w     0x824, w0
    2946:	80 80 68    	xor.w     w1, w0, w1
    2948:	20 41 80    	mov.w     0x824, w0
    294a:	4d 00 de    	lsr.w     w0, #0xd, w0
    294c:	80 80 68    	xor.w     w1, w0, w1
    294e:	20 41 80    	mov.w     0x824, w0
    2950:	42 01 de    	lsr.w     w0, #0x2, w2
    2952:	20 41 80    	mov.w     0x824, w0
    2954:	43 00 de    	lsr.w     w0, #0x3, w0
    2956:	00 00 61    	and.w     w2, w0, w0
    2958:	00 80 68    	xor.w     w1, w0, w0
    295a:	61 0f 60    	and.w     w0, #0x1, [w14]
    rand_val = (rand_val >> 1) | (val << 15);
    295c:	20 41 80    	mov.w     0x824, w0
    295e:	80 00 d1    	lsr.w     w0, w1
    2960:	1e 00 78    	mov.w     [w14], w0
    2962:	4f 00 dd    	sl.w      w0, #0xf, w0
    2964:	01 00 70    	ior.w     w0, w1, w0
    2966:	20 41 88    	mov.w     w0, 0x824
}
    2968:	00 80 fa    	ulnk      
    296a:	00 00 06    	return    
Disassembly of section .isr.text:

0000296c <__T1Interrupt>:
    296c:	36 00 f8    	push      0x36
    296e:	80 9f be    	mov.d     w0, [w15++]
    2970:	82 9f be    	mov.d     w2, [w15++]
    2972:	84 9f be    	mov.d     w4, [w15++]
    2974:	86 9f be    	mov.d     w6, [w15++]
    2976:	32 00 f8    	push      0x32
    2978:	34 00 f8    	push      0x34
    297a:	10 00 20    	mov.w     #0x1, w0
    297c:	a0 01 88    	mov.w     w0, 0x34
    297e:	00 20 20    	mov.w     #0x200, w0
    2980:	90 01 88    	mov.w     w0, 0x32
    2982:	00 00 fa    	lnk       #0x0
    2984:	84 60 a9    	bclr.b    0x84, #0x3
    2986:	40 40 80    	mov.w     0x808, w0
    2988:	50 40 88    	mov.w     w0, 0x80a
    298a:	50 00 20    	mov.w     #0x5, w0
    298c:	cb ff 07    	rcall     0x2924 <_read_analog> <.LFB1> <.LFE0>
    298e:	45 00 de    	lsr.w     w0, #0x5, w0
    2990:	40 40 88    	mov.w     w0, 0x808
    2992:	41 40 80    	mov.w     0x808, w1
    2994:	50 40 80    	mov.w     0x80a, w0
    2996:	80 8f 50    	sub.w     w1, w0, [w15]
    2998:	02 00 3a    	bra       NZ, 0x299e <.L2>
    299a:	40 40 80    	mov.w     0x808, w0
    299c:	60 40 88    	mov.w     w0, 0x80c

0000299e <.L2>:
    299e:	06 c8 bf    	mov.b     0x806, WREG
    29a0:	80 80 fb    	ze        w0, w1
    29a2:	60 40 80    	mov.w     0x80c, w0
    29a4:	80 8f 50    	sub.w     w1, w0, [w15]
    29a6:	05 00 32    	bra       Z, 0x29b2 <.L1>
    29a8:	06 c8 bf    	mov.b     0x806, WREG
    29aa:	07 e8 b7    	mov.b     WREG, 0x807
    29ac:	60 40 80    	mov.w     0x80c, w0
    29ae:	00 40 78    	mov.b     w0, w0
    29b0:	06 e8 b7    	mov.b     WREG, 0x806

000029b2 <.L1>:
    29b2:	00 80 fa    	ulnk      
    29b4:	34 00 f9    	pop       0x34
    29b6:	32 00 f9    	pop       0x32
    29b8:	4f 03 be    	mov.d     [--w15], w6
    29ba:	4f 02 be    	mov.d     [--w15], w4
    29bc:	4f 01 be    	mov.d     [--w15], w2
    29be:	4f 00 be    	mov.d     [--w15], w0
    29c0:	36 00 f9    	pop       0x36
    29c2:	00 40 06    	retfie    
Disassembly of section .dinit:

000029c4 <.dinit>:
    29c4:	3a 10 00    	nop       
    29c6:	14 00 00    	nop       
    29c8:	80 00 00    	nop       
    29ca:	00 08 00    	nop       
    29cc:	14 00 00    	nop       
    29ce:	80 00 00    	nop       
    29d0:	14 08 00    	nop       
    29d2:	0e 00 00    	nop       
    29d4:	80 00 00    	nop       
    29d6:	26 08 00    	nop       
    29d8:	14 08 00    	nop       
    29da:	80 00 00    	nop       
    29dc:	22 08 00    	nop       
    29de:	02 00 00    	nop       
    29e0:	80 00 00    	nop       
    29e2:	24 08 00    	nop       
    29e4:	02 00 00    	nop       
    29e6:	80 00 00    	nop       
    29e8:	00 00 00    	nop       
Disassembly of section .isr:

000029ea <__DefaultInterrupt>:
    29ea:	00 40 da    	break     
    29ec:	00 00 fe    	reset     
