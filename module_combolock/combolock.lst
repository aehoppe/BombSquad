
combolock.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	fa 28 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	fa 28 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	fa 28 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	fa 28 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	fa 28 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	fa 28 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	fa 28 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	fa 28 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	fa 28 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	fa 28 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	fa 28 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	fa 28 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	fa 28 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	fa 28 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	fa 28 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	fa 28 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	fa 28 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	fa 28 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	fa 28 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	fa 28 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	fa 28 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	fa 28 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	fa 28 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	fa 28 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	fa 28 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	fa 28 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	fa 28 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	fa 28 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	fa 28 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	fa 28 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	fa 28 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	fa 28 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	fa 28 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	fa 28 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	fa 28 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	fa 28 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	fa 28 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	fa 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	fa 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	fa 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	fa 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	fa 28 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	fa 28 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	fa 28 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	fa 28 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	fa 28 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	fa 28 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	fa 28 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	fa 28 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	fa 28 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	fa 28 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	fa 28 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	fa 28 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	fa 28 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	fa 28 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	fa 28 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	fa 28 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	fa 28 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	fa 28 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	fa 28 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	fa 28 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	fa 28 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	fa 28 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	fa 28 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	fa 28 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	fa 28 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	fa 28 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	fa 28 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	fa 28 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	fa 28 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	af 04 21    	mov.w     #0x104a, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	87 00 07    	rcall     0x1234 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	a0 8d 22    	mov.w     #0x28da, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	aa 20 02    	call      0x20aa <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	20 12 20    	mov.w     #0x122, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	40 22 04    	goto      0x2240 <_setup>
    1216:	00 00 00 
    1218:	68 21 04    	goto      0x2168 <_secondnum>
    121a:	00 00 00 
    121c:	ea 21 04    	goto      0x21ea <_thirdnum>
    121e:	00 00 00 
    1220:	ec 20 04    	goto      0x20ec <_firstnum>
    1222:	00 00 00 
    1224:	c4 22 04    	goto      0x22c4 <_solved>
    1226:	00 00 00 
    1228:	7c 22 04    	goto      0x227c <_run>
    122a:	00 00 00 
    122c:	fe 22 04    	goto      0x22fe <_end_win>
    122e:	00 00 00 
    1230:	26 23 04    	goto      0x2326 <_end_fail>
    1232:	00 00 00 

00001234 <__crt_start_mode>:
    1234:	00 00 05    	retlw.w   #0x0, w0

00001236 <___subsf3>:
    1236:	03 f0 a2    	btg.w     w3, #0xf

00001238 <___addsf3>:
    1238:	88 9f be    	mov.d     w8, [w15++]
    123a:	8a 9f be    	mov.d     w10, [w15++]
    123c:	8c 1f 78    	mov.w     w12, [w15++]
    123e:	f6 00 07    	rcall     0x142c <__funpack2>
    1240:	fd 00 33    	bra       N, 0x143c <__fPropagateNaN>
    1242:	64 50 e1    	cp.w      w10, #0x4
    1244:	4f 00 32    	bra       Z, 0x12e4 <aisinfinite>

00001246 <checkspecialb>:
    1246:	64 20 e1    	cp.w      w4, #0x4
    1248:	52 00 32    	bra       Z, 0x12ee <return2>
    124a:	03 82 6c    	xor.w     w9, w3, w4
    124c:	07 00 3b    	bra       NN, 0x125c <getsign>
    124e:	09 05 d0    	sl.w      w9, w10
    1250:	03 06 d0    	sl.w      w3, w12
    1252:	82 0f 54    	sub.w     w8, w2, [w15]
    1254:	0c 06 5d    	subb.w    w10, w12, w12
    1256:	02 00 39    	bra       NC, 0x125c <getsign>
    1258:	02 00 32    	bra       Z, 0x125e <gotsign>
    125a:	89 01 78    	mov.w     w9, w3

0000125c <getsign>:
    125c:	03 06 78    	mov.w     w3, w12

0000125e <gotsign>:
    125e:	85 82 55    	sub.w     w11, w5, w5
    1260:	04 00 3d    	bra       GE, 0x126a <expcanonical>
    1262:	00 03 fd    	exch      w0, w6
    1264:	81 03 fd    	exch      w1, w7
    1266:	85 02 ea    	neg.w     w5, w5
    1268:	8b 85 42    	add.w     w5, w11, w11

0000126a <expcanonical>:
    126a:	84 0f 72    	ior.w     w4, w4, [w15]
    126c:	02 00 3b    	bra       NN, 0x1272 <nonegate>
    126e:	60 00 10    	subr.w    w0, #0x0, w0
    1270:	e0 80 18    	subbr.w   w1, #0x0, w1

00001272 <nonegate>:
    1272:	60 11 b8    	mul.uu    w2, #0x0, w2
    1274:	00 05 eb    	clr.w     w10
    1276:	7a 28 e1    	cp.w      w5, #0x1a
    1278:	0a 00 39    	bra       NC, 0x128e <aligniter>
    127a:	06 00 78    	mov.w     w6, w0
    127c:	c7 5d dd    	sl.w      w11, #0x7, w11
    127e:	f7 07 b2    	and.w     #0x7f, w7
    1280:	87 80 75    	ior.w     w11, w7, w1
    1282:	2d 00 37    	bra       0x12de <signoff>

00001284 <align>:
    1284:	82 81 71    	ior.w     w3, w2, w3
    1286:	0a 01 78    	mov.w     w10, w2
    1288:	61 05 60    	and.w     w0, #0x1, w10
    128a:	81 80 d1    	asr.w     w1, w1
    128c:	00 80 d3    	rrc.w     w0, w0

0000128e <aligniter>:
    128e:	85 02 e9    	dec.w     w5, w5
    1290:	f9 ff 3b    	bra       NN, 0x1284 <align>

00001292 <aligned>:
    1292:	06 04 40    	add.w     w0, w6, w8
    1294:	87 84 48    	addc.w    w1, w7, w9
    1296:	02 00 3b    	bra       NN, 0x129c <normalizesum>
    1298:	60 04 14    	subr.w    w8, #0x0, w8
    129a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000129c <normalizesum>:
    129c:	09 88 a3    	btst.z    w9, #0x8
    129e:	07 00 32    	bra       Z, 0x12ae <checknormal>
    12a0:	8a 81 71    	ior.w     w3, w10, w3
    12a2:	82 81 71    	ior.w     w3, w2, w3
    12a4:	61 01 64    	and.w     w8, #0x1, w2
    12a6:	89 04 d1    	lsr.w     w9, w9
    12a8:	08 84 d3    	rrc.w     w8, w8
    12aa:	8b 05 e8    	inc.w     w11, w11
    12ac:	17 00 37    	bra       0x12dc <round>

000012ae <checknormal>:
    12ae:	09 78 a3    	btst.z    w9, #0x7
    12b0:	13 00 3a    	bra       NZ, 0x12d8 <discardguard>

000012b2 <underflow>:
    12b2:	0b 00 e0    	cp0.w     w11
    12b4:	13 00 34    	bra       LE, 0x12dc <round>
    12b6:	8b 05 e9    	dec.w     w11, w11
    12b8:	08 04 44    	add.w     w8, w8, w8
    12ba:	89 84 4c    	addc.w    w9, w9, w9
    12bc:	0a 44 74    	ior.b     w8, w10, w8
    12be:	09 78 a3    	btst.z    w9, #0x7
    12c0:	0d 00 3a    	bra       NZ, 0x12dc <round>

000012c2 <normalizeloop>:
    12c2:	0b 00 e0    	cp0.w     w11
    12c4:	07 00 34    	bra       LE, 0x12d4 <normalizeexit>
    12c6:	8b 05 e9    	dec.w     w11, w11
    12c8:	08 04 44    	add.w     w8, w8, w8
    12ca:	89 84 4c    	addc.w    w9, w9, w9
    12cc:	01 00 3a    	bra       NZ, 0x12d0 <normalizetest>
    12ce:	0b 00 20    	mov.w     #0x0, w11

000012d0 <normalizetest>:
    12d0:	09 78 a3    	btst.z    w9, #0x7
    12d2:	f7 ff 32    	bra       Z, 0x12c2 <normalizeloop>

000012d4 <normalizeexit>:
    12d4:	00 01 eb    	clr.w     w2
    12d6:	02 00 37    	bra       0x12dc <round>

000012d8 <discardguard>:
    12d8:	82 81 71    	ior.w     w3, w2, w3
    12da:	0a 01 78    	mov.w     w10, w2

000012dc <round>:
    12dc:	6c 00 07    	rcall     0x13b6 <__fpack>

000012de <signoff>:
    12de:	0c f0 a7    	btsc.w    w12, #0xf
    12e0:	01 f0 a0    	bset.w    w1, #0xf
    12e2:	b5 00 37    	bra       0x144e <__fbopExit>

000012e4 <aisinfinite>:
    12e4:	64 20 e1    	cp.w      w4, #0x4
    12e6:	02 00 3a    	bra       NZ, 0x12ec <return8>
    12e8:	83 8f 6c    	xor.w     w9, w3, [w15]
    12ea:	b5 00 33    	bra       N, 0x1456 <__fbopReturnNaN>

000012ec <return8>:
    12ec:	08 01 be    	mov.d     w8, w2

000012ee <return2>:
    12ee:	02 00 be    	mov.d     w2, w0
    12f0:	ae 00 37    	bra       0x144e <__fbopExit>

000012f2 <___divsf3>:
    12f2:	88 9f be    	mov.d     w8, [w15++]
    12f4:	8a 9f be    	mov.d     w10, [w15++]
    12f6:	8c 1f 78    	mov.w     w12, [w15++]
    12f8:	99 00 07    	rcall     0x142c <__funpack2>
    12fa:	a0 00 33    	bra       N, 0x143c <__fPropagateNaN>
    12fc:	03 86 6c    	xor.w     w9, w3, w12
    12fe:	64 50 e1    	cp.w      w10, #0x4
    1300:	2e 00 32    	bra       Z, 0x135e <aisinfinite>
    1302:	64 20 e1    	cp.w      w4, #0x4
    1304:	33 00 32    	bra       Z, 0x136c <returnZero>
    1306:	61 50 e1    	cp.w      w10, #0x1
    1308:	2f 00 32    	bra       Z, 0x1368 <aiszero>
    130a:	61 20 e1    	cp.w      w4, #0x1
    130c:	31 00 32    	bra       Z, 0x1370 <returnInf>

0000130e <finitenonzero>:
    130e:	85 85 55    	sub.w     w11, w5, w11
    1310:	eb 07 b0    	add.w     #0x7e, w11
    1312:	09 00 20    	mov.w     #0x0, w9
    1314:	08 04 20    	mov.w     #0x40, w8
    1316:	05 00 37    	bra       0x1322 <diventry>

00001318 <divnext>:
    1318:	08 04 44    	add.w     w8, w8, w8
    131a:	89 84 4c    	addc.w    w9, w9, w9
    131c:	0a 00 31    	bra       C, 0x1332 <divdone> <formsticky>

0000131e <divloop>:
    131e:	06 03 43    	add.w     w6, w6, w6
    1320:	87 83 4b    	addc.w    w7, w7, w7

00001322 <diventry>:
    1322:	00 01 53    	sub.w     w6, w0, w2
    1324:	81 81 5b    	subb.w    w7, w1, w3
    1326:	f8 ff 33    	bra       N, 0x1318 <divnext>
    1328:	02 03 be    	mov.d     w2, w6
    132a:	08 00 a0    	bset.w    w8, #0x0
    132c:	08 04 44    	add.w     w8, w8, w8
    132e:	89 84 4c    	addc.w    w9, w9, w9
    1330:	f6 ff 39    	bra       NC, 0x131e <divloop>

00001332 <divdone>:
    1332:	c6 39 dd    	sl.w      w7, #0x6, w3
    1334:	83 01 73    	ior.w     w6, w3, w3
    1336:	01 00 32    	bra       Z, 0x133a <stickyok>
    1338:	13 00 20    	mov.w     #0x1, w3

0000133a <stickyok>:
    133a:	89 04 d1    	lsr.w     w9, w9
    133c:	08 84 d3    	rrc.w     w8, w8
    133e:	09 98 a3    	btst.z    w9, #0x9
    1340:	05 00 32    	bra       Z, 0x134c <guardused>
    1342:	08 00 a7    	btsc.w    w8, #0x0
    1344:	03 00 a0    	bset.w    w3, #0x0
    1346:	89 04 d1    	lsr.w     w9, w9
    1348:	08 84 d3    	rrc.w     w8, w8
    134a:	8b 05 e8    	inc.w     w11, w11

0000134c <guardused>:
    134c:	89 04 d1    	lsr.w     w9, w9
    134e:	08 84 d3    	rrc.w     w8, w8
    1350:	00 01 eb    	clr.w     w2
    1352:	02 81 d2    	rlc.w     w2, w2
    1354:	30 00 07    	rcall     0x13b6 <__fpack>

00001356 <return0>:
    1356:	01 f0 a1    	bclr.w    w1, #0xf
    1358:	0c f0 a7    	btsc.w    w12, #0xf
    135a:	01 f0 a0    	bset.w    w1, #0xf
    135c:	78 00 37    	bra       0x144e <__fbopExit>

0000135e <aisinfinite>:
    135e:	64 20 e1    	cp.w      w4, #0x4
    1360:	7a 00 32    	bra       Z, 0x1456 <__fbopReturnNaN>

00001362 <return8>:
    1362:	08 01 be    	mov.d     w8, w2

00001364 <return2>:
    1364:	02 00 be    	mov.d     w2, w0
    1366:	f7 ff 37    	bra       0x1356 <return0>

00001368 <aiszero>:
    1368:	61 20 e1    	cp.w      w4, #0x1
    136a:	75 00 32    	bra       Z, 0x1456 <__fbopReturnNaN>

0000136c <returnZero>:
    136c:	60 00 b8    	mul.uu    w0, #0x0, w0
    136e:	f3 ff 37    	bra       0x1356 <return0>

00001370 <returnInf>:
    1370:	00 00 20    	mov.w     #0x0, w0
    1372:	01 f8 27    	mov.w     #0x7f80, w1
    1374:	f0 ff 37    	bra       0x1356 <return0>

00001376 <___eqsf2>:
    1376:	14 00 20    	mov.w     #0x1, w4
    1378:	b8 00 37    	bra       0x14ea <__fcompare>

0000137a <___fixunssfsi>:
    137a:	00 01 be    	mov.d     w0, w2
    137c:	42 00 07    	rcall     0x1402 <__funpack>
    137e:	04 70 a7    	btsc.w    w4, #0x7
    1380:	03 f0 a1    	bclr.w    w3, #0xf
    1382:	03 f8 a3    	btst.z    w3, #0xf
    1384:	13 00 3a    	bra       NZ, 0x13ac <returnzero>
    1386:	65 09 b1    	sub.w     #0x96, w5
    1388:	10 00 32    	bra       Z, 0x13aa <exit>
    138a:	09 00 35    	bra       LT, 0x139e <shiftright>
    138c:	69 28 e1    	cp.w      w5, #0x9
    138e:	02 00 35    	bra       LT, 0x1394 <shiftleft>
    1390:	01 00 28    	mov.w     #0x8000, w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <shiftleft>:
    1394:	00 00 40    	add.w     w0, w0, w0
    1396:	81 80 48    	addc.w    w1, w1, w1
    1398:	85 02 e9    	dec.w     w5, w5
    139a:	fc ff 3a    	bra       NZ, 0x1394 <shiftleft>
    139c:	00 00 06    	return    

0000139e <shiftright>:
    139e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13a0:	05 00 35    	bra       LT, 0x13ac <returnzero>

000013a2 <shiftrightloop>:
    13a2:	81 00 d1    	lsr.w     w1, w1
    13a4:	00 80 d3    	rrc.w     w0, w0
    13a6:	85 02 e8    	inc.w     w5, w5
    13a8:	fc ff 3a    	bra       NZ, 0x13a2 <shiftrightloop>

000013aa <exit>:
    13aa:	00 00 06    	return    

000013ac <returnzero>:
    13ac:	80 00 eb    	clr.w     w1
    13ae:	00 00 05    	retlw.w   #0x0, w0

000013b0 <___floatsisf>:
    13b0:	4f 89 de    	asr.w     w1, #0xf, w2
    13b2:	82 01 78    	mov.w     w2, w3
    13b4:	b5 00 37    	bra       0x1520 <___floatdisf>

000013b6 <__fpack>:
    13b6:	81 00 20    	mov.w     #0x8, w1
    13b8:	61 80 55    	sub.w     w11, #0x1, w0
    13ba:	0b 00 3d    	bra       GE, 0x13d2 <notsubnormal>
    13bc:	0b 00 20    	mov.w     #0x0, w11
    13be:	61 fe 2f    	mov.w     #0xffe6, w1
    13c0:	01 00 e1    	cp.w      w0, w1
    13c2:	1d 00 34    	bra       LE, 0x13fe <zerosig>

000013c4 <subnormal>:
    13c4:	82 81 71    	ior.w     w3, w2, w3
    13c6:	61 01 64    	and.w     w8, #0x1, w2
    13c8:	89 04 d1    	lsr.w     w9, w9
    13ca:	08 84 d3    	rrc.w     w8, w8
    13cc:	00 00 e8    	inc.w     w0, w0
    13ce:	fa ff 3a    	bra       NZ, 0x13c4 <subnormal>
    13d0:	71 00 20    	mov.w     #0x7, w1

000013d2 <notsubnormal>:
    13d2:	61 00 64    	and.w     w8, #0x1, w0
    13d4:	03 00 70    	ior.w     w0, w3, w0
    13d6:	02 00 60    	and.w     w0, w2, w0
    13d8:	09 00 32    	bra       Z, 0x13ec <packupandgo>
    13da:	61 04 44    	add.w     w8, #0x1, w8
    13dc:	e0 84 4c    	addc.w    w9, #0x0, w9
    13de:	09 88 a5    	btst.z    w9, w1
    13e0:	05 00 32    	bra       Z, 0x13ec <packupandgo>
    13e2:	8b 05 e8    	inc.w     w11, w11
    13e4:	68 08 e1    	cp.w      w1, #0x8
    13e6:	02 00 3a    	bra       NZ, 0x13ec <packupandgo>
    13e8:	89 04 d1    	lsr.w     w9, w9
    13ea:	08 84 d3    	rrc.w     w8, w8

000013ec <packupandgo>:
    13ec:	f2 0f 20    	mov.w     #0xff, w2
    13ee:	02 58 e1    	cp.w      w11, w2
    13f0:	05 00 3d    	bra       GE, 0x13fc <overflow>
    13f2:	c7 5d dd    	sl.w      w11, #0x7, w11
    13f4:	f9 07 b2    	and.w     #0x7f, w9
    13f6:	89 80 75    	ior.w     w11, w9, w1
    13f8:	08 00 78    	mov.w     w8, w0
    13fa:	00 00 06    	return    

000013fc <overflow>:
    13fc:	0b f8 27    	mov.w     #0x7f80, w11

000013fe <zerosig>:
    13fe:	8b 00 78    	mov.w     w11, w1
    1400:	00 00 05    	retlw.w   #0x0, w0

00001402 <__funpack>:
    1402:	c7 0a de    	lsr.w     w1, #0x7, w5
    1404:	f1 07 b2    	and.w     #0x7f, w1
    1406:	f5 0f b2    	and.w     #0xff, w5
    1408:	08 00 32    	bra       Z, 0x141a <zeroorsub>
    140a:	e1 cf 42    	add.b     w5, #0x1, [w15]
    140c:	02 00 32    	bra       Z, 0x1412 <nanorinf>

0000140e <finitereturn>:
    140e:	01 70 a0    	bset.w    w1, #0x7
    1410:	24 00 05    	retlw.w   #0x2, w4

00001412 <nanorinf>:
    1412:	81 0f 70    	ior.w     w0, w1, [w15]
    1414:	01 00 32    	bra       Z, 0x1418 <infinite>
    1416:	04 08 05    	retlw.w   #0x80, w4

00001418 <infinite>:
    1418:	44 00 05    	retlw.w   #0x4, w4

0000141a <zeroorsub>:
    141a:	81 0f 70    	ior.w     w0, w1, [w15]
    141c:	02 00 3a    	bra       NZ, 0x1422 <subnormal>
    141e:	14 00 05    	retlw.w   #0x1, w4

00001420 <normalize>:
    1420:	85 02 e9    	dec.w     w5, w5

00001422 <subnormal>:
    1422:	00 00 40    	add.w     w0, w0, w0
    1424:	81 c0 48    	addc.b    w1, w1, w1
    1426:	fc ff 3b    	bra       NN, 0x1420 <normalize>
    1428:	01 70 a0    	bset.w    w1, #0x7
    142a:	24 00 05    	retlw.w   #0x2, w4

0000142c <__funpack2>:
    142c:	00 04 be    	mov.d     w0, w8
    142e:	e9 ff 07    	rcall     0x1402 <__funpack>
    1430:	00 03 be    	mov.d     w0, w6
    1432:	04 05 be    	mov.d     w4, w10
    1434:	02 00 be    	mov.d     w2, w0
    1436:	e5 ff 07    	rcall     0x1402 <__funpack>
    1438:	84 4f 75    	ior.b     w10, w4, [w15]
    143a:	00 00 06    	return    

0000143c <__fPropagateNaN>:
    143c:	02 00 be    	mov.d     w2, w0
    143e:	64 50 e1    	cp.w      w10, #0x4
    1440:	05 00 36    	bra       LEU, 0x144c <return0>
    1442:	64 20 e1    	cp.w      w4, #0x4
    1444:	02 00 36    	bra       LEU, 0x144a <return8>
    1446:	09 68 a3    	btst.z    w9, #0x6
    1448:	01 00 3a    	bra       NZ, 0x144c <return0>

0000144a <return8>:
    144a:	08 00 be    	mov.d     w8, w0

0000144c <return0>:
    144c:	01 60 a0    	bset.w    w1, #0x6

0000144e <__fbopExit>:
    144e:	4f 06 78    	mov.w     [--w15], w12
    1450:	4f 05 be    	mov.d     [--w15], w10
    1452:	4f 04 be    	mov.d     [--w15], w8
    1454:	00 00 06    	return    

00001456 <__fbopReturnNaN>:
    1456:	f0 ff 2f    	mov.w     #0xffff, w0
    1458:	f1 ff 27    	mov.w     #0x7fff, w1
    145a:	f9 ff 37    	bra       0x144e <__fbopExit>

0000145c <___mulsf3>:
    145c:	88 9f be    	mov.d     w8, [w15++]
    145e:	8a 9f be    	mov.d     w10, [w15++]
    1460:	8c 1f 78    	mov.w     w12, [w15++]
    1462:	e4 ff 07    	rcall     0x142c <__funpack2>
    1464:	eb ff 33    	bra       N, 0x143c <__fPropagateNaN>
    1466:	03 86 6c    	xor.w     w9, w3, w12
    1468:	64 50 e1    	cp.w      w10, #0x4
    146a:	24 00 32    	bra       Z, 0x14b4 <aisinfinite>
    146c:	64 20 e1    	cp.w      w4, #0x4
    146e:	27 00 32    	bra       Z, 0x14be <bisinfinite>
    1470:	61 50 e1    	cp.w      w10, #0x1
    1472:	22 00 32    	bra       Z, 0x14b8 <return8>
    1474:	61 20 e1    	cp.w      w4, #0x1
    1476:	21 00 32    	bra       Z, 0x14ba <return2>
    1478:	8b 85 42    	add.w     w5, w11, w11
    147a:	eb 07 b1    	sub.w     #0x7e, w11
    147c:	01 34 b8    	mul.uu    w6, w1, w8
    147e:	00 3a b8    	mul.uu    w7, w0, w4
    1480:	08 04 42    	add.w     w4, w8, w8
    1482:	89 84 4a    	addc.w    w5, w9, w9
    1484:	01 3a b8    	mul.uu    w7, w1, w4
    1486:	00 30 b8    	mul.uu    w6, w0, w0
    1488:	88 80 40    	add.w     w1, w8, w1
    148a:	09 01 4a    	addc.w    w4, w9, w2
    148c:	04 00 33    	bra       N, 0x1496 <formsticky>
    148e:	00 00 40    	add.w     w0, w0, w0
    1490:	81 80 48    	addc.w    w1, w1, w1
    1492:	02 01 49    	addc.w    w2, w2, w2
    1494:	8b 05 e9    	dec.w     w11, w11

00001496 <formsticky>:
    1496:	c9 09 dd    	sl.w      w1, #0x9, w3
    1498:	83 01 70    	ior.w     w0, w3, w3
    149a:	01 00 32    	bra       Z, 0x149e <formRandSig>
    149c:	13 00 20    	mov.w     #0x1, w3

0000149e <formRandSig>:
    149e:	c8 14 de    	lsr.w     w2, #0x8, w9
    14a0:	48 14 dd    	sl.w      w2, #0x8, w8
    14a2:	47 09 de    	lsr.w     w1, #0x7, w2
    14a4:	12 00 b2    	and.w     #0x1, w2
    14a6:	c8 08 de    	lsr.w     w1, #0x8, w1
    14a8:	08 84 70    	ior.w     w1, w8, w8
    14aa:	85 ff 07    	rcall     0x13b6 <__fpack>

000014ac <return0>:
    14ac:	01 f0 a1    	bclr.w    w1, #0xf
    14ae:	0c f0 a7    	btsc.w    w12, #0xf
    14b0:	01 f0 a0    	bset.w    w1, #0xf
    14b2:	cd ff 37    	bra       0x144e <__fbopExit>

000014b4 <aisinfinite>:
    14b4:	61 20 e1    	cp.w      w4, #0x1
    14b6:	cf ff 32    	bra       Z, 0x1456 <__fbopReturnNaN>

000014b8 <return8>:
    14b8:	08 01 be    	mov.d     w8, w2

000014ba <return2>:
    14ba:	02 00 be    	mov.d     w2, w0
    14bc:	f7 ff 37    	bra       0x14ac <return0>

000014be <bisinfinite>:
    14be:	61 50 e1    	cp.w      w10, #0x1
    14c0:	fc ff 3a    	bra       NZ, 0x14ba <return2>
    14c2:	c9 ff 37    	bra       0x1456 <__fbopReturnNaN>

000014c4 <___udivsi3>:
    14c4:	60 22 b8    	mul.uu    w4, #0x0, w4
    14c6:	06 02 20    	mov.w     #0x20, w6

000014c8 <nextbit>:
    14c8:	00 00 d0    	sl.w      w0, w0
    14ca:	81 80 d2    	rlc.w     w1, w1
    14cc:	04 82 d2    	rlc.w     w4, w4
    14ce:	85 82 d2    	rlc.w     w5, w5
    14d0:	00 00 a0    	bset.w    w0, #0x0
    14d2:	02 02 52    	sub.w     w4, w2, w4
    14d4:	83 82 5a    	subb.w    w5, w3, w5
    14d6:	03 00 31    	bra       C, 0x14de <iterate>
    14d8:	02 02 42    	add.w     w4, w2, w4
    14da:	83 82 4a    	addc.w    w5, w3, w5
    14dc:	00 00 a1    	bclr.w    w0, #0x0

000014de <iterate>:
    14de:	06 03 e9    	dec.w     w6, w6
    14e0:	f3 ff 3a    	bra       NZ, 0x14c8 <nextbit>
    14e2:	00 00 06    	return    

000014e4 <___umodsi3>:
    14e4:	ef ff 07    	rcall     0x14c4 <___udivsi3>
    14e6:	04 00 be    	mov.d     w4, w0
    14e8:	00 00 06    	return    

000014ea <__fcompare>:
    14ea:	88 9f be    	mov.d     w8, [w15++]
    14ec:	8a 9f be    	mov.d     w10, [w15++]
    14ee:	84 1f 78    	mov.w     w4, [w15++]
    14f0:	9d ff 07    	rcall     0x142c <__funpack2>
    14f2:	4f 00 78    	mov.w     [--w15], w0
    14f4:	11 00 33    	bra       N, 0x1518 <exit>
    14f6:	f0 ff 2f    	mov.w     #0xffff, w0
    14f8:	83 8f 6c    	xor.w     w9, w3, [w15]
    14fa:	06 00 3b    	bra       NN, 0x1508 <comparemag>
    14fc:	04 05 65    	and.w     w10, w4, w10
    14fe:	0a 00 a7    	btsc.w    w10, #0x0
    1500:	08 00 37    	bra       0x1512 <returnEqual>
    1502:	09 f0 a6    	btss.w    w9, #0xf
    1504:	10 00 20    	mov.w     #0x1, w0
    1506:	08 00 37    	bra       0x1518 <exit>

00001508 <comparemag>:
    1508:	82 0f 54    	sub.w     w8, w2, [w15]
    150a:	83 8f 5c    	subb.w    w9, w3, [w15]
    150c:	03 00 39    	bra       NC, 0x1514 <adjust>
    150e:	10 00 20    	mov.w     #0x1, w0
    1510:	01 00 3e    	bra       GTU, 0x1514 <adjust>

00001512 <returnEqual>:
    1512:	00 00 20    	mov.w     #0x0, w0

00001514 <adjust>:
    1514:	09 f0 a7    	btsc.w    w9, #0xf
    1516:	00 00 ea    	neg.w     w0, w0

00001518 <exit>:
    1518:	4f 05 be    	mov.d     [--w15], w10
    151a:	4f 04 be    	mov.d     [--w15], w8
    151c:	00 00 e0    	cp0.w     w0
    151e:	00 00 06    	return    

00001520 <___floatdisf>:
    1520:	88 1f 78    	mov.w     w8, [w15++]
    1522:	03 04 78    	mov.w     w3, w8
    1524:	03 00 e0    	cp0.w     w3
    1526:	07 00 3d    	bra       GE, 0x1536 <notspecial>

00001528 <negative>:
    1528:	60 00 10    	subr.w    w0, #0x0, w0
    152a:	e0 80 18    	subbr.w   w1, #0x0, w1
    152c:	60 01 19    	subbr.w   w2, #0x0, w2
    152e:	e0 81 19    	subbr.w   w3, #0x0, w3
    1530:	02 00 3b    	bra       NN, 0x1536 <notspecial>
    1532:	01 f0 2d    	mov.w     #0xdf00, w1
    1534:	03 00 37    	bra       0x153c <return0>

00001536 <notspecial>:
    1536:	04 00 07    	rcall     0x1540 <___floatundisf>
    1538:	08 f0 a7    	btsc.w    w8, #0xf
    153a:	01 f0 a0    	bset.w    w1, #0xf

0000153c <return0>:
    153c:	4f 04 78    	mov.w     [--w15], w8
    153e:	00 00 06    	return    

00001540 <___floatundisf>:
    1540:	88 9f be    	mov.d     w8, [w15++]
    1542:	8a 9f be    	mov.d     w10, [w15++]
    1544:	00 82 70    	ior.w     w1, w0, w4
    1546:	04 02 71    	ior.w     w2, w4, w4
    1548:	04 82 71    	ior.w     w3, w4, w4
    154a:	26 00 32    	bra       Z, 0x1598 <return0>
    154c:	00 04 be    	mov.d     w0, w8
    154e:	02 00 be    	mov.d     w2, w0
    1550:	60 11 b8    	mul.uu    w2, #0x0, w2
    1552:	6b 09 20    	mov.w     #0x96, w11
    1554:	95 02 20    	mov.w     #0x29, w5
    1556:	01 82 cf    	ff1l      w1, w4
    1558:	0a 00 39    	bra       NC, 0x156e <fixshift>
    155a:	05 41 b1    	sub.b     #0x10, w5
    155c:	00 82 cf    	ff1l      w0, w4
    155e:	07 00 39    	bra       NC, 0x156e <fixshift>
    1560:	05 41 b1    	sub.b     #0x10, w5
    1562:	09 82 cf    	ff1l      w9, w4
    1564:	04 00 39    	bra       NC, 0x156e <fixshift>
    1566:	05 41 b1    	sub.b     #0x10, w5
    1568:	08 82 cf    	ff1l      w8, w4
    156a:	01 00 39    	bra       NC, 0x156e <fixshift>
    156c:	05 41 b1    	sub.b     #0x10, w5

0000156e <fixshift>:
    156e:	05 42 52    	sub.b     w4, w5, w4
    1570:	12 00 32    	bra       Z, 0x1596 <round>
    1572:	0a 00 3b    	bra       NN, 0x1588 <shiftleft>

00001574 <shiftright>:
    1574:	82 81 71    	ior.w     w3, w2, w3
    1576:	61 01 64    	and.w     w8, #0x1, w2
    1578:	81 00 d1    	lsr.w     w1, w1
    157a:	00 80 d3    	rrc.w     w0, w0
    157c:	89 84 d3    	rrc.w     w9, w9
    157e:	08 84 d3    	rrc.w     w8, w8
    1580:	8b 05 e8    	inc.w     w11, w11
    1582:	04 42 e8    	inc.b     w4, w4
    1584:	f7 ff 3a    	bra       NZ, 0x1574 <shiftright>
    1586:	07 00 37    	bra       0x1596 <round>

00001588 <shiftleft>:
    1588:	08 04 44    	add.w     w8, w8, w8
    158a:	89 84 4c    	addc.w    w9, w9, w9
    158c:	00 00 48    	addc.w    w0, w0, w0
    158e:	81 80 48    	addc.w    w1, w1, w1
    1590:	8b 05 e9    	dec.w     w11, w11
    1592:	04 42 e9    	dec.b     w4, w4
    1594:	f9 ff 3a    	bra       NZ, 0x1588 <shiftleft>

00001596 <round>:
    1596:	0f ff 07    	rcall     0x13b6 <__fpack>

00001598 <return0>:
    1598:	4f 05 be    	mov.d     [--w15], w10
    159a:	4f 04 be    	mov.d     [--w15], w8
    159c:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	82 28 04    	goto      0x2882 <.LFE1>
    1026:	00 00 00 
    1028:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	b2 27 04    	goto      0x27b2 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	50 27 04    	goto      0x2750 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	8a 26 04    	goto      0x268a <__SI2C2Interrupt>
    10b2:	00 00 00 
    10b4:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	fa 28 04    	goto      0x28fa <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000959e <_numbertable>:
    959e:	3f 00       	.word 0x3f
    95a0:	06 00       	.word 0x6
    95a2:	5b 00       	.word 0x5b
    95a4:	4f 00       	.word 0x4f
    95a6:	66 00       	.word 0x66
    95a8:	6d 00       	.word 0x6d
    95aa:	7d 00       	.word 0x7d
    95ac:	07 00       	.word 0x7
    95ae:	7f 00       	.word 0x7f
    95b0:	6f 00       	.word 0x6f
    95b2:	77 00       	.word 0x77
    95b4:	7c 00       	.word 0x7c
    95b6:	39 00       	.word 0x39
    95b8:	5e 00       	.word 0x5e
    95ba:	79 00       	.word 0x79
    95bc:	71 00       	.word 0x71

000095be <_alphafonttable>:
    95be:	01 00       	.word 0x1
    95c0:	02 00       	.word 0x2
    95c2:	04 00       	.word 0x4
    95c4:	08 00       	.word 0x8
    95c6:	10 00       	.word 0x10
    95c8:	20 00       	.word 0x20
    95ca:	40 00       	.word 0x40
    95cc:	80 00       	.word 0x80
    95ce:	00 01       	.word 0x100
    95d0:	00 02       	.word 0x200
    95d2:	00 04       	.word 0x400
    95d4:	00 08       	.word 0x800
    95d6:	00 10       	.word 0x1000
    95d8:	00 20       	.word 0x2000
    95da:	00 40       	.word 0x4000
    95dc:	00 80       	.word 0x8000
	...
    95ee:	c9 12       	.word 0x12c9
    95f0:	c0 15       	.word 0x15c0
    95f2:	f9 12       	.word 0x12f9
    95f4:	e3 00       	.word 0xe3
    95f6:	30 05       	.word 0x530
    95f8:	c8 12       	.word 0x12c8
    95fa:	00 3a       	.word 0x3a00
    95fc:	00 17       	.word 0x1700
    95fe:	00 00       	.word 0
    9600:	06 00       	.word 0x6
    9602:	20 02       	.word 0x220
    9604:	ce 12       	.word 0x12ce
    9606:	ed 12       	.word 0x12ed
    9608:	24 0c       	.word 0xc24
    960a:	5d 23       	.word 0x235d
    960c:	00 04       	.word 0x400
    960e:	00 24       	.word 0x2400
    9610:	00 09       	.word 0x900
    9612:	c0 3f       	.word 0x3fc0
    9614:	c0 12       	.word 0x12c0
    9616:	00 08       	.word 0x800
    9618:	c0 00       	.word 0xc0
    961a:	00 00       	.word 0
    961c:	00 0c       	.word 0xc00
    961e:	3f 0c       	.word 0xc3f
    9620:	06 00       	.word 0x6
    9622:	db 00       	.word 0xdb
    9624:	8f 00       	.word 0x8f
    9626:	e6 00       	.word 0xe6
    9628:	69 20       	.word 0x2069
    962a:	fd 00       	.word 0xfd
    962c:	07 00       	.word 0x7
    962e:	ff 00       	.word 0xff
    9630:	ef 00       	.word 0xef
    9632:	00 12       	.word 0x1200
    9634:	00 0a       	.word 0xa00
    9636:	00 24       	.word 0x2400
    9638:	c8 00       	.word 0xc8
    963a:	00 09       	.word 0x900
    963c:	83 10       	.word 0x1083
    963e:	bb 02       	.word 0x2bb
    9640:	f7 00       	.word 0xf7
    9642:	8f 12       	.word 0x128f
    9644:	39 00       	.word 0x39
    9646:	0f 12       	.word 0x120f
    9648:	f9 00       	.word 0xf9
    964a:	71 00       	.word 0x71
    964c:	bd 00       	.word 0xbd
    964e:	f6 00       	.word 0xf6
    9650:	00 12       	.word 0x1200
    9652:	1e 00       	.word 0x1e
    9654:	70 24       	.word 0x2470
    9656:	38 00       	.word 0x38
    9658:	36 05       	.word 0x536
    965a:	36 21       	.word 0x2136
    965c:	3f 00       	.word 0x3f
    965e:	f3 00       	.word 0xf3
    9660:	3f 20       	.word 0x203f
    9662:	f3 20       	.word 0x20f3
    9664:	ed 00       	.word 0xed
    9666:	01 12       	.word 0x1201
    9668:	3e 00       	.word 0x3e
    966a:	30 0c       	.word 0xc30
    966c:	36 28       	.word 0x2836
    966e:	00 2d       	.word 0x2d00
    9670:	00 15       	.word 0x1500
    9672:	09 0c       	.word 0xc09
    9674:	39 00       	.word 0x39
    9676:	00 21       	.word 0x2100
    9678:	0f 00       	.word 0xf
    967a:	03 0c       	.word 0xc03
    967c:	08 00       	.word 0x8
    967e:	00 01       	.word 0x100
    9680:	58 10       	.word 0x1058
    9682:	78 20       	.word 0x2078
    9684:	d8 00       	.word 0xd8
    9686:	8e 08       	.word 0x88e
    9688:	58 08       	.word 0x858
    968a:	71 00       	.word 0x71
    968c:	8e 04       	.word 0x48e
    968e:	70 10       	.word 0x1070
    9690:	00 10       	.word 0x1000
    9692:	0e 00       	.word 0xe
    9694:	00 36       	.word 0x3600
    9696:	30 00       	.word 0x30
    9698:	d4 10       	.word 0x10d4
    969a:	50 10       	.word 0x1050
    969c:	dc 00       	.word 0xdc
    969e:	70 01       	.word 0x170
    96a0:	86 04       	.word 0x486
    96a2:	50 00       	.word 0x50
    96a4:	88 20       	.word 0x2088
    96a6:	78 00       	.word 0x78
    96a8:	1c 00       	.word 0x1c
    96aa:	04 20       	.word 0x2004
    96ac:	14 28       	.word 0x2814
    96ae:	c0 28       	.word 0x28c0
    96b0:	0c 20       	.word 0x200c
    96b2:	48 08       	.word 0x848
    96b4:	49 09       	.word 0x949
    96b6:	00 12       	.word 0x1200
    96b8:	89 24       	.word 0x2489
    96ba:	20 05       	.word 0x520
    96bc:	ff 3f       	.word 0x3fff

000096be <_adafruit_display_addr>:
    96be:	e0 00       	.word 0xe0
Disassembly of section .text:

000016c0 <_led_begin>:

};


void led_begin(_ADAFRUIT_LED* ptr, uint8_t addr){
    16c0:	04 00 fa    	lnk       #0x4
    16c2:	00 0f 78    	mov.w     w0, [w14]
    16c4:	21 47 98    	mov.b     w1, [w14+2]
  ptr->i2c_addr = addr;
    16c6:	1e 00 78    	mov.w     [w14], w0
    16c8:	ae 40 90    	mov.b     [w14+2], w1
    16ca:	01 50 98    	mov.b     w1, [w0+16]
	LED1 = 1;
    16cc:	dc e2 a8    	bset.b    0x2dc, #0x7
  i2c_start();
    16ce:	cb 02 07    	rcall     0x1c66 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    16d0:	1e 00 78    	mov.w     [w14], w0
    16d2:	00 50 90    	mov.b     [w0+16], w0
    16d4:	00 80 fb    	ze        w0, w0
    16d6:	16 03 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(0x21); // turn on oscillator
    16d8:	10 02 20    	mov.w     #0x21, w0
    16da:	14 03 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    16dc:	f8 02 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
  led_blinkRate((_ADAFRUIT_LED *)ptr, HT16K33_BLINK_OFF);
    16de:	80 40 eb    	clr.b     w1
    16e0:	1e 00 78    	mov.w     [w14], w0
    16e2:	1a 00 07    	rcall     0x1718 <_led_blinkRate> <.LFB2> <.LFE1>
  led_setBrightness((_ADAFRUIT_LED *)ptr,15); // set max brightness
    16e4:	f1 c0 b3    	mov.b     #0xf, w1
    16e6:	1e 00 78    	mov.w     [w14], w0
    16e8:	02 00 07    	rcall     0x16ee <_led_setBrightness> <.LFB1> <.LFE0>
}
    16ea:	00 80 fa    	ulnk      
    16ec:	00 00 06    	return    

000016ee <_led_setBrightness>:

void led_setBrightness(_ADAFRUIT_LED* ptr, uint8_t b){
    16ee:	04 00 fa    	lnk       #0x4
    16f0:	00 0f 78    	mov.w     w0, [w14]
    16f2:	21 47 98    	mov.b     w1, [w14+2]
  if (b > 15) b = 15;
    16f4:	2e 40 90    	mov.b     [w14+2], w0
    16f6:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    16f8:	02 00 36    	bra       LEU, 0x16fe <.L3>
    16fa:	f0 c0 b3    	mov.b     #0xf, w0
    16fc:	20 47 98    	mov.b     w0, [w14+2]

000016fe <.L3>:
  i2c_start();
    16fe:	b3 02 07    	rcall     0x1c66 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1700:	1e 00 78    	mov.w     [w14], w0
    1702:	00 50 90    	mov.b     [w0+16], w0
    1704:	00 80 fb    	ze        w0, w0
    1706:	fe 02 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(HT16K33_CMD_BRIGHTNESS | b);
    1708:	ae 40 90    	mov.b     [w14+2], w1
    170a:	00 ce b3    	mov.b     #0xe0, w0
    170c:	00 c0 70    	ior.b     w1, w0, w0
    170e:	00 80 fb    	ze        w0, w0
    1710:	f9 02 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1712:	dd 02 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1714:	00 80 fa    	ulnk      
    1716:	00 00 06    	return    

00001718 <_led_blinkRate>:

void led_blinkRate(_ADAFRUIT_LED* ptr, uint8_t b){
    1718:	04 00 fa    	lnk       #0x4
    171a:	00 0f 78    	mov.w     w0, [w14]
    171c:	21 47 98    	mov.b     w1, [w14+2]
  i2c_start();
    171e:	a3 02 07    	rcall     0x1c66 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1720:	1e 00 78    	mov.w     [w14], w0
    1722:	00 50 90    	mov.b     [w0+16], w0
    1724:	00 80 fb    	ze        w0, w0
    1726:	ee 02 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
  if (b > 3) b = 0; // turn off if not sure
    1728:	2e 40 90    	mov.b     [w14+2], w0
    172a:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    172c:	02 00 36    	bra       LEU, 0x1732 <.L5>
    172e:	00 40 eb    	clr.b     w0
    1730:	20 47 98    	mov.b     w0, [w14+2]

00001732 <.L5>:
  send_i2c_byte(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1));
    1732:	2e 40 90    	mov.b     [w14+2], w0
    1734:	00 80 fb    	ze        w0, w0
    1736:	00 00 40    	add.w     w0, w0, w0
    1738:	80 00 78    	mov.w     w0, w1
    173a:	10 08 20    	mov.w     #0x81, w0
    173c:	01 00 70    	ior.w     w0, w1, w0
    173e:	e2 02 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1740:	c6 02 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1742:	00 80 fa    	ulnk      
    1744:	00 00 06    	return    

00001746 <_led_writeDisplay>:

void led_writeDisplay(_ADAFRUIT_LED* ptr){
    1746:	04 00 fa    	lnk       #0x4
    1748:	10 07 98    	mov.w     w0, [w14+2]
  i2c_start();
    174a:	8d 02 07    	rcall     0x1c66 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    174c:	1e 00 90    	mov.w     [w14+2], w0
    174e:	00 50 90    	mov.b     [w0+16], w0
    1750:	00 80 fb    	ze        w0, w0
    1752:	d8 02 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
	send_i2c_byte(0x00); // Start at address 0
    1754:	00 00 eb    	clr.w     w0
    1756:	d6 02 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
	uint8_t i;
  for (i=0; i<8; i++) {
    1758:	00 40 eb    	clr.b     w0
    175a:	00 4f 78    	mov.b     w0, [w14]
    175c:	0f 00 37    	bra       0x177c <.L7>

0000175e <.L8>:
    send_i2c_byte(ptr->displaybuffer[i] & 0xFF);
    175e:	1e 80 fb    	ze        [w14], w0
    1760:	9e 00 90    	mov.w     [w14+2], w1
    1762:	00 00 40    	add.w     w0, w0, w0
    1764:	61 00 78    	mov.w     [w1+w0], w0
    1766:	80 00 78    	mov.w     w0, w1
    1768:	f0 0f 20    	mov.w     #0xff, w0
    176a:	00 80 60    	and.w     w1, w0, w0
    176c:	cb 02 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ptr->displaybuffer[i] >> 8);
    176e:	1e 80 fb    	ze        [w14], w0
    1770:	9e 00 90    	mov.w     [w14+2], w1
    1772:	00 00 40    	add.w     w0, w0, w0
    1774:	61 00 78    	mov.w     [w1+w0], w0
    1776:	48 00 de    	lsr.w     w0, #0x8, w0
    1778:	c5 02 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
    177a:	1e 4f e8    	inc.b     [w14], [w14]

0000177c <.L7>:
    177c:	1e 40 78    	mov.b     [w14], w0
    177e:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    1780:	ee ff 36    	bra       LEU, 0x175e <.L8>
  }
  reset_i2c_bus();
    1782:	a5 02 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1784:	00 80 fa    	ulnk      
    1786:	00 00 06    	return    

00001788 <_led_clear>:

void led_clear(_ADAFRUIT_LED* ptr){
    1788:	04 00 fa    	lnk       #0x4
    178a:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
	for (i=0; i<8; i++) {
    178c:	00 40 eb    	clr.b     w0
    178e:	00 4f 78    	mov.b     w0, [w14]
    1790:	07 00 37    	bra       0x17a0 <.L10>

00001792 <.L11>:
    ptr->displaybuffer[i] = 0;
    1792:	1e 80 fb    	ze        [w14], w0
    1794:	9e 00 90    	mov.w     [w14+2], w1
    1796:	00 00 40    	add.w     w0, w0, w0
    1798:	00 80 40    	add.w     w1, w0, w0
    179a:	80 00 eb    	clr.w     w1
    179c:	01 08 78    	mov.w     w1, [w0]
    179e:	1e 4f e8    	inc.b     [w14], [w14]

000017a0 <.L10>:
    17a0:	1e 40 78    	mov.b     [w14], w0
    17a2:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    17a4:	f6 ff 36    	bra       LEU, 0x1792 <.L11>
  }
}
    17a6:	00 80 fa    	ulnk      
    17a8:	00 00 06    	return    

000017aa <_alphanum_begin>:

// ALPHANUM ********************************************************************

void alphanum_begin(_ALPHANUM* ptr, uint8_t addr){
    17aa:	04 00 fa    	lnk       #0x4
    17ac:	00 0f 78    	mov.w     w0, [w14]
    17ae:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr); // Call super constructor
    17b0:	1e 00 78    	mov.w     [w14], w0
    17b2:	ae 40 90    	mov.b     [w14+2], w1
    17b4:	85 ff 07    	rcall     0x16c0 <_led_begin> <.L0> <.LFB0> <.Ltext0>
}
    17b6:	00 80 fa    	ulnk      
    17b8:	00 00 06    	return    

000017ba <_alphanum_writeDigitRaw>:

void alphanum_writeDigitRaw(_ALPHANUM* ptr, uint8_t n, uint16_t bitmask){
    17ba:	06 00 fa    	lnk       #0x6
    17bc:	00 0f 78    	mov.w     w0, [w14]
    17be:	21 47 98    	mov.b     w1, [w14+2]
    17c0:	22 07 98    	mov.w     w2, [w14+4]
  ptr->super.displaybuffer[n] = bitmask;
    17c2:	2e 40 90    	mov.b     [w14+2], w0
    17c4:	00 80 fb    	ze        w0, w0
    17c6:	9e 00 78    	mov.w     [w14], w1
    17c8:	00 00 40    	add.w     w0, w0, w0
    17ca:	00 80 40    	add.w     w1, w0, w0
    17cc:	ae 00 90    	mov.w     [w14+4], w1
    17ce:	01 08 78    	mov.w     w1, [w0]
}
    17d0:	00 80 fa    	ulnk      
    17d2:	00 00 06    	return    

000017d4 <_alphanum_writeDigitAscii>:

void alphanum_writeDigitAscii(_ALPHANUM* ptr, uint8_t n, uint8_t ascii, uint8_t dot){
    17d4:	08 00 fa    	lnk       #0x8
    17d6:	10 07 98    	mov.w     w0, [w14+2]
    17d8:	41 47 98    	mov.b     w1, [w14+4]
    17da:	52 47 98    	mov.b     w2, [w14+5]
    17dc:	63 47 98    	mov.b     w3, [w14+6]
  uint16_t font = alphafonttable[ascii];
    17de:	5e 40 90    	mov.b     [w14+5], w0
    17e0:	00 80 fb    	ze        w0, w0
    17e2:	80 00 40    	add.w     w0, w0, w1
    17e4:	e0 5b 29    	mov.w     #0x95be, w0
    17e6:	00 80 40    	add.w     w1, w0, w0
    17e8:	10 0f 78    	mov.w     [w0], [w14]
  ptr->super.displaybuffer[n] = font;
    17ea:	4e 40 90    	mov.b     [w14+4], w0
    17ec:	00 80 fb    	ze        w0, w0
    17ee:	9e 00 90    	mov.w     [w14+2], w1
    17f0:	00 00 40    	add.w     w0, w0, w0
    17f2:	00 80 40    	add.w     w1, w0, w0
    17f4:	1e 08 78    	mov.w     [w14], [w0]
  if (dot) ptr->super.displaybuffer[n] |= (1<<14);
    17f6:	6e 40 90    	mov.b     [w14+6], w0
    17f8:	00 04 e0    	cp0.b     w0
    17fa:	0c 00 32    	bra       Z, 0x1814 <.L14>
    17fc:	4e 40 90    	mov.b     [w14+4], w0
    17fe:	00 80 fb    	ze        w0, w0
    1800:	ce 40 90    	mov.b     [w14+4], w1
    1802:	81 80 fb    	ze        w1, w1
    1804:	1e 01 90    	mov.w     [w14+2], w2
    1806:	81 80 40    	add.w     w1, w1, w1
    1808:	e2 80 78    	mov.w     [w2+w1], w1
    180a:	01 e0 a0    	bset.w    w1, #0xe
    180c:	1e 01 90    	mov.w     [w14+2], w2
    180e:	00 00 40    	add.w     w0, w0, w0
    1810:	00 00 41    	add.w     w2, w0, w0
    1812:	01 08 78    	mov.w     w1, [w0]

00001814 <.L14>:
}
    1814:	00 80 fa    	ulnk      
    1816:	00 00 06    	return    

00001818 <_bargraph_begin>:

// 24 BARGRAPH *****************************************************************

void bargraph_begin(_BARGRAPH* ptr, uint8_t addr){
    1818:	04 00 fa    	lnk       #0x4
    181a:	00 0f 78    	mov.w     w0, [w14]
    181c:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr);
    181e:	1e 00 78    	mov.w     [w14], w0
    1820:	ae 40 90    	mov.b     [w14+2], w1
    1822:	4e ff 07    	rcall     0x16c0 <_led_begin> <.L0> <.LFB0> <.Ltext0>
}
    1824:	00 80 fa    	ulnk      
    1826:	00 00 06    	return    

00001828 <_bargraph_setBar>:

void bargraph_setBar(_BARGRAPH* ptr, uint8_t bar, uint8_t color){
    1828:	08 00 fa    	lnk       #0x8
    182a:	20 07 98    	mov.w     w0, [w14+4]
    182c:	61 47 98    	mov.b     w1, [w14+6]
    182e:	72 47 98    	mov.b     w2, [w14+7]
  uint16_t a, c;

  if (bar < 12)
    1830:	6e 40 90    	mov.b     [w14+6], w0
    1832:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1834:	07 00 3e    	bra       GTU, 0x1844 <.L18>
    c = bar / 4;
    1836:	6e 40 90    	mov.b     [w14+6], w0
    1838:	00 80 fb    	ze        w0, w0
    183a:	42 00 de    	lsr.w     w0, #0x2, w0
    183c:	00 40 78    	mov.b     w0, w0
    183e:	00 80 fb    	ze        w0, w0
    1840:	10 07 98    	mov.w     w0, [w14+2]
    1842:	08 00 37    	bra       0x1854 <.L19>

00001844 <.L18>:
  else
    c = (bar - 12) / 4;
    1844:	6e 40 90    	mov.b     [w14+6], w0
    1846:	00 80 fb    	ze        w0, w0
    1848:	6c 00 50    	sub.w     w0, #0xc, w0
    184a:	00 00 e0    	cp0.w     w0
    184c:	01 00 3d    	bra       GE, 0x1850 <.L20>
    184e:	63 00 40    	add.w     w0, #0x3, w0

00001850 <.L20>:
    1850:	42 80 de    	asr.w     w0, #0x2, w0
    1852:	10 07 98    	mov.w     w0, [w14+2]

00001854 <.L19>:

  a = bar % 4;
    1854:	6e 40 90    	mov.b     [w14+6], w0
    1856:	00 80 fb    	ze        w0, w0
    1858:	63 0f 60    	and.w     w0, #0x3, [w14]
  if (bar >= 12)
    185a:	6e 40 90    	mov.b     [w14+6], w0
    185c:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    185e:	02 00 36    	bra       LEU, 0x1864 <.L21>
    a += 4;
    1860:	9e 00 78    	mov.w     [w14], w1
    1862:	64 8f 40    	add.w     w1, #0x4, [w14]

00001864 <.L21>:

  //Serial.print("Ano = "); Serial.print(a); Serial.print(" Cath = "); Serial.println(c);
  if (color == LED_RED) {
    1864:	7e 40 90    	mov.b     [w14+7], w0
    1866:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1868:	1d 00 3a    	bra       NZ, 0x18a4 <.L22>
    // Turn on red LED.
    ptr->super.displaybuffer[c] |= _BV(a);
    186a:	ae 00 90    	mov.w     [w14+4], w1
    186c:	1e 00 90    	mov.w     [w14+2], w0
    186e:	00 00 40    	add.w     w0, w0, w0
    1870:	e1 00 78    	mov.w     [w1+w0], w1
    1872:	1e 00 78    	mov.w     [w14], w0
    1874:	12 00 20    	mov.w     #0x1, w2
    1876:	00 10 dd    	sl.w      w2, w0, w0
    1878:	81 00 70    	ior.w     w0, w1, w1
    187a:	2e 01 90    	mov.w     [w14+4], w2
    187c:	1e 00 90    	mov.w     [w14+2], w0
    187e:	00 00 40    	add.w     w0, w0, w0
    1880:	00 00 41    	add.w     w2, w0, w0
    1882:	01 08 78    	mov.w     w1, [w0]
    // Turn off green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a+8);
    1884:	ae 00 90    	mov.w     [w14+4], w1
    1886:	1e 00 90    	mov.w     [w14+2], w0
    1888:	00 00 40    	add.w     w0, w0, w0
    188a:	e1 00 78    	mov.w     [w1+w0], w1
    188c:	1e 01 78    	mov.w     [w14], w2
    188e:	68 00 41    	add.w     w2, #0x8, w0
    1890:	12 00 20    	mov.w     #0x1, w2
    1892:	00 10 dd    	sl.w      w2, w0, w0
    1894:	00 80 ea    	com.w     w0, w0
    1896:	80 80 60    	and.w     w1, w0, w1
    1898:	2e 01 90    	mov.w     [w14+4], w2
    189a:	1e 00 90    	mov.w     [w14+2], w0
    189c:	00 00 40    	add.w     w0, w0, w0
    189e:	00 00 41    	add.w     w2, w0, w0
    18a0:	01 08 78    	mov.w     w1, [w0]
    18a2:	4c 00 37    	bra       0x193c <.L17>

000018a4 <.L22>:
  } else if (color == LED_YELLOW) {
    18a4:	7e 40 90    	mov.b     [w14+7], w0
    18a6:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    18a8:	13 00 3a    	bra       NZ, 0x18d0 <.L24>
    // Turn on red and green LED.
    ptr->super.displaybuffer[c] |= _BV(a) | _BV(a+8);
    18aa:	ae 00 90    	mov.w     [w14+4], w1
    18ac:	1e 00 90    	mov.w     [w14+2], w0
    18ae:	00 00 40    	add.w     w0, w0, w0
    18b0:	e1 00 78    	mov.w     [w1+w0], w1
    18b2:	1e 00 78    	mov.w     [w14], w0
    18b4:	12 00 20    	mov.w     #0x1, w2
    18b6:	00 11 dd    	sl.w      w2, w0, w2
    18b8:	9e 01 78    	mov.w     [w14], w3
    18ba:	68 80 41    	add.w     w3, #0x8, w0
    18bc:	13 00 20    	mov.w     #0x1, w3
    18be:	00 18 dd    	sl.w      w3, w0, w0
    18c0:	02 00 70    	ior.w     w0, w2, w0
    18c2:	81 00 70    	ior.w     w0, w1, w1
    18c4:	2e 01 90    	mov.w     [w14+4], w2
    18c6:	1e 00 90    	mov.w     [w14+2], w0
    18c8:	00 00 40    	add.w     w0, w0, w0
    18ca:	00 00 41    	add.w     w2, w0, w0
    18cc:	01 08 78    	mov.w     w1, [w0]
    18ce:	36 00 37    	bra       0x193c <.L17>

000018d0 <.L24>:
  } else if (color == LED_OFF) {
    18d0:	7e 40 90    	mov.b     [w14+7], w0
    18d2:	00 04 e0    	cp0.b     w0
    18d4:	14 00 3a    	bra       NZ, 0x18fe <.L25>
    // Turn off red and green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a) & ~_BV(a+8);
    18d6:	ae 00 90    	mov.w     [w14+4], w1
    18d8:	1e 00 90    	mov.w     [w14+2], w0
    18da:	00 00 40    	add.w     w0, w0, w0
    18dc:	e1 00 78    	mov.w     [w1+w0], w1
    18de:	1e 00 78    	mov.w     [w14], w0
    18e0:	12 00 20    	mov.w     #0x1, w2
    18e2:	00 11 dd    	sl.w      w2, w0, w2
    18e4:	9e 01 78    	mov.w     [w14], w3
    18e6:	68 80 41    	add.w     w3, #0x8, w0
    18e8:	13 00 20    	mov.w     #0x1, w3
    18ea:	00 18 dd    	sl.w      w3, w0, w0
    18ec:	02 00 70    	ior.w     w0, w2, w0
    18ee:	00 80 ea    	com.w     w0, w0
    18f0:	80 80 60    	and.w     w1, w0, w1
    18f2:	2e 01 90    	mov.w     [w14+4], w2
    18f4:	1e 00 90    	mov.w     [w14+2], w0
    18f6:	00 00 40    	add.w     w0, w0, w0
    18f8:	00 00 41    	add.w     w2, w0, w0
    18fa:	01 08 78    	mov.w     w1, [w0]
    18fc:	1f 00 37    	bra       0x193c <.L17>

000018fe <.L25>:
  } else if (color == LED_GREEN) {
    18fe:	7e 40 90    	mov.b     [w14+7], w0
    1900:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    1902:	1c 00 3a    	bra       NZ, 0x193c <.L17>
    // Turn on green LED.
    ptr->super.displaybuffer[c] |= _BV(a+8);
    1904:	ae 00 90    	mov.w     [w14+4], w1
    1906:	1e 00 90    	mov.w     [w14+2], w0
    1908:	00 00 40    	add.w     w0, w0, w0
    190a:	e1 00 78    	mov.w     [w1+w0], w1
    190c:	1e 01 78    	mov.w     [w14], w2
    190e:	68 00 41    	add.w     w2, #0x8, w0
    1910:	12 00 20    	mov.w     #0x1, w2
    1912:	00 10 dd    	sl.w      w2, w0, w0
    1914:	81 00 70    	ior.w     w0, w1, w1
    1916:	2e 01 90    	mov.w     [w14+4], w2
    1918:	1e 00 90    	mov.w     [w14+2], w0
    191a:	00 00 40    	add.w     w0, w0, w0
    191c:	00 00 41    	add.w     w2, w0, w0
    191e:	01 08 78    	mov.w     w1, [w0]
    // Turn off red LED.
    ptr->super.displaybuffer[c] &= ~_BV(a);
    1920:	ae 00 90    	mov.w     [w14+4], w1
    1922:	1e 00 90    	mov.w     [w14+2], w0
    1924:	00 00 40    	add.w     w0, w0, w0
    1926:	e1 00 78    	mov.w     [w1+w0], w1
    1928:	1e 00 78    	mov.w     [w14], w0
    192a:	12 00 20    	mov.w     #0x1, w2
    192c:	00 10 dd    	sl.w      w2, w0, w0
    192e:	00 80 ea    	com.w     w0, w0
    1930:	80 80 60    	and.w     w1, w0, w1
    1932:	2e 01 90    	mov.w     [w14+4], w2
    1934:	1e 00 90    	mov.w     [w14+2], w0
    1936:	00 00 40    	add.w     w0, w0, w0
    1938:	00 00 41    	add.w     w2, w0, w0
    193a:	01 08 78    	mov.w     w1, [w0]

0000193c <.L17>:
  }
}
    193c:	00 80 fa    	ulnk      
    193e:	00 00 06    	return    

00001940 <_sevseg_writeDigitRaw>:

// 7SEGMENT ********************************************************************

// uint8_t write(_7SEGMENT* ptr, uint8_t c){
//
//   uint8_t r = 0;
//
//   if (c == '\n') ptr->position = 0;
//   if (c == '\r') ptr->position = 0;
//
//   if ((c >= '0') && (c <= '9')) {
//     sevseg_writeDigitNum(ptr, ptr->position, c-'0', 0);
//     r = 1;
//   }
//
//   ptr->position++;
//   if (ptr->position == 2) ptr->position++;
//
//   return r;
// }

void sevseg_writeDigitRaw(_7SEGMENT* ptr, uint8_t x, uint16_t bitmask){
    1940:	06 00 fa    	lnk       #0x6
    1942:	00 0f 78    	mov.w     w0, [w14]
    1944:	21 47 98    	mov.b     w1, [w14+2]
    1946:	22 07 98    	mov.w     w2, [w14+4]
  if (x > 4) return;
    1948:	2e 40 90    	mov.b     [w14+2], w0
    194a:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    194c:	08 00 3e    	bra       GTU, 0x195e <.L29>
  ptr->super.displaybuffer[x] = bitmask;
    194e:	2e 40 90    	mov.b     [w14+2], w0
    1950:	00 80 fb    	ze        w0, w0
    1952:	9e 00 78    	mov.w     [w14], w1
    1954:	00 00 40    	add.w     w0, w0, w0
    1956:	00 80 40    	add.w     w1, w0, w0
    1958:	ae 00 90    	mov.w     [w14+4], w1
    195a:	01 08 78    	mov.w     w1, [w0]
    195c:	01 00 37    	bra       0x1960 <.L26>

0000195e <.L29>:
    195e:	00 00 00    	nop       

00001960 <.L26>:
}
    1960:	00 80 fa    	ulnk      
    1962:	00 00 06    	return    

00001964 <_sevseg_writeDigitNum>:

void sevseg_writeDigitNum(_7SEGMENT* ptr, uint8_t x, uint8_t num, uint8_t dot){
    1964:	08 00 fa    	lnk       #0x8
    1966:	10 07 98    	mov.w     w0, [w14+2]
    1968:	41 47 98    	mov.b     w1, [w14+4]
    196a:	52 47 98    	mov.b     w2, [w14+5]
    196c:	63 47 98    	mov.b     w3, [w14+6]
  if (x > 4) return;
    196e:	4e 40 90    	mov.b     [w14+4], w0
    1970:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1972:	11 00 3e    	bra       GTU, 0x1996 <.L33>
	uint16_t zero = 0x0000;
    1974:	00 00 eb    	clr.w     w0
    1976:	00 0f 78    	mov.w     w0, [w14]
  sevseg_writeDigitRaw(ptr, x, (numbertable[num] | (dot << 7)));
    1978:	5e 40 90    	mov.b     [w14+5], w0
    197a:	00 80 fb    	ze        w0, w0
    197c:	80 00 40    	add.w     w0, w0, w1
    197e:	e0 59 29    	mov.w     #0x959e, w0
    1980:	00 80 40    	add.w     w1, w0, w0
    1982:	90 00 78    	mov.w     [w0], w1
    1984:	6e 40 90    	mov.b     [w14+6], w0
    1986:	00 80 fb    	ze        w0, w0
    1988:	47 00 dd    	sl.w      w0, #0x7, w0
    198a:	01 00 70    	ior.w     w0, w1, w0
    198c:	00 01 78    	mov.w     w0, w2
    198e:	ce 40 90    	mov.b     [w14+4], w1
    1990:	1e 00 90    	mov.w     [w14+2], w0
    1992:	d6 ff 07    	rcall     0x1940 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    1994:	01 00 37    	bra       0x1998 <.L30>

00001996 <.L33>:
    1996:	00 00 00    	nop       

00001998 <.L30>:
}
    1998:	00 80 fa    	ulnk      
    199a:	00 00 06    	return    

0000199c <_sevseg_drawColon>:

void sevseg_drawColon(_7SEGMENT* ptr, uint8_t state){
    199c:	04 00 fa    	lnk       #0x4
    199e:	00 0f 78    	mov.w     w0, [w14]
    19a0:	21 47 98    	mov.b     w1, [w14+2]
  if (state)
    19a2:	2e 40 90    	mov.b     [w14+2], w0
    19a4:	00 04 e0    	cp0.b     w0
    19a6:	04 00 32    	bra       Z, 0x19b0 <.L35>
    ptr->super.displaybuffer[2] = 0x2;
    19a8:	1e 00 78    	mov.w     [w14], w0
    19aa:	21 00 20    	mov.w     #0x2, w1
    19ac:	21 00 98    	mov.w     w1, [w0+4]
    19ae:	03 00 37    	bra       0x19b6 <.L34>

000019b0 <.L35>:
  else
    ptr->super.displaybuffer[2] = 0;
    19b0:	1e 00 78    	mov.w     [w14], w0
    19b2:	80 00 eb    	clr.w     w1
    19b4:	21 00 98    	mov.w     w1, [w0+4]

000019b6 <.L34>:
}
    19b6:	00 80 fa    	ulnk      
    19b8:	00 00 06    	return    

000019ba <_sevseg_printNumber>:

void sevseg_printNumber(_7SEGMENT* ptr, long n, uint8_t base){
    19ba:	08 00 fa    	lnk       #0x8
    19bc:	00 0f 78    	mov.w     w0, [w14]
    19be:	12 07 98    	mov.w     w2, [w14+2]
    19c0:	23 07 98    	mov.w     w3, [w14+4]
    19c2:	61 47 98    	mov.b     w1, [w14+6]
  sevseg_printFloat(ptr, n, 0, base);
    19c4:	1e 00 90    	mov.w     [w14+2], w0
    19c6:	ae 00 90    	mov.w     [w14+4], w1
    19c8:	f3 fc 07    	rcall     0x13b0 <___floatsisf>
    19ca:	00 01 be    	mov.d     w0, w2
    19cc:	6e 42 90    	mov.b     [w14+6], w4
    19ce:	80 40 eb    	clr.b     w1
    19d0:	1e 00 78    	mov.w     [w14], w0
    19d2:	02 00 07    	rcall     0x19d8 <_sevseg_printFloat> <.LFB14> <.LFE13>
}
    19d4:	00 80 fa    	ulnk      
    19d6:	00 00 06    	return    

000019d8 <_sevseg_printFloat>:

void sevseg_printFloat(_7SEGMENT* ptr, double n, uint8_t fracDigits, uint8_t base){
    19d8:	1c 00 fa    	lnk       #0x1c
    19da:	88 1f 78    	mov.w     w8, [w15++]
    19dc:	20 0f 98    	mov.w     w0, [w14+20]
    19de:	32 0f 98    	mov.w     w2, [w14+22]
    19e0:	43 0f 98    	mov.w     w3, [w14+24]
    19e2:	21 5f 98    	mov.b     w1, [w14+26]
    19e4:	34 5f 98    	mov.b     w4, [w14+27]
  uint8_t numericDigits = 4;   // available digits on display
    19e6:	40 c0 b3    	mov.b     #0x4, w0
    19e8:	00 4f 78    	mov.b     w0, [w14]
  uint8_t isNegative = 0;  // true if the number is negative
    19ea:	00 40 eb    	clr.b     w0
    19ec:	10 47 98    	mov.b     w0, [w14+1]

  // is the number negative?
  if(n < 0) {
    19ee:	18 c0 b3    	mov.b     #0x1, w8
    19f0:	60 11 b8    	mul.uu    w2, #0x0, w2
    19f2:	3e 08 90    	mov.w     [w14+22], w0
    19f4:	ce 08 90    	mov.w     [w14+24], w1
    19f6:	bf fc 07    	rcall     0x1376 <___eqsf2> <___lesf2> <___ltsf2>
    19f8:	00 00 e0    	cp0.w     w0
    19fa:	01 00 35    	bra       LT, 0x19fe <.L39>
    19fc:	00 44 eb    	clr.b     w8

000019fe <.L39>:
    19fe:	08 04 e0    	cp0.b     w8
    1a00:	08 00 32    	bra       Z, 0x1a12 <.L40>
    isNegative = 1;  // need to draw sign later
    1a02:	10 c0 b3    	mov.b     #0x1, w0
    1a04:	10 47 98    	mov.b     w0, [w14+1]
    --numericDigits;    // the sign will take up one digit
    1a06:	1e 4f e9    	dec.b     [w14], [w14]
    n *= -1;            // pretend the number is positive
    1a08:	3e 08 90    	mov.w     [w14+22], w0
    1a0a:	ce 08 90    	mov.w     [w14+24], w1
    1a0c:	01 f0 a2    	btg.w     w1, #0xf
    1a0e:	30 0f 98    	mov.w     w0, [w14+22]
    1a10:	41 0f 98    	mov.w     w1, [w14+24]

00001a12 <.L40>:
  }

  // calculate the factor required to shift all fractional digits
  // into the integer part of the number
  double toIntFactor = 1.0;
    1a12:	00 00 20    	mov.w     #0x0, w0
    1a14:	01 f8 23    	mov.w     #0x3f80, w1
    1a16:	10 07 98    	mov.w     w0, [w14+2]
    1a18:	21 07 98    	mov.w     w1, [w14+4]
	int i = 0;
    1a1a:	00 00 eb    	clr.w     w0
    1a1c:	30 07 98    	mov.w     w0, [w14+6]
  for(i = 0; i < fracDigits; ++i) toIntFactor *= base;
    1a1e:	00 00 eb    	clr.w     w0
    1a20:	30 07 98    	mov.w     w0, [w14+6]
    1a22:	0d 00 37    	bra       0x1a3e <.L41>

00001a24 <.L42>:
    1a24:	3e 58 90    	mov.b     [w14+27], w0
    1a26:	00 80 fb    	ze        w0, w0
    1a28:	cf 80 de    	asr.w     w0, #0xf, w1
    1a2a:	c2 fc 07    	rcall     0x13b0 <___floatsisf>
    1a2c:	00 01 be    	mov.d     w0, w2
    1a2e:	1e 00 90    	mov.w     [w14+2], w0
    1a30:	ae 00 90    	mov.w     [w14+4], w1
    1a32:	14 fd 07    	rcall     0x145c <___mulsf3>
    1a34:	10 07 98    	mov.w     w0, [w14+2]
    1a36:	21 07 98    	mov.w     w1, [w14+4]
    1a38:	3e 00 90    	mov.w     [w14+6], w0
    1a3a:	00 00 e8    	inc.w     w0, w0
    1a3c:	30 07 98    	mov.w     w0, [w14+6]

00001a3e <.L41>:
    1a3e:	2e 58 90    	mov.b     [w14+26], w0
    1a40:	80 80 fb    	ze        w0, w1
    1a42:	3e 00 90    	mov.w     [w14+6], w0
    1a44:	80 8f 50    	sub.w     w1, w0, [w15]
    1a46:	ee ff 3c    	bra       GT, 0x1a24 <.L42>

  // create integer containing digits to display by applying
  // shifting factor and rounding adjustment
  uint32_t displayNumber = n * toIntFactor + 0.5;
    1a48:	1e 01 90    	mov.w     [w14+2], w2
    1a4a:	ae 01 90    	mov.w     [w14+4], w3
    1a4c:	3e 08 90    	mov.w     [w14+22], w0
    1a4e:	ce 08 90    	mov.w     [w14+24], w1
    1a50:	05 fd 07    	rcall     0x145c <___mulsf3>
    1a52:	02 00 20    	mov.w     #0x0, w2
    1a54:	03 f0 23    	mov.w     #0x3f00, w3
    1a56:	f0 fb 07    	rcall     0x1238 <___addsf3>
    1a58:	90 fc 07    	rcall     0x137a <___fixunssfsi>
    1a5a:	40 07 98    	mov.w     w0, [w14+8]
    1a5c:	51 07 98    	mov.w     w1, [w14+10]

  // calculate upper bound on displayNumber given
  // available digits on display
  uint32_t tooBig = 1;
    1a5e:	10 00 20    	mov.w     #0x1, w0
    1a60:	01 00 20    	mov.w     #0x0, w1
    1a62:	60 07 98    	mov.w     w0, [w14+12]
    1a64:	71 07 98    	mov.w     w1, [w14+14]
  for(i = 0; i < numericDigits; ++i) tooBig *= base;
    1a66:	00 00 eb    	clr.w     w0
    1a68:	30 07 98    	mov.w     w0, [w14+6]
    1a6a:	15 00 37    	bra       0x1a96 <.L43>

00001a6c <.L44>:
    1a6c:	3e 58 90    	mov.b     [w14+27], w0
    1a6e:	00 80 fb    	ze        w0, w0
    1a70:	80 00 eb    	clr.w     w1
    1a72:	7e 01 90    	mov.w     [w14+14], w2
    1a74:	00 91 b9    	mul.ss    w2, w0, w2
    1a76:	02 01 78    	mov.w     w2, w2
    1a78:	ee 01 90    	mov.w     [w14+12], w3
    1a7a:	01 9a b9    	mul.ss    w3, w1, w4
    1a7c:	84 01 78    	mov.w     w4, w3
    1a7e:	03 01 41    	add.w     w2, w3, w2
    1a80:	ee 01 90    	mov.w     [w14+12], w3
    1a82:	00 18 b8    	mul.uu    w3, w0, w0
    1a84:	01 01 41    	add.w     w2, w1, w2
    1a86:	82 00 78    	mov.w     w2, w1
    1a88:	60 07 98    	mov.w     w0, [w14+12]
    1a8a:	71 07 98    	mov.w     w1, [w14+14]
    1a8c:	60 07 98    	mov.w     w0, [w14+12]
    1a8e:	71 07 98    	mov.w     w1, [w14+14]
    1a90:	3e 00 90    	mov.w     [w14+6], w0
    1a92:	00 00 e8    	inc.w     w0, w0
    1a94:	30 07 98    	mov.w     w0, [w14+6]

00001a96 <.L43>:
    1a96:	9e 80 fb    	ze        [w14], w1
    1a98:	3e 00 90    	mov.w     [w14+6], w0
    1a9a:	80 8f 50    	sub.w     w1, w0, [w15]
    1a9c:	e7 ff 3c    	bra       GT, 0x1a6c <.L44>

  // if displayNumber is too large, try fewer fractional digits
  while(displayNumber >= tooBig) {
    1a9e:	18 00 37    	bra       0x1ad0 <.L45>

00001aa0 <.L46>:
    --fracDigits;
    1aa0:	2e 58 90    	mov.b     [w14+26], w0
    1aa2:	00 40 e9    	dec.b     w0, w0
    1aa4:	20 5f 98    	mov.b     w0, [w14+26]
    toIntFactor /= base;
    1aa6:	3e 58 90    	mov.b     [w14+27], w0
    1aa8:	00 80 fb    	ze        w0, w0
    1aaa:	cf 80 de    	asr.w     w0, #0xf, w1
    1aac:	81 fc 07    	rcall     0x13b0 <___floatsisf>
    1aae:	00 01 be    	mov.d     w0, w2
    1ab0:	1e 00 90    	mov.w     [w14+2], w0
    1ab2:	ae 00 90    	mov.w     [w14+4], w1
    1ab4:	1e fc 07    	rcall     0x12f2 <___divsf3>
    1ab6:	10 07 98    	mov.w     w0, [w14+2]
    1ab8:	21 07 98    	mov.w     w1, [w14+4]
    displayNumber = n * toIntFactor + 0.5;
    1aba:	1e 01 90    	mov.w     [w14+2], w2
    1abc:	ae 01 90    	mov.w     [w14+4], w3
    1abe:	3e 08 90    	mov.w     [w14+22], w0
    1ac0:	ce 08 90    	mov.w     [w14+24], w1
    1ac2:	cc fc 07    	rcall     0x145c <___mulsf3>
    1ac4:	02 00 20    	mov.w     #0x0, w2
    1ac6:	03 f0 23    	mov.w     #0x3f00, w3
    1ac8:	b7 fb 07    	rcall     0x1238 <___addsf3>
    1aca:	57 fc 07    	rcall     0x137a <___fixunssfsi>
    1acc:	40 07 98    	mov.w     w0, [w14+8]
    1ace:	51 07 98    	mov.w     w1, [w14+10]

00001ad0 <.L45>:
    1ad0:	4e 01 90    	mov.w     [w14+8], w2
    1ad2:	de 01 90    	mov.w     [w14+10], w3
    1ad4:	6e 00 90    	mov.w     [w14+12], w0
    1ad6:	fe 00 90    	mov.w     [w14+14], w1
    1ad8:	80 0f 51    	sub.w     w2, w0, [w15]
    1ada:	81 8f 59    	subb.w    w3, w1, [w15]
    1adc:	e1 ff 31    	bra       C, 0x1aa0 <.L46>
  }

  // did toIntFactor shift the decimal off the display?
  if (toIntFactor < 1) {
    1ade:	18 c0 b3    	mov.b     #0x1, w8
    1ae0:	02 00 20    	mov.w     #0x0, w2
    1ae2:	03 f8 23    	mov.w     #0x3f80, w3
    1ae4:	1e 00 90    	mov.w     [w14+2], w0
    1ae6:	ae 00 90    	mov.w     [w14+4], w1
    1ae8:	46 fc 07    	rcall     0x1376 <___eqsf2> <___lesf2> <___ltsf2>
    1aea:	00 00 e0    	cp0.w     w0
    1aec:	01 00 35    	bra       LT, 0x1af0 <.L47>
    1aee:	00 44 eb    	clr.b     w8

00001af0 <.L47>:
    1af0:	08 04 e0    	cp0.b     w8
    1af2:	03 00 32    	bra       Z, 0x1afa <.L48> <.LBB2>
    sevseg_printError(ptr);
    1af4:	2e 08 90    	mov.w     [w14+20], w0
    1af6:	6c 00 07    	rcall     0x1bd0 <_sevseg_printError> <.LFB15> <.LFE14>
    1af8:	68 00 37    	bra       0x1bca <.L38> <.LBE2>

00001afa <.L48>:
  } else {
    // otherwise, display the number
    int8_t displayPos = 4;
    1afa:	40 c0 b3    	mov.b     #0x4, w0
    1afc:	00 57 98    	mov.b     w0, [w14+16]

    if (displayNumber)  //if displayNumber is not 0
    1afe:	4e 00 90    	mov.w     [w14+8], w0
    1b00:	de 00 90    	mov.w     [w14+10], w1
    1b02:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1b04:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1b06:	41 00 32    	bra       Z, 0x1b8a <.L50> <.LBE3>

00001b08 <.LBB3>:
    {
			uint8_t i;
      for(i = 0; displayNumber || i <= fracDigits; ++i) {
    1b08:	00 40 eb    	clr.b     w0
    1b0a:	10 57 98    	mov.b     w0, [w14+17]
    1b0c:	34 00 37    	bra       0x1b76 <.L51>

00001b0e <.L55>:
        uint8_t displayDecimal = (fracDigits != 0 && i == fracDigits);
    1b0e:	2e 58 90    	mov.b     [w14+26], w0
    1b10:	00 04 e0    	cp0.b     w0
    1b12:	06 00 32    	bra       Z, 0x1b20 <.L52>
    1b14:	9e 50 90    	mov.b     [w14+17], w1
    1b16:	2e 58 90    	mov.b     [w14+26], w0
    1b18:	80 cf 50    	sub.b     w1, w0, [w15]
    1b1a:	02 00 3a    	bra       NZ, 0x1b20 <.L52>
    1b1c:	10 00 20    	mov.w     #0x1, w0
    1b1e:	01 00 37    	bra       0x1b22 <.L53>

00001b20 <.L52>:
    1b20:	00 00 eb    	clr.w     w0

00001b22 <.L53>:
    1b22:	20 57 98    	mov.b     w0, [w14+18]
        sevseg_writeDigitNum(ptr, displayPos--, displayNumber % base, displayDecimal);
    1b24:	3e 58 90    	mov.b     [w14+27], w0
    1b26:	00 80 fb    	ze        w0, w0
    1b28:	80 00 eb    	clr.w     w1
    1b2a:	4e 02 90    	mov.w     [w14+8], w4
    1b2c:	de 02 90    	mov.w     [w14+10], w5
    1b2e:	00 01 be    	mov.d     w0, w2
    1b30:	04 00 be    	mov.d     w4, w0
    1b32:	d8 fc 07    	rcall     0x14e4 <___umodsi3>
    1b34:	80 40 78    	mov.b     w0, w1
    1b36:	0e 50 90    	mov.b     [w14+16], w0
    1b38:	0e 51 90    	mov.b     [w14+16], w2
    1b3a:	02 41 e9    	dec.b     w2, w2
    1b3c:	02 57 98    	mov.b     w2, [w14+16]
    1b3e:	ae 51 90    	mov.b     [w14+18], w3
    1b40:	01 41 78    	mov.b     w1, w2
    1b42:	80 40 78    	mov.b     w0, w1
    1b44:	2e 08 90    	mov.w     [w14+20], w0
    1b46:	0e ff 07    	rcall     0x1964 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
        if(displayPos == 2) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    1b48:	0e 50 90    	mov.b     [w14+16], w0
    1b4a:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1b4c:	08 00 3a    	bra       NZ, 0x1b5e <.L54>
    1b4e:	0e 50 90    	mov.b     [w14+16], w0
    1b50:	8e 50 90    	mov.b     [w14+16], w1
    1b52:	81 40 e9    	dec.b     w1, w1
    1b54:	01 57 98    	mov.b     w1, [w14+16]
    1b56:	00 01 eb    	clr.w     w2
    1b58:	80 40 78    	mov.b     w0, w1
    1b5a:	2e 08 90    	mov.w     [w14+20], w0
    1b5c:	f1 fe 07    	rcall     0x1940 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00001b5e <.L54>:
        displayNumber /= base;
    1b5e:	3e 58 90    	mov.b     [w14+27], w0
    1b60:	00 80 fb    	ze        w0, w0
    1b62:	80 00 eb    	clr.w     w1
    1b64:	00 01 be    	mov.d     w0, w2
    1b66:	4e 00 90    	mov.w     [w14+8], w0
    1b68:	de 00 90    	mov.w     [w14+10], w1
    1b6a:	ac fc 07    	rcall     0x14c4 <___udivsi3>
    1b6c:	40 07 98    	mov.w     w0, [w14+8]
    1b6e:	51 07 98    	mov.w     w1, [w14+10]

00001b70 <.LBE4>:
    1b70:	1e 50 90    	mov.b     [w14+17], w0
    1b72:	00 40 e8    	inc.b     w0, w0
    1b74:	10 57 98    	mov.b     w0, [w14+17]

00001b76 <.L51>:
    1b76:	4e 00 90    	mov.w     [w14+8], w0
    1b78:	de 00 90    	mov.w     [w14+10], w1
    1b7a:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1b7c:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1b7e:	c7 ff 3a    	bra       NZ, 0x1b0e <.L55> <.LBB4>
    1b80:	9e 50 90    	mov.b     [w14+17], w1
    1b82:	2e 58 90    	mov.b     [w14+26], w0
    1b84:	80 cf 50    	sub.b     w1, w0, [w15]
    1b86:	c3 ff 36    	bra       LEU, 0x1b0e <.L55> <.LBB4>
    1b88:	09 00 37    	bra       0x1b9c <.L56>

00001b8a <.L50>:
      }
    }
    else {
      sevseg_writeDigitNum(ptr, displayPos--, 0, 0);
    1b8a:	0e 50 90    	mov.b     [w14+16], w0
    1b8c:	8e 50 90    	mov.b     [w14+16], w1
    1b8e:	81 40 e9    	dec.b     w1, w1
    1b90:	01 57 98    	mov.b     w1, [w14+16]
    1b92:	80 41 eb    	clr.b     w3
    1b94:	00 41 eb    	clr.b     w2
    1b96:	80 40 78    	mov.b     w0, w1
    1b98:	2e 08 90    	mov.w     [w14+20], w0
    1b9a:	e4 fe 07    	rcall     0x1964 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

00001b9c <.L56>:
    }

    // display negative sign if negative
    if(isNegative) sevseg_writeDigitRaw(ptr, displayPos--, 0x40);
    1b9c:	1e 40 90    	mov.b     [w14+1], w0
    1b9e:	00 04 e0    	cp0.b     w0
    1ba0:	11 00 32    	bra       Z, 0x1bc4 <.L58>
    1ba2:	0e 50 90    	mov.b     [w14+16], w0
    1ba4:	8e 50 90    	mov.b     [w14+16], w1
    1ba6:	81 40 e9    	dec.b     w1, w1
    1ba8:	01 57 98    	mov.b     w1, [w14+16]
    1baa:	02 04 20    	mov.w     #0x40, w2
    1bac:	80 40 78    	mov.b     w0, w1
    1bae:	2e 08 90    	mov.w     [w14+20], w0
    1bb0:	c7 fe 07    	rcall     0x1940 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

    // clear remaining display positions
    while(displayPos >= 0) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    1bb2:	08 00 37    	bra       0x1bc4 <.L58>

00001bb4 <.L59>:
    1bb4:	0e 50 90    	mov.b     [w14+16], w0
    1bb6:	8e 50 90    	mov.b     [w14+16], w1
    1bb8:	81 40 e9    	dec.b     w1, w1
    1bba:	01 57 98    	mov.b     w1, [w14+16]
    1bbc:	00 01 eb    	clr.w     w2
    1bbe:	80 40 78    	mov.b     w0, w1
    1bc0:	2e 08 90    	mov.w     [w14+20], w0
    1bc2:	be fe 07    	rcall     0x1940 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00001bc4 <.L58>:
    1bc4:	0e 50 90    	mov.b     [w14+16], w0
    1bc6:	00 04 e0    	cp0.b     w0
    1bc8:	f5 ff 3d    	bra       GE, 0x1bb4 <.L59>

00001bca <.L38>:
  }
}
    1bca:	4f 04 78    	mov.w     [--w15], w8
    1bcc:	00 80 fa    	ulnk      
    1bce:	00 00 06    	return    

00001bd0 <_sevseg_printError>:

void sevseg_printError(_7SEGMENT* ptr){
    1bd0:	04 00 fa    	lnk       #0x4
    1bd2:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
  for(i = 0; i < SEVENSEG_DIGITS; ++i) {
    1bd4:	00 40 eb    	clr.b     w0
    1bd6:	00 4f 78    	mov.b     w0, [w14]
    1bd8:	0b 00 37    	bra       0x1bf0 <.L61>

00001bda <.L64>:
    sevseg_writeDigitRaw(ptr, i, (i == 2 ? 0x00 : 0x40));
    1bda:	1e 40 78    	mov.b     [w14], w0
    1bdc:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1bde:	02 00 3a    	bra       NZ, 0x1be4 <.L62>
    1be0:	00 00 eb    	clr.w     w0
    1be2:	01 00 37    	bra       0x1be6 <.L63>

00001be4 <.L62>:
    1be4:	00 04 20    	mov.w     #0x40, w0

00001be6 <.L63>:
    1be6:	00 01 78    	mov.w     w0, w2
    1be8:	9e 40 78    	mov.b     [w14], w1
    1bea:	1e 00 90    	mov.w     [w14+2], w0
    1bec:	a9 fe 07    	rcall     0x1940 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    1bee:	1e 4f e8    	inc.b     [w14], [w14]

00001bf0 <.L61>:
    1bf0:	1e 40 78    	mov.b     [w14], w0
    1bf2:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1bf4:	f2 ff 36    	bra       LEU, 0x1bda <.L64>
  }
}
    1bf6:	00 80 fa    	ulnk      
    1bf8:	00 00 06    	return    

00001bfa <_sevseg_writeColon>:


void sevseg_writeColon(_7SEGMENT* ptr){
    1bfa:	02 00 fa    	lnk       #0x2
    1bfc:	00 0f 78    	mov.w     w0, [w14]
  /*
  Wire.beginTransmission(i2c_addr);
  Wire.write((uint8_t)0x04);

  Wire.write(displaybuffer[2] & 0xFF);
  Wire.write(displaybuffer[2] >> 8);

  Wire.endTransmission();
  */
  i2c_start();
    1bfe:	33 00 07    	rcall     0x1c66 <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->super.i2c_addr);
    1c00:	1e 00 78    	mov.w     [w14], w0
    1c02:	00 50 90    	mov.b     [w0+16], w0
    1c04:	00 80 fb    	ze        w0, w0
    1c06:	7e 00 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte((uint8_t)0x04); // start at address $02
    1c08:	40 00 20    	mov.w     #0x4, w0
    1c0a:	7c 00 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] & 0xFF);
    1c0c:	1e 00 78    	mov.w     [w14], w0
    1c0e:	20 00 90    	mov.w     [w0+4], w0
    1c10:	80 00 78    	mov.w     w0, w1
    1c12:	f0 0f 20    	mov.w     #0xff, w0
    1c14:	00 80 60    	and.w     w1, w0, w0
    1c16:	76 00 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] >> 8);
    1c18:	1e 00 78    	mov.w     [w14], w0
    1c1a:	20 00 90    	mov.w     [w0+4], w0
    1c1c:	48 00 de    	lsr.w     w0, #0x8, w0
    1c1e:	72 00 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1c20:	56 00 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1c22:	00 80 fa    	ulnk      
    1c24:	00 00 06    	return    

00001c26 <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    1c26:	08 00 fa    	lnk       #0x8
    1c28:	20 07 98    	mov.w     w0, [w14+4]
    1c2a:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    1c2c:	60 00 b8    	mul.uu    w0, #0x0, w0
    1c2e:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    1c30:	05 00 37    	bra       0x1c3c <.L2>

00001c32 <.L3>:
        __asm__("nop");
    1c32:	00 00 00    	nop       
        count +=1;
    1c34:	12 00 20    	mov.w     #0x1, w2
    1c36:	03 00 20    	mov.w     #0x0, w3
    1c38:	1e 0f 41    	add.w     w2, [w14], [w14]
    1c3a:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00001c3c <.L2>:
    1c3c:	2e 00 90    	mov.w     [w14+4], w0
    1c3e:	be 00 90    	mov.w     [w14+6], w1
    1c40:	1e 01 be    	mov.d     [w14], w2
    1c42:	80 0f 51    	sub.w     w2, w0, [w15]
    1c44:	81 8f 59    	subb.w    w3, w1, [w15]
    1c46:	f5 ff 39    	bra       NC, 0x1c32 <.L3>
    }
}
    1c48:	00 80 fa    	ulnk      
    1c4a:	00 00 06    	return    

00001c4c <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    1c4c:	04 00 fa    	lnk       #0x4
    1c4e:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    1c50:	1e 00 90    	mov.w     [w14+2], w0
    1c52:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    1c54:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    1c56:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    1c58:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    1c5a:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    1c5c:	80 13 80    	mov.w     0x270, w0
    1c5e:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    1c60:	36 00 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1c62:	00 80 fa    	ulnk      
    1c64:	00 00 06    	return    

00001c66 <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    1c66:	02 00 fa    	lnk       #0x2
   int x = 0;
    1c68:	00 00 eb    	clr.w     w0
    1c6a:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    1c6c:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    1c6e:	a0 00 20    	mov.w     #0xa, w0
    1c70:	01 00 20    	mov.w     #0x0, w1
    1c72:	d9 ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    1c74:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    1c76:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    1c78:	07 00 37    	bra       0x1c88 <.L6>

00001c7a <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    1c7a:	10 00 20    	mov.w     #0x1, w0
    1c7c:	01 00 20    	mov.w     #0x0, w1
    1c7e:	d3 ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1c80:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    1c82:	1e 00 78    	mov.w     [w14], w0
    1c84:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1c86:	05 00 3c    	bra       GT, 0x1c92 <.L9>

00001c88 <.L6>:
    1c88:	b0 13 80    	mov.w     0x276, w0
    1c8a:	61 00 60    	and.w     w0, #0x1, w0
    1c8c:	00 00 e0    	cp0.w     w0
    1c8e:	f5 ff 3a    	bra       NZ, 0x1c7a <.L8>
    1c90:	01 00 37    	bra       0x1c94 <.L7>

00001c92 <.L9>:
      break;
    1c92:	00 00 00    	nop       

00001c94 <.L7>:
   }
   delay_by_nop(2);
    1c94:	20 00 20    	mov.w     #0x2, w0
    1c96:	01 00 20    	mov.w     #0x0, w1
    1c98:	c6 ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1c9a:	00 80 fa    	ulnk      
    1c9c:	00 00 06    	return    

00001c9e <_i2c_restart>:

void i2c_restart(void){
    1c9e:	02 00 fa    	lnk       #0x2
   int x = 0;
    1ca0:	00 00 eb    	clr.w     w0
    1ca2:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    1ca4:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    1ca6:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    1ca8:	07 00 37    	bra       0x1cb8 <.L11>

00001caa <.L13>:
      delay_by_nop(1);
    1caa:	10 00 20    	mov.w     #0x1, w0
    1cac:	01 00 20    	mov.w     #0x0, w1
    1cae:	bb ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1cb0:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    1cb2:	1e 00 78    	mov.w     [w14], w0
    1cb4:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1cb6:	05 00 3c    	bra       GT, 0x1cc2 <.L14>

00001cb8 <.L11>:
    1cb8:	b0 13 80    	mov.w     0x276, w0
    1cba:	62 00 60    	and.w     w0, #0x2, w0
    1cbc:	00 00 e0    	cp0.w     w0
    1cbe:	f5 ff 3a    	bra       NZ, 0x1caa <.L13>
    1cc0:	01 00 37    	bra       0x1cc4 <.L12>

00001cc2 <.L14>:
    1cc2:	00 00 00    	nop       

00001cc4 <.L12>:
   }
   delay_by_nop(2);
    1cc4:	20 00 20    	mov.w     #0x2, w0
    1cc6:	01 00 20    	mov.w     #0x0, w1
    1cc8:	ae ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1cca:	00 80 fa    	ulnk      
    1ccc:	00 00 06    	return    

00001cce <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    1cce:	02 00 fa    	lnk       #0x2
   int x = 0;
    1cd0:	00 00 eb    	clr.w     w0
    1cd2:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    1cd4:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    1cd6:	07 00 37    	bra       0x1ce6 <.L16>

00001cd8 <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    1cd8:	10 00 20    	mov.w     #0x1, w0
    1cda:	01 00 20    	mov.w     #0x0, w1
    1cdc:	a4 ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    1cde:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    1ce0:	1e 00 78    	mov.w     [w14], w0
    1ce2:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1ce4:	05 00 3c    	bra       GT, 0x1cf0 <.L19>

00001ce6 <.L16>:
    1ce6:	b0 13 80    	mov.w     0x276, w0
    1ce8:	64 00 60    	and.w     w0, #0x4, w0
    1cea:	00 00 e0    	cp0.w     w0
    1cec:	f5 ff 3a    	bra       NZ, 0x1cd8 <.L18>
    1cee:	01 00 37    	bra       0x1cf2 <.L17>

00001cf0 <.L19>:
    1cf0:	00 00 00    	nop       

00001cf2 <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    1cf2:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    1cf4:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    1cf6:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    1cf8:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    1cfa:	40 01 20    	mov.w     #0x14, w0
    1cfc:	01 00 20    	mov.w     #0x0, w1
    1cfe:	93 ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1d00:	00 80 fa    	ulnk      
    1d02:	00 00 06    	return    

00001d04 <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    1d04:	04 00 fa    	lnk       #0x4
    1d06:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    1d08:	00 00 00    	nop       

00001d0a <.L21>:
    1d0a:	c0 13 80    	mov.w     0x278, w0
    1d0c:	61 00 60    	and.w     w0, #0x1, w0
    1d0e:	00 00 e0    	cp0.w     w0
    1d10:	fc ff 3a    	bra       NZ, 0x1d0a <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    1d12:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    1d14:	1e 00 90    	mov.w     [w14+2], w0
    1d16:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    1d18:	00 00 eb    	clr.w     w0
    1d1a:	00 0f 78    	mov.w     w0, [w14]
    1d1c:	09 00 37    	bra       0x1d30 <.L22>

00001d1e <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    1d1e:	c1 13 80    	mov.w     0x278, w1
    1d20:	00 00 24    	mov.w     #0x4000, w0
    1d22:	00 80 60    	and.w     w1, w0, w0
    1d24:	00 00 e0    	cp0.w     w0
    1d26:	09 00 32    	bra       Z, 0x1d3a <.L29>
      delay_by_nop(1); }
    1d28:	10 00 20    	mov.w     #0x1, w0
    1d2a:	01 00 20    	mov.w     #0x0, w1
    1d2c:	7c ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1d2e:	1e 0f e8    	inc.w     [w14], [w14]

00001d30 <.L22>:
    1d30:	30 1f 20    	mov.w     #0x1f3, w0
    1d32:	9e 00 78    	mov.w     [w14], w1
    1d34:	80 8f 50    	sub.w     w1, w0, [w15]
    1d36:	f3 ff 34    	bra       LE, 0x1d1e <.L25>
    1d38:	01 00 37    	bra       0x1d3c <.L24>

00001d3a <.L29>:
    1d3a:	00 00 00    	nop       

00001d3c <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    1d3c:	40 1f 20    	mov.w     #0x1f4, w0
    1d3e:	9e 00 78    	mov.w     [w14], w1
    1d40:	80 8f 50    	sub.w     w1, w0, [w15]
    1d42:	02 00 3a    	bra       NZ, 0x1d48 <.L26>
        return(1); }    // return 1 to indicate failure
    1d44:	10 c0 b3    	mov.b     #0x1, w0
    1d46:	0c 00 37    	bra       0x1d60 <.L27>

00001d48 <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    1d48:	c1 13 80    	mov.w     0x278, w1
    1d4a:	00 00 28    	mov.w     #0x8000, w0
    1d4c:	00 80 60    	and.w     w1, w0, w0
    1d4e:	00 00 e0    	cp0.w     w0
    1d50:	03 00 32    	bra       Z, 0x1d58 <.L28>
      reset_i2c_bus();
    1d52:	bd ff 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    1d54:	10 c0 b3    	mov.b     #0x1, w0
    1d56:	04 00 37    	bra       0x1d60 <.L27>

00001d58 <.L28>:

   delay_by_nop(2);
    1d58:	20 00 20    	mov.w     #0x2, w0
    1d5a:	01 00 20    	mov.w     #0x0, w1
    1d5c:	64 ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    1d5e:	00 40 eb    	clr.b     w0

00001d60 <.L27>:
}
    1d60:	00 80 fa    	ulnk      
    1d62:	00 00 06    	return    

00001d64 <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    1d64:	04 00 fa    	lnk       #0x4
   int i = 0;
    1d66:	00 00 eb    	clr.w     w0
    1d68:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1d6a:	00 40 eb    	clr.b     w0
    1d6c:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1d6e:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    1d70:	05 00 37    	bra       0x1d7c <.L31>

00001d72 <.L33>:
      i ++;
    1d72:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    1d74:	00 7d 20    	mov.w     #0x7d0, w0
    1d76:	9e 00 78    	mov.w     [w14], w1
    1d78:	80 8f 50    	sub.w     w1, w0, [w15]
    1d7a:	05 00 3c    	bra       GT, 0x1d86 <.L34>

00001d7c <.L31>:
    1d7c:	c0 13 80    	mov.w     0x278, w0
    1d7e:	62 00 60    	and.w     w0, #0x2, w0
    1d80:	00 00 e0    	cp0.w     w0
    1d82:	f7 ff 32    	bra       Z, 0x1d72 <.L33>
    1d84:	01 00 37    	bra       0x1d88 <.L32>

00001d86 <.L34>:
    1d86:	00 00 00    	nop       

00001d88 <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    1d88:	80 13 80    	mov.w     0x270, w0
    1d8a:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    1d8c:	2e 40 90    	mov.b     [w14+2], w0
}
    1d8e:	00 80 fa    	ulnk      
    1d90:	00 00 06    	return    

00001d92 <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    1d92:	04 00 fa    	lnk       #0x4
   int i = 0;
    1d94:	00 00 eb    	clr.w     w0
    1d96:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1d98:	00 40 eb    	clr.b     w0
    1d9a:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1d9c:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    1d9e:	05 00 37    	bra       0x1daa <.L36>

00001da0 <.L38>:
      i++;
    1da0:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1da2:	00 7d 20    	mov.w     #0x7d0, w0
    1da4:	9e 00 78    	mov.w     [w14], w1
    1da6:	80 8f 50    	sub.w     w1, w0, [w15]
    1da8:	05 00 3c    	bra       GT, 0x1db4 <.L39>

00001daa <.L36>:
    1daa:	c0 13 80    	mov.w     0x278, w0
    1dac:	62 00 60    	and.w     w0, #0x2, w0
    1dae:	00 00 e0    	cp0.w     w0
    1db0:	f7 ff 32    	bra       Z, 0x1da0 <.L38>
    1db2:	01 00 37    	bra       0x1db6 <.L37>

00001db4 <.L39>:
    1db4:	00 00 00    	nop       

00001db6 <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    1db6:	80 13 80    	mov.w     0x270, w0
    1db8:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    1dba:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    1dbc:	a0 00 20    	mov.w     #0xa, w0
    1dbe:	01 00 20    	mov.w     #0x0, w1
    1dc0:	32 ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    1dc2:	2e 40 90    	mov.b     [w14+2], w0
}
    1dc4:	00 80 fa    	ulnk      
    1dc6:	00 00 06    	return    

00001dc8 <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    1dc8:	04 00 fa    	lnk       #0x4
   int i = 0;
    1dca:	00 00 eb    	clr.w     w0
    1dcc:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1dce:	00 40 eb    	clr.b     w0
    1dd0:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1dd2:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    1dd4:	05 00 37    	bra       0x1de0 <.L41>

00001dd6 <.L43>:
      i++;
    1dd6:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1dd8:	00 7d 20    	mov.w     #0x7d0, w0
    1dda:	9e 00 78    	mov.w     [w14], w1
    1ddc:	80 8f 50    	sub.w     w1, w0, [w15]
    1dde:	05 00 3c    	bra       GT, 0x1dea <.L44>

00001de0 <.L41>:
    1de0:	c0 13 80    	mov.w     0x278, w0
    1de2:	62 00 60    	and.w     w0, #0x2, w0
    1de4:	00 00 e0    	cp0.w     w0
    1de6:	f7 ff 32    	bra       Z, 0x1dd6 <.L43>
    1de8:	01 00 37    	bra       0x1dec <.L42>

00001dea <.L44>:
    1dea:	00 00 00    	nop       

00001dec <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    1dec:	80 13 80    	mov.w     0x270, w0
    1dee:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    1df0:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    1df2:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    1df4:	a0 00 20    	mov.w     #0xa, w0
    1df6:	01 00 20    	mov.w     #0x0, w1
    1df8:	16 ff 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    1dfa:	2e 40 90    	mov.b     [w14+2], w0
}
    1dfc:	00 80 fa    	ulnk      
    1dfe:	00 00 06    	return    

00001e00 <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    1e00:	04 00 fa    	lnk       #0x4
    1e02:	00 4f 78    	mov.b     w0, [w14]
    1e04:	11 47 98    	mov.b     w1, [w14+1]
    1e06:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    1e08:	2e ff 07    	rcall     0x1c66 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    1e0a:	1e 00 fb    	se        [w14], w0
    1e0c:	80 00 78    	mov.w     w0, w1
    1e0e:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e10:	00 80 60    	and.w     w1, w0, w0
    1e12:	78 ff 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1e14:	1e 40 90    	mov.b     [w14+1], w0
    1e16:	00 00 fb    	se        w0, w0
    1e18:	75 ff 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    1e1a:	2e 40 90    	mov.b     [w14+2], w0
    1e1c:	00 00 fb    	se        w0, w0
    1e1e:	72 ff 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    1e20:	56 ff 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1e22:	00 80 fa    	ulnk      
    1e24:	00 00 06    	return    

00001e26 <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    1e26:	04 00 fa    	lnk       #0x4
    1e28:	20 47 98    	mov.b     w0, [w14+2]
    1e2a:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    1e2c:	1c ff 07    	rcall     0x1c66 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    1e2e:	2e 40 90    	mov.b     [w14+2], w0
    1e30:	00 00 fb    	se        w0, w0
    1e32:	68 ff 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1e34:	3e 40 90    	mov.b     [w14+3], w0
    1e36:	00 00 fb    	se        w0, w0
    1e38:	65 ff 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    1e3a:	a0 00 20    	mov.w     #0xa, w0
    1e3c:	01 00 20    	mov.w     #0x0, w1
    1e3e:	f3 fe 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   i2c_restart();
    1e40:	2e ff 07    	rcall     0x1c9e <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    1e42:	2e 40 90    	mov.b     [w14+2], w0
    1e44:	00 04 a0    	bset.b    w0, #0x0
    1e46:	00 00 fb    	se        w0, w0
    1e48:	5d ff 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    1e4a:	8c ff 07    	rcall     0x1d64 <_i2c_read> <.LFB6> <.LFE5>
    1e4c:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    1e4e:	3f ff 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    1e50:	1e 40 78    	mov.b     [w14], w0
}
    1e52:	00 80 fa    	ulnk      
    1e54:	00 00 06    	return    

00001e56 <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is there, 0 means it is not there
unsigned char I2Cpoll(char addr){
    1e56:	04 00 fa    	lnk       #0x4
    1e58:	20 47 98    	mov.b     w0, [w14+2]
    unsigned char temp = 0;
    1e5a:	00 40 eb    	clr.b     w0
    1e5c:	00 4f 78    	mov.b     w0, [w14]
    i2c_start();
    1e5e:	03 ff 07    	rcall     0x1c66 <_i2c_start> <.LFB2> <.LFE1>
    temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    1e60:	2e 40 90    	mov.b     [w14+2], w0
    1e62:	00 00 fb    	se        w0, w0
    1e64:	80 00 78    	mov.w     w0, w1
    1e66:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e68:	00 80 60    	and.w     w1, w0, w0
    1e6a:	4c ff 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e6c:	00 4f 78    	mov.b     w0, [w14]
    reset_i2c_bus();
    1e6e:	2f ff 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
    if (temp == 0) {
    1e70:	1e 40 78    	mov.b     [w14], w0
    1e72:	00 04 e0    	cp0.b     w0
    1e74:	02 00 3a    	bra       NZ, 0x1e7a <.L48>
        return 1; // We found it, no error
    1e76:	10 c0 b3    	mov.b     #0x1, w0
    1e78:	01 00 37    	bra       0x1e7c <.L49>

00001e7a <.L48>:
    } else return 0;
    1e7a:	00 40 eb    	clr.b     w0

00001e7c <.L49>:
}
    1e7c:	00 80 fa    	ulnk      
    1e7e:	00 00 06    	return    

00001e80 <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    1e80:	08 00 fa    	lnk       #0x8
    1e82:	20 47 98    	mov.b     w0, [w14+2]
    1e84:	21 07 98    	mov.w     w1, [w14+4]
    1e86:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    1e88:	00 40 eb    	clr.b     w0
    1e8a:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    1e8c:	ec fe 07    	rcall     0x1c66 <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    1e8e:	2e 40 90    	mov.b     [w14+2], w0
    1e90:	00 00 fb    	se        w0, w0
    1e92:	80 00 78    	mov.w     w0, w1
    1e94:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e96:	00 80 60    	and.w     w1, w0, w0
    1e98:	35 ff 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e9a:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    1e9c:	00 40 eb    	clr.b     w0
    1e9e:	10 47 98    	mov.b     w0, [w14+1]
    1ea0:	0d 00 37    	bra       0x1ebc <.L51>

00001ea2 <.L52>:
    err |= send_i2c_byte(dat[j]);
    1ea2:	1e 40 90    	mov.b     [w14+1], w0
    1ea4:	00 80 fb    	ze        w0, w0
    1ea6:	ae 00 90    	mov.w     [w14+4], w1
    1ea8:	00 80 40    	add.w     w1, w0, w0
    1eaa:	10 40 78    	mov.b     [w0], w0
    1eac:	00 00 fb    	se        w0, w0
    1eae:	2a ff 07    	rcall     0x1d04 <_send_i2c_byte> <.LFB5> <.LFE4>
    1eb0:	9e 40 78    	mov.b     [w14], w1
    1eb2:	01 40 70    	ior.b     w0, w1, w0
    1eb4:	00 4f 78    	mov.b     w0, [w14]
    1eb6:	1e 40 90    	mov.b     [w14+1], w0
    1eb8:	00 40 e8    	inc.b     w0, w0
    1eba:	10 47 98    	mov.b     w0, [w14+1]

00001ebc <.L51>:
    1ebc:	9e 40 90    	mov.b     [w14+1], w1
    1ebe:	6e 40 90    	mov.b     [w14+6], w0
    1ec0:	80 cf 50    	sub.b     w1, w0, [w15]
    1ec2:	ef ff 39    	bra       NC, 0x1ea2 <.L52>
  }
  reset_i2c_bus();
    1ec4:	04 ff 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    1ec6:	1e 40 78    	mov.b     [w14], w0
}
    1ec8:	00 80 fa    	ulnk      
    1eca:	00 00 06    	return    

00001ecc <_i2c2_init>:

////////////////////////////////////////////////////////////////////////////////
// I2C2 ////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// initiates I2C3 module to baud rate BRG
void i2c2_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    1ecc:	04 00 fa    	lnk       #0x4
    1ece:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C2BRG = BRG;           // Sets freq to 100kHz
    1ed0:	1e 00 90    	mov.w     [w14+2], w0
    1ed2:	a0 10 88    	mov.w     w0, 0x214
   I2C2CONbits.I2CEN = 0;	// Disable I2C Mode
    1ed4:	17 e2 a9    	bclr.b    0x217, #0x7
   I2C2CONbits.DISSLW = 1;	// Disable slew rate control
    1ed6:	17 22 a8    	bset.b    0x217, #0x1
   IFS3bits.MI2C2IF = 0;	 // Clear Interrupt
    1ed8:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2CONbits.I2CEN = 1;	// Enable I2C Mode
    1eda:	17 e2 a8    	bset.b    0x217, #0x7
   temp = I2C2RCV;	 // read buffer to clear buffer full
    1edc:	80 10 80    	mov.w     0x210, w0
    1ede:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    1ee0:	f6 fe 07    	rcall     0x1cce <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1ee2:	00 80 fa    	ulnk      
    1ee4:	00 00 06    	return    

00001ee6 <_i2c2_start>:

//function iniates a start condition on bus
void i2c2_start(void){
    1ee6:	02 00 fa    	lnk       #0x2
   int x = 0;
    1ee8:	00 00 eb    	clr.w     w0
    1eea:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.ACKDT = 0;	//Reset any previous Ack
    1eec:	16 a2 a9    	bclr.b    0x216, #0x5
   delay_by_nop(10);
    1eee:	a0 00 20    	mov.w     #0xa, w0
    1ef0:	01 00 20    	mov.w     #0x0, w1
    1ef2:	99 fe 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C2CONbits.SEN = 1;	//Initiate Start condition
    1ef4:	16 02 a8    	bset.b    0x216, #0x0
   __asm__("nop");
    1ef6:	00 00 00    	nop       

   while (I2C2CONbits.SEN){    //the hardware will automatically clear Start Bit
    1ef8:	07 00 37    	bra       0x1f08 <.L55>

00001efa <.L57>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    1efa:	10 00 20    	mov.w     #0x1, w0
    1efc:	01 00 20    	mov.w     #0x0, w1
    1efe:	93 fe 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1f00:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    1f02:	1e 00 78    	mov.w     [w14], w0
    1f04:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f06:	05 00 3c    	bra       GT, 0x1f12 <.L58>

00001f08 <.L55>:
    1f08:	b0 10 80    	mov.w     0x216, w0
    1f0a:	61 00 60    	and.w     w0, #0x1, w0
    1f0c:	00 00 e0    	cp0.w     w0
    1f0e:	f5 ff 3a    	bra       NZ, 0x1efa <.L57>
    1f10:	01 00 37    	bra       0x1f14 <.L56>

00001f12 <.L58>:
      break;
    1f12:	00 00 00    	nop       

00001f14 <.L56>:
   }
   delay_by_nop(2);
    1f14:	20 00 20    	mov.w     #0x2, w0
    1f16:	01 00 20    	mov.w     #0x0, w1
    1f18:	86 fe 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1f1a:	00 80 fa    	ulnk      
    1f1c:	00 00 06    	return    

00001f1e <_i2c2_restart>:

void i2c2_restart(void){
    1f1e:	02 00 fa    	lnk       #0x2
   int x = 0;
    1f20:	00 00 eb    	clr.w     w0
    1f22:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.RSEN = 1;	//Initiate restart condition
    1f24:	16 22 a8    	bset.b    0x216, #0x1
   __asm__("nop");
    1f26:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C2CONbits.RSEN){
    1f28:	07 00 37    	bra       0x1f38 <.L60>

00001f2a <.L62>:
      delay_by_nop(1);
    1f2a:	10 00 20    	mov.w     #0x1, w0
    1f2c:	01 00 20    	mov.w     #0x0, w1
    1f2e:	7b fe 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1f30:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    1f32:	1e 00 78    	mov.w     [w14], w0
    1f34:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f36:	05 00 3c    	bra       GT, 0x1f42 <.L63>

00001f38 <.L60>:
    1f38:	b0 10 80    	mov.w     0x216, w0
    1f3a:	62 00 60    	and.w     w0, #0x2, w0
    1f3c:	00 00 e0    	cp0.w     w0
    1f3e:	f5 ff 3a    	bra       NZ, 0x1f2a <.L62>
    1f40:	01 00 37    	bra       0x1f44 <.L61>

00001f42 <.L63>:
    1f42:	00 00 00    	nop       

00001f44 <.L61>:
   }
   delay_by_nop(2);
    1f44:	20 00 20    	mov.w     #0x2, w0
    1f46:	01 00 20    	mov.w     #0x0, w1
    1f48:	6e fe 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1f4a:	00 80 fa    	ulnk      
    1f4c:	00 00 06    	return    

00001f4e <_reset_i2c2_bus>:


//Resets the I2C bus to Idle
void reset_i2c2_bus(void){
    1f4e:	02 00 fa    	lnk       #0x2
   int x = 0;
    1f50:	00 00 eb    	clr.w     w0
    1f52:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.PEN = 1;     //initiate stop bit
    1f54:	16 42 a8    	bset.b    0x216, #0x2
   while (I2C2CONbits.PEN) {     //wait for hardware clear of stop bit
    1f56:	07 00 37    	bra       0x1f66 <.L65>

00001f58 <.L67>:
      // delay_by_nop(1);
      delay_by_nop(1);
    1f58:	10 00 20    	mov.w     #0x1, w0
    1f5a:	01 00 20    	mov.w     #0x0, w1
    1f5c:	64 fe 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    1f5e:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    1f60:	1e 00 78    	mov.w     [w14], w0
    1f62:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f64:	05 00 3c    	bra       GT, 0x1f70 <.L68>

00001f66 <.L65>:
    1f66:	b0 10 80    	mov.w     0x216, w0
    1f68:	64 00 60    	and.w     w0, #0x4, w0
    1f6a:	00 00 e0    	cp0.w     w0
    1f6c:	f5 ff 3a    	bra       NZ, 0x1f58 <.L67>
    1f6e:	01 00 37    	bra       0x1f72 <.L66>

00001f70 <.L68>:
    1f70:	00 00 00    	nop       

00001f72 <.L66>:
   }

   I2C2CONbits.RCEN = 0;
    1f72:	16 62 a9    	bclr.b    0x216, #0x3
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    1f74:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2STATbits.IWCOL = 0;
    1f76:	18 e2 a9    	bclr.b    0x218, #0x7
   I2C2STATbits.BCL = 0;
    1f78:	19 42 a9    	bclr.b    0x219, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    1f7a:	40 01 20    	mov.w     #0x14, w0
    1f7c:	01 00 20    	mov.w     #0x0, w1
    1f7e:	53 fe 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1f80:	00 80 fa    	ulnk      
    1f82:	00 00 06    	return    

00001f84 <_send_i2c2_byte>:


//basic I2C byte send
char send_i2c2_byte(int data){
    1f84:	04 00 fa    	lnk       #0x4
    1f86:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C2STATbits.TBF) { }
    1f88:	00 00 00    	nop       

00001f8a <.L70>:
    1f8a:	c0 10 80    	mov.w     0x218, w0
    1f8c:	61 00 60    	and.w     w0, #0x1, w0
    1f8e:	00 00 e0    	cp0.w     w0
    1f90:	fc ff 3a    	bra       NZ, 0x1f8a <.L70>
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    1f92:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2TRN = data; // load the outgoing data byte
    1f94:	1e 00 90    	mov.w     [w14+2], w0
    1f96:	90 10 88    	mov.w     w0, 0x212

   for (i=0; i<500; i++){           // wait for transmission
    1f98:	00 00 eb    	clr.w     w0
    1f9a:	00 0f 78    	mov.w     w0, [w14]
    1f9c:	09 00 37    	bra       0x1fb0 <.L71>

00001f9e <.L74>:
      if (!I2C2STATbits.TRSTAT) break; // if master transmit not in progress break
    1f9e:	c1 10 80    	mov.w     0x218, w1
    1fa0:	00 00 24    	mov.w     #0x4000, w0
    1fa2:	00 80 60    	and.w     w1, w0, w0
    1fa4:	00 00 e0    	cp0.w     w0
    1fa6:	09 00 32    	bra       Z, 0x1fba <.L78>
      delay_by_nop(1); }
    1fa8:	10 00 20    	mov.w     #0x1, w0
    1faa:	01 00 20    	mov.w     #0x0, w1
    1fac:	3c fe 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1fae:	1e 0f e8    	inc.w     [w14], [w14]

00001fb0 <.L71>:
    1fb0:	30 1f 20    	mov.w     #0x1f3, w0
    1fb2:	9e 00 78    	mov.w     [w14], w1
    1fb4:	80 8f 50    	sub.w     w1, w0, [w15]
    1fb6:	f3 ff 34    	bra       LE, 0x1f9e <.L74>
    1fb8:	01 00 37    	bra       0x1fbc <.L73>

00001fba <.L78>:
    1fba:	00 00 00    	nop       

00001fbc <.L73>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    1fbc:	40 1f 20    	mov.w     #0x1f4, w0
    1fbe:	9e 00 78    	mov.w     [w14], w1
    1fc0:	80 8f 50    	sub.w     w1, w0, [w15]
    1fc2:	02 00 3a    	bra       NZ, 0x1fc8 <.L75>
        return(1); }    // return 1 to indicate failure
    1fc4:	10 c0 b3    	mov.b     #0x1, w0
    1fc6:	0c 00 37    	bra       0x1fe0 <.L76>

00001fc8 <.L75>:

   if (I2C2STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    1fc8:	c1 10 80    	mov.w     0x218, w1
    1fca:	00 00 28    	mov.w     #0x8000, w0
    1fcc:	00 80 60    	and.w     w1, w0, w0
    1fce:	00 00 e0    	cp0.w     w0
    1fd0:	03 00 32    	bra       Z, 0x1fd8 <.L77>
      reset_i2c2_bus();
    1fd2:	bd ff 07    	rcall     0x1f4e <_reset_i2c2_bus> <.LFB16> <.LFE15>
      return(1); }            // abort if not found
    1fd4:	10 c0 b3    	mov.b     #0x1, w0
    1fd6:	04 00 37    	bra       0x1fe0 <.L76>

00001fd8 <.L77>:

   delay_by_nop(2);
    1fd8:	20 00 20    	mov.w     #0x2, w0
    1fda:	01 00 20    	mov.w     #0x0, w1
    1fdc:	24 fe 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    1fde:	00 40 eb    	clr.b     w0

00001fe0 <.L76>:
}
    1fe0:	00 80 fa    	ulnk      
    1fe2:	00 00 06    	return    

00001fe4 <_i2c2_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c2_read(void){
    1fe4:	04 00 fa    	lnk       #0x4
   int i = 0;
    1fe6:	00 00 eb    	clr.w     w0
    1fe8:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1fea:	00 40 eb    	clr.b     w0
    1fec:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    1fee:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {           //if no response, break
    1ff0:	05 00 37    	bra       0x1ffc <.L80>

00001ff2 <.L82>:
      i ++;
    1ff2:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    1ff4:	00 7d 20    	mov.w     #0x7d0, w0
    1ff6:	9e 00 78    	mov.w     [w14], w1
    1ff8:	80 8f 50    	sub.w     w1, w0, [w15]
    1ffa:	05 00 3c    	bra       GT, 0x2006 <.L83>

00001ffc <.L80>:
    1ffc:	c0 10 80    	mov.w     0x218, w0
    1ffe:	62 00 60    	and.w     w0, #0x2, w0
    2000:	00 00 e0    	cp0.w     w0
    2002:	f7 ff 32    	bra       Z, 0x1ff2 <.L82>
    2004:	01 00 37    	bra       0x2008 <.L81>

00002006 <.L83>:
    2006:	00 00 00    	nop       

00002008 <.L81>:

   data = I2C2RCV;       //get data from I2C2RCV register
    2008:	80 10 80    	mov.w     0x210, w0
    200a:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    200c:	2e 40 90    	mov.b     [w14+2], w0
}
    200e:	00 80 fa    	ulnk      
    2010:	00 00 06    	return    

00002012 <_i2c2_read_ack>:


//function reads data, returns the read data, with ack
char i2c2_read_ack(void){	//does not reset bus!!!
    2012:	04 00 fa    	lnk       #0x4
   int i = 0;
    2014:	00 00 eb    	clr.w     w0
    2016:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2018:	00 40 eb    	clr.b     w0
    201a:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    201c:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    201e:	05 00 37    	bra       0x202a <.L85>

00002020 <.L87>:
      i++;
    2020:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2022:	00 7d 20    	mov.w     #0x7d0, w0
    2024:	9e 00 78    	mov.w     [w14], w1
    2026:	80 8f 50    	sub.w     w1, w0, [w15]
    2028:	05 00 3c    	bra       GT, 0x2034 <.L88>

0000202a <.L85>:
    202a:	c0 10 80    	mov.w     0x218, w0
    202c:	62 00 60    	and.w     w0, #0x2, w0
    202e:	00 00 e0    	cp0.w     w0
    2030:	f7 ff 32    	bra       Z, 0x2020 <.L87>
    2032:	01 00 37    	bra       0x2036 <.L86>

00002034 <.L88>:
    2034:	00 00 00    	nop       

00002036 <.L86>:

   data = I2C2RCV;               //get data from I2C2RCV register
    2036:	80 10 80    	mov.w     0x210, w0
    2038:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKEN = 1;        //start ACK generation
    203a:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    203c:	a0 00 20    	mov.w     #0xa, w0
    203e:	01 00 20    	mov.w     #0x0, w1
    2040:	f2 fd 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2042:	2e 40 90    	mov.b     [w14+2], w0
}
    2044:	00 80 fa    	ulnk      
    2046:	00 00 06    	return    

00002048 <_i2c2_read_nack>:

char i2c2_read_nack(void){	//does not reset bus!!!
    2048:	04 00 fa    	lnk       #0x4
   int i = 0;
    204a:	00 00 eb    	clr.w     w0
    204c:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    204e:	00 40 eb    	clr.b     w0
    2050:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    2052:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    2054:	05 00 37    	bra       0x2060 <.L90>

00002056 <.L92>:
      i++;
    2056:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2058:	00 7d 20    	mov.w     #0x7d0, w0
    205a:	9e 00 78    	mov.w     [w14], w1
    205c:	80 8f 50    	sub.w     w1, w0, [w15]
    205e:	05 00 3c    	bra       GT, 0x206a <.L93>

00002060 <.L90>:
    2060:	c0 10 80    	mov.w     0x218, w0
    2062:	62 00 60    	and.w     w0, #0x2, w0
    2064:	00 00 e0    	cp0.w     w0
    2066:	f7 ff 32    	bra       Z, 0x2056 <.L92>
    2068:	01 00 37    	bra       0x206c <.L91>

0000206a <.L93>:
    206a:	00 00 00    	nop       

0000206c <.L91>:

   data = I2C2RCV;               //get data from I2C2RCV register
    206c:	80 10 80    	mov.w     0x210, w0
    206e:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    2070:	16 a2 a8    	bset.b    0x216, #0x5
   I2C2CONbits.ACKEN = 1;        //start ack generation
    2072:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    2074:	a0 00 20    	mov.w     #0xa, w0
    2076:	01 00 20    	mov.w     #0x0, w1
    2078:	d6 fd 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    207a:	2e 40 90    	mov.b     [w14+2], w0
}
    207c:	00 80 fa    	ulnk      
    207e:	00 00 06    	return    

00002080 <_I2C2poll>:

// function checks if device at addr i bus
// 1 means it is not there, 0 means it is not there
unsigned char I2C2poll(char addr){
    2080:	04 00 fa    	lnk       #0x4
    2082:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    2084:	00 40 eb    	clr.b     w0
    2086:	00 4f 78    	mov.b     w0, [w14]
   i2c2_start();
    2088:	2e ff 07    	rcall     0x1ee6 <_i2c2_start> <.LFB14> <.LFE13>
   temp = send_i2c2_byte((addr) & (0xfffe)); // set /W bit
    208a:	2e 40 90    	mov.b     [w14+2], w0
    208c:	00 00 fb    	se        w0, w0
    208e:	80 00 78    	mov.w     w0, w1
    2090:	e0 ff 2f    	mov.w     #0xfffe, w0
    2092:	00 80 60    	and.w     w1, w0, w0
    2094:	77 ff 07    	rcall     0x1f84 <_send_i2c2_byte> <.LFB17> <.LFE16>
    2096:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c2_bus();
    2098:	5a ff 07    	rcall     0x1f4e <_reset_i2c2_bus> <.LFB16> <.LFE15>
   if (temp == 0) {
    209a:	1e 40 78    	mov.b     [w14], w0
    209c:	00 04 e0    	cp0.b     w0
    209e:	02 00 3a    	bra       NZ, 0x20a4 <.L95>
       return 1; // We found it, no error
    20a0:	10 c0 b3    	mov.b     #0x1, w0
    20a2:	01 00 37    	bra       0x20a6 <.L96>

000020a4 <.L95>:
   } else return 0;
    20a4:	00 40 eb    	clr.b     w0

000020a6 <.L96>:
}
    20a6:	00 80 fa    	ulnk      
    20a8:	00 00 06    	return    

000020aa <_main>:
    20aa:	00 00 fa    	lnk       #0x0
    20ac:	ad 03 07    	rcall     0x2808 <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    20ae:	d0 09 20    	mov.w     #0x9d, w0
    20b0:	0d ff 07    	rcall     0x1ecc <_i2c2_init> <.LFB13> <.LFE12>
    20b2:	80 00 20    	mov.w     #0x8, w0
    20b4:	d0 10 88    	mov.w     w0, 0x21a
    20b6:	1c 22 ef    	clr.w     0x21c
    20b8:	9a 20 a8    	bset.b    0x9a, #0x1
    20ba:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    20bc:	d8 82 a9    	bclr.b    0x2d8, #0x4
    20be:	93 01 07    	rcall     0x23e6 <_init_ajuart> <.L0> <.LFB0> <.LFE11> <.Letext0> <.Ltext0>
    20c0:	80 3e 20    	mov.w     #0x3e8, w0
    20c2:	c4 fd 07    	rcall     0x1c4c <_i2c_init> <.LFB1> <.LFE0>
    20c4:	e0 6b 29    	mov.w     #0x96be, w0
    20c6:	10 40 78    	mov.b     [w0], w0
    20c8:	80 40 78    	mov.b     w0, w1
    20ca:	60 03 21    	mov.w     #0x1036, w0
    20cc:	f9 fa 07    	rcall     0x16c0 <_led_begin> <.L0> <.LFB0> <.Ltext0>
    20ce:	00 02 20    	mov.w     #0x20, w0
    20d0:	20 08 88    	mov.w     w0, 0x104
    20d2:	00 71 22    	mov.w     #0x2710, w0
    20d4:	10 08 88    	mov.w     w0, 0x102
    20d6:	00 21 ef    	clr.w     0x100
    20d8:	84 60 a9    	bclr.b    0x84, #0x3
    20da:	94 60 a8    	bset.b    0x94, #0x3
    20dc:	05 e1 a8    	bset.b    0x105, #0x7
    20de:	00 24 22    	mov.w     #0x2240, w0
    20e0:	00 40 88    	mov.w     w0, 0x800

000020e2 <.L5>:
    20e2:	60 40 80    	mov.w     0x80c, w0
    20e4:	43 01 07    	rcall     0x236c <_dispNumber> <.LFB11> <.LFE10>
    20e6:	00 40 80    	mov.w     0x800, w0
    20e8:	00 00 01    	call      w0
    20ea:	fb ff 37    	bra       0x20e2 <.L5>

000020ec <_firstnum>:
    20ec:	02 00 fa    	lnk       #0x2
    20ee:	2f 01 07    	rcall     0x234e <_ledoff> <.LFB10> <.LFE9>
    20f0:	dc e2 a8    	bset.b    0x2dc, #0x7
    20f2:	71 80 20    	mov.w     #0x807, w1
    20f4:	91 40 78    	mov.b     [w1], w1
    20f6:	06 c8 bf    	mov.b     0x806, WREG
    20f8:	00 c0 50    	sub.b     w1, w0, w0
    20fa:	00 4f 78    	mov.b     w0, [w14]
    20fc:	1e 40 78    	mov.b     [w14], w0
    20fe:	00 04 e0    	cp0.b     w0
    2100:	04 00 3d    	bra       GE, 0x210a <.L7>
    2102:	1e 40 78    	mov.b     [w14], w0
    2104:	f3 4f 40    	add.b     w0, #0x13, [w15]
    2106:	01 00 35    	bra       LT, 0x210a <.L7>
    2108:	11 68 ef    	clr.b     0x811

0000210a <.L7>:
    210a:	61 80 20    	mov.w     #0x806, w1
    210c:	91 40 78    	mov.b     [w1], w1
    210e:	0e c8 bf    	mov.b     0x80e, WREG
    2110:	80 cf 50    	sub.b     w1, w0, [w15]
    2112:	02 00 3a    	bra       NZ, 0x2118 <.L8>
    2114:	10 c0 b3    	mov.b     #0x1, w0
    2116:	12 e8 b7    	mov.b     WREG, 0x812

00002118 <.L8>:
    2118:	71 80 20    	mov.w     #0x807, w1
    211a:	91 40 78    	mov.b     [w1], w1
    211c:	0e c8 bf    	mov.b     0x80e, WREG
    211e:	80 cf 50    	sub.b     w1, w0, [w15]
    2120:	07 00 3a    	bra       NZ, 0x2130 <.L9>
    2122:	12 c8 bf    	mov.b     0x812, WREG
    2124:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2126:	04 00 3a    	bra       NZ, 0x2130 <.L9>
    2128:	11 c8 bf    	mov.b     0x811, WREG
    212a:	00 40 e8    	inc.b     w0, w0
    212c:	11 e8 b7    	mov.b     WREG, 0x811
    212e:	12 68 ef    	clr.b     0x812

00002130 <.L9>:
    2130:	11 c8 bf    	mov.b     0x811, WREG
    2132:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    2134:	09 00 3a    	bra       NZ, 0x2148 <.L10>
    2136:	12 c8 bf    	mov.b     0x812, WREG
    2138:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    213a:	06 00 3a    	bra       NZ, 0x2148 <.L10>
    213c:	80 16 22    	mov.w     #0x2168, w0
    213e:	20 40 88    	mov.w     w0, 0x804
    2140:	11 68 ef    	clr.b     0x811
    2142:	12 68 ef    	clr.b     0x812
    2144:	06 c8 bf    	mov.b     0x806, WREG
    2146:	07 e8 b7    	mov.b     WREG, 0x807

00002148 <.L10>:
    2148:	10 c0 b3    	mov.b     #0x1, w0
    214a:	a0 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    214c:	11 c8 bf    	mov.b     0x811, WREG
    214e:	9e 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2150:	12 c8 bf    	mov.b     0x812, WREG
    2152:	9c 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2154:	d0 c0 b3    	mov.b     #0xd, w0
    2156:	9a 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2158:	a0 c0 b3    	mov.b     #0xa, w0
    215a:	98 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    215c:	8e 01 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    215e:	f0 00 20    	mov.w     #0xf, w0
    2160:	01 00 20    	mov.w     #0x0, w1
    2162:	61 fd 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2164:	00 80 fa    	ulnk      
    2166:	00 00 06    	return    

00002168 <_secondnum>:
    2168:	02 00 fa    	lnk       #0x2
    216a:	f1 00 07    	rcall     0x234e <_ledoff> <.LFB10> <.LFE9>
    216c:	ec 02 a8    	bset.b    0x2ec, #0x0
    216e:	71 80 20    	mov.w     #0x807, w1
    2170:	91 40 78    	mov.b     [w1], w1
    2172:	06 c8 bf    	mov.b     0x806, WREG
    2174:	00 c0 50    	sub.b     w1, w0, w0
    2176:	00 4f 78    	mov.b     w0, [w14]
    2178:	61 80 20    	mov.w     #0x806, w1
    217a:	91 40 78    	mov.b     [w1], w1
    217c:	0f c8 bf    	mov.b     0x80f, WREG
    217e:	80 cf 50    	sub.b     w1, w0, [w15]
    2180:	02 00 3a    	bra       NZ, 0x2186 <.L12>
    2182:	10 c0 b3    	mov.b     #0x1, w0
    2184:	12 e8 b7    	mov.b     WREG, 0x812

00002186 <.L12>:
    2186:	71 80 20    	mov.w     #0x807, w1
    2188:	91 40 78    	mov.b     [w1], w1
    218a:	0f c8 bf    	mov.b     0x80f, WREG
    218c:	80 cf 50    	sub.b     w1, w0, [w15]
    218e:	07 00 3a    	bra       NZ, 0x219e <.L13>
    2190:	12 c8 bf    	mov.b     0x812, WREG
    2192:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2194:	04 00 3a    	bra       NZ, 0x219e <.L13>
    2196:	11 c8 bf    	mov.b     0x811, WREG
    2198:	00 40 e8    	inc.b     w0, w0
    219a:	11 e8 b7    	mov.b     WREG, 0x811
    219c:	12 68 ef    	clr.b     0x812

0000219e <.L13>:
    219e:	11 c8 bf    	mov.b     0x811, WREG
    21a0:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    21a2:	09 00 3a    	bra       NZ, 0x21b6 <.L14>
    21a4:	12 c8 bf    	mov.b     0x812, WREG
    21a6:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    21a8:	06 00 3a    	bra       NZ, 0x21b6 <.L14>
    21aa:	a0 1e 22    	mov.w     #0x21ea, w0
    21ac:	20 40 88    	mov.w     w0, 0x804
    21ae:	11 68 ef    	clr.b     0x811
    21b0:	12 68 ef    	clr.b     0x812
    21b2:	06 c8 bf    	mov.b     0x806, WREG
    21b4:	07 e8 b7    	mov.b     WREG, 0x807

000021b6 <.L14>:
    21b6:	1e 40 78    	mov.b     [w14], w0
    21b8:	00 04 e0    	cp0.b     w0
    21ba:	07 00 3d    	bra       GE, 0x21ca <.L15>
    21bc:	1e 40 78    	mov.b     [w14], w0
    21be:	f4 4f 40    	add.b     w0, #0x14, [w15]
    21c0:	04 00 3d    	bra       GE, 0x21ca <.L15>
    21c2:	11 68 ef    	clr.b     0x811
    21c4:	12 68 ef    	clr.b     0x812
    21c6:	c0 0e 22    	mov.w     #0x20ec, w0
    21c8:	20 40 88    	mov.w     w0, 0x804

000021ca <.L15>:
    21ca:	20 c0 b3    	mov.b     #0x2, w0
    21cc:	5f 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    21ce:	11 c8 bf    	mov.b     0x811, WREG
    21d0:	5d 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    21d2:	12 c8 bf    	mov.b     0x812, WREG
    21d4:	5b 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    21d6:	d0 c0 b3    	mov.b     #0xd, w0
    21d8:	59 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    21da:	a0 c0 b3    	mov.b     #0xa, w0
    21dc:	57 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    21de:	4d 01 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    21e0:	f0 00 20    	mov.w     #0xf, w0
    21e2:	01 00 20    	mov.w     #0x0, w1
    21e4:	20 fd 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    21e6:	00 80 fa    	ulnk      
    21e8:	00 00 06    	return    

000021ea <_thirdnum>:
    21ea:	02 00 fa    	lnk       #0x2
    21ec:	b0 00 07    	rcall     0x234e <_ledoff> <.LFB10> <.LFE9>
    21ee:	ec 22 a8    	bset.b    0x2ec, #0x1
    21f0:	71 80 20    	mov.w     #0x807, w1
    21f2:	91 40 78    	mov.b     [w1], w1
    21f4:	06 c8 bf    	mov.b     0x806, WREG
    21f6:	00 c0 50    	sub.b     w1, w0, w0
    21f8:	00 4f 78    	mov.b     w0, [w14]
    21fa:	61 80 20    	mov.w     #0x806, w1
    21fc:	91 40 78    	mov.b     [w1], w1
    21fe:	10 c8 bf    	mov.b     0x810, WREG
    2200:	80 cf 50    	sub.b     w1, w0, [w15]
    2202:	05 00 3a    	bra       NZ, 0x220e <.L17>
    2204:	c0 0e 22    	mov.w     #0x20ec, w0
    2206:	20 40 88    	mov.w     w0, 0x804
    2208:	11 68 ef    	clr.b     0x811
    220a:	40 2c 22    	mov.w     #0x22c4, w0
    220c:	00 40 88    	mov.w     w0, 0x800

0000220e <.L17>:
    220e:	1e 40 78    	mov.b     [w14], w0
    2210:	e1 4f 40    	add.b     w0, #0x1, [w15]
    2212:	06 00 3d    	bra       GE, 0x2220 <.L18>
    2214:	1e 40 78    	mov.b     [w14], w0
    2216:	f3 4f 40    	add.b     w0, #0x13, [w15]
    2218:	03 00 35    	bra       LT, 0x2220 <.L18>
    221a:	c0 0e 22    	mov.w     #0x20ec, w0
    221c:	20 40 88    	mov.w     w0, 0x804
    221e:	11 68 ef    	clr.b     0x811

00002220 <.L18>:
    2220:	30 c0 b3    	mov.b     #0x3, w0
    2222:	34 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2224:	11 c8 bf    	mov.b     0x811, WREG
    2226:	32 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2228:	12 c8 bf    	mov.b     0x812, WREG
    222a:	30 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    222c:	d0 c0 b3    	mov.b     #0xd, w0
    222e:	2e 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2230:	a0 c0 b3    	mov.b     #0xa, w0
    2232:	2c 01 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2234:	22 01 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2236:	f0 00 20    	mov.w     #0xf, w0
    2238:	01 00 20    	mov.w     #0x0, w1
    223a:	f5 fc 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    223c:	00 80 fa    	ulnk      
    223e:	00 00 06    	return    

00002240 <_setup>:
    2240:	00 00 fa    	lnk       #0x0
    2242:	01 40 80    	mov.w     0x800, w1
    2244:	10 40 80    	mov.w     0x802, w0
    2246:	80 8f 50    	sub.w     w1, w0, [w15]
    2248:	04 00 32    	bra       Z, 0x2252 <.L20>
    224a:	00 40 80    	mov.w     0x800, w0
    224c:	10 40 88    	mov.w     w0, 0x802
    224e:	da 82 a8    	bset.b    0x2da, #0x4
    2250:	da a2 a8    	bset.b    0x2da, #0x5

00002252 <.L20>:
    2252:	50 c0 b3    	mov.b     #0x5, w0
    2254:	0e e8 b7    	mov.b     WREG, 0x80e
    2256:	a0 c0 b3    	mov.b     #0xa, w0
    2258:	0f e8 b7    	mov.b     WREG, 0x80f
    225a:	f0 c0 b3    	mov.b     #0xf, w0
    225c:	10 e8 b7    	mov.b     WREG, 0x810
    225e:	c0 0e 22    	mov.w     #0x20ec, w0
    2260:	20 40 88    	mov.w     w0, 0x804
    2262:	17 68 ef    	clr.b     0x817
    2264:	c0 27 22    	mov.w     #0x227c, w0
    2266:	00 40 88    	mov.w     w0, 0x800
    2268:	00 3e 29    	mov.w     #0x93e0, w0
    226a:	41 00 20    	mov.w     #0x4, w1
    226c:	dc fc 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    226e:	01 40 80    	mov.w     0x800, w1
    2270:	10 40 80    	mov.w     0x802, w0
    2272:	80 8f 50    	sub.w     w1, w0, [w15]
    2274:	01 00 32    	bra       Z, 0x2278 <.L19>
    2276:	da 82 a9    	bclr.b    0x2da, #0x4

00002278 <.L19>:
    2278:	00 80 fa    	ulnk      
    227a:	00 00 06    	return    

0000227c <_run>:
    227c:	00 00 fa    	lnk       #0x0
    227e:	01 40 80    	mov.w     0x800, w1
    2280:	10 40 80    	mov.w     0x802, w0
    2282:	80 8f 50    	sub.w     w1, w0, [w15]
    2284:	03 00 32    	bra       Z, 0x228c <.L23>
    2286:	00 40 80    	mov.w     0x800, w0
    2288:	10 40 88    	mov.w     w0, 0x802
    228a:	da a2 a8    	bset.b    0x2da, #0x5

0000228c <.L23>:
    228c:	20 40 80    	mov.w     0x804, w0
    228e:	00 00 01    	call      w0
    2290:	1b c8 bf    	mov.b     0x81b, WREG
    2292:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2294:	03 00 3a    	bra       NZ, 0x229c <.L24>
    2296:	e0 2f 22    	mov.w     #0x22fe, w0
    2298:	00 40 88    	mov.w     w0, 0x800
    229a:	0d 00 37    	bra       0x22b6 <.L25>

0000229c <.L24>:
    229c:	1c c8 bf    	mov.b     0x81c, WREG
    229e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    22a0:	03 00 3a    	bra       NZ, 0x22a8 <.L26>
    22a2:	60 32 22    	mov.w     #0x2326, w0
    22a4:	00 40 88    	mov.w     w0, 0x800
    22a6:	07 00 37    	bra       0x22b6 <.L25>

000022a8 <.L26>:
    22a8:	91 16 80    	mov.w     0x2d2, w1
    22aa:	00 00 21    	mov.w     #0x1000, w0
    22ac:	00 80 60    	and.w     w1, w0, w0
    22ae:	00 00 e0    	cp0.w     w0
    22b0:	02 00 3a    	bra       NZ, 0x22b6 <.L25>
    22b2:	40 2c 22    	mov.w     #0x22c4, w0
    22b4:	00 40 88    	mov.w     w0, 0x800

000022b6 <.L25>:
    22b6:	01 40 80    	mov.w     0x800, w1
    22b8:	10 40 80    	mov.w     0x802, w0
    22ba:	80 8f 50    	sub.w     w1, w0, [w15]
    22bc:	01 00 32    	bra       Z, 0x22c0 <.L22>
    22be:	da a2 a9    	bclr.b    0x2da, #0x5

000022c0 <.L22>:
    22c0:	00 80 fa    	ulnk      
    22c2:	00 00 06    	return    

000022c4 <_solved>:
    22c4:	00 00 fa    	lnk       #0x0
    22c6:	01 40 80    	mov.w     0x800, w1
    22c8:	10 40 80    	mov.w     0x802, w0
    22ca:	80 8f 50    	sub.w     w1, w0, [w15]
    22cc:	05 00 32    	bra       Z, 0x22d8 <.L29>
    22ce:	00 40 80    	mov.w     0x800, w0
    22d0:	10 40 88    	mov.w     w0, 0x802
    22d2:	10 c0 b3    	mov.b     #0x1, w0
    22d4:	17 e8 b7    	mov.b     WREG, 0x817
    22d6:	da 82 a8    	bset.b    0x2da, #0x4

000022d8 <.L29>:
    22d8:	1b c8 bf    	mov.b     0x81b, WREG
    22da:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    22dc:	03 00 3a    	bra       NZ, 0x22e4 <.L30>
    22de:	e0 2f 22    	mov.w     #0x22fe, w0
    22e0:	00 40 88    	mov.w     w0, 0x800
    22e2:	05 00 37    	bra       0x22ee <.L31>

000022e4 <.L30>:
    22e4:	1c c8 bf    	mov.b     0x81c, WREG
    22e6:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    22e8:	02 00 3a    	bra       NZ, 0x22ee <.L31>
    22ea:	60 32 22    	mov.w     #0x2326, w0
    22ec:	00 40 88    	mov.w     w0, 0x800

000022ee <.L31>:
    22ee:	01 40 80    	mov.w     0x800, w1
    22f0:	10 40 80    	mov.w     0x802, w0
    22f2:	80 8f 50    	sub.w     w1, w0, [w15]
    22f4:	02 00 32    	bra       Z, 0x22fa <.L28>
    22f6:	17 68 ef    	clr.b     0x817
    22f8:	da 82 a9    	bclr.b    0x2da, #0x4

000022fa <.L28>:
    22fa:	00 80 fa    	ulnk      
    22fc:	00 00 06    	return    

000022fe <_end_win>:
    22fe:	00 00 fa    	lnk       #0x0
    2300:	01 40 80    	mov.w     0x800, w1
    2302:	10 40 80    	mov.w     0x802, w0
    2304:	80 8f 50    	sub.w     w1, w0, [w15]
    2306:	03 00 32    	bra       Z, 0x230e <.L34>
    2308:	00 40 80    	mov.w     0x800, w0
    230a:	10 40 88    	mov.w     w0, 0x802
    230c:	da 82 a8    	bset.b    0x2da, #0x4

0000230e <.L34>:
    230e:	1a c8 bf    	mov.b     0x81a, WREG
    2310:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2312:	02 00 3a    	bra       NZ, 0x2318 <.L35>
    2314:	c0 27 22    	mov.w     #0x227c, w0
    2316:	00 40 88    	mov.w     w0, 0x800

00002318 <.L35>:
    2318:	01 40 80    	mov.w     0x800, w1
    231a:	10 40 80    	mov.w     0x802, w0
    231c:	80 8f 50    	sub.w     w1, w0, [w15]
    231e:	01 00 32    	bra       Z, 0x2322 <.L33>
    2320:	da 82 a9    	bclr.b    0x2da, #0x4

00002322 <.L33>:
    2322:	00 80 fa    	ulnk      
    2324:	00 00 06    	return    

00002326 <_end_fail>:
    2326:	00 00 fa    	lnk       #0x0
    2328:	01 40 80    	mov.w     0x800, w1
    232a:	10 40 80    	mov.w     0x802, w0
    232c:	80 8f 50    	sub.w     w1, w0, [w15]
    232e:	03 00 32    	bra       Z, 0x2336 <.L38>
    2330:	00 40 80    	mov.w     0x800, w0
    2332:	10 40 88    	mov.w     w0, 0x802
    2334:	da a2 a8    	bset.b    0x2da, #0x5

00002336 <.L38>:
    2336:	1a c8 bf    	mov.b     0x81a, WREG
    2338:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    233a:	02 00 3a    	bra       NZ, 0x2340 <.L39>
    233c:	c0 27 22    	mov.w     #0x227c, w0
    233e:	00 40 88    	mov.w     w0, 0x800

00002340 <.L39>:
    2340:	01 40 80    	mov.w     0x800, w1
    2342:	10 40 80    	mov.w     0x802, w0
    2344:	80 8f 50    	sub.w     w1, w0, [w15]
    2346:	01 00 32    	bra       Z, 0x234a <.L37>
    2348:	da a2 a9    	bclr.b    0x2da, #0x5

0000234a <.L37>:
    234a:	00 80 fa    	ulnk      
    234c:	00 00 06    	return    

0000234e <_ledoff>:
    234e:	00 00 fa    	lnk       #0x0
    2350:	dc e2 a9    	bclr.b    0x2dc, #0x7
    2352:	10 00 20    	mov.w     #0x1, w0
    2354:	01 00 20    	mov.w     #0x0, w1
    2356:	67 fc 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2358:	ec 02 a9    	bclr.b    0x2ec, #0x0
    235a:	10 00 20    	mov.w     #0x1, w0
    235c:	01 00 20    	mov.w     #0x0, w1
    235e:	63 fc 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2360:	ec 22 a9    	bclr.b    0x2ec, #0x1
    2362:	10 00 20    	mov.w     #0x1, w0
    2364:	01 00 20    	mov.w     #0x0, w1
    2366:	5f fc 07    	rcall     0x1c26 <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2368:	00 80 fa    	ulnk      
    236a:	00 00 06    	return    

0000236c <_dispNumber>:
    236c:	08 00 fa    	lnk       #0x8
    236e:	30 07 98    	mov.w     w0, [w14+6]
    2370:	3e 00 90    	mov.w     [w14+6], w0
    2372:	c3 00 de    	lsr.w     w0, #0x3, w1
    2374:	50 0c 22    	mov.w     #0x20c5, w0
    2376:	00 08 b8    	mul.uu    w1, w0, w0
    2378:	44 08 de    	lsr.w     w1, #0x4, w0
    237a:	00 4f 78    	mov.b     w0, [w14]
    237c:	1e 40 78    	mov.b     [w14], w0
    237e:	78 00 b9    	mul.su    w0, #0x18, w0
    2380:	00 00 78    	mov.w     w0, w0
    2382:	80 40 78    	mov.b     w0, w1
    2384:	3e 00 90    	mov.w     [w14+6], w0
    2386:	00 40 78    	mov.b     w0, w0
    2388:	00 c0 40    	add.b     w1, w0, w0
    238a:	10 47 98    	mov.b     w0, [w14+1]
    238c:	1e 40 90    	mov.b     [w14+1], w0
    238e:	00 80 fb    	ze        w0, w0
    2390:	c2 00 de    	lsr.w     w0, #0x2, w1
    2392:	b0 47 21    	mov.w     #0x147b, w0
    2394:	00 08 b8    	mul.uu    w1, w0, w0
    2396:	01 00 d1    	lsr.w     w1, w0
    2398:	20 47 98    	mov.b     w0, [w14+2]
    239a:	ae 40 90    	mov.b     [w14+2], w1
    239c:	c0 09 20    	mov.w     #0x9c, w0
    239e:	00 88 b9    	mul.ss    w1, w0, w0
    23a0:	00 00 78    	mov.w     w0, w0
    23a2:	00 40 78    	mov.b     w0, w0
    23a4:	9e 40 90    	mov.b     [w14+1], w1
    23a6:	00 c0 40    	add.b     w1, w0, w0
    23a8:	10 47 98    	mov.b     w0, [w14+1]
    23aa:	1e 40 90    	mov.b     [w14+1], w0
    23ac:	80 80 fb    	ze        w0, w1
    23ae:	d0 cc 2c    	mov.w     #0xcccd, w0
    23b0:	00 08 b8    	mul.uu    w1, w0, w0
    23b2:	43 08 de    	lsr.w     w1, #0x3, w0
    23b4:	30 47 98    	mov.b     w0, [w14+3]
    23b6:	be 40 90    	mov.b     [w14+3], w1
    23b8:	60 0f 20    	mov.w     #0xf6, w0
    23ba:	00 88 b9    	mul.ss    w1, w0, w0
    23bc:	00 00 78    	mov.w     w0, w0
    23be:	00 40 78    	mov.b     w0, w0
    23c0:	9e 40 90    	mov.b     [w14+1], w1
    23c2:	00 c0 40    	add.b     w1, w0, w0
    23c4:	10 47 98    	mov.b     w0, [w14+1]
    23c6:	9e 40 90    	mov.b     [w14+1], w1
    23c8:	41 47 98    	mov.b     w1, [w14+4]
    23ca:	80 41 eb    	clr.b     w3
    23cc:	3e 41 90    	mov.b     [w14+3], w2
    23ce:	11 c0 b3    	mov.b     #0x1, w1
    23d0:	60 03 21    	mov.w     #0x1036, w0
    23d2:	c8 fa 07    	rcall     0x1964 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    23d4:	80 41 eb    	clr.b     w3
    23d6:	4e 41 90    	mov.b     [w14+4], w2
    23d8:	31 c0 b3    	mov.b     #0x3, w1
    23da:	60 03 21    	mov.w     #0x1036, w0
    23dc:	c3 fa 07    	rcall     0x1964 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    23de:	60 03 21    	mov.w     #0x1036, w0
    23e0:	b2 f9 07    	rcall     0x1746 <_led_writeDisplay> <.LFB3> <.LFE2>
    23e2:	00 80 fa    	ulnk      
    23e4:	00 00 06    	return    

000023e6 <_init_ajuart>:
    23e6:	04 00 fa    	lnk       #0x4
    23e8:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    23ea:	f2 c2 a8    	bset.b    0x2f2, #0x6
    23ec:	f0 e2 a8    	bset.b    0x2f0, #0x7
    23ee:	00 6c 20    	mov.w     #0x6c0, w0
    23f0:	00 0f 78    	mov.w     w0, [w14]
    23f2:	00 68 20    	mov.w     #0x680, w0
    23f4:	10 07 98    	mov.w     w0, [w14+2]
    23f6:	11 3a 80    	mov.w     0x742, w1
    23f8:	f0 0b 20    	mov.w     #0xbf, w0
    23fa:	00 81 60    	and.w     w1, w0, w2
    23fc:	60 04 20    	mov.w     #0x46, w0
    23fe:	71 05 20    	mov.w     #0x57, w1
    2400:	23 74 20    	mov.w     #0x742, w3
    2402:	80 49 78    	mov.b     w0, [w3]
    2404:	81 49 78    	mov.b     w1, [w3]
    2406:	82 49 78    	mov.b     w2, [w3]
    2408:	1e 00 90    	mov.w     [w14+2], w0
    240a:	40 02 b0    	add.w     #0x24, w0
    240c:	a1 c1 b3    	mov.b     #0x1a, w1
    240e:	01 48 78    	mov.b     w1, [w0]
    2410:	9e 00 78    	mov.w     [w14], w1
    2412:	75 80 40    	add.w     w1, #0x15, w0
    2414:	31 c0 b3    	mov.b     #0x3, w1
    2416:	01 48 78    	mov.b     w1, [w0]
    2418:	10 3a 80    	mov.w     0x742, w0
    241a:	00 01 78    	mov.w     w0, w2
    241c:	02 60 a0    	bset.w    w2, #0x6
    241e:	60 04 20    	mov.w     #0x46, w0
    2420:	71 05 20    	mov.w     #0x57, w1
    2422:	23 74 20    	mov.w     #0x742, w3
    2424:	80 49 78    	mov.b     w0, [w3]
    2426:	81 49 78    	mov.b     w1, [w3]
    2428:	82 49 78    	mov.b     w2, [w3]
    242a:	80 00 20    	mov.w     #0x8, w0
    242c:	00 11 88    	mov.w     w0, 0x220
    242e:	20 02 20    	mov.w     #0x22, w0
    2430:	40 11 88    	mov.w     w0, 0x228
    2432:	60 83 20    	mov.w     #0x836, w0
    2434:	10 41 88    	mov.w     w0, 0x822
    2436:	00 40 20    	mov.w     #0x400, w0
    2438:	20 41 88    	mov.w     w0, 0x824
    243a:	00 00 eb    	clr.w     w0
    243c:	30 41 88    	mov.w     w0, 0x826
    243e:	00 00 eb    	clr.w     w0
    2440:	40 41 88    	mov.w     w0, 0x828
    2442:	00 00 eb    	clr.w     w0
    2444:	50 41 88    	mov.w     w0, 0x82a
    2446:	00 30 20    	mov.w     #0x300, w0
    2448:	00 41 88    	mov.w     w0, 0x820
    244a:	60 c3 20    	mov.w     #0xc36, w0
    244c:	60 41 88    	mov.w     w0, 0x82c
    244e:	00 40 20    	mov.w     #0x400, w0
    2450:	70 41 88    	mov.w     w0, 0x82e
    2452:	00 00 eb    	clr.w     w0
    2454:	80 41 88    	mov.w     w0, 0x830
    2456:	00 00 eb    	clr.w     w0
    2458:	90 41 88    	mov.w     w0, 0x832
    245a:	00 00 eb    	clr.w     w0
    245c:	a0 41 88    	mov.w     w0, 0x834
    245e:	23 e2 a9    	bclr.b    0x223, #0x7
    2460:	23 a2 a8    	bset.b    0x223, #0x5
    2462:	85 80 a9    	bclr.b    0x85, #0x4
    2464:	95 80 a8    	bset.b    0x95, #0x4
    2466:	85 60 a9    	bclr.b    0x85, #0x3
    2468:	95 60 a8    	bset.b    0x95, #0x3
    246a:	21 e2 a8    	bset.b    0x221, #0x7
    246c:	23 42 a8    	bset.b    0x223, #0x2
    246e:	00 80 fa    	ulnk      
    2470:	00 00 06    	return    

00002472 <_U1_in_waiting>:
    2472:	00 00 fa    	lnk       #0x0
    2474:	a0 41 80    	mov.w     0x834, w0
    2476:	00 80 fa    	ulnk      
    2478:	00 00 06    	return    

0000247a <_U1_flush_tx_buffer>:
    247a:	00 00 fa    	lnk       #0x0
    247c:	11 11 80    	mov.w     0x222, w1
    247e:	00 40 20    	mov.w     #0x400, w0
    2480:	00 80 60    	and.w     w1, w0, w0
    2482:	00 00 e0    	cp0.w     w0
    2484:	01 00 3a    	bra       NZ, 0x2488 <.L15>
    2486:	23 42 a8    	bset.b    0x223, #0x2

00002488 <.L15>:
    2488:	00 80 fa    	ulnk      
    248a:	00 00 06    	return    

0000248c <_U1_putc>:
    248c:	02 00 fa    	lnk       #0x2
    248e:	00 4f 78    	mov.b     w0, [w14]
    2490:	00 00 00    	nop       

00002492 <.L18>:
    2492:	51 41 80    	mov.w     0x82a, w1
    2494:	20 41 80    	mov.w     0x824, w0
    2496:	80 8f 50    	sub.w     w1, w0, [w15]
    2498:	fc ff 32    	bra       Z, 0x2492 <.L18>
    249a:	ff 3f fc    	disi      #0x3fff
    249c:	11 41 80    	mov.w     0x822, w1
    249e:	40 41 80    	mov.w     0x828, w0
    24a0:	00 80 40    	add.w     w1, w0, w0
    24a2:	1e 48 78    	mov.b     [w14], [w0]
    24a4:	40 41 80    	mov.w     0x828, w0
    24a6:	00 00 e8    	inc.w     w0, w0
    24a8:	40 41 88    	mov.w     w0, 0x828
    24aa:	41 41 80    	mov.w     0x828, w1
    24ac:	20 41 80    	mov.w     0x824, w0
    24ae:	80 8f 50    	sub.w     w1, w0, [w15]
    24b0:	02 00 3a    	bra       NZ, 0x24b6 <.L19>
    24b2:	00 00 eb    	clr.w     w0
    24b4:	40 41 88    	mov.w     w0, 0x828

000024b6 <.L19>:
    24b6:	50 41 80    	mov.w     0x82a, w0
    24b8:	00 00 e8    	inc.w     w0, w0
    24ba:	50 41 88    	mov.w     w0, 0x82a
    24bc:	52 20 ef    	clr.w     0x52
    24be:	51 41 80    	mov.w     0x82a, w1
    24c0:	00 41 80    	mov.w     0x820, w0
    24c2:	80 8f 50    	sub.w     w1, w0, [w15]
    24c4:	01 00 39    	bra       NC, 0x24c8 <.L17>
    24c6:	23 42 a8    	bset.b    0x223, #0x2

000024c8 <.L17>:
    24c8:	00 80 fa    	ulnk      
    24ca:	00 00 06    	return    

000024cc <_U1_getc>:
    24cc:	02 00 fa    	lnk       #0x2
    24ce:	00 00 00    	nop       

000024d0 <.L22>:
    24d0:	a0 41 80    	mov.w     0x834, w0
    24d2:	00 00 e0    	cp0.w     w0
    24d4:	fd ff 32    	bra       Z, 0x24d0 <.L22>
    24d6:	ff 3f fc    	disi      #0x3fff
    24d8:	61 41 80    	mov.w     0x82c, w1
    24da:	80 41 80    	mov.w     0x830, w0
    24dc:	00 80 40    	add.w     w1, w0, w0
    24de:	10 4f 78    	mov.b     [w0], [w14]
    24e0:	80 41 80    	mov.w     0x830, w0
    24e2:	00 00 e8    	inc.w     w0, w0
    24e4:	80 41 88    	mov.w     w0, 0x830
    24e6:	81 41 80    	mov.w     0x830, w1
    24e8:	70 41 80    	mov.w     0x82e, w0
    24ea:	80 8f 50    	sub.w     w1, w0, [w15]
    24ec:	02 00 3a    	bra       NZ, 0x24f2 <.L23>
    24ee:	00 00 eb    	clr.w     w0
    24f0:	80 41 88    	mov.w     w0, 0x830

000024f2 <.L23>:
    24f2:	a0 41 80    	mov.w     0x834, w0
    24f4:	00 00 e9    	dec.w     w0, w0
    24f6:	a0 41 88    	mov.w     w0, 0x834
    24f8:	52 20 ef    	clr.w     0x52
    24fa:	1e 40 78    	mov.b     [w14], w0
    24fc:	00 80 fa    	ulnk      
    24fe:	00 00 06    	return    

00002500 <_U1_puts>:
    2500:	02 00 fa    	lnk       #0x2
    2502:	00 0f 78    	mov.w     w0, [w14]
    2504:	04 00 37    	bra       0x250e <.L25>

00002506 <.L26>:
    2506:	1e 00 78    	mov.w     [w14], w0
    2508:	10 40 78    	mov.b     [w0], w0
    250a:	1e 0f e8    	inc.w     [w14], [w14]
    250c:	bf ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>

0000250e <.L25>:
    250e:	1e 00 78    	mov.w     [w14], w0
    2510:	10 40 78    	mov.b     [w0], w0
    2512:	00 04 e0    	cp0.b     w0
    2514:	f8 ff 3a    	bra       NZ, 0x2506 <.L26>
    2516:	b1 ff 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2518:	00 80 fa    	ulnk      
    251a:	00 00 06    	return    

0000251c <_U1_gets>:
    251c:	04 00 fa    	lnk       #0x4
    251e:	00 0f 78    	mov.w     w0, [w14]
    2520:	11 07 98    	mov.w     w1, [w14+2]
    2522:	1e 00 90    	mov.w     [w14+2], w0
    2524:	00 00 e0    	cp0.w     w0
    2526:	1a 00 32    	bra       Z, 0x255c <.L32>
    2528:	1e 00 90    	mov.w     [w14+2], w0
    252a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    252c:	04 00 3a    	bra       NZ, 0x2536 <.L30>
    if (len == 0)
        return;

    if (len == 1) {
        *str = '\0';
    252e:	1e 00 78    	mov.w     [w14], w0
    2530:	80 40 eb    	clr.b     w1
    2532:	01 48 78    	mov.b     w1, [w0]
        return;
    2534:	14 00 37    	bra       0x255e <.L27>

00002536 <.L30>:
    }

    while (1) {
        *str = U1_getc();
    2536:	ca ff 07    	rcall     0x24cc <_U1_getc> <.LFB6> <.LFE5>
    2538:	9e 00 78    	mov.w     [w14], w1
    253a:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    253c:	1e 00 78    	mov.w     [w14], w0
    253e:	10 40 78    	mov.b     [w0], w0
    2540:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2542:	08 00 32    	bra       Z, 0x2554 <.L31>
    2544:	1e 00 90    	mov.w     [w14+2], w0
    2546:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2548:	05 00 32    	bra       Z, 0x2554 <.L31>
            break;
        str++;
    254a:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    254c:	1e 00 90    	mov.w     [w14+2], w0
    254e:	00 00 e9    	dec.w     w0, w0
    2550:	10 07 98    	mov.w     w0, [w14+2]
    }
    2552:	f1 ff 37    	bra       0x2536 <.L30>

00002554 <.L31>:
    *str = '\0';
    2554:	1e 00 78    	mov.w     [w14], w0
    2556:	80 40 eb    	clr.b     w1
    2558:	01 48 78    	mov.b     w1, [w0]
    255a:	01 00 37    	bra       0x255e <.L27>

0000255c <.L32>:
    255c:	00 00 00    	nop       

0000255e <.L27>:
}
    255e:	00 80 fa    	ulnk      
    2560:	00 00 06    	return    

00002562 <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    2562:	08 00 fa    	lnk       #0x8
    2564:	20 07 98    	mov.w     w0, [w14+4]
    2566:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    2568:	3e 00 90    	mov.w     [w14+6], w0
    256a:	00 00 e0    	cp0.w     w0
    256c:	6f 00 32    	bra       Z, 0x264c <.L46>
        return;

    if (len == 1) {
    256e:	3e 00 90    	mov.w     [w14+6], w0
    2570:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2572:	04 00 3a    	bra       NZ, 0x257c <.L36>
        *str = '\0';
    2574:	2e 00 90    	mov.w     [w14+4], w0
    2576:	80 40 eb    	clr.b     w1
    2578:	01 48 78    	mov.b     w1, [w0]
        return;
    257a:	69 00 37    	bra       0x264e <.L33>

0000257c <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    257c:	b0 c1 b3    	mov.b     #0x1b, w0
    257e:	86 ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    2580:	70 c3 b3    	mov.b     #0x37, w0
    2582:	84 ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    2584:	7a ff 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    2586:	ae 00 90    	mov.w     [w14+4], w1
    2588:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    258a:	be 00 90    	mov.w     [w14+6], w1
    258c:	01 0f 78    	mov.w     w1, [w14]
    258e:	03 00 37    	bra       0x2596 <.L45>

00002590 <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    2590:	00 00 00    	nop       
    2592:	01 00 37    	bra       0x2596 <.L45>

00002594 <.L48>:
    2594:	00 00 00    	nop       

00002596 <.L45>:
    2596:	9a ff 07    	rcall     0x24cc <_U1_getc> <.LFB6> <.LFE5>
    2598:	ae 00 90    	mov.w     [w14+4], w1
    259a:	80 48 78    	mov.b     w0, [w1]
    259c:	2e 00 90    	mov.w     [w14+4], w0
    259e:	10 40 78    	mov.b     [w0], w0
    25a0:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    25a2:	09 00 3a    	bra       NZ, 0x25b6 <.L37>
    *str = '\0';                            // terminarte the string with null
    25a4:	2e 00 90    	mov.w     [w14+4], w0
    25a6:	80 40 eb    	clr.b     w1
    25a8:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    25aa:	a0 c0 b3    	mov.b     #0xa, w0
    25ac:	6f ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    25ae:	d0 c0 b3    	mov.b     #0xd, w0
    25b0:	6d ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    25b2:	63 ff 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    25b4:	4c 00 37    	bra       0x264e <.L33>

000025b6 <.L37>:
    25b6:	2e 00 90    	mov.w     [w14+4], w0
    25b8:	10 40 78    	mov.b     [w0], w0
    25ba:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    25bc:	10 00 3a    	bra       NZ, 0x25de <.L38>
    25be:	b0 c1 b3    	mov.b     #0x1b, w0
    25c0:	65 ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    25c2:	80 c3 b3    	mov.b     #0x38, w0
    25c4:	63 ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    25c6:	b0 c1 b3    	mov.b     #0x1b, w0
    25c8:	61 ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    25ca:	b0 c5 b3    	mov.b     #0x5b, w0
    25cc:	5f ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    25ce:	b0 c4 b3    	mov.b     #0x4b, w0
    25d0:	5d ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    25d2:	53 ff 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    25d4:	9e 00 90    	mov.w     [w14+2], w1
    25d6:	21 07 98    	mov.w     w1, [w14+4]
    25d8:	be 00 90    	mov.w     [w14+6], w1
    25da:	01 0f 78    	mov.w     w1, [w14]
    25dc:	36 00 37    	bra       0x264a <.L39>

000025de <.L38>:
    25de:	2e 00 90    	mov.w     [w14+4], w0
    25e0:	10 40 78    	mov.b     [w0], w0
    25e2:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    25e4:	05 00 32    	bra       Z, 0x25f0 <.L40>
    25e6:	2e 00 90    	mov.w     [w14+4], w0
    25e8:	90 40 78    	mov.b     [w0], w1
    25ea:	f0 c7 b3    	mov.b     #0x7f, w0
    25ec:	80 cf 50    	sub.b     w1, w0, [w15]
    25ee:	14 00 3a    	bra       NZ, 0x2618 <.L41>

000025f0 <.L40>:
    25f0:	ae 00 90    	mov.w     [w14+4], w1
    25f2:	1e 00 90    	mov.w     [w14+2], w0
    25f4:	80 8f 50    	sub.w     w1, w0, [w15]
    25f6:	0c 00 36    	bra       LEU, 0x2610 <.L42>
    25f8:	80 c0 b3    	mov.b     #0x8, w0
    25fa:	48 ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    25fc:	00 c2 b3    	mov.b     #0x20, w0
    25fe:	46 ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2600:	80 c0 b3    	mov.b     #0x8, w0
    2602:	44 ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2604:	3a ff 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2606:	2e 00 90    	mov.w     [w14+4], w0
    2608:	00 00 e9    	dec.w     w0, w0
    260a:	20 07 98    	mov.w     w0, [w14+4]
    260c:	1e 0f e8    	inc.w     [w14], [w14]
    260e:	03 00 37    	bra       0x2616 <.L43>

00002610 <.L42>:
    2610:	70 c0 b3    	mov.b     #0x7, w0
    2612:	3c ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2614:	32 ff 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

00002616 <.L43>:
    2616:	19 00 37    	bra       0x264a <.L39>

00002618 <.L41>:
    2618:	1e 00 78    	mov.w     [w14], w0
    261a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    261c:	04 00 3a    	bra       NZ, 0x2626 <.L44>
    261e:	70 c0 b3    	mov.b     #0x7, w0
    2620:	35 ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2622:	2b ff 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2624:	12 00 37    	bra       0x264a <.L39>

00002626 <.L44>:
    2626:	2e 00 90    	mov.w     [w14+4], w0
    2628:	10 40 78    	mov.b     [w0], w0
    262a:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    262c:	b1 ff 36    	bra       LEU, 0x2590 <.L47>
    262e:	2e 00 90    	mov.w     [w14+4], w0
    2630:	90 40 78    	mov.b     [w0], w1
    2632:	e0 c7 b3    	mov.b     #0x7e, w0
    2634:	80 cf 50    	sub.b     w1, w0, [w15]
    2636:	ae ff 3e    	bra       GTU, 0x2594 <.L48>
    2638:	2e 00 90    	mov.w     [w14+4], w0
    263a:	10 40 78    	mov.b     [w0], w0
    263c:	27 ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    263e:	1d ff 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2640:	2e 00 90    	mov.w     [w14+4], w0
    2642:	00 00 e8    	inc.w     w0, w0
    2644:	20 07 98    	mov.w     w0, [w14+4]
    2646:	1e 0f e9    	dec.w     [w14], [w14]
    2648:	a6 ff 37    	bra       0x2596 <.L45>

0000264a <.L39>:
    264a:	a5 ff 37    	bra       0x2596 <.L45>

0000264c <.L46>:
    264c:	00 00 00    	nop       

0000264e <.L33>:
}
    264e:	00 80 fa    	ulnk      
    2650:	00 00 06    	return    

00002652 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2652:	08 00 fa    	lnk       #0x8
    2654:	10 07 98    	mov.w     w0, [w14+2]
    2656:	21 07 98    	mov.w     w1, [w14+4]
    2658:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    265a:	1e 00 90    	mov.w     [w14+2], w0
    265c:	60 00 40    	add.w     w0, #0x0, w0
    265e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2660:	10 00 3e    	bra       GTU, 0x2682 <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    2662:	00 00 eb    	clr.w     w0
    2664:	00 0f 78    	mov.w     w0, [w14]
    2666:	07 00 37    	bra       0x2676 <.L52>

00002668 <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    2668:	2e 00 90    	mov.w     [w14+4], w0
    266a:	10 40 78    	mov.b     [w0], w0
    266c:	ae 00 90    	mov.w     [w14+4], w1
    266e:	81 00 e8    	inc.w     w1, w1
    2670:	21 07 98    	mov.w     w1, [w14+4]
    2672:	0c ff 07    	rcall     0x248c <_U1_putc> <.LFB5> <.LFE4>
    2674:	1e 0f e8    	inc.w     [w14], [w14]

00002676 <.L52>:
    2676:	9e 00 78    	mov.w     [w14], w1
    2678:	3e 00 90    	mov.w     [w14+6], w0
    267a:	80 8f 50    	sub.w     w1, w0, [w15]
    267c:	f5 ff 39    	bra       NC, 0x2668 <.L53>
            U1_flush_tx_buffer();
    267e:	fd fe 07    	rcall     0x247a <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    2680:	01 00 37    	bra       0x2684 <.L54>

00002682 <.L55>:
        default:
            break;
    2682:	00 00 00    	nop       

00002684 <.L54>:
    }
    return len;
    2684:	3e 00 90    	mov.w     [w14+6], w0
}
    2686:	00 80 fa    	ulnk      
    2688:	00 00 06    	return    
Disassembly of section .isr.text:

0000268a <__SI2C2Interrupt>:
    268a:	80 9f be    	mov.d     w0, [w15++]
    268c:	32 00 f8    	push      0x32
    268e:	34 00 f8    	push      0x34
    2690:	10 00 20    	mov.w     #0x1, w0
    2692:	a0 01 88    	mov.w     w0, 0x34
    2694:	00 20 20    	mov.w     #0x200, w0
    2696:	90 01 88    	mov.w     w0, 0x32
    2698:	02 00 fa    	lnk       #0x2
    269a:	8a 20 a9    	bclr.b    0x8a, #0x1
    269c:	f0 40 80    	mov.w     0x81e, w0
    269e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    26a0:	23 00 32    	bra       Z, 0x26e8 <.L4>
    26a2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    26a4:	03 00 39    	bra       NC, 0x26ac <.L3>
    26a6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    26a8:	4b 00 32    	bra       Z, 0x2740 <.L5>
    26aa:	4c 00 37    	bra       0x2744 <.L17>

000026ac <.L3>:
    26ac:	80 10 80    	mov.w     0x210, w0
    26ae:	00 4f 78    	mov.b     w0, [w14]
    26b0:	c0 10 80    	mov.w     0x218, w0
    26b2:	64 00 60    	and.w     w0, #0x4, w0
    26b4:	00 00 e0    	cp0.w     w0
    26b6:	15 00 32    	bra       Z, 0x26e2 <.L6>
    26b8:	17 c8 bf    	mov.b     0x817, WREG
    26ba:	00 80 fb    	ze        w0, w0
    26bc:	47 00 dd    	sl.w      w0, #0x7, w0
    26be:	80 40 78    	mov.b     w0, w1
    26c0:	18 c8 bf    	mov.b     0x818, WREG
    26c2:	00 80 fb    	ze        w0, w0
    26c4:	67 00 60    	and.w     w0, #0x7, w0
    26c6:	44 00 dd    	sl.w      w0, #0x4, w0
    26c8:	00 40 78    	mov.b     w0, w0
    26ca:	80 c0 70    	ior.b     w1, w0, w1
    26cc:	19 c8 bf    	mov.b     0x819, WREG
    26ce:	6f 40 60    	and.b     w0, #0xf, w0
    26d0:	00 c0 70    	ior.b     w1, w0, w0
    26d2:	14 e8 b7    	mov.b     WREG, 0x814
    26d4:	14 c8 bf    	mov.b     0x814, WREG
    26d6:	00 80 fb    	ze        w0, w0
    26d8:	90 10 88    	mov.w     w0, 0x212
    26da:	17 82 a8    	bset.b    0x217, #0x4
    26dc:	20 00 20    	mov.w     #0x2, w0
    26de:	f0 40 88    	mov.w     w0, 0x81e
    26e0:	32 00 37    	bra       0x2746 <.L1>

000026e2 <.L6>:
    26e2:	10 00 20    	mov.w     #0x1, w0
    26e4:	f0 40 88    	mov.w     w0, 0x81e
    26e6:	2f 00 37    	bra       0x2746 <.L1>

000026e8 <.L4>:
    26e8:	80 10 80    	mov.w     0x210, w0
    26ea:	00 40 78    	mov.b     w0, w0
    26ec:	15 e8 b7    	mov.b     WREG, 0x815
    26ee:	15 c8 bf    	mov.b     0x815, WREG
    26f0:	00 80 fb    	ze        w0, w0
    26f2:	45 00 de    	lsr.w     w0, #0x5, w0
    26f4:	00 40 78    	mov.b     w0, w0
    26f6:	00 80 fb    	ze        w0, w0
    26f8:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    26fa:	0c 00 32    	bra       Z, 0x2714 <.L12>
    26fc:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    26fe:	05 00 3c    	bra       GT, 0x270a <.L15>
    2700:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2702:	13 00 32    	bra       Z, 0x272a <.L10>
    2704:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2706:	14 00 32    	bra       Z, 0x2730 <.L11>
    2708:	16 00 37    	bra       0x2736 <.L9>

0000270a <.L15>:
    270a:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    270c:	0b 00 32    	bra       Z, 0x2724 <.L13>
    270e:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    2710:	05 00 32    	bra       Z, 0x271c <.L14>
    2712:	11 00 37    	bra       0x2736 <.L9>

00002714 <.L12>:
    2714:	15 c8 bf    	mov.b     0x815, WREG
    2716:	7f 40 60    	and.b     w0, #0x1f, w0
    2718:	16 e8 b7    	mov.b     WREG, 0x816
    271a:	10 00 37    	bra       0x273c <.L16>

0000271c <.L14>:
    271c:	15 c8 bf    	mov.b     0x815, WREG
    271e:	7f 40 60    	and.b     w0, #0x1f, w0
    2720:	18 e8 b7    	mov.b     WREG, 0x818
    2722:	0c 00 37    	bra       0x273c <.L16>

00002724 <.L13>:
    2724:	10 c0 b3    	mov.b     #0x1, w0
    2726:	1a e8 b7    	mov.b     WREG, 0x81a
    2728:	09 00 37    	bra       0x273c <.L16>

0000272a <.L10>:
    272a:	10 c0 b3    	mov.b     #0x1, w0
    272c:	1b e8 b7    	mov.b     WREG, 0x81b
    272e:	06 00 37    	bra       0x273c <.L16>

00002730 <.L11>:
    2730:	10 c0 b3    	mov.b     #0x1, w0
    2732:	1c e8 b7    	mov.b     WREG, 0x81c
    2734:	03 00 37    	bra       0x273c <.L16>

00002736 <.L9>:
    2736:	19 c8 bf    	mov.b     0x819, WREG
    2738:	00 40 e8    	inc.b     w0, w0
    273a:	19 e8 b7    	mov.b     WREG, 0x819

0000273c <.L16>:
    273c:	1e 28 ef    	clr.w     0x81e
    273e:	03 00 37    	bra       0x2746 <.L1>

00002740 <.L5>:
    2740:	1e 28 ef    	clr.w     0x81e
    2742:	01 00 37    	bra       0x2746 <.L1>

00002744 <.L17>:
    2744:	1e 28 ef    	clr.w     0x81e

00002746 <.L1>:
    2746:	00 80 fa    	ulnk      
    2748:	34 00 f9    	pop       0x34
    274a:	32 00 f9    	pop       0x32
    274c:	4f 00 be    	mov.d     [--w15], w0
    274e:	00 40 06    	retfie    

00002750 <__U1TXInterrupt>:
    2750:	80 9f be    	mov.d     w0, [w15++]
    2752:	32 00 f8    	push      0x32
    2754:	34 00 f8    	push      0x34
    2756:	10 00 20    	mov.w     #0x1, w0
    2758:	a0 01 88    	mov.w     w0, 0x34
    275a:	00 20 20    	mov.w     #0x200, w0
    275c:	90 01 88    	mov.w     w0, 0x32
    275e:	02 00 fa    	lnk       #0x2
    2760:	85 80 a9    	bclr.b    0x85, #0x4
    2762:	50 41 80    	mov.w     0x82a, w0
    2764:	00 00 e0    	cp0.w     w0
    2766:	17 00 3a    	bra       NZ, 0x2796 <.L8>
    2768:	23 42 a9    	bclr.b    0x223, #0x2
    276a:	16 00 37    	bra       0x2798 <.L4>

0000276c <.L7>:
    276c:	ff 3f fc    	disi      #0x3fff
    276e:	11 41 80    	mov.w     0x822, w1
    2770:	30 41 80    	mov.w     0x826, w0
    2772:	00 80 40    	add.w     w1, w0, w0
    2774:	10 4f 78    	mov.b     [w0], [w14]
    2776:	30 41 80    	mov.w     0x826, w0
    2778:	00 00 e8    	inc.w     w0, w0
    277a:	30 41 88    	mov.w     w0, 0x826
    277c:	31 41 80    	mov.w     0x826, w1
    277e:	20 41 80    	mov.w     0x824, w0
    2780:	80 8f 50    	sub.w     w1, w0, [w15]
    2782:	02 00 3a    	bra       NZ, 0x2788 <.L5>
    2784:	00 00 eb    	clr.w     w0
    2786:	30 41 88    	mov.w     w0, 0x826

00002788 <.L5>:
    2788:	50 41 80    	mov.w     0x82a, w0
    278a:	00 00 e9    	dec.w     w0, w0
    278c:	50 41 88    	mov.w     w0, 0x82a
    278e:	52 20 ef    	clr.w     0x52
    2790:	1e 80 fb    	ze        [w14], w0
    2792:	20 11 88    	mov.w     w0, 0x224
    2794:	01 00 37    	bra       0x2798 <.L4>

00002796 <.L8>:
    2796:	00 00 00    	nop       

00002798 <.L4>:
    2798:	11 11 80    	mov.w     0x222, w1
    279a:	00 20 20    	mov.w     #0x200, w0
    279c:	00 80 60    	and.w     w1, w0, w0
    279e:	00 00 e0    	cp0.w     w0
    27a0:	03 00 3a    	bra       NZ, 0x27a8 <.L2>
    27a2:	50 41 80    	mov.w     0x82a, w0
    27a4:	00 00 e0    	cp0.w     w0
    27a6:	e2 ff 3a    	bra       NZ, 0x276c <.L7>

000027a8 <.L2>:
    27a8:	00 80 fa    	ulnk      
    27aa:	34 00 f9    	pop       0x34
    27ac:	32 00 f9    	pop       0x32
    27ae:	4f 00 be    	mov.d     [--w15], w0
    27b0:	00 40 06    	retfie    

000027b2 <__U1RXInterrupt>:
    27b2:	80 9f be    	mov.d     w0, [w15++]
    27b4:	32 00 f8    	push      0x32
    27b6:	34 00 f8    	push      0x34
    27b8:	10 00 20    	mov.w     #0x1, w0
    27ba:	a0 01 88    	mov.w     w0, 0x34
    27bc:	00 20 20    	mov.w     #0x200, w0
    27be:	90 01 88    	mov.w     w0, 0x32
    27c0:	00 00 fa    	lnk       #0x0
    27c2:	85 60 a9    	bclr.b    0x85, #0x3
    27c4:	14 00 37    	bra       0x27ee <.L10>

000027c6 <.L13>:
    27c6:	ff 3f fc    	disi      #0x3fff
    27c8:	61 41 80    	mov.w     0x82c, w1
    27ca:	90 41 80    	mov.w     0x832, w0
    27cc:	00 80 40    	add.w     w1, w0, w0
    27ce:	31 11 80    	mov.w     0x226, w1
    27d0:	81 40 78    	mov.b     w1, w1
    27d2:	01 48 78    	mov.b     w1, [w0]
    27d4:	90 41 80    	mov.w     0x832, w0
    27d6:	00 00 e8    	inc.w     w0, w0
    27d8:	90 41 88    	mov.w     w0, 0x832
    27da:	91 41 80    	mov.w     0x832, w1
    27dc:	70 41 80    	mov.w     0x82e, w0
    27de:	80 8f 50    	sub.w     w1, w0, [w15]
    27e0:	02 00 3a    	bra       NZ, 0x27e6 <.L11>
    27e2:	00 00 eb    	clr.w     w0
    27e4:	90 41 88    	mov.w     w0, 0x832

000027e6 <.L11>:
    27e6:	a0 41 80    	mov.w     0x834, w0
    27e8:	00 00 e8    	inc.w     w0, w0
    27ea:	a0 41 88    	mov.w     w0, 0x834
    27ec:	52 20 ef    	clr.w     0x52

000027ee <.L10>:
    27ee:	10 11 80    	mov.w     0x222, w0
    27f0:	61 00 60    	and.w     w0, #0x1, w0
    27f2:	00 00 e0    	cp0.w     w0
    27f4:	04 00 32    	bra       Z, 0x27fe <.L9>
    27f6:	a1 41 80    	mov.w     0x834, w1
    27f8:	70 41 80    	mov.w     0x82e, w0
    27fa:	80 8f 50    	sub.w     w1, w0, [w15]
    27fc:	e4 ff 3a    	bra       NZ, 0x27c6 <.L13>

000027fe <.L9>:
    27fe:	00 80 fa    	ulnk      
    2800:	34 00 f9    	pop       0x34
    2802:	32 00 f9    	pop       0x32
    2804:	4f 00 be    	mov.d     [--w15], w0
    2806:	00 40 06    	retfie    
Disassembly of section .text:

00002808 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    2808:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    280a:	00 10 20    	mov.w     #0x100, w0
    280c:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    280e:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    2810:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    2812:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    2814:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    2816:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    2818:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    281a:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    281c:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    281e:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    2820:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    2822:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    2824:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    2826:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    2828:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    282a:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    282c:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    282e:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    2830:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    2832:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    2834:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    2836:	f0 03 20    	mov.w     #0x3f, w0
    2838:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    283a:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    283c:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    283e:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    2840:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    2842:	00 0e 20    	mov.w     #0xe0, w0
    2844:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    2846:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    2848:	00 c4 20    	mov.w     #0xc40, w0
    284a:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    284c:	50 00 20    	mov.w     #0x5, w0
    284e:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    2850:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    2852:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    2854:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    2856:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2858:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    285a:	e8 22 a9    	bclr.b    0x2e8, #0x1
    285c:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    285e:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    2860:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    2862:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    2864:	00 80 fa    	ulnk      
    2866:	00 00 06    	return    

00002868 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    2868:	02 00 fa    	lnk       #0x2
    286a:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    286c:	9e 00 78    	mov.w     [w14], w1
    286e:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    2870:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    2872:	00 00 00    	nop       

00002874 <.L3>:
    2874:	00 19 80    	mov.w     0x320, w0
    2876:	61 00 60    	and.w     w0, #0x1, w0
    2878:	00 00 e0    	cp0.w     w0
    287a:	fc ff 32    	bra       Z, 0x2874 <.L3>
    return ADC1BUF0;
    287c:	00 18 80    	mov.w     0x300, w0
}
    287e:	00 80 fa    	ulnk      
    2880:	00 00 06    	return    
Disassembly of section .isr.text:

00002882 <__T1Interrupt>:
    2882:	36 00 f8    	push      0x36
    2884:	80 9f be    	mov.d     w0, [w15++]
    2886:	82 9f be    	mov.d     w2, [w15++]
    2888:	84 9f be    	mov.d     w4, [w15++]
    288a:	86 9f be    	mov.d     w6, [w15++]
    288c:	32 00 f8    	push      0x32
    288e:	34 00 f8    	push      0x34
    2890:	10 00 20    	mov.w     #0x1, w0
    2892:	a0 01 88    	mov.w     w0, 0x34
    2894:	00 20 20    	mov.w     #0x200, w0
    2896:	90 01 88    	mov.w     w0, 0x32
    2898:	00 00 fa    	lnk       #0x0
    289a:	84 60 a9    	bclr.b    0x84, #0x3
    289c:	40 40 80    	mov.w     0x808, w0
    289e:	50 40 88    	mov.w     w0, 0x80a
    28a0:	50 00 20    	mov.w     #0x5, w0
    28a2:	e2 ff 07    	rcall     0x2868 <_read_analog> <.LFB1> <.LFE0>
    28a4:	45 00 de    	lsr.w     w0, #0x5, w0
    28a6:	40 40 88    	mov.w     w0, 0x808
    28a8:	41 40 80    	mov.w     0x808, w1
    28aa:	50 40 80    	mov.w     0x80a, w0
    28ac:	80 8f 50    	sub.w     w1, w0, [w15]
    28ae:	02 00 3a    	bra       NZ, 0x28b4 <.L2>
    28b0:	40 40 80    	mov.w     0x808, w0
    28b2:	60 40 88    	mov.w     w0, 0x80c

000028b4 <.L2>:
    28b4:	06 c8 bf    	mov.b     0x806, WREG
    28b6:	80 80 fb    	ze        w0, w1
    28b8:	60 40 80    	mov.w     0x80c, w0
    28ba:	80 8f 50    	sub.w     w1, w0, [w15]
    28bc:	05 00 32    	bra       Z, 0x28c8 <.L1>
    28be:	06 c8 bf    	mov.b     0x806, WREG
    28c0:	07 e8 b7    	mov.b     WREG, 0x807
    28c2:	60 40 80    	mov.w     0x80c, w0
    28c4:	00 40 78    	mov.b     w0, w0
    28c6:	06 e8 b7    	mov.b     WREG, 0x806

000028c8 <.L1>:
    28c8:	00 80 fa    	ulnk      
    28ca:	34 00 f9    	pop       0x34
    28cc:	32 00 f9    	pop       0x32
    28ce:	4f 03 be    	mov.d     [--w15], w6
    28d0:	4f 02 be    	mov.d     [--w15], w4
    28d2:	4f 01 be    	mov.d     [--w15], w2
    28d4:	4f 00 be    	mov.d     [--w15], w0
    28d6:	36 00 f9    	pop       0x36
    28d8:	00 40 06    	retfie    
Disassembly of section .dinit:

000028da <.dinit>:
    28da:	36 10 00    	nop       
    28dc:	14 00 00    	nop       
    28de:	80 00 00    	nop       
    28e0:	00 08 00    	nop       
    28e2:	14 00 00    	nop       
    28e4:	80 00 00    	nop       
    28e6:	14 08 00    	nop       
    28e8:	0c 00 00    	nop       
    28ea:	80 00 00    	nop       
    28ec:	22 08 00    	nop       
    28ee:	14 08 00    	nop       
    28f0:	80 00 00    	nop       
    28f2:	20 08 00    	nop       
    28f4:	02 00 00    	nop       
    28f6:	80 00 00    	nop       
    28f8:	00 00 00    	nop       
Disassembly of section .isr:

000028fa <__DefaultInterrupt>:
    28fa:	00 40 da    	break     
    28fc:	00 00 fe    	reset     
