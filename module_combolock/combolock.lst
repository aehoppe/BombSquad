
combolock.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	d0 28 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	d0 28 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	d0 28 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	d0 28 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	d0 28 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	d0 28 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	d0 28 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	d0 28 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	d0 28 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	d0 28 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	d0 28 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	d0 28 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	d0 28 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	d0 28 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	d0 28 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	d0 28 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	d0 28 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	d0 28 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	d0 28 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	d0 28 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	d0 28 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	d0 28 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	d0 28 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	d0 28 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	d0 28 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	d0 28 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	d0 28 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	d0 28 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	d0 28 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	d0 28 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	d0 28 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	d0 28 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	d0 28 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	d0 28 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	d0 28 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	d0 28 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	d0 28 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	d0 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	d0 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	d0 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	d0 28 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	d0 28 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	d0 28 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	d0 28 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	d0 28 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	d0 28 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	d0 28 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	d0 28 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	d0 28 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	d0 28 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	d0 28 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	d0 28 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	d0 28 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	d0 28 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	d0 28 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	d0 28 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	d0 28 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	d0 28 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	d0 28 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	d0 28 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	d0 28 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	d0 28 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	d0 28 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	d0 28 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	d0 28 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	d0 28 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	d0 28 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	d0 28 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	d0 28 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	d0 28 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	af 04 21    	mov.w     #0x104a, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	87 00 07    	rcall     0x1234 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	00 8b 22    	mov.w     #0x28b0, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	ae 20 02    	call      0x20ae <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	60 12 20    	mov.w     #0x126, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	f0 21 04    	goto      0x21f0 <_setup>
    1216:	00 00 00 
    1218:	50 21 04    	goto      0x2150 <_secondnum>
    121a:	00 00 00 
    121c:	b6 21 04    	goto      0x21b6 <_thirdnum>
    121e:	00 00 00 
    1220:	f0 20 04    	goto      0x20f0 <_firstnum>
    1222:	00 00 00 
    1224:	7c 22 04    	goto      0x227c <_solved>
    1226:	00 00 00 
    1228:	34 22 04    	goto      0x2234 <_run>
    122a:	00 00 00 
    122c:	b6 22 04    	goto      0x22b6 <_end_win>
    122e:	00 00 00 
    1230:	de 22 04    	goto      0x22de <_end_fail>
    1232:	00 00 00 

00001234 <__crt_start_mode>:
    1234:	00 00 05    	retlw.w   #0x0, w0

00001236 <___subsf3>:
    1236:	03 f0 a2    	btg.w     w3, #0xf

00001238 <___addsf3>:
    1238:	88 9f be    	mov.d     w8, [w15++]
    123a:	8a 9f be    	mov.d     w10, [w15++]
    123c:	8c 1f 78    	mov.w     w12, [w15++]
    123e:	f6 00 07    	rcall     0x142c <__funpack2>
    1240:	fd 00 33    	bra       N, 0x143c <__fPropagateNaN>
    1242:	64 50 e1    	cp.w      w10, #0x4
    1244:	4f 00 32    	bra       Z, 0x12e4 <aisinfinite>

00001246 <checkspecialb>:
    1246:	64 20 e1    	cp.w      w4, #0x4
    1248:	52 00 32    	bra       Z, 0x12ee <return2>
    124a:	03 82 6c    	xor.w     w9, w3, w4
    124c:	07 00 3b    	bra       NN, 0x125c <getsign>
    124e:	09 05 d0    	sl.w      w9, w10
    1250:	03 06 d0    	sl.w      w3, w12
    1252:	82 0f 54    	sub.w     w8, w2, [w15]
    1254:	0c 06 5d    	subb.w    w10, w12, w12
    1256:	02 00 39    	bra       NC, 0x125c <getsign>
    1258:	02 00 32    	bra       Z, 0x125e <gotsign>
    125a:	89 01 78    	mov.w     w9, w3

0000125c <getsign>:
    125c:	03 06 78    	mov.w     w3, w12

0000125e <gotsign>:
    125e:	85 82 55    	sub.w     w11, w5, w5
    1260:	04 00 3d    	bra       GE, 0x126a <expcanonical>
    1262:	00 03 fd    	exch      w0, w6
    1264:	81 03 fd    	exch      w1, w7
    1266:	85 02 ea    	neg.w     w5, w5
    1268:	8b 85 42    	add.w     w5, w11, w11

0000126a <expcanonical>:
    126a:	84 0f 72    	ior.w     w4, w4, [w15]
    126c:	02 00 3b    	bra       NN, 0x1272 <nonegate>
    126e:	60 00 10    	subr.w    w0, #0x0, w0
    1270:	e0 80 18    	subbr.w   w1, #0x0, w1

00001272 <nonegate>:
    1272:	60 11 b8    	mul.uu    w2, #0x0, w2
    1274:	00 05 eb    	clr.w     w10
    1276:	7a 28 e1    	cp.w      w5, #0x1a
    1278:	0a 00 39    	bra       NC, 0x128e <aligniter>
    127a:	06 00 78    	mov.w     w6, w0
    127c:	c7 5d dd    	sl.w      w11, #0x7, w11
    127e:	f7 07 b2    	and.w     #0x7f, w7
    1280:	87 80 75    	ior.w     w11, w7, w1
    1282:	2d 00 37    	bra       0x12de <signoff>

00001284 <align>:
    1284:	82 81 71    	ior.w     w3, w2, w3
    1286:	0a 01 78    	mov.w     w10, w2
    1288:	61 05 60    	and.w     w0, #0x1, w10
    128a:	81 80 d1    	asr.w     w1, w1
    128c:	00 80 d3    	rrc.w     w0, w0

0000128e <aligniter>:
    128e:	85 02 e9    	dec.w     w5, w5
    1290:	f9 ff 3b    	bra       NN, 0x1284 <align>

00001292 <aligned>:
    1292:	06 04 40    	add.w     w0, w6, w8
    1294:	87 84 48    	addc.w    w1, w7, w9
    1296:	02 00 3b    	bra       NN, 0x129c <normalizesum>
    1298:	60 04 14    	subr.w    w8, #0x0, w8
    129a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000129c <normalizesum>:
    129c:	09 88 a3    	btst.z    w9, #0x8
    129e:	07 00 32    	bra       Z, 0x12ae <checknormal>
    12a0:	8a 81 71    	ior.w     w3, w10, w3
    12a2:	82 81 71    	ior.w     w3, w2, w3
    12a4:	61 01 64    	and.w     w8, #0x1, w2
    12a6:	89 04 d1    	lsr.w     w9, w9
    12a8:	08 84 d3    	rrc.w     w8, w8
    12aa:	8b 05 e8    	inc.w     w11, w11
    12ac:	17 00 37    	bra       0x12dc <round>

000012ae <checknormal>:
    12ae:	09 78 a3    	btst.z    w9, #0x7
    12b0:	13 00 3a    	bra       NZ, 0x12d8 <discardguard>

000012b2 <underflow>:
    12b2:	0b 00 e0    	cp0.w     w11
    12b4:	13 00 34    	bra       LE, 0x12dc <round>
    12b6:	8b 05 e9    	dec.w     w11, w11
    12b8:	08 04 44    	add.w     w8, w8, w8
    12ba:	89 84 4c    	addc.w    w9, w9, w9
    12bc:	0a 44 74    	ior.b     w8, w10, w8
    12be:	09 78 a3    	btst.z    w9, #0x7
    12c0:	0d 00 3a    	bra       NZ, 0x12dc <round>

000012c2 <normalizeloop>:
    12c2:	0b 00 e0    	cp0.w     w11
    12c4:	07 00 34    	bra       LE, 0x12d4 <normalizeexit>
    12c6:	8b 05 e9    	dec.w     w11, w11
    12c8:	08 04 44    	add.w     w8, w8, w8
    12ca:	89 84 4c    	addc.w    w9, w9, w9
    12cc:	01 00 3a    	bra       NZ, 0x12d0 <normalizetest>
    12ce:	0b 00 20    	mov.w     #0x0, w11

000012d0 <normalizetest>:
    12d0:	09 78 a3    	btst.z    w9, #0x7
    12d2:	f7 ff 32    	bra       Z, 0x12c2 <normalizeloop>

000012d4 <normalizeexit>:
    12d4:	00 01 eb    	clr.w     w2
    12d6:	02 00 37    	bra       0x12dc <round>

000012d8 <discardguard>:
    12d8:	82 81 71    	ior.w     w3, w2, w3
    12da:	0a 01 78    	mov.w     w10, w2

000012dc <round>:
    12dc:	6c 00 07    	rcall     0x13b6 <__fpack>

000012de <signoff>:
    12de:	0c f0 a7    	btsc.w    w12, #0xf
    12e0:	01 f0 a0    	bset.w    w1, #0xf
    12e2:	b5 00 37    	bra       0x144e <__fbopExit>

000012e4 <aisinfinite>:
    12e4:	64 20 e1    	cp.w      w4, #0x4
    12e6:	02 00 3a    	bra       NZ, 0x12ec <return8>
    12e8:	83 8f 6c    	xor.w     w9, w3, [w15]
    12ea:	b5 00 33    	bra       N, 0x1456 <__fbopReturnNaN>

000012ec <return8>:
    12ec:	08 01 be    	mov.d     w8, w2

000012ee <return2>:
    12ee:	02 00 be    	mov.d     w2, w0
    12f0:	ae 00 37    	bra       0x144e <__fbopExit>

000012f2 <___divsf3>:
    12f2:	88 9f be    	mov.d     w8, [w15++]
    12f4:	8a 9f be    	mov.d     w10, [w15++]
    12f6:	8c 1f 78    	mov.w     w12, [w15++]
    12f8:	99 00 07    	rcall     0x142c <__funpack2>
    12fa:	a0 00 33    	bra       N, 0x143c <__fPropagateNaN>
    12fc:	03 86 6c    	xor.w     w9, w3, w12
    12fe:	64 50 e1    	cp.w      w10, #0x4
    1300:	2e 00 32    	bra       Z, 0x135e <aisinfinite>
    1302:	64 20 e1    	cp.w      w4, #0x4
    1304:	33 00 32    	bra       Z, 0x136c <returnZero>
    1306:	61 50 e1    	cp.w      w10, #0x1
    1308:	2f 00 32    	bra       Z, 0x1368 <aiszero>
    130a:	61 20 e1    	cp.w      w4, #0x1
    130c:	31 00 32    	bra       Z, 0x1370 <returnInf>

0000130e <finitenonzero>:
    130e:	85 85 55    	sub.w     w11, w5, w11
    1310:	eb 07 b0    	add.w     #0x7e, w11
    1312:	09 00 20    	mov.w     #0x0, w9
    1314:	08 04 20    	mov.w     #0x40, w8
    1316:	05 00 37    	bra       0x1322 <diventry>

00001318 <divnext>:
    1318:	08 04 44    	add.w     w8, w8, w8
    131a:	89 84 4c    	addc.w    w9, w9, w9
    131c:	0a 00 31    	bra       C, 0x1332 <divdone> <formsticky>

0000131e <divloop>:
    131e:	06 03 43    	add.w     w6, w6, w6
    1320:	87 83 4b    	addc.w    w7, w7, w7

00001322 <diventry>:
    1322:	00 01 53    	sub.w     w6, w0, w2
    1324:	81 81 5b    	subb.w    w7, w1, w3
    1326:	f8 ff 33    	bra       N, 0x1318 <divnext>
    1328:	02 03 be    	mov.d     w2, w6
    132a:	08 00 a0    	bset.w    w8, #0x0
    132c:	08 04 44    	add.w     w8, w8, w8
    132e:	89 84 4c    	addc.w    w9, w9, w9
    1330:	f6 ff 39    	bra       NC, 0x131e <divloop>

00001332 <divdone>:
    1332:	c6 39 dd    	sl.w      w7, #0x6, w3
    1334:	83 01 73    	ior.w     w6, w3, w3
    1336:	01 00 32    	bra       Z, 0x133a <stickyok>
    1338:	13 00 20    	mov.w     #0x1, w3

0000133a <stickyok>:
    133a:	89 04 d1    	lsr.w     w9, w9
    133c:	08 84 d3    	rrc.w     w8, w8
    133e:	09 98 a3    	btst.z    w9, #0x9
    1340:	05 00 32    	bra       Z, 0x134c <guardused>
    1342:	08 00 a7    	btsc.w    w8, #0x0
    1344:	03 00 a0    	bset.w    w3, #0x0
    1346:	89 04 d1    	lsr.w     w9, w9
    1348:	08 84 d3    	rrc.w     w8, w8
    134a:	8b 05 e8    	inc.w     w11, w11

0000134c <guardused>:
    134c:	89 04 d1    	lsr.w     w9, w9
    134e:	08 84 d3    	rrc.w     w8, w8
    1350:	00 01 eb    	clr.w     w2
    1352:	02 81 d2    	rlc.w     w2, w2
    1354:	30 00 07    	rcall     0x13b6 <__fpack>

00001356 <return0>:
    1356:	01 f0 a1    	bclr.w    w1, #0xf
    1358:	0c f0 a7    	btsc.w    w12, #0xf
    135a:	01 f0 a0    	bset.w    w1, #0xf
    135c:	78 00 37    	bra       0x144e <__fbopExit>

0000135e <aisinfinite>:
    135e:	64 20 e1    	cp.w      w4, #0x4
    1360:	7a 00 32    	bra       Z, 0x1456 <__fbopReturnNaN>

00001362 <return8>:
    1362:	08 01 be    	mov.d     w8, w2

00001364 <return2>:
    1364:	02 00 be    	mov.d     w2, w0
    1366:	f7 ff 37    	bra       0x1356 <return0>

00001368 <aiszero>:
    1368:	61 20 e1    	cp.w      w4, #0x1
    136a:	75 00 32    	bra       Z, 0x1456 <__fbopReturnNaN>

0000136c <returnZero>:
    136c:	60 00 b8    	mul.uu    w0, #0x0, w0
    136e:	f3 ff 37    	bra       0x1356 <return0>

00001370 <returnInf>:
    1370:	00 00 20    	mov.w     #0x0, w0
    1372:	01 f8 27    	mov.w     #0x7f80, w1
    1374:	f0 ff 37    	bra       0x1356 <return0>

00001376 <___eqsf2>:
    1376:	14 00 20    	mov.w     #0x1, w4
    1378:	b8 00 37    	bra       0x14ea <__fcompare>

0000137a <___fixunssfsi>:
    137a:	00 01 be    	mov.d     w0, w2
    137c:	42 00 07    	rcall     0x1402 <__funpack>
    137e:	04 70 a7    	btsc.w    w4, #0x7
    1380:	03 f0 a1    	bclr.w    w3, #0xf
    1382:	03 f8 a3    	btst.z    w3, #0xf
    1384:	13 00 3a    	bra       NZ, 0x13ac <returnzero>
    1386:	65 09 b1    	sub.w     #0x96, w5
    1388:	10 00 32    	bra       Z, 0x13aa <exit>
    138a:	09 00 35    	bra       LT, 0x139e <shiftright>
    138c:	69 28 e1    	cp.w      w5, #0x9
    138e:	02 00 35    	bra       LT, 0x1394 <shiftleft>
    1390:	01 00 28    	mov.w     #0x8000, w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <shiftleft>:
    1394:	00 00 40    	add.w     w0, w0, w0
    1396:	81 80 48    	addc.w    w1, w1, w1
    1398:	85 02 e9    	dec.w     w5, w5
    139a:	fc ff 3a    	bra       NZ, 0x1394 <shiftleft>
    139c:	00 00 06    	return    

0000139e <shiftright>:
    139e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13a0:	05 00 35    	bra       LT, 0x13ac <returnzero>

000013a2 <shiftrightloop>:
    13a2:	81 00 d1    	lsr.w     w1, w1
    13a4:	00 80 d3    	rrc.w     w0, w0
    13a6:	85 02 e8    	inc.w     w5, w5
    13a8:	fc ff 3a    	bra       NZ, 0x13a2 <shiftrightloop>

000013aa <exit>:
    13aa:	00 00 06    	return    

000013ac <returnzero>:
    13ac:	80 00 eb    	clr.w     w1
    13ae:	00 00 05    	retlw.w   #0x0, w0

000013b0 <___floatsisf>:
    13b0:	4f 89 de    	asr.w     w1, #0xf, w2
    13b2:	82 01 78    	mov.w     w2, w3
    13b4:	b5 00 37    	bra       0x1520 <___floatdisf>

000013b6 <__fpack>:
    13b6:	81 00 20    	mov.w     #0x8, w1
    13b8:	61 80 55    	sub.w     w11, #0x1, w0
    13ba:	0b 00 3d    	bra       GE, 0x13d2 <notsubnormal>
    13bc:	0b 00 20    	mov.w     #0x0, w11
    13be:	61 fe 2f    	mov.w     #0xffe6, w1
    13c0:	01 00 e1    	cp.w      w0, w1
    13c2:	1d 00 34    	bra       LE, 0x13fe <zerosig>

000013c4 <subnormal>:
    13c4:	82 81 71    	ior.w     w3, w2, w3
    13c6:	61 01 64    	and.w     w8, #0x1, w2
    13c8:	89 04 d1    	lsr.w     w9, w9
    13ca:	08 84 d3    	rrc.w     w8, w8
    13cc:	00 00 e8    	inc.w     w0, w0
    13ce:	fa ff 3a    	bra       NZ, 0x13c4 <subnormal>
    13d0:	71 00 20    	mov.w     #0x7, w1

000013d2 <notsubnormal>:
    13d2:	61 00 64    	and.w     w8, #0x1, w0
    13d4:	03 00 70    	ior.w     w0, w3, w0
    13d6:	02 00 60    	and.w     w0, w2, w0
    13d8:	09 00 32    	bra       Z, 0x13ec <packupandgo>
    13da:	61 04 44    	add.w     w8, #0x1, w8
    13dc:	e0 84 4c    	addc.w    w9, #0x0, w9
    13de:	09 88 a5    	btst.z    w9, w1
    13e0:	05 00 32    	bra       Z, 0x13ec <packupandgo>
    13e2:	8b 05 e8    	inc.w     w11, w11
    13e4:	68 08 e1    	cp.w      w1, #0x8
    13e6:	02 00 3a    	bra       NZ, 0x13ec <packupandgo>
    13e8:	89 04 d1    	lsr.w     w9, w9
    13ea:	08 84 d3    	rrc.w     w8, w8

000013ec <packupandgo>:
    13ec:	f2 0f 20    	mov.w     #0xff, w2
    13ee:	02 58 e1    	cp.w      w11, w2
    13f0:	05 00 3d    	bra       GE, 0x13fc <overflow>
    13f2:	c7 5d dd    	sl.w      w11, #0x7, w11
    13f4:	f9 07 b2    	and.w     #0x7f, w9
    13f6:	89 80 75    	ior.w     w11, w9, w1
    13f8:	08 00 78    	mov.w     w8, w0
    13fa:	00 00 06    	return    

000013fc <overflow>:
    13fc:	0b f8 27    	mov.w     #0x7f80, w11

000013fe <zerosig>:
    13fe:	8b 00 78    	mov.w     w11, w1
    1400:	00 00 05    	retlw.w   #0x0, w0

00001402 <__funpack>:
    1402:	c7 0a de    	lsr.w     w1, #0x7, w5
    1404:	f1 07 b2    	and.w     #0x7f, w1
    1406:	f5 0f b2    	and.w     #0xff, w5
    1408:	08 00 32    	bra       Z, 0x141a <zeroorsub>
    140a:	e1 cf 42    	add.b     w5, #0x1, [w15]
    140c:	02 00 32    	bra       Z, 0x1412 <nanorinf>

0000140e <finitereturn>:
    140e:	01 70 a0    	bset.w    w1, #0x7
    1410:	24 00 05    	retlw.w   #0x2, w4

00001412 <nanorinf>:
    1412:	81 0f 70    	ior.w     w0, w1, [w15]
    1414:	01 00 32    	bra       Z, 0x1418 <infinite>
    1416:	04 08 05    	retlw.w   #0x80, w4

00001418 <infinite>:
    1418:	44 00 05    	retlw.w   #0x4, w4

0000141a <zeroorsub>:
    141a:	81 0f 70    	ior.w     w0, w1, [w15]
    141c:	02 00 3a    	bra       NZ, 0x1422 <subnormal>
    141e:	14 00 05    	retlw.w   #0x1, w4

00001420 <normalize>:
    1420:	85 02 e9    	dec.w     w5, w5

00001422 <subnormal>:
    1422:	00 00 40    	add.w     w0, w0, w0
    1424:	81 c0 48    	addc.b    w1, w1, w1
    1426:	fc ff 3b    	bra       NN, 0x1420 <normalize>
    1428:	01 70 a0    	bset.w    w1, #0x7
    142a:	24 00 05    	retlw.w   #0x2, w4

0000142c <__funpack2>:
    142c:	00 04 be    	mov.d     w0, w8
    142e:	e9 ff 07    	rcall     0x1402 <__funpack>
    1430:	00 03 be    	mov.d     w0, w6
    1432:	04 05 be    	mov.d     w4, w10
    1434:	02 00 be    	mov.d     w2, w0
    1436:	e5 ff 07    	rcall     0x1402 <__funpack>
    1438:	84 4f 75    	ior.b     w10, w4, [w15]
    143a:	00 00 06    	return    

0000143c <__fPropagateNaN>:
    143c:	02 00 be    	mov.d     w2, w0
    143e:	64 50 e1    	cp.w      w10, #0x4
    1440:	05 00 36    	bra       LEU, 0x144c <return0>
    1442:	64 20 e1    	cp.w      w4, #0x4
    1444:	02 00 36    	bra       LEU, 0x144a <return8>
    1446:	09 68 a3    	btst.z    w9, #0x6
    1448:	01 00 3a    	bra       NZ, 0x144c <return0>

0000144a <return8>:
    144a:	08 00 be    	mov.d     w8, w0

0000144c <return0>:
    144c:	01 60 a0    	bset.w    w1, #0x6

0000144e <__fbopExit>:
    144e:	4f 06 78    	mov.w     [--w15], w12
    1450:	4f 05 be    	mov.d     [--w15], w10
    1452:	4f 04 be    	mov.d     [--w15], w8
    1454:	00 00 06    	return    

00001456 <__fbopReturnNaN>:
    1456:	f0 ff 2f    	mov.w     #0xffff, w0
    1458:	f1 ff 27    	mov.w     #0x7fff, w1
    145a:	f9 ff 37    	bra       0x144e <__fbopExit>

0000145c <___mulsf3>:
    145c:	88 9f be    	mov.d     w8, [w15++]
    145e:	8a 9f be    	mov.d     w10, [w15++]
    1460:	8c 1f 78    	mov.w     w12, [w15++]
    1462:	e4 ff 07    	rcall     0x142c <__funpack2>
    1464:	eb ff 33    	bra       N, 0x143c <__fPropagateNaN>
    1466:	03 86 6c    	xor.w     w9, w3, w12
    1468:	64 50 e1    	cp.w      w10, #0x4
    146a:	24 00 32    	bra       Z, 0x14b4 <aisinfinite>
    146c:	64 20 e1    	cp.w      w4, #0x4
    146e:	27 00 32    	bra       Z, 0x14be <bisinfinite>
    1470:	61 50 e1    	cp.w      w10, #0x1
    1472:	22 00 32    	bra       Z, 0x14b8 <return8>
    1474:	61 20 e1    	cp.w      w4, #0x1
    1476:	21 00 32    	bra       Z, 0x14ba <return2>
    1478:	8b 85 42    	add.w     w5, w11, w11
    147a:	eb 07 b1    	sub.w     #0x7e, w11
    147c:	01 34 b8    	mul.uu    w6, w1, w8
    147e:	00 3a b8    	mul.uu    w7, w0, w4
    1480:	08 04 42    	add.w     w4, w8, w8
    1482:	89 84 4a    	addc.w    w5, w9, w9
    1484:	01 3a b8    	mul.uu    w7, w1, w4
    1486:	00 30 b8    	mul.uu    w6, w0, w0
    1488:	88 80 40    	add.w     w1, w8, w1
    148a:	09 01 4a    	addc.w    w4, w9, w2
    148c:	04 00 33    	bra       N, 0x1496 <formsticky>
    148e:	00 00 40    	add.w     w0, w0, w0
    1490:	81 80 48    	addc.w    w1, w1, w1
    1492:	02 01 49    	addc.w    w2, w2, w2
    1494:	8b 05 e9    	dec.w     w11, w11

00001496 <formsticky>:
    1496:	c9 09 dd    	sl.w      w1, #0x9, w3
    1498:	83 01 70    	ior.w     w0, w3, w3
    149a:	01 00 32    	bra       Z, 0x149e <formRandSig>
    149c:	13 00 20    	mov.w     #0x1, w3

0000149e <formRandSig>:
    149e:	c8 14 de    	lsr.w     w2, #0x8, w9
    14a0:	48 14 dd    	sl.w      w2, #0x8, w8
    14a2:	47 09 de    	lsr.w     w1, #0x7, w2
    14a4:	12 00 b2    	and.w     #0x1, w2
    14a6:	c8 08 de    	lsr.w     w1, #0x8, w1
    14a8:	08 84 70    	ior.w     w1, w8, w8
    14aa:	85 ff 07    	rcall     0x13b6 <__fpack>

000014ac <return0>:
    14ac:	01 f0 a1    	bclr.w    w1, #0xf
    14ae:	0c f0 a7    	btsc.w    w12, #0xf
    14b0:	01 f0 a0    	bset.w    w1, #0xf
    14b2:	cd ff 37    	bra       0x144e <__fbopExit>

000014b4 <aisinfinite>:
    14b4:	61 20 e1    	cp.w      w4, #0x1
    14b6:	cf ff 32    	bra       Z, 0x1456 <__fbopReturnNaN>

000014b8 <return8>:
    14b8:	08 01 be    	mov.d     w8, w2

000014ba <return2>:
    14ba:	02 00 be    	mov.d     w2, w0
    14bc:	f7 ff 37    	bra       0x14ac <return0>

000014be <bisinfinite>:
    14be:	61 50 e1    	cp.w      w10, #0x1
    14c0:	fc ff 3a    	bra       NZ, 0x14ba <return2>
    14c2:	c9 ff 37    	bra       0x1456 <__fbopReturnNaN>

000014c4 <___udivsi3>:
    14c4:	60 22 b8    	mul.uu    w4, #0x0, w4
    14c6:	06 02 20    	mov.w     #0x20, w6

000014c8 <nextbit>:
    14c8:	00 00 d0    	sl.w      w0, w0
    14ca:	81 80 d2    	rlc.w     w1, w1
    14cc:	04 82 d2    	rlc.w     w4, w4
    14ce:	85 82 d2    	rlc.w     w5, w5
    14d0:	00 00 a0    	bset.w    w0, #0x0
    14d2:	02 02 52    	sub.w     w4, w2, w4
    14d4:	83 82 5a    	subb.w    w5, w3, w5
    14d6:	03 00 31    	bra       C, 0x14de <iterate>
    14d8:	02 02 42    	add.w     w4, w2, w4
    14da:	83 82 4a    	addc.w    w5, w3, w5
    14dc:	00 00 a1    	bclr.w    w0, #0x0

000014de <iterate>:
    14de:	06 03 e9    	dec.w     w6, w6
    14e0:	f3 ff 3a    	bra       NZ, 0x14c8 <nextbit>
    14e2:	00 00 06    	return    

000014e4 <___umodsi3>:
    14e4:	ef ff 07    	rcall     0x14c4 <___udivsi3>
    14e6:	04 00 be    	mov.d     w4, w0
    14e8:	00 00 06    	return    

000014ea <__fcompare>:
    14ea:	88 9f be    	mov.d     w8, [w15++]
    14ec:	8a 9f be    	mov.d     w10, [w15++]
    14ee:	84 1f 78    	mov.w     w4, [w15++]
    14f0:	9d ff 07    	rcall     0x142c <__funpack2>
    14f2:	4f 00 78    	mov.w     [--w15], w0
    14f4:	11 00 33    	bra       N, 0x1518 <exit>
    14f6:	f0 ff 2f    	mov.w     #0xffff, w0
    14f8:	83 8f 6c    	xor.w     w9, w3, [w15]
    14fa:	06 00 3b    	bra       NN, 0x1508 <comparemag>
    14fc:	04 05 65    	and.w     w10, w4, w10
    14fe:	0a 00 a7    	btsc.w    w10, #0x0
    1500:	08 00 37    	bra       0x1512 <returnEqual>
    1502:	09 f0 a6    	btss.w    w9, #0xf
    1504:	10 00 20    	mov.w     #0x1, w0
    1506:	08 00 37    	bra       0x1518 <exit>

00001508 <comparemag>:
    1508:	82 0f 54    	sub.w     w8, w2, [w15]
    150a:	83 8f 5c    	subb.w    w9, w3, [w15]
    150c:	03 00 39    	bra       NC, 0x1514 <adjust>
    150e:	10 00 20    	mov.w     #0x1, w0
    1510:	01 00 3e    	bra       GTU, 0x1514 <adjust>

00001512 <returnEqual>:
    1512:	00 00 20    	mov.w     #0x0, w0

00001514 <adjust>:
    1514:	09 f0 a7    	btsc.w    w9, #0xf
    1516:	00 00 ea    	neg.w     w0, w0

00001518 <exit>:
    1518:	4f 05 be    	mov.d     [--w15], w10
    151a:	4f 04 be    	mov.d     [--w15], w8
    151c:	00 00 e0    	cp0.w     w0
    151e:	00 00 06    	return    

00001520 <___floatdisf>:
    1520:	88 1f 78    	mov.w     w8, [w15++]
    1522:	03 04 78    	mov.w     w3, w8
    1524:	03 00 e0    	cp0.w     w3
    1526:	07 00 3d    	bra       GE, 0x1536 <notspecial>

00001528 <negative>:
    1528:	60 00 10    	subr.w    w0, #0x0, w0
    152a:	e0 80 18    	subbr.w   w1, #0x0, w1
    152c:	60 01 19    	subbr.w   w2, #0x0, w2
    152e:	e0 81 19    	subbr.w   w3, #0x0, w3
    1530:	02 00 3b    	bra       NN, 0x1536 <notspecial>
    1532:	01 f0 2d    	mov.w     #0xdf00, w1
    1534:	03 00 37    	bra       0x153c <return0>

00001536 <notspecial>:
    1536:	04 00 07    	rcall     0x1540 <___floatundisf>
    1538:	08 f0 a7    	btsc.w    w8, #0xf
    153a:	01 f0 a0    	bset.w    w1, #0xf

0000153c <return0>:
    153c:	4f 04 78    	mov.w     [--w15], w8
    153e:	00 00 06    	return    

00001540 <___floatundisf>:
    1540:	88 9f be    	mov.d     w8, [w15++]
    1542:	8a 9f be    	mov.d     w10, [w15++]
    1544:	00 82 70    	ior.w     w1, w0, w4
    1546:	04 02 71    	ior.w     w2, w4, w4
    1548:	04 82 71    	ior.w     w3, w4, w4
    154a:	26 00 32    	bra       Z, 0x1598 <return0>
    154c:	00 04 be    	mov.d     w0, w8
    154e:	02 00 be    	mov.d     w2, w0
    1550:	60 11 b8    	mul.uu    w2, #0x0, w2
    1552:	6b 09 20    	mov.w     #0x96, w11
    1554:	95 02 20    	mov.w     #0x29, w5
    1556:	01 82 cf    	ff1l      w1, w4
    1558:	0a 00 39    	bra       NC, 0x156e <fixshift>
    155a:	05 41 b1    	sub.b     #0x10, w5
    155c:	00 82 cf    	ff1l      w0, w4
    155e:	07 00 39    	bra       NC, 0x156e <fixshift>
    1560:	05 41 b1    	sub.b     #0x10, w5
    1562:	09 82 cf    	ff1l      w9, w4
    1564:	04 00 39    	bra       NC, 0x156e <fixshift>
    1566:	05 41 b1    	sub.b     #0x10, w5
    1568:	08 82 cf    	ff1l      w8, w4
    156a:	01 00 39    	bra       NC, 0x156e <fixshift>
    156c:	05 41 b1    	sub.b     #0x10, w5

0000156e <fixshift>:
    156e:	05 42 52    	sub.b     w4, w5, w4
    1570:	12 00 32    	bra       Z, 0x1596 <round>
    1572:	0a 00 3b    	bra       NN, 0x1588 <shiftleft>

00001574 <shiftright>:
    1574:	82 81 71    	ior.w     w3, w2, w3
    1576:	61 01 64    	and.w     w8, #0x1, w2
    1578:	81 00 d1    	lsr.w     w1, w1
    157a:	00 80 d3    	rrc.w     w0, w0
    157c:	89 84 d3    	rrc.w     w9, w9
    157e:	08 84 d3    	rrc.w     w8, w8
    1580:	8b 05 e8    	inc.w     w11, w11
    1582:	04 42 e8    	inc.b     w4, w4
    1584:	f7 ff 3a    	bra       NZ, 0x1574 <shiftright>
    1586:	07 00 37    	bra       0x1596 <round>

00001588 <shiftleft>:
    1588:	08 04 44    	add.w     w8, w8, w8
    158a:	89 84 4c    	addc.w    w9, w9, w9
    158c:	00 00 48    	addc.w    w0, w0, w0
    158e:	81 80 48    	addc.w    w1, w1, w1
    1590:	8b 05 e9    	dec.w     w11, w11
    1592:	04 42 e9    	dec.b     w4, w4
    1594:	f9 ff 3a    	bra       NZ, 0x1588 <shiftleft>

00001596 <round>:
    1596:	0f ff 07    	rcall     0x13b6 <__fpack>

00001598 <return0>:
    1598:	4f 05 be    	mov.d     [--w15], w10
    159a:	4f 04 be    	mov.d     [--w15], w8
    159c:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	58 28 04    	goto      0x2858 <.LFE1>
    1026:	00 00 00 
    1028:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	88 27 04    	goto      0x2788 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	26 27 04    	goto      0x2726 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	56 26 04    	goto      0x2656 <__SI2C2Interrupt>
    10b2:	00 00 00 
    10b4:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	d0 28 04    	goto      0x28d0 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000959e <_numbertable>:
    959e:	3f 00       	.word 0x3f
    95a0:	06 00       	.word 0x6
    95a2:	5b 00       	.word 0x5b
    95a4:	4f 00       	.word 0x4f
    95a6:	66 00       	.word 0x66
    95a8:	6d 00       	.word 0x6d
    95aa:	7d 00       	.word 0x7d
    95ac:	07 00       	.word 0x7
    95ae:	3f 00       	.word 0x3f
    95b0:	6f 00       	.word 0x6f
    95b2:	77 00       	.word 0x77
    95b4:	7c 00       	.word 0x7c
    95b6:	39 00       	.word 0x39
    95b8:	5e 00       	.word 0x5e
    95ba:	79 00       	.word 0x79
    95bc:	71 00       	.word 0x71
	...

000095c2 <_alphafonttable>:
    95c2:	01 00       	.word 0x1
    95c4:	02 00       	.word 0x2
    95c6:	04 00       	.word 0x4
    95c8:	08 00       	.word 0x8
    95ca:	10 00       	.word 0x10
    95cc:	20 00       	.word 0x20
    95ce:	40 00       	.word 0x40
    95d0:	80 00       	.word 0x80
    95d2:	00 01       	.word 0x100
    95d4:	00 02       	.word 0x200
    95d6:	00 04       	.word 0x400
    95d8:	00 08       	.word 0x800
    95da:	00 10       	.word 0x1000
    95dc:	00 20       	.word 0x2000
    95de:	00 40       	.word 0x4000
    95e0:	00 80       	.word 0x8000
	...
    95f2:	c9 12       	.word 0x12c9
    95f4:	c0 15       	.word 0x15c0
    95f6:	f9 12       	.word 0x12f9
    95f8:	e3 00       	.word 0xe3
    95fa:	30 05       	.word 0x530
    95fc:	c8 12       	.word 0x12c8
    95fe:	00 3a       	.word 0x3a00
    9600:	00 17       	.word 0x1700
    9602:	00 00       	.word 0
    9604:	06 00       	.word 0x6
    9606:	20 02       	.word 0x220
    9608:	ce 12       	.word 0x12ce
    960a:	ed 12       	.word 0x12ed
    960c:	24 0c       	.word 0xc24
    960e:	5d 23       	.word 0x235d
    9610:	00 04       	.word 0x400
    9612:	00 24       	.word 0x2400
    9614:	00 09       	.word 0x900
    9616:	c0 3f       	.word 0x3fc0
    9618:	c0 12       	.word 0x12c0
    961a:	00 08       	.word 0x800
    961c:	c0 00       	.word 0xc0
    961e:	00 00       	.word 0
    9620:	00 0c       	.word 0xc00
    9622:	3f 0c       	.word 0xc3f
    9624:	06 00       	.word 0x6
    9626:	db 00       	.word 0xdb
    9628:	8f 00       	.word 0x8f
    962a:	e6 00       	.word 0xe6
    962c:	69 20       	.word 0x2069
    962e:	fd 00       	.word 0xfd
    9630:	07 00       	.word 0x7
    9632:	ff 00       	.word 0xff
    9634:	ef 00       	.word 0xef
    9636:	00 12       	.word 0x1200
    9638:	00 0a       	.word 0xa00
    963a:	00 24       	.word 0x2400
    963c:	c8 00       	.word 0xc8
    963e:	00 09       	.word 0x900
    9640:	83 10       	.word 0x1083
    9642:	bb 02       	.word 0x2bb
    9644:	f7 00       	.word 0xf7
    9646:	8f 12       	.word 0x128f
    9648:	39 00       	.word 0x39
    964a:	0f 12       	.word 0x120f
    964c:	f9 00       	.word 0xf9
    964e:	71 00       	.word 0x71
    9650:	bd 00       	.word 0xbd
    9652:	f6 00       	.word 0xf6
    9654:	00 12       	.word 0x1200
    9656:	1e 00       	.word 0x1e
    9658:	70 24       	.word 0x2470
    965a:	38 00       	.word 0x38
    965c:	36 05       	.word 0x536
    965e:	36 21       	.word 0x2136
    9660:	3f 00       	.word 0x3f
    9662:	f3 00       	.word 0xf3
    9664:	3f 20       	.word 0x203f
    9666:	f3 20       	.word 0x20f3
    9668:	ed 00       	.word 0xed
    966a:	01 12       	.word 0x1201
    966c:	3e 00       	.word 0x3e
    966e:	30 0c       	.word 0xc30
    9670:	36 28       	.word 0x2836
    9672:	00 2d       	.word 0x2d00
    9674:	00 15       	.word 0x1500
    9676:	09 0c       	.word 0xc09
    9678:	39 00       	.word 0x39
    967a:	00 21       	.word 0x2100
    967c:	0f 00       	.word 0xf
    967e:	03 0c       	.word 0xc03
    9680:	08 00       	.word 0x8
    9682:	00 01       	.word 0x100
    9684:	58 10       	.word 0x1058
    9686:	78 20       	.word 0x2078
    9688:	d8 00       	.word 0xd8
    968a:	8e 08       	.word 0x88e
    968c:	58 08       	.word 0x858
    968e:	71 00       	.word 0x71
    9690:	8e 04       	.word 0x48e
    9692:	70 10       	.word 0x1070
    9694:	00 10       	.word 0x1000
    9696:	0e 00       	.word 0xe
    9698:	00 36       	.word 0x3600
    969a:	30 00       	.word 0x30
    969c:	d4 10       	.word 0x10d4
    969e:	50 10       	.word 0x1050
    96a0:	dc 00       	.word 0xdc
    96a2:	70 01       	.word 0x170
    96a4:	86 04       	.word 0x486
    96a6:	50 00       	.word 0x50
    96a8:	88 20       	.word 0x2088
    96aa:	78 00       	.word 0x78
    96ac:	1c 00       	.word 0x1c
    96ae:	04 20       	.word 0x2004
    96b0:	14 28       	.word 0x2814
    96b2:	c0 28       	.word 0x28c0
    96b4:	0c 20       	.word 0x200c
    96b6:	48 08       	.word 0x848
    96b8:	49 09       	.word 0x949
    96ba:	00 12       	.word 0x1200
    96bc:	89 24       	.word 0x2489
    96be:	20 05       	.word 0x520
    96c0:	ff 3f       	.word 0x3fff

000096c2 <_adafruit_display_addr>:
    96c2:	e0 00       	.word 0xe0
Disassembly of section .text:

000016c4 <_led_begin>:

};


void led_begin(_ADAFRUIT_LED* ptr, uint8_t addr){
    16c4:	04 00 fa    	lnk       #0x4
    16c6:	00 0f 78    	mov.w     w0, [w14]
    16c8:	21 47 98    	mov.b     w1, [w14+2]
  ptr->i2c_addr = addr;
    16ca:	1e 00 78    	mov.w     [w14], w0
    16cc:	ae 40 90    	mov.b     [w14+2], w1
    16ce:	01 50 98    	mov.b     w1, [w0+16]
	LED1 = 1;
    16d0:	dc e2 a8    	bset.b    0x2dc, #0x7
  i2c_start();
    16d2:	cb 02 07    	rcall     0x1c6a <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    16d4:	1e 00 78    	mov.w     [w14], w0
    16d6:	00 50 90    	mov.b     [w0+16], w0
    16d8:	00 80 fb    	ze        w0, w0
    16da:	16 03 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(0x21); // turn on oscillator
    16dc:	10 02 20    	mov.w     #0x21, w0
    16de:	14 03 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    16e0:	f8 02 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
  led_blinkRate((_ADAFRUIT_LED *)ptr, HT16K33_BLINK_OFF);
    16e2:	80 40 eb    	clr.b     w1
    16e4:	1e 00 78    	mov.w     [w14], w0
    16e6:	1a 00 07    	rcall     0x171c <_led_blinkRate> <.LFB2> <.LFE1>
  led_setBrightness((_ADAFRUIT_LED *)ptr,15); // set max brightness
    16e8:	f1 c0 b3    	mov.b     #0xf, w1
    16ea:	1e 00 78    	mov.w     [w14], w0
    16ec:	02 00 07    	rcall     0x16f2 <_led_setBrightness> <.LFB1> <.LFE0>
}
    16ee:	00 80 fa    	ulnk      
    16f0:	00 00 06    	return    

000016f2 <_led_setBrightness>:

void led_setBrightness(_ADAFRUIT_LED* ptr, uint8_t b){
    16f2:	04 00 fa    	lnk       #0x4
    16f4:	00 0f 78    	mov.w     w0, [w14]
    16f6:	21 47 98    	mov.b     w1, [w14+2]
  if (b > 15) b = 15;
    16f8:	2e 40 90    	mov.b     [w14+2], w0
    16fa:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    16fc:	02 00 36    	bra       LEU, 0x1702 <.L3>
    16fe:	f0 c0 b3    	mov.b     #0xf, w0
    1700:	20 47 98    	mov.b     w0, [w14+2]

00001702 <.L3>:
  i2c_start();
    1702:	b3 02 07    	rcall     0x1c6a <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1704:	1e 00 78    	mov.w     [w14], w0
    1706:	00 50 90    	mov.b     [w0+16], w0
    1708:	00 80 fb    	ze        w0, w0
    170a:	fe 02 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(HT16K33_CMD_BRIGHTNESS | b);
    170c:	ae 40 90    	mov.b     [w14+2], w1
    170e:	00 ce b3    	mov.b     #0xe0, w0
    1710:	00 c0 70    	ior.b     w1, w0, w0
    1712:	00 80 fb    	ze        w0, w0
    1714:	f9 02 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1716:	dd 02 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1718:	00 80 fa    	ulnk      
    171a:	00 00 06    	return    

0000171c <_led_blinkRate>:

void led_blinkRate(_ADAFRUIT_LED* ptr, uint8_t b){
    171c:	04 00 fa    	lnk       #0x4
    171e:	00 0f 78    	mov.w     w0, [w14]
    1720:	21 47 98    	mov.b     w1, [w14+2]
  i2c_start();
    1722:	a3 02 07    	rcall     0x1c6a <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1724:	1e 00 78    	mov.w     [w14], w0
    1726:	00 50 90    	mov.b     [w0+16], w0
    1728:	00 80 fb    	ze        w0, w0
    172a:	ee 02 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
  if (b > 3) b = 0; // turn off if not sure
    172c:	2e 40 90    	mov.b     [w14+2], w0
    172e:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    1730:	02 00 36    	bra       LEU, 0x1736 <.L5>
    1732:	00 40 eb    	clr.b     w0
    1734:	20 47 98    	mov.b     w0, [w14+2]

00001736 <.L5>:
  send_i2c_byte(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1));
    1736:	2e 40 90    	mov.b     [w14+2], w0
    1738:	00 80 fb    	ze        w0, w0
    173a:	00 00 40    	add.w     w0, w0, w0
    173c:	80 00 78    	mov.w     w0, w1
    173e:	10 08 20    	mov.w     #0x81, w0
    1740:	01 00 70    	ior.w     w0, w1, w0
    1742:	e2 02 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1744:	c6 02 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1746:	00 80 fa    	ulnk      
    1748:	00 00 06    	return    

0000174a <_led_writeDisplay>:

void led_writeDisplay(_ADAFRUIT_LED* ptr){
    174a:	04 00 fa    	lnk       #0x4
    174c:	10 07 98    	mov.w     w0, [w14+2]
  i2c_start();
    174e:	8d 02 07    	rcall     0x1c6a <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->i2c_addr);
    1750:	1e 00 90    	mov.w     [w14+2], w0
    1752:	00 50 90    	mov.b     [w0+16], w0
    1754:	00 80 fb    	ze        w0, w0
    1756:	d8 02 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
	send_i2c_byte(0x00); // Start at address 0
    1758:	00 00 eb    	clr.w     w0
    175a:	d6 02 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
	uint8_t i;
  for (i=0; i<8; i++) {
    175c:	00 40 eb    	clr.b     w0
    175e:	00 4f 78    	mov.b     w0, [w14]
    1760:	0f 00 37    	bra       0x1780 <.L7>

00001762 <.L8>:
    send_i2c_byte(ptr->displaybuffer[i] & 0xFF);
    1762:	1e 80 fb    	ze        [w14], w0
    1764:	9e 00 90    	mov.w     [w14+2], w1
    1766:	00 00 40    	add.w     w0, w0, w0
    1768:	61 00 78    	mov.w     [w1+w0], w0
    176a:	80 00 78    	mov.w     w0, w1
    176c:	f0 0f 20    	mov.w     #0xff, w0
    176e:	00 80 60    	and.w     w1, w0, w0
    1770:	cb 02 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
    send_i2c_byte(ptr->displaybuffer[i] >> 8);
    1772:	1e 80 fb    	ze        [w14], w0
    1774:	9e 00 90    	mov.w     [w14+2], w1
    1776:	00 00 40    	add.w     w0, w0, w0
    1778:	61 00 78    	mov.w     [w1+w0], w0
    177a:	48 00 de    	lsr.w     w0, #0x8, w0
    177c:	c5 02 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
    177e:	1e 4f e8    	inc.b     [w14], [w14]

00001780 <.L7>:
    1780:	1e 40 78    	mov.b     [w14], w0
    1782:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    1784:	ee ff 36    	bra       LEU, 0x1762 <.L8>
  }
  reset_i2c_bus();
    1786:	a5 02 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1788:	00 80 fa    	ulnk      
    178a:	00 00 06    	return    

0000178c <_led_clear>:

void led_clear(_ADAFRUIT_LED* ptr){
    178c:	04 00 fa    	lnk       #0x4
    178e:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
	for (i=0; i<8; i++) {
    1790:	00 40 eb    	clr.b     w0
    1792:	00 4f 78    	mov.b     w0, [w14]
    1794:	07 00 37    	bra       0x17a4 <.L10>

00001796 <.L11>:
    ptr->displaybuffer[i] = 0;
    1796:	1e 80 fb    	ze        [w14], w0
    1798:	9e 00 90    	mov.w     [w14+2], w1
    179a:	00 00 40    	add.w     w0, w0, w0
    179c:	00 80 40    	add.w     w1, w0, w0
    179e:	80 00 eb    	clr.w     w1
    17a0:	01 08 78    	mov.w     w1, [w0]
    17a2:	1e 4f e8    	inc.b     [w14], [w14]

000017a4 <.L10>:
    17a4:	1e 40 78    	mov.b     [w14], w0
    17a6:	e7 4f 50    	sub.b     w0, #0x7, [w15]
    17a8:	f6 ff 36    	bra       LEU, 0x1796 <.L11>
  }
}
    17aa:	00 80 fa    	ulnk      
    17ac:	00 00 06    	return    

000017ae <_alphanum_begin>:

// ALPHANUM ********************************************************************

void alphanum_begin(_ALPHANUM* ptr, uint8_t addr){
    17ae:	04 00 fa    	lnk       #0x4
    17b0:	00 0f 78    	mov.w     w0, [w14]
    17b2:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr); // Call super constructor
    17b4:	1e 00 78    	mov.w     [w14], w0
    17b6:	ae 40 90    	mov.b     [w14+2], w1
    17b8:	85 ff 07    	rcall     0x16c4 <_led_begin> <.L0> <.LFB0> <.Ltext0>
}
    17ba:	00 80 fa    	ulnk      
    17bc:	00 00 06    	return    

000017be <_alphanum_writeDigitRaw>:

void alphanum_writeDigitRaw(_ALPHANUM* ptr, uint8_t n, uint16_t bitmask){
    17be:	06 00 fa    	lnk       #0x6
    17c0:	00 0f 78    	mov.w     w0, [w14]
    17c2:	21 47 98    	mov.b     w1, [w14+2]
    17c4:	22 07 98    	mov.w     w2, [w14+4]
  ptr->super.displaybuffer[n] = bitmask;
    17c6:	2e 40 90    	mov.b     [w14+2], w0
    17c8:	00 80 fb    	ze        w0, w0
    17ca:	9e 00 78    	mov.w     [w14], w1
    17cc:	00 00 40    	add.w     w0, w0, w0
    17ce:	00 80 40    	add.w     w1, w0, w0
    17d0:	ae 00 90    	mov.w     [w14+4], w1
    17d2:	01 08 78    	mov.w     w1, [w0]
}
    17d4:	00 80 fa    	ulnk      
    17d6:	00 00 06    	return    

000017d8 <_alphanum_writeDigitAscii>:

void alphanum_writeDigitAscii(_ALPHANUM* ptr, uint8_t n, uint8_t ascii, uint8_t dot){
    17d8:	08 00 fa    	lnk       #0x8
    17da:	10 07 98    	mov.w     w0, [w14+2]
    17dc:	41 47 98    	mov.b     w1, [w14+4]
    17de:	52 47 98    	mov.b     w2, [w14+5]
    17e0:	63 47 98    	mov.b     w3, [w14+6]
  uint16_t font = alphafonttable[ascii];
    17e2:	5e 40 90    	mov.b     [w14+5], w0
    17e4:	00 80 fb    	ze        w0, w0
    17e6:	80 00 40    	add.w     w0, w0, w1
    17e8:	20 5c 29    	mov.w     #0x95c2, w0
    17ea:	00 80 40    	add.w     w1, w0, w0
    17ec:	10 0f 78    	mov.w     [w0], [w14]
  ptr->super.displaybuffer[n] = font;
    17ee:	4e 40 90    	mov.b     [w14+4], w0
    17f0:	00 80 fb    	ze        w0, w0
    17f2:	9e 00 90    	mov.w     [w14+2], w1
    17f4:	00 00 40    	add.w     w0, w0, w0
    17f6:	00 80 40    	add.w     w1, w0, w0
    17f8:	1e 08 78    	mov.w     [w14], [w0]
  if (dot) ptr->super.displaybuffer[n] |= (1<<14);
    17fa:	6e 40 90    	mov.b     [w14+6], w0
    17fc:	00 04 e0    	cp0.b     w0
    17fe:	0c 00 32    	bra       Z, 0x1818 <.L14>
    1800:	4e 40 90    	mov.b     [w14+4], w0
    1802:	00 80 fb    	ze        w0, w0
    1804:	ce 40 90    	mov.b     [w14+4], w1
    1806:	81 80 fb    	ze        w1, w1
    1808:	1e 01 90    	mov.w     [w14+2], w2
    180a:	81 80 40    	add.w     w1, w1, w1
    180c:	e2 80 78    	mov.w     [w2+w1], w1
    180e:	01 e0 a0    	bset.w    w1, #0xe
    1810:	1e 01 90    	mov.w     [w14+2], w2
    1812:	00 00 40    	add.w     w0, w0, w0
    1814:	00 00 41    	add.w     w2, w0, w0
    1816:	01 08 78    	mov.w     w1, [w0]

00001818 <.L14>:
}
    1818:	00 80 fa    	ulnk      
    181a:	00 00 06    	return    

0000181c <_bargraph_begin>:

// 24 BARGRAPH *****************************************************************

void bargraph_begin(_BARGRAPH* ptr, uint8_t addr){
    181c:	04 00 fa    	lnk       #0x4
    181e:	00 0f 78    	mov.w     w0, [w14]
    1820:	21 47 98    	mov.b     w1, [w14+2]
  led_begin((_ADAFRUIT_LED *)ptr, addr);
    1822:	1e 00 78    	mov.w     [w14], w0
    1824:	ae 40 90    	mov.b     [w14+2], w1
    1826:	4e ff 07    	rcall     0x16c4 <_led_begin> <.L0> <.LFB0> <.Ltext0>
}
    1828:	00 80 fa    	ulnk      
    182a:	00 00 06    	return    

0000182c <_bargraph_setBar>:

void bargraph_setBar(_BARGRAPH* ptr, uint8_t bar, uint8_t color){
    182c:	08 00 fa    	lnk       #0x8
    182e:	20 07 98    	mov.w     w0, [w14+4]
    1830:	61 47 98    	mov.b     w1, [w14+6]
    1832:	72 47 98    	mov.b     w2, [w14+7]
  uint16_t a, c;

  if (bar < 12)
    1834:	6e 40 90    	mov.b     [w14+6], w0
    1836:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1838:	07 00 3e    	bra       GTU, 0x1848 <.L18>
    c = bar / 4;
    183a:	6e 40 90    	mov.b     [w14+6], w0
    183c:	00 80 fb    	ze        w0, w0
    183e:	42 00 de    	lsr.w     w0, #0x2, w0
    1840:	00 40 78    	mov.b     w0, w0
    1842:	00 80 fb    	ze        w0, w0
    1844:	10 07 98    	mov.w     w0, [w14+2]
    1846:	08 00 37    	bra       0x1858 <.L19>

00001848 <.L18>:
  else
    c = (bar - 12) / 4;
    1848:	6e 40 90    	mov.b     [w14+6], w0
    184a:	00 80 fb    	ze        w0, w0
    184c:	6c 00 50    	sub.w     w0, #0xc, w0
    184e:	00 00 e0    	cp0.w     w0
    1850:	01 00 3d    	bra       GE, 0x1854 <.L20>
    1852:	63 00 40    	add.w     w0, #0x3, w0

00001854 <.L20>:
    1854:	42 80 de    	asr.w     w0, #0x2, w0
    1856:	10 07 98    	mov.w     w0, [w14+2]

00001858 <.L19>:

  a = bar % 4;
    1858:	6e 40 90    	mov.b     [w14+6], w0
    185a:	00 80 fb    	ze        w0, w0
    185c:	63 0f 60    	and.w     w0, #0x3, [w14]
  if (bar >= 12)
    185e:	6e 40 90    	mov.b     [w14+6], w0
    1860:	eb 4f 50    	sub.b     w0, #0xb, [w15]
    1862:	02 00 36    	bra       LEU, 0x1868 <.L21>
    a += 4;
    1864:	9e 00 78    	mov.w     [w14], w1
    1866:	64 8f 40    	add.w     w1, #0x4, [w14]

00001868 <.L21>:

  //Serial.print("Ano = "); Serial.print(a); Serial.print(" Cath = "); Serial.println(c);
  if (color == LED_RED) {
    1868:	7e 40 90    	mov.b     [w14+7], w0
    186a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    186c:	1d 00 3a    	bra       NZ, 0x18a8 <.L22>
    // Turn on red LED.
    ptr->super.displaybuffer[c] |= _BV(a);
    186e:	ae 00 90    	mov.w     [w14+4], w1
    1870:	1e 00 90    	mov.w     [w14+2], w0
    1872:	00 00 40    	add.w     w0, w0, w0
    1874:	e1 00 78    	mov.w     [w1+w0], w1
    1876:	1e 00 78    	mov.w     [w14], w0
    1878:	12 00 20    	mov.w     #0x1, w2
    187a:	00 10 dd    	sl.w      w2, w0, w0
    187c:	81 00 70    	ior.w     w0, w1, w1
    187e:	2e 01 90    	mov.w     [w14+4], w2
    1880:	1e 00 90    	mov.w     [w14+2], w0
    1882:	00 00 40    	add.w     w0, w0, w0
    1884:	00 00 41    	add.w     w2, w0, w0
    1886:	01 08 78    	mov.w     w1, [w0]
    // Turn off green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a+8);
    1888:	ae 00 90    	mov.w     [w14+4], w1
    188a:	1e 00 90    	mov.w     [w14+2], w0
    188c:	00 00 40    	add.w     w0, w0, w0
    188e:	e1 00 78    	mov.w     [w1+w0], w1
    1890:	1e 01 78    	mov.w     [w14], w2
    1892:	68 00 41    	add.w     w2, #0x8, w0
    1894:	12 00 20    	mov.w     #0x1, w2
    1896:	00 10 dd    	sl.w      w2, w0, w0
    1898:	00 80 ea    	com.w     w0, w0
    189a:	80 80 60    	and.w     w1, w0, w1
    189c:	2e 01 90    	mov.w     [w14+4], w2
    189e:	1e 00 90    	mov.w     [w14+2], w0
    18a0:	00 00 40    	add.w     w0, w0, w0
    18a2:	00 00 41    	add.w     w2, w0, w0
    18a4:	01 08 78    	mov.w     w1, [w0]
    18a6:	4c 00 37    	bra       0x1940 <.L17>

000018a8 <.L22>:
  } else if (color == LED_YELLOW) {
    18a8:	7e 40 90    	mov.b     [w14+7], w0
    18aa:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    18ac:	13 00 3a    	bra       NZ, 0x18d4 <.L24>
    // Turn on red and green LED.
    ptr->super.displaybuffer[c] |= _BV(a) | _BV(a+8);
    18ae:	ae 00 90    	mov.w     [w14+4], w1
    18b0:	1e 00 90    	mov.w     [w14+2], w0
    18b2:	00 00 40    	add.w     w0, w0, w0
    18b4:	e1 00 78    	mov.w     [w1+w0], w1
    18b6:	1e 00 78    	mov.w     [w14], w0
    18b8:	12 00 20    	mov.w     #0x1, w2
    18ba:	00 11 dd    	sl.w      w2, w0, w2
    18bc:	9e 01 78    	mov.w     [w14], w3
    18be:	68 80 41    	add.w     w3, #0x8, w0
    18c0:	13 00 20    	mov.w     #0x1, w3
    18c2:	00 18 dd    	sl.w      w3, w0, w0
    18c4:	02 00 70    	ior.w     w0, w2, w0
    18c6:	81 00 70    	ior.w     w0, w1, w1
    18c8:	2e 01 90    	mov.w     [w14+4], w2
    18ca:	1e 00 90    	mov.w     [w14+2], w0
    18cc:	00 00 40    	add.w     w0, w0, w0
    18ce:	00 00 41    	add.w     w2, w0, w0
    18d0:	01 08 78    	mov.w     w1, [w0]
    18d2:	36 00 37    	bra       0x1940 <.L17>

000018d4 <.L24>:
  } else if (color == LED_OFF) {
    18d4:	7e 40 90    	mov.b     [w14+7], w0
    18d6:	00 04 e0    	cp0.b     w0
    18d8:	14 00 3a    	bra       NZ, 0x1902 <.L25>
    // Turn off red and green LED.
    ptr->super.displaybuffer[c] &= ~_BV(a) & ~_BV(a+8);
    18da:	ae 00 90    	mov.w     [w14+4], w1
    18dc:	1e 00 90    	mov.w     [w14+2], w0
    18de:	00 00 40    	add.w     w0, w0, w0
    18e0:	e1 00 78    	mov.w     [w1+w0], w1
    18e2:	1e 00 78    	mov.w     [w14], w0
    18e4:	12 00 20    	mov.w     #0x1, w2
    18e6:	00 11 dd    	sl.w      w2, w0, w2
    18e8:	9e 01 78    	mov.w     [w14], w3
    18ea:	68 80 41    	add.w     w3, #0x8, w0
    18ec:	13 00 20    	mov.w     #0x1, w3
    18ee:	00 18 dd    	sl.w      w3, w0, w0
    18f0:	02 00 70    	ior.w     w0, w2, w0
    18f2:	00 80 ea    	com.w     w0, w0
    18f4:	80 80 60    	and.w     w1, w0, w1
    18f6:	2e 01 90    	mov.w     [w14+4], w2
    18f8:	1e 00 90    	mov.w     [w14+2], w0
    18fa:	00 00 40    	add.w     w0, w0, w0
    18fc:	00 00 41    	add.w     w2, w0, w0
    18fe:	01 08 78    	mov.w     w1, [w0]
    1900:	1f 00 37    	bra       0x1940 <.L17>

00001902 <.L25>:
  } else if (color == LED_GREEN) {
    1902:	7e 40 90    	mov.b     [w14+7], w0
    1904:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    1906:	1c 00 3a    	bra       NZ, 0x1940 <.L17>
    // Turn on green LED.
    ptr->super.displaybuffer[c] |= _BV(a+8);
    1908:	ae 00 90    	mov.w     [w14+4], w1
    190a:	1e 00 90    	mov.w     [w14+2], w0
    190c:	00 00 40    	add.w     w0, w0, w0
    190e:	e1 00 78    	mov.w     [w1+w0], w1
    1910:	1e 01 78    	mov.w     [w14], w2
    1912:	68 00 41    	add.w     w2, #0x8, w0
    1914:	12 00 20    	mov.w     #0x1, w2
    1916:	00 10 dd    	sl.w      w2, w0, w0
    1918:	81 00 70    	ior.w     w0, w1, w1
    191a:	2e 01 90    	mov.w     [w14+4], w2
    191c:	1e 00 90    	mov.w     [w14+2], w0
    191e:	00 00 40    	add.w     w0, w0, w0
    1920:	00 00 41    	add.w     w2, w0, w0
    1922:	01 08 78    	mov.w     w1, [w0]
    // Turn off red LED.
    ptr->super.displaybuffer[c] &= ~_BV(a);
    1924:	ae 00 90    	mov.w     [w14+4], w1
    1926:	1e 00 90    	mov.w     [w14+2], w0
    1928:	00 00 40    	add.w     w0, w0, w0
    192a:	e1 00 78    	mov.w     [w1+w0], w1
    192c:	1e 00 78    	mov.w     [w14], w0
    192e:	12 00 20    	mov.w     #0x1, w2
    1930:	00 10 dd    	sl.w      w2, w0, w0
    1932:	00 80 ea    	com.w     w0, w0
    1934:	80 80 60    	and.w     w1, w0, w1
    1936:	2e 01 90    	mov.w     [w14+4], w2
    1938:	1e 00 90    	mov.w     [w14+2], w0
    193a:	00 00 40    	add.w     w0, w0, w0
    193c:	00 00 41    	add.w     w2, w0, w0
    193e:	01 08 78    	mov.w     w1, [w0]

00001940 <.L17>:
  }
}
    1940:	00 80 fa    	ulnk      
    1942:	00 00 06    	return    

00001944 <_sevseg_writeDigitRaw>:

// 7SEGMENT ********************************************************************

// uint8_t write(_7SEGMENT* ptr, uint8_t c){
//
//   uint8_t r = 0;
//
//   if (c == '\n') ptr->position = 0;
//   if (c == '\r') ptr->position = 0;
//
//   if ((c >= '0') && (c <= '9')) {
//     sevseg_writeDigitNum(ptr, ptr->position, c-'0', 0);
//     r = 1;
//   }
//
//   ptr->position++;
//   if (ptr->position == 2) ptr->position++;
//
//   return r;
// }

void sevseg_writeDigitRaw(_7SEGMENT* ptr, uint8_t x, uint16_t bitmask){
    1944:	06 00 fa    	lnk       #0x6
    1946:	00 0f 78    	mov.w     w0, [w14]
    1948:	21 47 98    	mov.b     w1, [w14+2]
    194a:	22 07 98    	mov.w     w2, [w14+4]
  if (x > 4) return;
    194c:	2e 40 90    	mov.b     [w14+2], w0
    194e:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1950:	08 00 3e    	bra       GTU, 0x1962 <.L29>
  ptr->super.displaybuffer[x] = bitmask;
    1952:	2e 40 90    	mov.b     [w14+2], w0
    1954:	00 80 fb    	ze        w0, w0
    1956:	9e 00 78    	mov.w     [w14], w1
    1958:	00 00 40    	add.w     w0, w0, w0
    195a:	00 80 40    	add.w     w1, w0, w0
    195c:	ae 00 90    	mov.w     [w14+4], w1
    195e:	01 08 78    	mov.w     w1, [w0]
    1960:	01 00 37    	bra       0x1964 <.L26>

00001962 <.L29>:
    1962:	00 00 00    	nop       

00001964 <.L26>:
}
    1964:	00 80 fa    	ulnk      
    1966:	00 00 06    	return    

00001968 <_sevseg_writeDigitNum>:

void sevseg_writeDigitNum(_7SEGMENT* ptr, uint8_t x, uint8_t num, uint8_t dot){
    1968:	08 00 fa    	lnk       #0x8
    196a:	10 07 98    	mov.w     w0, [w14+2]
    196c:	41 47 98    	mov.b     w1, [w14+4]
    196e:	52 47 98    	mov.b     w2, [w14+5]
    1970:	63 47 98    	mov.b     w3, [w14+6]
  if (x > 4) return;
    1972:	4e 40 90    	mov.b     [w14+4], w0
    1974:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1976:	11 00 3e    	bra       GTU, 0x199a <.L33>
	uint16_t zero = 0x0000;
    1978:	00 00 eb    	clr.w     w0
    197a:	00 0f 78    	mov.w     w0, [w14]
  sevseg_writeDigitRaw(ptr, x, (numbertable[num] | (dot << 7)));
    197c:	5e 40 90    	mov.b     [w14+5], w0
    197e:	00 80 fb    	ze        w0, w0
    1980:	80 00 40    	add.w     w0, w0, w1
    1982:	e0 59 29    	mov.w     #0x959e, w0
    1984:	00 80 40    	add.w     w1, w0, w0
    1986:	90 00 78    	mov.w     [w0], w1
    1988:	6e 40 90    	mov.b     [w14+6], w0
    198a:	00 80 fb    	ze        w0, w0
    198c:	47 00 dd    	sl.w      w0, #0x7, w0
    198e:	01 00 70    	ior.w     w0, w1, w0
    1990:	00 01 78    	mov.w     w0, w2
    1992:	ce 40 90    	mov.b     [w14+4], w1
    1994:	1e 00 90    	mov.w     [w14+2], w0
    1996:	d6 ff 07    	rcall     0x1944 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    1998:	01 00 37    	bra       0x199c <.L30>

0000199a <.L33>:
    199a:	00 00 00    	nop       

0000199c <.L30>:
}
    199c:	00 80 fa    	ulnk      
    199e:	00 00 06    	return    

000019a0 <_sevseg_drawColon>:

void sevseg_drawColon(_7SEGMENT* ptr, uint8_t state){
    19a0:	04 00 fa    	lnk       #0x4
    19a2:	00 0f 78    	mov.w     w0, [w14]
    19a4:	21 47 98    	mov.b     w1, [w14+2]
  if (state)
    19a6:	2e 40 90    	mov.b     [w14+2], w0
    19a8:	00 04 e0    	cp0.b     w0
    19aa:	04 00 32    	bra       Z, 0x19b4 <.L35>
    ptr->super.displaybuffer[2] = 0x2;
    19ac:	1e 00 78    	mov.w     [w14], w0
    19ae:	21 00 20    	mov.w     #0x2, w1
    19b0:	21 00 98    	mov.w     w1, [w0+4]
    19b2:	03 00 37    	bra       0x19ba <.L34>

000019b4 <.L35>:
  else
    ptr->super.displaybuffer[2] = 0;
    19b4:	1e 00 78    	mov.w     [w14], w0
    19b6:	80 00 eb    	clr.w     w1
    19b8:	21 00 98    	mov.w     w1, [w0+4]

000019ba <.L34>:
}
    19ba:	00 80 fa    	ulnk      
    19bc:	00 00 06    	return    

000019be <_sevseg_printNumber>:

void sevseg_printNumber(_7SEGMENT* ptr, long n, uint8_t base){
    19be:	08 00 fa    	lnk       #0x8
    19c0:	00 0f 78    	mov.w     w0, [w14]
    19c2:	12 07 98    	mov.w     w2, [w14+2]
    19c4:	23 07 98    	mov.w     w3, [w14+4]
    19c6:	61 47 98    	mov.b     w1, [w14+6]
  sevseg_printFloat(ptr, n, 0, base);
    19c8:	1e 00 90    	mov.w     [w14+2], w0
    19ca:	ae 00 90    	mov.w     [w14+4], w1
    19cc:	f1 fc 07    	rcall     0x13b0 <___floatsisf>
    19ce:	00 01 be    	mov.d     w0, w2
    19d0:	6e 42 90    	mov.b     [w14+6], w4
    19d2:	80 40 eb    	clr.b     w1
    19d4:	1e 00 78    	mov.w     [w14], w0
    19d6:	02 00 07    	rcall     0x19dc <_sevseg_printFloat> <.LFB14> <.LFE13>
}
    19d8:	00 80 fa    	ulnk      
    19da:	00 00 06    	return    

000019dc <_sevseg_printFloat>:

void sevseg_printFloat(_7SEGMENT* ptr, double n, uint8_t fracDigits, uint8_t base){
    19dc:	1c 00 fa    	lnk       #0x1c
    19de:	88 1f 78    	mov.w     w8, [w15++]
    19e0:	20 0f 98    	mov.w     w0, [w14+20]
    19e2:	32 0f 98    	mov.w     w2, [w14+22]
    19e4:	43 0f 98    	mov.w     w3, [w14+24]
    19e6:	21 5f 98    	mov.b     w1, [w14+26]
    19e8:	34 5f 98    	mov.b     w4, [w14+27]
  uint8_t numericDigits = 4;   // available digits on display
    19ea:	40 c0 b3    	mov.b     #0x4, w0
    19ec:	00 4f 78    	mov.b     w0, [w14]
  uint8_t isNegative = 0;  // true if the number is negative
    19ee:	00 40 eb    	clr.b     w0
    19f0:	10 47 98    	mov.b     w0, [w14+1]

  // is the number negative?
  if(n < 0) {
    19f2:	18 c0 b3    	mov.b     #0x1, w8
    19f4:	60 11 b8    	mul.uu    w2, #0x0, w2
    19f6:	3e 08 90    	mov.w     [w14+22], w0
    19f8:	ce 08 90    	mov.w     [w14+24], w1
    19fa:	bd fc 07    	rcall     0x1376 <___eqsf2> <___lesf2> <___ltsf2>
    19fc:	00 00 e0    	cp0.w     w0
    19fe:	01 00 35    	bra       LT, 0x1a02 <.L39>
    1a00:	00 44 eb    	clr.b     w8

00001a02 <.L39>:
    1a02:	08 04 e0    	cp0.b     w8
    1a04:	08 00 32    	bra       Z, 0x1a16 <.L40>
    isNegative = 1;  // need to draw sign later
    1a06:	10 c0 b3    	mov.b     #0x1, w0
    1a08:	10 47 98    	mov.b     w0, [w14+1]
    --numericDigits;    // the sign will take up one digit
    1a0a:	1e 4f e9    	dec.b     [w14], [w14]
    n *= -1;            // pretend the number is positive
    1a0c:	3e 08 90    	mov.w     [w14+22], w0
    1a0e:	ce 08 90    	mov.w     [w14+24], w1
    1a10:	01 f0 a2    	btg.w     w1, #0xf
    1a12:	30 0f 98    	mov.w     w0, [w14+22]
    1a14:	41 0f 98    	mov.w     w1, [w14+24]

00001a16 <.L40>:
  }

  // calculate the factor required to shift all fractional digits
  // into the integer part of the number
  double toIntFactor = 1.0;
    1a16:	00 00 20    	mov.w     #0x0, w0
    1a18:	01 f8 23    	mov.w     #0x3f80, w1
    1a1a:	10 07 98    	mov.w     w0, [w14+2]
    1a1c:	21 07 98    	mov.w     w1, [w14+4]
	int i = 0;
    1a1e:	00 00 eb    	clr.w     w0
    1a20:	30 07 98    	mov.w     w0, [w14+6]
  for(i = 0; i < fracDigits; ++i) toIntFactor *= base;
    1a22:	00 00 eb    	clr.w     w0
    1a24:	30 07 98    	mov.w     w0, [w14+6]
    1a26:	0d 00 37    	bra       0x1a42 <.L41>

00001a28 <.L42>:
    1a28:	3e 58 90    	mov.b     [w14+27], w0
    1a2a:	00 80 fb    	ze        w0, w0
    1a2c:	cf 80 de    	asr.w     w0, #0xf, w1
    1a2e:	c0 fc 07    	rcall     0x13b0 <___floatsisf>
    1a30:	00 01 be    	mov.d     w0, w2
    1a32:	1e 00 90    	mov.w     [w14+2], w0
    1a34:	ae 00 90    	mov.w     [w14+4], w1
    1a36:	12 fd 07    	rcall     0x145c <___mulsf3>
    1a38:	10 07 98    	mov.w     w0, [w14+2]
    1a3a:	21 07 98    	mov.w     w1, [w14+4]
    1a3c:	3e 00 90    	mov.w     [w14+6], w0
    1a3e:	00 00 e8    	inc.w     w0, w0
    1a40:	30 07 98    	mov.w     w0, [w14+6]

00001a42 <.L41>:
    1a42:	2e 58 90    	mov.b     [w14+26], w0
    1a44:	80 80 fb    	ze        w0, w1
    1a46:	3e 00 90    	mov.w     [w14+6], w0
    1a48:	80 8f 50    	sub.w     w1, w0, [w15]
    1a4a:	ee ff 3c    	bra       GT, 0x1a28 <.L42>

  // create integer containing digits to display by applying
  // shifting factor and rounding adjustment
  uint32_t displayNumber = n * toIntFactor + 0.5;
    1a4c:	1e 01 90    	mov.w     [w14+2], w2
    1a4e:	ae 01 90    	mov.w     [w14+4], w3
    1a50:	3e 08 90    	mov.w     [w14+22], w0
    1a52:	ce 08 90    	mov.w     [w14+24], w1
    1a54:	03 fd 07    	rcall     0x145c <___mulsf3>
    1a56:	02 00 20    	mov.w     #0x0, w2
    1a58:	03 f0 23    	mov.w     #0x3f00, w3
    1a5a:	ee fb 07    	rcall     0x1238 <___addsf3>
    1a5c:	8e fc 07    	rcall     0x137a <___fixunssfsi>
    1a5e:	40 07 98    	mov.w     w0, [w14+8]
    1a60:	51 07 98    	mov.w     w1, [w14+10]

  // calculate upper bound on displayNumber given
  // available digits on display
  uint32_t tooBig = 1;
    1a62:	10 00 20    	mov.w     #0x1, w0
    1a64:	01 00 20    	mov.w     #0x0, w1
    1a66:	60 07 98    	mov.w     w0, [w14+12]
    1a68:	71 07 98    	mov.w     w1, [w14+14]
  for(i = 0; i < numericDigits; ++i) tooBig *= base;
    1a6a:	00 00 eb    	clr.w     w0
    1a6c:	30 07 98    	mov.w     w0, [w14+6]
    1a6e:	15 00 37    	bra       0x1a9a <.L43>

00001a70 <.L44>:
    1a70:	3e 58 90    	mov.b     [w14+27], w0
    1a72:	00 80 fb    	ze        w0, w0
    1a74:	80 00 eb    	clr.w     w1
    1a76:	7e 01 90    	mov.w     [w14+14], w2
    1a78:	00 91 b9    	mul.ss    w2, w0, w2
    1a7a:	02 01 78    	mov.w     w2, w2
    1a7c:	ee 01 90    	mov.w     [w14+12], w3
    1a7e:	01 9a b9    	mul.ss    w3, w1, w4
    1a80:	84 01 78    	mov.w     w4, w3
    1a82:	03 01 41    	add.w     w2, w3, w2
    1a84:	ee 01 90    	mov.w     [w14+12], w3
    1a86:	00 18 b8    	mul.uu    w3, w0, w0
    1a88:	01 01 41    	add.w     w2, w1, w2
    1a8a:	82 00 78    	mov.w     w2, w1
    1a8c:	60 07 98    	mov.w     w0, [w14+12]
    1a8e:	71 07 98    	mov.w     w1, [w14+14]
    1a90:	60 07 98    	mov.w     w0, [w14+12]
    1a92:	71 07 98    	mov.w     w1, [w14+14]
    1a94:	3e 00 90    	mov.w     [w14+6], w0
    1a96:	00 00 e8    	inc.w     w0, w0
    1a98:	30 07 98    	mov.w     w0, [w14+6]

00001a9a <.L43>:
    1a9a:	9e 80 fb    	ze        [w14], w1
    1a9c:	3e 00 90    	mov.w     [w14+6], w0
    1a9e:	80 8f 50    	sub.w     w1, w0, [w15]
    1aa0:	e7 ff 3c    	bra       GT, 0x1a70 <.L44>

  // if displayNumber is too large, try fewer fractional digits
  while(displayNumber >= tooBig) {
    1aa2:	18 00 37    	bra       0x1ad4 <.L45>

00001aa4 <.L46>:
    --fracDigits;
    1aa4:	2e 58 90    	mov.b     [w14+26], w0
    1aa6:	00 40 e9    	dec.b     w0, w0
    1aa8:	20 5f 98    	mov.b     w0, [w14+26]
    toIntFactor /= base;
    1aaa:	3e 58 90    	mov.b     [w14+27], w0
    1aac:	00 80 fb    	ze        w0, w0
    1aae:	cf 80 de    	asr.w     w0, #0xf, w1
    1ab0:	7f fc 07    	rcall     0x13b0 <___floatsisf>
    1ab2:	00 01 be    	mov.d     w0, w2
    1ab4:	1e 00 90    	mov.w     [w14+2], w0
    1ab6:	ae 00 90    	mov.w     [w14+4], w1
    1ab8:	1c fc 07    	rcall     0x12f2 <___divsf3>
    1aba:	10 07 98    	mov.w     w0, [w14+2]
    1abc:	21 07 98    	mov.w     w1, [w14+4]
    displayNumber = n * toIntFactor + 0.5;
    1abe:	1e 01 90    	mov.w     [w14+2], w2
    1ac0:	ae 01 90    	mov.w     [w14+4], w3
    1ac2:	3e 08 90    	mov.w     [w14+22], w0
    1ac4:	ce 08 90    	mov.w     [w14+24], w1
    1ac6:	ca fc 07    	rcall     0x145c <___mulsf3>
    1ac8:	02 00 20    	mov.w     #0x0, w2
    1aca:	03 f0 23    	mov.w     #0x3f00, w3
    1acc:	b5 fb 07    	rcall     0x1238 <___addsf3>
    1ace:	55 fc 07    	rcall     0x137a <___fixunssfsi>
    1ad0:	40 07 98    	mov.w     w0, [w14+8]
    1ad2:	51 07 98    	mov.w     w1, [w14+10]

00001ad4 <.L45>:
    1ad4:	4e 01 90    	mov.w     [w14+8], w2
    1ad6:	de 01 90    	mov.w     [w14+10], w3
    1ad8:	6e 00 90    	mov.w     [w14+12], w0
    1ada:	fe 00 90    	mov.w     [w14+14], w1
    1adc:	80 0f 51    	sub.w     w2, w0, [w15]
    1ade:	81 8f 59    	subb.w    w3, w1, [w15]
    1ae0:	e1 ff 31    	bra       C, 0x1aa4 <.L46>
  }

  // did toIntFactor shift the decimal off the display?
  if (toIntFactor < 1) {
    1ae2:	18 c0 b3    	mov.b     #0x1, w8
    1ae4:	02 00 20    	mov.w     #0x0, w2
    1ae6:	03 f8 23    	mov.w     #0x3f80, w3
    1ae8:	1e 00 90    	mov.w     [w14+2], w0
    1aea:	ae 00 90    	mov.w     [w14+4], w1
    1aec:	44 fc 07    	rcall     0x1376 <___eqsf2> <___lesf2> <___ltsf2>
    1aee:	00 00 e0    	cp0.w     w0
    1af0:	01 00 35    	bra       LT, 0x1af4 <.L47>
    1af2:	00 44 eb    	clr.b     w8

00001af4 <.L47>:
    1af4:	08 04 e0    	cp0.b     w8
    1af6:	03 00 32    	bra       Z, 0x1afe <.L48> <.LBB2>
    sevseg_printError(ptr);
    1af8:	2e 08 90    	mov.w     [w14+20], w0
    1afa:	6c 00 07    	rcall     0x1bd4 <_sevseg_printError> <.LFB15> <.LFE14>
    1afc:	68 00 37    	bra       0x1bce <.L38> <.LBE2>

00001afe <.L48>:
  } else {
    // otherwise, display the number
    int8_t displayPos = 4;
    1afe:	40 c0 b3    	mov.b     #0x4, w0
    1b00:	00 57 98    	mov.b     w0, [w14+16]

    if (displayNumber)  //if displayNumber is not 0
    1b02:	4e 00 90    	mov.w     [w14+8], w0
    1b04:	de 00 90    	mov.w     [w14+10], w1
    1b06:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1b08:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1b0a:	41 00 32    	bra       Z, 0x1b8e <.L50> <.LBE3>

00001b0c <.LBB3>:
    {
			uint8_t i;
      for(i = 0; displayNumber || i <= fracDigits; ++i) {
    1b0c:	00 40 eb    	clr.b     w0
    1b0e:	10 57 98    	mov.b     w0, [w14+17]
    1b10:	34 00 37    	bra       0x1b7a <.L51>

00001b12 <.L55>:
        uint8_t displayDecimal = (fracDigits != 0 && i == fracDigits);
    1b12:	2e 58 90    	mov.b     [w14+26], w0
    1b14:	00 04 e0    	cp0.b     w0
    1b16:	06 00 32    	bra       Z, 0x1b24 <.L52>
    1b18:	9e 50 90    	mov.b     [w14+17], w1
    1b1a:	2e 58 90    	mov.b     [w14+26], w0
    1b1c:	80 cf 50    	sub.b     w1, w0, [w15]
    1b1e:	02 00 3a    	bra       NZ, 0x1b24 <.L52>
    1b20:	10 00 20    	mov.w     #0x1, w0
    1b22:	01 00 37    	bra       0x1b26 <.L53>

00001b24 <.L52>:
    1b24:	00 00 eb    	clr.w     w0

00001b26 <.L53>:
    1b26:	20 57 98    	mov.b     w0, [w14+18]
        sevseg_writeDigitNum(ptr, displayPos--, displayNumber % base, displayDecimal);
    1b28:	3e 58 90    	mov.b     [w14+27], w0
    1b2a:	00 80 fb    	ze        w0, w0
    1b2c:	80 00 eb    	clr.w     w1
    1b2e:	4e 02 90    	mov.w     [w14+8], w4
    1b30:	de 02 90    	mov.w     [w14+10], w5
    1b32:	00 01 be    	mov.d     w0, w2
    1b34:	04 00 be    	mov.d     w4, w0
    1b36:	d6 fc 07    	rcall     0x14e4 <___umodsi3>
    1b38:	80 40 78    	mov.b     w0, w1
    1b3a:	0e 50 90    	mov.b     [w14+16], w0
    1b3c:	0e 51 90    	mov.b     [w14+16], w2
    1b3e:	02 41 e9    	dec.b     w2, w2
    1b40:	02 57 98    	mov.b     w2, [w14+16]
    1b42:	ae 51 90    	mov.b     [w14+18], w3
    1b44:	01 41 78    	mov.b     w1, w2
    1b46:	80 40 78    	mov.b     w0, w1
    1b48:	2e 08 90    	mov.w     [w14+20], w0
    1b4a:	0e ff 07    	rcall     0x1968 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
        if(displayPos == 2) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    1b4c:	0e 50 90    	mov.b     [w14+16], w0
    1b4e:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1b50:	08 00 3a    	bra       NZ, 0x1b62 <.L54>
    1b52:	0e 50 90    	mov.b     [w14+16], w0
    1b54:	8e 50 90    	mov.b     [w14+16], w1
    1b56:	81 40 e9    	dec.b     w1, w1
    1b58:	01 57 98    	mov.b     w1, [w14+16]
    1b5a:	00 01 eb    	clr.w     w2
    1b5c:	80 40 78    	mov.b     w0, w1
    1b5e:	2e 08 90    	mov.w     [w14+20], w0
    1b60:	f1 fe 07    	rcall     0x1944 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00001b62 <.L54>:
        displayNumber /= base;
    1b62:	3e 58 90    	mov.b     [w14+27], w0
    1b64:	00 80 fb    	ze        w0, w0
    1b66:	80 00 eb    	clr.w     w1
    1b68:	00 01 be    	mov.d     w0, w2
    1b6a:	4e 00 90    	mov.w     [w14+8], w0
    1b6c:	de 00 90    	mov.w     [w14+10], w1
    1b6e:	aa fc 07    	rcall     0x14c4 <___udivsi3>
    1b70:	40 07 98    	mov.w     w0, [w14+8]
    1b72:	51 07 98    	mov.w     w1, [w14+10]

00001b74 <.LBE4>:
    1b74:	1e 50 90    	mov.b     [w14+17], w0
    1b76:	00 40 e8    	inc.b     w0, w0
    1b78:	10 57 98    	mov.b     w0, [w14+17]

00001b7a <.L51>:
    1b7a:	4e 00 90    	mov.w     [w14+8], w0
    1b7c:	de 00 90    	mov.w     [w14+10], w1
    1b7e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1b80:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1b82:	c7 ff 3a    	bra       NZ, 0x1b12 <.L55> <.LBB4>
    1b84:	9e 50 90    	mov.b     [w14+17], w1
    1b86:	2e 58 90    	mov.b     [w14+26], w0
    1b88:	80 cf 50    	sub.b     w1, w0, [w15]
    1b8a:	c3 ff 36    	bra       LEU, 0x1b12 <.L55> <.LBB4>
    1b8c:	09 00 37    	bra       0x1ba0 <.L56>

00001b8e <.L50>:
      }
    }
    else {
      sevseg_writeDigitNum(ptr, displayPos--, 0, 0);
    1b8e:	0e 50 90    	mov.b     [w14+16], w0
    1b90:	8e 50 90    	mov.b     [w14+16], w1
    1b92:	81 40 e9    	dec.b     w1, w1
    1b94:	01 57 98    	mov.b     w1, [w14+16]
    1b96:	80 41 eb    	clr.b     w3
    1b98:	00 41 eb    	clr.b     w2
    1b9a:	80 40 78    	mov.b     w0, w1
    1b9c:	2e 08 90    	mov.w     [w14+20], w0
    1b9e:	e4 fe 07    	rcall     0x1968 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>

00001ba0 <.L56>:
    }

    // display negative sign if negative
    if(isNegative) sevseg_writeDigitRaw(ptr, displayPos--, 0x40);
    1ba0:	1e 40 90    	mov.b     [w14+1], w0
    1ba2:	00 04 e0    	cp0.b     w0
    1ba4:	11 00 32    	bra       Z, 0x1bc8 <.L58>
    1ba6:	0e 50 90    	mov.b     [w14+16], w0
    1ba8:	8e 50 90    	mov.b     [w14+16], w1
    1baa:	81 40 e9    	dec.b     w1, w1
    1bac:	01 57 98    	mov.b     w1, [w14+16]
    1bae:	02 04 20    	mov.w     #0x40, w2
    1bb0:	80 40 78    	mov.b     w0, w1
    1bb2:	2e 08 90    	mov.w     [w14+20], w0
    1bb4:	c7 fe 07    	rcall     0x1944 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

    // clear remaining display positions
    while(displayPos >= 0) sevseg_writeDigitRaw(ptr, displayPos--, 0x00);
    1bb6:	08 00 37    	bra       0x1bc8 <.L58>

00001bb8 <.L59>:
    1bb8:	0e 50 90    	mov.b     [w14+16], w0
    1bba:	8e 50 90    	mov.b     [w14+16], w1
    1bbc:	81 40 e9    	dec.b     w1, w1
    1bbe:	01 57 98    	mov.b     w1, [w14+16]
    1bc0:	00 01 eb    	clr.w     w2
    1bc2:	80 40 78    	mov.b     w0, w1
    1bc4:	2e 08 90    	mov.w     [w14+20], w0
    1bc6:	be fe 07    	rcall     0x1944 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>

00001bc8 <.L58>:
    1bc8:	0e 50 90    	mov.b     [w14+16], w0
    1bca:	00 04 e0    	cp0.b     w0
    1bcc:	f5 ff 3d    	bra       GE, 0x1bb8 <.L59>

00001bce <.L38>:
  }
}
    1bce:	4f 04 78    	mov.w     [--w15], w8
    1bd0:	00 80 fa    	ulnk      
    1bd2:	00 00 06    	return    

00001bd4 <_sevseg_printError>:

void sevseg_printError(_7SEGMENT* ptr){
    1bd4:	04 00 fa    	lnk       #0x4
    1bd6:	10 07 98    	mov.w     w0, [w14+2]
	uint8_t i;
  for(i = 0; i < SEVENSEG_DIGITS; ++i) {
    1bd8:	00 40 eb    	clr.b     w0
    1bda:	00 4f 78    	mov.b     w0, [w14]
    1bdc:	0b 00 37    	bra       0x1bf4 <.L61>

00001bde <.L64>:
    sevseg_writeDigitRaw(ptr, i, (i == 2 ? 0x00 : 0x40));
    1bde:	1e 40 78    	mov.b     [w14], w0
    1be0:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    1be2:	02 00 3a    	bra       NZ, 0x1be8 <.L62>
    1be4:	00 00 eb    	clr.w     w0
    1be6:	01 00 37    	bra       0x1bea <.L63>

00001be8 <.L62>:
    1be8:	00 04 20    	mov.w     #0x40, w0

00001bea <.L63>:
    1bea:	00 01 78    	mov.w     w0, w2
    1bec:	9e 40 78    	mov.b     [w14], w1
    1bee:	1e 00 90    	mov.w     [w14+2], w0
    1bf0:	a9 fe 07    	rcall     0x1944 <_sevseg_writeDigitRaw> <.LFB10> <.LFE9>
    1bf2:	1e 4f e8    	inc.b     [w14], [w14]

00001bf4 <.L61>:
    1bf4:	1e 40 78    	mov.b     [w14], w0
    1bf6:	e4 4f 50    	sub.b     w0, #0x4, [w15]
    1bf8:	f2 ff 36    	bra       LEU, 0x1bde <.L64>
  }
}
    1bfa:	00 80 fa    	ulnk      
    1bfc:	00 00 06    	return    

00001bfe <_sevseg_writeColon>:


void sevseg_writeColon(_7SEGMENT* ptr){
    1bfe:	02 00 fa    	lnk       #0x2
    1c00:	00 0f 78    	mov.w     w0, [w14]
  /*
  Wire.beginTransmission(i2c_addr);
  Wire.write((uint8_t)0x04);

  Wire.write(displaybuffer[2] & 0xFF);
  Wire.write(displaybuffer[2] >> 8);

  Wire.endTransmission();
  */
  i2c_start();
    1c02:	33 00 07    	rcall     0x1c6a <_i2c_start> <.LFB2> <.LFE1>
  send_i2c_byte(ptr->super.i2c_addr);
    1c04:	1e 00 78    	mov.w     [w14], w0
    1c06:	00 50 90    	mov.b     [w0+16], w0
    1c08:	00 80 fb    	ze        w0, w0
    1c0a:	7e 00 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte((uint8_t)0x04); // start at address $02
    1c0c:	40 00 20    	mov.w     #0x4, w0
    1c0e:	7c 00 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] & 0xFF);
    1c10:	1e 00 78    	mov.w     [w14], w0
    1c12:	20 00 90    	mov.w     [w0+4], w0
    1c14:	80 00 78    	mov.w     w0, w1
    1c16:	f0 0f 20    	mov.w     #0xff, w0
    1c18:	00 80 60    	and.w     w1, w0, w0
    1c1a:	76 00 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
  send_i2c_byte(ptr->super.displaybuffer[2] >> 8);
    1c1c:	1e 00 78    	mov.w     [w14], w0
    1c1e:	20 00 90    	mov.w     [w0+4], w0
    1c20:	48 00 de    	lsr.w     w0, #0x8, w0
    1c22:	72 00 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
  reset_i2c_bus();
    1c24:	56 00 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1c26:	00 80 fa    	ulnk      
    1c28:	00 00 06    	return    

00001c2a <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(uint32_t num_nops){    // 1 nop= 375ns
    1c2a:	08 00 fa    	lnk       #0x8
    1c2c:	20 07 98    	mov.w     w0, [w14+4]
    1c2e:	31 07 98    	mov.w     w1, [w14+6]
    uint32_t count = 0;
    1c30:	60 00 b8    	mul.uu    w0, #0x0, w0
    1c32:	00 8f be    	mov.d     w0, [w14]
    while (count < num_nops){
    1c34:	05 00 37    	bra       0x1c40 <.L2>

00001c36 <.L3>:
        __asm__("nop");
    1c36:	00 00 00    	nop       
        count +=1;
    1c38:	12 00 20    	mov.w     #0x1, w2
    1c3a:	03 00 20    	mov.w     #0x0, w3
    1c3c:	1e 0f 41    	add.w     w2, [w14], [w14]
    1c3e:	5e 97 49    	addc.w    w3, [++w14], [w14--]

00001c40 <.L2>:
    1c40:	2e 00 90    	mov.w     [w14+4], w0
    1c42:	be 00 90    	mov.w     [w14+6], w1
    1c44:	1e 01 be    	mov.d     [w14], w2
    1c46:	80 0f 51    	sub.w     w2, w0, [w15]
    1c48:	81 8f 59    	subb.w    w3, w1, [w15]
    1c4a:	f5 ff 39    	bra       NC, 0x1c36 <.L3>
    }
}
    1c4c:	00 80 fa    	ulnk      
    1c4e:	00 00 06    	return    

00001c50 <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    1c50:	04 00 fa    	lnk       #0x4
    1c52:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;           // Sets freq to 100kHz
    1c54:	1e 00 90    	mov.w     [w14+2], w0
    1c56:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	// Disable I2C Mode
    1c58:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	// Disable slew rate control
    1c5a:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	 // Clear Interrupt
    1c5c:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	// Enable I2C Mode
    1c5e:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	 // read buffer to clear buffer full
    1c60:	80 13 80    	mov.w     0x270, w0
    1c62:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    1c64:	36 00 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1c66:	00 80 fa    	ulnk      
    1c68:	00 00 06    	return    

00001c6a <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    1c6a:	02 00 fa    	lnk       #0x2
   int x = 0;
    1c6c:	00 00 eb    	clr.w     w0
    1c6e:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	//Reset any previous Ack
    1c70:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    1c72:	a0 00 20    	mov.w     #0xa, w0
    1c74:	01 00 20    	mov.w     #0x0, w1
    1c76:	d9 ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C3CONbits.SEN = 1;	//Initiate Start condition
    1c78:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    1c7a:	00 00 00    	nop       

   while (I2C3CONbits.SEN){    //the hardware will automatically clear Start Bit
    1c7c:	07 00 37    	bra       0x1c8c <.L6>

00001c7e <.L8>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    1c7e:	10 00 20    	mov.w     #0x1, w0
    1c80:	01 00 20    	mov.w     #0x0, w1
    1c82:	d3 ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1c84:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    1c86:	1e 00 78    	mov.w     [w14], w0
    1c88:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1c8a:	05 00 3c    	bra       GT, 0x1c96 <.L9>

00001c8c <.L6>:
    1c8c:	b0 13 80    	mov.w     0x276, w0
    1c8e:	61 00 60    	and.w     w0, #0x1, w0
    1c90:	00 00 e0    	cp0.w     w0
    1c92:	f5 ff 3a    	bra       NZ, 0x1c7e <.L8>
    1c94:	01 00 37    	bra       0x1c98 <.L7>

00001c96 <.L9>:
      break;
    1c96:	00 00 00    	nop       

00001c98 <.L7>:
   }
   delay_by_nop(2);
    1c98:	20 00 20    	mov.w     #0x2, w0
    1c9a:	01 00 20    	mov.w     #0x0, w1
    1c9c:	c6 ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1c9e:	00 80 fa    	ulnk      
    1ca0:	00 00 06    	return    

00001ca2 <_i2c_restart>:

void i2c_restart(void){
    1ca2:	02 00 fa    	lnk       #0x2
   int x = 0;
    1ca4:	00 00 eb    	clr.w     w0
    1ca6:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    1ca8:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    1caa:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    1cac:	07 00 37    	bra       0x1cbc <.L11>

00001cae <.L13>:
      delay_by_nop(1);
    1cae:	10 00 20    	mov.w     #0x1, w0
    1cb0:	01 00 20    	mov.w     #0x0, w1
    1cb2:	bb ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1cb4:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    1cb6:	1e 00 78    	mov.w     [w14], w0
    1cb8:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1cba:	05 00 3c    	bra       GT, 0x1cc6 <.L14>

00001cbc <.L11>:
    1cbc:	b0 13 80    	mov.w     0x276, w0
    1cbe:	62 00 60    	and.w     w0, #0x2, w0
    1cc0:	00 00 e0    	cp0.w     w0
    1cc2:	f5 ff 3a    	bra       NZ, 0x1cae <.L13>
    1cc4:	01 00 37    	bra       0x1cc8 <.L12>

00001cc6 <.L14>:
    1cc6:	00 00 00    	nop       

00001cc8 <.L12>:
   }
   delay_by_nop(2);
    1cc8:	20 00 20    	mov.w     #0x2, w0
    1cca:	01 00 20    	mov.w     #0x0, w1
    1ccc:	ae ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1cce:	00 80 fa    	ulnk      
    1cd0:	00 00 06    	return    

00001cd2 <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    1cd2:	02 00 fa    	lnk       #0x2
   int x = 0;
    1cd4:	00 00 eb    	clr.w     w0
    1cd6:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    1cd8:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    1cda:	07 00 37    	bra       0x1cea <.L16>

00001cdc <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    1cdc:	10 00 20    	mov.w     #0x1, w0
    1cde:	01 00 20    	mov.w     #0x0, w1
    1ce0:	a4 ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    1ce2:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    1ce4:	1e 00 78    	mov.w     [w14], w0
    1ce6:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1ce8:	05 00 3c    	bra       GT, 0x1cf4 <.L19>

00001cea <.L16>:
    1cea:	b0 13 80    	mov.w     0x276, w0
    1cec:	64 00 60    	and.w     w0, #0x4, w0
    1cee:	00 00 e0    	cp0.w     w0
    1cf0:	f5 ff 3a    	bra       NZ, 0x1cdc <.L18>
    1cf2:	01 00 37    	bra       0x1cf6 <.L17>

00001cf4 <.L19>:
    1cf4:	00 00 00    	nop       

00001cf6 <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    1cf6:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    1cf8:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    1cfa:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    1cfc:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    1cfe:	40 01 20    	mov.w     #0x14, w0
    1d00:	01 00 20    	mov.w     #0x0, w1
    1d02:	93 ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1d04:	00 80 fa    	ulnk      
    1d06:	00 00 06    	return    

00001d08 <_send_i2c_byte>:


//basic I2C byte send
char send_i2c_byte(int data){
    1d08:	04 00 fa    	lnk       #0x4
    1d0a:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    1d0c:	00 00 00    	nop       

00001d0e <.L21>:
    1d0e:	c0 13 80    	mov.w     0x278, w0
    1d10:	61 00 60    	and.w     w0, #0x1, w0
    1d12:	00 00 e0    	cp0.w     w0
    1d14:	fc ff 3a    	bra       NZ, 0x1d0e <.L21>
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    1d16:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data; // load the outgoing data byte
    1d18:	1e 00 90    	mov.w     [w14+2], w0
    1d1a:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    1d1c:	00 00 eb    	clr.w     w0
    1d1e:	00 0f 78    	mov.w     w0, [w14]
    1d20:	09 00 37    	bra       0x1d34 <.L22>

00001d22 <.L25>:
      if (!I2C3STATbits.TRSTAT) break; // if master transmit not in progress break
    1d22:	c1 13 80    	mov.w     0x278, w1
    1d24:	00 00 24    	mov.w     #0x4000, w0
    1d26:	00 80 60    	and.w     w1, w0, w0
    1d28:	00 00 e0    	cp0.w     w0
    1d2a:	09 00 32    	bra       Z, 0x1d3e <.L29>
      delay_by_nop(1); }
    1d2c:	10 00 20    	mov.w     #0x1, w0
    1d2e:	01 00 20    	mov.w     #0x0, w1
    1d30:	7c ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1d32:	1e 0f e8    	inc.w     [w14], [w14]

00001d34 <.L22>:
    1d34:	30 1f 20    	mov.w     #0x1f3, w0
    1d36:	9e 00 78    	mov.w     [w14], w1
    1d38:	80 8f 50    	sub.w     w1, w0, [w15]
    1d3a:	f3 ff 34    	bra       LE, 0x1d22 <.L25>
    1d3c:	01 00 37    	bra       0x1d40 <.L24>

00001d3e <.L29>:
    1d3e:	00 00 00    	nop       

00001d40 <.L24>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    1d40:	40 1f 20    	mov.w     #0x1f4, w0
    1d42:	9e 00 78    	mov.w     [w14], w1
    1d44:	80 8f 50    	sub.w     w1, w0, [w15]
    1d46:	02 00 3a    	bra       NZ, 0x1d4c <.L26>
        return(1); }    // return 1 to indicate failure
    1d48:	10 c0 b3    	mov.b     #0x1, w0
    1d4a:	0c 00 37    	bra       0x1d64 <.L27>

00001d4c <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    1d4c:	c1 13 80    	mov.w     0x278, w1
    1d4e:	00 00 28    	mov.w     #0x8000, w0
    1d50:	00 80 60    	and.w     w1, w0, w0
    1d52:	00 00 e0    	cp0.w     w0
    1d54:	03 00 32    	bra       Z, 0x1d5c <.L28>
      reset_i2c_bus();
    1d56:	bd ff 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }            // abort if not found
    1d58:	10 c0 b3    	mov.b     #0x1, w0
    1d5a:	04 00 37    	bra       0x1d64 <.L27>

00001d5c <.L28>:

   delay_by_nop(2);
    1d5c:	20 00 20    	mov.w     #0x2, w0
    1d5e:	01 00 20    	mov.w     #0x0, w1
    1d60:	64 ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    1d62:	00 40 eb    	clr.b     w0

00001d64 <.L27>:
}
    1d64:	00 80 fa    	ulnk      
    1d66:	00 00 06    	return    

00001d68 <_i2c_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c_read(void){
    1d68:	04 00 fa    	lnk       #0x4
   int i = 0;
    1d6a:	00 00 eb    	clr.w     w0
    1d6c:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1d6e:	00 40 eb    	clr.b     w0
    1d70:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1d72:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    1d74:	05 00 37    	bra       0x1d80 <.L31>

00001d76 <.L33>:
      i ++;
    1d76:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    1d78:	00 7d 20    	mov.w     #0x7d0, w0
    1d7a:	9e 00 78    	mov.w     [w14], w1
    1d7c:	80 8f 50    	sub.w     w1, w0, [w15]
    1d7e:	05 00 3c    	bra       GT, 0x1d8a <.L34>

00001d80 <.L31>:
    1d80:	c0 13 80    	mov.w     0x278, w0
    1d82:	62 00 60    	and.w     w0, #0x2, w0
    1d84:	00 00 e0    	cp0.w     w0
    1d86:	f7 ff 32    	bra       Z, 0x1d76 <.L33>
    1d88:	01 00 37    	bra       0x1d8c <.L32>

00001d8a <.L34>:
    1d8a:	00 00 00    	nop       

00001d8c <.L32>:

   data = I2C3RCV;       //get data from I2C3RCV register
    1d8c:	80 13 80    	mov.w     0x270, w0
    1d8e:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    1d90:	2e 40 90    	mov.b     [w14+2], w0
}
    1d92:	00 80 fa    	ulnk      
    1d94:	00 00 06    	return    

00001d96 <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    1d96:	04 00 fa    	lnk       #0x4
   int i = 0;
    1d98:	00 00 eb    	clr.w     w0
    1d9a:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1d9c:	00 40 eb    	clr.b     w0
    1d9e:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1da0:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    1da2:	05 00 37    	bra       0x1dae <.L36>

00001da4 <.L38>:
      i++;
    1da4:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1da6:	00 7d 20    	mov.w     #0x7d0, w0
    1da8:	9e 00 78    	mov.w     [w14], w1
    1daa:	80 8f 50    	sub.w     w1, w0, [w15]
    1dac:	05 00 3c    	bra       GT, 0x1db8 <.L39>

00001dae <.L36>:
    1dae:	c0 13 80    	mov.w     0x278, w0
    1db0:	62 00 60    	and.w     w0, #0x2, w0
    1db2:	00 00 e0    	cp0.w     w0
    1db4:	f7 ff 32    	bra       Z, 0x1da4 <.L38>
    1db6:	01 00 37    	bra       0x1dba <.L37>

00001db8 <.L39>:
    1db8:	00 00 00    	nop       

00001dba <.L37>:

   data = I2C3RCV;               //get data from I2C3RCV register
    1dba:	80 13 80    	mov.w     0x270, w0
    1dbc:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;        //start ACK generation
    1dbe:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    1dc0:	a0 00 20    	mov.w     #0xa, w0
    1dc2:	01 00 20    	mov.w     #0x0, w1
    1dc4:	32 ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    1dc6:	2e 40 90    	mov.b     [w14+2], w0
}
    1dc8:	00 80 fa    	ulnk      
    1dca:	00 00 06    	return    

00001dcc <_i2c_read_nack>:

char i2c_read_nack(void){	//does not reset bus!!!
    1dcc:	04 00 fa    	lnk       #0x4
   int i = 0;
    1dce:	00 00 eb    	clr.w     w0
    1dd0:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1dd2:	00 40 eb    	clr.b     w0
    1dd4:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    1dd6:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    1dd8:	05 00 37    	bra       0x1de4 <.L41>

00001dda <.L43>:
      i++;
    1dda:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    1ddc:	00 7d 20    	mov.w     #0x7d0, w0
    1dde:	9e 00 78    	mov.w     [w14], w1
    1de0:	80 8f 50    	sub.w     w1, w0, [w15]
    1de2:	05 00 3c    	bra       GT, 0x1dee <.L44>

00001de4 <.L41>:
    1de4:	c0 13 80    	mov.w     0x278, w0
    1de6:	62 00 60    	and.w     w0, #0x2, w0
    1de8:	00 00 e0    	cp0.w     w0
    1dea:	f7 ff 32    	bra       Z, 0x1dda <.L43>
    1dec:	01 00 37    	bra       0x1df0 <.L42>

00001dee <.L44>:
    1dee:	00 00 00    	nop       

00001df0 <.L42>:

   data = I2C3RCV;               //get data from I2C3RCV register
    1df0:	80 13 80    	mov.w     0x270, w0
    1df2:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    1df4:	76 a2 a8    	bset.b    0x276, #0x5
   I2C3CONbits.ACKEN = 1;        //start ack generation
    1df6:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);             //wait before exiting
    1df8:	a0 00 20    	mov.w     #0xa, w0
    1dfa:	01 00 20    	mov.w     #0x0, w1
    1dfc:	16 ff 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    1dfe:	2e 40 90    	mov.b     [w14+2], w0
}
    1e00:	00 80 fa    	ulnk      
    1e02:	00 00 06    	return    

00001e04 <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    1e04:	04 00 fa    	lnk       #0x4
    1e06:	00 4f 78    	mov.b     w0, [w14]
    1e08:	11 47 98    	mov.b     w1, [w14+1]
    1e0a:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    1e0c:	2e ff 07    	rcall     0x1c6a <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit, turns least sig, bit to 0
    1e0e:	1e 00 fb    	se        [w14], w0
    1e10:	80 00 78    	mov.w     w0, w1
    1e12:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e14:	00 80 60    	and.w     w1, w0, w0
    1e16:	78 ff 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1e18:	1e 40 90    	mov.b     [w14+1], w0
    1e1a:	00 00 fb    	se        w0, w0
    1e1c:	75 ff 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    1e1e:	2e 40 90    	mov.b     [w14+2], w0
    1e20:	00 00 fb    	se        w0, w0
    1e22:	72 ff 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    1e24:	56 ff 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1e26:	00 80 fa    	ulnk      
    1e28:	00 00 06    	return    

00001e2a <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    1e2a:	04 00 fa    	lnk       #0x4
    1e2c:	20 47 98    	mov.b     w0, [w14+2]
    1e2e:	31 47 98    	mov.b     w1, [w14+3]
   char temp;
   i2c_start();
    1e30:	1c ff 07    	rcall     0x1c6a <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    1e32:	2e 40 90    	mov.b     [w14+2], w0
    1e34:	00 00 fb    	se        w0, w0
    1e36:	68 ff 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    1e38:	3e 40 90    	mov.b     [w14+3], w0
    1e3a:	00 00 fb    	se        w0, w0
    1e3c:	65 ff 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    1e3e:	a0 00 20    	mov.w     #0xa, w0
    1e40:	01 00 20    	mov.w     #0x0, w1
    1e42:	f3 fe 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   i2c_restart();
    1e44:	2e ff 07    	rcall     0x1ca2 <_i2c_restart> <.LFB3> <.LFE2>

   send_i2c_byte(addr | 0x01); // set R bit, turn least sig. bit to 1
    1e46:	2e 40 90    	mov.b     [w14+2], w0
    1e48:	00 04 a0    	bset.b    w0, #0x0
    1e4a:	00 00 fb    	se        w0, w0
    1e4c:	5d ff 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    1e4e:	8c ff 07    	rcall     0x1d68 <_i2c_read> <.LFB6> <.LFE5>
    1e50:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    1e52:	3f ff 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    1e54:	1e 40 78    	mov.b     [w14], w0
}
    1e56:	00 80 fa    	ulnk      
    1e58:	00 00 06    	return    

00001e5a <_I2Cpoll>:

// function checks if device at addr is on bus
// 1 means it is there, 0 means it is not there
unsigned char I2Cpoll(char addr){
    1e5a:	04 00 fa    	lnk       #0x4
    1e5c:	20 47 98    	mov.b     w0, [w14+2]
    unsigned char temp = 0;
    1e5e:	00 40 eb    	clr.b     w0
    1e60:	00 4f 78    	mov.b     w0, [w14]
    i2c_start();
    1e62:	03 ff 07    	rcall     0x1c6a <_i2c_start> <.LFB2> <.LFE1>
    temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    1e64:	2e 40 90    	mov.b     [w14+2], w0
    1e66:	00 00 fb    	se        w0, w0
    1e68:	80 00 78    	mov.w     w0, w1
    1e6a:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e6c:	00 80 60    	and.w     w1, w0, w0
    1e6e:	4c ff 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e70:	00 4f 78    	mov.b     w0, [w14]
    reset_i2c_bus();
    1e72:	2f ff 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
    if (temp == 0) {
    1e74:	1e 40 78    	mov.b     [w14], w0
    1e76:	00 04 e0    	cp0.b     w0
    1e78:	02 00 3a    	bra       NZ, 0x1e7e <.L48>
        return 1; // We found it, no error
    1e7a:	10 c0 b3    	mov.b     #0x1, w0
    1e7c:	01 00 37    	bra       0x1e80 <.L49>

00001e7e <.L48>:
    } else return 0;
    1e7e:	00 40 eb    	clr.b     w0

00001e80 <.L49>:
}
    1e80:	00 80 fa    	ulnk      
    1e82:	00 00 06    	return    

00001e84 <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    1e84:	08 00 fa    	lnk       #0x8
    1e86:	20 47 98    	mov.b     w0, [w14+2]
    1e88:	21 07 98    	mov.w     w1, [w14+4]
    1e8a:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    1e8c:	00 40 eb    	clr.b     w0
    1e8e:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    1e90:	ec fe 07    	rcall     0x1c6a <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    1e92:	2e 40 90    	mov.b     [w14+2], w0
    1e94:	00 00 fb    	se        w0, w0
    1e96:	80 00 78    	mov.w     w0, w1
    1e98:	e0 ff 2f    	mov.w     #0xfffe, w0
    1e9a:	00 80 60    	and.w     w1, w0, w0
    1e9c:	35 ff 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
    1e9e:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    1ea0:	00 40 eb    	clr.b     w0
    1ea2:	10 47 98    	mov.b     w0, [w14+1]
    1ea4:	0d 00 37    	bra       0x1ec0 <.L51>

00001ea6 <.L52>:
    err |= send_i2c_byte(dat[j]);
    1ea6:	1e 40 90    	mov.b     [w14+1], w0
    1ea8:	00 80 fb    	ze        w0, w0
    1eaa:	ae 00 90    	mov.w     [w14+4], w1
    1eac:	00 80 40    	add.w     w1, w0, w0
    1eae:	10 40 78    	mov.b     [w0], w0
    1eb0:	00 00 fb    	se        w0, w0
    1eb2:	2a ff 07    	rcall     0x1d08 <_send_i2c_byte> <.LFB5> <.LFE4>
    1eb4:	9e 40 78    	mov.b     [w14], w1
    1eb6:	01 40 70    	ior.b     w0, w1, w0
    1eb8:	00 4f 78    	mov.b     w0, [w14]
    1eba:	1e 40 90    	mov.b     [w14+1], w0
    1ebc:	00 40 e8    	inc.b     w0, w0
    1ebe:	10 47 98    	mov.b     w0, [w14+1]

00001ec0 <.L51>:
    1ec0:	9e 40 90    	mov.b     [w14+1], w1
    1ec2:	6e 40 90    	mov.b     [w14+6], w0
    1ec4:	80 cf 50    	sub.b     w1, w0, [w15]
    1ec6:	ef ff 39    	bra       NC, 0x1ea6 <.L52>
  }
  reset_i2c_bus();
    1ec8:	04 ff 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    1eca:	1e 40 78    	mov.b     [w14], w0
}
    1ecc:	00 80 fa    	ulnk      
    1ece:	00 00 06    	return    

00001ed0 <_i2c2_init>:

////////////////////////////////////////////////////////////////////////////////
// I2C2 ////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// initiates I2C3 module to baud rate BRG
void i2c2_init(int BRG){      // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    1ed0:	04 00 fa    	lnk       #0x4
    1ed2:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C2BRG = BRG;           // Sets freq to 100kHz
    1ed4:	1e 00 90    	mov.w     [w14+2], w0
    1ed6:	a0 10 88    	mov.w     w0, 0x214
   I2C2CONbits.I2CEN = 0;	// Disable I2C Mode
    1ed8:	17 e2 a9    	bclr.b    0x217, #0x7
   I2C2CONbits.DISSLW = 1;	// Disable slew rate control
    1eda:	17 22 a8    	bset.b    0x217, #0x1
   IFS3bits.MI2C2IF = 0;	 // Clear Interrupt
    1edc:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2CONbits.I2CEN = 1;	// Enable I2C Mode
    1ede:	17 e2 a8    	bset.b    0x217, #0x7
   temp = I2C2RCV;	 // read buffer to clear buffer full
    1ee0:	80 10 80    	mov.w     0x210, w0
    1ee2:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	 // set bus to idle
    1ee4:	f6 fe 07    	rcall     0x1cd2 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1ee6:	00 80 fa    	ulnk      
    1ee8:	00 00 06    	return    

00001eea <_i2c2_start>:

//function iniates a start condition on bus
void i2c2_start(void){
    1eea:	02 00 fa    	lnk       #0x2
   int x = 0;
    1eec:	00 00 eb    	clr.w     w0
    1eee:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.ACKDT = 0;	//Reset any previous Ack
    1ef0:	16 a2 a9    	bclr.b    0x216, #0x5
   delay_by_nop(10);
    1ef2:	a0 00 20    	mov.w     #0xa, w0
    1ef4:	01 00 20    	mov.w     #0x0, w1
    1ef6:	99 fe 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   I2C2CONbits.SEN = 1;	//Initiate Start condition
    1ef8:	16 02 a8    	bset.b    0x216, #0x0
   __asm__("nop");
    1efa:	00 00 00    	nop       

   while (I2C2CONbits.SEN){    //the hardware will automatically clear Start Bit
    1efc:	07 00 37    	bra       0x1f0c <.L55>

00001efe <.L57>:
      delay_by_nop(1);      //wait for automatic clear before proceding
    1efe:	10 00 20    	mov.w     #0x1, w0
    1f00:	01 00 20    	mov.w     #0x0, w1
    1f02:	93 fe 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1f04:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    1f06:	1e 00 78    	mov.w     [w14], w0
    1f08:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f0a:	05 00 3c    	bra       GT, 0x1f16 <.L58>

00001f0c <.L55>:
    1f0c:	b0 10 80    	mov.w     0x216, w0
    1f0e:	61 00 60    	and.w     w0, #0x1, w0
    1f10:	00 00 e0    	cp0.w     w0
    1f12:	f5 ff 3a    	bra       NZ, 0x1efe <.L57>
    1f14:	01 00 37    	bra       0x1f18 <.L56>

00001f16 <.L58>:
      break;
    1f16:	00 00 00    	nop       

00001f18 <.L56>:
   }
   delay_by_nop(2);
    1f18:	20 00 20    	mov.w     #0x2, w0
    1f1a:	01 00 20    	mov.w     #0x0, w1
    1f1c:	86 fe 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1f1e:	00 80 fa    	ulnk      
    1f20:	00 00 06    	return    

00001f22 <_i2c2_restart>:

void i2c2_restart(void){
    1f22:	02 00 fa    	lnk       #0x2
   int x = 0;
    1f24:	00 00 eb    	clr.w     w0
    1f26:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.RSEN = 1;	//Initiate restart condition
    1f28:	16 22 a8    	bset.b    0x216, #0x1
   __asm__("nop");
    1f2a:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C2CONbits.RSEN){
    1f2c:	07 00 37    	bra       0x1f3c <.L60>

00001f2e <.L62>:
      delay_by_nop(1);
    1f2e:	10 00 20    	mov.w     #0x1, w0
    1f30:	01 00 20    	mov.w     #0x0, w1
    1f32:	7b fe 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x++;
    1f34:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    1f36:	1e 00 78    	mov.w     [w14], w0
    1f38:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f3a:	05 00 3c    	bra       GT, 0x1f46 <.L63>

00001f3c <.L60>:
    1f3c:	b0 10 80    	mov.w     0x216, w0
    1f3e:	62 00 60    	and.w     w0, #0x2, w0
    1f40:	00 00 e0    	cp0.w     w0
    1f42:	f5 ff 3a    	bra       NZ, 0x1f2e <.L62>
    1f44:	01 00 37    	bra       0x1f48 <.L61>

00001f46 <.L63>:
    1f46:	00 00 00    	nop       

00001f48 <.L61>:
   }
   delay_by_nop(2);
    1f48:	20 00 20    	mov.w     #0x2, w0
    1f4a:	01 00 20    	mov.w     #0x0, w1
    1f4c:	6e fe 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1f4e:	00 80 fa    	ulnk      
    1f50:	00 00 06    	return    

00001f52 <_reset_i2c2_bus>:


//Resets the I2C bus to Idle
void reset_i2c2_bus(void){
    1f52:	02 00 fa    	lnk       #0x2
   int x = 0;
    1f54:	00 00 eb    	clr.w     w0
    1f56:	00 0f 78    	mov.w     w0, [w14]
   I2C2CONbits.PEN = 1;     //initiate stop bit
    1f58:	16 42 a8    	bset.b    0x216, #0x2
   while (I2C2CONbits.PEN) {     //wait for hardware clear of stop bit
    1f5a:	07 00 37    	bra       0x1f6a <.L65>

00001f5c <.L67>:
      // delay_by_nop(1);
      delay_by_nop(1);
    1f5c:	10 00 20    	mov.w     #0x1, w0
    1f5e:	01 00 20    	mov.w     #0x0, w1
    1f60:	64 fe 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
      x ++;
    1f62:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    1f64:	1e 00 78    	mov.w     [w14], w0
    1f66:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1f68:	05 00 3c    	bra       GT, 0x1f74 <.L68>

00001f6a <.L65>:
    1f6a:	b0 10 80    	mov.w     0x216, w0
    1f6c:	64 00 60    	and.w     w0, #0x4, w0
    1f6e:	00 00 e0    	cp0.w     w0
    1f70:	f5 ff 3a    	bra       NZ, 0x1f5c <.L67>
    1f72:	01 00 37    	bra       0x1f76 <.L66>

00001f74 <.L68>:
    1f74:	00 00 00    	nop       

00001f76 <.L66>:
   }

   I2C2CONbits.RCEN = 0;
    1f76:	16 62 a9    	bclr.b    0x216, #0x3
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    1f78:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2STATbits.IWCOL = 0;
    1f7a:	18 e2 a9    	bclr.b    0x218, #0x7
   I2C2STATbits.BCL = 0;
    1f7c:	19 42 a9    	bclr.b    0x219, #0x2
   // delay_by_nop(10);
   delay_by_nop(20);
    1f7e:	40 01 20    	mov.w     #0x14, w0
    1f80:	01 00 20    	mov.w     #0x0, w1
    1f82:	53 fe 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
}
    1f84:	00 80 fa    	ulnk      
    1f86:	00 00 06    	return    

00001f88 <_send_i2c2_byte>:


//basic I2C byte send
char send_i2c2_byte(int data){
    1f88:	04 00 fa    	lnk       #0x4
    1f8a:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C2STATbits.TBF) { }
    1f8c:	00 00 00    	nop       

00001f8e <.L70>:
    1f8e:	c0 10 80    	mov.w     0x218, w0
    1f90:	61 00 60    	and.w     w0, #0x1, w0
    1f92:	00 00 e0    	cp0.w     w0
    1f94:	fc ff 3a    	bra       NZ, 0x1f8e <.L70>
   IFS3bits.MI2C2IF = 0; // Clear Interrupt
    1f96:	8a 40 a9    	bclr.b    0x8a, #0x2
   I2C2TRN = data; // load the outgoing data byte
    1f98:	1e 00 90    	mov.w     [w14+2], w0
    1f9a:	90 10 88    	mov.w     w0, 0x212

   for (i=0; i<500; i++){           // wait for transmission
    1f9c:	00 00 eb    	clr.w     w0
    1f9e:	00 0f 78    	mov.w     w0, [w14]
    1fa0:	09 00 37    	bra       0x1fb4 <.L71>

00001fa2 <.L74>:
      if (!I2C2STATbits.TRSTAT) break; // if master transmit not in progress break
    1fa2:	c1 10 80    	mov.w     0x218, w1
    1fa4:	00 00 24    	mov.w     #0x4000, w0
    1fa6:	00 80 60    	and.w     w1, w0, w0
    1fa8:	00 00 e0    	cp0.w     w0
    1faa:	09 00 32    	bra       Z, 0x1fbe <.L78>
      delay_by_nop(1); }
    1fac:	10 00 20    	mov.w     #0x1, w0
    1fae:	01 00 20    	mov.w     #0x0, w1
    1fb0:	3c fe 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    1fb2:	1e 0f e8    	inc.w     [w14], [w14]

00001fb4 <.L71>:
    1fb4:	30 1f 20    	mov.w     #0x1f3, w0
    1fb6:	9e 00 78    	mov.w     [w14], w1
    1fb8:	80 8f 50    	sub.w     w1, w0, [w15]
    1fba:	f3 ff 34    	bra       LE, 0x1fa2 <.L74>
    1fbc:	01 00 37    	bra       0x1fc0 <.L73>

00001fbe <.L78>:
    1fbe:	00 00 00    	nop       

00001fc0 <.L73>:

    if (i == 500) {     // if i got to 500, then there was an issue`
    1fc0:	40 1f 20    	mov.w     #0x1f4, w0
    1fc2:	9e 00 78    	mov.w     [w14], w1
    1fc4:	80 8f 50    	sub.w     w1, w0, [w15]
    1fc6:	02 00 3a    	bra       NZ, 0x1fcc <.L75>
        return(1); }    // return 1 to indicate failure
    1fc8:	10 c0 b3    	mov.b     #0x1, w0
    1fca:	0c 00 37    	bra       0x1fe4 <.L76>

00001fcc <.L75>:

   if (I2C2STATbits.ACKSTAT == 1){   // Check for NO_ACK from slave,
    1fcc:	c1 10 80    	mov.w     0x218, w1
    1fce:	00 00 28    	mov.w     #0x8000, w0
    1fd0:	00 80 60    	and.w     w1, w0, w0
    1fd2:	00 00 e0    	cp0.w     w0
    1fd4:	03 00 32    	bra       Z, 0x1fdc <.L77>
      reset_i2c2_bus();
    1fd6:	bd ff 07    	rcall     0x1f52 <_reset_i2c2_bus> <.LFB16> <.LFE15>
      return(1); }            // abort if not found
    1fd8:	10 c0 b3    	mov.b     #0x1, w0
    1fda:	04 00 37    	bra       0x1fe4 <.L76>

00001fdc <.L77>:

   delay_by_nop(2);
    1fdc:	20 00 20    	mov.w     #0x2, w0
    1fde:	01 00 20    	mov.w     #0x0, w1
    1fe0:	24 fe 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return(0);
    1fe2:	00 40 eb    	clr.b     w0

00001fe4 <.L76>:
}
    1fe4:	00 80 fa    	ulnk      
    1fe6:	00 00 06    	return    

00001fe8 <_i2c2_read>:


//function reads data, returns the read data, no ack
// helper function
char i2c2_read(void){
    1fe8:	04 00 fa    	lnk       #0x4
   int i = 0;
    1fea:	00 00 eb    	clr.w     w0
    1fec:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1fee:	00 40 eb    	clr.b     w0
    1ff0:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    1ff2:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {           //if no response, break
    1ff4:	05 00 37    	bra       0x2000 <.L80>

00001ff6 <.L82>:
      i ++;
    1ff6:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;  }
    1ff8:	00 7d 20    	mov.w     #0x7d0, w0
    1ffa:	9e 00 78    	mov.w     [w14], w1
    1ffc:	80 8f 50    	sub.w     w1, w0, [w15]
    1ffe:	05 00 3c    	bra       GT, 0x200a <.L83>

00002000 <.L80>:
    2000:	c0 10 80    	mov.w     0x218, w0
    2002:	62 00 60    	and.w     w0, #0x2, w0
    2004:	00 00 e0    	cp0.w     w0
    2006:	f7 ff 32    	bra       Z, 0x1ff6 <.L82>
    2008:	01 00 37    	bra       0x200c <.L81>

0000200a <.L83>:
    200a:	00 00 00    	nop       

0000200c <.L81>:

   data = I2C2RCV;       //get data from I2C2RCV register
    200c:	80 10 80    	mov.w     0x210, w0
    200e:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    2010:	2e 40 90    	mov.b     [w14+2], w0
}
    2012:	00 80 fa    	ulnk      
    2014:	00 00 06    	return    

00002016 <_i2c2_read_ack>:


//function reads data, returns the read data, with ack
char i2c2_read_ack(void){	//does not reset bus!!!
    2016:	04 00 fa    	lnk       #0x4
   int i = 0;
    2018:	00 00 eb    	clr.w     w0
    201a:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    201c:	00 40 eb    	clr.b     w0
    201e:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    2020:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    2022:	05 00 37    	bra       0x202e <.L85>

00002024 <.L87>:
      i++;
    2024:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    2026:	00 7d 20    	mov.w     #0x7d0, w0
    2028:	9e 00 78    	mov.w     [w14], w1
    202a:	80 8f 50    	sub.w     w1, w0, [w15]
    202c:	05 00 3c    	bra       GT, 0x2038 <.L88>

0000202e <.L85>:
    202e:	c0 10 80    	mov.w     0x218, w0
    2030:	62 00 60    	and.w     w0, #0x2, w0
    2032:	00 00 e0    	cp0.w     w0
    2034:	f7 ff 32    	bra       Z, 0x2024 <.L87>
    2036:	01 00 37    	bra       0x203a <.L86>

00002038 <.L88>:
    2038:	00 00 00    	nop       

0000203a <.L86>:

   data = I2C2RCV;               //get data from I2C2RCV register
    203a:	80 10 80    	mov.w     0x210, w0
    203c:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKEN = 1;        //start ACK generation
    203e:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    2040:	a0 00 20    	mov.w     #0xa, w0
    2042:	01 00 20    	mov.w     #0x0, w1
    2044:	f2 fd 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    2046:	2e 40 90    	mov.b     [w14+2], w0
}
    2048:	00 80 fa    	ulnk      
    204a:	00 00 06    	return    

0000204c <_i2c2_read_nack>:

char i2c2_read_nack(void){	//does not reset bus!!!
    204c:	04 00 fa    	lnk       #0x4
   int i = 0;
    204e:	00 00 eb    	clr.w     w0
    2050:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    2052:	00 40 eb    	clr.b     w0
    2054:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.RCEN = 1;            //set I2C module to receive
    2056:	16 62 a8    	bset.b    0x216, #0x3

   while (!I2C2STATbits.RBF) {       //if no response, break
    2058:	05 00 37    	bra       0x2064 <.L90>

0000205a <.L92>:
      i++;
    205a:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;}
    205c:	00 7d 20    	mov.w     #0x7d0, w0
    205e:	9e 00 78    	mov.w     [w14], w1
    2060:	80 8f 50    	sub.w     w1, w0, [w15]
    2062:	05 00 3c    	bra       GT, 0x206e <.L93>

00002064 <.L90>:
    2064:	c0 10 80    	mov.w     0x218, w0
    2066:	62 00 60    	and.w     w0, #0x2, w0
    2068:	00 00 e0    	cp0.w     w0
    206a:	f7 ff 32    	bra       Z, 0x205a <.L92>
    206c:	01 00 37    	bra       0x2070 <.L91>

0000206e <.L93>:
    206e:	00 00 00    	nop       

00002070 <.L91>:

   data = I2C2RCV;               //get data from I2C2RCV register
    2070:	80 10 80    	mov.w     0x210, w0
    2072:	20 47 98    	mov.b     w0, [w14+2]
   I2C2CONbits.ACKDT = 1;        // set mastrer to nack instead of ack
    2074:	16 a2 a8    	bset.b    0x216, #0x5
   I2C2CONbits.ACKEN = 1;        //start ack generation
    2076:	16 82 a8    	bset.b    0x216, #0x4
   delay_by_nop(10);             //wait before exiting
    2078:	a0 00 20    	mov.w     #0xa, w0
    207a:	01 00 20    	mov.w     #0x0, w1
    207c:	d6 fd 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
   return data;
    207e:	2e 40 90    	mov.b     [w14+2], w0
}
    2080:	00 80 fa    	ulnk      
    2082:	00 00 06    	return    

00002084 <_I2C2poll>:

// function checks if device at addr i bus
// 1 means it is not there, 0 means it is not there
unsigned char I2C2poll(char addr){
    2084:	04 00 fa    	lnk       #0x4
    2086:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    2088:	00 40 eb    	clr.b     w0
    208a:	00 4f 78    	mov.b     w0, [w14]
   i2c2_start();
    208c:	2e ff 07    	rcall     0x1eea <_i2c2_start> <.LFB14> <.LFE13>
   temp = send_i2c2_byte((addr) & (0xfffe)); // set /W bit
    208e:	2e 40 90    	mov.b     [w14+2], w0
    2090:	00 00 fb    	se        w0, w0
    2092:	80 00 78    	mov.w     w0, w1
    2094:	e0 ff 2f    	mov.w     #0xfffe, w0
    2096:	00 80 60    	and.w     w1, w0, w0
    2098:	77 ff 07    	rcall     0x1f88 <_send_i2c2_byte> <.LFB17> <.LFE16>
    209a:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c2_bus();
    209c:	5a ff 07    	rcall     0x1f52 <_reset_i2c2_bus> <.LFB16> <.LFE15>
   if (temp == 0) {
    209e:	1e 40 78    	mov.b     [w14], w0
    20a0:	00 04 e0    	cp0.b     w0
    20a2:	02 00 3a    	bra       NZ, 0x20a8 <.L95>
       return 1; // We found it, no error
    20a4:	10 c0 b3    	mov.b     #0x1, w0
    20a6:	01 00 37    	bra       0x20aa <.L96>

000020a8 <.L95>:
   } else return 0;
    20a8:	00 40 eb    	clr.b     w0

000020aa <.L96>:
}
    20aa:	00 80 fa    	ulnk      
    20ac:	00 00 06    	return    

000020ae <_main>:
    20ae:	00 00 fa    	lnk       #0x0
    20b0:	96 03 07    	rcall     0x27de <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    20b2:	d0 09 20    	mov.w     #0x9d, w0
    20b4:	0d ff 07    	rcall     0x1ed0 <_i2c2_init> <.LFB13> <.LFE12>
    20b6:	80 00 20    	mov.w     #0x8, w0
    20b8:	d0 10 88    	mov.w     w0, 0x21a
    20ba:	1c 22 ef    	clr.w     0x21c
    20bc:	9a 20 a8    	bset.b    0x9a, #0x1
    20be:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    20c0:	d8 82 a9    	bclr.b    0x2d8, #0x4
    20c2:	77 01 07    	rcall     0x23b2 <_init_ajuart> <.L0> <.LFB0> <.LFE11> <.Letext0> <.Ltext0>
    20c4:	80 3e 20    	mov.w     #0x3e8, w0
    20c6:	c4 fd 07    	rcall     0x1c50 <_i2c_init> <.LFB1> <.LFE0>
    20c8:	20 6c 29    	mov.w     #0x96c2, w0
    20ca:	10 40 78    	mov.b     [w0], w0
    20cc:	80 40 78    	mov.b     w0, w1
    20ce:	60 03 21    	mov.w     #0x1036, w0
    20d0:	f9 fa 07    	rcall     0x16c4 <_led_begin> <.L0> <.LFB0> <.Ltext0>
    20d2:	00 02 20    	mov.w     #0x20, w0
    20d4:	20 08 88    	mov.w     w0, 0x104
    20d6:	00 71 21    	mov.w     #0x1710, w0
    20d8:	10 08 88    	mov.w     w0, 0x102
    20da:	00 21 ef    	clr.w     0x100
    20dc:	84 60 a9    	bclr.b    0x84, #0x3
    20de:	94 60 a8    	bset.b    0x94, #0x3
    20e0:	05 e1 a8    	bset.b    0x105, #0x7
    20e2:	00 1f 22    	mov.w     #0x21f0, w0
    20e4:	00 40 88    	mov.w     w0, 0x800

000020e6 <.L5>:
    20e6:	60 40 80    	mov.w     0x80c, w0
    20e8:	1d 01 07    	rcall     0x2324 <_dispNumber> <.LFB11> <.LFE10>
    20ea:	00 40 80    	mov.w     0x800, w0
    20ec:	00 00 01    	call      w0
    20ee:	fb ff 37    	bra       0x20e6 <.L5>

000020f0 <_firstnum>:
    20f0:	02 00 fa    	lnk       #0x2
    20f2:	09 01 07    	rcall     0x2306 <_ledoff> <.LFB10> <.LFE9>
    20f4:	dc e2 a8    	bset.b    0x2dc, #0x7
    20f6:	71 80 20    	mov.w     #0x807, w1
    20f8:	91 40 78    	mov.b     [w1], w1
    20fa:	06 c8 bf    	mov.b     0x806, WREG
    20fc:	00 c0 50    	sub.b     w1, w0, w0
    20fe:	00 4f 78    	mov.b     w0, [w14]
    2100:	1e 40 78    	mov.b     [w14], w0
    2102:	e1 4f 40    	add.b     w0, #0x1, [w15]
    2104:	04 00 3d    	bra       GE, 0x210e <.L7>
    2106:	1e 40 78    	mov.b     [w14], w0
    2108:	f3 4f 40    	add.b     w0, #0x13, [w15]
    210a:	01 00 35    	bra       LT, 0x210e <.L7>
    210c:	11 68 ef    	clr.b     0x811

0000210e <.L7>:
    210e:	61 80 20    	mov.w     #0x806, w1
    2110:	91 40 78    	mov.b     [w1], w1
    2112:	0e c8 bf    	mov.b     0x80e, WREG
    2114:	80 cf 50    	sub.b     w1, w0, [w15]
    2116:	02 00 3a    	bra       NZ, 0x211c <.L8>
    2118:	10 c0 b3    	mov.b     #0x1, w0
    211a:	12 e8 b7    	mov.b     WREG, 0x812

0000211c <.L8>:
    211c:	71 80 20    	mov.w     #0x807, w1
    211e:	91 40 78    	mov.b     [w1], w1
    2120:	0e c8 bf    	mov.b     0x80e, WREG
    2122:	80 cf 50    	sub.b     w1, w0, [w15]
    2124:	07 00 3a    	bra       NZ, 0x2134 <.L9>
    2126:	12 c8 bf    	mov.b     0x812, WREG
    2128:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    212a:	04 00 3a    	bra       NZ, 0x2134 <.L9>
    212c:	11 c8 bf    	mov.b     0x811, WREG
    212e:	00 40 e8    	inc.b     w0, w0
    2130:	11 e8 b7    	mov.b     WREG, 0x811
    2132:	12 68 ef    	clr.b     0x812

00002134 <.L9>:
    2134:	11 c8 bf    	mov.b     0x811, WREG
    2136:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2138:	09 00 36    	bra       LEU, 0x214c <.L6>
    213a:	12 c8 bf    	mov.b     0x812, WREG
    213c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    213e:	06 00 3a    	bra       NZ, 0x214c <.L6>
    2140:	00 15 22    	mov.w     #0x2150, w0
    2142:	20 40 88    	mov.w     w0, 0x804
    2144:	11 68 ef    	clr.b     0x811
    2146:	12 68 ef    	clr.b     0x812
    2148:	06 c8 bf    	mov.b     0x806, WREG
    214a:	07 e8 b7    	mov.b     WREG, 0x807

0000214c <.L6>:
    214c:	00 80 fa    	ulnk      
    214e:	00 00 06    	return    

00002150 <_secondnum>:
    2150:	02 00 fa    	lnk       #0x2
    2152:	d9 00 07    	rcall     0x2306 <_ledoff> <.LFB10> <.LFE9>
    2154:	ec 02 a8    	bset.b    0x2ec, #0x0
    2156:	71 80 20    	mov.w     #0x807, w1
    2158:	91 40 78    	mov.b     [w1], w1
    215a:	06 c8 bf    	mov.b     0x806, WREG
    215c:	00 c0 50    	sub.b     w1, w0, w0
    215e:	00 4f 78    	mov.b     w0, [w14]
    2160:	61 80 20    	mov.w     #0x806, w1
    2162:	91 40 78    	mov.b     [w1], w1
    2164:	0f c8 bf    	mov.b     0x80f, WREG
    2166:	80 cf 50    	sub.b     w1, w0, [w15]
    2168:	02 00 3a    	bra       NZ, 0x216e <.L12>
    216a:	10 c0 b3    	mov.b     #0x1, w0
    216c:	12 e8 b7    	mov.b     WREG, 0x812

0000216e <.L12>:
    216e:	71 80 20    	mov.w     #0x807, w1
    2170:	91 40 78    	mov.b     [w1], w1
    2172:	0f c8 bf    	mov.b     0x80f, WREG
    2174:	80 cf 50    	sub.b     w1, w0, [w15]
    2176:	07 00 3a    	bra       NZ, 0x2186 <.L13>
    2178:	12 c8 bf    	mov.b     0x812, WREG
    217a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    217c:	04 00 3a    	bra       NZ, 0x2186 <.L13>
    217e:	11 c8 bf    	mov.b     0x811, WREG
    2180:	00 40 e8    	inc.b     w0, w0
    2182:	11 e8 b7    	mov.b     WREG, 0x811
    2184:	12 68 ef    	clr.b     0x812

00002186 <.L13>:
    2186:	11 c8 bf    	mov.b     0x811, WREG
    2188:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    218a:	09 00 3a    	bra       NZ, 0x219e <.L14>
    218c:	12 c8 bf    	mov.b     0x812, WREG
    218e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2190:	06 00 3a    	bra       NZ, 0x219e <.L14>
    2192:	60 1b 22    	mov.w     #0x21b6, w0
    2194:	20 40 88    	mov.w     w0, 0x804
    2196:	11 68 ef    	clr.b     0x811
    2198:	12 68 ef    	clr.b     0x812
    219a:	06 c8 bf    	mov.b     0x806, WREG
    219c:	07 e8 b7    	mov.b     WREG, 0x807

0000219e <.L14>:
    219e:	1e 40 78    	mov.b     [w14], w0
    21a0:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    21a2:	07 00 34    	bra       LE, 0x21b2 <.L11>
    21a4:	1e 40 78    	mov.b     [w14], w0
    21a6:	f3 4f 50    	sub.b     w0, #0x13, [w15]
    21a8:	04 00 3c    	bra       GT, 0x21b2 <.L11>
    21aa:	11 68 ef    	clr.b     0x811
    21ac:	12 68 ef    	clr.b     0x812
    21ae:	00 0f 22    	mov.w     #0x20f0, w0
    21b0:	20 40 88    	mov.w     w0, 0x804

000021b2 <.L11>:
    21b2:	00 80 fa    	ulnk      
    21b4:	00 00 06    	return    

000021b6 <_thirdnum>:
    21b6:	02 00 fa    	lnk       #0x2
    21b8:	a6 00 07    	rcall     0x2306 <_ledoff> <.LFB10> <.LFE9>
    21ba:	ec 22 a8    	bset.b    0x2ec, #0x1
    21bc:	71 80 20    	mov.w     #0x807, w1
    21be:	91 40 78    	mov.b     [w1], w1
    21c0:	06 c8 bf    	mov.b     0x806, WREG
    21c2:	00 c0 50    	sub.b     w1, w0, w0
    21c4:	00 4f 78    	mov.b     w0, [w14]
    21c6:	61 80 20    	mov.w     #0x806, w1
    21c8:	91 40 78    	mov.b     [w1], w1
    21ca:	10 c8 bf    	mov.b     0x810, WREG
    21cc:	80 cf 50    	sub.b     w1, w0, [w15]
    21ce:	05 00 3a    	bra       NZ, 0x21da <.L17>
    21d0:	00 0f 22    	mov.w     #0x20f0, w0
    21d2:	20 40 88    	mov.w     w0, 0x804
    21d4:	11 68 ef    	clr.b     0x811
    21d6:	c0 27 22    	mov.w     #0x227c, w0
    21d8:	00 40 88    	mov.w     w0, 0x800

000021da <.L17>:
    21da:	1e 40 78    	mov.b     [w14], w0
    21dc:	e1 4f 40    	add.b     w0, #0x1, [w15]
    21de:	06 00 3d    	bra       GE, 0x21ec <.L16>
    21e0:	1e 40 78    	mov.b     [w14], w0
    21e2:	f3 4f 40    	add.b     w0, #0x13, [w15]
    21e4:	03 00 35    	bra       LT, 0x21ec <.L16>
    21e6:	00 0f 22    	mov.w     #0x20f0, w0
    21e8:	20 40 88    	mov.w     w0, 0x804
    21ea:	11 68 ef    	clr.b     0x811

000021ec <.L16>:
    21ec:	00 80 fa    	ulnk      
    21ee:	00 00 06    	return    

000021f0 <_setup>:
    21f0:	00 00 fa    	lnk       #0x0
    21f2:	01 40 80    	mov.w     0x800, w1
    21f4:	10 40 80    	mov.w     0x802, w0
    21f6:	80 8f 50    	sub.w     w1, w0, [w15]
    21f8:	04 00 32    	bra       Z, 0x2202 <.L20>
    21fa:	00 40 80    	mov.w     0x800, w0
    21fc:	10 40 88    	mov.w     w0, 0x802
    21fe:	da 82 a8    	bset.b    0x2da, #0x4
    2200:	da a2 a8    	bset.b    0x2da, #0x5

00002202 <.L20>:
    2202:	50 c0 b3    	mov.b     #0x5, w0
    2204:	0e e8 b7    	mov.b     WREG, 0x80e
    2206:	a0 c0 b3    	mov.b     #0xa, w0
    2208:	0f e8 b7    	mov.b     WREG, 0x80f
    220a:	f0 c0 b3    	mov.b     #0xf, w0
    220c:	10 e8 b7    	mov.b     WREG, 0x810
    220e:	00 0f 22    	mov.w     #0x20f0, w0
    2210:	20 40 88    	mov.w     w0, 0x804
    2212:	17 68 ef    	clr.b     0x817
    2214:	40 23 22    	mov.w     #0x2234, w0
    2216:	00 40 88    	mov.w     w0, 0x800
    2218:	00 3e 29    	mov.w     #0x93e0, w0
    221a:	41 00 20    	mov.w     #0x4, w1
    221c:	06 fd 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    221e:	01 40 80    	mov.w     0x800, w1
    2220:	10 40 80    	mov.w     0x802, w0
    2222:	80 8f 50    	sub.w     w1, w0, [w15]
    2224:	05 00 32    	bra       Z, 0x2230 <.L19>
    2226:	da a2 a9    	bclr.b    0x2da, #0x5
    2228:	10 00 20    	mov.w     #0x1, w0
    222a:	01 00 20    	mov.w     #0x0, w1
    222c:	fe fc 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    222e:	da 82 a9    	bclr.b    0x2da, #0x4

00002230 <.L19>:
    2230:	00 80 fa    	ulnk      
    2232:	00 00 06    	return    

00002234 <_run>:
    2234:	00 00 fa    	lnk       #0x0
    2236:	01 40 80    	mov.w     0x800, w1
    2238:	10 40 80    	mov.w     0x802, w0
    223a:	80 8f 50    	sub.w     w1, w0, [w15]
    223c:	03 00 32    	bra       Z, 0x2244 <.L23>
    223e:	00 40 80    	mov.w     0x800, w0
    2240:	10 40 88    	mov.w     w0, 0x802
    2242:	da a2 a8    	bset.b    0x2da, #0x5

00002244 <.L23>:
    2244:	20 40 80    	mov.w     0x804, w0
    2246:	00 00 01    	call      w0
    2248:	1b c8 bf    	mov.b     0x81b, WREG
    224a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    224c:	03 00 3a    	bra       NZ, 0x2254 <.L24>
    224e:	60 2b 22    	mov.w     #0x22b6, w0
    2250:	00 40 88    	mov.w     w0, 0x800
    2252:	0d 00 37    	bra       0x226e <.L25>

00002254 <.L24>:
    2254:	1c c8 bf    	mov.b     0x81c, WREG
    2256:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2258:	03 00 3a    	bra       NZ, 0x2260 <.L26>
    225a:	e0 2d 22    	mov.w     #0x22de, w0
    225c:	00 40 88    	mov.w     w0, 0x800
    225e:	07 00 37    	bra       0x226e <.L25>

00002260 <.L26>:
    2260:	91 16 80    	mov.w     0x2d2, w1
    2262:	00 00 21    	mov.w     #0x1000, w0
    2264:	00 80 60    	and.w     w1, w0, w0
    2266:	00 00 e0    	cp0.w     w0
    2268:	02 00 3a    	bra       NZ, 0x226e <.L25>
    226a:	c0 27 22    	mov.w     #0x227c, w0
    226c:	00 40 88    	mov.w     w0, 0x800

0000226e <.L25>:
    226e:	01 40 80    	mov.w     0x800, w1
    2270:	10 40 80    	mov.w     0x802, w0
    2272:	80 8f 50    	sub.w     w1, w0, [w15]
    2274:	01 00 32    	bra       Z, 0x2278 <.L22>
    2276:	da a2 a9    	bclr.b    0x2da, #0x5

00002278 <.L22>:
    2278:	00 80 fa    	ulnk      
    227a:	00 00 06    	return    

0000227c <_solved>:
    227c:	00 00 fa    	lnk       #0x0
    227e:	01 40 80    	mov.w     0x800, w1
    2280:	10 40 80    	mov.w     0x802, w0
    2282:	80 8f 50    	sub.w     w1, w0, [w15]
    2284:	05 00 32    	bra       Z, 0x2290 <.L29>
    2286:	00 40 80    	mov.w     0x800, w0
    2288:	10 40 88    	mov.w     w0, 0x802
    228a:	10 c0 b3    	mov.b     #0x1, w0
    228c:	17 e8 b7    	mov.b     WREG, 0x817
    228e:	da 82 a8    	bset.b    0x2da, #0x4

00002290 <.L29>:
    2290:	1b c8 bf    	mov.b     0x81b, WREG
    2292:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2294:	03 00 3a    	bra       NZ, 0x229c <.L30>
    2296:	60 2b 22    	mov.w     #0x22b6, w0
    2298:	00 40 88    	mov.w     w0, 0x800
    229a:	05 00 37    	bra       0x22a6 <.L31>

0000229c <.L30>:
    229c:	1c c8 bf    	mov.b     0x81c, WREG
    229e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    22a0:	02 00 3a    	bra       NZ, 0x22a6 <.L31>
    22a2:	e0 2d 22    	mov.w     #0x22de, w0
    22a4:	00 40 88    	mov.w     w0, 0x800

000022a6 <.L31>:
    22a6:	01 40 80    	mov.w     0x800, w1
    22a8:	10 40 80    	mov.w     0x802, w0
    22aa:	80 8f 50    	sub.w     w1, w0, [w15]
    22ac:	02 00 32    	bra       Z, 0x22b2 <.L28>
    22ae:	17 68 ef    	clr.b     0x817
    22b0:	da 82 a9    	bclr.b    0x2da, #0x4

000022b2 <.L28>:
    22b2:	00 80 fa    	ulnk      
    22b4:	00 00 06    	return    

000022b6 <_end_win>:
    22b6:	00 00 fa    	lnk       #0x0
    22b8:	01 40 80    	mov.w     0x800, w1
    22ba:	10 40 80    	mov.w     0x802, w0
    22bc:	80 8f 50    	sub.w     w1, w0, [w15]
    22be:	03 00 32    	bra       Z, 0x22c6 <.L34>
    22c0:	00 40 80    	mov.w     0x800, w0
    22c2:	10 40 88    	mov.w     w0, 0x802
    22c4:	da 82 a8    	bset.b    0x2da, #0x4

000022c6 <.L34>:
    22c6:	1a c8 bf    	mov.b     0x81a, WREG
    22c8:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    22ca:	02 00 3a    	bra       NZ, 0x22d0 <.L35>
    22cc:	40 23 22    	mov.w     #0x2234, w0
    22ce:	00 40 88    	mov.w     w0, 0x800

000022d0 <.L35>:
    22d0:	01 40 80    	mov.w     0x800, w1
    22d2:	10 40 80    	mov.w     0x802, w0
    22d4:	80 8f 50    	sub.w     w1, w0, [w15]
    22d6:	01 00 32    	bra       Z, 0x22da <.L33>
    22d8:	da 82 a9    	bclr.b    0x2da, #0x4

000022da <.L33>:
    22da:	00 80 fa    	ulnk      
    22dc:	00 00 06    	return    

000022de <_end_fail>:
    22de:	00 00 fa    	lnk       #0x0
    22e0:	01 40 80    	mov.w     0x800, w1
    22e2:	10 40 80    	mov.w     0x802, w0
    22e4:	80 8f 50    	sub.w     w1, w0, [w15]
    22e6:	03 00 32    	bra       Z, 0x22ee <.L38>
    22e8:	00 40 80    	mov.w     0x800, w0
    22ea:	10 40 88    	mov.w     w0, 0x802
    22ec:	da a2 a8    	bset.b    0x2da, #0x5

000022ee <.L38>:
    22ee:	1a c8 bf    	mov.b     0x81a, WREG
    22f0:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    22f2:	02 00 3a    	bra       NZ, 0x22f8 <.L39>
    22f4:	40 23 22    	mov.w     #0x2234, w0
    22f6:	00 40 88    	mov.w     w0, 0x800

000022f8 <.L39>:
    22f8:	01 40 80    	mov.w     0x800, w1
    22fa:	10 40 80    	mov.w     0x802, w0
    22fc:	80 8f 50    	sub.w     w1, w0, [w15]
    22fe:	01 00 32    	bra       Z, 0x2302 <.L37>
    2300:	da a2 a9    	bclr.b    0x2da, #0x5

00002302 <.L37>:
    2302:	00 80 fa    	ulnk      
    2304:	00 00 06    	return    

00002306 <_ledoff>:
    2306:	00 00 fa    	lnk       #0x0
    2308:	dc e2 a9    	bclr.b    0x2dc, #0x7
    230a:	10 00 20    	mov.w     #0x1, w0
    230c:	01 00 20    	mov.w     #0x0, w1
    230e:	8d fc 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2310:	ec 02 a9    	bclr.b    0x2ec, #0x0
    2312:	10 00 20    	mov.w     #0x1, w0
    2314:	01 00 20    	mov.w     #0x0, w1
    2316:	89 fc 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2318:	ec 22 a9    	bclr.b    0x2ec, #0x1
    231a:	10 00 20    	mov.w     #0x1, w0
    231c:	01 00 20    	mov.w     #0x0, w1
    231e:	85 fc 07    	rcall     0x1c2a <_delay_by_nop> <.L0> <.LFB0> <.LFE16> <.Letext0> <.Ltext0>
    2320:	00 80 fa    	ulnk      
    2322:	00 00 06    	return    

00002324 <_dispNumber>:
    2324:	08 00 fa    	lnk       #0x8
    2326:	30 07 98    	mov.w     w0, [w14+6]
    2328:	3e 00 90    	mov.w     [w14+6], w0
    232a:	c3 00 de    	lsr.w     w0, #0x3, w1
    232c:	50 0c 22    	mov.w     #0x20c5, w0
    232e:	00 08 b8    	mul.uu    w1, w0, w0
    2330:	44 08 de    	lsr.w     w1, #0x4, w0
    2332:	00 4f 78    	mov.b     w0, [w14]
    2334:	1e 40 78    	mov.b     [w14], w0
    2336:	78 00 b9    	mul.su    w0, #0x18, w0
    2338:	00 00 78    	mov.w     w0, w0
    233a:	80 40 78    	mov.b     w0, w1
    233c:	3e 00 90    	mov.w     [w14+6], w0
    233e:	00 40 78    	mov.b     w0, w0
    2340:	00 c0 40    	add.b     w1, w0, w0
    2342:	10 47 98    	mov.b     w0, [w14+1]
    2344:	1e 40 90    	mov.b     [w14+1], w0
    2346:	00 80 fb    	ze        w0, w0
    2348:	c2 00 de    	lsr.w     w0, #0x2, w1
    234a:	b0 47 21    	mov.w     #0x147b, w0
    234c:	00 08 b8    	mul.uu    w1, w0, w0
    234e:	01 00 d1    	lsr.w     w1, w0
    2350:	20 47 98    	mov.b     w0, [w14+2]
    2352:	ae 40 90    	mov.b     [w14+2], w1
    2354:	c0 09 20    	mov.w     #0x9c, w0
    2356:	00 88 b9    	mul.ss    w1, w0, w0
    2358:	00 00 78    	mov.w     w0, w0
    235a:	00 40 78    	mov.b     w0, w0
    235c:	9e 40 90    	mov.b     [w14+1], w1
    235e:	00 c0 40    	add.b     w1, w0, w0
    2360:	10 47 98    	mov.b     w0, [w14+1]
    2362:	1e 40 90    	mov.b     [w14+1], w0
    2364:	80 80 fb    	ze        w0, w1
    2366:	d0 cc 2c    	mov.w     #0xcccd, w0
    2368:	00 08 b8    	mul.uu    w1, w0, w0
    236a:	43 08 de    	lsr.w     w1, #0x3, w0
    236c:	30 47 98    	mov.b     w0, [w14+3]
    236e:	be 40 90    	mov.b     [w14+3], w1
    2370:	60 0f 20    	mov.w     #0xf6, w0
    2372:	00 88 b9    	mul.ss    w1, w0, w0
    2374:	00 00 78    	mov.w     w0, w0
    2376:	00 40 78    	mov.b     w0, w0
    2378:	9e 40 90    	mov.b     [w14+1], w1
    237a:	00 c0 40    	add.b     w1, w0, w0
    237c:	10 47 98    	mov.b     w0, [w14+1]
    237e:	9e 40 90    	mov.b     [w14+1], w1
    2380:	41 47 98    	mov.b     w1, [w14+4]
    2382:	13 c0 b3    	mov.b     #0x1, w3
    2384:	12 c1 b3    	mov.b     #0x11, w2
    2386:	80 40 eb    	clr.b     w1
    2388:	60 03 21    	mov.w     #0x1036, w0
    238a:	ee fa 07    	rcall     0x1968 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    238c:	13 c0 b3    	mov.b     #0x1, w3
    238e:	12 c1 b3    	mov.b     #0x11, w2
    2390:	41 c0 b3    	mov.b     #0x4, w1
    2392:	60 03 21    	mov.w     #0x1036, w0
    2394:	e9 fa 07    	rcall     0x1968 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    2396:	80 41 eb    	clr.b     w3
    2398:	3e 41 90    	mov.b     [w14+3], w2
    239a:	11 c0 b3    	mov.b     #0x1, w1
    239c:	60 03 21    	mov.w     #0x1036, w0
    239e:	e4 fa 07    	rcall     0x1968 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    23a0:	80 41 eb    	clr.b     w3
    23a2:	4e 41 90    	mov.b     [w14+4], w2
    23a4:	31 c0 b3    	mov.b     #0x3, w1
    23a6:	60 03 21    	mov.w     #0x1036, w0
    23a8:	df fa 07    	rcall     0x1968 <_sevseg_writeDigitNum> <.LFB11> <.LFE10>
    23aa:	60 03 21    	mov.w     #0x1036, w0
    23ac:	ce f9 07    	rcall     0x174a <_led_writeDisplay> <.LFB3> <.LFE2>
    23ae:	00 80 fa    	ulnk      
    23b0:	00 00 06    	return    

000023b2 <_init_ajuart>:
    23b2:	04 00 fa    	lnk       #0x4
    23b4:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    23b6:	f2 c2 a8    	bset.b    0x2f2, #0x6
    23b8:	f0 e2 a8    	bset.b    0x2f0, #0x7
    23ba:	00 6c 20    	mov.w     #0x6c0, w0
    23bc:	00 0f 78    	mov.w     w0, [w14]
    23be:	00 68 20    	mov.w     #0x680, w0
    23c0:	10 07 98    	mov.w     w0, [w14+2]
    23c2:	11 3a 80    	mov.w     0x742, w1
    23c4:	f0 0b 20    	mov.w     #0xbf, w0
    23c6:	00 81 60    	and.w     w1, w0, w2
    23c8:	60 04 20    	mov.w     #0x46, w0
    23ca:	71 05 20    	mov.w     #0x57, w1
    23cc:	23 74 20    	mov.w     #0x742, w3
    23ce:	80 49 78    	mov.b     w0, [w3]
    23d0:	81 49 78    	mov.b     w1, [w3]
    23d2:	82 49 78    	mov.b     w2, [w3]
    23d4:	1e 00 90    	mov.w     [w14+2], w0
    23d6:	40 02 b0    	add.w     #0x24, w0
    23d8:	a1 c1 b3    	mov.b     #0x1a, w1
    23da:	01 48 78    	mov.b     w1, [w0]
    23dc:	9e 00 78    	mov.w     [w14], w1
    23de:	75 80 40    	add.w     w1, #0x15, w0
    23e0:	31 c0 b3    	mov.b     #0x3, w1
    23e2:	01 48 78    	mov.b     w1, [w0]
    23e4:	10 3a 80    	mov.w     0x742, w0
    23e6:	00 01 78    	mov.w     w0, w2
    23e8:	02 60 a0    	bset.w    w2, #0x6
    23ea:	60 04 20    	mov.w     #0x46, w0
    23ec:	71 05 20    	mov.w     #0x57, w1
    23ee:	23 74 20    	mov.w     #0x742, w3
    23f0:	80 49 78    	mov.b     w0, [w3]
    23f2:	81 49 78    	mov.b     w1, [w3]
    23f4:	82 49 78    	mov.b     w2, [w3]
    23f6:	80 00 20    	mov.w     #0x8, w0
    23f8:	00 11 88    	mov.w     w0, 0x220
    23fa:	20 02 20    	mov.w     #0x22, w0
    23fc:	40 11 88    	mov.w     w0, 0x228
    23fe:	60 83 20    	mov.w     #0x836, w0
    2400:	10 41 88    	mov.w     w0, 0x822
    2402:	00 40 20    	mov.w     #0x400, w0
    2404:	20 41 88    	mov.w     w0, 0x824
    2406:	00 00 eb    	clr.w     w0
    2408:	30 41 88    	mov.w     w0, 0x826
    240a:	00 00 eb    	clr.w     w0
    240c:	40 41 88    	mov.w     w0, 0x828
    240e:	00 00 eb    	clr.w     w0
    2410:	50 41 88    	mov.w     w0, 0x82a
    2412:	00 30 20    	mov.w     #0x300, w0
    2414:	00 41 88    	mov.w     w0, 0x820
    2416:	60 c3 20    	mov.w     #0xc36, w0
    2418:	60 41 88    	mov.w     w0, 0x82c
    241a:	00 40 20    	mov.w     #0x400, w0
    241c:	70 41 88    	mov.w     w0, 0x82e
    241e:	00 00 eb    	clr.w     w0
    2420:	80 41 88    	mov.w     w0, 0x830
    2422:	00 00 eb    	clr.w     w0
    2424:	90 41 88    	mov.w     w0, 0x832
    2426:	00 00 eb    	clr.w     w0
    2428:	a0 41 88    	mov.w     w0, 0x834
    242a:	23 e2 a9    	bclr.b    0x223, #0x7
    242c:	23 a2 a8    	bset.b    0x223, #0x5
    242e:	85 80 a9    	bclr.b    0x85, #0x4
    2430:	95 80 a8    	bset.b    0x95, #0x4
    2432:	85 60 a9    	bclr.b    0x85, #0x3
    2434:	95 60 a8    	bset.b    0x95, #0x3
    2436:	21 e2 a8    	bset.b    0x221, #0x7
    2438:	23 42 a8    	bset.b    0x223, #0x2
    243a:	00 80 fa    	ulnk      
    243c:	00 00 06    	return    

0000243e <_U1_in_waiting>:
    243e:	00 00 fa    	lnk       #0x0
    2440:	a0 41 80    	mov.w     0x834, w0
    2442:	00 80 fa    	ulnk      
    2444:	00 00 06    	return    

00002446 <_U1_flush_tx_buffer>:
    2446:	00 00 fa    	lnk       #0x0
    2448:	11 11 80    	mov.w     0x222, w1
    244a:	00 40 20    	mov.w     #0x400, w0
    244c:	00 80 60    	and.w     w1, w0, w0
    244e:	00 00 e0    	cp0.w     w0
    2450:	01 00 3a    	bra       NZ, 0x2454 <.L15>
    2452:	23 42 a8    	bset.b    0x223, #0x2

00002454 <.L15>:
    2454:	00 80 fa    	ulnk      
    2456:	00 00 06    	return    

00002458 <_U1_putc>:
    2458:	02 00 fa    	lnk       #0x2
    245a:	00 4f 78    	mov.b     w0, [w14]
    245c:	00 00 00    	nop       

0000245e <.L18>:
    245e:	51 41 80    	mov.w     0x82a, w1
    2460:	20 41 80    	mov.w     0x824, w0
    2462:	80 8f 50    	sub.w     w1, w0, [w15]
    2464:	fc ff 32    	bra       Z, 0x245e <.L18>
    2466:	ff 3f fc    	disi      #0x3fff
    2468:	11 41 80    	mov.w     0x822, w1
    246a:	40 41 80    	mov.w     0x828, w0
    246c:	00 80 40    	add.w     w1, w0, w0
    246e:	1e 48 78    	mov.b     [w14], [w0]
    2470:	40 41 80    	mov.w     0x828, w0
    2472:	00 00 e8    	inc.w     w0, w0
    2474:	40 41 88    	mov.w     w0, 0x828
    2476:	41 41 80    	mov.w     0x828, w1
    2478:	20 41 80    	mov.w     0x824, w0
    247a:	80 8f 50    	sub.w     w1, w0, [w15]
    247c:	02 00 3a    	bra       NZ, 0x2482 <.L19>
    247e:	00 00 eb    	clr.w     w0
    2480:	40 41 88    	mov.w     w0, 0x828

00002482 <.L19>:
    2482:	50 41 80    	mov.w     0x82a, w0
    2484:	00 00 e8    	inc.w     w0, w0
    2486:	50 41 88    	mov.w     w0, 0x82a
    2488:	52 20 ef    	clr.w     0x52
    248a:	51 41 80    	mov.w     0x82a, w1
    248c:	00 41 80    	mov.w     0x820, w0
    248e:	80 8f 50    	sub.w     w1, w0, [w15]
    2490:	01 00 39    	bra       NC, 0x2494 <.L17>
    2492:	23 42 a8    	bset.b    0x223, #0x2

00002494 <.L17>:
    2494:	00 80 fa    	ulnk      
    2496:	00 00 06    	return    

00002498 <_U1_getc>:
    2498:	02 00 fa    	lnk       #0x2
    249a:	00 00 00    	nop       

0000249c <.L22>:
    249c:	a0 41 80    	mov.w     0x834, w0
    249e:	00 00 e0    	cp0.w     w0
    24a0:	fd ff 32    	bra       Z, 0x249c <.L22>
    24a2:	ff 3f fc    	disi      #0x3fff
    24a4:	61 41 80    	mov.w     0x82c, w1
    24a6:	80 41 80    	mov.w     0x830, w0
    24a8:	00 80 40    	add.w     w1, w0, w0
    24aa:	10 4f 78    	mov.b     [w0], [w14]
    24ac:	80 41 80    	mov.w     0x830, w0
    24ae:	00 00 e8    	inc.w     w0, w0
    24b0:	80 41 88    	mov.w     w0, 0x830
    24b2:	81 41 80    	mov.w     0x830, w1
    24b4:	70 41 80    	mov.w     0x82e, w0
    24b6:	80 8f 50    	sub.w     w1, w0, [w15]
    24b8:	02 00 3a    	bra       NZ, 0x24be <.L23>
    24ba:	00 00 eb    	clr.w     w0
    24bc:	80 41 88    	mov.w     w0, 0x830

000024be <.L23>:
    24be:	a0 41 80    	mov.w     0x834, w0
    24c0:	00 00 e9    	dec.w     w0, w0
    24c2:	a0 41 88    	mov.w     w0, 0x834
    24c4:	52 20 ef    	clr.w     0x52
    24c6:	1e 40 78    	mov.b     [w14], w0
    24c8:	00 80 fa    	ulnk      
    24ca:	00 00 06    	return    

000024cc <_U1_puts>:
    24cc:	02 00 fa    	lnk       #0x2
    24ce:	00 0f 78    	mov.w     w0, [w14]
    24d0:	04 00 37    	bra       0x24da <.L25>

000024d2 <.L26>:
    24d2:	1e 00 78    	mov.w     [w14], w0
    24d4:	10 40 78    	mov.b     [w0], w0
    24d6:	1e 0f e8    	inc.w     [w14], [w14]
    24d8:	bf ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>

000024da <.L25>:
    24da:	1e 00 78    	mov.w     [w14], w0
    24dc:	10 40 78    	mov.b     [w0], w0
    24de:	00 04 e0    	cp0.b     w0
    24e0:	f8 ff 3a    	bra       NZ, 0x24d2 <.L26>
    24e2:	b1 ff 07    	rcall     0x2446 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    24e4:	00 80 fa    	ulnk      
    24e6:	00 00 06    	return    

000024e8 <_U1_gets>:
    24e8:	04 00 fa    	lnk       #0x4
    24ea:	00 0f 78    	mov.w     w0, [w14]
    24ec:	11 07 98    	mov.w     w1, [w14+2]
    24ee:	1e 00 90    	mov.w     [w14+2], w0
    24f0:	00 00 e0    	cp0.w     w0
    24f2:	1a 00 32    	bra       Z, 0x2528 <.L32>
    24f4:	1e 00 90    	mov.w     [w14+2], w0
    24f6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    24f8:	04 00 3a    	bra       NZ, 0x2502 <.L30>
    24fa:	1e 00 78    	mov.w     [w14], w0
    24fc:	80 40 eb    	clr.b     w1
    24fe:	01 48 78    	mov.b     w1, [w0]
    2500:	14 00 37    	bra       0x252a <.L27>

00002502 <.L30>:
    2502:	ca ff 07    	rcall     0x2498 <_U1_getc> <.LFB6> <.LFE5>
    2504:	9e 00 78    	mov.w     [w14], w1
    2506:	80 48 78    	mov.b     w0, [w1]
    2508:	1e 00 78    	mov.w     [w14], w0
    250a:	10 40 78    	mov.b     [w0], w0
    250c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    250e:	08 00 32    	bra       Z, 0x2520 <.L31>
    2510:	1e 00 90    	mov.w     [w14+2], w0
    2512:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2514:	05 00 32    	bra       Z, 0x2520 <.L31>
    2516:	1e 0f e8    	inc.w     [w14], [w14]
    2518:	1e 00 90    	mov.w     [w14+2], w0
    251a:	00 00 e9    	dec.w     w0, w0
    251c:	10 07 98    	mov.w     w0, [w14+2]
    251e:	f1 ff 37    	bra       0x2502 <.L30>

00002520 <.L31>:
    2520:	1e 00 78    	mov.w     [w14], w0
    2522:	80 40 eb    	clr.b     w1
    2524:	01 48 78    	mov.b     w1, [w0]
    2526:	01 00 37    	bra       0x252a <.L27>

00002528 <.L32>:
    2528:	00 00 00    	nop       

0000252a <.L27>:
    252a:	00 80 fa    	ulnk      
    252c:	00 00 06    	return    

0000252e <_U1_gets_term>:
    252e:	08 00 fa    	lnk       #0x8
    2530:	20 07 98    	mov.w     w0, [w14+4]
    }
    *str = '\0';
}

void U1_gets_term(uint8_t *str, uint16_t len) {
    2532:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    2534:	3e 00 90    	mov.w     [w14+6], w0
    2536:	00 00 e0    	cp0.w     w0
    2538:	6f 00 32    	bra       Z, 0x2618 <.L46>
        return;

    if (len == 1) {
    253a:	3e 00 90    	mov.w     [w14+6], w0
    253c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    253e:	04 00 3a    	bra       NZ, 0x2548 <.L36>
        *str = '\0';
    2540:	2e 00 90    	mov.w     [w14+4], w0
    2542:	80 40 eb    	clr.b     w1
    2544:	01 48 78    	mov.b     w1, [w0]
        return;
    2546:	69 00 37    	bra       0x261a <.L33>

00002548 <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    2548:	b0 c1 b3    	mov.b     #0x1b, w0
    254a:	86 ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    254c:	70 c3 b3    	mov.b     #0x37, w0
    254e:	84 ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    2550:	7a ff 07    	rcall     0x2446 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    2552:	ae 00 90    	mov.w     [w14+4], w1
    2554:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    2556:	be 00 90    	mov.w     [w14+6], w1
    2558:	01 0f 78    	mov.w     w1, [w14]
    255a:	03 00 37    	bra       0x2562 <.L45>

0000255c <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    255c:	00 00 00    	nop       
    255e:	01 00 37    	bra       0x2562 <.L45>

00002560 <.L48>:
    2560:	00 00 00    	nop       

00002562 <.L45>:
    2562:	9a ff 07    	rcall     0x2498 <_U1_getc> <.LFB6> <.LFE5>
    2564:	ae 00 90    	mov.w     [w14+4], w1
    2566:	80 48 78    	mov.b     w0, [w1]
    2568:	2e 00 90    	mov.w     [w14+4], w0
    256a:	10 40 78    	mov.b     [w0], w0
    256c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    256e:	09 00 3a    	bra       NZ, 0x2582 <.L37>
    *str = '\0';                            // terminarte the string with null
    2570:	2e 00 90    	mov.w     [w14+4], w0
    2572:	80 40 eb    	clr.b     w1
    2574:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    2576:	a0 c0 b3    	mov.b     #0xa, w0
    2578:	6f ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    257a:	d0 c0 b3    	mov.b     #0xd, w0
    257c:	6d ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    257e:	63 ff 07    	rcall     0x2446 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    2580:	4c 00 37    	bra       0x261a <.L33>

00002582 <.L37>:
    2582:	2e 00 90    	mov.w     [w14+4], w0
    2584:	10 40 78    	mov.b     [w0], w0
    2586:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2588:	10 00 3a    	bra       NZ, 0x25aa <.L38>
    258a:	b0 c1 b3    	mov.b     #0x1b, w0
    258c:	65 ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    258e:	80 c3 b3    	mov.b     #0x38, w0
    2590:	63 ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    2592:	b0 c1 b3    	mov.b     #0x1b, w0
    2594:	61 ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    2596:	b0 c5 b3    	mov.b     #0x5b, w0
    2598:	5f ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    259a:	b0 c4 b3    	mov.b     #0x4b, w0
    259c:	5d ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    259e:	53 ff 07    	rcall     0x2446 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    25a0:	9e 00 90    	mov.w     [w14+2], w1
    25a2:	21 07 98    	mov.w     w1, [w14+4]
    25a4:	be 00 90    	mov.w     [w14+6], w1
    25a6:	01 0f 78    	mov.w     w1, [w14]
    25a8:	36 00 37    	bra       0x2616 <.L39>

000025aa <.L38>:
    25aa:	2e 00 90    	mov.w     [w14+4], w0
    25ac:	10 40 78    	mov.b     [w0], w0
    25ae:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    25b0:	05 00 32    	bra       Z, 0x25bc <.L40>
    25b2:	2e 00 90    	mov.w     [w14+4], w0
    25b4:	90 40 78    	mov.b     [w0], w1
    25b6:	f0 c7 b3    	mov.b     #0x7f, w0
    25b8:	80 cf 50    	sub.b     w1, w0, [w15]
    25ba:	14 00 3a    	bra       NZ, 0x25e4 <.L41>

000025bc <.L40>:
    25bc:	ae 00 90    	mov.w     [w14+4], w1
    25be:	1e 00 90    	mov.w     [w14+2], w0
    25c0:	80 8f 50    	sub.w     w1, w0, [w15]
    25c2:	0c 00 36    	bra       LEU, 0x25dc <.L42>
    25c4:	80 c0 b3    	mov.b     #0x8, w0
    25c6:	48 ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    25c8:	00 c2 b3    	mov.b     #0x20, w0
    25ca:	46 ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    25cc:	80 c0 b3    	mov.b     #0x8, w0
    25ce:	44 ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    25d0:	3a ff 07    	rcall     0x2446 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    25d2:	2e 00 90    	mov.w     [w14+4], w0
    25d4:	00 00 e9    	dec.w     w0, w0
    25d6:	20 07 98    	mov.w     w0, [w14+4]
    25d8:	1e 0f e8    	inc.w     [w14], [w14]
    25da:	03 00 37    	bra       0x25e2 <.L43>

000025dc <.L42>:
    25dc:	70 c0 b3    	mov.b     #0x7, w0
    25de:	3c ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    25e0:	32 ff 07    	rcall     0x2446 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

000025e2 <.L43>:
    25e2:	19 00 37    	bra       0x2616 <.L39>

000025e4 <.L41>:
    25e4:	1e 00 78    	mov.w     [w14], w0
    25e6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25e8:	04 00 3a    	bra       NZ, 0x25f2 <.L44>
    25ea:	70 c0 b3    	mov.b     #0x7, w0
    25ec:	35 ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    25ee:	2b ff 07    	rcall     0x2446 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    25f0:	12 00 37    	bra       0x2616 <.L39>

000025f2 <.L44>:
    25f2:	2e 00 90    	mov.w     [w14+4], w0
    25f4:	10 40 78    	mov.b     [w0], w0
    25f6:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    25f8:	b1 ff 36    	bra       LEU, 0x255c <.L47>
    25fa:	2e 00 90    	mov.w     [w14+4], w0
    25fc:	90 40 78    	mov.b     [w0], w1
    25fe:	e0 c7 b3    	mov.b     #0x7e, w0
    2600:	80 cf 50    	sub.b     w1, w0, [w15]
    2602:	ae ff 3e    	bra       GTU, 0x2560 <.L48>
    2604:	2e 00 90    	mov.w     [w14+4], w0
    2606:	10 40 78    	mov.b     [w0], w0
    2608:	27 ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    260a:	1d ff 07    	rcall     0x2446 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    260c:	2e 00 90    	mov.w     [w14+4], w0
    260e:	00 00 e8    	inc.w     w0, w0
    2610:	20 07 98    	mov.w     w0, [w14+4]
    2612:	1e 0f e9    	dec.w     [w14], [w14]
    2614:	a6 ff 37    	bra       0x2562 <.L45>

00002616 <.L39>:
    2616:	a5 ff 37    	bra       0x2562 <.L45>

00002618 <.L46>:
    2618:	00 00 00    	nop       

0000261a <.L33>:
}
    261a:	00 80 fa    	ulnk      
    261c:	00 00 06    	return    

0000261e <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    261e:	08 00 fa    	lnk       #0x8
    2620:	10 07 98    	mov.w     w0, [w14+2]
    2622:	21 07 98    	mov.w     w1, [w14+4]
    2624:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    2626:	1e 00 90    	mov.w     [w14+2], w0
    2628:	60 00 40    	add.w     w0, #0x0, w0
    262a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    262c:	10 00 3e    	bra       GTU, 0x264e <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    262e:	00 00 eb    	clr.w     w0
    2630:	00 0f 78    	mov.w     w0, [w14]
    2632:	07 00 37    	bra       0x2642 <.L52>

00002634 <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    2634:	2e 00 90    	mov.w     [w14+4], w0
    2636:	10 40 78    	mov.b     [w0], w0
    2638:	ae 00 90    	mov.w     [w14+4], w1
    263a:	81 00 e8    	inc.w     w1, w1
    263c:	21 07 98    	mov.w     w1, [w14+4]
    263e:	0c ff 07    	rcall     0x2458 <_U1_putc> <.LFB5> <.LFE4>
    2640:	1e 0f e8    	inc.w     [w14], [w14]

00002642 <.L52>:
    2642:	9e 00 78    	mov.w     [w14], w1
    2644:	3e 00 90    	mov.w     [w14+6], w0
    2646:	80 8f 50    	sub.w     w1, w0, [w15]
    2648:	f5 ff 39    	bra       NC, 0x2634 <.L53>
            U1_flush_tx_buffer();
    264a:	fd fe 07    	rcall     0x2446 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    264c:	01 00 37    	bra       0x2650 <.L54>

0000264e <.L55>:
        default:
            break;
    264e:	00 00 00    	nop       

00002650 <.L54>:
    }
    return len;
    2650:	3e 00 90    	mov.w     [w14+6], w0
}
    2652:	00 80 fa    	ulnk      
    2654:	00 00 06    	return    
Disassembly of section .isr.text:

00002656 <__SI2C2Interrupt>:
    2656:	80 9f be    	mov.d     w0, [w15++]
    2658:	32 00 f8    	push      0x32
    265a:	34 00 f8    	push      0x34
    265c:	10 00 20    	mov.w     #0x1, w0
    265e:	a0 01 88    	mov.w     w0, 0x34
    2660:	00 20 20    	mov.w     #0x200, w0
    2662:	90 01 88    	mov.w     w0, 0x32
    2664:	02 00 fa    	lnk       #0x2
    2666:	8a 20 a9    	bclr.b    0x8a, #0x1
    2668:	f0 40 80    	mov.w     0x81e, w0
    266a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    266c:	23 00 32    	bra       Z, 0x26b4 <.L4>
    266e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2670:	03 00 39    	bra       NC, 0x2678 <.L3>
    2672:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2674:	50 00 32    	bra       Z, 0x2716 <.L5>
    2676:	51 00 37    	bra       0x271a <.L18>

00002678 <.L3>:
    2678:	80 10 80    	mov.w     0x210, w0
    267a:	00 4f 78    	mov.b     w0, [w14]
    267c:	c0 10 80    	mov.w     0x218, w0
    267e:	64 00 60    	and.w     w0, #0x4, w0
    2680:	00 00 e0    	cp0.w     w0
    2682:	15 00 32    	bra       Z, 0x26ae <.L6>
    2684:	17 c8 bf    	mov.b     0x817, WREG
    2686:	00 80 fb    	ze        w0, w0
    2688:	47 00 dd    	sl.w      w0, #0x7, w0
    268a:	80 40 78    	mov.b     w0, w1
    268c:	18 c8 bf    	mov.b     0x818, WREG
    268e:	00 80 fb    	ze        w0, w0
    2690:	67 00 60    	and.w     w0, #0x7, w0
    2692:	44 00 dd    	sl.w      w0, #0x4, w0
    2694:	00 40 78    	mov.b     w0, w0
    2696:	80 c0 70    	ior.b     w1, w0, w1
    2698:	19 c8 bf    	mov.b     0x819, WREG
    269a:	6f 40 60    	and.b     w0, #0xf, w0
    269c:	00 c0 70    	ior.b     w1, w0, w0
    269e:	14 e8 b7    	mov.b     WREG, 0x814
    26a0:	14 c8 bf    	mov.b     0x814, WREG
    26a2:	00 80 fb    	ze        w0, w0
    26a4:	90 10 88    	mov.w     w0, 0x212
    26a6:	17 82 a8    	bset.b    0x217, #0x4
    26a8:	20 00 20    	mov.w     #0x2, w0
    26aa:	f0 40 88    	mov.w     w0, 0x81e
    26ac:	37 00 37    	bra       0x271c <.L1>

000026ae <.L6>:
    26ae:	10 00 20    	mov.w     #0x1, w0
    26b0:	f0 40 88    	mov.w     w0, 0x81e
    26b2:	34 00 37    	bra       0x271c <.L1>

000026b4 <.L4>:
    26b4:	80 10 80    	mov.w     0x210, w0
    26b6:	00 40 78    	mov.b     w0, w0
    26b8:	15 e8 b7    	mov.b     WREG, 0x815
    26ba:	15 c8 bf    	mov.b     0x815, WREG
    26bc:	00 80 fb    	ze        w0, w0
    26be:	45 00 de    	lsr.w     w0, #0x5, w0
    26c0:	00 40 78    	mov.b     w0, w0
    26c2:	00 80 fb    	ze        w0, w0
    26c4:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    26c6:	0f 00 32    	bra       Z, 0x26e6 <.L12>
    26c8:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    26ca:	05 00 3c    	bra       GT, 0x26d6 <.L16>
    26cc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    26ce:	16 00 32    	bra       Z, 0x26fc <.L10>
    26d0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    26d2:	17 00 32    	bra       Z, 0x2702 <.L11>
    26d4:	19 00 37    	bra       0x2708 <.L9>

000026d6 <.L16>:
    26d6:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    26d8:	0a 00 32    	bra       Z, 0x26ee <.L14>
    26da:	11 10 20    	mov.w     #0x101, w1
    26dc:	81 0f 50    	sub.w     w0, w1, [w15]
    26de:	18 00 32    	bra       Z, 0x2710 <.L19>
    26e0:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    26e2:	09 00 32    	bra       Z, 0x26f6 <.L13>
    26e4:	11 00 37    	bra       0x2708 <.L9>

000026e6 <.L12>:
    26e6:	15 c8 bf    	mov.b     0x815, WREG
    26e8:	7f 40 60    	and.b     w0, #0x1f, w0
    26ea:	16 e8 b7    	mov.b     WREG, 0x816
    26ec:	12 00 37    	bra       0x2712 <.L17>

000026ee <.L14>:
    26ee:	15 c8 bf    	mov.b     0x815, WREG
    26f0:	7f 40 60    	and.b     w0, #0x1f, w0
    26f2:	18 e8 b7    	mov.b     WREG, 0x818
    26f4:	0e 00 37    	bra       0x2712 <.L17>

000026f6 <.L13>:
    26f6:	10 c0 b3    	mov.b     #0x1, w0
    26f8:	1a e8 b7    	mov.b     WREG, 0x81a
    26fa:	0b 00 37    	bra       0x2712 <.L17>

000026fc <.L10>:
    26fc:	10 c0 b3    	mov.b     #0x1, w0
    26fe:	1b e8 b7    	mov.b     WREG, 0x81b
    2700:	08 00 37    	bra       0x2712 <.L17>

00002702 <.L11>:
    2702:	10 c0 b3    	mov.b     #0x1, w0
    2704:	1c e8 b7    	mov.b     WREG, 0x81c
    2706:	05 00 37    	bra       0x2712 <.L17>

00002708 <.L9>:
    2708:	19 c8 bf    	mov.b     0x819, WREG
    270a:	00 40 e8    	inc.b     w0, w0
    270c:	19 e8 b7    	mov.b     WREG, 0x819
    270e:	01 00 37    	bra       0x2712 <.L17>

00002710 <.L19>:
    2710:	00 00 00    	nop       

00002712 <.L17>:
    2712:	1e 28 ef    	clr.w     0x81e
    2714:	03 00 37    	bra       0x271c <.L1>

00002716 <.L5>:
    2716:	1e 28 ef    	clr.w     0x81e
    2718:	01 00 37    	bra       0x271c <.L1>

0000271a <.L18>:
    271a:	1e 28 ef    	clr.w     0x81e

0000271c <.L1>:
    271c:	00 80 fa    	ulnk      
    271e:	34 00 f9    	pop       0x34
    2720:	32 00 f9    	pop       0x32
    2722:	4f 00 be    	mov.d     [--w15], w0
    2724:	00 40 06    	retfie    

00002726 <__U1TXInterrupt>:
    2726:	80 9f be    	mov.d     w0, [w15++]
    2728:	32 00 f8    	push      0x32
    272a:	34 00 f8    	push      0x34
    272c:	10 00 20    	mov.w     #0x1, w0
    272e:	a0 01 88    	mov.w     w0, 0x34
    2730:	00 20 20    	mov.w     #0x200, w0
    2732:	90 01 88    	mov.w     w0, 0x32
    2734:	02 00 fa    	lnk       #0x2
    2736:	85 80 a9    	bclr.b    0x85, #0x4
    2738:	50 41 80    	mov.w     0x82a, w0
    273a:	00 00 e0    	cp0.w     w0
    273c:	17 00 3a    	bra       NZ, 0x276c <.L8>
    273e:	23 42 a9    	bclr.b    0x223, #0x2
    2740:	16 00 37    	bra       0x276e <.L4>

00002742 <.L7>:
    2742:	ff 3f fc    	disi      #0x3fff
    2744:	11 41 80    	mov.w     0x822, w1
    2746:	30 41 80    	mov.w     0x826, w0
    2748:	00 80 40    	add.w     w1, w0, w0
    274a:	10 4f 78    	mov.b     [w0], [w14]
    274c:	30 41 80    	mov.w     0x826, w0
    274e:	00 00 e8    	inc.w     w0, w0
    2750:	30 41 88    	mov.w     w0, 0x826
    2752:	31 41 80    	mov.w     0x826, w1
    2754:	20 41 80    	mov.w     0x824, w0
    2756:	80 8f 50    	sub.w     w1, w0, [w15]
    2758:	02 00 3a    	bra       NZ, 0x275e <.L5>
    275a:	00 00 eb    	clr.w     w0
    275c:	30 41 88    	mov.w     w0, 0x826

0000275e <.L5>:
    275e:	50 41 80    	mov.w     0x82a, w0
    2760:	00 00 e9    	dec.w     w0, w0
    2762:	50 41 88    	mov.w     w0, 0x82a
    2764:	52 20 ef    	clr.w     0x52
    2766:	1e 80 fb    	ze        [w14], w0
    2768:	20 11 88    	mov.w     w0, 0x224
    276a:	01 00 37    	bra       0x276e <.L4>

0000276c <.L8>:
    276c:	00 00 00    	nop       

0000276e <.L4>:
    276e:	11 11 80    	mov.w     0x222, w1
    2770:	00 20 20    	mov.w     #0x200, w0
    2772:	00 80 60    	and.w     w1, w0, w0
    2774:	00 00 e0    	cp0.w     w0
    2776:	03 00 3a    	bra       NZ, 0x277e <.L2>
    2778:	50 41 80    	mov.w     0x82a, w0
    277a:	00 00 e0    	cp0.w     w0
    277c:	e2 ff 3a    	bra       NZ, 0x2742 <.L7>

0000277e <.L2>:
    277e:	00 80 fa    	ulnk      
    2780:	34 00 f9    	pop       0x34
    2782:	32 00 f9    	pop       0x32
    2784:	4f 00 be    	mov.d     [--w15], w0
    2786:	00 40 06    	retfie    

00002788 <__U1RXInterrupt>:
    2788:	80 9f be    	mov.d     w0, [w15++]
    278a:	32 00 f8    	push      0x32
    278c:	34 00 f8    	push      0x34
    278e:	10 00 20    	mov.w     #0x1, w0
    2790:	a0 01 88    	mov.w     w0, 0x34
    2792:	00 20 20    	mov.w     #0x200, w0
    2794:	90 01 88    	mov.w     w0, 0x32
    2796:	00 00 fa    	lnk       #0x0
    2798:	85 60 a9    	bclr.b    0x85, #0x3
    279a:	14 00 37    	bra       0x27c4 <.L10>

0000279c <.L13>:
    279c:	ff 3f fc    	disi      #0x3fff
    279e:	61 41 80    	mov.w     0x82c, w1
    27a0:	90 41 80    	mov.w     0x832, w0
    27a2:	00 80 40    	add.w     w1, w0, w0
    27a4:	31 11 80    	mov.w     0x226, w1
    27a6:	81 40 78    	mov.b     w1, w1
    27a8:	01 48 78    	mov.b     w1, [w0]
    27aa:	90 41 80    	mov.w     0x832, w0
    27ac:	00 00 e8    	inc.w     w0, w0
    27ae:	90 41 88    	mov.w     w0, 0x832
    27b0:	91 41 80    	mov.w     0x832, w1
    27b2:	70 41 80    	mov.w     0x82e, w0
    27b4:	80 8f 50    	sub.w     w1, w0, [w15]
    27b6:	02 00 3a    	bra       NZ, 0x27bc <.L11>
    27b8:	00 00 eb    	clr.w     w0
    27ba:	90 41 88    	mov.w     w0, 0x832

000027bc <.L11>:
    27bc:	a0 41 80    	mov.w     0x834, w0
    27be:	00 00 e8    	inc.w     w0, w0
    27c0:	a0 41 88    	mov.w     w0, 0x834
    27c2:	52 20 ef    	clr.w     0x52

000027c4 <.L10>:
    27c4:	10 11 80    	mov.w     0x222, w0
    27c6:	61 00 60    	and.w     w0, #0x1, w0
    27c8:	00 00 e0    	cp0.w     w0
    27ca:	04 00 32    	bra       Z, 0x27d4 <.L9>
    27cc:	a1 41 80    	mov.w     0x834, w1
    27ce:	70 41 80    	mov.w     0x82e, w0
    27d0:	80 8f 50    	sub.w     w1, w0, [w15]
    27d2:	e4 ff 3a    	bra       NZ, 0x279c <.L13>

000027d4 <.L9>:
    27d4:	00 80 fa    	ulnk      
    27d6:	34 00 f9    	pop       0x34
    27d8:	32 00 f9    	pop       0x32
    27da:	4f 00 be    	mov.d     [--w15], w0
    27dc:	00 40 06    	retfie    
Disassembly of section .text:

000027de <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    27de:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    27e0:	00 10 20    	mov.w     #0x100, w0
    27e2:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    27e4:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    27e6:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    27e8:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    27ea:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    27ec:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    27ee:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    27f0:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    27f2:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    27f4:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    27f6:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    27f8:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    27fa:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    27fc:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    27fe:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    2800:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    2802:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    2804:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    2806:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    2808:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    280a:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    280c:	f0 03 20    	mov.w     #0x3f, w0
    280e:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    2810:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    2812:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    2814:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    2816:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    2818:	00 0e 20    	mov.w     #0xe0, w0
    281a:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    281c:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    281e:	00 c4 20    	mov.w     #0xc40, w0
    2820:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    2822:	50 00 20    	mov.w     #0x5, w0
    2824:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    2826:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    2828:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    282a:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    282c:	e8 02 a9    	bclr.b    0x2e8, #0x0
    282e:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    2830:	e8 22 a9    	bclr.b    0x2e8, #0x1
    2832:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    2834:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    2836:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    2838:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    283a:	00 80 fa    	ulnk      
    283c:	00 00 06    	return    

0000283e <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    283e:	02 00 fa    	lnk       #0x2
    2840:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    2842:	9e 00 78    	mov.w     [w14], w1
    2844:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    2846:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    2848:	00 00 00    	nop       

0000284a <.L3>:
    284a:	00 19 80    	mov.w     0x320, w0
    284c:	61 00 60    	and.w     w0, #0x1, w0
    284e:	00 00 e0    	cp0.w     w0
    2850:	fc ff 32    	bra       Z, 0x284a <.L3>
    return ADC1BUF0;
    2852:	00 18 80    	mov.w     0x300, w0
}
    2854:	00 80 fa    	ulnk      
    2856:	00 00 06    	return    
Disassembly of section .isr.text:

00002858 <__T1Interrupt>:
    2858:	36 00 f8    	push      0x36
    285a:	80 9f be    	mov.d     w0, [w15++]
    285c:	82 9f be    	mov.d     w2, [w15++]
    285e:	84 9f be    	mov.d     w4, [w15++]
    2860:	86 9f be    	mov.d     w6, [w15++]
    2862:	32 00 f8    	push      0x32
    2864:	34 00 f8    	push      0x34
    2866:	10 00 20    	mov.w     #0x1, w0
    2868:	a0 01 88    	mov.w     w0, 0x34
    286a:	00 20 20    	mov.w     #0x200, w0
    286c:	90 01 88    	mov.w     w0, 0x32
    286e:	00 00 fa    	lnk       #0x0
    2870:	84 60 a9    	bclr.b    0x84, #0x3
    2872:	40 40 80    	mov.w     0x808, w0
    2874:	50 40 88    	mov.w     w0, 0x80a
    2876:	50 00 20    	mov.w     #0x5, w0
    2878:	e2 ff 07    	rcall     0x283e <_read_analog> <.LFB1> <.LFE0>
    287a:	45 00 de    	lsr.w     w0, #0x5, w0
    287c:	40 40 88    	mov.w     w0, 0x808
    287e:	41 40 80    	mov.w     0x808, w1
    2880:	50 40 80    	mov.w     0x80a, w0
    2882:	80 8f 50    	sub.w     w1, w0, [w15]
    2884:	02 00 3a    	bra       NZ, 0x288a <.L2>
    2886:	40 40 80    	mov.w     0x808, w0
    2888:	60 40 88    	mov.w     w0, 0x80c

0000288a <.L2>:
    288a:	06 c8 bf    	mov.b     0x806, WREG
    288c:	80 80 fb    	ze        w0, w1
    288e:	60 40 80    	mov.w     0x80c, w0
    2890:	80 8f 50    	sub.w     w1, w0, [w15]
    2892:	05 00 32    	bra       Z, 0x289e <.L1>
    2894:	06 c8 bf    	mov.b     0x806, WREG
    2896:	07 e8 b7    	mov.b     WREG, 0x807
    2898:	60 40 80    	mov.w     0x80c, w0
    289a:	00 40 78    	mov.b     w0, w0
    289c:	06 e8 b7    	mov.b     WREG, 0x806

0000289e <.L1>:
    289e:	00 80 fa    	ulnk      
    28a0:	34 00 f9    	pop       0x34
    28a2:	32 00 f9    	pop       0x32
    28a4:	4f 03 be    	mov.d     [--w15], w6
    28a6:	4f 02 be    	mov.d     [--w15], w4
    28a8:	4f 01 be    	mov.d     [--w15], w2
    28aa:	4f 00 be    	mov.d     [--w15], w0
    28ac:	36 00 f9    	pop       0x36
    28ae:	00 40 06    	retfie    
Disassembly of section .dinit:

000028b0 <.dinit>:
    28b0:	36 10 00    	nop       
    28b2:	14 00 00    	nop       
    28b4:	80 00 00    	nop       
    28b6:	00 08 00    	nop       
    28b8:	14 00 00    	nop       
    28ba:	80 00 00    	nop       
    28bc:	14 08 00    	nop       
    28be:	0c 00 00    	nop       
    28c0:	80 00 00    	nop       
    28c2:	22 08 00    	nop       
    28c4:	14 08 00    	nop       
    28c6:	80 00 00    	nop       
    28c8:	20 08 00    	nop       
    28ca:	02 00 00    	nop       
    28cc:	80 00 00    	nop       
    28ce:	00 00 00    	nop       
Disassembly of section .isr:

000028d0 <__DefaultInterrupt>:
    28d0:	00 40 da    	break     
    28d2:	00 00 fe    	reset     
