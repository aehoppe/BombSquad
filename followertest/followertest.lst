
followertest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	e2 14 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	e2 14 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	e2 14 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	e2 14 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	e2 14 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	e2 14 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	e2 14 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	e2 14 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	e2 14 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	e2 14 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	e2 14 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	e2 14 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	e2 14 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	e2 14 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	e2 14 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	e2 14 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	e2 14 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	e2 14 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	e2 14 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	e2 14 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	e2 14 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	e2 14 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	e2 14 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	e2 14 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	e2 14 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	e2 14 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	e2 14 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	e2 14 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	e2 14 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	e2 14 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	e2 14 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	e2 14 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	e2 14 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	e2 14 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	e2 14 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	e2 14 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	e2 14 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	e2 14 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	e2 14 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	e2 14 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	e2 14 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	e2 14 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	e2 14 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	e2 14 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	e2 14 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	e2 14 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	e2 14 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	e2 14 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	e2 14 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	e2 14 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	e2 14 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	e2 14 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	e2 14 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	e2 14 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	e2 14 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	e2 14 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	e2 14 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	e2 14 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	e2 14 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	e2 14 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	e2 14 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	e2 14 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	e2 14 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	e2 14 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	e2 14 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	e2 14 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	e2 14 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	e2 14 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	e2 14 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	e2 14 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f 80 20    	mov.w     #0x800, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	77 00 07    	rcall     0x1214 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	d0 14 02    	call      0x14d0 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	20 00 20    	mov.w     #0x2, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	10 00 20    	mov.w     #0x1, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <__crt_start_mode>:
    1214:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	e2 14 04    	goto      0x14e2 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001216 <_delay_by_nop>:
// From https://web.archive.org/web/20161223060411/http://www.engscope.com/pic24-tutorial/10-2-i2c-basic-functions/

#include "i2c_reg.h"

void delay_by_nop(int num_nops){    // 1 nop= 375ns
    1216:	04 00 fa    	lnk       #0x4
    1218:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t count = 0;
    121a:	00 00 eb    	clr.w     w0
    121c:	00 0f 78    	mov.w     w0, [w14]
    while (count < num_nops){
    121e:	02 00 37    	bra       0x1224 <.L2>

00001220 <.L3>:
        __asm__("nop");
    1220:	00 00 00    	nop       
        count +=1;
    1222:	1e 0f e8    	inc.w     [w14], [w14]

00001224 <.L2>:
    1224:	1e 00 90    	mov.w     [w14+2], w0
    1226:	9e 0f 50    	sub.w     w0, [w14], [w15]
    1228:	fb ff 3e    	bra       GTU, 0x1220 <.L3>
    }
}
    122a:	00 80 fa    	ulnk      
    122c:	00 00 06    	return    

0000122e <_i2c_init>:

// initiates I2C3 module to baud rate BRG
void i2c_init(int BRG){        // I2CBRG = 157 for 16Mhz OSC with 100kHz I2C clock
    122e:	04 00 fa    	lnk       #0x4
    1230:	10 07 98    	mov.w     w0, [w14+2]
   int temp;
   I2C3BRG = BRG;              // Sets freq to 100kHz
    1232:	1e 00 90    	mov.w     [w14+2], w0
    1234:	a0 13 88    	mov.w     w0, 0x274
   I2C3CONbits.I2CEN = 0;	   // Disable I2C Mode
    1236:	77 e2 a9    	bclr.b    0x277, #0x7
   I2C3CONbits.DISSLW = 1;	   // Disable slew rate control
    1238:	77 22 a8    	bset.b    0x277, #0x1
   IFS5bits.MI2C3IF = 0;	   // Clear Interrupt
    123a:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3CONbits.I2CEN = 1;	   // Enable I2C Mode
    123c:	77 e2 a8    	bset.b    0x277, #0x7
   temp = I2C3RCV;	           // read buffer to clear buffer full
    123e:	80 13 80    	mov.w     0x270, w0
    1240:	00 0f 78    	mov.w     w0, [w14]
   reset_i2c_bus();	           // set bus to idle
    1242:	31 00 07    	rcall     0x12a6 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    1244:	00 80 fa    	ulnk      
    1246:	00 00 06    	return    

00001248 <_i2c_start>:

//function iniates a start condition on bus
void i2c_start(void){
    1248:	02 00 fa    	lnk       #0x2
   int x = 0;
    124a:	00 00 eb    	clr.w     w0
    124c:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.ACKDT = 0;	  //Reset any previous Ack
    124e:	76 a2 a9    	bclr.b    0x276, #0x5
   delay_by_nop(10);
    1250:	a0 00 20    	mov.w     #0xa, w0
    1252:	e1 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   I2C3CONbits.SEN = 1;	      //Initiate Start condition
    1254:	76 02 a8    	bset.b    0x276, #0x0
   __asm__("nop");
    1256:	00 00 00    	nop       

   while (I2C3CONbits.SEN){   //the hardware will automatically clear Start Bit
    1258:	06 00 37    	bra       0x1266 <.L6>

0000125a <.L8>:
      delay_by_nop(1);        //wait for automatic clear before proceding
    125a:	10 00 20    	mov.w     #0x1, w0
    125c:	dc ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
      x++;
    125e:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)
    1260:	1e 00 78    	mov.w     [w14], w0
    1262:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1264:	05 00 3c    	bra       GT, 0x1270 <.L9>

00001266 <.L6>:
    1266:	b0 13 80    	mov.w     0x276, w0
    1268:	61 00 60    	and.w     w0, #0x1, w0
    126a:	00 00 e0    	cp0.w     w0
    126c:	f6 ff 3a    	bra       NZ, 0x125a <.L8>
    126e:	01 00 37    	bra       0x1272 <.L7>

00001270 <.L9>:
      break;
    1270:	00 00 00    	nop       

00001272 <.L7>:
   }
   delay_by_nop(2);
    1272:	20 00 20    	mov.w     #0x2, w0
    1274:	d0 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
}
    1276:	00 80 fa    	ulnk      
    1278:	00 00 06    	return    

0000127a <_i2c_restart>:

void i2c_restart(void){
    127a:	02 00 fa    	lnk       #0x2
   int x = 0;
    127c:	00 00 eb    	clr.w     w0
    127e:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.RSEN = 1;	//Initiate restart condition
    1280:	76 22 a8    	bset.b    0x276, #0x1
   __asm__("nop");
    1282:	00 00 00    	nop       
   //the hardware will automatically clear restart bit
   //wait for automatic clear before proceding
   while (I2C3CONbits.RSEN){
    1284:	06 00 37    	bra       0x1292 <.L11>

00001286 <.L13>:
      delay_by_nop(1);
    1286:	10 00 20    	mov.w     #0x1, w0
    1288:	c6 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
      x++;
    128a:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20)	break;
    128c:	1e 00 78    	mov.w     [w14], w0
    128e:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1290:	05 00 3c    	bra       GT, 0x129c <.L14>

00001292 <.L11>:
    1292:	b0 13 80    	mov.w     0x276, w0
    1294:	62 00 60    	and.w     w0, #0x2, w0
    1296:	00 00 e0    	cp0.w     w0
    1298:	f6 ff 3a    	bra       NZ, 0x1286 <.L13>
    129a:	01 00 37    	bra       0x129e <.L12>

0000129c <.L14>:
    129c:	00 00 00    	nop       

0000129e <.L12>:
   }
   delay_by_nop(2);
    129e:	20 00 20    	mov.w     #0x2, w0
    12a0:	ba ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
}
    12a2:	00 80 fa    	ulnk      
    12a4:	00 00 06    	return    

000012a6 <_reset_i2c_bus>:


//Resets the I2C bus to Idle
void reset_i2c_bus(void){
    12a6:	02 00 fa    	lnk       #0x2
   int x = 0;
    12a8:	00 00 eb    	clr.w     w0
    12aa:	00 0f 78    	mov.w     w0, [w14]
   I2C3CONbits.PEN = 1;     //initiate stop bit
    12ac:	76 42 a8    	bset.b    0x276, #0x2
   while (I2C3CONbits.PEN) {     //wait for hardware clear of stop bit
    12ae:	06 00 37    	bra       0x12bc <.L16>

000012b0 <.L18>:
      // delay_by_nop(1);
      delay_by_nop(1);
    12b0:	10 00 20    	mov.w     #0x1, w0
    12b2:	b1 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
      x ++;
    12b4:	1e 0f e8    	inc.w     [w14], [w14]
      if (x > 20) break;
    12b6:	1e 00 78    	mov.w     [w14], w0
    12b8:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    12ba:	05 00 3c    	bra       GT, 0x12c6 <.L19>

000012bc <.L16>:
    12bc:	b0 13 80    	mov.w     0x276, w0
    12be:	64 00 60    	and.w     w0, #0x4, w0
    12c0:	00 00 e0    	cp0.w     w0
    12c2:	f6 ff 3a    	bra       NZ, 0x12b0 <.L18>
    12c4:	01 00 37    	bra       0x12c8 <.L17>

000012c6 <.L19>:
    12c6:	00 00 00    	nop       

000012c8 <.L17>:
   }

   I2C3CONbits.RCEN = 0;
    12c8:	76 62 a9    	bclr.b    0x276, #0x3
   IFS5bits.MI2C3IF = 0; // Clear Interrupt
    12ca:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3STATbits.IWCOL = 0;
    12cc:	78 e2 a9    	bclr.b    0x278, #0x7
   I2C3STATbits.BCL = 0;
    12ce:	79 42 a9    	bclr.b    0x279, #0x2
   // delay_by_nop(10);
   delay_by_nop(10);
    12d0:	a0 00 20    	mov.w     #0xa, w0
    12d2:	a1 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
}
    12d4:	00 80 fa    	ulnk      
    12d6:	00 00 06    	return    

000012d8 <_send_i2c_byte>:

char send_i2c_byte(int data){       //basic I2C byte send
    12d8:	04 00 fa    	lnk       #0x4
    12da:	10 07 98    	mov.w     w0, [w14+2]
   int i;
   while (I2C3STATbits.TBF) { }
    12dc:	00 00 00    	nop       

000012de <.L21>:
    12de:	c0 13 80    	mov.w     0x278, w0
    12e0:	61 00 60    	and.w     w0, #0x1, w0
    12e2:	00 00 e0    	cp0.w     w0
    12e4:	fc ff 3a    	bra       NZ, 0x12de <.L21>
   IFS5bits.MI2C3IF = 0;    // Clear Interrupt
    12e6:	8e a0 a9    	bclr.b    0x8e, #0x5
   I2C3TRN = data;          // load the outgoing data byte
    12e8:	1e 00 90    	mov.w     [w14+2], w0
    12ea:	90 13 88    	mov.w     w0, 0x272

   for (i=0; i<500; i++){           // wait for transmission
    12ec:	00 00 eb    	clr.w     w0
    12ee:	00 0f 78    	mov.w     w0, [w14]
    12f0:	08 00 37    	bra       0x1302 <.L22>

000012f2 <.L25>:
      if (!I2C3STATbits.TRSTAT) break;
    12f2:	c1 13 80    	mov.w     0x278, w1
    12f4:	00 00 24    	mov.w     #0x4000, w0
    12f6:	00 80 60    	and.w     w1, w0, w0
    12f8:	00 00 e0    	cp0.w     w0
    12fa:	08 00 32    	bra       Z, 0x130c <.L29>
      delay_by_nop(1); }
    12fc:	10 00 20    	mov.w     #0x1, w0
    12fe:	8b ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
    1300:	1e 0f e8    	inc.w     [w14], [w14]

00001302 <.L22>:
    1302:	30 1f 20    	mov.w     #0x1f3, w0
    1304:	9e 00 78    	mov.w     [w14], w1
    1306:	80 8f 50    	sub.w     w1, w0, [w15]
    1308:	f4 ff 34    	bra       LE, 0x12f2 <.L25>
    130a:	01 00 37    	bra       0x130e <.L24>

0000130c <.L29>:
    130c:	00 00 00    	nop       

0000130e <.L24>:

    if (i == 500) {
    130e:	40 1f 20    	mov.w     #0x1f4, w0
    1310:	9e 00 78    	mov.w     [w14], w1
    1312:	80 8f 50    	sub.w     w1, w0, [w15]
    1314:	02 00 3a    	bra       NZ, 0x131a <.L26>
        return(1); }
    1316:	10 c0 b3    	mov.b     #0x1, w0
    1318:	0b 00 37    	bra       0x1330 <.L27>

0000131a <.L26>:

   if (I2C3STATbits.ACKSTAT == 1){          // Check for NO_ACK from slave, abort if not found
    131a:	c1 13 80    	mov.w     0x278, w1
    131c:	00 00 28    	mov.w     #0x8000, w0
    131e:	00 80 60    	and.w     w1, w0, w0
    1320:	00 00 e0    	cp0.w     w0
    1322:	03 00 32    	bra       Z, 0x132a <.L28>
      reset_i2c_bus();
    1324:	c0 ff 07    	rcall     0x12a6 <_reset_i2c_bus> <.LFB4> <.LFE3>
      return(1); }
    1326:	10 c0 b3    	mov.b     #0x1, w0
    1328:	03 00 37    	bra       0x1330 <.L27>

0000132a <.L28>:

   delay_by_nop(2);
    132a:	20 00 20    	mov.w     #0x2, w0
    132c:	74 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   return(0);
    132e:	00 40 eb    	clr.b     w0

00001330 <.L27>:
}
    1330:	00 80 fa    	ulnk      
    1332:	00 00 06    	return    

00001334 <_i2c_read>:

//function reads data, returns the read data, no ack
char i2c_read(void){
    1334:	04 00 fa    	lnk       #0x4
   int i = 0;
    1336:	00 00 eb    	clr.w     w0
    1338:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    133a:	00 40 eb    	clr.b     w0
    133c:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    133e:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {           //if no response, break
    1340:	05 00 37    	bra       0x134c <.L31>

00001342 <.L33>:
      i ++;
    1342:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;
    1344:	00 7d 20    	mov.w     #0x7d0, w0
    1346:	9e 00 78    	mov.w     [w14], w1
    1348:	80 8f 50    	sub.w     w1, w0, [w15]
    134a:	05 00 3c    	bra       GT, 0x1356 <.L34>

0000134c <.L31>:
    134c:	c0 13 80    	mov.w     0x278, w0
    134e:	62 00 60    	and.w     w0, #0x2, w0
    1350:	00 00 e0    	cp0.w     w0
    1352:	f7 ff 32    	bra       Z, 0x1342 <.L33>
    1354:	01 00 37    	bra       0x1358 <.L32>

00001356 <.L34>:
    1356:	00 00 00    	nop       

00001358 <.L32>:
   }

   data = I2C3RCV;       //get data from I2C3RCV register
    1358:	80 13 80    	mov.w     0x270, w0
    135a:	20 47 98    	mov.b     w0, [w14+2]
   return data;
    135c:	2e 40 90    	mov.b     [w14+2], w0
}
    135e:	00 80 fa    	ulnk      
    1360:	00 00 06    	return    

00001362 <_i2c_read_ack>:


//function reads data, returns the read data, with ack
char i2c_read_ack(void){	//does not reset bus!!!
    1362:	04 00 fa    	lnk       #0x4
   int i = 0;
    1364:	00 00 eb    	clr.w     w0
    1366:	00 0f 78    	mov.w     w0, [w14]
   char data = 0;
    1368:	00 40 eb    	clr.b     w0
    136a:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.RCEN = 1;            //set I2C module to receive
    136c:	76 62 a8    	bset.b    0x276, #0x3

   while (!I2C3STATbits.RBF) {       //if no response, break
    136e:	05 00 37    	bra       0x137a <.L36>

00001370 <.L38>:
      i++;
    1370:	1e 0f e8    	inc.w     [w14], [w14]
      if (i > 2000) break;
    1372:	00 7d 20    	mov.w     #0x7d0, w0
    1374:	9e 00 78    	mov.w     [w14], w1
    1376:	80 8f 50    	sub.w     w1, w0, [w15]
    1378:	05 00 3c    	bra       GT, 0x1384 <.L39>

0000137a <.L36>:
    137a:	c0 13 80    	mov.w     0x278, w0
    137c:	62 00 60    	and.w     w0, #0x2, w0
    137e:	00 00 e0    	cp0.w     w0
    1380:	f7 ff 32    	bra       Z, 0x1370 <.L38>
    1382:	01 00 37    	bra       0x1386 <.L37>

00001384 <.L39>:
    1384:	00 00 00    	nop       

00001386 <.L37>:
   }

   data = I2C3RCV;               //get data from I2C3RCV register
    1386:	80 13 80    	mov.w     0x270, w0
    1388:	20 47 98    	mov.b     w0, [w14+2]
   I2C3CONbits.ACKEN = 1;       //set ACK to high
    138a:	76 82 a8    	bset.b    0x276, #0x4
   delay_by_nop(10);               //wait before exiting
    138c:	a0 00 20    	mov.w     #0xa, w0
    138e:	43 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>
   return data;
    1390:	2e 40 90    	mov.b     [w14+2], w0
}
    1392:	00 80 fa    	ulnk      
    1394:	00 00 06    	return    

00001396 <_I2Cwrite>:

// function puts together I2C protocol for random write
void I2Cwrite(char addr, char subaddr, char value){
    1396:	04 00 fa    	lnk       #0x4
    1398:	00 4f 78    	mov.b     w0, [w14]
    139a:	11 47 98    	mov.b     w1, [w14+1]
    139c:	22 47 98    	mov.b     w2, [w14+2]
   i2c_start();
    139e:	54 ff 07    	rcall     0x1248 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr & 0xfffe); // set /W bit
    13a0:	1e 00 fb    	se        [w14], w0
    13a2:	80 00 78    	mov.w     w0, w1
    13a4:	e0 ff 2f    	mov.w     #0xfffe, w0
    13a6:	00 80 60    	and.w     w1, w0, w0
    13a8:	97 ff 07    	rcall     0x12d8 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    13aa:	1e 40 90    	mov.b     [w14+1], w0
    13ac:	00 00 fb    	se        w0, w0
    13ae:	94 ff 07    	rcall     0x12d8 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(value);
    13b0:	2e 40 90    	mov.b     [w14+2], w0
    13b2:	00 00 fb    	se        w0, w0
    13b4:	91 ff 07    	rcall     0x12d8 <_send_i2c_byte> <.LFB5> <.LFE4>
   reset_i2c_bus();
    13b6:	77 ff 07    	rcall     0x12a6 <_reset_i2c_bus> <.LFB4> <.LFE3>
}
    13b8:	00 80 fa    	ulnk      
    13ba:	00 00 06    	return    

000013bc <_I2Cread>:

// function puts together I2C protocol for random read
char I2Cread(char addr, char subaddr){
    13bc:	04 00 fa    	lnk       #0x4
    13be:	20 47 98    	mov.b     w0, [w14+2]
    13c0:	31 47 98    	mov.b     w1, [w14+3]
   char temp;

   i2c_start();
    13c2:	42 ff 07    	rcall     0x1248 <_i2c_start> <.LFB2> <.LFE1>
   send_i2c_byte(addr);
    13c4:	2e 40 90    	mov.b     [w14+2], w0
    13c6:	00 00 fb    	se        w0, w0
    13c8:	87 ff 07    	rcall     0x12d8 <_send_i2c_byte> <.LFB5> <.LFE4>
   send_i2c_byte(subaddr);
    13ca:	3e 40 90    	mov.b     [w14+3], w0
    13cc:	00 00 fb    	se        w0, w0
    13ce:	84 ff 07    	rcall     0x12d8 <_send_i2c_byte> <.LFB5> <.LFE4>
   delay_by_nop(10);
    13d0:	a0 00 20    	mov.w     #0xa, w0
    13d2:	21 ff 07    	rcall     0x1216 <_delay_by_nop> <.L0> <.LFB0> <.Ltext0>

   i2c_restart();
    13d4:	52 ff 07    	rcall     0x127a <_i2c_restart> <.LFB3> <.LFE2>
   send_i2c_byte(addr | 0x01); // set R bit
    13d6:	2e 40 90    	mov.b     [w14+2], w0
    13d8:	00 04 a0    	bset.b    w0, #0x0
    13da:	00 00 fb    	se        w0, w0
    13dc:	7d ff 07    	rcall     0x12d8 <_send_i2c_byte> <.LFB5> <.LFE4>
   temp = i2c_read();
    13de:	aa ff 07    	rcall     0x1334 <_i2c_read> <.LFB6> <.LFE5>
    13e0:	00 4f 78    	mov.b     w0, [w14]

   reset_i2c_bus();
    13e2:	61 ff 07    	rcall     0x12a6 <_reset_i2c_bus> <.LFB4> <.LFE3>
   return temp;
    13e4:	1e 40 78    	mov.b     [w14], w0
}
    13e6:	00 80 fa    	ulnk      
    13e8:	00 00 06    	return    

000013ea <_I2Cpoll>:

// function checks if device at addr is on bus
unsigned char I2Cpoll(char addr){
    13ea:	04 00 fa    	lnk       #0x4
    13ec:	20 47 98    	mov.b     w0, [w14+2]
   unsigned char temp = 0;
    13ee:	00 40 eb    	clr.b     w0
    13f0:	00 4f 78    	mov.b     w0, [w14]
   i2c_start();
    13f2:	2a ff 07    	rcall     0x1248 <_i2c_start> <.LFB2> <.LFE1>
   temp = send_i2c_byte((addr) & (0xfffe)); // set /W bit
    13f4:	2e 40 90    	mov.b     [w14+2], w0
    13f6:	00 00 fb    	se        w0, w0
    13f8:	80 00 78    	mov.w     w0, w1
    13fa:	e0 ff 2f    	mov.w     #0xfffe, w0
    13fc:	00 80 60    	and.w     w1, w0, w0
    13fe:	6c ff 07    	rcall     0x12d8 <_send_i2c_byte> <.LFB5> <.LFE4>
    1400:	00 4f 78    	mov.b     w0, [w14]
   reset_i2c_bus();
    1402:	51 ff 07    	rcall     0x12a6 <_reset_i2c_bus> <.LFB4> <.LFE3>

   return temp;
    1404:	1e 40 78    	mov.b     [w14], w0
}
    1406:	00 80 fa    	ulnk      
    1408:	00 00 06    	return    

0000140a <_I2Cwritearray>:

// function writes a byte array over i2c
unsigned char I2Cwritearray(char addr, char dat[], uint8_t len) {
    140a:	08 00 fa    	lnk       #0x8
    140c:	20 47 98    	mov.b     w0, [w14+2]
    140e:	21 07 98    	mov.w     w1, [w14+4]
    1410:	62 47 98    	mov.b     w2, [w14+6]
  unsigned char err = 0;
    1412:	00 40 eb    	clr.b     w0
    1414:	00 4f 78    	mov.b     w0, [w14]
  i2c_start();
    1416:	18 ff 07    	rcall     0x1248 <_i2c_start> <.LFB2> <.LFE1>
  err = send_i2c_byte(addr & (0xfffe)); // takes 7 bit address and adds /W bit
    1418:	2e 40 90    	mov.b     [w14+2], w0
    141a:	00 00 fb    	se        w0, w0
    141c:	80 00 78    	mov.w     w0, w1
    141e:	e0 ff 2f    	mov.w     #0xfffe, w0
    1420:	00 80 60    	and.w     w1, w0, w0
    1422:	5a ff 07    	rcall     0x12d8 <_send_i2c_byte> <.LFB5> <.LFE4>
    1424:	00 4f 78    	mov.b     w0, [w14]
  uint8_t j;
  for (j = 0; j < len; j++) { // keep sending data bytes til we're done unless it misses an ack
    1426:	00 40 eb    	clr.b     w0
    1428:	10 47 98    	mov.b     w0, [w14+1]
    142a:	0d 00 37    	bra       0x1446 <.L44>

0000142c <.L45>:
    err |= send_i2c_byte(dat[j]);
    142c:	1e 40 90    	mov.b     [w14+1], w0
    142e:	00 80 fb    	ze        w0, w0
    1430:	ae 00 90    	mov.w     [w14+4], w1
    1432:	00 80 40    	add.w     w1, w0, w0
    1434:	10 40 78    	mov.b     [w0], w0
    1436:	00 00 fb    	se        w0, w0
    1438:	4f ff 07    	rcall     0x12d8 <_send_i2c_byte> <.LFB5> <.LFE4>
    143a:	9e 40 78    	mov.b     [w14], w1
    143c:	01 40 70    	ior.b     w0, w1, w0
    143e:	00 4f 78    	mov.b     w0, [w14]
    1440:	1e 40 90    	mov.b     [w14+1], w0
    1442:	00 40 e8    	inc.b     w0, w0
    1444:	10 47 98    	mov.b     w0, [w14+1]

00001446 <.L44>:
    1446:	9e 40 90    	mov.b     [w14+1], w1
    1448:	6e 40 90    	mov.b     [w14+6], w0
    144a:	80 cf 50    	sub.b     w1, w0, [w15]
    144c:	ef ff 39    	bra       NC, 0x142c <.L45>
  }
  reset_i2c_bus();
    144e:	2b ff 07    	rcall     0x12a6 <_reset_i2c_bus> <.LFB4> <.LFE3>
  return err;
    1450:	1e 40 78    	mov.b     [w14], w0
}
    1452:	00 80 fa    	ulnk      
    1454:	00 00 06    	return    

00001456 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    1456:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    1458:	00 10 20    	mov.w     #0x100, w0
    145a:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    145c:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    145e:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    1460:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    1462:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    1464:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    1466:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    1468:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    146a:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    146c:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    146e:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    1470:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    1472:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    1474:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    1476:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    1478:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    147a:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    147c:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    147e:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    1480:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    1482:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    1484:	f0 03 20    	mov.w     #0x3f, w0
    1486:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    1488:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    148a:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    148c:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    148e:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    1490:	00 0e 20    	mov.w     #0xe0, w0
    1492:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    1494:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    1496:	00 c4 20    	mov.w     #0xc40, w0
    1498:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    149a:	50 00 20    	mov.w     #0x5, w0
    149c:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    149e:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    14a0:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    14a2:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    14a4:	e8 02 a9    	bclr.b    0x2e8, #0x0
    14a6:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    14a8:	e8 22 a9    	bclr.b    0x2e8, #0x1
    14aa:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    14ac:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    14ae:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    14b0:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    14b2:	00 80 fa    	ulnk      
    14b4:	00 00 06    	return    

000014b6 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    14b6:	02 00 fa    	lnk       #0x2
    14b8:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    14ba:	9e 00 78    	mov.w     [w14], w1
    14bc:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    14be:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    14c0:	00 00 00    	nop       

000014c2 <.L3>:
    14c2:	00 19 80    	mov.w     0x320, w0
    14c4:	61 00 60    	and.w     w0, #0x1, w0
    14c6:	00 00 e0    	cp0.w     w0
    14c8:	fc ff 32    	bra       Z, 0x14c2 <.L3>
    return ADC1BUF0;
    14ca:	00 18 80    	mov.w     0x300, w0
}
    14cc:	00 80 fa    	ulnk      
    14ce:	00 00 06    	return    

000014d0 <_main>:
    14d0:	06 00 fa    	lnk       #0x6
    14d2:	c1 ff 07    	rcall     0x1456 <_init_elecanisms> <.L0> <.LFB0> <.LFE11> <.Letext0> <.Ltext0>
    14d4:	80 3e 20    	mov.w     #0x3e8, w0
    14d6:	ab fe 07    	rcall     0x122e <_i2c_init> <.LFB1> <.LFE0>
    14d8:	20 01 20    	mov.w     #0x12, w0
    14da:	d0 13 88    	mov.w     w0, 0x27a
    14dc:	7c 22 ef    	clr.w     0x27c
    14de:	00 80 fa    	ulnk      
    14e0:	00 00 06    	return    
Disassembly of section .isr:

000014e2 <__DefaultInterrupt>:
    14e2:	00 40 da    	break     
    14e4:	00 00 fe    	reset     
