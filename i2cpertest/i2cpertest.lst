
i2cpertest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	9a 18 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	9a 18 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	9a 18 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	9a 18 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	9a 18 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	9a 18 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	9a 18 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	9a 18 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	9a 18 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	9a 18 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	9a 18 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	9a 18 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	9a 18 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	9a 18 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	9a 18 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	9a 18 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	9a 18 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	9a 18 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	9a 18 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	9a 18 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	9a 18 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	9a 18 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	9a 18 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	9a 18 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	9a 18 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	9a 18 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	9a 18 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	9a 18 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	9a 18 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	9a 18 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	9a 18 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	9a 18 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	9a 18 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	9a 18 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	9a 18 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	9a 18 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	9a 18 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	9a 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	9a 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	9a 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	9a 18 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	9a 18 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	9a 18 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	9a 18 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	9a 18 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	9a 18 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	9a 18 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	9a 18 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	9a 18 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	9a 18 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	9a 18 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	9a 18 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	9a 18 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	9a 18 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	9a 18 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	9a 18 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	9a 18 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	9a 18 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	9a 18 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	9a 18 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	9a 18 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	9a 18 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	9a 18 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	9a 18 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	9a 18 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	9a 18 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	9a 18 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	9a 18 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	9a 18 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	9a 18 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	6f 01 21    	mov.w     #0x1016, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	77 00 07    	rcall     0x1214 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	c0 88 21    	mov.w     #0x188c, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	50 18 02    	call      0x1850 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	20 00 20    	mov.w     #0x2, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	10 00 20    	mov.w     #0x1, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <__crt_start_mode>:
    1214:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	80 17 04    	goto      0x1780 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	1e 17 04    	goto      0x171e <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	9a 18 04    	goto      0x189a <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001216 <_init_ajuart>:
uint8_t U1TXbuffer[U1_TX_BUFFER_LENGTH];
uint8_t U1RXbuffer[U1_RX_BUFFER_LENGTH];
uint16_t U1_tx_threshold;

void init_ajuart(void) {
    1216:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure audio jack UART pins and connect them to UART1
    AJ_TX_DIR = OUT; AJ_TX = 1;
    1218:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    121a:	f2 c2 a8    	bset.b    0x2f2, #0x6
    AJ_RX_DIR = IN;
    121c:	f0 e2 a8    	bset.b    0x2f0, #0x7

    RPOR = (uint8_t *)&RPOR0;
    121e:	00 6c 20    	mov.w     #0x6c0, w0
    1220:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    1222:	00 68 20    	mov.w     #0x680, w0
    1224:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    1226:	11 3a 80    	mov.w     0x742, w1
    1228:	f0 0b 20    	mov.w     #0xbf, w0
    122a:	00 81 60    	and.w     w1, w0, w2
    122c:	60 04 20    	mov.w     #0x46, w0
    122e:	71 05 20    	mov.w     #0x57, w1
    1230:	23 74 20    	mov.w     #0x742, w3
    1232:	80 49 78    	mov.b     w0, [w3]
    1234:	81 49 78    	mov.b     w1, [w3]
    1236:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = AJ_RX_RP;
    1238:	1e 00 90    	mov.w     [w14+2], w0
    123a:	40 02 b0    	add.w     #0x24, w0
    123c:	a1 c1 b3    	mov.b     #0x1a, w1
    123e:	01 48 78    	mov.b     w1, [w0]
    RPOR[AJ_TX_RP] = U1TX_RP;
    1240:	9e 00 78    	mov.w     [w14], w1
    1242:	75 80 40    	add.w     w1, #0x15, w0
    1244:	31 c0 b3    	mov.b     #0x3, w1
    1246:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    1248:	10 3a 80    	mov.w     0x742, w0
    124a:	00 01 78    	mov.w     w0, w2
    124c:	02 60 a0    	bset.w    w2, #0x6
    124e:	60 04 20    	mov.w     #0x46, w0
    1250:	71 05 20    	mov.w     #0x57, w1
    1252:	23 74 20    	mov.w     #0x742, w3
    1254:	80 49 78    	mov.b     w0, [w3]
    1256:	81 49 78    	mov.b     w1, [w3]
    1258:	82 49 78    	mov.b     w2, [w3]

    U1MODE = 0x0008;                // configure UART1 for transmission at
    125a:	80 00 20    	mov.w     #0x8, w0
    125c:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;                 //   115,200 baud, no parity, 1 stop bit
    125e:	20 02 20    	mov.w     #0x22, w0
    1260:	40 11 88    	mov.w     w0, 0x228

    U1_tx_buffer.data = U1TXbuffer;
    1262:	60 81 20    	mov.w     #0x816, w0
    1264:	10 40 88    	mov.w     w0, 0x802
    U1_tx_buffer.length = U1_TX_BUFFER_LENGTH;
    1266:	00 40 20    	mov.w     #0x400, w0
    1268:	20 40 88    	mov.w     w0, 0x804
    U1_tx_buffer.head = 0;
    126a:	00 00 eb    	clr.w     w0
    126c:	30 40 88    	mov.w     w0, 0x806
    U1_tx_buffer.tail = 0;
    126e:	00 00 eb    	clr.w     w0
    1270:	40 40 88    	mov.w     w0, 0x808
    U1_tx_buffer.count = 0;
    1272:	00 00 eb    	clr.w     w0
    1274:	50 40 88    	mov.w     w0, 0x80a
    U1_tx_threshold = 3 * U1_TX_BUFFER_LENGTH / 4;
    1276:	00 30 20    	mov.w     #0x300, w0
    1278:	00 40 88    	mov.w     w0, 0x800

    U1_rx_buffer.data = U1RXbuffer;
    127a:	60 c1 20    	mov.w     #0xc16, w0
    127c:	60 40 88    	mov.w     w0, 0x80c
    U1_rx_buffer.length = U1_RX_BUFFER_LENGTH;
    127e:	00 40 20    	mov.w     #0x400, w0
    1280:	70 40 88    	mov.w     w0, 0x80e
    U1_rx_buffer.head = 0;
    1282:	00 00 eb    	clr.w     w0
    1284:	80 40 88    	mov.w     w0, 0x810
    U1_rx_buffer.tail = 0;
    1286:	00 00 eb    	clr.w     w0
    1288:	90 40 88    	mov.w     w0, 0x812
    U1_rx_buffer.count = 0;
    128a:	00 00 eb    	clr.w     w0
    128c:	a0 40 88    	mov.w     w0, 0x814

    U1STAbits.UTXISEL1 = 0;         // set UART1 UTXISEL<1:0> = 01, TX interrupt
    128e:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;         //   when all transmit operations are done
    1290:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    1292:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;            // enable UART1 TX interrupt
    1294:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    1296:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;            // enable UART1 RX interrupt
    1298:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;          // enable UART1 module
    129a:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
    129c:	23 42 a8    	bset.b    0x223, #0x2
}
    129e:	00 80 fa    	ulnk      
    12a0:	00 00 06    	return    

000012a2 <_U1_in_waiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
        disable_interrupts();
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
        U1_tx_buffer.head++;
        if (U1_tx_buffer.head == U1_tx_buffer.length)
            U1_tx_buffer.head = 0;
        U1_tx_buffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    12a2:	00 00 fa    	lnk       #0x0
    return U1_rx_buffer.count;
    12a4:	a0 40 80    	mov.w     0x814, w0
}
    12a6:	00 80 fa    	ulnk      
    12a8:	00 00 06    	return    

000012aa <_U1_flush_tx_buffer>:

void U1_flush_tx_buffer(void) {
    12aa:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    12ac:	11 11 80    	mov.w     0x222, w1
    12ae:	00 40 20    	mov.w     #0x400, w0
    12b0:	00 80 60    	and.w     w1, w0, w0
    12b2:	00 00 e0    	cp0.w     w0
    12b4:	01 00 3a    	bra       NZ, 0x12b8 <.L15>
        U1STAbits.UTXEN = 1;        //   enable it
    12b6:	23 42 a8    	bset.b    0x223, #0x2

000012b8 <.L15>:
}
    12b8:	00 80 fa    	ulnk      
    12ba:	00 00 06    	return    

000012bc <_U1_putc>:

void U1_putc(uint8_t ch) {
    12bc:	02 00 fa    	lnk       #0x2
    12be:	00 4f 78    	mov.b     w0, [w14]
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}
    12c0:	00 00 00    	nop       

000012c2 <.L18>:
    12c2:	51 40 80    	mov.w     0x80a, w1
    12c4:	20 40 80    	mov.w     0x804, w0
    12c6:	80 8f 50    	sub.w     w1, w0, [w15]
    12c8:	fc ff 32    	bra       Z, 0x12c2 <.L18>

    disable_interrupts();
    12ca:	ff 3f fc    	disi      #0x3fff
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    12cc:	11 40 80    	mov.w     0x802, w1
    12ce:	40 40 80    	mov.w     0x808, w0
    12d0:	00 80 40    	add.w     w1, w0, w0
    12d2:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    12d4:	40 40 80    	mov.w     0x808, w0
    12d6:	00 00 e8    	inc.w     w0, w0
    12d8:	40 40 88    	mov.w     w0, 0x808
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    12da:	41 40 80    	mov.w     0x808, w1
    12dc:	20 40 80    	mov.w     0x804, w0
    12de:	80 8f 50    	sub.w     w1, w0, [w15]
    12e0:	02 00 3a    	bra       NZ, 0x12e6 <.L19>
        U1_tx_buffer.tail = 0;
    12e2:	00 00 eb    	clr.w     w0
    12e4:	40 40 88    	mov.w     w0, 0x808

000012e6 <.L19>:
    U1_tx_buffer.count++;
    12e6:	50 40 80    	mov.w     0x80a, w0
    12e8:	00 00 e8    	inc.w     w0, w0
    12ea:	50 40 88    	mov.w     w0, 0x80a
    enable_interrupts();
    12ec:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    12ee:	51 40 80    	mov.w     0x80a, w1
    12f0:	00 40 80    	mov.w     0x800, w0
    12f2:	80 8f 50    	sub.w     w1, w0, [w15]
    12f4:	01 00 39    	bra       NC, 0x12f8 <.L17>
        U1STAbits.UTXEN = 1;
    12f6:	23 42 a8    	bset.b    0x223, #0x2

000012f8 <.L17>:
}
    12f8:	00 80 fa    	ulnk      
    12fa:	00 00 06    	return    

000012fc <_U1_getc>:

uint8_t U1_getc(void) {
    12fc:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    12fe:	00 00 00    	nop       

00001300 <.L22>:
    1300:	a0 40 80    	mov.w     0x814, w0
    1302:	00 00 e0    	cp0.w     w0
    1304:	fd ff 32    	bra       Z, 0x1300 <.L22>

    disable_interrupts();
    1306:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    1308:	61 40 80    	mov.w     0x80c, w1
    130a:	80 40 80    	mov.w     0x810, w0
    130c:	00 80 40    	add.w     w1, w0, w0
    130e:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    1310:	80 40 80    	mov.w     0x810, w0
    1312:	00 00 e8    	inc.w     w0, w0
    1314:	80 40 88    	mov.w     w0, 0x810
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    1316:	81 40 80    	mov.w     0x810, w1
    1318:	70 40 80    	mov.w     0x80e, w0
    131a:	80 8f 50    	sub.w     w1, w0, [w15]
    131c:	02 00 3a    	bra       NZ, 0x1322 <.L23>
        U1_rx_buffer.head = 0;
    131e:	00 00 eb    	clr.w     w0
    1320:	80 40 88    	mov.w     w0, 0x810

00001322 <.L23>:
    U1_rx_buffer.count--;
    1322:	a0 40 80    	mov.w     0x814, w0
    1324:	00 00 e9    	dec.w     w0, w0
    1326:	a0 40 88    	mov.w     w0, 0x814
    enable_interrupts();
    1328:	52 20 ef    	clr.w     0x52

    return ch;
    132a:	1e 40 78    	mov.b     [w14], w0
}
    132c:	00 80 fa    	ulnk      
    132e:	00 00 06    	return    

00001330 <_U1_puts>:

void U1_puts(uint8_t *str) {
    1330:	02 00 fa    	lnk       #0x2
    1332:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    1334:	04 00 37    	bra       0x133e <.L25>

00001336 <.L26>:
        U1_putc(*str++);
    1336:	1e 00 78    	mov.w     [w14], w0
    1338:	10 40 78    	mov.b     [w0], w0
    133a:	1e 0f e8    	inc.w     [w14], [w14]
    133c:	bf ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>

0000133e <.L25>:
    133e:	1e 00 78    	mov.w     [w14], w0
    1340:	10 40 78    	mov.b     [w0], w0
    1342:	00 04 e0    	cp0.b     w0
    1344:	f8 ff 3a    	bra       NZ, 0x1336 <.L26>
    U1_flush_tx_buffer();
    1346:	b1 ff 07    	rcall     0x12aa <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    1348:	00 80 fa    	ulnk      
    134a:	00 00 06    	return    

0000134c <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    134c:	04 00 fa    	lnk       #0x4
    134e:	00 0f 78    	mov.w     w0, [w14]
    1350:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    1352:	1e 00 90    	mov.w     [w14+2], w0
    1354:	00 00 e0    	cp0.w     w0
    1356:	1a 00 32    	bra       Z, 0x138c <.L32>
        return;

    if (len == 1) {
    1358:	1e 00 90    	mov.w     [w14+2], w0
    135a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    135c:	04 00 3a    	bra       NZ, 0x1366 <.L30>
        *str = '\0';
    135e:	1e 00 78    	mov.w     [w14], w0
    1360:	80 40 eb    	clr.b     w1
    1362:	01 48 78    	mov.b     w1, [w0]
        return;
    1364:	14 00 37    	bra       0x138e <.L27>

00001366 <.L30>:
    }

    while (1) {
        *str = U1_getc();
    1366:	ca ff 07    	rcall     0x12fc <_U1_getc> <.LFB6> <.LFE5>
    1368:	9e 00 78    	mov.w     [w14], w1
    136a:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    136c:	1e 00 78    	mov.w     [w14], w0
    136e:	10 40 78    	mov.b     [w0], w0
    1370:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    1372:	08 00 32    	bra       Z, 0x1384 <.L31>
    1374:	1e 00 90    	mov.w     [w14+2], w0
    1376:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1378:	05 00 32    	bra       Z, 0x1384 <.L31>
            break;
        str++;
    137a:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    137c:	1e 00 90    	mov.w     [w14+2], w0
    137e:	00 00 e9    	dec.w     w0, w0
    1380:	10 07 98    	mov.w     w0, [w14+2]
    }
    1382:	f1 ff 37    	bra       0x1366 <.L30>

00001384 <.L31>:
    *str = '\0';
    1384:	1e 00 78    	mov.w     [w14], w0
    1386:	80 40 eb    	clr.b     w1
    1388:	01 48 78    	mov.b     w1, [w0]
    138a:	01 00 37    	bra       0x138e <.L27>

0000138c <.L32>:
    138c:	00 00 00    	nop       

0000138e <.L27>:
}
    138e:	00 80 fa    	ulnk      
    1390:	00 00 06    	return    

00001392 <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    1392:	08 00 fa    	lnk       #0x8
    1394:	20 07 98    	mov.w     w0, [w14+4]
    1396:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    1398:	3e 00 90    	mov.w     [w14+6], w0
    139a:	00 00 e0    	cp0.w     w0
    139c:	6f 00 32    	bra       Z, 0x147c <.L46>
        return;

    if (len == 1) {
    139e:	3e 00 90    	mov.w     [w14+6], w0
    13a0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    13a2:	04 00 3a    	bra       NZ, 0x13ac <.L36>
        *str = '\0';
    13a4:	2e 00 90    	mov.w     [w14+4], w0
    13a6:	80 40 eb    	clr.b     w1
    13a8:	01 48 78    	mov.b     w1, [w0]
        return;
    13aa:	69 00 37    	bra       0x147e <.L33>

000013ac <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    13ac:	b0 c1 b3    	mov.b     #0x1b, w0
    13ae:	86 ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    13b0:	70 c3 b3    	mov.b     #0x37, w0
    13b2:	84 ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    13b4:	7a ff 07    	rcall     0x12aa <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    13b6:	ae 00 90    	mov.w     [w14+4], w1
    13b8:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    13ba:	be 00 90    	mov.w     [w14+6], w1
    13bc:	01 0f 78    	mov.w     w1, [w14]
    13be:	03 00 37    	bra       0x13c6 <.L45>

000013c0 <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    13c0:	00 00 00    	nop       
    13c2:	01 00 37    	bra       0x13c6 <.L45>

000013c4 <.L48>:
    13c4:	00 00 00    	nop       

000013c6 <.L45>:
    13c6:	9a ff 07    	rcall     0x12fc <_U1_getc> <.LFB6> <.LFE5>
    13c8:	ae 00 90    	mov.w     [w14+4], w1
    13ca:	80 48 78    	mov.b     w0, [w1]
    13cc:	2e 00 90    	mov.w     [w14+4], w0
    13ce:	10 40 78    	mov.b     [w0], w0
    13d0:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    13d2:	09 00 3a    	bra       NZ, 0x13e6 <.L37>
    *str = '\0';                            // terminarte the string with null
    13d4:	2e 00 90    	mov.w     [w14+4], w0
    13d6:	80 40 eb    	clr.b     w1
    13d8:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    13da:	a0 c0 b3    	mov.b     #0xa, w0
    13dc:	6f ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    13de:	d0 c0 b3    	mov.b     #0xd, w0
    13e0:	6d ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    13e2:	63 ff 07    	rcall     0x12aa <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    13e4:	4c 00 37    	bra       0x147e <.L33>

000013e6 <.L37>:
    13e6:	2e 00 90    	mov.w     [w14+4], w0
    13e8:	10 40 78    	mov.b     [w0], w0
    13ea:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    13ec:	10 00 3a    	bra       NZ, 0x140e <.L38>
    13ee:	b0 c1 b3    	mov.b     #0x1b, w0
    13f0:	65 ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    13f2:	80 c3 b3    	mov.b     #0x38, w0
    13f4:	63 ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    13f6:	b0 c1 b3    	mov.b     #0x1b, w0
    13f8:	61 ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    13fa:	b0 c5 b3    	mov.b     #0x5b, w0
    13fc:	5f ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    13fe:	b0 c4 b3    	mov.b     #0x4b, w0
    1400:	5d ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    1402:	53 ff 07    	rcall     0x12aa <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1404:	9e 00 90    	mov.w     [w14+2], w1
    1406:	21 07 98    	mov.w     w1, [w14+4]
    1408:	be 00 90    	mov.w     [w14+6], w1
    140a:	01 0f 78    	mov.w     w1, [w14]
    140c:	36 00 37    	bra       0x147a <.L39>

0000140e <.L38>:
    140e:	2e 00 90    	mov.w     [w14+4], w0
    1410:	10 40 78    	mov.b     [w0], w0
    1412:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    1414:	05 00 32    	bra       Z, 0x1420 <.L40>
    1416:	2e 00 90    	mov.w     [w14+4], w0
    1418:	90 40 78    	mov.b     [w0], w1
    141a:	f0 c7 b3    	mov.b     #0x7f, w0
    141c:	80 cf 50    	sub.b     w1, w0, [w15]
    141e:	14 00 3a    	bra       NZ, 0x1448 <.L41>

00001420 <.L40>:
    1420:	ae 00 90    	mov.w     [w14+4], w1
    1422:	1e 00 90    	mov.w     [w14+2], w0
    1424:	80 8f 50    	sub.w     w1, w0, [w15]
    1426:	0c 00 36    	bra       LEU, 0x1440 <.L42>
    1428:	80 c0 b3    	mov.b     #0x8, w0
    142a:	48 ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    142c:	00 c2 b3    	mov.b     #0x20, w0
    142e:	46 ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    1430:	80 c0 b3    	mov.b     #0x8, w0
    1432:	44 ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    1434:	3a ff 07    	rcall     0x12aa <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1436:	2e 00 90    	mov.w     [w14+4], w0
    1438:	00 00 e9    	dec.w     w0, w0
    143a:	20 07 98    	mov.w     w0, [w14+4]
    143c:	1e 0f e8    	inc.w     [w14], [w14]
    143e:	03 00 37    	bra       0x1446 <.L43>

00001440 <.L42>:
    1440:	70 c0 b3    	mov.b     #0x7, w0
    1442:	3c ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    1444:	32 ff 07    	rcall     0x12aa <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

00001446 <.L43>:
    1446:	19 00 37    	bra       0x147a <.L39>

00001448 <.L41>:
    1448:	1e 00 78    	mov.w     [w14], w0
    144a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    144c:	04 00 3a    	bra       NZ, 0x1456 <.L44>
    144e:	70 c0 b3    	mov.b     #0x7, w0
    1450:	35 ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    1452:	2b ff 07    	rcall     0x12aa <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1454:	12 00 37    	bra       0x147a <.L39>

00001456 <.L44>:
    1456:	2e 00 90    	mov.w     [w14+4], w0
    1458:	10 40 78    	mov.b     [w0], w0
    145a:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    145c:	b1 ff 36    	bra       LEU, 0x13c0 <.L47>
    145e:	2e 00 90    	mov.w     [w14+4], w0
    1460:	90 40 78    	mov.b     [w0], w1
    1462:	e0 c7 b3    	mov.b     #0x7e, w0
    1464:	80 cf 50    	sub.b     w1, w0, [w15]
    1466:	ae ff 3e    	bra       GTU, 0x13c4 <.L48>
    1468:	2e 00 90    	mov.w     [w14+4], w0
    146a:	10 40 78    	mov.b     [w0], w0
    146c:	27 ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    146e:	1d ff 07    	rcall     0x12aa <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1470:	2e 00 90    	mov.w     [w14+4], w0
    1472:	00 00 e8    	inc.w     w0, w0
    1474:	20 07 98    	mov.w     w0, [w14+4]
    1476:	1e 0f e9    	dec.w     [w14], [w14]
    1478:	a6 ff 37    	bra       0x13c6 <.L45>

0000147a <.L39>:
    147a:	a5 ff 37    	bra       0x13c6 <.L45>

0000147c <.L46>:
    147c:	00 00 00    	nop       

0000147e <.L33>:
}
    147e:	00 80 fa    	ulnk      
    1480:	00 00 06    	return    

00001482 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    1482:	08 00 fa    	lnk       #0x8
    1484:	10 07 98    	mov.w     w0, [w14+2]
    1486:	21 07 98    	mov.w     w1, [w14+4]
    1488:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    148a:	1e 00 90    	mov.w     [w14+2], w0
    148c:	60 00 40    	add.w     w0, #0x0, w0
    148e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1490:	10 00 3e    	bra       GTU, 0x14b2 <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    1492:	00 00 eb    	clr.w     w0
    1494:	00 0f 78    	mov.w     w0, [w14]
    1496:	07 00 37    	bra       0x14a6 <.L52>

00001498 <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    1498:	2e 00 90    	mov.w     [w14+4], w0
    149a:	10 40 78    	mov.b     [w0], w0
    149c:	ae 00 90    	mov.w     [w14+4], w1
    149e:	81 00 e8    	inc.w     w1, w1
    14a0:	21 07 98    	mov.w     w1, [w14+4]
    14a2:	0c ff 07    	rcall     0x12bc <_U1_putc> <.LFB5> <.LFE4>
    14a4:	1e 0f e8    	inc.w     [w14], [w14]

000014a6 <.L52>:
    14a6:	9e 00 78    	mov.w     [w14], w1
    14a8:	3e 00 90    	mov.w     [w14+6], w0
    14aa:	80 8f 50    	sub.w     w1, w0, [w15]
    14ac:	f5 ff 39    	bra       NC, 0x1498 <.L53>
            U1_flush_tx_buffer();
    14ae:	fd fe 07    	rcall     0x12aa <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    14b0:	01 00 37    	bra       0x14b4 <.L54>

000014b2 <.L55>:
        default:
            break;
    14b2:	00 00 00    	nop       

000014b4 <.L54>:
    }
    return len;
    14b4:	3e 00 90    	mov.w     [w14+6], w0
}
    14b6:	00 80 fa    	ulnk      
    14b8:	00 00 06    	return    

000014ba <_delay_by_nop>:
    14ba:	08 00 fa    	lnk       #0x8
    14bc:	20 07 98    	mov.w     w0, [w14+4]
    14be:	31 07 98    	mov.w     w1, [w14+6]
    14c0:	60 00 b8    	mul.uu    w0, #0x0, w0
    14c2:	00 8f be    	mov.d     w0, [w14]
    14c4:	05 00 37    	bra       0x14d0 <.L2>

000014c6 <.L3>:
    14c6:	00 00 00    	nop       
    14c8:	12 00 20    	mov.w     #0x1, w2
    14ca:	03 00 20    	mov.w     #0x0, w3
    14cc:	1e 0f 41    	add.w     w2, [w14], [w14]
    14ce:	5e 97 49    	addc.w    w3, [++w14], [w14--]

000014d0 <.L2>:
    14d0:	2e 00 90    	mov.w     [w14+4], w0
    14d2:	be 00 90    	mov.w     [w14+6], w1
    14d4:	1e 01 be    	mov.d     [w14], w2
    14d6:	80 0f 51    	sub.w     w2, w0, [w15]
    14d8:	81 8f 59    	subb.w    w3, w1, [w15]
    14da:	f5 ff 39    	bra       NC, 0x14c6 <.L3>
    14dc:	00 80 fa    	ulnk      
    14de:	00 00 06    	return    

000014e0 <_i2c_init>:
    14e0:	04 00 fa    	lnk       #0x4
    14e2:	10 07 98    	mov.w     w0, [w14+2]
    14e4:	1e 00 90    	mov.w     [w14+2], w0
    14e6:	a0 13 88    	mov.w     w0, 0x274
    14e8:	77 e2 a9    	bclr.b    0x277, #0x7
    14ea:	77 22 a8    	bset.b    0x277, #0x1
    14ec:	8e a0 a9    	bclr.b    0x8e, #0x5
    14ee:	77 e2 a8    	bset.b    0x277, #0x7
    14f0:	80 13 80    	mov.w     0x270, w0
    14f2:	00 0f 78    	mov.w     w0, [w14]
    14f4:	36 00 07    	rcall     0x1562 <_reset_i2c_bus> <.LFB4> <.LFE3>
    14f6:	00 80 fa    	ulnk      
    14f8:	00 00 06    	return    

000014fa <_i2c_start>:
    14fa:	02 00 fa    	lnk       #0x2
    14fc:	00 00 eb    	clr.w     w0
    14fe:	00 0f 78    	mov.w     w0, [w14]
    1500:	76 a2 a9    	bclr.b    0x276, #0x5
    1502:	a0 00 20    	mov.w     #0xa, w0
    1504:	01 00 20    	mov.w     #0x0, w1
    1506:	d9 ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1508:	76 02 a8    	bset.b    0x276, #0x0
    150a:	00 00 00    	nop       
    150c:	07 00 37    	bra       0x151c <.L6>

0000150e <.L8>:
    150e:	10 00 20    	mov.w     #0x1, w0
    1510:	01 00 20    	mov.w     #0x0, w1
    1512:	d3 ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1514:	1e 0f e8    	inc.w     [w14], [w14]
    1516:	1e 00 78    	mov.w     [w14], w0
    1518:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    151a:	05 00 3c    	bra       GT, 0x1526 <.L9>

0000151c <.L6>:
    151c:	b0 13 80    	mov.w     0x276, w0
    151e:	61 00 60    	and.w     w0, #0x1, w0
    1520:	00 00 e0    	cp0.w     w0
    1522:	f5 ff 3a    	bra       NZ, 0x150e <.L8>
    1524:	01 00 37    	bra       0x1528 <.L7>

00001526 <.L9>:
    1526:	00 00 00    	nop       

00001528 <.L7>:
    1528:	20 00 20    	mov.w     #0x2, w0
    152a:	01 00 20    	mov.w     #0x0, w1
    152c:	c6 ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    152e:	00 80 fa    	ulnk      
    1530:	00 00 06    	return    

00001532 <_i2c_restart>:
    1532:	02 00 fa    	lnk       #0x2
    1534:	00 00 eb    	clr.w     w0
    1536:	00 0f 78    	mov.w     w0, [w14]
    1538:	76 22 a8    	bset.b    0x276, #0x1
    153a:	00 00 00    	nop       
    153c:	07 00 37    	bra       0x154c <.L11>

0000153e <.L13>:
    153e:	10 00 20    	mov.w     #0x1, w0
    1540:	01 00 20    	mov.w     #0x0, w1
    1542:	bb ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1544:	1e 0f e8    	inc.w     [w14], [w14]
    1546:	1e 00 78    	mov.w     [w14], w0
    1548:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    154a:	05 00 3c    	bra       GT, 0x1556 <.L14>

0000154c <.L11>:
    154c:	b0 13 80    	mov.w     0x276, w0
    154e:	62 00 60    	and.w     w0, #0x2, w0
    1550:	00 00 e0    	cp0.w     w0
    1552:	f5 ff 3a    	bra       NZ, 0x153e <.L13>
    1554:	01 00 37    	bra       0x1558 <.L12>

00001556 <.L14>:
    1556:	00 00 00    	nop       

00001558 <.L12>:
    1558:	20 00 20    	mov.w     #0x2, w0
    155a:	01 00 20    	mov.w     #0x0, w1
    155c:	ae ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    155e:	00 80 fa    	ulnk      
    1560:	00 00 06    	return    

00001562 <_reset_i2c_bus>:
    1562:	02 00 fa    	lnk       #0x2
    1564:	00 00 eb    	clr.w     w0
    1566:	00 0f 78    	mov.w     w0, [w14]
    1568:	76 42 a8    	bset.b    0x276, #0x2
    156a:	07 00 37    	bra       0x157a <.L16>

0000156c <.L18>:
    156c:	10 00 20    	mov.w     #0x1, w0
    156e:	01 00 20    	mov.w     #0x0, w1
    1570:	a4 ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1572:	1e 0f e8    	inc.w     [w14], [w14]
    1574:	1e 00 78    	mov.w     [w14], w0
    1576:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    1578:	05 00 3c    	bra       GT, 0x1584 <.L19>

0000157a <.L16>:
    157a:	b0 13 80    	mov.w     0x276, w0
    157c:	64 00 60    	and.w     w0, #0x4, w0
    157e:	00 00 e0    	cp0.w     w0
    1580:	f5 ff 3a    	bra       NZ, 0x156c <.L18>
    1582:	01 00 37    	bra       0x1586 <.L17>

00001584 <.L19>:
    1584:	00 00 00    	nop       

00001586 <.L17>:
    1586:	76 62 a9    	bclr.b    0x276, #0x3
    1588:	8e a0 a9    	bclr.b    0x8e, #0x5
    158a:	78 e2 a9    	bclr.b    0x278, #0x7
    158c:	79 42 a9    	bclr.b    0x279, #0x2
    158e:	a0 00 20    	mov.w     #0xa, w0
    1590:	01 00 20    	mov.w     #0x0, w1
    1592:	93 ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1594:	00 80 fa    	ulnk      
    1596:	00 00 06    	return    

00001598 <_send_i2c_byte>:
    1598:	04 00 fa    	lnk       #0x4
    159a:	10 07 98    	mov.w     w0, [w14+2]
    159c:	00 00 00    	nop       

0000159e <.L21>:
    159e:	c0 13 80    	mov.w     0x278, w0
    15a0:	61 00 60    	and.w     w0, #0x1, w0
    15a2:	00 00 e0    	cp0.w     w0
    15a4:	fc ff 3a    	bra       NZ, 0x159e <.L21>
    15a6:	8e a0 a9    	bclr.b    0x8e, #0x5
    15a8:	1e 00 90    	mov.w     [w14+2], w0
    15aa:	90 13 88    	mov.w     w0, 0x272
    15ac:	00 00 eb    	clr.w     w0
    15ae:	00 0f 78    	mov.w     w0, [w14]
    15b0:	09 00 37    	bra       0x15c4 <.L22>

000015b2 <.L25>:
    15b2:	c1 13 80    	mov.w     0x278, w1
    15b4:	00 00 24    	mov.w     #0x4000, w0
    15b6:	00 80 60    	and.w     w1, w0, w0
    15b8:	00 00 e0    	cp0.w     w0
    15ba:	09 00 32    	bra       Z, 0x15ce <.L29>
    15bc:	10 00 20    	mov.w     #0x1, w0
    15be:	01 00 20    	mov.w     #0x0, w1
    15c0:	7c ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    15c2:	1e 0f e8    	inc.w     [w14], [w14]

000015c4 <.L22>:
    15c4:	30 1f 20    	mov.w     #0x1f3, w0
    15c6:	9e 00 78    	mov.w     [w14], w1
    15c8:	80 8f 50    	sub.w     w1, w0, [w15]
    15ca:	f3 ff 34    	bra       LE, 0x15b2 <.L25>
    15cc:	01 00 37    	bra       0x15d0 <.L24>

000015ce <.L29>:
    15ce:	00 00 00    	nop       

000015d0 <.L24>:
    15d0:	40 1f 20    	mov.w     #0x1f4, w0
    15d2:	9e 00 78    	mov.w     [w14], w1
    15d4:	80 8f 50    	sub.w     w1, w0, [w15]
    15d6:	02 00 3a    	bra       NZ, 0x15dc <.L26>
    15d8:	10 c0 b3    	mov.b     #0x1, w0
    15da:	0c 00 37    	bra       0x15f4 <.L27>

000015dc <.L26>:
    15dc:	c1 13 80    	mov.w     0x278, w1
    15de:	00 00 28    	mov.w     #0x8000, w0
    15e0:	00 80 60    	and.w     w1, w0, w0
    15e2:	00 00 e0    	cp0.w     w0
    15e4:	03 00 32    	bra       Z, 0x15ec <.L28>
    15e6:	bd ff 07    	rcall     0x1562 <_reset_i2c_bus> <.LFB4> <.LFE3>
    15e8:	10 c0 b3    	mov.b     #0x1, w0
    15ea:	04 00 37    	bra       0x15f4 <.L27>

000015ec <.L28>:
    15ec:	20 00 20    	mov.w     #0x2, w0
    15ee:	01 00 20    	mov.w     #0x0, w1
    15f0:	64 ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    15f2:	00 40 eb    	clr.b     w0

000015f4 <.L27>:
    15f4:	00 80 fa    	ulnk      
    15f6:	00 00 06    	return    

000015f8 <_i2c_read>:
    15f8:	04 00 fa    	lnk       #0x4
    15fa:	00 00 eb    	clr.w     w0
    15fc:	00 0f 78    	mov.w     w0, [w14]
    15fe:	00 40 eb    	clr.b     w0
    1600:	20 47 98    	mov.b     w0, [w14+2]
    1602:	76 62 a8    	bset.b    0x276, #0x3
    1604:	05 00 37    	bra       0x1610 <.L31>

00001606 <.L33>:
    1606:	1e 0f e8    	inc.w     [w14], [w14]
    1608:	00 7d 20    	mov.w     #0x7d0, w0
    160a:	9e 00 78    	mov.w     [w14], w1
    160c:	80 8f 50    	sub.w     w1, w0, [w15]
    160e:	05 00 3c    	bra       GT, 0x161a <.L34>

00001610 <.L31>:
    1610:	c0 13 80    	mov.w     0x278, w0
    1612:	62 00 60    	and.w     w0, #0x2, w0
    1614:	00 00 e0    	cp0.w     w0
    1616:	f7 ff 32    	bra       Z, 0x1606 <.L33>
    1618:	01 00 37    	bra       0x161c <.L32>

0000161a <.L34>:
    161a:	00 00 00    	nop       

0000161c <.L32>:
    161c:	80 13 80    	mov.w     0x270, w0
    161e:	20 47 98    	mov.b     w0, [w14+2]
    1620:	2e 40 90    	mov.b     [w14+2], w0
    1622:	00 80 fa    	ulnk      
    1624:	00 00 06    	return    

00001626 <_i2c_read_ack>:
    1626:	04 00 fa    	lnk       #0x4
    1628:	00 00 eb    	clr.w     w0
    162a:	00 0f 78    	mov.w     w0, [w14]
    162c:	00 40 eb    	clr.b     w0
    162e:	20 47 98    	mov.b     w0, [w14+2]
    1630:	76 62 a8    	bset.b    0x276, #0x3
    1632:	05 00 37    	bra       0x163e <.L36>

00001634 <.L38>:
    1634:	1e 0f e8    	inc.w     [w14], [w14]
    1636:	00 7d 20    	mov.w     #0x7d0, w0
    1638:	9e 00 78    	mov.w     [w14], w1
    163a:	80 8f 50    	sub.w     w1, w0, [w15]
    163c:	05 00 3c    	bra       GT, 0x1648 <.L39>

0000163e <.L36>:
    163e:	c0 13 80    	mov.w     0x278, w0
    1640:	62 00 60    	and.w     w0, #0x2, w0
    1642:	00 00 e0    	cp0.w     w0
    1644:	f7 ff 32    	bra       Z, 0x1634 <.L38>
    1646:	01 00 37    	bra       0x164a <.L37>

00001648 <.L39>:
    1648:	00 00 00    	nop       

0000164a <.L37>:
    164a:	80 13 80    	mov.w     0x270, w0
    164c:	20 47 98    	mov.b     w0, [w14+2]
    164e:	76 82 a8    	bset.b    0x276, #0x4
    1650:	a0 00 20    	mov.w     #0xa, w0
    1652:	01 00 20    	mov.w     #0x0, w1
    1654:	32 ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    1656:	2e 40 90    	mov.b     [w14+2], w0
    1658:	00 80 fa    	ulnk      
    165a:	00 00 06    	return    

0000165c <_I2Cwrite>:
    165c:	04 00 fa    	lnk       #0x4
    165e:	00 4f 78    	mov.b     w0, [w14]
    1660:	11 47 98    	mov.b     w1, [w14+1]
    1662:	22 47 98    	mov.b     w2, [w14+2]
    1664:	4a ff 07    	rcall     0x14fa <_i2c_start> <.LFB2> <.LFE1>
    1666:	1e 00 fb    	se        [w14], w0
    1668:	80 00 78    	mov.w     w0, w1
    166a:	e0 ff 2f    	mov.w     #0xfffe, w0
    166c:	00 80 60    	and.w     w1, w0, w0
    166e:	94 ff 07    	rcall     0x1598 <_send_i2c_byte> <.LFB5> <.LFE4>
    1670:	1e 40 90    	mov.b     [w14+1], w0
    1672:	00 00 fb    	se        w0, w0
    1674:	91 ff 07    	rcall     0x1598 <_send_i2c_byte> <.LFB5> <.LFE4>
    1676:	2e 40 90    	mov.b     [w14+2], w0
    1678:	00 00 fb    	se        w0, w0
    167a:	8e ff 07    	rcall     0x1598 <_send_i2c_byte> <.LFB5> <.LFE4>
    167c:	72 ff 07    	rcall     0x1562 <_reset_i2c_bus> <.LFB4> <.LFE3>
    167e:	00 80 fa    	ulnk      
    1680:	00 00 06    	return    

00001682 <_I2Cread>:
    1682:	04 00 fa    	lnk       #0x4
    1684:	20 47 98    	mov.b     w0, [w14+2]
    1686:	31 47 98    	mov.b     w1, [w14+3]
    1688:	38 ff 07    	rcall     0x14fa <_i2c_start> <.LFB2> <.LFE1>
    168a:	2e 40 90    	mov.b     [w14+2], w0
    168c:	00 00 fb    	se        w0, w0
    168e:	84 ff 07    	rcall     0x1598 <_send_i2c_byte> <.LFB5> <.LFE4>
    1690:	3e 40 90    	mov.b     [w14+3], w0
    1692:	00 00 fb    	se        w0, w0
    1694:	81 ff 07    	rcall     0x1598 <_send_i2c_byte> <.LFB5> <.LFE4>
    1696:	a0 00 20    	mov.w     #0xa, w0
    1698:	01 00 20    	mov.w     #0x0, w1
    169a:	0f ff 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>
    169c:	4a ff 07    	rcall     0x1532 <_i2c_restart> <.LFB3> <.LFE2>
    169e:	2e 40 90    	mov.b     [w14+2], w0
    16a0:	00 04 a0    	bset.b    w0, #0x0
    16a2:	00 00 fb    	se        w0, w0
    16a4:	79 ff 07    	rcall     0x1598 <_send_i2c_byte> <.LFB5> <.LFE4>
    16a6:	a8 ff 07    	rcall     0x15f8 <_i2c_read> <.LFB6> <.LFE5>
    16a8:	00 4f 78    	mov.b     w0, [w14]
    16aa:	5b ff 07    	rcall     0x1562 <_reset_i2c_bus> <.LFB4> <.LFE3>
    16ac:	1e 40 78    	mov.b     [w14], w0
    16ae:	00 80 fa    	ulnk      
    16b0:	00 00 06    	return    

000016b2 <_I2Cpoll>:
    16b2:	04 00 fa    	lnk       #0x4
    16b4:	20 47 98    	mov.b     w0, [w14+2]
    16b6:	00 40 eb    	clr.b     w0
    16b8:	00 4f 78    	mov.b     w0, [w14]
    16ba:	1f ff 07    	rcall     0x14fa <_i2c_start> <.LFB2> <.LFE1>
    16bc:	2e 40 90    	mov.b     [w14+2], w0
    16be:	00 00 fb    	se        w0, w0
    16c0:	80 00 78    	mov.w     w0, w1
    16c2:	e0 ff 2f    	mov.w     #0xfffe, w0
    16c4:	00 80 60    	and.w     w1, w0, w0
    16c6:	68 ff 07    	rcall     0x1598 <_send_i2c_byte> <.LFB5> <.LFE4>
    16c8:	00 4f 78    	mov.b     w0, [w14]
    16ca:	4b ff 07    	rcall     0x1562 <_reset_i2c_bus> <.LFB4> <.LFE3>
    16cc:	1e 40 78    	mov.b     [w14], w0
    16ce:	00 80 fa    	ulnk      
    16d0:	00 00 06    	return    

000016d2 <_I2Cwritearray>:
    16d2:	08 00 fa    	lnk       #0x8
    16d4:	20 47 98    	mov.b     w0, [w14+2]
    16d6:	21 07 98    	mov.w     w1, [w14+4]
    16d8:	62 47 98    	mov.b     w2, [w14+6]
    16da:	00 40 eb    	clr.b     w0
    16dc:	00 4f 78    	mov.b     w0, [w14]
    16de:	0d ff 07    	rcall     0x14fa <_i2c_start> <.LFB2> <.LFE1>
    16e0:	2e 40 90    	mov.b     [w14+2], w0
    16e2:	00 00 fb    	se        w0, w0
    16e4:	80 00 78    	mov.w     w0, w1
    16e6:	e0 ff 2f    	mov.w     #0xfffe, w0
    16e8:	00 80 60    	and.w     w1, w0, w0
    16ea:	56 ff 07    	rcall     0x1598 <_send_i2c_byte> <.LFB5> <.LFE4>
    16ec:	00 4f 78    	mov.b     w0, [w14]
    16ee:	00 40 eb    	clr.b     w0
    16f0:	10 47 98    	mov.b     w0, [w14+1]
    16f2:	0d 00 37    	bra       0x170e <.L44>

000016f4 <.L45>:
    16f4:	1e 40 90    	mov.b     [w14+1], w0
    16f6:	00 80 fb    	ze        w0, w0
    16f8:	ae 00 90    	mov.w     [w14+4], w1
    16fa:	00 80 40    	add.w     w1, w0, w0
    16fc:	10 40 78    	mov.b     [w0], w0
    16fe:	00 00 fb    	se        w0, w0
    1700:	4b ff 07    	rcall     0x1598 <_send_i2c_byte> <.LFB5> <.LFE4>
    1702:	9e 40 78    	mov.b     [w14], w1
    1704:	01 40 70    	ior.b     w0, w1, w0
    1706:	00 4f 78    	mov.b     w0, [w14]
    1708:	1e 40 90    	mov.b     [w14+1], w0
    170a:	00 40 e8    	inc.b     w0, w0
    170c:	10 47 98    	mov.b     w0, [w14+1]

0000170e <.L44>:
    170e:	9e 40 90    	mov.b     [w14+1], w1
    1710:	6e 40 90    	mov.b     [w14+6], w0
    1712:	80 cf 50    	sub.b     w1, w0, [w15]
    1714:	ef ff 39    	bra       NC, 0x16f4 <.L45>
    1716:	25 ff 07    	rcall     0x1562 <_reset_i2c_bus> <.LFB4> <.LFE3>
    1718:	1e 40 78    	mov.b     [w14], w0
    171a:	00 80 fa    	ulnk      
    171c:	00 00 06    	return    
Disassembly of section .isr.text:

0000171e <__U1TXInterrupt>:
    U1MODEbits.UARTEN = 1;          // enable UART1 module
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
}

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    171e:	80 9f be    	mov.d     w0, [w15++]
    1720:	32 00 f8    	push      0x32
    1722:	34 00 f8    	push      0x34
    1724:	10 00 20    	mov.w     #0x1, w0
    1726:	a0 01 88    	mov.w     w0, 0x34
    1728:	10 00 20    	mov.w     #0x1, w0
    172a:	90 01 88    	mov.w     w0, 0x32
    172c:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    172e:	85 80 a9    	bclr.b    0x85, #0x4

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
    1730:	50 40 80    	mov.w     0x80a, w0
    1732:	00 00 e0    	cp0.w     w0
    1734:	17 00 3a    	bra       NZ, 0x1764 <.L8>
        U1STAbits.UTXEN = 0;        //   disable data transmission
    1736:	23 42 a9    	bclr.b    0x223, #0x2

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
    1738:	16 00 37    	bra       0x1766 <.L4>

0000173a <.L7>:
        disable_interrupts();
    173a:	ff 3f fc    	disi      #0x3fff
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
    173c:	11 40 80    	mov.w     0x802, w1
    173e:	30 40 80    	mov.w     0x806, w0
    1740:	00 80 40    	add.w     w1, w0, w0
    1742:	10 4f 78    	mov.b     [w0], [w14]
        U1_tx_buffer.head++;
    1744:	30 40 80    	mov.w     0x806, w0
    1746:	00 00 e8    	inc.w     w0, w0
    1748:	30 40 88    	mov.w     w0, 0x806
        if (U1_tx_buffer.head == U1_tx_buffer.length)
    174a:	31 40 80    	mov.w     0x806, w1
    174c:	20 40 80    	mov.w     0x804, w0
    174e:	80 8f 50    	sub.w     w1, w0, [w15]
    1750:	02 00 3a    	bra       NZ, 0x1756 <.L5>
            U1_tx_buffer.head = 0;
    1752:	00 00 eb    	clr.w     w0
    1754:	30 40 88    	mov.w     w0, 0x806

00001756 <.L5>:
        U1_tx_buffer.count--;
    1756:	50 40 80    	mov.w     0x80a, w0
    1758:	00 00 e9    	dec.w     w0, w0
    175a:	50 40 88    	mov.w     w0, 0x80a
        enable_interrupts();
    175c:	52 20 ef    	clr.w     0x52
        U1TXREG = (uint16_t)ch;
    175e:	1e 80 fb    	ze        [w14], w0
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    return U1_rx_buffer.count;
}

void U1_flush_tx_buffer(void) {
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
        U1STAbits.UTXEN = 1;        //   enable it
}

void U1_putc(uint8_t ch) {
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}

    disable_interrupts();
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    U1_tx_buffer.tail++;
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
        U1_tx_buffer.tail = 0;
    U1_tx_buffer.count++;
    enable_interrupts();

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
        U1STAbits.UTXEN = 1;
}

uint8_t U1_getc(void) {
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}

    disable_interrupts();
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    U1_rx_buffer.head++;
    if (U1_rx_buffer.head == U1_rx_buffer.length)
        U1_rx_buffer.head = 0;
    U1_rx_buffer.count--;
    enable_interrupts();

    return ch;
}

void U1_puts(uint8_t *str) {
    while (*str)
        U1_putc(*str++);
    U1_flush_tx_buffer();
}

void U1_gets(uint8_t *str, uint16_t len) {
    if (len == 0)
        return;

    if (len == 1) {
        *str = '\0';
        return;
    }

    while (1) {
        *str = U1_getc();
        if ((*str == '\r') || (len == 1))
            break;
        str++;
        len--;
    }
    *str = '\0';
}

void U1_gets_term(uint8_t *str, uint16_t len) {
    uint8_t *start;
    uint16_t left;

    if (len == 0)
        return;

    if (len == 1) {
        *str = '\0';
        return;
    }

    U1_putc(0x1B);                          // save current cursor position
    U1_putc('7');
    U1_flush_tx_buffer();
    start = str;
    left = len;
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    *str = '\0';                            // terminarte the string with null
    U1_putc('\n');                          // send newline and
    U1_putc('\r');                          //   carriage return
    U1_flush_tx_buffer();
}

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    int16_t i;

    switch (handle) {
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
                U1_putc(*(uint8_t *)buffer++);
            U1_flush_tx_buffer();
            break;
        default:
            break;
    }
    return len;
}
    1760:	20 11 88    	mov.w     w0, 0x224
    1762:	01 00 37    	bra       0x1766 <.L4>

00001764 <.L8>:
    1764:	00 00 00    	nop       

00001766 <.L4>:
    1766:	11 11 80    	mov.w     0x222, w1
    1768:	00 20 20    	mov.w     #0x200, w0
    176a:	00 80 60    	and.w     w1, w0, w0
    176c:	00 00 e0    	cp0.w     w0
    176e:	03 00 3a    	bra       NZ, 0x1776 <.L2>
    1770:	50 40 80    	mov.w     0x80a, w0
    1772:	00 00 e0    	cp0.w     w0
    1774:	e2 ff 3a    	bra       NZ, 0x173a <.L7>

00001776 <.L2>:
    1776:	00 80 fa    	ulnk      
    1778:	34 00 f9    	pop       0x34
    177a:	32 00 f9    	pop       0x32
    177c:	4f 00 be    	mov.d     [--w15], w0
    177e:	00 40 06    	retfie    

00001780 <__U1RXInterrupt>:
    1780:	80 9f be    	mov.d     w0, [w15++]
    1782:	32 00 f8    	push      0x32
    1784:	34 00 f8    	push      0x34
    1786:	10 00 20    	mov.w     #0x1, w0
    1788:	a0 01 88    	mov.w     w0, 0x34
    178a:	10 00 20    	mov.w     #0x1, w0
    178c:	90 01 88    	mov.w     w0, 0x32
    178e:	00 00 fa    	lnk       #0x0
    1790:	85 60 a9    	bclr.b    0x85, #0x3
    1792:	14 00 37    	bra       0x17bc <.L10>

00001794 <.L13>:
    1794:	ff 3f fc    	disi      #0x3fff
    1796:	61 40 80    	mov.w     0x80c, w1
    1798:	90 40 80    	mov.w     0x812, w0
    179a:	00 80 40    	add.w     w1, w0, w0
    179c:	31 11 80    	mov.w     0x226, w1
    179e:	81 40 78    	mov.b     w1, w1
    17a0:	01 48 78    	mov.b     w1, [w0]
    17a2:	90 40 80    	mov.w     0x812, w0
    17a4:	00 00 e8    	inc.w     w0, w0
    17a6:	90 40 88    	mov.w     w0, 0x812
    17a8:	91 40 80    	mov.w     0x812, w1
    17aa:	70 40 80    	mov.w     0x80e, w0
    17ac:	80 8f 50    	sub.w     w1, w0, [w15]
    17ae:	02 00 3a    	bra       NZ, 0x17b4 <.L11>
    17b0:	00 00 eb    	clr.w     w0
    17b2:	90 40 88    	mov.w     w0, 0x812

000017b4 <.L11>:
    17b4:	a0 40 80    	mov.w     0x814, w0
    17b6:	00 00 e8    	inc.w     w0, w0
    17b8:	a0 40 88    	mov.w     w0, 0x814
    17ba:	52 20 ef    	clr.w     0x52

000017bc <.L10>:
    17bc:	10 11 80    	mov.w     0x222, w0
    17be:	61 00 60    	and.w     w0, #0x1, w0
    17c0:	00 00 e0    	cp0.w     w0
    17c2:	04 00 32    	bra       Z, 0x17cc <.L9>
    17c4:	a1 40 80    	mov.w     0x814, w1
    17c6:	70 40 80    	mov.w     0x80e, w0
    17c8:	80 8f 50    	sub.w     w1, w0, [w15]
    17ca:	e4 ff 3a    	bra       NZ, 0x1794 <.L13>

000017cc <.L9>:
    17cc:	00 80 fa    	ulnk      
    17ce:	34 00 f9    	pop       0x34
    17d0:	32 00 f9    	pop       0x32
    17d2:	4f 00 be    	mov.d     [--w15], w0
    17d4:	00 40 06    	retfie    
Disassembly of section .text:

000017d6 <_init_elecanisms>:
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}
    17d6:	00 00 fa    	lnk       #0x0
    17d8:	00 10 20    	mov.w     #0x100, w0
    17da:	20 3a 88    	mov.w     w0, 0x744
    17dc:	d8 a2 a8    	bset.b    0x2d8, #0x5
    17de:	d8 82 a8    	bset.b    0x2d8, #0x4
    17e0:	e8 82 a8    	bset.b    0x2e8, #0x4
    17e2:	e8 a2 a8    	bset.b    0x2e8, #0x5
    17e4:	c9 e2 a8    	bset.b    0x2c9, #0x7
    17e6:	e8 62 a8    	bset.b    0x2e8, #0x3
    17e8:	d9 02 a8    	bset.b    0x2d9, #0x0
    17ea:	d9 62 a8    	bset.b    0x2d9, #0x3
    17ec:	d9 22 a8    	bset.b    0x2d9, #0x1
    17ee:	d9 42 a8    	bset.b    0x2d9, #0x2
    17f0:	d8 02 a8    	bset.b    0x2d8, #0x0
    17f2:	d8 22 a8    	bset.b    0x2d8, #0x1
    17f4:	d8 42 a8    	bset.b    0x2d8, #0x2
    17f6:	d8 62 a8    	bset.b    0x2d8, #0x3
    17f8:	c8 a2 a8    	bset.b    0x2c8, #0x5
    17fa:	c8 82 a8    	bset.b    0x2c8, #0x4
    17fc:	c8 62 a8    	bset.b    0x2c8, #0x3
    17fe:	c8 42 a8    	bset.b    0x2c8, #0x2
    1800:	c8 22 a8    	bset.b    0x2c8, #0x1
    1802:	c8 02 a8    	bset.b    0x2c8, #0x0
    1804:	f0 03 20    	mov.w     #0x3f, w0
    1806:	10 27 88    	mov.w     w0, 0x4e2
    1808:	e4 24 ef    	clr.w     0x4e4
    180a:	e6 24 ef    	clr.w     0x4e6
    180c:	ea 24 ef    	clr.w     0x4ea
    180e:	ec 24 ef    	clr.w     0x4ec
    1810:	00 0e 20    	mov.w     #0xe0, w0
    1812:	00 19 88    	mov.w     w0, 0x320
    1814:	22 23 ef    	clr.w     0x322
    1816:	00 c4 20    	mov.w     #0xc40, w0
    1818:	20 19 88    	mov.w     w0, 0x324
    181a:	50 00 20    	mov.w     #0x5, w0
    181c:	40 19 88    	mov.w     w0, 0x328
    181e:	21 e3 a8    	bset.b    0x321, #0x7
    1820:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    1822:	dc e2 a9    	bclr.b    0x2dc, #0x7
    1824:	e8 02 a9    	bclr.b    0x2e8, #0x0
    1826:	ec 02 a9    	bclr.b    0x2ec, #0x0
    1828:	e8 22 a9    	bclr.b    0x2e8, #0x1
    182a:	ec 22 a9    	bclr.b    0x2ec, #0x1
    182c:	d1 e2 a8    	bset.b    0x2d1, #0x7
    182e:	d1 82 a8    	bset.b    0x2d1, #0x4
    1830:	c9 82 a8    	bset.b    0x2c9, #0x4
    1832:	00 80 fa    	ulnk      
    1834:	00 00 06    	return    

00001836 <_read_analog>:
    1836:	02 00 fa    	lnk       #0x2
    1838:	00 0f 78    	mov.w     w0, [w14]
    183a:	9e 00 78    	mov.w     [w14], w1
    183c:	41 19 88    	mov.w     w1, 0x328
    183e:	20 23 a8    	bset.b    0x320, #0x1
    1840:	00 00 00    	nop       

00001842 <.L3>:
    1842:	00 19 80    	mov.w     0x320, w0
    1844:	61 00 60    	and.w     w0, #0x1, w0
    1846:	00 00 e0    	cp0.w     w0
    1848:	fc ff 32    	bra       Z, 0x1842 <.L3>
    184a:	00 18 80    	mov.w     0x300, w0
    184c:	00 80 fa    	ulnk      
    184e:	00 00 06    	return    

00001850 <_main>:
    1850:	00 00 fa    	lnk       #0x0
    1852:	c1 ff 07    	rcall     0x17d6 <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    1854:	00 00 20    	mov.w     #0x0, w0
    1856:	a1 47 24    	mov.w     #0x447a, w1
    1858:	43 fe 07    	rcall     0x14e0 <_i2c_init> <.LFB1> <.LFE0>
    185a:	77 e2 a9    	bclr.b    0x277, #0x7
    185c:	7c 22 ef    	clr.w     0x27c
    185e:	20 02 20    	mov.w     #0x22, w0
    1860:	d0 13 88    	mov.w     w0, 0x27a
    1862:	77 e2 a9    	bclr.b    0x277, #0x7

00001864 <.L2>:
    1864:	e1 16 80    	mov.w     0x2dc, w1
    1866:	00 08 20    	mov.w     #0x80, w0
    1868:	00 80 60    	and.w     w1, w0, w0
    186a:	00 f0 a7    	btsc.w    w0, #0xf
    186c:	00 00 ea    	neg.w     w0, w0
    186e:	00 00 e9    	dec.w     w0, w0
    1870:	4f 00 de    	lsr.w     w0, #0xf, w0
    1872:	00 40 78    	mov.b     w0, w0
    1874:	00 80 fb    	ze        w0, w0
    1876:	61 00 60    	and.w     w0, #0x1, w0
    1878:	47 00 dd    	sl.w      w0, #0x7, w0
    187a:	e2 16 80    	mov.w     0x2dc, w2
    187c:	f1 f7 2f    	mov.w     #0xff7f, w1
    187e:	81 00 61    	and.w     w2, w1, w1
    1880:	01 00 70    	ior.w     w0, w1, w0
    1882:	e0 16 88    	mov.w     w0, 0x2dc
    1884:	00 12 2a    	mov.w     #0xa120, w0
    1886:	71 00 20    	mov.w     #0x7, w1
    1888:	18 fe 07    	rcall     0x14ba <_delay_by_nop> <.L0> <.LFB0> <.LFE10> <.Letext0> <.Ltext0>

0000188a <.LBE2>:
    188a:	ec ff 37    	bra       0x1864 <.L2> <.LBB2>
Disassembly of section .dinit:

0000188c <.dinit>:
    188c:	02 08 00    	nop       
    188e:	14 08 00    	nop       
    1890:	80 00 00    	nop       
    1892:	00 08 00    	nop       
    1894:	02 00 00    	nop       
    1896:	80 00 00    	nop       
    1898:	00 00 00    	nop       
Disassembly of section .isr:

0000189a <__DefaultInterrupt>:
    189a:	00 40 da    	break     
    189c:	00 00 fe    	reset     
