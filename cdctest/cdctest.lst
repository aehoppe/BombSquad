
cdctest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	90 2a 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	90 2a 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	90 2a 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	90 2a 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	90 2a 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	90 2a 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	90 2a 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	90 2a 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	90 2a 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	90 2a 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	90 2a 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	90 2a 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	90 2a 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	90 2a 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	90 2a 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	90 2a 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	90 2a 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	90 2a 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	90 2a 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	90 2a 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	90 2a 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	90 2a 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	90 2a 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	90 2a 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	90 2a 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	90 2a 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	90 2a 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	90 2a 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	90 2a 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	90 2a 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	90 2a 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	90 2a 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	90 2a 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	90 2a 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	90 2a 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	90 2a 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	90 2a 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	90 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	90 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	90 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	90 2a 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	90 2a 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	90 2a 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	90 2a 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	90 2a 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	90 2a 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	90 2a 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	90 2a 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	90 2a 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	90 2a 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	90 2a 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	90 2a 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	90 2a 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	90 2a 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	90 2a 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	90 2a 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	90 2a 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	90 2a 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	90 2a 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	90 2a 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	90 2a 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	90 2a 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	90 2a 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	90 2a 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	90 2a 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	90 2a 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	90 2a 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	90 2a 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	90 2a 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	90 2a 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	ef d4 20    	mov.w     #0xd4e, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	be 00 07    	rcall     0x12a2 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	00 8b 22    	mov.w     #0x28b0, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	ae 29 02    	call      0x29ae <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	80 0c 20    	mov.w     #0xc8, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	b0 24 04    	goto      0x24b0 <_cdc_setup_callback>
    1216:	00 00 00 
    1218:	50 26 04    	goto      0x2650 <_cdc_rx_service>
    121a:	00 00 00 
    121c:	da 25 04    	goto      0x25da <_cdc_tx_service>
    121e:	00 00 00 
    1220:	64 29 04    	goto      0x2964 <_set_config_callback>
    1222:	00 00 00 
    1224:	62 24 04    	goto      0x2462 <_cdc_set_line_coding_out_callback>
    1226:	00 00 00 
    1228:	28 1b 04    	goto      0x1b28 <_usb_set_address_callback>
    122a:	00 00 00 
    122c:	6e 23 04    	goto      0x236e <_usb_send_data_packet>
    122e:	00 00 00 
    1230:	a4 12 04    	goto      0x12a4 <_prout>
    1232:	00 00 00 
    1234:	ce 14 04    	goto      0x14ce <_closeall>
    1236:	00 00 00 
    1238:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    123a:	00 00 00 

0000123c <_close>:
    123c:	0a 00 fa    	lnk       #0xa
    123e:	11 00 20    	mov.w     #0x1, w1
    1240:	b1 bf 9f    	mov.w     w1, [w15-10]
    1242:	c0 bf 9f    	mov.w     w0, [w15-8]
    1244:	6a 80 57    	sub.w     w15, #0xa, w0
    1246:	e3 03 07    	rcall     0x1a0e <_doclose>
    1248:	4f b8 97    	mov.w     [w15-8], w0
    124a:	00 80 fa    	ulnk      
    124c:	00 00 06    	return    

0000124e <_remove>:
    124e:	0a 00 fa    	lnk       #0xa
    1250:	51 00 20    	mov.w     #0x5, w1
    1252:	b1 bf 9f    	mov.w     w1, [w15-10]
    1254:	c0 bf 9f    	mov.w     w0, [w15-8]
    1256:	6a 80 57    	sub.w     w15, #0xa, w0
    1258:	dc 03 07    	rcall     0x1a12 <_doremove>
    125a:	5f b8 97    	mov.w     [w15-6], w0
    125c:	00 80 fa    	ulnk      
    125e:	00 00 06    	return    

00001260 <_sbrk>:
    1260:	88 9f be    	mov.d     w8, [w15++]
    1262:	80 04 78    	mov.w     w0, w9
    1264:	60 5b 80    	mov.w     0xb6c, w0
    1266:	00 00 e0    	cp0.w     w0
    1268:	04 00 3a    	bra       NZ, 0x1272 <.L2>
    126a:	0e 00 07    	rcall     0x1288 <_brk>
    126c:	00 84 eb    	setm.w    w8
    126e:	00 00 e0    	cp0.w     w0
    1270:	08 00 35    	bra       LT, 0x1282 <.L3>

00001272 <.L2>:
    1272:	68 5b 80    	mov.w     0xb6c, w8
    1274:	09 00 e0    	cp0.w     w9
    1276:	05 00 32    	bra       Z, 0x1282 <.L3>
    1278:	09 00 44    	add.w     w8, w9, w0
    127a:	06 00 07    	rcall     0x1288 <_brk>
    127c:	00 00 e0    	cp0.w     w0
    127e:	01 00 3d    	bra       GE, 0x1282 <.L3>
    1280:	00 84 eb    	setm.w    w8

00001282 <.L3>:
    1282:	08 00 78    	mov.w     w8, w0
    1284:	4f 04 be    	mov.d     [--w15], w8
    1286:	00 00 06    	return    

00001288 <_brk>:
    1288:	80 00 78    	mov.w     w0, w1
    128a:	01 00 e0    	cp0.w     w1
    128c:	03 00 3a    	bra       NZ, 0x1294 <.L2>
    128e:	00 00 20    	mov.w     #0x0, w0
    1290:	60 5b 88    	mov.w     w0, 0xb6c
    1292:	00 00 05    	retlw.w   #0x0, w0

00001294 <.L2>:
    1294:	00 80 eb    	setm.w    w0
    1296:	02 00 20    	mov.w     #0x0, w2
    1298:	82 8f 50    	sub.w     w1, w2, [w15]
    129a:	02 00 3e    	bra       GTU, 0x12a0 <.L3>
    129c:	61 5b 88    	mov.w     w1, 0xb6c
    129e:	00 00 eb    	clr.w     w0

000012a0 <.L3>:
    12a0:	00 00 06    	return    

000012a2 <__crt_start_mode>:
    12a2:	00 00 05    	retlw.w   #0x0, w0

000012a4 <_prout>:
    12a4:	88 9f be    	mov.d     w8, [w15++]
    12a6:	00 04 78    	mov.w     w0, w8
    12a8:	01 00 78    	mov.w     w1, w0
    12aa:	82 04 78    	mov.w     w2, w9
    12ac:	88 01 78    	mov.w     w8, w3
    12ae:	09 01 78    	mov.w     w9, w2
    12b0:	11 00 20    	mov.w     #0x1, w1
    12b2:	0e 00 07    	rcall     0x12d0 <_fwrite>
    12b4:	89 0f 50    	sub.w     w0, w9, [w15]
    12b6:	01 00 32    	bra       Z, 0x12ba <.L2>
    12b8:	00 04 eb    	clr.w     w8

000012ba <.L2>:
    12ba:	08 00 78    	mov.w     w8, w0
    12bc:	4f 04 be    	mov.d     [--w15], w8
    12be:	00 00 06    	return    

000012c0 <__printf_s>:
    12c0:	00 00 fa    	lnk       #0x0
    12c2:	e8 81 57    	sub.w     w15, #0x8, w3
    12c4:	4f b9 97    	mov.w     [w15-8], w2
    12c6:	a1 ae 20    	mov.w     #0xaea, w1
    12c8:	40 2a 21    	mov.w     #0x12a4, w0
    12ca:	57 01 07    	rcall     0x157a <___Printf_s>
    12cc:	00 80 fa    	ulnk      
    12ce:	00 00 06    	return    

000012d0 <_fwrite>:
    12d0:	88 9f be    	mov.d     w8, [w15++]
    12d2:	8a 9f be    	mov.d     w10, [w15++]
    12d4:	8c 9f be    	mov.d     w12, [w15++]
    12d6:	8e 1f 78    	mov.w     w14, [w15++]
    12d8:	00 06 78    	mov.w     w0, w12
    12da:	01 04 78    	mov.w     w1, w8
    12dc:	02 00 78    	mov.w     w2, w0
    12de:	83 04 78    	mov.w     w3, w9
    12e0:	08 81 b9    	mul.ss    w0, w8, w2
    12e2:	02 07 78    	mov.w     w2, w14
    12e4:	02 00 e0    	cp0.w     w2
    12e6:	42 00 32    	bra       Z, 0x136c <.L11>
    12e8:	08 00 e0    	cp0.w     w8
    12ea:	41 00 32    	bra       Z, 0x136e <.L2>
    12ec:	82 05 78    	mov.w     w2, w11

000012ee <.L8>:
    12ee:	c9 00 90    	mov.w     [w9+8], w1
    12f0:	69 00 90    	mov.w     [w9+12], w0
    12f2:	80 8f 50    	sub.w     w1, w0, [w15]
    12f4:	04 00 39    	bra       NC, 0x12fe <.L3>
    12f6:	09 00 78    	mov.w     w9, w0
    12f8:	50 00 07    	rcall     0x139a <__Fwprep>
    12fa:	00 00 e0    	cp0.w     w0
    12fc:	29 00 35    	bra       LT, 0x1350 <.L4>

000012fe <.L3>:
    12fe:	00 40 20    	mov.w     #0x400, w0
    1300:	19 00 60    	and.w     w0, [w9], w0
    1302:	0a 00 32    	bra       Z, 0x1318 <.L12>
    1304:	0b 01 78    	mov.w     w11, w2
    1306:	a1 00 20    	mov.w     #0xa, w1
    1308:	0c 00 78    	mov.w     w12, w0
    130a:	36 00 07    	rcall     0x1378 <_memchr>
    130c:	80 06 78    	mov.w     w0, w13
    130e:	0d 00 e0    	cp0.w     w13
    1310:	06 00 32    	bra       Z, 0x131e <.L13>
    1312:	61 05 16    	subr.w    w12, #0x1, w10
    1314:	0a 85 46    	add.w     w13, w10, w10
    1316:	04 00 37    	bra       0x1320 <.L5>

00001318 <.L12>:
    1318:	0b 05 78    	mov.w     w11, w10
    131a:	80 06 eb    	clr.w     w13
    131c:	01 00 37    	bra       0x1320 <.L5>

0000131e <.L13>:
    131e:	0b 05 78    	mov.w     w11, w10

00001320 <.L5>:
    1320:	49 00 90    	mov.w     [w9+8], w0
    1322:	e9 00 90    	mov.w     [w9+12], w1
    1324:	80 80 50    	sub.w     w1, w0, w1
    1326:	8a 8f 50    	sub.w     w1, w10, [w15]
    1328:	02 00 31    	bra       C, 0x132e <.L6>
    132a:	01 05 78    	mov.w     w1, w10
    132c:	80 06 eb    	clr.w     w13

0000132e <.L6>:
    132e:	0a 01 78    	mov.w     w10, w2
    1330:	8c 00 78    	mov.w     w12, w1
    1332:	2c 00 07    	rcall     0x138c <_memcpy>
    1334:	8a 85 55    	sub.w     w11, w10, w11
    1336:	49 00 90    	mov.w     [w9+8], w0
    1338:	0a 00 40    	add.w     w0, w10, w0
    133a:	c0 04 98    	mov.w     w0, [w9+8]
    133c:	0d 00 e0    	cp0.w     w13
    133e:	04 00 32    	bra       Z, 0x1348 <.L7>
    1340:	09 00 78    	mov.w     w9, w0
    1342:	d5 00 07    	rcall     0x14ee <__DNKfflush>
    1344:	00 00 e0    	cp0.w     w0
    1346:	04 00 3a    	bra       NZ, 0x1350 <.L4>

00001348 <.L7>:
    1348:	0b 00 e0    	cp0.w     w11
    134a:	02 00 32    	bra       Z, 0x1350 <.L4>
    134c:	0a 06 46    	add.w     w12, w10, w12
    134e:	cf ff 37    	bra       0x12ee <.L8>

00001350 <.L4>:
    1350:	00 80 20    	mov.w     #0x800, w0
    1352:	19 00 60    	and.w     w0, [w9], w0
    1354:	02 00 32    	bra       Z, 0x135a <.L9>
    1356:	09 00 78    	mov.w     w9, w0
    1358:	ca 00 07    	rcall     0x14ee <__DNKfflush>

0000135a <.L9>:
    135a:	00 c0 20    	mov.w     #0xc00, w0
    135c:	19 00 60    	and.w     w0, [w9], w0
    135e:	02 00 32    	bra       Z, 0x1364 <.L10>
    1360:	49 00 90    	mov.w     [w9+8], w0
    1362:	e0 04 98    	mov.w     w0, [w9+12]

00001364 <.L10>:
    1364:	8b 05 57    	sub.w     w14, w11, w11
    1366:	11 00 09    	repeat    #0x11
    1368:	88 85 d8    	div.uw    w11, w8
    136a:	01 00 37    	bra       0x136e <.L2>

0000136c <.L11>:
    136c:	00 00 eb    	clr.w     w0

0000136e <.L2>:
    136e:	4f 07 78    	mov.w     [--w15], w14
    1370:	4f 06 be    	mov.d     [--w15], w12
    1372:	4f 05 be    	mov.d     [--w15], w10
    1374:	4f 04 be    	mov.d     [--w15], w8
    1376:	00 00 06    	return    

00001378 <_memchr>:
    1378:	03 00 37    	bra       0x1380 <.L2>

0000137a <.L4>:
    137a:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    137c:	05 00 32    	bra       Z, 0x1388 <.L5>
    137e:	02 01 e9    	dec.w     w2, w2

00001380 <.L2>:
    1380:	80 01 78    	mov.w     w0, w3
    1382:	02 00 e0    	cp0.w     w2
    1384:	fa ff 3a    	bra       NZ, 0x137a <.L4>
    1386:	00 00 05    	retlw.w   #0x0, w0

00001388 <.L5>:
    1388:	03 00 78    	mov.w     w3, w0
    138a:	00 00 06    	return    

0000138c <_memcpy>:
    138c:	80 01 78    	mov.w     w0, w3
    138e:	02 00 37    	bra       0x1394 <.L2>

00001390 <.L3>:
    1390:	b1 59 78    	mov.b     [w1++], [w3++]
    1392:	02 01 e9    	dec.w     w2, w2

00001394 <.L2>:
    1394:	02 00 e0    	cp0.w     w2
    1396:	fc ff 3a    	bra       NZ, 0x1390 <.L3>
    1398:	00 00 06    	return    

0000139a <__Fwprep>:
    139a:	88 9f be    	mov.d     w8, [w15++]
    139c:	8a 1f 78    	mov.w     w10, [w15++]
    139e:	00 04 78    	mov.w     w0, w8
    13a0:	c8 00 90    	mov.w     [w8+8], w1
    13a2:	68 01 90    	mov.w     [w8+12], w2
    13a4:	00 00 eb    	clr.w     w0
    13a6:	82 8f 50    	sub.w     w1, w2, [w15]
    13a8:	3c 00 39    	bra       NC, 0x1422 <.L2>
    13aa:	18 00 78    	mov.w     [w8], w0
    13ac:	22 00 29    	mov.w     #0x9002, w2
    13ae:	02 01 60    	and.w     w0, w2, w2
    13b0:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    13b2:	07 00 32    	bra       Z, 0x13c2 <.L3>
    13b4:	01 20 24    	mov.w     #0x4200, w1
    13b6:	00 00 e0    	cp0.w     w0
    13b8:	01 00 3d    	bra       GE, 0x13bc <.L4>
    13ba:	01 20 20    	mov.w     #0x200, w1

000013bc <.L4>:
    13bc:	00 8c 70    	ior.w     w1, w0, [w8]
    13be:	00 80 eb    	setm.w    w0
    13c0:	30 00 37    	bra       0x1422 <.L2>

000013c2 <.L3>:
    13c2:	02 00 26    	mov.w     #0x6000, w2
    13c4:	02 00 60    	and.w     w0, w2, w0
    13c6:	82 0f 50    	sub.w     w0, w2, [w15]
    13c8:	09 00 3a    	bra       NZ, 0x13dc <.L5>
    13ca:	38 00 90    	mov.w     [w8+6], w0
    13cc:	80 8f 50    	sub.w     w1, w0, [w15]
    13ce:	06 00 39    	bra       NC, 0x13dc <.L5>
    13d0:	08 00 78    	mov.w     w8, w0
    13d2:	8d 00 07    	rcall     0x14ee <__DNKfflush>
    13d4:	80 00 78    	mov.w     w0, w1
    13d6:	00 80 eb    	setm.w    w0
    13d8:	01 00 e0    	cp0.w     w1
    13da:	23 00 3a    	bra       NZ, 0x1422 <.L2>

000013dc <.L5>:
    13dc:	18 05 78    	mov.w     [w8], w10
    13de:	00 c0 20    	mov.w     #0xc00, w0
    13e0:	00 00 65    	and.w     w10, w0, w0
    13e2:	18 00 3a    	bra       NZ, 0x1414 <.L6>
    13e4:	a8 04 90    	mov.w     [w8+4], w9
    13e6:	60 02 20    	mov.w     #0x26, w0
    13e8:	08 00 40    	add.w     w0, w8, w0
    13ea:	80 8f 54    	sub.w     w9, w0, [w15]
    13ec:	13 00 3a    	bra       NZ, 0x1414 <.L6>
    13ee:	00 20 20    	mov.w     #0x200, w0
    13f0:	0a 02 07    	rcall     0x1806 <_malloc>
    13f2:	20 04 98    	mov.w     w0, [w8+4]
    13f4:	00 00 e0    	cp0.w     w0
    13f6:	05 00 3a    	bra       NZ, 0x1402 <.L7>
    13f8:	29 04 98    	mov.w     w9, [w8+4]
    13fa:	49 04 98    	mov.w     w9, [w8+8]
    13fc:	89 04 e8    	inc.w     w9, w9
    13fe:	39 04 98    	mov.w     w9, [w8+6]
    1400:	08 00 37    	bra       0x1412 <.L11>

00001402 <.L7>:
    1402:	0a 60 a0    	bset.w    w10, #0x6
    1404:	0a 0c 78    	mov.w     w10, [w8]
    1406:	40 04 98    	mov.w     w0, [w8+8]
    1408:	01 20 20    	mov.w     #0x200, w1
    140a:	80 80 40    	add.w     w1, w0, w1
    140c:	31 04 98    	mov.w     w1, [w8+6]
    140e:	40 0c 98    	mov.w     w0, [w8+24]
    1410:	50 0c 98    	mov.w     w0, [w8+26]

00001412 <.L11>:
    1412:	0c 00 07    	rcall     0x142c <__Closreg>

00001414 <.L6>:
    1414:	28 00 90    	mov.w     [w8+4], w0
    1416:	50 04 98    	mov.w     w0, [w8+10]
    1418:	38 00 90    	mov.w     [w8+6], w0
    141a:	60 04 98    	mov.w     w0, [w8+12]
    141c:	00 00 26    	mov.w     #0x6000, w0
    141e:	18 0c 70    	ior.w     w0, [w8], [w8]
    1420:	00 00 eb    	clr.w     w0

00001422 <.L2>:
    1422:	4f 05 78    	mov.w     [--w15], w10
    1424:	4f 04 be    	mov.d     [--w15], w8
    1426:	00 00 06    	return    

00001428 <_closeallreg>:
    1428:	e0 4c 21    	mov.w     #0x14ce, w0
    142a:	9b 00 37    	bra       0x1562 <__Atexit>

0000142c <__Closreg>:
    142c:	88 1f 78    	mov.w     w8, [w15++]
    142e:	88 b6 20    	mov.w     #0xb68, w8
    1430:	18 04 e0    	cp0.b     [w8]
    1432:	03 00 3a    	bra       NZ, 0x143a <.L2>
    1434:	f9 ff 07    	rcall     0x1428 <_closeallreg>
    1436:	20 c0 b3    	mov.b     #0x2, w0
    1438:	00 4c 78    	mov.b     w0, [w8]

0000143a <.L2>:
    143a:	4f 04 78    	mov.w     [--w15], w8
    143c:	00 00 06    	return    

0000143e <_fclose>:
    143e:	88 9f be    	mov.d     w8, [w15++]
    1440:	00 04 78    	mov.w     w0, w8
    1442:	08 00 78    	mov.w     w8, w0
    1444:	54 00 07    	rcall     0x14ee <__DNKfflush>
    1446:	80 04 78    	mov.w     w0, w9
    1448:	00 04 20    	mov.w     #0x40, w0
    144a:	18 00 60    	and.w     w0, [w8], w0
    144c:	02 00 32    	bra       Z, 0x1452 <.L5>
    144e:	28 00 90    	mov.w     [w8+4], w0
    1450:	75 01 07    	rcall     0x173c <_free>

00001452 <.L5>:
    1452:	00 00 eb    	clr.w     w0
    1454:	20 04 98    	mov.w     w0, [w8+4]
    1456:	38 40 90    	mov.b     [w8+3], w0
    1458:	00 04 e0    	cp0.b     w0
    145a:	05 00 35    	bra       LT, 0x1466 <.L6>
    145c:	00 00 fb    	se        w0, w0
    145e:	ee fe 07    	rcall     0x123c <_close>
    1460:	00 00 e0    	cp0.w     w0
    1462:	01 00 32    	bra       Z, 0x1466 <.L6>
    1464:	80 84 eb    	setm.w    w9

00001466 <.L6>:
    1466:	18 10 90    	mov.w     [w8+34], w0
    1468:	00 00 e0    	cp0.w     w0
    146a:	08 00 32    	bra       Z, 0x147c <.L7>
    146c:	f0 fe 07    	rcall     0x124e <_remove>
    146e:	00 00 e0    	cp0.w     w0
    1470:	01 00 32    	bra       Z, 0x1474 <.L8>
    1472:	80 84 eb    	setm.w    w9

00001474 <.L8>:
    1474:	18 10 90    	mov.w     [w8+34], w0
    1476:	62 01 07    	rcall     0x173c <_free>
    1478:	00 00 eb    	clr.w     w0
    147a:	10 14 98    	mov.w     w0, [w8+34]

0000147c <.L7>:
    147c:	00 08 20    	mov.w     #0x80, w0
    147e:	18 00 60    	and.w     w0, [w8], w0
    1480:	15 00 32    	bra       Z, 0x14ac <.L9>
    1482:	00 01 eb    	clr.w     w2
    1484:	60 00 b8    	mul.uu    w0, #0x0, w0

00001486 <.L12>:
    1486:	a3 b3 20    	mov.w     #0xb3a, w3
    1488:	02 02 d0    	sl.w      w2, w4
    148a:	63 02 7a    	mov.w     [w3+w4], w4
    148c:	88 0f 52    	sub.w     w4, w8, [w15]
    148e:	05 00 3a    	bra       NZ, 0x149a <.L10>
    1490:	00 00 40    	add.w     w0, w0, w0
    1492:	81 80 48    	addc.w    w1, w1, w1
    1494:	00 80 41    	add.w     w3, w0, w0
    1496:	00 08 eb    	clr.w     [w0]
    1498:	06 00 37    	bra       0x14a6 <.L11>

0000149a <.L10>:
    149a:	61 00 40    	add.w     w0, #0x1, w0
    149c:	e0 80 48    	addc.w    w1, #0x0, w1
    149e:	02 01 e8    	inc.w     w2, w2
    14a0:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    14a2:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    14a4:	f0 ff 3a    	bra       NZ, 0x1486 <.L12>

000014a6 <.L11>:
    14a6:	08 00 78    	mov.w     w8, w0
    14a8:	49 01 07    	rcall     0x173c <_free>
    14aa:	0e 00 37    	bra       0x14c8 <.L13>

000014ac <.L9>:
    14ac:	00 0c 78    	mov.w     w0, [w8]
    14ae:	00 c0 eb    	setm.b    w0
    14b0:	30 44 98    	mov.b     w0, [w8+3]
    14b2:	60 02 20    	mov.w     #0x26, w0
    14b4:	08 00 40    	add.w     w0, w8, w0
    14b6:	20 04 98    	mov.w     w0, [w8+4]
    14b8:	40 04 98    	mov.w     w0, [w8+8]
    14ba:	50 04 98    	mov.w     w0, [w8+10]
    14bc:	40 0c 98    	mov.w     w0, [w8+24]
    14be:	60 04 98    	mov.w     w0, [w8+12]
    14c0:	50 0c 98    	mov.w     w0, [w8+26]
    14c2:	70 04 98    	mov.w     w0, [w8+14]
    14c4:	76 00 44    	add.w     w8, #0x16, w0
    14c6:	00 0c 98    	mov.w     w0, [w8+16]

000014c8 <.L13>:
    14c8:	09 00 78    	mov.w     w9, w0
    14ca:	4f 04 be    	mov.d     [--w15], w8
    14cc:	00 00 06    	return    

000014ce <_closeall>:
    14ce:	88 1f 78    	mov.w     w8, [w15++]
    14d0:	00 04 eb    	clr.w     w8

000014d2 <.L18>:
    14d2:	61 40 b8    	mul.uu    w8, #0x1, w0
    14d4:	e2 ff 2f    	mov.w     #0xfffe, w2
    14d6:	f3 ff 2f    	mov.w     #0xffff, w3
    14d8:	9e 02 07    	rcall     0x1a16 <___mulp32eds3> <___mulp32peds3> <___mulsi3>
    14da:	82 b4 20    	mov.w     #0xb48, w2
    14dc:	62 00 78    	mov.w     [w2+w0], w0
    14de:	00 00 e0    	cp0.w     w0
    14e0:	01 00 32    	bra       Z, 0x14e4 <.L17>
    14e2:	ad ff 07    	rcall     0x143e <_fclose>

000014e4 <.L17>:
    14e4:	08 04 e8    	inc.w     w8, w8
    14e6:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    14e8:	f4 ff 3a    	bra       NZ, 0x14d2 <.L18>
    14ea:	4f 04 78    	mov.w     [--w15], w8
    14ec:	00 00 06    	return    

000014ee <__DNKfflush>:
    14ee:	88 9f be    	mov.d     w8, [w15++]
    14f0:	00 04 78    	mov.w     w0, w8
    14f2:	08 00 e0    	cp0.w     w8
    14f4:	0e 00 3a    	bra       NZ, 0x1512 <.L2>
    14f6:	80 04 eb    	clr.w     w9

000014f8 <.L4>:
    14f8:	88 00 d0    	sl.w      w8, w1
    14fa:	a0 b3 20    	mov.w     #0xb3a, w0
    14fc:	61 00 78    	mov.w     [w1+w0], w0
    14fe:	00 00 e0    	cp0.w     w0
    1500:	04 00 32    	bra       Z, 0x150a <.L3>
    1502:	f5 ff 07    	rcall     0x14ee <__DNKfflush>
    1504:	00 00 e0    	cp0.w     w0
    1506:	01 00 3d    	bra       GE, 0x150a <.L3>
    1508:	80 84 eb    	setm.w    w9

0000150a <.L3>:
    150a:	08 04 e8    	inc.w     w8, w8
    150c:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    150e:	f4 ff 3a    	bra       NZ, 0x14f8 <.L4>
    1510:	25 00 37    	bra       0x155c <.L5>

00001512 <.L2>:
    1512:	00 00 22    	mov.w     #0x2000, w0
    1514:	18 00 60    	and.w     w0, [w8], w0
    1516:	80 04 eb    	clr.w     w9
    1518:	21 00 32    	bra       Z, 0x155c <.L5>
    151a:	a8 04 90    	mov.w     [w8+4], w9
    151c:	0f 00 37    	bra       0x153c <.L6>

0000151e <.L8>:
    151e:	09 01 51    	sub.w     w2, w9, w2
    1520:	38 40 90    	mov.b     [w8+3], w0
    1522:	00 00 fb    	se        w0, w0
    1524:	89 00 78    	mov.w     w9, w1
    1526:	a9 09 07    	rcall     0x287a <_write> <.LFB10> <.LFE9>
    1528:	00 00 e0    	cp0.w     w0
    152a:	07 00 3c    	bra       GT, 0x153a <.L7>
    152c:	28 00 90    	mov.w     [w8+4], w0
    152e:	40 04 98    	mov.w     w0, [w8+8]
    1530:	60 04 98    	mov.w     w0, [w8+12]
    1532:	50 0c 98    	mov.w     w0, [w8+26]
    1534:	18 90 a0    	bset.w    [w8], #0x9
    1536:	80 84 eb    	setm.w    w9
    1538:	11 00 37    	bra       0x155c <.L5>

0000153a <.L7>:
    153a:	80 84 44    	add.w     w9, w0, w9

0000153c <.L6>:
    153c:	48 01 90    	mov.w     [w8+8], w2
    153e:	82 8f 54    	sub.w     w9, w2, [w15]
    1540:	ee ff 39    	bra       NC, 0x151e <.L8>
    1542:	28 00 90    	mov.w     [w8+4], w0
    1544:	40 04 98    	mov.w     w0, [w8+8]
    1546:	98 00 78    	mov.w     [w8], w1
    1548:	02 c0 20    	mov.w     #0xc00, w2
    154a:	02 81 60    	and.w     w1, w2, w2
    154c:	01 00 3a    	bra       NZ, 0x1550 <.L9>
    154e:	38 00 90    	mov.w     [w8+6], w0

00001550 <.L9>:
    1550:	01 e8 a3    	btst.z    w1, #0xe
    1552:	02 00 32    	bra       Z, 0x1558 <.L10>
    1554:	60 04 98    	mov.w     w0, [w8+12]
    1556:	01 00 37    	bra       0x155a <.L13>

00001558 <.L10>:
    1558:	50 0c 98    	mov.w     w0, [w8+26]

0000155a <.L13>:
    155a:	80 04 eb    	clr.w     w9

0000155c <.L5>:
    155c:	09 00 78    	mov.w     w9, w0
    155e:	4f 04 be    	mov.d     [--w15], w8
    1560:	00 00 06    	return    

00001562 <__Atexit>:
    1562:	01 00 20    	mov.w     #0x0, w1
    1564:	01 00 e0    	cp0.w     w1
    1566:	08 00 32    	bra       Z, 0x1578 <.L1>
    1568:	01 00 80    	mov.w     0x0, w1
    156a:	01 00 e0    	cp0.w     w1
    156c:	05 00 32    	bra       Z, 0x1578 <.L1>
    156e:	81 00 e9    	dec.w     w1, w1
    1570:	01 00 88    	mov.w     w1, 0x0
    1572:	81 00 d0    	sl.w      w1, w1
    1574:	02 00 80    	mov.w     0x0, w2
    1576:	00 b1 78    	mov.w     w0, [w2+w1]

00001578 <.L1>:
    1578:	00 00 06    	return    

0000157a <___Printf_s>:
    157a:	62 00 fa    	lnk       #0x62
    157c:	88 9f be    	mov.d     w8, [w15++]
    157e:	8a 1f 78    	mov.w     w10, [w15++]
    1580:	00 05 78    	mov.w     w0, w10
    1582:	81 04 78    	mov.w     w1, w9
    1584:	02 04 78    	mov.w     w2, w8
    1586:	83 00 78    	mov.w     w3, w1
    1588:	80 f9 2f    	mov.w     #0xff98, w0
    158a:	0f 00 40    	add.w     w0, w15, w0
    158c:	3e 02 07    	rcall     0x1a0a <__Vacopy>
    158e:	9a 97 9f    	mov.w     w10, [w15-94]
    1590:	a9 97 9f    	mov.w     w9, [w15-92]
    1592:	00 00 eb    	clr.w     w0
    1594:	b0 9f 9f    	mov.w     w0, [w15-74]

00001596 <.L31>:
    1596:	18 85 fb    	ze        [w8], w10
    1598:	8a 04 fb    	se        w10, w9
    159a:	0a 05 ea    	neg.w     w10, w10
    159c:	4f 55 de    	lsr.w     w10, #0xf, w10
    159e:	50 02 20    	mov.w     #0x25, w0
    15a0:	80 8f 54    	sub.w     w9, w0, [w15]
    15a2:	0d 00 32    	bra       Z, 0x15be <.L3>
    15a4:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    15a6:	0b 00 3a    	bra       NZ, 0x15be <.L3>
    15a8:	0a 01 78    	mov.w     w10, w2
    15aa:	88 00 78    	mov.w     w8, w1
    15ac:	2f 90 97    	mov.w     [w15-92], w0
    15ae:	9f 91 97    	mov.w     [w15-94], w3
    15b0:	03 00 01    	call      w3
    15b2:	a0 97 9f    	mov.w     w0, [w15-92]
    15b4:	00 00 e0    	cp0.w     w0
    15b6:	8e 00 32    	bra       Z, 0x16d4 <.L27>
    15b8:	3f 98 97    	mov.w     [w15-74], w0
    15ba:	00 00 e8    	inc.w     w0, w0
    15bc:	b0 9f 9f    	mov.w     w0, [w15-74]

000015be <.L3>:
    15be:	0a 04 44    	add.w     w8, w10, w8
    15c0:	50 02 20    	mov.w     #0x25, w0
    15c2:	80 8f 54    	sub.w     w9, w0, [w15]
    15c4:	04 00 32    	bra       Z, 0x15ce <.L5>
    15c6:	09 00 e0    	cp0.w     w9
    15c8:	e6 ff 3a    	bra       NZ, 0x1596 <.L31>
    15ca:	3f 98 97    	mov.w     [w15-74], w0
    15cc:	84 00 37    	bra       0x16d6 <.L4>

000015ce <.L5>:
    15ce:	00 00 eb    	clr.w     w0
    15d0:	90 9f 9f    	mov.w     w0, [w15-78]
    15d2:	80 9f 9f    	mov.w     w0, [w15-80]
    15d4:	f0 97 9f    	mov.w     w0, [w15-82]
    15d6:	e0 97 9f    	mov.w     w0, [w15-84]
    15d8:	d0 97 9f    	mov.w     w0, [w15-86]
    15da:	c0 97 9f    	mov.w     w0, [w15-88]
    15dc:	07 00 37    	bra       0x15ec <.L34>

000015de <.L8>:
    15de:	e1 b5 20    	mov.w     #0xb5e, w1
    15e0:	01 00 50    	sub.w     w0, w1, w0
    15e2:	00 00 40    	add.w     w0, w0, w0
    15e4:	21 b5 20    	mov.w     #0xb52, w1
    15e6:	61 00 78    	mov.w     [w1+w0], w0
    15e8:	df 98 97    	mov.w     [w15-70], w1
    15ea:	01 00 70    	ior.w     w0, w1, w0

000015ec <.L34>:
    15ec:	d0 9f 9f    	mov.w     w0, [w15-70]
    15ee:	88 04 78    	mov.w     w8, w9
    15f0:	09 04 78    	mov.w     w9, w8
    15f2:	38 45 78    	mov.b     [w8++], w10
    15f4:	8a 00 fb    	se        w10, w1
    15f6:	e0 b5 20    	mov.w     #0xb5e, w0
    15f8:	30 01 07    	rcall     0x185a <_strchr>
    15fa:	00 00 e0    	cp0.w     w0
    15fc:	f0 ff 3a    	bra       NZ, 0x15de <.L8>
    15fe:	a1 c2 b3    	mov.b     #0x2a, w1
    1600:	81 4f 55    	sub.b     w10, w1, [w15]
    1602:	0e 00 3a    	bra       NZ, 0x1620 <.L9>
    1604:	cf 88 97    	mov.w     [w15-104], w1
    1606:	01 80 e9    	dec2.w    w1, w0
    1608:	c0 8f 9f    	mov.w     w0, [w15-104]
    160a:	10 00 78    	mov.w     [w0], w0
    160c:	c0 9f 9f    	mov.w     w0, [w15-72]
    160e:	00 00 e0    	cp0.w     w0
    1610:	05 00 3d    	bra       GE, 0x161c <.L10>
    1612:	00 00 ea    	neg.w     w0, w0
    1614:	c0 9f 9f    	mov.w     w0, [w15-72]
    1616:	5f 98 97    	mov.w     [w15-70], w0
    1618:	00 20 a0    	bset.w    w0, #0x2
    161a:	d0 9f 9f    	mov.w     w0, [w15-70]

0000161c <.L10>:
    161c:	09 04 e8    	inc.w     w9, w8
    161e:	0f 00 37    	bra       0x163e <.L11>

00001620 <.L9>:
    1620:	c0 9f 9f    	mov.w     w0, [w15-72]
    1622:	00 00 eb    	clr.w     w0
    1624:	05 00 37    	bra       0x1630 <.L32>

00001626 <.L14>:
    1626:	f2 ff 27    	mov.w     #0x7fff, w2
    1628:	82 0f 50    	sub.w     w0, w2, [w15]
    162a:	02 00 32    	bra       Z, 0x1630 <.L32>
    162c:	6a 01 b9    	mul.su    w0, #0xa, w2
    162e:	02 80 40    	add.w     w1, w2, w0

00001630 <.L32>:
    1630:	09 04 78    	mov.w     w9, w8
    1632:	88 04 78    	mov.w     w8, w9
    1634:	b9 00 fb    	se        [w9++], w1
    1636:	01 03 b1    	sub.w     #0x30, w1
    1638:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    163a:	f5 ff 36    	bra       LEU, 0x1626 <.L14>
    163c:	c0 9f 9f    	mov.w     w0, [w15-72]

0000163e <.L11>:
    163e:	e0 c2 b3    	mov.b     #0x2e, w0
    1640:	98 4f 10    	subr.b    w0, [w8], [w15]
    1642:	02 00 32    	bra       Z, 0x1648 <.L15>
    1644:	00 80 eb    	setm.w    w0
    1646:	19 00 37    	bra       0x167a <.L35>

00001648 <.L15>:
    1648:	a0 c2 b3    	mov.b     #0x2a, w0
    164a:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    164c:	07 00 3a    	bra       NZ, 0x165c <.L17>
    164e:	cf 88 97    	mov.w     [w15-104], w1
    1650:	01 80 e9    	dec2.w    w1, w0
    1652:	c0 8f 9f    	mov.w     w0, [w15-104]
    1654:	10 00 78    	mov.w     [w0], w0
    1656:	a0 9f 9f    	mov.w     w0, [w15-76]
    1658:	08 04 e8    	inc.w     w8, w8
    165a:	10 00 37    	bra       0x167c <.L16>

0000165c <.L17>:
    165c:	00 00 eb    	clr.w     w0
    165e:	a0 9f 9f    	mov.w     w0, [w15-76]
    1660:	88 00 78    	mov.w     w8, w1
    1662:	05 00 37    	bra       0x166e <.L33>

00001664 <.L20>:
    1664:	f3 ff 27    	mov.w     #0x7fff, w3
    1666:	83 0f 50    	sub.w     w0, w3, [w15]
    1668:	02 00 32    	bra       Z, 0x166e <.L33>
    166a:	6a 02 b9    	mul.su    w0, #0xa, w4
    166c:	04 00 41    	add.w     w2, w4, w0

0000166e <.L33>:
    166e:	01 04 78    	mov.w     w1, w8
    1670:	88 00 78    	mov.w     w8, w1
    1672:	31 01 fb    	se        [w1++], w2
    1674:	02 03 b1    	sub.w     #0x30, w2
    1676:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1678:	f5 ff 36    	bra       LEU, 0x1664 <.L20>

0000167a <.L35>:
    167a:	a0 9f 9f    	mov.w     w0, [w15-76]

0000167c <.L16>:
    167c:	98 44 78    	mov.b     [w8], w9
    167e:	89 00 fb    	se        w9, w1
    1680:	a0 b4 20    	mov.w     #0xb4a, w0
    1682:	eb 00 07    	rcall     0x185a <_strchr>
    1684:	00 00 e0    	cp0.w     w0
    1686:	02 00 32    	bra       Z, 0x168c <.L25>
    1688:	08 04 e8    	inc.w     w8, w8
    168a:	01 00 37    	bra       0x168e <.L21>

0000168c <.L25>:
    168c:	80 44 eb    	clr.b     w9

0000168e <.L21>:
    168e:	c9 7f 9f    	mov.b     w9, [w15-68]
    1690:	80 c6 b3    	mov.b     #0x68, w0
    1692:	80 cf 54    	sub.b     w9, w0, [w15]
    1694:	04 00 3a    	bra       NZ, 0x169e <.L22>
    1696:	98 cf 14    	subr.b    w9, [w8], [w15]
    1698:	0a 00 3a    	bra       NZ, 0x16ae <.L23>
    169a:	66 40 50    	sub.b     w0, #0x6, w0
    169c:	06 00 37    	bra       0x16aa <.L36>

0000169e <.L22>:
    169e:	c0 c6 b3    	mov.b     #0x6c, w0
    16a0:	80 cf 54    	sub.b     w9, w0, [w15]
    16a2:	05 00 3a    	bra       NZ, 0x16ae <.L23>
    16a4:	98 cf 14    	subr.b    w9, [w8], [w15]
    16a6:	03 00 3a    	bra       NZ, 0x16ae <.L23>
    16a8:	65 40 40    	add.b     w0, #0x5, w0

000016aa <.L36>:
    16aa:	c0 7f 9f    	mov.b     w0, [w15-68]
    16ac:	08 04 e8    	inc.w     w8, w8

000016ae <.L23>:
    16ae:	18 01 fb    	se        [w8], w2
    16b0:	e3 fb 2f    	mov.w     #0xffbe, w3
    16b2:	8f 81 41    	add.w     w3, w15, w3
    16b4:	81 f9 2f    	mov.w     #0xff98, w1
    16b6:	8f 80 40    	add.w     w1, w15, w1
    16b8:	a0 f9 2f    	mov.w     #0xff9a, w0
    16ba:	0f 00 40    	add.w     w0, w15, w0
    16bc:	10 00 07    	rcall     0x16de <___Putfld_s>
    16be:	00 00 e0    	cp0.w     w0
    16c0:	09 00 3a    	bra       NZ, 0x16d4 <.L27>
    16c2:	e1 fb 2f    	mov.w     #0xffbe, w1
    16c4:	8f 80 40    	add.w     w1, w15, w1
    16c6:	a0 f9 2f    	mov.w     #0xff9a, w0
    16c8:	0f 00 40    	add.w     w0, w15, w0
    16ca:	e3 00 07    	rcall     0x1892 <__Puttxt>
    16cc:	00 00 e0    	cp0.w     w0
    16ce:	02 00 35    	bra       LT, 0x16d4 <.L27>
    16d0:	08 04 e8    	inc.w     w8, w8
    16d2:	61 ff 37    	bra       0x1596 <.L31>

000016d4 <.L27>:
    16d4:	00 80 eb    	setm.w    w0

000016d6 <.L4>:
    16d6:	4f 05 78    	mov.w     [--w15], w10
    16d8:	4f 04 be    	mov.d     [--w15], w8
    16da:	00 80 fa    	ulnk      
    16dc:	00 00 06    	return    

000016de <___Putfld_s>:
    16de:	88 9f be    	mov.d     w8, [w15++]
    16e0:	8a 1f 78    	mov.w     w10, [w15++]
    16e2:	00 04 78    	mov.w     w0, w8
    16e4:	30 c5 b3    	mov.b     #0x53, w0
    16e6:	80 4f 51    	sub.b     w2, w0, [w15]
    16e8:	08 00 32    	bra       Z, 0x16fa <.L4>
    16ea:	30 c7 b3    	mov.b     #0x73, w0
    16ec:	80 4f 51    	sub.b     w2, w0, [w15]
    16ee:	05 00 32    	bra       Z, 0x16fa <.L4>
    16f0:	51 c2 b3    	mov.b     #0x25, w1
    16f2:	78 00 90    	mov.w     [w8+14], w0
    16f4:	81 4f 51    	sub.b     w2, w1, [w15]
    16f6:	17 00 3a    	bra       NZ, 0x1726 <.L9>
    16f8:	14 00 37    	bra       0x1722 <.L11>

000016fa <.L4>:
    16fa:	11 80 e9    	dec2.w    [w1], w0
    16fc:	80 08 78    	mov.w     w0, [w1]
    16fe:	10 05 78    	mov.w     [w0], w10
    1700:	6a 04 98    	mov.w     w10, [w8+12]
    1702:	d8 0c 90    	mov.w     [w8+26], w9
    1704:	09 00 e0    	cp0.w     w9
    1706:	04 00 3d    	bra       GE, 0x1710 <.L5>
    1708:	0a 00 78    	mov.w     w10, w0
    170a:	b3 00 07    	rcall     0x1872 <_strlen>
    170c:	80 04 78    	mov.w     w0, w9
    170e:	07 00 37    	bra       0x171e <.L6>

00001710 <.L5>:
    1710:	09 01 78    	mov.w     w9, w2
    1712:	80 00 eb    	clr.w     w1
    1714:	0a 00 78    	mov.w     w10, w0
    1716:	30 fe 07    	rcall     0x1378 <_memchr>
    1718:	00 00 e0    	cp0.w     w0
    171a:	01 00 32    	bra       Z, 0x171e <.L6>
    171c:	8a 04 50    	sub.w     w0, w10, w9

0000171e <.L6>:
    171e:	19 0c 98    	mov.w     w9, [w8+18]
    1720:	09 00 37    	bra       0x1734 <.L7>

00001722 <.L11>:
    1722:	82 71 78    	mov.b     w2, [w3+w0]
    1724:	05 00 37    	bra       0x1730 <.L10>

00001726 <.L9>:
    1726:	80 81 41    	add.w     w3, w0, w3
    1728:	02 04 e0    	cp0.b     w2
    172a:	01 00 3a    	bra       NZ, 0x172e <.L8>
    172c:	01 41 78    	mov.b     w1, w2

0000172e <.L8>:
    172e:	82 49 78    	mov.b     w2, [w3]

00001730 <.L10>:
    1730:	00 00 e8    	inc.w     w0, w0
    1732:	70 04 98    	mov.w     w0, [w8+14]

00001734 <.L7>:
    1734:	00 00 eb    	clr.w     w0
    1736:	4f 05 78    	mov.w     [--w15], w10
    1738:	4f 04 be    	mov.d     [--w15], w8
    173a:	00 00 06    	return    

0000173c <_free>:
    173c:	00 00 e0    	cp0.w     w0
    173e:	2f 00 32    	bra       Z, 0x179e <.L1>
    1740:	c0 01 78    	mov.w     [--w0], w3
    1742:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    1744:	2c 00 36    	bra       LEU, 0x179e <.L1>
    1746:	03 08 a3    	btst.z    w3, #0x0
    1748:	2a 00 3a    	bra       NZ, 0x179e <.L1>
    174a:	31 5b 80    	mov.w     0xb66, w1
    174c:	01 00 e0    	cp0.w     w1
    174e:	02 00 32    	bra       Z, 0x1754 <.L3>
    1750:	81 0f 50    	sub.w     w0, w1, [w15]
    1752:	04 00 31    	bra       C, 0x175c <.L7>

00001754 <.L3>:
    1754:	11 00 98    	mov.w     w1, [w0+2]
    1756:	30 5b 88    	mov.w     w0, 0xb66
    1758:	16 00 37    	bra       0x1786 <.L5>

0000175a <.L11>:
    175a:	82 00 78    	mov.w     w2, w1

0000175c <.L7>:
    175c:	11 01 90    	mov.w     [w1+2], w2
    175e:	02 00 e0    	cp0.w     w2
    1760:	02 00 32    	bra       Z, 0x1766 <.L6>
    1762:	80 0f 51    	sub.w     w2, w0, [w15]
    1764:	fa ff 39    	bra       NC, 0x175a <.L11>

00001766 <.L6>:
    1766:	11 02 78    	mov.w     [w1], w4
    1768:	84 82 40    	add.w     w1, w4, w5
    176a:	85 0f 50    	sub.w     w0, w5, [w15]
    176c:	18 00 39    	bra       NC, 0x179e <.L1>
    176e:	80 8f 52    	sub.w     w5, w0, [w15]
    1770:	03 00 3a    	bra       NZ, 0x1778 <.L8>
    1772:	83 08 42    	add.w     w4, w3, [w1]
    1774:	01 00 78    	mov.w     w1, w0
    1776:	07 00 37    	bra       0x1786 <.L5>

00001778 <.L8>:
    1778:	02 00 e0    	cp0.w     w2
    177a:	03 00 32    	bra       Z, 0x1782 <.L9>
    177c:	83 01 40    	add.w     w0, w3, w3
    177e:	83 0f 51    	sub.w     w2, w3, [w15]
    1780:	0e 00 39    	bra       NC, 0x179e <.L1>

00001782 <.L9>:
    1782:	12 00 98    	mov.w     w2, [w0+2]
    1784:	90 00 98    	mov.w     w0, [w1+2]

00001786 <.L5>:
    1786:	90 00 90    	mov.w     [w0+2], w1
    1788:	01 00 e0    	cp0.w     w1
    178a:	09 00 32    	bra       Z, 0x179e <.L1>
    178c:	10 01 40    	add.w     w0, [w0], w2
    178e:	82 8f 50    	sub.w     w1, w2, [w15]
    1790:	06 00 3a    	bra       NZ, 0x179e <.L1>
    1792:	42 b6 20    	mov.w     #0xb64, w2
    1794:	00 09 eb    	clr.w     [w2]
    1796:	10 01 78    	mov.w     [w0], w2
    1798:	11 08 41    	add.w     w2, [w1], [w0]
    179a:	91 00 90    	mov.w     [w1+2], w1
    179c:	11 00 98    	mov.w     w1, [w0+2]

0000179e <.L1>:
    179e:	00 00 06    	return    

000017a0 <_findmem>:
    17a0:	88 9f be    	mov.d     w8, [w15++]
    17a2:	00 04 78    	mov.w     w0, w8

000017a4 <.L14>:
    17a4:	21 5b 80    	mov.w     0xb64, w1
    17a6:	01 00 e0    	cp0.w     w1
    17a8:	02 00 32    	bra       Z, 0x17ae <.L2>
    17aa:	01 00 78    	mov.w     w1, w0
    17ac:	0d 00 37    	bra       0x17c8 <.L3>

000017ae <.L2>:
    17ae:	31 5b 80    	mov.w     0xb66, w1
    17b0:	60 b6 20    	mov.w     #0xb66, w0
    17b2:	04 00 37    	bra       0x17bc <.L4>

000017b4 <.L6>:
    17b4:	91 0f 54    	sub.w     w8, [w1], [w15]
    17b6:	25 00 36    	bra       LEU, 0x1802 <.L5>
    17b8:	01 80 e8    	inc2.w    w1, w0
    17ba:	91 00 90    	mov.w     [w1+2], w1

000017bc <.L4>:
    17bc:	01 00 e0    	cp0.w     w1
    17be:	fa ff 3a    	bra       NZ, 0x17b4 <.L6>
    17c0:	10 00 37    	bra       0x17e2 <.L7>

000017c2 <.L8>:
    17c2:	92 0f 54    	sub.w     w8, [w2], [w15]
    17c4:	1e 00 36    	bra       LEU, 0x1802 <.L5>
    17c6:	02 80 e8    	inc2.w    w2, w0

000017c8 <.L3>:
    17c8:	10 01 78    	mov.w     [w0], w2
    17ca:	02 00 e0    	cp0.w     w2
    17cc:	fa ff 3a    	bra       NZ, 0x17c2 <.L8>
    17ce:	11 01 78    	mov.w     [w1], w2
    17d0:	31 5b 80    	mov.w     0xb66, w1
    17d2:	60 b6 20    	mov.w     #0xb66, w0
    17d4:	04 00 37    	bra       0x17de <.L9>

000017d6 <.L10>:
    17d6:	91 0f 54    	sub.w     w8, [w1], [w15]
    17d8:	14 00 36    	bra       LEU, 0x1802 <.L5>
    17da:	01 80 e8    	inc2.w    w1, w0
    17dc:	91 00 90    	mov.w     [w1+2], w1

000017de <.L9>:
    17de:	82 8f 50    	sub.w     w1, w2, [w15]
    17e0:	fa ff 3a    	bra       NZ, 0x17d6 <.L10>

000017e2 <.L7>:
    17e2:	59 5b 80    	mov.w     0xb6a, w9

000017e4 <.L13>:
    17e4:	88 8f 54    	sub.w     w9, w8, [w15]
    17e6:	01 00 31    	bra       C, 0x17ea <.L11>
    17e8:	88 04 78    	mov.w     w8, w9

000017ea <.L11>:
    17ea:	09 00 78    	mov.w     w9, w0
    17ec:	48 00 07    	rcall     0x187e <__Getmem>
    17ee:	00 00 e0    	cp0.w     w0
    17f0:	04 00 3a    	bra       NZ, 0x17fa <.L12>
    17f2:	88 8f 54    	sub.w     w9, w8, [w15]
    17f4:	05 00 32    	bra       Z, 0x1800 <.L15>
    17f6:	89 04 d1    	lsr.w     w9, w9
    17f8:	f5 ff 37    	bra       0x17e4 <.L13>

000017fa <.L12>:
    17fa:	09 18 78    	mov.w     w9, [w0++]
    17fc:	9f ff 07    	rcall     0x173c <_free>
    17fe:	d2 ff 37    	bra       0x17a4 <.L14>

00001800 <.L15>:
    1800:	00 00 eb    	clr.w     w0

00001802 <.L5>:
    1802:	4f 04 be    	mov.d     [--w15], w8
    1804:	00 00 06    	return    

00001806 <_malloc>:
    1806:	88 1f 78    	mov.w     w8, [w15++]
    1808:	63 04 40    	add.w     w0, #0x3, w8
    180a:	08 00 a1    	bclr.w    w8, #0x0
    180c:	80 00 eb    	clr.w     w1
    180e:	80 0f 54    	sub.w     w8, w0, [w15]
    1810:	21 00 36    	bra       LEU, 0x1854 <.L17>
    1812:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    1814:	01 00 3e    	bra       GTU, 0x1818 <.L18>
    1816:	48 00 20    	mov.w     #0x4, w8

00001818 <.L18>:
    1818:	08 00 78    	mov.w     w8, w0
    181a:	c2 ff 07    	rcall     0x17a0 <_findmem>
    181c:	80 00 eb    	clr.w     w1
    181e:	00 00 e0    	cp0.w     w0
    1820:	19 00 32    	bra       Z, 0x1854 <.L17>
    1822:	90 00 78    	mov.w     [w0], w1
    1824:	91 01 78    	mov.w     [w1], w3
    1826:	64 81 51    	sub.w     w3, #0x4, w2
    1828:	88 0f 51    	sub.w     w2, w8, [w15]
    182a:	03 00 31    	bra       C, 0x1832 <.L19>
    182c:	11 01 90    	mov.w     [w1+2], w2
    182e:	02 08 78    	mov.w     w2, [w0]
    1830:	07 00 37    	bra       0x1840 <.L20>

00001832 <.L19>:
    1832:	08 81 40    	add.w     w1, w8, w2
    1834:	02 08 78    	mov.w     w2, [w0]
    1836:	91 01 90    	mov.w     [w1+2], w3
    1838:	13 01 98    	mov.w     w3, [w2+2]
    183a:	10 01 78    	mov.w     [w0], w2
    183c:	11 09 14    	subr.w    w8, [w1], [w2]
    183e:	88 08 78    	mov.w     w8, [w1]

00001840 <.L20>:
    1840:	10 01 78    	mov.w     [w0], w2
    1842:	00 00 eb    	clr.w     w0
    1844:	02 00 e0    	cp0.w     w2
    1846:	04 00 32    	bra       Z, 0x1850 <.L21>
    1848:	92 01 90    	mov.w     [w2+2], w3
    184a:	03 00 e0    	cp0.w     w3
    184c:	01 00 32    	bra       Z, 0x1850 <.L21>
    184e:	02 80 e8    	inc2.w    w2, w0

00001850 <.L21>:
    1850:	20 5b 88    	mov.w     w0, 0xb64
    1852:	81 80 e8    	inc2.w    w1, w1

00001854 <.L17>:
    1854:	01 00 78    	mov.w     w1, w0
    1856:	4f 04 78    	mov.w     [--w15], w8
    1858:	00 00 06    	return    

0000185a <_strchr>:
    185a:	02 00 37    	bra       0x1860 <.L2>

0000185c <.L4>:
    185c:	03 04 e0    	cp0.b     w3
    185e:	06 00 32    	bra       Z, 0x186c <.L5>

00001860 <.L2>:
    1860:	00 01 78    	mov.w     w0, w2
    1862:	02 00 78    	mov.w     w2, w0
    1864:	b0 41 78    	mov.b     [w0++], w3
    1866:	81 cf 51    	sub.b     w3, w1, [w15]
    1868:	f9 ff 3a    	bra       NZ, 0x185c <.L4>
    186a:	01 00 37    	bra       0x186e <.L3>

0000186c <.L5>:
    186c:	00 01 eb    	clr.w     w2

0000186e <.L3>:
    186e:	02 00 78    	mov.w     w2, w0
    1870:	00 00 06    	return    

00001872 <_strlen>:
    1872:	80 00 78    	mov.w     w0, w1

00001874 <.L2>:
    1874:	01 01 78    	mov.w     w1, w2
    1876:	31 04 e0    	cp0.b     [w1++]
    1878:	fd ff 3a    	bra       NZ, 0x1874 <.L2>
    187a:	00 00 51    	sub.w     w2, w0, w0
    187c:	00 00 06    	return    

0000187e <__Getmem>:
    187e:	80 00 78    	mov.w     w0, w1
    1880:	00 00 eb    	clr.w     w0
    1882:	01 00 e0    	cp0.w     w1
    1884:	05 00 34    	bra       LE, 0x1890 <.L2>
    1886:	01 00 78    	mov.w     w1, w0
    1888:	eb fc 07    	rcall     0x1260 <_sbrk>
    188a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    188c:	01 00 3a    	bra       NZ, 0x1890 <.L2>
    188e:	00 00 eb    	clr.w     w0

00001890 <.L2>:
    1890:	00 00 06    	return    

00001892 <__Puttxt>:
    1892:	04 00 fa    	lnk       #0x4
    1894:	88 9f be    	mov.d     w8, [w15++]
    1896:	8a 9f be    	mov.d     w10, [w15++]
    1898:	8c 1f 78    	mov.w     w12, [w15++]
    189a:	00 04 78    	mov.w     w0, w8
    189c:	01 06 78    	mov.w     w1, w12
    189e:	f8 0d 90    	mov.w     [w8+30], w11
    18a0:	78 00 90    	mov.w     [w8+14], w0
    18a2:	80 85 55    	sub.w     w11, w0, w11
    18a4:	08 08 90    	mov.w     [w8+16], w0
    18a6:	80 85 55    	sub.w     w11, w0, w11
    18a8:	18 08 90    	mov.w     [w8+18], w0
    18aa:	80 85 55    	sub.w     w11, w0, w11
    18ac:	28 08 90    	mov.w     [w8+20], w0
    18ae:	80 85 55    	sub.w     w11, w0, w11
    18b0:	38 08 90    	mov.w     [w8+22], w0
    18b2:	80 85 55    	sub.w     w11, w0, w11
    18b4:	48 08 90    	mov.w     [w8+24], w0
    18b6:	80 85 55    	sub.w     w11, w0, w11
    18b8:	00 02 22    	mov.w     #0x2020, w0
    18ba:	90 bf 9f    	mov.w     w0, [w15-14]
    18bc:	00 03 23    	mov.w     #0x3030, w0
    18be:	a0 bf 9f    	mov.w     w0, [w15-12]
    18c0:	08 10 90    	mov.w     [w8+32], w0
    18c2:	00 28 a3    	btst.z    w0, #0x2
    18c4:	15 00 3a    	bra       NZ, 0x18f0 <.L2> <.Ldebug_info0>
    18c6:	0b 00 e0    	cp0.w     w11
    18c8:	13 00 34    	bra       LE, 0x18f0 <.L2> <.Ldebug_info0>
    18ca:	0b 05 78    	mov.w     w11, w10

000018cc <.L5>:
    18cc:	8a 04 78    	mov.w     w10, w9
    18ce:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    18d0:	01 00 36    	bra       LEU, 0x18d4 <.L3>
    18d2:	29 00 20    	mov.w     #0x2, w9

000018d4 <.L3>:
    18d4:	c8 01 90    	mov.w     [w8+8], w3
    18d6:	09 01 78    	mov.w     w9, w2
    18d8:	ee 80 57    	sub.w     w15, #0xe, w1
    18da:	58 00 90    	mov.w     [w8+10], w0
    18dc:	03 00 01    	call      w3
    18de:	50 04 98    	mov.w     w0, [w8+10]
    18e0:	00 00 e0    	cp0.w     w0
    18e2:	8c 00 32    	bra       Z, 0x19fc <.L29>
    18e4:	68 08 90    	mov.w     [w8+28], w0
    18e6:	09 00 40    	add.w     w0, w9, w0
    18e8:	60 0c 98    	mov.w     w0, [w8+28]
    18ea:	09 05 55    	sub.w     w10, w9, w10
    18ec:	42 40 a9    	bclr.b    0x42, #0x2
    18ee:	ee ff 3c    	bra       GT, 0x18cc <.L5>

000018f0 <.L2>:
    18f0:	78 01 90    	mov.w     [w8+14], w2
    18f2:	02 00 e0    	cp0.w     w2
    18f4:	0c 00 34    	bra       LE, 0x190e <.L6>
    18f6:	c8 01 90    	mov.w     [w8+8], w3
    18f8:	8c 00 78    	mov.w     w12, w1
    18fa:	58 00 90    	mov.w     [w8+10], w0
    18fc:	03 00 01    	call      w3
    18fe:	50 04 98    	mov.w     w0, [w8+10]
    1900:	80 80 eb    	setm.w    w1
    1902:	00 00 e0    	cp0.w     w0
    1904:	7c 00 32    	bra       Z, 0x19fe <.L4>
    1906:	e8 08 90    	mov.w     [w8+28], w1
    1908:	78 00 90    	mov.w     [w8+14], w0
    190a:	00 80 40    	add.w     w1, w0, w0
    190c:	60 0c 98    	mov.w     w0, [w8+28]

0000190e <.L6>:
    190e:	88 0c 90    	mov.w     [w8+16], w9

00001910 <.L30>:
    1910:	09 00 e0    	cp0.w     w9
    1912:	11 00 34    	bra       LE, 0x1936 <.L7>
    1914:	09 05 78    	mov.w     w9, w10
    1916:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1918:	01 00 36    	bra       LEU, 0x191c <.L8>
    191a:	2a 00 20    	mov.w     #0x2, w10

0000191c <.L8>:
    191c:	c8 01 90    	mov.w     [w8+8], w3
    191e:	0a 01 78    	mov.w     w10, w2
    1920:	ec 80 57    	sub.w     w15, #0xc, w1
    1922:	58 00 90    	mov.w     [w8+10], w0
    1924:	03 00 01    	call      w3
    1926:	50 04 98    	mov.w     w0, [w8+10]
    1928:	00 00 e0    	cp0.w     w0
    192a:	68 00 32    	bra       Z, 0x19fc <.L29>
    192c:	68 08 90    	mov.w     [w8+28], w0
    192e:	0a 00 40    	add.w     w0, w10, w0
    1930:	60 0c 98    	mov.w     w0, [w8+28]
    1932:	8a 84 54    	sub.w     w9, w10, w9
    1934:	ed ff 37    	bra       0x1910 <.L30>

00001936 <.L7>:
    1936:	18 09 90    	mov.w     [w8+18], w2
    1938:	02 00 e0    	cp0.w     w2
    193a:	0c 00 34    	bra       LE, 0x1954 <.L10>
    193c:	c8 01 90    	mov.w     [w8+8], w3
    193e:	e8 00 90    	mov.w     [w8+12], w1
    1940:	58 00 90    	mov.w     [w8+10], w0
    1942:	03 00 01    	call      w3
    1944:	50 04 98    	mov.w     w0, [w8+10]
    1946:	80 80 eb    	setm.w    w1
    1948:	00 00 e0    	cp0.w     w0
    194a:	59 00 32    	bra       Z, 0x19fe <.L4>
    194c:	e8 08 90    	mov.w     [w8+28], w1
    194e:	18 08 90    	mov.w     [w8+18], w0
    1950:	00 80 40    	add.w     w1, w0, w0
    1952:	60 0c 98    	mov.w     w0, [w8+28]

00001954 <.L10>:
    1954:	a8 0c 90    	mov.w     [w8+20], w9

00001956 <.L31>:
    1956:	09 00 e0    	cp0.w     w9
    1958:	11 00 34    	bra       LE, 0x197c <.L11>
    195a:	09 05 78    	mov.w     w9, w10
    195c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    195e:	01 00 36    	bra       LEU, 0x1962 <.L12>
    1960:	2a 00 20    	mov.w     #0x2, w10

00001962 <.L12>:
    1962:	c8 01 90    	mov.w     [w8+8], w3
    1964:	0a 01 78    	mov.w     w10, w2
    1966:	ec 80 57    	sub.w     w15, #0xc, w1
    1968:	58 00 90    	mov.w     [w8+10], w0
    196a:	03 00 01    	call      w3
    196c:	50 04 98    	mov.w     w0, [w8+10]
    196e:	00 00 e0    	cp0.w     w0
    1970:	45 00 32    	bra       Z, 0x19fc <.L29>
    1972:	68 08 90    	mov.w     [w8+28], w0
    1974:	0a 00 40    	add.w     w0, w10, w0
    1976:	60 0c 98    	mov.w     w0, [w8+28]
    1978:	8a 84 54    	sub.w     w9, w10, w9
    197a:	ed ff 37    	bra       0x1956 <.L31>

0000197c <.L11>:
    197c:	38 09 90    	mov.w     [w8+22], w2
    197e:	02 00 e0    	cp0.w     w2
    1980:	0e 00 34    	bra       LE, 0x199e <.L14>
    1982:	e8 00 90    	mov.w     [w8+12], w1
    1984:	18 08 90    	mov.w     [w8+18], w0
    1986:	80 80 40    	add.w     w1, w0, w1
    1988:	c8 01 90    	mov.w     [w8+8], w3
    198a:	58 00 90    	mov.w     [w8+10], w0
    198c:	03 00 01    	call      w3
    198e:	50 04 98    	mov.w     w0, [w8+10]
    1990:	80 80 eb    	setm.w    w1
    1992:	00 00 e0    	cp0.w     w0
    1994:	34 00 32    	bra       Z, 0x19fe <.L4>
    1996:	e8 08 90    	mov.w     [w8+28], w1
    1998:	38 08 90    	mov.w     [w8+22], w0
    199a:	00 80 40    	add.w     w1, w0, w0
    199c:	60 0c 98    	mov.w     w0, [w8+28]

0000199e <.L14>:
    199e:	c8 0c 90    	mov.w     [w8+24], w9

000019a0 <.L32>:
    19a0:	09 00 e0    	cp0.w     w9
    19a2:	11 00 34    	bra       LE, 0x19c6 <.L15>
    19a4:	09 05 78    	mov.w     w9, w10
    19a6:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    19a8:	01 00 36    	bra       LEU, 0x19ac <.L16>
    19aa:	2a 00 20    	mov.w     #0x2, w10

000019ac <.L16>:
    19ac:	c8 01 90    	mov.w     [w8+8], w3
    19ae:	0a 01 78    	mov.w     w10, w2
    19b0:	ec 80 57    	sub.w     w15, #0xc, w1
    19b2:	58 00 90    	mov.w     [w8+10], w0
    19b4:	03 00 01    	call      w3
    19b6:	50 04 98    	mov.w     w0, [w8+10]
    19b8:	00 00 e0    	cp0.w     w0
    19ba:	20 00 32    	bra       Z, 0x19fc <.L29>
    19bc:	68 08 90    	mov.w     [w8+28], w0
    19be:	0a 00 40    	add.w     w0, w10, w0
    19c0:	60 0c 98    	mov.w     w0, [w8+28]
    19c2:	8a 84 54    	sub.w     w9, w10, w9
    19c4:	ed ff 37    	bra       0x19a0 <.L32>

000019c6 <.L15>:
    19c6:	08 10 90    	mov.w     [w8+32], w0
    19c8:	80 00 eb    	clr.w     w1
    19ca:	00 28 a3    	btst.z    w0, #0x2
    19cc:	18 00 32    	bra       Z, 0x19fe <.L4>
    19ce:	0b 00 e0    	cp0.w     w11
    19d0:	16 00 34    	bra       LE, 0x19fe <.L4>
    19d2:	8b 04 78    	mov.w     w11, w9

000019d4 <.L19>:
    19d4:	09 05 78    	mov.w     w9, w10
    19d6:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    19d8:	01 00 36    	bra       LEU, 0x19dc <.L18>
    19da:	2a 00 20    	mov.w     #0x2, w10

000019dc <.L18>:
    19dc:	c8 01 90    	mov.w     [w8+8], w3
    19de:	0a 01 78    	mov.w     w10, w2
    19e0:	ee 80 57    	sub.w     w15, #0xe, w1
    19e2:	58 00 90    	mov.w     [w8+10], w0
    19e4:	03 00 01    	call      w3
    19e6:	50 04 98    	mov.w     w0, [w8+10]
    19e8:	00 00 e0    	cp0.w     w0
    19ea:	08 00 32    	bra       Z, 0x19fc <.L29>
    19ec:	68 08 90    	mov.w     [w8+28], w0
    19ee:	0a 00 40    	add.w     w0, w10, w0
    19f0:	60 0c 98    	mov.w     w0, [w8+28]
    19f2:	8a 84 54    	sub.w     w9, w10, w9
    19f4:	42 40 a9    	bclr.b    0x42, #0x2
    19f6:	ee ff 3c    	bra       GT, 0x19d4 <.L19>
    19f8:	80 00 eb    	clr.w     w1
    19fa:	01 00 37    	bra       0x19fe <.L4>

000019fc <.L29>:
    19fc:	80 80 eb    	setm.w    w1

000019fe <.L4>:
    19fe:	01 00 78    	mov.w     w1, w0
    1a00:	4f 06 78    	mov.w     [--w15], w12
    1a02:	4f 05 be    	mov.d     [--w15], w10
    1a04:	4f 04 be    	mov.d     [--w15], w8
    1a06:	00 80 fa    	ulnk      
    1a08:	00 00 06    	return    

00001a0a <__Vacopy>:
    1a0a:	01 08 78    	mov.w     w1, [w0]
    1a0c:	00 00 06    	return    

00001a0e <_doclose>:
    1a0e:	00 c0 da    	.pword 0xdac000
    1a10:	00 00 06    	return    

00001a12 <_doremove>:
    1a12:	00 c0 da    	.pword 0xdac000
    1a14:	00 00 06    	return    

00001a16 <___mulp32eds3>:
    1a16:	02 0a b9    	mul.su    w1, w2, w4
    1a18:	00 1b b9    	mul.su    w3, w0, w6
    1a1a:	02 00 b8    	mul.uu    w0, w2, w0
    1a1c:	81 00 42    	add.w     w4, w1, w1
    1a1e:	81 00 43    	add.w     w6, w1, w1
    1a20:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	90 2a 04    	goto      0x2a90 <.LFE0>
    1006:	00 00 00 
    1008:	90 2a 04    	goto      0x2a90 <.LFE0>
    100a:	00 00 00 
    100c:	90 2a 04    	goto      0x2a90 <.LFE0>
    100e:	00 00 00 
    1010:	90 2a 04    	goto      0x2a90 <.LFE0>
    1012:	00 00 00 
    1014:	90 2a 04    	goto      0x2a90 <.LFE0>
    1016:	00 00 00 
    1018:	90 2a 04    	goto      0x2a90 <.LFE0>
    101a:	00 00 00 
    101c:	90 2a 04    	goto      0x2a90 <.LFE0>
    101e:	00 00 00 
    1020:	90 2a 04    	goto      0x2a90 <.LFE0>
    1022:	00 00 00 
    1024:	90 2a 04    	goto      0x2a90 <.LFE0>
    1026:	00 00 00 
    1028:	90 2a 04    	goto      0x2a90 <.LFE0>
    102a:	00 00 00 
    102c:	90 2a 04    	goto      0x2a90 <.LFE0>
    102e:	00 00 00 
    1030:	90 2a 04    	goto      0x2a90 <.LFE0>
    1032:	00 00 00 
    1034:	90 2a 04    	goto      0x2a90 <.LFE0>
    1036:	00 00 00 
    1038:	90 2a 04    	goto      0x2a90 <.LFE0>
    103a:	00 00 00 
    103c:	90 2a 04    	goto      0x2a90 <.LFE0>
    103e:	00 00 00 
    1040:	90 2a 04    	goto      0x2a90 <.LFE0>
    1042:	00 00 00 
    1044:	90 2a 04    	goto      0x2a90 <.LFE0>
    1046:	00 00 00 
    1048:	90 2a 04    	goto      0x2a90 <.LFE0>
    104a:	00 00 00 
    104c:	90 2a 04    	goto      0x2a90 <.LFE0>
    104e:	00 00 00 
    1050:	90 2a 04    	goto      0x2a90 <.LFE0>
    1052:	00 00 00 
    1054:	90 2a 04    	goto      0x2a90 <.LFE0>
    1056:	00 00 00 
    1058:	90 2a 04    	goto      0x2a90 <.LFE0>
    105a:	00 00 00 
    105c:	90 2a 04    	goto      0x2a90 <.LFE0>
    105e:	00 00 00 
    1060:	90 2a 04    	goto      0x2a90 <.LFE0>
    1062:	00 00 00 
    1064:	90 2a 04    	goto      0x2a90 <.LFE0>
    1066:	00 00 00 
    1068:	90 2a 04    	goto      0x2a90 <.LFE0>
    106a:	00 00 00 
    106c:	90 2a 04    	goto      0x2a90 <.LFE0>
    106e:	00 00 00 
    1070:	90 2a 04    	goto      0x2a90 <.LFE0>
    1072:	00 00 00 
    1074:	90 2a 04    	goto      0x2a90 <.LFE0>
    1076:	00 00 00 
    1078:	90 2a 04    	goto      0x2a90 <.LFE0>
    107a:	00 00 00 
    107c:	90 2a 04    	goto      0x2a90 <.LFE0>
    107e:	00 00 00 
    1080:	90 2a 04    	goto      0x2a90 <.LFE0>
    1082:	00 00 00 
    1084:	90 2a 04    	goto      0x2a90 <.LFE0>
    1086:	00 00 00 
    1088:	90 2a 04    	goto      0x2a90 <.LFE0>
    108a:	00 00 00 
    108c:	90 2a 04    	goto      0x2a90 <.LFE0>
    108e:	00 00 00 
    1090:	90 2a 04    	goto      0x2a90 <.LFE0>
    1092:	00 00 00 
    1094:	90 2a 04    	goto      0x2a90 <.LFE0>
    1096:	00 00 00 
    1098:	90 2a 04    	goto      0x2a90 <.LFE0>
    109a:	00 00 00 
    109c:	90 2a 04    	goto      0x2a90 <.LFE0>
    109e:	00 00 00 
    10a0:	90 2a 04    	goto      0x2a90 <.LFE0>
    10a2:	00 00 00 
    10a4:	90 2a 04    	goto      0x2a90 <.LFE0>
    10a6:	00 00 00 
    10a8:	90 2a 04    	goto      0x2a90 <.LFE0>
    10aa:	00 00 00 
    10ac:	90 2a 04    	goto      0x2a90 <.LFE0>
    10ae:	00 00 00 
    10b0:	90 2a 04    	goto      0x2a90 <.LFE0>
    10b2:	00 00 00 
    10b4:	90 2a 04    	goto      0x2a90 <.LFE0>
    10b6:	00 00 00 
    10b8:	90 2a 04    	goto      0x2a90 <.LFE0>
    10ba:	00 00 00 
    10bc:	90 2a 04    	goto      0x2a90 <.LFE0>
    10be:	00 00 00 
    10c0:	90 2a 04    	goto      0x2a90 <.LFE0>
    10c2:	00 00 00 
    10c4:	90 2a 04    	goto      0x2a90 <.LFE0>
    10c6:	00 00 00 
    10c8:	90 2a 04    	goto      0x2a90 <.LFE0>
    10ca:	00 00 00 
    10cc:	90 2a 04    	goto      0x2a90 <.LFE0>
    10ce:	00 00 00 
    10d0:	90 2a 04    	goto      0x2a90 <.LFE0>
    10d2:	00 00 00 
    10d4:	90 2a 04    	goto      0x2a90 <.LFE0>
    10d6:	00 00 00 
    10d8:	90 2a 04    	goto      0x2a90 <.LFE0>
    10da:	00 00 00 
    10dc:	90 2a 04    	goto      0x2a90 <.LFE0>
    10de:	00 00 00 
    10e0:	90 2a 04    	goto      0x2a90 <.LFE0>
    10e2:	00 00 00 
    10e4:	90 2a 04    	goto      0x2a90 <.LFE0>
    10e6:	00 00 00 
    10e8:	90 2a 04    	goto      0x2a90 <.LFE0>
    10ea:	00 00 00 
    10ec:	64 2a 04    	goto      0x2a64 <__USB1Interrupt>
    10ee:	00 00 00 
    10f0:	90 2a 04    	goto      0x2a90 <.LFE0>
    10f2:	00 00 00 
    10f4:	90 2a 04    	goto      0x2a90 <.LFE0>
    10f6:	00 00 00 
    10f8:	90 2a 04    	goto      0x2a90 <.LFE0>
    10fa:	00 00 00 
    10fc:	90 2a 04    	goto      0x2a90 <.LFE0>
    10fe:	00 00 00 
    1100:	90 2a 04    	goto      0x2a90 <.LFE0>
    1102:	00 00 00 
    1104:	90 2a 04    	goto      0x2a90 <.LFE0>
    1106:	00 00 00 
    1108:	90 2a 04    	goto      0x2a90 <.LFE0>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	90 2a 04    	goto      0x2a90 <.LFE0>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009a22 <.LC0-0xb2>:
    9a22:	12 01       	.word 0x112
    9a24:	00 02       	.word 0x200
    9a26:	02 00       	.word 0x2
    9a28:	00 40       	.word 0x4000
    9a2a:	66 66       	.word 0x6666
    9a2c:	dc 0c       	.word 0xcdc
    9a2e:	00 00       	.word 0
    9a30:	01 02       	.word 0x201
    9a32:	00 01       	.word 0x100
    9a34:	09 02       	.word 0x209
    9a36:	43 00       	.word 0x43
    9a38:	01 01       	.word 0x101
    9a3a:	00 a0       	.word 0xa000
    9a3c:	32 09       	.word 0x932
    9a3e:	04 00       	.word 0x4
    9a40:	00 01       	.word 0x100
    9a42:	02 02       	.word 0x202
    9a44:	01 00       	.word 0x1
    9a46:	05 24       	.word 0x2405
    9a48:	00 10       	.word 0x1000
    9a4a:	01 04       	.word 0x401
    9a4c:	24 02       	.word 0x224
    9a4e:	02 05       	.word 0x502
    9a50:	24 06       	.word 0x624
    9a52:	00 01       	.word 0x100
    9a54:	05 24       	.word 0x2405
    9a56:	01 01       	.word 0x101
    9a58:	01 07       	.word 0x701
    9a5a:	05 81       	.word 0x8105
    9a5c:	03 0a       	.word 0xa03
    9a5e:	00 40       	.word 0x4000
    9a60:	09 04       	.word 0x409
    9a62:	01 00       	.word 0x1
    9a64:	02 0a       	.word 0xa02
    9a66:	00 00       	.word 0
    9a68:	00 07       	.word 0x700
    9a6a:	05 02       	.word 0x205
    9a6c:	02 40       	.word 0x4002
    9a6e:	00 00       	.word 0
    9a70:	07 05       	.word 0x507
    9a72:	82 02       	.word 0x282
    9a74:	40 00       	.word 0x40
    9a76:	00 00       	.word 0
    9a78:	34 9a       	.word 0x9a34
    9a7a:	04 03       	.word 0x304
    9a7c:	09 04       	.word 0x409
    9a7e:	1a 03       	.word 0x31a
    9a80:	4f 00       	.word 0x4f
    9a82:	6c 00       	.word 0x6c
    9a84:	69 00       	.word 0x69
    9a86:	6e 00       	.word 0x6e
    9a88:	20 00       	.word 0x20
    9a8a:	43 00       	.word 0x43
    9a8c:	6f 00       	.word 0x6f
    9a8e:	6c 00       	.word 0x6c
    9a90:	6c 00       	.word 0x6c
    9a92:	65 00       	.word 0x65
    9a94:	67 00       	.word 0x67
    9a96:	65 00       	.word 0x65
    9a98:	36 03       	.word 0x336
    9a9a:	50 00       	.word 0x50
    9a9c:	49 00       	.word 0x49
    9a9e:	43 00       	.word 0x43
    9aa0:	32 00       	.word 0x32
    9aa2:	34 00       	.word 0x34
    9aa4:	46 00       	.word 0x46
    9aa6:	4a 00       	.word 0x4a
    9aa8:	31 00       	.word 0x31
    9aaa:	32 00       	.word 0x32
    9aac:	38 00       	.word 0x38
    9aae:	47 00       	.word 0x47
    9ab0:	42 00       	.word 0x42
    9ab2:	32 00       	.word 0x32
    9ab4:	30 00       	.word 0x30
    9ab6:	36 00       	.word 0x36
    9ab8:	20 00       	.word 0x20
    9aba:	43 00       	.word 0x43
    9abc:	44 00       	.word 0x44
    9abe:	43 00       	.word 0x43
    9ac0:	20 00       	.word 0x20
    9ac2:	44 00       	.word 0x44
    9ac4:	65 00       	.word 0x65
    9ac6:	76 00       	.word 0x76
    9ac8:	69 00       	.word 0x69
    9aca:	63 00       	.word 0x63
    9acc:	65 00       	.word 0x65
    9ace:	7a 9a       	.word 0x9a7a
    9ad0:	7e 9a       	.word 0x9a7e
    9ad2:	98 9a       	.word 0x9a98

00009ad4 <.LC0>:
    9ad4:	48 65       	.word 0x6548
    9ad6:	6c 6c       	.word 0x6c6c
    9ad8:	6f 20       	.word 0x206f
    9ada:	77 6f       	.word 0x6f77
    9adc:	72 6c       	.word 0x6c72
    9ade:	64 21       	.word 0x2164
    9ae0:	21 0a       	.word 0xa21
    9ae2:	0d 00       	.word 0xd

00009ae4 <.LC1>:
    9ae4:	3e 3e       	.word 0x3e3e
    9ae6:	3e 20       	.word 0x203e
    9ae8:	00 00       	.word 0
Disassembly of section .text:

00001aea <_usb_disable_endpoints>:
    usb_service();
}
#endif

void usb_disable_endpoints(uint8_t starting_ep) {
    1aea:	06 00 fa    	lnk       #0x6
    1aec:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t *U1EP;
    uint8_t ep;

    U1EP = (uint16_t *)&U1EP0;
    1aee:	a0 4a 20    	mov.w     #0x4aa, w0
    1af0:	10 07 98    	mov.w     w0, [w14+2]
    for (ep = starting_ep; ep < 16; ep++) {
    1af2:	ce 40 90    	mov.b     [w14+4], w1
    1af4:	01 4f 78    	mov.b     w1, [w14]
    1af6:	13 00 37    	bra       0x1b1e <.L3>

00001af8 <.L4>:
        U1EP[ep] = ENDPT_DISABLED;
    1af8:	1e 80 fb    	ze        [w14], w0
    1afa:	00 00 40    	add.w     w0, w0, w0
    1afc:	9e 00 90    	mov.w     [w14+2], w1
    1afe:	00 80 40    	add.w     w1, w0, w0
    1b00:	80 00 eb    	clr.w     w1
    1b02:	01 08 78    	mov.w     w1, [w0]
        USB_in_callbacks[ep] = (USB_CALLBACK_T)NULL;
    1b04:	1e 80 fb    	ze        [w14], w0
    1b06:	80 00 40    	add.w     w0, w0, w1
    1b08:	e0 d0 20    	mov.w     #0xd0e, w0
    1b0a:	00 80 40    	add.w     w1, w0, w0
    1b0c:	80 00 eb    	clr.w     w1
    1b0e:	01 08 78    	mov.w     w1, [w0]
        USB_out_callbacks[ep] = (USB_CALLBACK_T)NULL;
    1b10:	1e 80 fb    	ze        [w14], w0
    1b12:	80 00 40    	add.w     w0, w0, w1
    1b14:	e0 d2 20    	mov.w     #0xd2e, w0
    1b16:	00 80 40    	add.w     w1, w0, w0
    1b18:	80 00 eb    	clr.w     w1
    1b1a:	01 08 78    	mov.w     w1, [w0]
    1b1c:	1e 4f e8    	inc.b     [w14], [w14]

00001b1e <.L3>:
    1b1e:	1e 40 78    	mov.b     [w14], w0
    1b20:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    1b22:	ea ff 36    	bra       LEU, 0x1af8 <.L4>
    }
}
    1b24:	00 80 fa    	ulnk      
    1b26:	00 00 06    	return    

00001b28 <_usb_set_address_callback>:

void usb_set_address_callback(void) {
    1b28:	00 00 fa    	lnk       #0x0
    switch (U1ADDR = USB_request.setup.wValue.b[0]) {
    1b2a:	20 d0 20    	mov.w     #0xd02, w0
    1b2c:	10 40 78    	mov.b     [w0], w0
    1b2e:	00 80 fb    	ze        w0, w0
    1b30:	b0 24 88    	mov.w     w0, 0x496
    1b32:	b0 24 80    	mov.w     0x496, w0
    1b34:	00 00 e0    	cp0.w     w0
    1b36:	03 00 3a    	bra       NZ, 0x1b3e <.L9>
        case 0:
            USB_USWSTAT = DEFAULT_STATE;
    1b38:	10 c0 b3    	mov.b     #0x1, w0
    1b3a:	10 e8 b7    	mov.b     WREG, 0x810
            break;
    1b3c:	02 00 37    	bra       0x1b42 <.L8>

00001b3e <.L9>:
        default:
            USB_USWSTAT = ADDRESS_STATE;
    1b3e:	20 c0 b3    	mov.b     #0x2, w0
    1b40:	10 e8 b7    	mov.b     WREG, 0x810

00001b42 <.L8>:
    }
    USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    1b42:	00 00 eb    	clr.w     w0
    1b44:	70 68 88    	mov.w     w0, 0xd0e
}
    1b46:	00 80 fa    	ulnk      
    1b48:	00 00 06    	return    

00001b4a <_init_usb>:

void init_usb(void) {
    1b4a:	00 00 fa    	lnk       #0x0
    IEC5bits.USB1IE = 0;                    // disable USB interrupt
    1b4c:	9e c0 a9    	bclr.b    0x9e, #0x6

    U1CONbits.PPBRST = 1;
    1b4e:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    1b50:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    1b52:	f0 0f 20    	mov.w     #0xff, w0
    1b54:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    1b56:	94 24 a9    	bclr.b    0x494, #0x1
    usb_disable_endpoints(0);               // disable all endpoints
    1b58:	00 40 eb    	clr.b     w0
    1b5a:	c7 ff 07    	rcall     0x1aea <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
    U1EP0 = ENDPT_CONTROL;
    1b5c:	d0 00 20    	mov.w     #0xd, w0
    1b5e:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1b60:	00 c0 20    	mov.w     #0xc00, w0
    1b62:	01 c4 b3    	mov.b     #0x40, w1
    1b64:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    1b66:	00 c8 20    	mov.w     #0xc80, w0
    1b68:	10 60 88    	mov.w     w0, 0xc02
    BD[EP0OUT].status = UOWN | DTSEN;       // set UOWN bit (USB can write)
    1b6a:	10 c0 20    	mov.w     #0xc01, w0
    1b6c:	81 c8 b3    	mov.b     #0x88, w1
    1b6e:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    1b70:	00 cc 20    	mov.w     #0xcc0, w0
    1b72:	30 60 88    	mov.w     w0, 0xc06
    BD[EP0IN].status = DTSEN;               // clear UOWN bit (MCU can write)
    1b74:	50 c0 20    	mov.w     #0xc05, w0
    1b76:	81 c0 b3    	mov.b     #0x8, w1
    1b78:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0;
    1b7a:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0;
    1b7c:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (uint16_t)BD >> 8;
    1b7e:	00 c0 20    	mov.w     #0xc00, w0
    1b80:	48 00 de    	lsr.w     w0, #0x8, w0
    1b82:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    1b84:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    1b86:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    1b88:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    1b8a:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0;
    1b8c:	0d 68 ef    	clr.b     0x80d
    USB_USWSTAT = POWERED_STATE;
    1b8e:	10 68 ef    	clr.b     0x810
    USB_device_status = 1;
    1b90:	10 c0 b3    	mov.b     #0x1, w0
    1b92:	0e e8 b7    	mov.b     WREG, 0x80e
    USB_request.setup.bmRequestType = NO_REQUEST;
    1b94:	00 d0 20    	mov.w     #0xd00, w0
    1b96:	80 c0 eb    	setm.b    w1
    1b98:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    1b9a:	10 d0 20    	mov.w     #0xd01, w0
    1b9c:	80 c0 eb    	setm.b    w1
    1b9e:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    1ba0:	00 00 eb    	clr.w     w0
    1ba2:	50 68 88    	mov.w     w0, 0xd0a
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1ba4:	00 00 eb    	clr.w     w0
    1ba6:	60 68 88    	mov.w     w0, 0xd0c
    while (U1CONbits.SE0) {}
    1ba8:	00 00 00    	nop       

00001baa <.L11>:
    1baa:	a1 24 80    	mov.w     0x494, w1
    1bac:	00 04 20    	mov.w     #0x40, w0
    1bae:	00 80 60    	and.w     w1, w0, w0
    1bb0:	00 00 e0    	cp0.w     w0
    1bb2:	fb ff 3a    	bra       NZ, 0x1baa <.L11>

#ifdef USB_INTERRUPT
    U1IE = 0xFF;
    1bb4:	f0 0f 20    	mov.w     #0xff, w0
    1bb6:	60 24 88    	mov.w     w0, 0x48c
    U1EIE = 0xFF;
    1bb8:	f0 0f 20    	mov.w     #0xff, w0
    1bba:	80 24 88    	mov.w     w0, 0x490
    IFS5bits.USB1IF = 0;
    1bbc:	8e c0 a9    	bclr.b    0x8e, #0x6
    IEC5bits.USB1IE = 1;
    1bbe:	9e c0 a8    	bset.b    0x9e, #0x6
#endif
}
    1bc0:	00 80 fa    	ulnk      
    1bc2:	00 00 06    	return    

00001bc4 <_usb_service>:

void usb_service(void) {
    1bc4:	04 00 fa    	lnk       #0x4
    BUFDESC *buf_desc_ptr;
    uint8_t ep;

    if (U1IRbits.UERRIF) {
    1bc6:	50 24 80    	mov.w     0x48a, w0
    1bc8:	62 00 60    	and.w     w0, #0x2, w0
    1bca:	00 00 e0    	cp0.w     w0
    1bcc:	05 00 32    	bra       Z, 0x1bd8 <.L13>
        U1EIR = 0xFF;                       // clear all flags in U1EIR to clear U1EIR
    1bce:	f0 0f 20    	mov.w     #0xff, w0
    1bd0:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;                 // clear UERRIF
    1bd2:	20 00 20    	mov.w     #0x2, w0
    1bd4:	50 24 88    	mov.w     w0, 0x48a
    1bd6:	ba 00 37    	bra       0x1d4c <.L14>

00001bd8 <.L13>:
    } else if (U1IRbits.SOFIF) {
    1bd8:	50 24 80    	mov.w     0x48a, w0
    1bda:	64 00 60    	and.w     w0, #0x4, w0
    1bdc:	00 00 e0    	cp0.w     w0
    1bde:	03 00 32    	bra       Z, 0x1be6 <.L15>
        U1IR = U1IR_SOFIF;                  // clear SOFIF
    1be0:	40 00 20    	mov.w     #0x4, w0
    1be2:	50 24 88    	mov.w     w0, 0x48a
    1be4:	b3 00 37    	bra       0x1d4c <.L14>

00001be6 <.L15>:
    } else if (U1IRbits.IDLEIF) {
    1be6:	50 24 80    	mov.w     0x48a, w0
    1be8:	70 00 60    	and.w     w0, #0x10, w0
    1bea:	00 00 e0    	cp0.w     w0
    1bec:	03 00 32    	bra       Z, 0x1bf4 <.L16>
        U1IR = U1IR_IDLEIF;                 // clear IDLEIF
    1bee:	00 01 20    	mov.w     #0x10, w0
    1bf0:	50 24 88    	mov.w     w0, 0x48a
    1bf2:	ac 00 37    	bra       0x1d4c <.L14>

00001bf4 <.L16>:
//      U1PWRCbits.USUSPND = 1;             // put USB module in suspend mode
    } else if (U1IRbits.RESUMEIF) {
    1bf4:	51 24 80    	mov.w     0x48a, w1
    1bf6:	00 02 20    	mov.w     #0x20, w0
    1bf8:	00 80 60    	and.w     w1, w0, w0
    1bfa:	00 00 e0    	cp0.w     w0
    1bfc:	03 00 32    	bra       Z, 0x1c04 <.L17>
        U1IR = U1IR_RESUMEIF;               // clear RESUMEIF
    1bfe:	00 02 20    	mov.w     #0x20, w0
    1c00:	50 24 88    	mov.w     w0, 0x48a
    1c02:	a4 00 37    	bra       0x1d4c <.L14>

00001c04 <.L17>:
//      U1PWRCbits.USUSPND = 0;             // resume USB module operation
    } else if (U1IRbits.STALLIF) {
    1c04:	51 24 80    	mov.w     0x48a, w1
    1c06:	00 08 20    	mov.w     #0x80, w0
    1c08:	00 80 60    	and.w     w1, w0, w0
    1c0a:	00 00 e0    	cp0.w     w0
    1c0c:	03 00 32    	bra       Z, 0x1c14 <.L18>
        U1IR = U1IR_STALLIF;                // clear STALLIF
    1c0e:	00 08 20    	mov.w     #0x80, w0
    1c10:	50 24 88    	mov.w     w0, 0x48a
    1c12:	9c 00 37    	bra       0x1d4c <.L14>

00001c14 <.L18>:
    } else if (U1IRbits.URSTIF) {
    1c14:	50 24 80    	mov.w     0x48a, w0
    1c16:	61 00 60    	and.w     w0, #0x1, w0
    1c18:	00 00 e0    	cp0.w     w0
    1c1a:	27 00 32    	bra       Z, 0x1c6a <.L19>
        USB_curr_config = 0;
    1c1c:	0d 68 ef    	clr.b     0x80d
        while (U1IRbits.TRNIF) {
    1c1e:	08 00 37    	bra       0x1c30 <.L20>

00001c20 <.L21>:
            U1IR = U1IR_TRNIF;              // clear TRNIF to advance the U1STAT FIFO
    1c20:	80 00 20    	mov.w     #0x8, w0
    1c22:	50 24 88    	mov.w     w0, 0x48a
	...

00001c30 <.L20>:
    1c30:	50 24 80    	mov.w     0x48a, w0
    1c32:	68 00 60    	and.w     w0, #0x8, w0
    1c34:	00 00 e0    	cp0.w     w0
    1c36:	f4 ff 3a    	bra       NZ, 0x1c20 <.L21>
            __builtin_nop();                // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();                // ...to allow a pending TRNIF to appear
        }
        usb_disable_endpoints(0);           // disable all endpoints
    1c38:	00 40 eb    	clr.b     w0
    1c3a:	57 ff 07    	rcall     0x1aea <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1c3c:	00 c0 20    	mov.w     #0xc00, w0
    1c3e:	01 c4 b3    	mov.b     #0x40, w1
    1c40:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    1c42:	00 c8 20    	mov.w     #0xc80, w0
    1c44:	10 60 88    	mov.w     w0, 0xc02
        BD[EP0OUT].status = UOWN | DTSEN;   // set UOWN bit (USB can write)
    1c46:	10 c0 20    	mov.w     #0xc01, w0
    1c48:	81 c8 b3    	mov.b     #0x88, w1
    1c4a:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;  // EP0 IN gets a buffer
    1c4c:	00 cc 20    	mov.w     #0xcc0, w0
    1c4e:	30 60 88    	mov.w     w0, 0xc06
        BD[EP0IN].status = DTSEN;           // clear UOWN bit (MCU can write)
    1c50:	50 c0 20    	mov.w     #0xc05, w0
    1c52:	81 c0 b3    	mov.b     #0x8, w1
    1c54:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0;                         // set USB Address to 0
    1c56:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                        // clear all the USB interrupt flags
    1c58:	f0 0f 20    	mov.w     #0xff, w0
    1c5a:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;              // EP0 is a control pipe and requires an ACK
    1c5c:	d0 00 20    	mov.w     #0xd, w0
    1c5e:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                     // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    1c60:	10 c0 b3    	mov.b     #0x1, w0
    1c62:	10 e8 b7    	mov.b     WREG, 0x810
        USB_device_status = 1;              // self powered, remote wakeup disabled
    1c64:	10 c0 b3    	mov.b     #0x1, w0
    1c66:	0e e8 b7    	mov.b     WREG, 0x80e
    1c68:	71 00 37    	bra       0x1d4c <.L14>

00001c6a <.L19>:
    } else if (U1IRbits.TRNIF) {
    1c6a:	50 24 80    	mov.w     0x48a, w0
    1c6c:	68 00 60    	and.w     w0, #0x8, w0
    1c6e:	00 00 e0    	cp0.w     w0
    1c70:	6d 00 32    	bra       Z, 0x1d4c <.L14>
        buf_desc_ptr = &BD[U1STAT >> 3];    // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    1c72:	90 24 80    	mov.w     0x492, w0
    1c74:	43 00 de    	lsr.w     w0, #0x3, w0
    1c76:	c2 00 dd    	sl.w      w0, #0x2, w1
    1c78:	00 c0 20    	mov.w     #0xc00, w0
    1c7a:	00 8f 40    	add.w     w1, w0, [w14]
        USB_buffer_desc.status = buf_desc_ptr->status;
    1c7c:	1e 00 78    	mov.w     [w14], w0
    1c7e:	10 40 90    	mov.b     [w0+1], w0
    1c80:	01 e8 b7    	mov.b     WREG, 0x801
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    1c82:	1e 00 78    	mov.w     [w14], w0
    1c84:	10 40 78    	mov.b     [w0], w0
    1c86:	00 e8 b7    	mov.b     WREG, 0x800
        USB_buffer_desc.address = buf_desc_ptr->address;
    1c88:	1e 00 78    	mov.w     [w14], w0
    1c8a:	10 00 90    	mov.w     [w0+2], w0
    1c8c:	10 40 88    	mov.w     w0, 0x802
        USB_USTAT = U1STAT;                 // save the USB status register
    1c8e:	90 24 80    	mov.w     0x492, w0
    1c90:	00 40 78    	mov.b     w0, w0
    1c92:	0f e8 b7    	mov.b     WREG, 0x80f
        U1IR = U1IR_TRNIF;                  // clear TRNIF
    1c94:	80 00 20    	mov.w     #0x8, w0
    1c96:	50 24 88    	mov.w     w0, 0x48a
        USB_error_flags = 0;                // clear USB error flags
    1c98:	0c 68 ef    	clr.b     0x80c
        switch (USB_buffer_desc.status & 0x3C) {    // extract PID bits
    1c9a:	01 c8 bf    	mov.b     0x801, WREG
    1c9c:	80 80 fb    	ze        w0, w1
    1c9e:	c0 03 20    	mov.w     #0x3c, w0
    1ca0:	00 80 60    	and.w     w1, w0, w0
    1ca2:	41 02 20    	mov.w     #0x24, w1
    1ca4:	81 0f 50    	sub.w     w0, w1, [w15]
    1ca6:	08 00 32    	bra       Z, 0x1cb8 <.L24>
    1ca8:	41 03 20    	mov.w     #0x34, w1
    1caa:	81 0f 50    	sub.w     w0, w1, [w15]
    1cac:	03 00 32    	bra       Z, 0x1cb4 <.L25>
    1cae:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    1cb0:	17 00 32    	bra       Z, 0x1ce0 <.L23>
    1cb2:	3d 00 37    	bra       0x1d2e <.L22>

00001cb4 <.L25>:
            case TOKEN_SETUP:
                usb_process_setup_token();
    1cb4:	4e 00 07    	rcall     0x1d52 <_usb_process_setup_token> <.LFB5> <.LFE4>
                break;
    1cb6:	3b 00 37    	bra       0x1d2e <.L22>

00001cb8 <.L24>:
            case TOKEN_IN:
                ep = (USB_USTAT >> 4) & 0x0F;
    1cb8:	0f c8 bf    	mov.b     0x80f, WREG
    1cba:	00 80 fb    	ze        w0, w0
    1cbc:	44 00 de    	lsr.w     w0, #0x4, w0
    1cbe:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_in_callbacks[ep])
    1cc0:	2e 40 90    	mov.b     [w14+2], w0
    1cc2:	00 80 fb    	ze        w0, w0
    1cc4:	80 00 40    	add.w     w0, w0, w1
    1cc6:	e0 d0 20    	mov.w     #0xd0e, w0
    1cc8:	00 80 40    	add.w     w1, w0, w0
    1cca:	10 00 78    	mov.w     [w0], w0
    1ccc:	00 00 e0    	cp0.w     w0
    1cce:	2e 00 32    	bra       Z, 0x1d2c <.L28>
                    USB_in_callbacks[ep]();
    1cd0:	2e 40 90    	mov.b     [w14+2], w0
    1cd2:	00 80 fb    	ze        w0, w0
    1cd4:	80 00 40    	add.w     w0, w0, w1
    1cd6:	e0 d0 20    	mov.w     #0xd0e, w0
    1cd8:	00 80 40    	add.w     w1, w0, w0
    1cda:	10 00 78    	mov.w     [w0], w0
    1cdc:	00 00 01    	call      w0
                break;
    1cde:	27 00 37    	bra       0x1d2e <.L22>

00001ce0 <.L23>:
            case TOKEN_OUT:
                ep = (USB_USTAT >> 4) & 0x0F;
    1ce0:	0f c8 bf    	mov.b     0x80f, WREG
    1ce2:	00 80 fb    	ze        w0, w0
    1ce4:	44 00 de    	lsr.w     w0, #0x4, w0
    1ce6:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_out_callbacks[ep])
    1ce8:	2e 40 90    	mov.b     [w14+2], w0
    1cea:	00 80 fb    	ze        w0, w0
    1cec:	80 00 40    	add.w     w0, w0, w1
    1cee:	e0 d2 20    	mov.w     #0xd2e, w0
    1cf0:	00 80 40    	add.w     w1, w0, w0
    1cf2:	10 00 78    	mov.w     [w0], w0
    1cf4:	00 00 e0    	cp0.w     w0
    1cf6:	07 00 32    	bra       Z, 0x1d06 <.L27>
                    USB_out_callbacks[ep]();
    1cf8:	2e 40 90    	mov.b     [w14+2], w0
    1cfa:	00 80 fb    	ze        w0, w0
    1cfc:	80 00 40    	add.w     w0, w0, w1
    1cfe:	e0 d2 20    	mov.w     #0xd2e, w0
    1d00:	00 80 40    	add.w     w1, w0, w0
    1d02:	10 00 78    	mov.w     [w0], w0
    1d04:	00 00 01    	call      w0

00001d06 <.L27>:
                if ((ep == 0) && (USB_request.bytes_left.w == 0)) {
    1d06:	2e 40 90    	mov.b     [w14+2], w0
    1d08:	00 04 e0    	cp0.b     w0
    1d0a:	11 00 3a    	bra       NZ, 0x1d2e <.L22>
    1d0c:	50 68 80    	mov.w     0xd0a, w0
    1d0e:	00 00 e0    	cp0.w     w0
    1d10:	0e 00 3a    	bra       NZ, 0x1d2e <.L22>
                    BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // reset EP0 OUT buffer
    1d12:	00 c0 20    	mov.w     #0xc00, w0
    1d14:	01 c4 b3    	mov.b     #0x40, w1
    1d16:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0OUT].status = UOWN | DTSEN;
    1d18:	10 c0 20    	mov.w     #0xc01, w0
    1d1a:	81 c8 b3    	mov.b     #0x88, w1
    1d1c:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0;                // complete status phase of control transfer
    1d1e:	40 c0 20    	mov.w     #0xc04, w0
    1d20:	80 40 eb    	clr.b     w1
    1d22:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1d24:	50 c0 20    	mov.w     #0xc05, w0
    1d26:	81 cc b3    	mov.b     #0xc8, w1
    1d28:	01 48 78    	mov.b     w1, [w0]
    1d2a:	01 00 37    	bra       0x1d2e <.L22>

00001d2c <.L28>:
    1d2c:	00 00 00    	nop       

00001d2e <.L22>:
                }
        }
        if (USB_error_flags & REQUEST_ERROR) {      // if there was a Request Error...
    1d2e:	0c c8 bf    	mov.b     0x80c, WREG
    1d30:	00 80 fb    	ze        w0, w0
    1d32:	61 00 60    	and.w     w0, #0x1, w0
    1d34:	00 40 78    	mov.b     w0, w0
    1d36:	00 04 e0    	cp0.b     w0
    1d38:	09 00 32    	bra       Z, 0x1d4c <.L14>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // ...get ready to receive the next Setup token...
    1d3a:	00 c0 20    	mov.w     #0xc00, w0
    1d3c:	01 c4 b3    	mov.b     #0x40, w1
    1d3e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | BSTALL;
    1d40:	50 c0 20    	mov.w     #0xc05, w0
    1d42:	41 c8 b3    	mov.b     #0x84, w1
    1d44:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = UOWN | BSTALL;      // ...and issue a protocol stall on EP0
    1d46:	10 c0 20    	mov.w     #0xc01, w0
    1d48:	41 c8 b3    	mov.b     #0x84, w1
    1d4a:	01 48 78    	mov.b     w1, [w0]

00001d4c <.L14>:
        }
    }
    IFS5bits.USB1IF = 0;                    // clear USB Interrupt flag
    1d4c:	8e c0 a9    	bclr.b    0x8e, #0x6
}
    1d4e:	00 80 fa    	ulnk      
    1d50:	00 00 06    	return    

00001d52 <_usb_process_setup_token>:

void usb_process_setup_token(void) {
    1d52:	02 00 fa    	lnk       #0x2
    uint8_t *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    1d54:	11 40 80    	mov.w     0x802, w1
    1d56:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;           // copy the setup packet received from the host
    1d58:	1e 00 78    	mov.w     [w14], w0
    1d5a:	90 40 78    	mov.b     [w0], w1
    1d5c:	40 80 20    	mov.w     #0x804, w0
    1d5e:	01 48 78    	mov.b     w1, [w0]
    1d60:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    1d62:	1e 00 78    	mov.w     [w14], w0
    1d64:	90 40 78    	mov.b     [w0], w1
    1d66:	40 80 20    	mov.w     #0x804, w0
    1d68:	11 40 98    	mov.b     w1, [w0+1]
    1d6a:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    1d6c:	1e 00 78    	mov.w     [w14], w0
    1d6e:	90 40 78    	mov.b     [w0], w1
    1d70:	40 80 20    	mov.w     #0x804, w0
    1d72:	21 40 98    	mov.b     w1, [w0+2]
    1d74:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    1d76:	1e 00 78    	mov.w     [w14], w0
    1d78:	90 40 78    	mov.b     [w0], w1
    1d7a:	40 80 20    	mov.w     #0x804, w0
    1d7c:	31 40 98    	mov.b     w1, [w0+3]
    1d7e:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    1d80:	1e 00 78    	mov.w     [w14], w0
    1d82:	90 40 78    	mov.b     [w0], w1
    1d84:	40 80 20    	mov.w     #0x804, w0
    1d86:	41 40 98    	mov.b     w1, [w0+4]
    1d88:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    1d8a:	1e 00 78    	mov.w     [w14], w0
    1d8c:	90 40 78    	mov.b     [w0], w1
    1d8e:	40 80 20    	mov.w     #0x804, w0
    1d90:	51 40 98    	mov.b     w1, [w0+5]
    1d92:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    1d94:	1e 00 78    	mov.w     [w14], w0
    1d96:	90 40 78    	mov.b     [w0], w1
    1d98:	40 80 20    	mov.w     #0x804, w0
    1d9a:	61 40 98    	mov.b     w1, [w0+6]
    1d9c:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    1d9e:	1e 00 78    	mov.w     [w14], w0
    1da0:	90 40 78    	mov.b     [w0], w1
    1da2:	40 80 20    	mov.w     #0x804, w0
    1da4:	71 40 98    	mov.b     w1, [w0+7]
    1da6:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;         // reset the EP0 OUT byte count
    1da8:	00 c0 20    	mov.w     #0xc00, w0
    1daa:	01 c4 b3    	mov.b     #0x40, w1
    1dac:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = DTSEN;                       // return the EP0 IN buffer to us (dequeue any pending requests)
    1dae:	50 c0 20    	mov.w     #0xc05, w0
    1db0:	81 c0 b3    	mov.b     #0x8, w1
    1db2:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType & UOWN) && (USB_setup.wLength.w)) ? UOWN | DTS | DTSEN:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    1db4:	40 80 20    	mov.w     #0x804, w0
    1db6:	10 40 78    	mov.b     [w0], w0
    1db8:	00 04 e0    	cp0.b     w0
    1dba:	06 00 35    	bra       LT, 0x1dc8 <.L30>
    1dbc:	40 80 20    	mov.w     #0x804, w0
    1dbe:	30 00 90    	mov.w     [w0+6], w0
    1dc0:	00 00 e0    	cp0.w     w0
    1dc2:	02 00 32    	bra       Z, 0x1dc8 <.L30>
    1dc4:	80 cc b3    	mov.b     #0xc8, w0
    1dc6:	01 00 37    	bra       0x1dca <.L31>

00001dc8 <.L30>:
    1dc8:	80 c8 b3    	mov.b     #0x88, w0

00001dca <.L31>:
    1dca:	11 c0 20    	mov.w     #0xc01, w1
    1dcc:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                           // assuming there is nothing to dequeue, clear the packet disable bit
    1dce:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    1dd0:	00 d0 20    	mov.w     #0xd00, w0
    1dd2:	80 c0 eb    	setm.b    w1
    1dd4:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    1dd6:	10 d0 20    	mov.w     #0xd01, w0
    1dd8:	80 c0 eb    	setm.b    w1
    1dda:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    1ddc:	00 00 eb    	clr.w     w0
    1dde:	50 68 88    	mov.w     w0, 0xd0a
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1de0:	00 00 eb    	clr.w     w0
    1de2:	60 68 88    	mov.w     w0, 0xd0c
    switch (USB_setup.bmRequestType & 0x60) {       // extract request type bits
    1de4:	40 80 20    	mov.w     #0x804, w0
    1de6:	10 40 78    	mov.b     [w0], w0
    1de8:	80 80 fb    	ze        w0, w1
    1dea:	00 06 20    	mov.w     #0x60, w0
    1dec:	00 80 60    	and.w     w1, w0, w0
    1dee:	01 02 20    	mov.w     #0x20, w1
    1df0:	81 0f 50    	sub.w     w0, w1, [w15]
    1df2:	11 00 32    	bra       Z, 0x1e16 <.L34>
    1df4:	01 04 20    	mov.w     #0x40, w1
    1df6:	81 0f 50    	sub.w     w0, w1, [w15]
    1df8:	04 00 32    	bra       Z, 0x1e02 <.L35>
    1dfa:	00 00 e0    	cp0.w     w0
    1dfc:	16 00 3a    	bra       NZ, 0x1e2a <.L41>
        case STANDARD_REQ:
            usb_standard_requests();
    1dfe:	1a 00 07    	rcall     0x1e34 <_usb_standard_requests> <.LFB6> <.LFE5>
            break;
    1e00:	17 00 37    	bra       0x1e30 <.L29>

00001e02 <.L35>:
        case VENDOR_REQ:
            if (USB_setup_vendor_callback)
    1e02:	c0 40 80    	mov.w     0x818, w0
    1e04:	00 00 e0    	cp0.w     w0
    1e06:	03 00 32    	bra       Z, 0x1e0e <.L37>
                USB_setup_vendor_callback();
    1e08:	c0 40 80    	mov.w     0x818, w0
    1e0a:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    1e0c:	11 00 37    	bra       0x1e30 <.L29>

00001e0e <.L37>:
    1e0e:	0c c8 bf    	mov.b     0x80c, WREG
    1e10:	00 04 a0    	bset.b    w0, #0x0
    1e12:	0c e8 b7    	mov.b     WREG, 0x80c
    1e14:	0d 00 37    	bra       0x1e30 <.L29>

00001e16 <.L34>:
        case CLASS_REQ:
            if (USB_setup_class_callback)
    1e16:	b0 40 80    	mov.w     0x816, w0
    1e18:	00 00 e0    	cp0.w     w0
    1e1a:	03 00 32    	bra       Z, 0x1e22 <.L39>
                USB_setup_class_callback();
    1e1c:	b0 40 80    	mov.w     0x816, w0
    1e1e:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    1e20:	07 00 37    	bra       0x1e30 <.L29>

00001e22 <.L39>:
    1e22:	0c c8 bf    	mov.b     0x80c, WREG
    1e24:	00 04 a0    	bset.b    w0, #0x0
    1e26:	0c e8 b7    	mov.b     WREG, 0x80c
    1e28:	03 00 37    	bra       0x1e30 <.L29>

00001e2a <.L41>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    1e2a:	0c c8 bf    	mov.b     0x80c, WREG
    1e2c:	00 04 a0    	bset.b    w0, #0x0
    1e2e:	0c e8 b7    	mov.b     WREG, 0x80c

00001e30 <.L29>:
    }
}
    1e30:	00 80 fa    	ulnk      
    1e32:	00 00 06    	return    

00001e34 <_usb_standard_requests>:

void usb_standard_requests(void) {
    1e34:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    uint16_t *U1EP;
    uint8_t ep;

    switch (USB_setup.bRequest) {
    1e36:	40 80 20    	mov.w     #0x804, w0
    1e38:	10 40 90    	mov.b     [w0+1], w0
    1e3a:	00 80 fb    	ze        w0, w0
    1e3c:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    1e3e:	bc 01 32    	bra       Z, 0x21b8 <.L47>
    1e40:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    1e42:	0c 00 3c    	bra       GT, 0x1e5c <.L52>
    1e44:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e46:	c1 00 32    	bra       Z, 0x1fca <.L45>
    1e48:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e4a:	03 00 3c    	bra       GT, 0x1e52 <.L53>
    1e4c:	00 00 e0    	cp0.w     w0
    1e4e:	12 00 32    	bra       Z, 0x1e74 <.L44>
    1e50:	87 02 37    	bra       0x2360 <.L43>

00001e52 <.L53>:
    1e52:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1e54:	ba 00 32    	bra       Z, 0x1fca <.L45>
    1e56:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1e58:	8d 01 32    	bra       Z, 0x2174 <.L46>
    1e5a:	82 02 37    	bra       0x2360 <.L43>

00001e5c <.L52>:
    1e5c:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    1e5e:	22 02 32    	bra       Z, 0x22a4 <.L49>
    1e60:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    1e62:	03 00 3c    	bra       GT, 0x1e6a <.L54>
    1e64:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1e66:	13 02 32    	bra       Z, 0x228e <.L48>
    1e68:	7b 02 37    	bra       0x2360 <.L43>

00001e6a <.L54>:
    1e6a:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    1e6c:	3d 02 32    	bra       Z, 0x22e8 <.L50>
    1e6e:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    1e70:	56 02 32    	bra       Z, 0x231e <.L51>
    1e72:	76 02 37    	bra       0x2360 <.L43>

00001e74 <.L44>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType & 0x1F) {   // extract request recipient bits
    1e74:	40 80 20    	mov.w     #0x804, w0
    1e76:	10 40 78    	mov.b     [w0], w0
    1e78:	00 80 fb    	ze        w0, w0
    1e7a:	7f 00 60    	and.w     w0, #0x1f, w0
    1e7c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e7e:	13 00 32    	bra       Z, 0x1ea6 <.L57>
    1e80:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1e82:	32 00 32    	bra       Z, 0x1ee8 <.L58>
    1e84:	00 00 e0    	cp0.w     w0
    1e86:	9c 00 3a    	bra       NZ, 0x1fc0 <.L134>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    1e88:	30 60 80    	mov.w     0xc06, w0
    1e8a:	e1 80 20    	mov.w     #0x80e, w1
    1e8c:	91 40 78    	mov.b     [w1], w1
    1e8e:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0;
    1e90:	30 60 80    	mov.w     0xc06, w0
    1e92:	00 00 e8    	inc.w     w0, w0
    1e94:	80 40 eb    	clr.b     w1
    1e96:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 2;
    1e98:	40 c0 20    	mov.w     #0xc04, w0
    1e9a:	21 c0 b3    	mov.b     #0x2, w1
    1e9c:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1e9e:	50 c0 20    	mov.w     #0xc05, w0
    1ea0:	81 cc b3    	mov.b     #0xc8, w1
    1ea2:	01 48 78    	mov.b     w1, [w0]
                    break;
    1ea4:	91 00 37    	bra       0x1fc8 <.L59>

00001ea6 <.L57>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    1ea6:	10 c8 bf    	mov.b     0x810, WREG
    1ea8:	00 80 fb    	ze        w0, w0
    1eaa:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1eac:	03 00 32    	bra       Z, 0x1eb4 <.L61>
    1eae:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1eb0:	05 00 32    	bra       Z, 0x1ebc <.L62>
    1eb2:	19 00 37    	bra       0x1ee6 <.L60>

00001eb4 <.L61>:
                        case ADDRESS_STATE:
                            USB_error_flags |= REQUEST_ERROR;
    1eb4:	0c c8 bf    	mov.b     0x80c, WREG
    1eb6:	00 04 a0    	bset.b    w0, #0x0
    1eb8:	0c e8 b7    	mov.b     WREG, 0x80c
                            break;
    1eba:	15 00 37    	bra       0x1ee6 <.L60>

00001ebc <.L62>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1ebc:	40 80 20    	mov.w     #0x804, w0
    1ebe:	40 40 90    	mov.b     [w0+4], w0
    1ec0:	00 04 e0    	cp0.b     w0
    1ec2:	0e 00 3a    	bra       NZ, 0x1ee0 <.L63>
                                BD[EP0IN].address[0] = 0;
    1ec4:	30 60 80    	mov.w     0xc06, w0
    1ec6:	80 40 eb    	clr.b     w1
    1ec8:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    1eca:	30 60 80    	mov.w     0xc06, w0
    1ecc:	00 00 e8    	inc.w     w0, w0
    1ece:	80 40 eb    	clr.b     w1
    1ed0:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    1ed2:	40 c0 20    	mov.w     #0xc04, w0
    1ed4:	21 c0 b3    	mov.b     #0x2, w1
    1ed6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1ed8:	50 c0 20    	mov.w     #0xc05, w0
    1eda:	81 cc b3    	mov.b     #0xc8, w1
    1edc:	01 48 78    	mov.b     w1, [w0]
    1ede:	03 00 37    	bra       0x1ee6 <.L60>

00001ee0 <.L63>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    1ee0:	0c c8 bf    	mov.b     0x80c, WREG
    1ee2:	00 04 a0    	bset.b    w0, #0x0
    1ee4:	0c e8 b7    	mov.b     WREG, 0x80c

00001ee6 <.L60>:
                            }
                    }
                    break;
    1ee6:	70 00 37    	bra       0x1fc8 <.L59>

00001ee8 <.L58>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    1ee8:	10 c8 bf    	mov.b     0x810, WREG
    1eea:	00 80 fb    	ze        w0, w0
    1eec:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1eee:	03 00 32    	bra       Z, 0x1ef6 <.L65>
    1ef0:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1ef2:	29 00 32    	bra       Z, 0x1f46 <.L66>
    1ef4:	61 00 37    	bra       0x1fb8 <.L135>

00001ef6 <.L65>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit and see if it is EP0
    1ef6:	40 80 20    	mov.w     #0x804, w0
    1ef8:	40 40 90    	mov.b     [w0+4], w0
    1efa:	00 80 fb    	ze        w0, w0
    1efc:	6f 00 60    	and.w     w0, #0xf, w0
    1efe:	00 00 e0    	cp0.w     w0
    1f00:	1e 00 3a    	bra       NZ, 0x1f3e <.L67>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0] & 0x80) ? BD[EP0IN].status : BD[EP0OUT].status) & 0x04) >> 2;   // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    1f02:	31 60 80    	mov.w     0xc06, w1
    1f04:	40 80 20    	mov.w     #0x804, w0
    1f06:	40 40 90    	mov.b     [w0+4], w0
    1f08:	00 04 e0    	cp0.b     w0
    1f0a:	07 00 3d    	bra       GE, 0x1f1a <.L68>
    1f0c:	50 c0 20    	mov.w     #0xc05, w0
    1f0e:	10 40 78    	mov.b     [w0], w0
    1f10:	00 80 fb    	ze        w0, w0
    1f12:	64 00 60    	and.w     w0, #0x4, w0
    1f14:	42 80 de    	asr.w     w0, #0x2, w0
    1f16:	00 40 78    	mov.b     w0, w0
    1f18:	06 00 37    	bra       0x1f26 <.L69>

00001f1a <.L68>:
    1f1a:	10 c0 20    	mov.w     #0xc01, w0
    1f1c:	10 40 78    	mov.b     [w0], w0
    1f1e:	00 80 fb    	ze        w0, w0
    1f20:	64 00 60    	and.w     w0, #0x4, w0
    1f22:	42 80 de    	asr.w     w0, #0x2, w0
    1f24:	00 40 78    	mov.b     w0, w0

00001f26 <.L69>:
    1f26:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0;
    1f28:	30 60 80    	mov.w     0xc06, w0
    1f2a:	00 00 e8    	inc.w     w0, w0
    1f2c:	80 40 eb    	clr.b     w1
    1f2e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    1f30:	40 c0 20    	mov.w     #0xc04, w0
    1f32:	21 c0 b3    	mov.b     #0x2, w1
    1f34:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1f36:	50 c0 20    	mov.w     #0xc05, w0
    1f38:	81 cc b3    	mov.b     #0xc8, w1
    1f3a:	01 48 78    	mov.b     w1, [w0]
    1f3c:	03 00 37    	bra       0x1f44 <.L70>

00001f3e <.L67>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    1f3e:	0c c8 bf    	mov.b     0x80c, WREG
    1f40:	00 04 a0    	bset.b    w0, #0x0
    1f42:	0c e8 b7    	mov.b     WREG, 0x80c

00001f44 <.L70>:
                            }
                            break;
    1f44:	3c 00 37    	bra       0x1fbe <.L71>

00001f46 <.L66>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    1f46:	a0 4a 20    	mov.w     #0x4aa, w0
    1f48:	00 0f 78    	mov.w     w0, [w14]
                            ep = USB_setup.wIndex.b[0] & 0x0F;  // get EP and strip off direction bit for offset from U1EP0
    1f4a:	40 80 20    	mov.w     #0x804, w0
    1f4c:	40 40 90    	mov.b     [w0+4], w0
    1f4e:	6f 40 60    	and.b     w0, #0xf, w0
    1f50:	20 47 98    	mov.b     w0, [w14+2]
                            buf_desc_ptr = &BD[EP0OUT] + ((ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00));  // compute pointer to the buffer descriptor for the specified EP
    1f52:	2e 40 90    	mov.b     [w14+2], w0
    1f54:	00 80 fb    	ze        w0, w0
    1f56:	00 00 40    	add.w     w0, w0, w0
    1f58:	80 00 78    	mov.w     w0, w1
    1f5a:	40 80 20    	mov.w     #0x804, w0
    1f5c:	40 40 90    	mov.b     [w0+4], w0
    1f5e:	00 00 fb    	se        w0, w0
    1f60:	4f 00 de    	lsr.w     w0, #0xf, w0
    1f62:	01 00 70    	ior.w     w0, w1, w0
    1f64:	c2 00 dd    	sl.w      w0, #0x2, w1
    1f66:	00 c0 20    	mov.w     #0xc00, w0
    1f68:	00 80 40    	add.w     w1, w0, w0
    1f6a:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[ep] & ((USB_setup.wIndex.b[0] & 0x80) ? 0x04 : 0x08)) {    // if the specified EP is enabled for transfers in the specified direction...
    1f6c:	2e 40 90    	mov.b     [w14+2], w0
    1f6e:	00 80 fb    	ze        w0, w0
    1f70:	00 00 40    	add.w     w0, w0, w0
    1f72:	1e 00 40    	add.w     w0, [w14], w0
    1f74:	90 00 78    	mov.w     [w0], w1
    1f76:	40 80 20    	mov.w     #0x804, w0
    1f78:	40 40 90    	mov.b     [w0+4], w0
    1f7a:	00 04 e0    	cp0.b     w0
    1f7c:	02 00 3d    	bra       GE, 0x1f82 <.L72>
    1f7e:	40 00 20    	mov.w     #0x4, w0
    1f80:	01 00 37    	bra       0x1f84 <.L73>

00001f82 <.L72>:
    1f82:	80 00 20    	mov.w     #0x8, w0

00001f84 <.L73>:
    1f84:	00 80 60    	and.w     w1, w0, w0
    1f86:	00 00 e0    	cp0.w     w0
    1f88:	13 00 32    	bra       Z, 0x1fb0 <.L74>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status) & 0x04) >> 2;    // ...return the BSTALL bit of the specified EP
    1f8a:	30 60 80    	mov.w     0xc06, w0
    1f8c:	ae 00 90    	mov.w     [w14+4], w1
    1f8e:	91 40 90    	mov.b     [w1+1], w1
    1f90:	81 80 fb    	ze        w1, w1
    1f92:	e4 80 60    	and.w     w1, #0x4, w1
    1f94:	c2 88 de    	asr.w     w1, #0x2, w1
    1f96:	81 40 78    	mov.b     w1, w1
    1f98:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    1f9a:	30 60 80    	mov.w     0xc06, w0
    1f9c:	00 00 e8    	inc.w     w0, w0
    1f9e:	80 40 eb    	clr.b     w1
    1fa0:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    1fa2:	40 c0 20    	mov.w     #0xc04, w0
    1fa4:	21 c0 b3    	mov.b     #0x2, w1
    1fa6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1fa8:	50 c0 20    	mov.w     #0xc05, w0
    1faa:	81 cc b3    	mov.b     #0xc8, w1
    1fac:	01 48 78    	mov.b     w1, [w0]
    1fae:	03 00 37    	bra       0x1fb6 <.L75>

00001fb0 <.L74>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    1fb0:	0c c8 bf    	mov.b     0x80c, WREG
    1fb2:	00 04 a0    	bset.b    w0, #0x0
    1fb4:	0c e8 b7    	mov.b     WREG, 0x80c

00001fb6 <.L75>:
                            }
                            break;
    1fb6:	03 00 37    	bra       0x1fbe <.L71>

00001fb8 <.L135>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    1fb8:	0c c8 bf    	mov.b     0x80c, WREG
    1fba:	00 04 a0    	bset.b    w0, #0x0
    1fbc:	0c e8 b7    	mov.b     WREG, 0x80c

00001fbe <.L71>:
                    }
                    break;
    1fbe:	04 00 37    	bra       0x1fc8 <.L59>

00001fc0 <.L134>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    1fc0:	0c c8 bf    	mov.b     0x80c, WREG
    1fc2:	00 04 a0    	bset.b    w0, #0x0
    1fc4:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    1fc6:	d1 01 37    	bra       0x236a <.L42>

00001fc8 <.L59>:
    1fc8:	d0 01 37    	bra       0x236a <.L42>

00001fca <.L45>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType & 0x1F) {       // extract request recipient bits
    1fca:	40 80 20    	mov.w     #0x804, w0
    1fcc:	10 40 78    	mov.b     [w0], w0
    1fce:	00 80 fb    	ze        w0, w0
    1fd0:	7f 00 60    	and.w     w0, #0x1f, w0
    1fd2:	00 00 e0    	cp0.w     w0
    1fd4:	03 00 32    	bra       Z, 0x1fdc <.L78>
    1fd6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1fd8:	1e 00 32    	bra       Z, 0x2016 <.L79>
    1fda:	c7 00 37    	bra       0x216a <.L136>

00001fdc <.L78>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    1fdc:	40 80 20    	mov.w     #0x804, w0
    1fde:	20 40 90    	mov.b     [w0+2], w0
    1fe0:	00 80 fb    	ze        w0, w0
    1fe2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1fe4:	14 00 3a    	bra       NZ, 0x200e <.L137>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest == CLEAR_FEATURE)
    1fe6:	40 80 20    	mov.w     #0x804, w0
    1fe8:	10 40 90    	mov.b     [w0+1], w0
    1fea:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1fec:	06 00 3a    	bra       NZ, 0x1ffa <.L82>
                                USB_device_status &= 0xFE;
    1fee:	e1 80 20    	mov.w     #0x80e, w1
    1ff0:	91 40 78    	mov.b     [w1], w1
    1ff2:	e0 cf b3    	mov.b     #0xfe, w0
    1ff4:	00 c0 60    	and.b     w1, w0, w0
    1ff6:	0e e8 b7    	mov.b     WREG, 0x80e
    1ff8:	03 00 37    	bra       0x2000 <.L83>

00001ffa <.L82>:
                            else
                                USB_device_status |= 0x01;
    1ffa:	0e c8 bf    	mov.b     0x80e, WREG
    1ffc:	00 04 a0    	bset.b    w0, #0x0
    1ffe:	0e e8 b7    	mov.b     WREG, 0x80e

00002000 <.L83>:
                            BD[EP0IN].bytecount = 0;
    2000:	40 c0 20    	mov.w     #0xc04, w0
    2002:	80 40 eb    	clr.b     w1
    2004:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    2006:	50 c0 20    	mov.w     #0xc05, w0
    2008:	81 cc b3    	mov.b     #0xc8, w1
    200a:	01 48 78    	mov.b     w1, [w0]
                            break;
    200c:	03 00 37    	bra       0x2014 <.L84>

0000200e <.L137>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    200e:	0c c8 bf    	mov.b     0x80c, WREG
    2010:	00 04 a0    	bset.b    w0, #0x0
    2012:	0c e8 b7    	mov.b     WREG, 0x80c

00002014 <.L84>:
                    }
                    break;
    2014:	ae 00 37    	bra       0x2172 <.L85>

00002016 <.L79>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    2016:	10 c8 bf    	mov.b     0x810, WREG
    2018:	00 80 fb    	ze        w0, w0
    201a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    201c:	03 00 32    	bra       Z, 0x2024 <.L87>
    201e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2020:	12 00 32    	bra       Z, 0x2046 <.L88>
    2022:	9f 00 37    	bra       0x2162 <.L138>

00002024 <.L87>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit, and see if its EP0
    2024:	40 80 20    	mov.w     #0x804, w0
    2026:	40 40 90    	mov.b     [w0+4], w0
    2028:	00 80 fb    	ze        w0, w0
    202a:	6f 00 60    	and.w     w0, #0xf, w0
    202c:	00 00 e0    	cp0.w     w0
    202e:	07 00 3a    	bra       NZ, 0x203e <.L89>
                                BD[EP0IN].bytecount = 0;
    2030:	40 c0 20    	mov.w     #0xc04, w0
    2032:	80 40 eb    	clr.b     w1
    2034:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    2036:	50 c0 20    	mov.w     #0xc05, w0
    2038:	81 cc b3    	mov.b     #0xc8, w1
    203a:	01 48 78    	mov.b     w1, [w0]
    203c:	03 00 37    	bra       0x2044 <.L90>

0000203e <.L89>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    203e:	0c c8 bf    	mov.b     0x80c, WREG
    2040:	00 04 a0    	bset.b    w0, #0x0
    2042:	0c e8 b7    	mov.b     WREG, 0x80c

00002044 <.L90>:
                            }
                            break;
    2044:	91 00 37    	bra       0x2168 <.L91>

00002046 <.L88>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    2046:	a0 4a 20    	mov.w     #0x4aa, w0
    2048:	00 0f 78    	mov.w     w0, [w14]
                            if (ep = USB_setup.wIndex.b[0] & 0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    204a:	40 80 20    	mov.w     #0x804, w0
    204c:	40 40 90    	mov.b     [w0+4], w0
    204e:	6f 40 60    	and.b     w0, #0xf, w0
    2050:	20 47 98    	mov.b     w0, [w14+2]
    2052:	2e 40 90    	mov.b     [w14+2], w0
    2054:	00 04 e0    	cp0.b     w0
    2056:	79 00 32    	bra       Z, 0x214a <.L92>
                                buf_desc_ptr = &BD[(ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00)]; // compute pointer to the buffer descriptor for the specified EP
    2058:	2e 40 90    	mov.b     [w14+2], w0
    205a:	00 80 fb    	ze        w0, w0
    205c:	00 00 40    	add.w     w0, w0, w0
    205e:	80 00 78    	mov.w     w0, w1
    2060:	40 80 20    	mov.w     #0x804, w0
    2062:	40 40 90    	mov.b     [w0+4], w0
    2064:	00 00 fb    	se        w0, w0
    2066:	4f 00 de    	lsr.w     w0, #0xf, w0
    2068:	01 00 70    	ior.w     w0, w1, w0
    206a:	c2 00 dd    	sl.w      w0, #0x2, w1
    206c:	00 c0 20    	mov.w     #0xc00, w0
    206e:	00 80 40    	add.w     w1, w0, w0
    2070:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0] & 0x80) { // if the specified EP direction is IN...
    2072:	40 80 20    	mov.w     #0x804, w0
    2074:	40 40 90    	mov.b     [w0+4], w0
    2076:	00 04 e0    	cp0.b     w0
    2078:	30 00 3d    	bra       GE, 0x20da <.L93>
                                    if (U1EP[ep] & 0x04) {          // if EPn is enabled for IN transfers...
    207a:	2e 40 90    	mov.b     [w14+2], w0
    207c:	00 80 fb    	ze        w0, w0
    207e:	00 00 40    	add.w     w0, w0, w0
    2080:	1e 00 40    	add.w     w0, [w14], w0
    2082:	10 00 78    	mov.w     [w0], w0
    2084:	64 00 60    	and.w     w0, #0x4, w0
    2086:	00 00 e0    	cp0.w     w0
    2088:	24 00 32    	bra       Z, 0x20d2 <.L94>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    208a:	40 80 20    	mov.w     #0x804, w0
    208c:	10 40 90    	mov.b     [w0+1], w0
    208e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2090:	19 00 3a    	bra       NZ, 0x20c4 <.L95>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    2092:	2e 40 90    	mov.b     [w14+2], w0
    2094:	00 80 fb    	ze        w0, w0
    2096:	00 00 40    	add.w     w0, w0, w0
    2098:	9e 00 40    	add.w     w0, [w14], w1
    209a:	2e 40 90    	mov.b     [w14+2], w0
    209c:	00 80 fb    	ze        w0, w0
    209e:	00 00 40    	add.w     w0, w0, w0
    20a0:	1e 00 40    	add.w     w0, [w14], w0
    20a2:	10 01 78    	mov.w     [w0], w2
    20a4:	d0 0f 20    	mov.w     #0xfd, w0
    20a6:	00 00 61    	and.w     w2, w0, w0
    20a8:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    20aa:	2e 00 90    	mov.w     [w14+4], w0
    20ac:	90 40 90    	mov.b     [w0+1], w1
    20ae:	b0 cf b3    	mov.b     #0xfb, w0
    20b0:	80 c0 60    	and.b     w1, w0, w1
    20b2:	2e 00 90    	mov.w     [w14+4], w0
    20b4:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status |= DTS;
    20b6:	2e 00 90    	mov.w     [w14+4], w0
    20b8:	10 40 90    	mov.b     [w0+1], w0
    20ba:	80 40 78    	mov.b     w0, w1
    20bc:	01 64 a0    	bset.b    w1, #0x6
    20be:	2e 00 90    	mov.w     [w14+4], w0
    20c0:	11 40 98    	mov.b     w1, [w0+1]
    20c2:	43 00 37    	bra       0x214a <.L92>

000020c4 <.L95>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    20c4:	2e 00 90    	mov.w     [w14+4], w0
    20c6:	10 40 90    	mov.b     [w0+1], w0
    20c8:	80 40 78    	mov.b     w0, w1
    20ca:	01 24 a0    	bset.b    w1, #0x2
    20cc:	2e 00 90    	mov.w     [w14+4], w0
    20ce:	11 40 98    	mov.b     w1, [w0+1]
    20d0:	3c 00 37    	bra       0x214a <.L92>

000020d2 <.L94>:
                                        }
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    20d2:	0c c8 bf    	mov.b     0x80c, WREG
    20d4:	00 04 a0    	bset.b    w0, #0x0
    20d6:	0c e8 b7    	mov.b     WREG, 0x80c
    20d8:	38 00 37    	bra       0x214a <.L92>

000020da <.L93>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[ep] & 0x08) {  // if the EP is enabled for OUT transfers...
    20da:	2e 40 90    	mov.b     [w14+2], w0
    20dc:	00 80 fb    	ze        w0, w0
    20de:	00 00 40    	add.w     w0, w0, w0
    20e0:	1e 00 40    	add.w     w0, [w14], w0
    20e2:	10 00 78    	mov.w     [w0], w0
    20e4:	68 00 60    	and.w     w0, #0x8, w0
    20e6:	00 00 e0    	cp0.w     w0
    20e8:	2d 00 32    	bra       Z, 0x2144 <.L96>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    20ea:	40 80 20    	mov.w     #0x804, w0
    20ec:	10 40 90    	mov.b     [w0+1], w0
    20ee:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    20f0:	19 00 3a    	bra       NZ, 0x2124 <.L97>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    20f2:	2e 40 90    	mov.b     [w14+2], w0
    20f4:	00 80 fb    	ze        w0, w0
    20f6:	00 00 40    	add.w     w0, w0, w0
    20f8:	9e 00 40    	add.w     w0, [w14], w1
    20fa:	2e 40 90    	mov.b     [w14+2], w0
    20fc:	00 80 fb    	ze        w0, w0
    20fe:	00 00 40    	add.w     w0, w0, w0
    2100:	1e 00 40    	add.w     w0, [w14], w0
    2102:	10 01 78    	mov.w     [w0], w2
    2104:	d0 0f 20    	mov.w     #0xfd, w0
    2106:	00 00 61    	and.w     w2, w0, w0
    2108:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    210a:	2e 00 90    	mov.w     [w14+4], w0
    210c:	90 40 90    	mov.b     [w0+1], w1
    210e:	b0 cf b3    	mov.b     #0xfb, w0
    2110:	80 c0 60    	and.b     w1, w0, w1
    2112:	2e 00 90    	mov.w     [w14+4], w0
    2114:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status &= ~DTS;
    2116:	2e 00 90    	mov.w     [w14+4], w0
    2118:	90 40 90    	mov.b     [w0+1], w1
    211a:	f0 cb b3    	mov.b     #0xbf, w0
    211c:	80 c0 60    	and.b     w1, w0, w1
    211e:	2e 00 90    	mov.w     [w14+4], w0
    2120:	11 40 98    	mov.b     w1, [w0+1]
    2122:	06 00 37    	bra       0x2130 <.L98>

00002124 <.L97>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    2124:	2e 00 90    	mov.w     [w14+4], w0
    2126:	10 40 90    	mov.b     [w0+1], w0
    2128:	80 40 78    	mov.b     w0, w1
    212a:	01 24 a0    	bset.b    w1, #0x2
    212c:	2e 00 90    	mov.w     [w14+4], w0
    212e:	11 40 98    	mov.b     w1, [w0+1]

00002130 <.L98>:
                                        }
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? (UOWN | DTSEN) : (UOWN | BSTALL);
    2130:	40 80 20    	mov.w     #0x804, w0
    2132:	10 40 90    	mov.b     [w0+1], w0
    2134:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2136:	02 00 3a    	bra       NZ, 0x213c <.L99>
    2138:	80 c8 b3    	mov.b     #0x88, w0
    213a:	01 00 37    	bra       0x213e <.L100>

0000213c <.L99>:
    213c:	40 c8 b3    	mov.b     #0x84, w0

0000213e <.L100>:
    213e:	ae 00 90    	mov.w     [w14+4], w1
    2140:	90 40 98    	mov.b     w0, [w1+1]
    2142:	03 00 37    	bra       0x214a <.L92>

00002144 <.L96>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    2144:	0c c8 bf    	mov.b     0x80c, WREG
    2146:	00 04 a0    	bset.b    w0, #0x0
    2148:	0c e8 b7    	mov.b     WREG, 0x80c

0000214a <.L92>:
                                    }
                                }
                            }
                            if (!(USB_error_flags & REQUEST_ERROR)) {   // if there was no Request Error...
    214a:	0c c8 bf    	mov.b     0x80c, WREG
    214c:	00 80 fb    	ze        w0, w0
    214e:	61 00 60    	and.w     w0, #0x1, w0
    2150:	00 00 e0    	cp0.w     w0
    2152:	06 00 3a    	bra       NZ, 0x2160 <.L101>
                                BD[EP0IN].bytecount = 0;
    2154:	40 c0 20    	mov.w     #0xc04, w0
    2156:	80 40 eb    	clr.b     w1
    2158:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // ...send packet as DATA1, set UOWN bit
    215a:	50 c0 20    	mov.w     #0xc05, w0
    215c:	81 cc b3    	mov.b     #0xc8, w1
    215e:	01 48 78    	mov.b     w1, [w0]

00002160 <.L101>:
                            }
                            break;
    2160:	03 00 37    	bra       0x2168 <.L91>

00002162 <.L138>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    2162:	0c c8 bf    	mov.b     0x80c, WREG
    2164:	00 04 a0    	bset.b    w0, #0x0
    2166:	0c e8 b7    	mov.b     WREG, 0x80c

00002168 <.L91>:
                    }
                    break;
    2168:	04 00 37    	bra       0x2172 <.L85>

0000216a <.L136>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    216a:	0c c8 bf    	mov.b     0x80c, WREG
    216c:	00 04 a0    	bset.b    w0, #0x0
    216e:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    2170:	fc 00 37    	bra       0x236a <.L42>

00002172 <.L85>:
    2172:	fb 00 37    	bra       0x236a <.L42>

00002174 <.L46>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0] > 0x7F) {     // if new device address is illegal, send Request Error
    2174:	40 80 20    	mov.w     #0x804, w0
    2176:	20 40 90    	mov.b     [w0+2], w0
    2178:	00 04 e0    	cp0.b     w0
    217a:	04 00 3d    	bra       GE, 0x2184 <.L102>
                USB_error_flags |= REQUEST_ERROR;
    217c:	0c c8 bf    	mov.b     0x80c, WREG
    217e:	00 04 a0    	bset.b    w0, #0x0
    2180:	0c e8 b7    	mov.b     WREG, 0x80c
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                USB_in_callbacks[0] = usb_set_address_callback;
                BD[EP0IN].bytecount = 0;
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
            }
            break;
    2182:	f3 00 37    	bra       0x236a <.L42>

00002184 <.L102>:
    2184:	40 80 20    	mov.w     #0x804, w0
    2186:	90 40 78    	mov.b     [w0], w1
    2188:	00 d0 20    	mov.w     #0xd00, w0
    218a:	01 48 78    	mov.b     w1, [w0]
    218c:	40 80 20    	mov.w     #0x804, w0
    218e:	90 40 90    	mov.b     [w0+1], w1
    2190:	10 d0 20    	mov.w     #0xd01, w0
    2192:	01 48 78    	mov.b     w1, [w0]
    2194:	40 80 20    	mov.w     #0x804, w0
    2196:	10 00 90    	mov.w     [w0+2], w0
    2198:	10 68 88    	mov.w     w0, 0xd02
    219a:	40 80 20    	mov.w     #0x804, w0
    219c:	20 00 90    	mov.w     [w0+4], w0
    219e:	20 68 88    	mov.w     w0, 0xd04
    21a0:	40 80 20    	mov.w     #0x804, w0
    21a2:	30 00 90    	mov.w     [w0+6], w0
    21a4:	30 68 88    	mov.w     w0, 0xd06
    21a6:	80 b2 21    	mov.w     #0x1b28, w0
    21a8:	70 68 88    	mov.w     w0, 0xd0e
    21aa:	40 c0 20    	mov.w     #0xc04, w0
    21ac:	80 40 eb    	clr.b     w1
    21ae:	01 48 78    	mov.b     w1, [w0]
    21b0:	50 c0 20    	mov.w     #0xc05, w0
    21b2:	81 cc b3    	mov.b     #0xc8, w1
    21b4:	01 48 78    	mov.b     w1, [w0]
    21b6:	d9 00 37    	bra       0x236a <.L42>

000021b8 <.L47>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    21b8:	40 80 20    	mov.w     #0x804, w0
    21ba:	90 40 78    	mov.b     [w0], w1
    21bc:	00 d0 20    	mov.w     #0xd00, w0
    21be:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    21c0:	40 80 20    	mov.w     #0x804, w0
    21c2:	90 40 90    	mov.b     [w0+1], w1
    21c4:	10 d0 20    	mov.w     #0xd01, w0
    21c6:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    21c8:	40 80 20    	mov.w     #0x804, w0
    21ca:	10 00 90    	mov.w     [w0+2], w0
    21cc:	10 68 88    	mov.w     w0, 0xd02
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    21ce:	40 80 20    	mov.w     #0x804, w0
    21d0:	20 00 90    	mov.w     [w0+4], w0
    21d2:	20 68 88    	mov.w     w0, 0xd04
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    21d4:	40 80 20    	mov.w     #0x804, w0
    21d6:	30 00 90    	mov.w     [w0+6], w0
    21d8:	30 68 88    	mov.w     w0, 0xd06
            switch (USB_setup.wValue.b[1]) {
    21da:	40 80 20    	mov.w     #0x804, w0
    21dc:	30 40 90    	mov.b     [w0+3], w0
    21de:	00 80 fb    	ze        w0, w0
    21e0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    21e2:	0b 00 32    	bra       Z, 0x21fa <.L106>
    21e4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    21e6:	24 00 32    	bra       Z, 0x2230 <.L107>
    21e8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    21ea:	37 00 3a    	bra       NZ, 0x225a <.L139>
                case DEVICE:
                    USB_request.data_ptr = Device;
    21ec:	20 a2 29    	mov.w     #0x9a22, w0
    21ee:	40 68 88    	mov.w     w0, 0xd08
                    USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    21f0:	40 68 80    	mov.w     0xd08, w0
    21f2:	10 40 78    	mov.b     [w0], w0
    21f4:	00 80 fb    	ze        w0, w0
    21f6:	50 68 88    	mov.w     w0, 0xd0a
                    break;
    21f8:	39 00 37    	bra       0x226c <.L108>

000021fa <.L106>:
                case CONFIGURATION:
                    if (USB_setup.wValue.b[0] < NUM_CONFIGURATIONS) {
    21fa:	40 80 20    	mov.w     #0x804, w0
    21fc:	20 40 90    	mov.b     [w0+2], w0
    21fe:	00 04 e0    	cp0.b     w0
    2200:	13 00 3a    	bra       NZ, 0x2228 <.L109>
                        USB_request.data_ptr = Configurations[USB_setup.wValue.b[0]];
    2202:	40 80 20    	mov.w     #0x804, w0
    2204:	20 40 90    	mov.b     [w0+2], w0
    2206:	00 80 fb    	ze        w0, w0
    2208:	80 00 40    	add.w     w0, w0, w1
    220a:	80 a7 29    	mov.w     #0x9a78, w0
    220c:	00 80 40    	add.w     w1, w0, w0
    220e:	10 00 78    	mov.w     [w0], w0
    2210:	40 68 88    	mov.w     w0, 0xd08
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];  // wTotalLength starting at an offset of 2
    2212:	40 68 80    	mov.w     0xd08, w0
    2214:	00 80 e8    	inc2.w    w0, w0
    2216:	90 40 78    	mov.b     [w0], w1
    2218:	a0 d0 20    	mov.w     #0xd0a, w0
    221a:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    221c:	40 68 80    	mov.w     0xd08, w0
    221e:	63 00 40    	add.w     w0, #0x3, w0
    2220:	90 40 78    	mov.b     [w0], w1
    2222:	b0 d0 20    	mov.w     #0xd0b, w0
    2224:	01 48 78    	mov.b     w1, [w0]
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    2226:	22 00 37    	bra       0x226c <.L108>

00002228 <.L109>:
    2228:	0c c8 bf    	mov.b     0x80c, WREG
    222a:	00 04 a0    	bset.b    w0, #0x0
    222c:	0c e8 b7    	mov.b     WREG, 0x80c
    222e:	1e 00 37    	bra       0x226c <.L108>

00002230 <.L107>:
                case STRING:
                    if (USB_setup.wValue.b[0] < NUM_STRINGS) {
    2230:	40 80 20    	mov.w     #0x804, w0
    2232:	20 40 90    	mov.b     [w0+2], w0
    2234:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    2236:	0d 00 3e    	bra       GTU, 0x2252 <.L111>
                        USB_request.data_ptr = Strings[USB_setup.wValue.b[0]];
    2238:	40 80 20    	mov.w     #0x804, w0
    223a:	20 40 90    	mov.b     [w0+2], w0
    223c:	00 80 fb    	ze        w0, w0
    223e:	80 00 40    	add.w     w0, w0, w1
    2240:	e0 ac 29    	mov.w     #0x9ace, w0
    2242:	00 80 40    	add.w     w1, w0, w0
    2244:	10 00 78    	mov.w     [w0], w0
    2246:	40 68 88    	mov.w     w0, 0xd08
                        USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    2248:	40 68 80    	mov.w     0xd08, w0
    224a:	10 40 78    	mov.b     [w0], w0
    224c:	00 80 fb    	ze        w0, w0
    224e:	50 68 88    	mov.w     w0, 0xd0a
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    2250:	0d 00 37    	bra       0x226c <.L108>

00002252 <.L111>:
    2252:	0c c8 bf    	mov.b     0x80c, WREG
    2254:	00 04 a0    	bset.b    w0, #0x0
    2256:	0c e8 b7    	mov.b     WREG, 0x80c
    2258:	09 00 37    	bra       0x226c <.L108>

0000225a <.L139>:
                default:
                    if (USB_get_descriptor_callback)
    225a:	a0 40 80    	mov.w     0x814, w0
    225c:	00 00 e0    	cp0.w     w0
    225e:	03 00 32    	bra       Z, 0x2266 <.L113>
                        USB_get_descriptor_callback();
    2260:	a0 40 80    	mov.w     0x814, w0
    2262:	00 00 01    	call      w0
    2264:	03 00 37    	bra       0x226c <.L108>

00002266 <.L113>:
                    else
                        USB_error_flags |= REQUEST_ERROR;
    2266:	0c c8 bf    	mov.b     0x80c, WREG
    2268:	00 04 a0    	bset.b    w0, #0x0
    226a:	0c e8 b7    	mov.b     WREG, 0x80c

0000226c <.L108>:
            }
            if (!(USB_error_flags & REQUEST_ERROR)) {
    226c:	0c c8 bf    	mov.b     0x80c, WREG
    226e:	00 80 fb    	ze        w0, w0
    2270:	61 00 60    	and.w     w0, #0x1, w0
    2272:	00 00 e0    	cp0.w     w0
    2274:	79 00 3a    	bra       NZ, 0x2368 <.L144>
                USB_in_callbacks[0] = usb_send_data_packet;
    2276:	e0 36 22    	mov.w     #0x236e, w0
    2278:	70 68 88    	mov.w     w0, 0xd0e
                if (USB_setup.wLength.w < USB_request.bytes_left.w)
    227a:	40 80 20    	mov.w     #0x804, w0
    227c:	b0 00 90    	mov.w     [w0+6], w1
    227e:	50 68 80    	mov.w     0xd0a, w0
    2280:	80 8f 50    	sub.w     w1, w0, [w15]
    2282:	03 00 31    	bra       C, 0x228a <.L115>
                    USB_request.bytes_left.w = USB_setup.wLength.w;
    2284:	40 80 20    	mov.w     #0x804, w0
    2286:	30 00 90    	mov.w     [w0+6], w0
    2288:	50 68 88    	mov.w     w0, 0xd0a

0000228a <.L115>:
                usb_send_data_packet();
    228a:	71 00 07    	rcall     0x236e <_usb_send_data_packet> <.LFB7> <.LFE6>
            }
            break;
    228c:	6e 00 37    	bra       0x236a <.L42>

0000228e <.L48>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config; // copy current device configuration to EP0 IN buffer
    228e:	30 60 80    	mov.w     0xc06, w0
    2290:	d1 80 20    	mov.w     #0x80d, w1
    2292:	91 40 78    	mov.b     [w1], w1
    2294:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 1;
    2296:	40 c0 20    	mov.w     #0xc04, w0
    2298:	11 c0 b3    	mov.b     #0x1, w1
    229a:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    229c:	50 c0 20    	mov.w     #0xc05, w0
    229e:	81 cc b3    	mov.b     #0xc8, w1
    22a0:	01 48 78    	mov.b     w1, [w0]
            break;
    22a2:	63 00 37    	bra       0x236a <.L42>

000022a4 <.L49>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0] <= NUM_CONFIGURATIONS) {
    22a4:	40 80 20    	mov.w     #0x804, w0
    22a6:	20 40 90    	mov.b     [w0+2], w0
    22a8:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    22aa:	1a 00 3e    	bra       GTU, 0x22e0 <.L116>
                usb_disable_endpoints(1);           // disable all endpoints except EP0
    22ac:	10 c0 b3    	mov.b     #0x1, w0
    22ae:	1d fc 07    	rcall     0x1aea <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    22b0:	40 80 20    	mov.w     #0x804, w0
    22b2:	20 40 90    	mov.b     [w0+2], w0
    22b4:	0d e8 b7    	mov.b     WREG, 0x80d
    22b6:	0d c8 bf    	mov.b     0x80d, WREG
    22b8:	00 80 fb    	ze        w0, w0
    22ba:	00 00 e0    	cp0.w     w0
    22bc:	03 00 3a    	bra       NZ, 0x22c4 <.L140>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    22be:	20 c0 b3    	mov.b     #0x2, w0
    22c0:	10 e8 b7    	mov.b     WREG, 0x810
                        break;
    22c2:	07 00 37    	bra       0x22d2 <.L119>

000022c4 <.L140>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    22c4:	30 c0 b3    	mov.b     #0x3, w0
    22c6:	10 e8 b7    	mov.b     WREG, 0x810
                        if (USB_set_config_callback)
    22c8:	90 40 80    	mov.w     0x812, w0
    22ca:	00 00 e0    	cp0.w     w0
    22cc:	02 00 32    	bra       Z, 0x22d2 <.L119>
                            USB_set_config_callback();
    22ce:	90 40 80    	mov.w     0x812, w0
    22d0:	00 00 01    	call      w0

000022d2 <.L119>:
                }
                BD[EP0IN].bytecount = 0;
    22d2:	40 c0 20    	mov.w     #0xc04, w0
    22d4:	80 40 eb    	clr.b     w1
    22d6:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    22d8:	50 c0 20    	mov.w     #0xc05, w0
    22da:	81 cc b3    	mov.b     #0xc8, w1
    22dc:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= REQUEST_ERROR;
            }
            break;
    22de:	45 00 37    	bra       0x236a <.L42>

000022e0 <.L116>:
    22e0:	0c c8 bf    	mov.b     0x80c, WREG
    22e2:	00 04 a0    	bset.b    w0, #0x0
    22e4:	0c e8 b7    	mov.b     WREG, 0x80c
    22e6:	41 00 37    	bra       0x236a <.L42>

000022e8 <.L50>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    22e8:	10 c8 bf    	mov.b     0x810, WREG
    22ea:	00 80 fb    	ze        w0, w0
    22ec:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    22ee:	13 00 3a    	bra       NZ, 0x2316 <.L141>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    22f0:	40 80 20    	mov.w     #0x804, w0
    22f2:	40 40 90    	mov.b     [w0+4], w0
    22f4:	00 04 e0    	cp0.b     w0
    22f6:	0a 00 3a    	bra       NZ, 0x230c <.L123>
                        BD[EP0IN].address[0] = 0;   // always send back 0 for bAlternateSetting
    22f8:	30 60 80    	mov.w     0xc06, w0
    22fa:	80 40 eb    	clr.b     w1
    22fc:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 1;
    22fe:	40 c0 20    	mov.w     #0xc04, w0
    2300:	11 c0 b3    	mov.b     #0x1, w1
    2302:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    2304:	50 c0 20    	mov.w     #0xc05, w0
    2306:	81 cc b3    	mov.b     #0xc8, w1
    2308:	01 48 78    	mov.b     w1, [w0]
    230a:	03 00 37    	bra       0x2312 <.L124>

0000230c <.L123>:
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    230c:	0c c8 bf    	mov.b     0x80c, WREG
    230e:	00 04 a0    	bset.b    w0, #0x0
    2310:	0c e8 b7    	mov.b     WREG, 0x80c

00002312 <.L124>:
                    }
                    break;
    2312:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    2314:	2a 00 37    	bra       0x236a <.L42>

00002316 <.L141>:
    2316:	0c c8 bf    	mov.b     0x80c, WREG
    2318:	00 04 a0    	bset.b    w0, #0x0
    231a:	0c e8 b7    	mov.b     WREG, 0x80c
    231c:	26 00 37    	bra       0x236a <.L42>

0000231e <.L51>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    231e:	10 c8 bf    	mov.b     0x810, WREG
    2320:	00 80 fb    	ze        w0, w0
    2322:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2324:	19 00 3a    	bra       NZ, 0x2358 <.L142>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    2326:	40 80 20    	mov.w     #0x804, w0
    2328:	40 40 90    	mov.b     [w0+4], w0
    232a:	00 04 e0    	cp0.b     w0
    232c:	10 00 3a    	bra       NZ, 0x234e <.L128>
                        switch (USB_setup.wValue.b[0]) {
    232e:	40 80 20    	mov.w     #0x804, w0
    2330:	20 40 90    	mov.b     [w0+2], w0
    2332:	00 80 fb    	ze        w0, w0
    2334:	00 00 e0    	cp0.w     w0
    2336:	07 00 3a    	bra       NZ, 0x2346 <.L143>
                            case 0:                 // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0;
    2338:	40 c0 20    	mov.w     #0xc04, w0
    233a:	80 40 eb    	clr.b     w1
    233c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    233e:	50 c0 20    	mov.w     #0xc05, w0
    2340:	81 cc b3    	mov.b     #0xc8, w1
    2342:	01 48 78    	mov.b     w1, [w0]
                                break;
    2344:	07 00 37    	bra       0x2354 <.L132>

00002346 <.L143>:
                            default:
                                USB_error_flags |= REQUEST_ERROR;
    2346:	0c c8 bf    	mov.b     0x80c, WREG
    2348:	00 04 a0    	bset.b    w0, #0x0
    234a:	0c e8 b7    	mov.b     WREG, 0x80c
    234c:	03 00 37    	bra       0x2354 <.L132>

0000234e <.L128>:
                        }
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    234e:	0c c8 bf    	mov.b     0x80c, WREG
    2350:	00 04 a0    	bset.b    w0, #0x0
    2352:	0c e8 b7    	mov.b     WREG, 0x80c

00002354 <.L132>:
                    }
                    break;
    2354:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    2356:	09 00 37    	bra       0x236a <.L42>

00002358 <.L142>:
    2358:	0c c8 bf    	mov.b     0x80c, WREG
    235a:	00 04 a0    	bset.b    w0, #0x0
    235c:	0c e8 b7    	mov.b     WREG, 0x80c
    235e:	05 00 37    	bra       0x236a <.L42>

00002360 <.L43>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= REQUEST_ERROR;
    2360:	0c c8 bf    	mov.b     0x80c, WREG
    2362:	00 04 a0    	bset.b    w0, #0x0
    2364:	0c e8 b7    	mov.b     WREG, 0x80c
    2366:	01 00 37    	bra       0x236a <.L42>

00002368 <.L144>:
    2368:	00 00 00    	nop       

0000236a <.L42>:
    }
}
    236a:	00 80 fa    	ulnk      
    236c:	00 00 06    	return    

0000236e <_usb_send_data_packet>:

void usb_send_data_packet(void) {
    236e:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (USB_request.bytes_left.w < MAX_PACKET_SIZE) {
    2370:	51 68 80    	mov.w     0xd0a, w1
    2372:	f0 03 20    	mov.w     #0x3f, w0
    2374:	80 8f 50    	sub.w     w1, w0, [w15]
    2376:	05 00 3e    	bra       GTU, 0x2382 <.L146>
        packet_length = (uint8_t)USB_request.bytes_left.w;
    2378:	50 68 80    	mov.w     0xd0a, w0
    237a:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    237c:	00 00 eb    	clr.w     w0
    237e:	50 68 88    	mov.w     w0, 0xd0a
    2380:	05 00 37    	bra       0x238c <.L147>

00002382 <.L146>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    2382:	00 c4 b3    	mov.b     #0x40, w0
    2384:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    2386:	50 68 80    	mov.w     0xd0a, w0
    2388:	00 04 b1    	sub.w     #0x40, w0
    238a:	50 68 88    	mov.w     w0, 0xd0a

0000238c <.L147>:
    }
    for (i = 0; i < packet_length; i++) {
    238c:	00 40 eb    	clr.b     w0
    238e:	10 47 98    	mov.b     w0, [w14+1]
    2390:	0c 00 37    	bra       0x23aa <.L148>

00002392 <.L149>:
        BD[EP0IN].address[i] = *USB_request.data_ptr++;
    2392:	31 60 80    	mov.w     0xc06, w1
    2394:	1e 40 90    	mov.b     [w14+1], w0
    2396:	00 80 fb    	ze        w0, w0
    2398:	80 80 40    	add.w     w1, w0, w1
    239a:	40 68 80    	mov.w     0xd08, w0
    239c:	10 41 78    	mov.b     [w0], w2
    239e:	82 48 78    	mov.b     w2, [w1]
    23a0:	00 00 e8    	inc.w     w0, w0
    23a2:	40 68 88    	mov.w     w0, 0xd08
    23a4:	1e 40 90    	mov.b     [w14+1], w0
    23a6:	00 40 e8    	inc.b     w0, w0
    23a8:	10 47 98    	mov.b     w0, [w14+1]

000023aa <.L148>:
    23aa:	1e 40 90    	mov.b     [w14+1], w0
    23ac:	9e 4f 50    	sub.b     w0, [w14], [w15]
    23ae:	f1 ff 39    	bra       NC, 0x2392 <.L149>
    }
    BD[EP0IN].bytecount = packet_length;
    23b0:	40 c0 20    	mov.w     #0xc04, w0
    23b2:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    23b4:	50 c0 20    	mov.w     #0xc05, w0
    23b6:	10 40 78    	mov.b     [w0], w0
    23b8:	00 c0 ea    	com.b     w0, w0
    23ba:	02 c4 b3    	mov.b     #0x40, w2
    23bc:	82 40 60    	and.b     w0, w2, w1
    23be:	80 c8 b3    	mov.b     #0x88, w0
    23c0:	00 c0 70    	ior.b     w1, w0, w0
    23c2:	80 40 78    	mov.b     w0, w1
    23c4:	50 c0 20    	mov.w     #0xc05, w0
    23c6:	01 48 78    	mov.b     w1, [w0]
    if (USB_request.bytes_left.w == 0) {
    23c8:	50 68 80    	mov.w     0xd0a, w0
    23ca:	00 00 e0    	cp0.w     w0
    23cc:	0f 00 3a    	bra       NZ, 0x23ec <.L145>
        if (USB_request.done_callback)
    23ce:	60 68 80    	mov.w     0xd0c, w0
    23d0:	00 00 e0    	cp0.w     w0
    23d2:	02 00 32    	bra       Z, 0x23d8 <.L151>
            USB_request.done_callback();
    23d4:	60 68 80    	mov.w     0xd0c, w0
    23d6:	00 00 01    	call      w0

000023d8 <.L151>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    23d8:	00 d0 20    	mov.w     #0xd00, w0
    23da:	80 c0 eb    	setm.b    w1
    23dc:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    23de:	10 d0 20    	mov.w     #0xd01, w0
    23e0:	80 c0 eb    	setm.b    w1
    23e2:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    23e4:	00 00 eb    	clr.w     w0
    23e6:	60 68 88    	mov.w     w0, 0xd0c
        USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    23e8:	00 00 eb    	clr.w     w0
    23ea:	70 68 88    	mov.w     w0, 0xd0e

000023ec <.L145>:
    }
}
    23ec:	00 80 fa    	ulnk      
    23ee:	00 00 06    	return    

000023f0 <_usb_receive_data_packet>:

void usb_receive_data_packet(void) {
    23f0:	02 00 fa    	lnk       #0x2
    uint8_t i;

    for (i = 0; i < BD[EP0OUT].bytecount; i++) {
    23f2:	00 40 eb    	clr.b     w0
    23f4:	00 4f 78    	mov.b     w0, [w14]
    23f6:	09 00 37    	bra       0x240a <.L153>

000023f8 <.L154>:
        *USB_request.data_ptr++ = BD[EP0OUT].address[i];
    23f8:	40 68 80    	mov.w     0xd08, w0
    23fa:	12 60 80    	mov.w     0xc02, w2
    23fc:	9e 80 fb    	ze        [w14], w1
    23fe:	81 00 41    	add.w     w2, w1, w1
    2400:	91 40 78    	mov.b     [w1], w1
    2402:	01 48 78    	mov.b     w1, [w0]
    2404:	00 00 e8    	inc.w     w0, w0
    2406:	40 68 88    	mov.w     w0, 0xd08
    2408:	1e 4f e8    	inc.b     [w14], [w14]

0000240a <.L153>:
    240a:	00 c0 20    	mov.w     #0xc00, w0
    240c:	10 40 78    	mov.b     [w0], w0
    240e:	9e 4f 50    	sub.b     w0, [w14], [w15]
    2410:	f3 ff 3e    	bra       GTU, 0x23f8 <.L154>
    }
    USB_request.bytes_left.w -= BD[EP0OUT].bytecount;
    2412:	51 68 80    	mov.w     0xd0a, w1
    2414:	00 c0 20    	mov.w     #0xc00, w0
    2416:	10 40 78    	mov.b     [w0], w0
    2418:	00 80 fb    	ze        w0, w0
    241a:	00 80 50    	sub.w     w1, w0, w0
    241c:	50 68 88    	mov.w     w0, 0xd0a
    if (USB_request.bytes_left.w > 0) {
    241e:	50 68 80    	mov.w     0xd0a, w0
    2420:	00 00 e0    	cp0.w     w0
    2422:	0e 00 32    	bra       Z, 0x2440 <.L155>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2424:	00 c0 20    	mov.w     #0xc00, w0
    2426:	01 c4 b3    	mov.b     #0x40, w1
    2428:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].status = ((BD[EP0OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    242a:	10 c0 20    	mov.w     #0xc01, w0
    242c:	10 40 78    	mov.b     [w0], w0
    242e:	00 c0 ea    	com.b     w0, w0
    2430:	02 c4 b3    	mov.b     #0x40, w2
    2432:	82 40 60    	and.b     w0, w2, w1
    2434:	80 c8 b3    	mov.b     #0x88, w0
    2436:	00 c0 70    	ior.b     w1, w0, w0
    2438:	80 40 78    	mov.b     w0, w1
    243a:	10 c0 20    	mov.w     #0xc01, w0
    243c:	01 48 78    	mov.b     w1, [w0]
    243e:	0f 00 37    	bra       0x245e <.L152>

00002440 <.L155>:
    } else {
        if (USB_request.done_callback)
    2440:	60 68 80    	mov.w     0xd0c, w0
    2442:	00 00 e0    	cp0.w     w0
    2444:	02 00 32    	bra       Z, 0x244a <.L157>
            USB_request.done_callback();
    2446:	60 68 80    	mov.w     0xd0c, w0
    2448:	00 00 01    	call      w0

0000244a <.L157>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // all data received, so clear device request
    244a:	00 d0 20    	mov.w     #0xd00, w0
    244c:	80 c0 eb    	setm.b    w1
    244e:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    2450:	10 d0 20    	mov.w     #0xd01, w0
    2452:	80 c0 eb    	setm.b    w1
    2454:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    2456:	00 00 eb    	clr.w     w0
    2458:	60 68 88    	mov.w     w0, 0xd0c
        USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    245a:	00 00 eb    	clr.w     w0
    245c:	70 69 88    	mov.w     w0, 0xd2e

0000245e <.L152>:
    }
}
    245e:	00 80 fa    	ulnk      
    2460:	00 00 06    	return    

00002462 <_cdc_set_line_coding_out_callback>:
    2462:	00 00 fa    	lnk       #0x0
    2464:	10 60 80    	mov.w     0xc02, w0
    2466:	90 40 78    	mov.b     [w0], w1
    2468:	a0 81 20    	mov.w     #0x81a, w0
    246a:	01 48 78    	mov.b     w1, [w0]
    246c:	10 60 80    	mov.w     0xc02, w0
    246e:	00 00 e8    	inc.w     w0, w0
    2470:	90 40 78    	mov.b     [w0], w1
    2472:	a0 81 20    	mov.w     #0x81a, w0
    2474:	11 40 98    	mov.b     w1, [w0+1]
    2476:	10 60 80    	mov.w     0xc02, w0
    2478:	00 80 e8    	inc2.w    w0, w0
    247a:	90 40 78    	mov.b     [w0], w1
    247c:	a0 81 20    	mov.w     #0x81a, w0
    247e:	21 40 98    	mov.b     w1, [w0+2]
    2480:	10 60 80    	mov.w     0xc02, w0
    2482:	63 00 40    	add.w     w0, #0x3, w0
    2484:	90 40 78    	mov.b     [w0], w1
    2486:	a0 81 20    	mov.w     #0x81a, w0
    2488:	31 40 98    	mov.b     w1, [w0+3]
    248a:	10 60 80    	mov.w     0xc02, w0
    248c:	64 00 40    	add.w     w0, #0x4, w0
    248e:	90 40 78    	mov.b     [w0], w1
    2490:	a0 81 20    	mov.w     #0x81a, w0
    2492:	41 40 98    	mov.b     w1, [w0+4]
    2494:	10 60 80    	mov.w     0xc02, w0
    2496:	65 00 40    	add.w     w0, #0x5, w0
    2498:	90 40 78    	mov.b     [w0], w1
    249a:	a0 81 20    	mov.w     #0x81a, w0
    249c:	51 40 98    	mov.b     w1, [w0+5]
    249e:	10 60 80    	mov.w     0xc02, w0
    24a0:	66 00 40    	add.w     w0, #0x6, w0
    24a2:	90 40 78    	mov.b     [w0], w1
    24a4:	a0 81 20    	mov.w     #0x81a, w0
    24a6:	61 40 98    	mov.b     w1, [w0+6]
    24a8:	00 00 eb    	clr.w     w0
    24aa:	70 69 88    	mov.w     w0, 0xd2e
    24ac:	00 80 fa    	ulnk      
    24ae:	00 00 06    	return    

000024b0 <_cdc_setup_callback>:
    24b0:	00 00 fa    	lnk       #0x0
    24b2:	40 80 20    	mov.w     #0x804, w0
    24b4:	10 40 90    	mov.b     [w0+1], w0
    24b6:	00 80 fb    	ze        w0, w0
    24b8:	01 02 20    	mov.w     #0x20, w1
    24ba:	81 0f 50    	sub.w     w0, w1, [w15]
    24bc:	1d 00 32    	bra       Z, 0x24f8 <.L6>
    24be:	01 02 20    	mov.w     #0x20, w1
    24c0:	81 0f 50    	sub.w     w0, w1, [w15]
    24c2:	05 00 3c    	bra       GT, 0x24ce <.L9>
    24c4:	00 00 e0    	cp0.w     w0
    24c6:	0a 00 32    	bra       Z, 0x24dc <.L4>
    24c8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    24ca:	0f 00 32    	bra       Z, 0x24ea <.L5>
    24cc:	5c 00 37    	bra       0x2586 <.L3>

000024ce <.L9>:
    24ce:	11 02 20    	mov.w     #0x21, w1
    24d0:	81 0f 50    	sub.w     w0, w1, [w15]
    24d2:	26 00 32    	bra       Z, 0x2520 <.L7>
    24d4:	21 02 20    	mov.w     #0x22, w1
    24d6:	81 0f 50    	sub.w     w0, w1, [w15]
    24d8:	4c 00 32    	bra       Z, 0x2572 <.L8>
    24da:	55 00 37    	bra       0x2586 <.L3>

000024dc <.L4>:
    24dc:	40 c0 20    	mov.w     #0xc04, w0
    24de:	80 40 eb    	clr.b     w1
    24e0:	01 48 78    	mov.b     w1, [w0]
    24e2:	50 c0 20    	mov.w     #0xc05, w0
    24e4:	81 cc b3    	mov.b     #0xc8, w1
    24e6:	01 48 78    	mov.b     w1, [w0]
    24e8:	51 00 37    	bra       0x258c <.L2>

000024ea <.L5>:
    24ea:	40 c0 20    	mov.w     #0xc04, w0
    24ec:	80 40 eb    	clr.b     w1
    24ee:	01 48 78    	mov.b     w1, [w0]
    24f0:	50 c0 20    	mov.w     #0xc05, w0
    24f2:	81 cc b3    	mov.b     #0xc8, w1
    24f4:	01 48 78    	mov.b     w1, [w0]
    24f6:	4a 00 37    	bra       0x258c <.L2>

000024f8 <.L6>:
    24f8:	40 80 20    	mov.w     #0x804, w0
    24fa:	90 40 78    	mov.b     [w0], w1
    24fc:	00 d0 20    	mov.w     #0xd00, w0
    24fe:	01 48 78    	mov.b     w1, [w0]
    2500:	40 80 20    	mov.w     #0x804, w0
    2502:	90 40 90    	mov.b     [w0+1], w1
    2504:	10 d0 20    	mov.w     #0xd01, w0
    2506:	01 48 78    	mov.b     w1, [w0]
    2508:	40 80 20    	mov.w     #0x804, w0
    250a:	10 00 90    	mov.w     [w0+2], w0
    250c:	10 68 88    	mov.w     w0, 0xd02
    250e:	40 80 20    	mov.w     #0x804, w0
    2510:	20 00 90    	mov.w     [w0+4], w0
    2512:	20 68 88    	mov.w     w0, 0xd04
    2514:	40 80 20    	mov.w     #0x804, w0
    2516:	30 00 90    	mov.w     [w0+6], w0
    2518:	30 68 88    	mov.w     w0, 0xd06
    251a:	20 46 22    	mov.w     #0x2462, w0
    251c:	70 69 88    	mov.w     w0, 0xd2e
    251e:	36 00 37    	bra       0x258c <.L2>

00002520 <.L7>:
    2520:	30 60 80    	mov.w     0xc06, w0
    2522:	a1 81 20    	mov.w     #0x81a, w1
    2524:	91 40 78    	mov.b     [w1], w1
    2526:	01 48 78    	mov.b     w1, [w0]
    2528:	30 60 80    	mov.w     0xc06, w0
    252a:	00 00 e8    	inc.w     w0, w0
    252c:	a1 81 20    	mov.w     #0x81a, w1
    252e:	91 40 90    	mov.b     [w1+1], w1
    2530:	01 48 78    	mov.b     w1, [w0]
    2532:	30 60 80    	mov.w     0xc06, w0
    2534:	00 80 e8    	inc2.w    w0, w0
    2536:	a1 81 20    	mov.w     #0x81a, w1
    2538:	a1 40 90    	mov.b     [w1+2], w1
    253a:	01 48 78    	mov.b     w1, [w0]
    253c:	30 60 80    	mov.w     0xc06, w0
    253e:	63 00 40    	add.w     w0, #0x3, w0
    2540:	a1 81 20    	mov.w     #0x81a, w1
    2542:	b1 40 90    	mov.b     [w1+3], w1
    2544:	01 48 78    	mov.b     w1, [w0]
    2546:	30 60 80    	mov.w     0xc06, w0
    2548:	64 00 40    	add.w     w0, #0x4, w0
    254a:	a1 81 20    	mov.w     #0x81a, w1
    254c:	c1 40 90    	mov.b     [w1+4], w1
    254e:	01 48 78    	mov.b     w1, [w0]
    2550:	30 60 80    	mov.w     0xc06, w0
    2552:	65 00 40    	add.w     w0, #0x5, w0
    2554:	a1 81 20    	mov.w     #0x81a, w1
    2556:	d1 40 90    	mov.b     [w1+5], w1
    2558:	01 48 78    	mov.b     w1, [w0]
    255a:	30 60 80    	mov.w     0xc06, w0
    255c:	66 00 40    	add.w     w0, #0x6, w0
    255e:	a1 81 20    	mov.w     #0x81a, w1
    2560:	e1 40 90    	mov.b     [w1+6], w1
    2562:	01 48 78    	mov.b     w1, [w0]
    2564:	40 c0 20    	mov.w     #0xc04, w0
    2566:	71 c0 b3    	mov.b     #0x7, w1
    2568:	01 48 78    	mov.b     w1, [w0]
    256a:	50 c0 20    	mov.w     #0xc05, w0
    256c:	81 cc b3    	mov.b     #0xc8, w1
    256e:	01 48 78    	mov.b     w1, [w0]
    2570:	0d 00 37    	bra       0x258c <.L2>

00002572 <.L8>:
    2572:	40 80 20    	mov.w     #0x804, w0
    2574:	10 00 90    	mov.w     [w0+2], w0
    2576:	10 41 88    	mov.w     w0, 0x822
    2578:	40 c0 20    	mov.w     #0xc04, w0
    257a:	80 40 eb    	clr.b     w1
    257c:	01 48 78    	mov.b     w1, [w0]
    257e:	50 c0 20    	mov.w     #0xc05, w0
    2580:	81 cc b3    	mov.b     #0xc8, w1
    2582:	01 48 78    	mov.b     w1, [w0]
    2584:	03 00 37    	bra       0x258c <.L2>

00002586 <.L3>:
    2586:	0c c8 bf    	mov.b     0x80c, WREG
    2588:	00 04 a0    	bset.b    w0, #0x0
    258a:	0c e8 b7    	mov.b     WREG, 0x80c

0000258c <.L2>:
    258c:	00 80 fa    	ulnk      
    258e:	00 00 06    	return    

00002590 <_init_cdc>:
    2590:	00 00 fa    	lnk       #0x0
    2592:	a2 81 20    	mov.w     #0x81a, w2
    2594:	00 20 2c    	mov.w     #0xc200, w0
    2596:	11 00 20    	mov.w     #0x1, w1
    2598:	00 89 be    	mov.d     w0, [w2]
    259a:	a0 81 20    	mov.w     #0x81a, w0
    259c:	80 40 eb    	clr.b     w1
    259e:	41 40 98    	mov.b     w1, [w0+4]
    25a0:	a0 81 20    	mov.w     #0x81a, w0
    25a2:	80 40 eb    	clr.b     w1
    25a4:	51 40 98    	mov.b     w1, [w0+5]
    25a6:	a0 81 20    	mov.w     #0x81a, w0
    25a8:	81 c0 b3    	mov.b     #0x8, w1
    25aa:	61 40 98    	mov.b     w1, [w0+6]
    25ac:	22 28 ef    	clr.w     0x822
    25ae:	20 8c 20    	mov.w     #0x8c2, w0
    25b0:	70 45 88    	mov.w     w0, 0x8ae
    25b2:	00 10 20    	mov.w     #0x100, w0
    25b4:	80 45 88    	mov.w     w0, 0x8b0
    25b6:	00 00 eb    	clr.w     w0
    25b8:	90 45 88    	mov.w     w0, 0x8b2
    25ba:	00 00 eb    	clr.w     w0
    25bc:	a0 45 88    	mov.w     w0, 0x8b4
    25be:	00 00 eb    	clr.w     w0
    25c0:	b0 45 88    	mov.w     w0, 0x8b6
    25c2:	20 9c 20    	mov.w     #0x9c2, w0
    25c4:	c0 45 88    	mov.w     w0, 0x8b8
    25c6:	00 10 20    	mov.w     #0x100, w0
    25c8:	d0 45 88    	mov.w     w0, 0x8ba
    25ca:	00 00 eb    	clr.w     w0
    25cc:	e0 45 88    	mov.w     w0, 0x8bc
    25ce:	00 00 eb    	clr.w     w0
    25d0:	f0 45 88    	mov.w     w0, 0x8be
    25d2:	00 00 eb    	clr.w     w0
    25d4:	00 46 88    	mov.w     w0, 0x8c0
    25d6:	00 80 fa    	ulnk      
    25d8:	00 00 06    	return    

000025da <_cdc_tx_service>:
    25da:	02 00 fa    	lnk       #0x2
    25dc:	50 c1 20    	mov.w     #0xc15, w0
    25de:	10 40 78    	mov.b     [w0], w0
    25e0:	00 04 e0    	cp0.b     w0
    25e2:	34 00 35    	bra       LT, 0x264c <.L12>
    25e4:	b1 45 80    	mov.w     0x8b6, w1
    25e6:	f0 03 20    	mov.w     #0x3f, w0
    25e8:	80 8f 50    	sub.w     w1, w0, [w15]
    25ea:	03 00 3e    	bra       GTU, 0x25f2 <.L14>
    25ec:	b0 45 80    	mov.w     0x8b6, w0
    25ee:	00 4f 78    	mov.b     w0, [w14]
    25f0:	02 00 37    	bra       0x25f6 <.L15>

000025f2 <.L14>:
    25f2:	00 c4 b3    	mov.b     #0x40, w0
    25f4:	00 4f 78    	mov.b     w0, [w14]

000025f6 <.L15>:
    25f6:	00 40 eb    	clr.b     w0
    25f8:	10 47 98    	mov.b     w0, [w14+1]
    25fa:	15 00 37    	bra       0x2626 <.L16>

000025fc <.L18>:
    25fc:	b1 60 80    	mov.w     0xc16, w1
    25fe:	1e 40 90    	mov.b     [w14+1], w0
    2600:	00 80 fb    	ze        w0, w0
    2602:	00 80 40    	add.w     w1, w0, w0
    2604:	72 45 80    	mov.w     0x8ae, w2
    2606:	91 45 80    	mov.w     0x8b2, w1
    2608:	81 00 41    	add.w     w2, w1, w1
    260a:	91 40 78    	mov.b     [w1], w1
    260c:	01 48 78    	mov.b     w1, [w0]
        else
            packet_length = MAX_PACKET_SIZE;
        for (i = 0; i < packet_length; i++) {
            BD[EP2IN].address[i] = CDC_TX_buffer.data[CDC_TX_buffer.head];
            CDC_TX_buffer.head++;
    260e:	90 45 80    	mov.w     0x8b2, w0
    2610:	00 00 e8    	inc.w     w0, w0
    2612:	90 45 88    	mov.w     w0, 0x8b2
            if (CDC_TX_buffer.head == CDC_TX_buffer.length)
    2614:	91 45 80    	mov.w     0x8b2, w1
    2616:	80 45 80    	mov.w     0x8b0, w0
    2618:	80 8f 50    	sub.w     w1, w0, [w15]
    261a:	02 00 3a    	bra       NZ, 0x2620 <.L17>
                CDC_TX_buffer.head = 0;
    261c:	00 00 eb    	clr.w     w0
    261e:	90 45 88    	mov.w     w0, 0x8b2

00002620 <.L17>:
    2620:	1e 40 90    	mov.b     [w14+1], w0
    2622:	00 40 e8    	inc.b     w0, w0
    2624:	10 47 98    	mov.b     w0, [w14+1]

00002626 <.L16>:
    2626:	1e 40 90    	mov.b     [w14+1], w0
    2628:	9e 4f 50    	sub.b     w0, [w14], [w15]
    262a:	e8 ff 39    	bra       NC, 0x25fc <.L18>
        }
        CDC_TX_buffer.count -= packet_length;
    262c:	b1 45 80    	mov.w     0x8b6, w1
    262e:	1e 80 fb    	ze        [w14], w0
    2630:	00 80 50    	sub.w     w1, w0, w0
    2632:	b0 45 88    	mov.w     w0, 0x8b6
        BD[EP2IN].bytecount = packet_length;
    2634:	40 c1 20    	mov.w     #0xc14, w0
    2636:	1e 48 78    	mov.b     [w14], [w0]
        BD[EP2IN].status = ((BD[EP2IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    2638:	50 c1 20    	mov.w     #0xc15, w0
    263a:	10 40 78    	mov.b     [w0], w0
    263c:	00 c0 ea    	com.b     w0, w0
    263e:	02 c4 b3    	mov.b     #0x40, w2
    2640:	82 40 60    	and.b     w0, w2, w1
    2642:	80 c8 b3    	mov.b     #0x88, w0
    2644:	00 c0 70    	ior.b     w1, w0, w0
    2646:	80 40 78    	mov.b     w0, w1
    2648:	50 c1 20    	mov.w     #0xc15, w0
    264a:	01 48 78    	mov.b     w1, [w0]

0000264c <.L12>:
    }
}
    264c:	00 80 fa    	ulnk      
    264e:	00 00 06    	return    

00002650 <_cdc_rx_service>:

void cdc_rx_service(void) {
    2650:	02 00 fa    	lnk       #0x2
    uint8_t i;

    if (!(BD[EP2OUT].status & UOWN)) {  // see if UOWN bit of EP2 OUT status register is clear (i.e., PIC owns EP2 OUT buffer)
    2652:	10 c1 20    	mov.w     #0xc11, w0
    2654:	10 40 78    	mov.b     [w0], w0
    2656:	00 04 e0    	cp0.b     w0
    2658:	38 00 35    	bra       LT, 0x26ca <.L19>
        if ((BD[EP2OUT].bytecount + CDC_RX_buffer.count) <= CDC_RX_buffer.length) {
    265a:	00 c1 20    	mov.w     #0xc10, w0
    265c:	10 40 78    	mov.b     [w0], w0
    265e:	80 80 fb    	ze        w0, w1
    2660:	00 46 80    	mov.w     0x8c0, w0
    2662:	80 80 40    	add.w     w1, w0, w1
    2664:	d0 45 80    	mov.w     0x8ba, w0
    2666:	80 8f 50    	sub.w     w1, w0, [w15]
    2668:	2d 00 3e    	bra       GTU, 0x26c4 <.L21>
            for (i = 0; i < BD[EP2OUT].bytecount; i++) {
    266a:	00 40 eb    	clr.b     w0
    266c:	00 4f 78    	mov.b     w0, [w14]
    266e:	12 00 37    	bra       0x2694 <.L22>

00002670 <.L24>:
                CDC_RX_buffer.data[CDC_RX_buffer.tail] = BD[EP2OUT].address[i];
    2670:	c1 45 80    	mov.w     0x8b8, w1
    2672:	f0 45 80    	mov.w     0x8be, w0
    2674:	00 80 40    	add.w     w1, w0, w0
    2676:	92 60 80    	mov.w     0xc12, w2
    2678:	9e 80 fb    	ze        [w14], w1
    267a:	81 00 41    	add.w     w2, w1, w1
    267c:	91 40 78    	mov.b     [w1], w1
    267e:	01 48 78    	mov.b     w1, [w0]
                CDC_RX_buffer.tail++;
    2680:	f0 45 80    	mov.w     0x8be, w0
    2682:	00 00 e8    	inc.w     w0, w0
    2684:	f0 45 88    	mov.w     w0, 0x8be
                if (CDC_RX_buffer.tail == CDC_RX_buffer.length)
    2686:	f1 45 80    	mov.w     0x8be, w1
    2688:	d0 45 80    	mov.w     0x8ba, w0
    268a:	80 8f 50    	sub.w     w1, w0, [w15]
    268c:	02 00 3a    	bra       NZ, 0x2692 <.L23>
                    CDC_RX_buffer.tail = 0;
    268e:	00 00 eb    	clr.w     w0
    2690:	f0 45 88    	mov.w     w0, 0x8be

00002692 <.L23>:
    2692:	1e 4f e8    	inc.b     [w14], [w14]

00002694 <.L22>:
    2694:	00 c1 20    	mov.w     #0xc10, w0
    2696:	10 40 78    	mov.b     [w0], w0
    2698:	9e 4f 50    	sub.b     w0, [w14], [w15]
    269a:	ea ff 3e    	bra       GTU, 0x2670 <.L24>
            }
            CDC_RX_buffer.count += BD[EP2OUT].bytecount;
    269c:	01 46 80    	mov.w     0x8c0, w1
    269e:	00 c1 20    	mov.w     #0xc10, w0
    26a0:	10 40 78    	mov.b     [w0], w0
    26a2:	00 80 fb    	ze        w0, w0
    26a4:	00 80 40    	add.w     w1, w0, w0
    26a6:	00 46 88    	mov.w     w0, 0x8c0
            BD[EP2OUT].bytecount = 64;
    26a8:	00 c1 20    	mov.w     #0xc10, w0
    26aa:	01 c4 b3    	mov.b     #0x40, w1
    26ac:	01 48 78    	mov.b     w1, [w0]
            BD[EP2OUT].status = ((BD[EP2OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    26ae:	10 c1 20    	mov.w     #0xc11, w0
    26b0:	10 40 78    	mov.b     [w0], w0
    26b2:	00 c0 ea    	com.b     w0, w0
    26b4:	02 c4 b3    	mov.b     #0x40, w2
    26b6:	82 40 60    	and.b     w0, w2, w1
    26b8:	80 c8 b3    	mov.b     #0x88, w0
    26ba:	00 c0 70    	ior.b     w1, w0, w0
    26bc:	80 40 78    	mov.b     w0, w1
    26be:	10 c1 20    	mov.w     #0xc11, w0
    26c0:	01 48 78    	mov.b     w1, [w0]
    26c2:	03 00 37    	bra       0x26ca <.L19>

000026c4 <.L21>:
        } else
            USB_error_flags |= REQUEST_ERROR;
    26c4:	0c c8 bf    	mov.b     0x80c, WREG
    26c6:	00 04 a0    	bset.b    w0, #0x0
    26c8:	0c e8 b7    	mov.b     WREG, 0x80c

000026ca <.L19>:
    }
}
    26ca:	00 80 fa    	ulnk      
    26cc:	00 00 06    	return    

000026ce <_cdc_putc>:

void cdc_putc(uint8_t ch) {
    26ce:	02 00 fa    	lnk       #0x2
    26d0:	00 4f 78    	mov.b     w0, [w14]
    while (CDC_TX_buffer.count == CDC_TX_buffer.length) {
    26d2:	00 00 00    	nop       

000026d4 <.L26>:
    26d4:	b1 45 80    	mov.w     0x8b6, w1
    26d6:	80 45 80    	mov.w     0x8b0, w0
    26d8:	80 8f 50    	sub.w     w1, w0, [w15]
    26da:	fc ff 32    	bra       Z, 0x26d4 <.L26>
#ifndef USB_INTERRUPT
        usb_service();
#endif
    }
    disable_interrupts();
    26dc:	ff 3f fc    	disi      #0x3fff
    CDC_TX_buffer.data[CDC_TX_buffer.tail] = ch;
    26de:	71 45 80    	mov.w     0x8ae, w1
    26e0:	a0 45 80    	mov.w     0x8b4, w0
    26e2:	00 80 40    	add.w     w1, w0, w0
    26e4:	1e 48 78    	mov.b     [w14], [w0]
    CDC_TX_buffer.tail++;
    26e6:	a0 45 80    	mov.w     0x8b4, w0
    26e8:	00 00 e8    	inc.w     w0, w0
    26ea:	a0 45 88    	mov.w     w0, 0x8b4
    if (CDC_TX_buffer.tail == CDC_TX_buffer.length)
    26ec:	a1 45 80    	mov.w     0x8b4, w1
    26ee:	80 45 80    	mov.w     0x8b0, w0
    26f0:	80 8f 50    	sub.w     w1, w0, [w15]
    26f2:	02 00 3a    	bra       NZ, 0x26f8 <.L27>
        CDC_TX_buffer.tail = 0;
    26f4:	00 00 eb    	clr.w     w0
    26f6:	a0 45 88    	mov.w     w0, 0x8b4

000026f8 <.L27>:
    CDC_TX_buffer.count++;
    26f8:	b0 45 80    	mov.w     0x8b6, w0
    26fa:	00 00 e8    	inc.w     w0, w0
    26fc:	b0 45 88    	mov.w     w0, 0x8b6
    enable_interrupts();
    26fe:	52 20 ef    	clr.w     0x52
}
    2700:	00 80 fa    	ulnk      
    2702:	00 00 06    	return    

00002704 <_cdc_getc>:

uint8_t cdc_getc(void) {
    2704:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    while (CDC_RX_buffer.count == 0) {
    2706:	00 00 00    	nop       

00002708 <.L29>:
    2708:	00 46 80    	mov.w     0x8c0, w0
    270a:	00 00 e0    	cp0.w     w0
    270c:	fd ff 32    	bra       Z, 0x2708 <.L29>
#ifndef USB_INTERRUPT
        usb_service();
#endif
    }
    disable_interrupts();
    270e:	ff 3f fc    	disi      #0x3fff
    ch = CDC_RX_buffer.data[CDC_RX_buffer.head];
    2710:	c1 45 80    	mov.w     0x8b8, w1
    2712:	e0 45 80    	mov.w     0x8bc, w0
    2714:	00 80 40    	add.w     w1, w0, w0
    2716:	10 4f 78    	mov.b     [w0], [w14]
    CDC_RX_buffer.head++;
    2718:	e0 45 80    	mov.w     0x8bc, w0
    271a:	00 00 e8    	inc.w     w0, w0
    271c:	e0 45 88    	mov.w     w0, 0x8bc
    if (CDC_RX_buffer.head == CDC_RX_buffer.length)
    271e:	e1 45 80    	mov.w     0x8bc, w1
    2720:	d0 45 80    	mov.w     0x8ba, w0
    2722:	80 8f 50    	sub.w     w1, w0, [w15]
    2724:	02 00 3a    	bra       NZ, 0x272a <.L30>
        CDC_RX_buffer.head = 0;
    2726:	00 00 eb    	clr.w     w0
    2728:	e0 45 88    	mov.w     w0, 0x8bc

0000272a <.L30>:
    CDC_RX_buffer.count--;
    272a:	00 46 80    	mov.w     0x8c0, w0
    272c:	00 00 e9    	dec.w     w0, w0
    272e:	00 46 88    	mov.w     w0, 0x8c0
    enable_interrupts();
    2730:	52 20 ef    	clr.w     0x52
    return ch;
    2732:	1e 40 78    	mov.b     [w14], w0
}
    2734:	00 80 fa    	ulnk      
    2736:	00 00 06    	return    

00002738 <_cdc_puts>:

void cdc_puts(uint8_t *str) {
    2738:	02 00 fa    	lnk       #0x2
    273a:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    273c:	04 00 37    	bra       0x2746 <.L32>

0000273e <.L33>:
        cdc_putc(*str++);
    273e:	1e 00 78    	mov.w     [w14], w0
    2740:	10 40 78    	mov.b     [w0], w0
    2742:	1e 0f e8    	inc.w     [w14], [w14]
    2744:	c4 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>

00002746 <.L32>:
    2746:	1e 00 78    	mov.w     [w14], w0
    2748:	10 40 78    	mov.b     [w0], w0
    274a:	00 04 e0    	cp0.b     w0
    274c:	f8 ff 3a    	bra       NZ, 0x273e <.L33>
}
    274e:	00 80 fa    	ulnk      
    2750:	00 00 06    	return    

00002752 <_cdc_gets>:

void cdc_gets(uint8_t *str, uint16_t len) {
    2752:	04 00 fa    	lnk       #0x4
    2754:	00 0f 78    	mov.w     w0, [w14]
    2756:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    2758:	1e 00 90    	mov.w     [w14+2], w0
    275a:	00 00 e0    	cp0.w     w0
    275c:	1a 00 32    	bra       Z, 0x2792 <.L39>
        return;

    if (len == 1) {
    275e:	1e 00 90    	mov.w     [w14+2], w0
    2760:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2762:	04 00 3a    	bra       NZ, 0x276c <.L37>
        *str = '\0';
    2764:	1e 00 78    	mov.w     [w14], w0
    2766:	80 40 eb    	clr.b     w1
    2768:	01 48 78    	mov.b     w1, [w0]
        return;
    276a:	14 00 37    	bra       0x2794 <.L34>

0000276c <.L37>:
    }

    while (1) {
        *str = cdc_getc();
    276c:	cb ff 07    	rcall     0x2704 <_cdc_getc> <.LFB6> <.LFE5>
    276e:	9e 00 78    	mov.w     [w14], w1
    2770:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    2772:	1e 00 78    	mov.w     [w14], w0
    2774:	10 40 78    	mov.b     [w0], w0
    2776:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2778:	08 00 32    	bra       Z, 0x278a <.L38>
    277a:	1e 00 90    	mov.w     [w14+2], w0
    277c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    277e:	05 00 32    	bra       Z, 0x278a <.L38>
            break;
        str++;
    2780:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    2782:	1e 00 90    	mov.w     [w14+2], w0
    2784:	00 00 e9    	dec.w     w0, w0
    2786:	10 07 98    	mov.w     w0, [w14+2]
    }
    2788:	f1 ff 37    	bra       0x276c <.L37>

0000278a <.L38>:
    *str = '\0';
    278a:	1e 00 78    	mov.w     [w14], w0
    278c:	80 40 eb    	clr.b     w1
    278e:	01 48 78    	mov.b     w1, [w0]
    2790:	01 00 37    	bra       0x2794 <.L34>

00002792 <.L39>:
    2792:	00 00 00    	nop       

00002794 <.L34>:
}
    2794:	00 80 fa    	ulnk      
    2796:	00 00 06    	return    

00002798 <_cdc_gets_term>:

void cdc_gets_term(uint8_t *str, uint16_t len) {
    2798:	08 00 fa    	lnk       #0x8
    279a:	20 07 98    	mov.w     w0, [w14+4]
    279c:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    279e:	3e 00 90    	mov.w     [w14+6], w0
    27a0:	00 00 e0    	cp0.w     w0
    27a2:	68 00 32    	bra       Z, 0x2874 <.L53>
        return;

    if (len == 1) {
    27a4:	3e 00 90    	mov.w     [w14+6], w0
    27a6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    27a8:	04 00 3a    	bra       NZ, 0x27b2 <.L43>
        *str = '\0';
    27aa:	2e 00 90    	mov.w     [w14+4], w0
    27ac:	80 40 eb    	clr.b     w1
    27ae:	01 48 78    	mov.b     w1, [w0]
        return;
    27b0:	62 00 37    	bra       0x2876 <.L40>

000027b2 <.L43>:
    }

    cdc_putc(0x1B);                        // Save current cursor position
    27b2:	b0 c1 b3    	mov.b     #0x1b, w0
    27b4:	8c ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    cdc_putc('7');
    27b6:	70 c3 b3    	mov.b     #0x37, w0
    27b8:	8a ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    start = str;
    27ba:	ae 00 90    	mov.w     [w14+4], w1
    27bc:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    27be:	be 00 90    	mov.w     [w14+6], w1
    27c0:	01 0f 78    	mov.w     w1, [w14]
    27c2:	03 00 37    	bra       0x27ca <.L52>

000027c4 <.L54>:
    while (1) {
        *str = cdc_getc();                 // Get a character
        if (*str == '\r')                  // If character is return,
            break;                         //   end the loop.
        if (*str == 0x1B) {                // If character is escape,
            cdc_putc(0x1B);                //   restore cursor position,
            cdc_putc('8');
            cdc_putc(0x1B);                //   clear to end of line, and
            cdc_putc('[');
            cdc_putc('K');
            str = start;                   //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str == '\b') ||              // If character is backspace
            (*str == 0x7F)) {              //   or delete, 
            if (str > start) {             //   and we are not at the start, 
                cdc_putc('\b');            //   erase the last character and
                cdc_putc(' ');
                cdc_putc('\b');
                str--;                     //   back up the pointer,
                left++;
            } else                         //   otherwise
                cdc_putc('\a');            //   send alert/bell character.
            continue;
        }
        if (left == 1) {                   // If string buffer is full,
            cdc_putc('\a');                //   send alert/bell character
            continue;
        }
        if ((*str >= 32) && (*str < 127)) {// If character is printable,
            cdc_putc(*str);                //   echo the received character
            str++;                         //   and advance the pointer.
            left--;
        }
    }
    27c4:	00 00 00    	nop       
    27c6:	01 00 37    	bra       0x27ca <.L52>

000027c8 <.L55>:
    27c8:	00 00 00    	nop       

000027ca <.L52>:
    27ca:	9c ff 07    	rcall     0x2704 <_cdc_getc> <.LFB6> <.LFE5>
    27cc:	ae 00 90    	mov.w     [w14+4], w1
    27ce:	80 48 78    	mov.b     w0, [w1]
    27d0:	2e 00 90    	mov.w     [w14+4], w0
    27d2:	10 40 78    	mov.b     [w0], w0
    27d4:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    27d6:	08 00 3a    	bra       NZ, 0x27e8 <.L44>
    *str = '\0';                           // Terminarte the string with null
    27d8:	2e 00 90    	mov.w     [w14+4], w0
    27da:	80 40 eb    	clr.b     w1
    27dc:	01 48 78    	mov.b     w1, [w0]
    cdc_putc('\n');                        // Send newline and
    27de:	a0 c0 b3    	mov.b     #0xa, w0
    27e0:	76 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    cdc_putc('\r');                        //   carriage return
    27e2:	d0 c0 b3    	mov.b     #0xd, w0
    27e4:	74 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    27e6:	47 00 37    	bra       0x2876 <.L40>

000027e8 <.L44>:
    27e8:	2e 00 90    	mov.w     [w14+4], w0
    27ea:	10 40 78    	mov.b     [w0], w0
    27ec:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    27ee:	0f 00 3a    	bra       NZ, 0x280e <.L45>
    27f0:	b0 c1 b3    	mov.b     #0x1b, w0
    27f2:	6d ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    27f4:	80 c3 b3    	mov.b     #0x38, w0
    27f6:	6b ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    27f8:	b0 c1 b3    	mov.b     #0x1b, w0
    27fa:	69 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    27fc:	b0 c5 b3    	mov.b     #0x5b, w0
    27fe:	67 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    2800:	b0 c4 b3    	mov.b     #0x4b, w0
    2802:	65 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    2804:	9e 00 90    	mov.w     [w14+2], w1
    2806:	21 07 98    	mov.w     w1, [w14+4]
    2808:	be 00 90    	mov.w     [w14+6], w1
    280a:	01 0f 78    	mov.w     w1, [w14]
    280c:	32 00 37    	bra       0x2872 <.L46>

0000280e <.L45>:
    280e:	2e 00 90    	mov.w     [w14+4], w0
    2810:	10 40 78    	mov.b     [w0], w0
    2812:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2814:	05 00 32    	bra       Z, 0x2820 <.L47>
    2816:	2e 00 90    	mov.w     [w14+4], w0
    2818:	90 40 78    	mov.b     [w0], w1
    281a:	f0 c7 b3    	mov.b     #0x7f, w0
    281c:	80 cf 50    	sub.b     w1, w0, [w15]
    281e:	12 00 3a    	bra       NZ, 0x2844 <.L48>

00002820 <.L47>:
    2820:	ae 00 90    	mov.w     [w14+4], w1
    2822:	1e 00 90    	mov.w     [w14+2], w0
    2824:	80 8f 50    	sub.w     w1, w0, [w15]
    2826:	0b 00 36    	bra       LEU, 0x283e <.L49>
    2828:	80 c0 b3    	mov.b     #0x8, w0
    282a:	51 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    282c:	00 c2 b3    	mov.b     #0x20, w0
    282e:	4f ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    2830:	80 c0 b3    	mov.b     #0x8, w0
    2832:	4d ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    2834:	2e 00 90    	mov.w     [w14+4], w0
    2836:	00 00 e9    	dec.w     w0, w0
    2838:	20 07 98    	mov.w     w0, [w14+4]
    283a:	1e 0f e8    	inc.w     [w14], [w14]
    283c:	02 00 37    	bra       0x2842 <.L50>

0000283e <.L49>:
    283e:	70 c0 b3    	mov.b     #0x7, w0
    2840:	46 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>

00002842 <.L50>:
    2842:	17 00 37    	bra       0x2872 <.L46>

00002844 <.L48>:
    2844:	1e 00 78    	mov.w     [w14], w0
    2846:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2848:	03 00 3a    	bra       NZ, 0x2850 <.L51>
    284a:	70 c0 b3    	mov.b     #0x7, w0
    284c:	40 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    284e:	11 00 37    	bra       0x2872 <.L46>

00002850 <.L51>:
    2850:	2e 00 90    	mov.w     [w14+4], w0
    2852:	10 40 78    	mov.b     [w0], w0
    2854:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2856:	b6 ff 36    	bra       LEU, 0x27c4 <.L54>
    2858:	2e 00 90    	mov.w     [w14+4], w0
    285a:	90 40 78    	mov.b     [w0], w1
    285c:	e0 c7 b3    	mov.b     #0x7e, w0
    285e:	80 cf 50    	sub.b     w1, w0, [w15]
    2860:	b3 ff 3e    	bra       GTU, 0x27c8 <.L55>
    2862:	2e 00 90    	mov.w     [w14+4], w0
    2864:	10 40 78    	mov.b     [w0], w0
    2866:	33 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    2868:	2e 00 90    	mov.w     [w14+4], w0
    286a:	00 00 e8    	inc.w     w0, w0
    286c:	20 07 98    	mov.w     w0, [w14+4]
    286e:	1e 0f e9    	dec.w     [w14], [w14]
    2870:	ac ff 37    	bra       0x27ca <.L52>

00002872 <.L46>:
    2872:	ab ff 37    	bra       0x27ca <.L52>

00002874 <.L53>:
    2874:	00 00 00    	nop       

00002876 <.L40>:
}
    2876:	00 80 fa    	ulnk      
    2878:	00 00 06    	return    

0000287a <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    287a:	08 00 fa    	lnk       #0x8
    287c:	10 07 98    	mov.w     w0, [w14+2]
    287e:	21 07 98    	mov.w     w1, [w14+4]
    2880:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    2882:	1e 00 90    	mov.w     [w14+2], w0
    2884:	60 00 40    	add.w     w0, #0x0, w0
    2886:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2888:	0f 00 3e    	bra       GTU, 0x28a8 <.L62>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    288a:	00 00 eb    	clr.w     w0
    288c:	00 0f 78    	mov.w     w0, [w14]
    288e:	07 00 37    	bra       0x289e <.L59>

00002890 <.L60>:
                cdc_putc(*(uint8_t *)buffer++);
    2890:	2e 00 90    	mov.w     [w14+4], w0
    2892:	10 40 78    	mov.b     [w0], w0
    2894:	ae 00 90    	mov.w     [w14+4], w1
    2896:	81 00 e8    	inc.w     w1, w1
    2898:	21 07 98    	mov.w     w1, [w14+4]
    289a:	19 ff 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    289c:	1e 0f e8    	inc.w     [w14], [w14]

0000289e <.L59>:
    289e:	9e 00 78    	mov.w     [w14], w1
    28a0:	3e 00 90    	mov.w     [w14+6], w0
    28a2:	80 8f 50    	sub.w     w1, w0, [w15]
    28a4:	f5 ff 39    	bra       NC, 0x2890 <.L60>
            break;
    28a6:	01 00 37    	bra       0x28aa <.L61>

000028a8 <.L62>:
        default:
            break;
    28a8:	00 00 00    	nop       

000028aa <.L61>:
    }
    return len;
    28aa:	3e 00 90    	mov.w     [w14+6], w0
}
    28ac:	00 80 fa    	ulnk      
    28ae:	00 00 06    	return    
Disassembly of section .dinit:

000028b0 <.dinit>:
    28b0:	24 08 00    	nop       
    28b2:	9e 02 00    	nop       
    28b4:	80 00 00    	nop       
    28b6:	1a 08 00    	nop       
    28b8:	0a 00 00    	nop       
    28ba:	80 00 00    	nop       
    28bc:	80 0c 00    	nop       
    28be:	ce 00 00    	nop       
    28c0:	80 00 00    	nop       
    28c2:	00 0c 00    	nop       
    28c4:	80 00 00    	nop       
    28c6:	80 00 00    	nop       
    28c8:	00 08 00    	nop       
    28ca:	1a 00 00    	nop       
    28cc:	80 00 00    	nop       
    28ce:	c2 0a 00    	nop       
    28d0:	88 00 00    	nop       
    28d2:	82 00 00    	nop       
    28d4:	01 00 00    	nop       
    28d6:	00 e8 0a    	.pword 0x0ae800
    28d8:	e9 0a e8    	.pword 0xe80ae9
    28da:	0a e8 0a    	.pword 0x0ae80a
    28dc:	e8 0a e8    	.pword 0xe80ae8
    28de:	0a d8 0a    	.pword 0x0ad80a
	...
    28ee:	00 02 08    	do        #0x200, 0x2af4
    28f0:	01 01 10 
    28f2:	0b 11 0b    	.pword 0x0b110b
    28f4:	10 0b 10    	subr.w    w0, [w0], [w6]
    28f6:	0b 10 0b    	.pword 0x0b100b
    28f8:	10 0b 00    	nop       
    28fa:	0b 00 00    	nop       
	...
    2908:	00 00 02    	call      0x2080000 <.LFE0+0x207d570>
    290a:	08 02 02 
    290c:	38 0b 39    	bra       NC, 0x3f7e
    290e:	0b 38 0b    	.pword 0x0b380b
    2910:	38 0b 38    	bra       NOV, 0x3f82
    2912:	0b 38 0b    	.pword 0x0b380b
    2914:	28 0b 00    	nop       
	...
    2924:	c2 0a ea    	neg.w     [--w2], [w5]
    2926:	0a 12 0b    	.pword 0x0b120a
	...
    2930:	68 0b 00    	nop       
    2932:	02 00 00    	nop       
    2934:	80 00 00    	nop       
    2936:	4a 0b 00    	nop       
    2938:	1a 00 00    	nop       
    293a:	82 00 00    	nop       
    293c:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    293e:	74 7a 4c    	.pword 0x4c7a74
    2940:	00 00 01    	call      w0
    2942:	00 02 00    	nop       
    2944:	04 00 08    	do        #0x4, 0x4948
    2946:	00 10 00 
    2948:	00 00 20    	mov.w     #0x0, w0
    294a:	2b 2d 23    	mov.w     #0x32d2, w11
    294c:	30 00 00    	nop       
    294e:	6a 0b 00    	nop       
    2950:	02 00 00    	nop       
    2952:	82 00 00    	nop       
    2954:	04 00 00    	nop       
    2956:	64 0b 00    	nop       
    2958:	04 00 00    	nop       
    295a:	80 00 00    	nop       
    295c:	6c 0b 00    	nop       
    295e:	02 00 00    	nop       
    2960:	80 00 00    	nop       
    2962:	00 00 00    	nop       
Disassembly of section .text:

00002964 <_set_config_callback>:
    2964:	00 00 fa    	lnk       #0x0
    2966:	00 4b 22    	mov.w     #0x24b0, w0
    2968:	b0 40 88    	mov.w     w0, 0x816
    296a:	c0 c0 20    	mov.w     #0xc0c, w0
    296c:	80 40 eb    	clr.b     w1
    296e:	01 48 78    	mov.b     w1, [w0]
    2970:	40 82 20    	mov.w     #0x824, w0
    2972:	70 60 88    	mov.w     w0, 0xc0e
    2974:	d0 c0 20    	mov.w     #0xc0d, w0
    2976:	81 cc b3    	mov.b     #0xc8, w1
    2978:	01 48 78    	mov.b     w1, [w0]
    297a:	50 00 20    	mov.w     #0x5, w0
    297c:	60 25 88    	mov.w     w0, 0x4ac
    297e:	00 c1 20    	mov.w     #0xc10, w0
    2980:	01 c4 b3    	mov.b     #0x40, w1
    2982:	01 48 78    	mov.b     w1, [w0]
    2984:	e0 82 20    	mov.w     #0x82e, w0
    2986:	90 60 88    	mov.w     w0, 0xc12
    2988:	10 c1 20    	mov.w     #0xc11, w0
    298a:	81 c8 b3    	mov.b     #0x88, w1
    298c:	01 48 78    	mov.b     w1, [w0]
    298e:	00 65 22    	mov.w     #0x2650, w0
    2990:	90 69 88    	mov.w     w0, 0xd32
    2992:	40 c1 20    	mov.w     #0xc14, w0
    2994:	80 40 eb    	clr.b     w1
    2996:	01 48 78    	mov.b     w1, [w0]
    2998:	e0 86 20    	mov.w     #0x86e, w0
    299a:	b0 60 88    	mov.w     w0, 0xc16
    299c:	50 c1 20    	mov.w     #0xc15, w0
    299e:	81 cc b3    	mov.b     #0xc8, w1
    29a0:	01 48 78    	mov.b     w1, [w0]
    29a2:	d0 01 20    	mov.w     #0x1d, w0
    29a4:	70 25 88    	mov.w     w0, 0x4ae
    29a6:	a0 5d 22    	mov.w     #0x25da, w0
    29a8:	90 68 88    	mov.w     w0, 0xd12
    29aa:	00 80 fa    	ulnk      
    29ac:	00 00 06    	return    

000029ae <_main>:
    29ae:	50 00 fa    	lnk       #0x50
    29b0:	1c 00 07    	rcall     0x29ea <_init_elecanisms> <.L0> <.LFB0> <.LFE1> <.Letext0> <.Ltext0>
    29b2:	ee fd 07    	rcall     0x2590 <_init_cdc> <.LFB2> <.LFE1>
    29b4:	40 96 22    	mov.w     #0x2964, w0
    29b6:	90 40 88    	mov.w     w0, 0x812
    29b8:	c8 f8 07    	rcall     0x1b4a <_init_usb> <.LFB3> <.LFE2>
    29ba:	00 00 00    	nop       

000029bc <.L3>:
    29bc:	10 c8 bf    	mov.b     0x810, WREG
    29be:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    29c0:	fd ff 3a    	bra       NZ, 0x29bc <.L3>
    29c2:	40 ad 29    	mov.w     #0x9ad4, w0
    29c4:	80 1f 78    	mov.w     w0, [w15++]
    29c6:	7c f4 07    	rcall     0x12c0 <__printf_s> <__printf_0>
    29c8:	8f 87 e9    	dec2.w    w15, w15

000029ca <.L4>:
    29ca:	40 ae 29    	mov.w     #0x9ae4, w0
    29cc:	b5 fe 07    	rcall     0x2738 <_cdc_puts> <.LFB7> <.LFE6>
    29ce:	01 05 20    	mov.w     #0x50, w1
    29d0:	0e 00 78    	mov.w     w14, w0
    29d2:	e2 fe 07    	rcall     0x2798 <_cdc_gets_term> <.LFB9> <.LFE8>
    29d4:	20 c2 b3    	mov.b     #0x22, w0
    29d6:	7b fe 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    29d8:	0e 00 78    	mov.w     w14, w0
    29da:	ae fe 07    	rcall     0x2738 <_cdc_puts> <.LFB7> <.LFE6>
    29dc:	20 c2 b3    	mov.b     #0x22, w0
    29de:	77 fe 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    29e0:	a0 c0 b3    	mov.b     #0xa, w0
    29e2:	75 fe 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    29e4:	d0 c0 b3    	mov.b     #0xd, w0
    29e6:	73 fe 07    	rcall     0x26ce <_cdc_putc> <.LFB5> <.LFE4>
    29e8:	f0 ff 37    	bra       0x29ca <.L4>

000029ea <_init_elecanisms>:
    29ea:	00 00 fa    	lnk       #0x0
    29ec:	00 10 20    	mov.w     #0x100, w0
    29ee:	20 3a 88    	mov.w     w0, 0x744
    29f0:	d8 a2 a8    	bset.b    0x2d8, #0x5
    29f2:	d8 82 a8    	bset.b    0x2d8, #0x4
    29f4:	e8 82 a8    	bset.b    0x2e8, #0x4
    29f6:	e8 a2 a8    	bset.b    0x2e8, #0x5
    29f8:	c9 e2 a8    	bset.b    0x2c9, #0x7
    29fa:	e8 62 a8    	bset.b    0x2e8, #0x3
    29fc:	d9 02 a8    	bset.b    0x2d9, #0x0
    29fe:	d9 62 a8    	bset.b    0x2d9, #0x3
    2a00:	d9 22 a8    	bset.b    0x2d9, #0x1
    2a02:	d9 42 a8    	bset.b    0x2d9, #0x2
    2a04:	d8 02 a8    	bset.b    0x2d8, #0x0
    2a06:	d8 22 a8    	bset.b    0x2d8, #0x1
    2a08:	d8 42 a8    	bset.b    0x2d8, #0x2
    2a0a:	d8 62 a8    	bset.b    0x2d8, #0x3
    2a0c:	c8 a2 a8    	bset.b    0x2c8, #0x5
    2a0e:	c8 82 a8    	bset.b    0x2c8, #0x4
    2a10:	c8 62 a8    	bset.b    0x2c8, #0x3
    2a12:	c8 42 a8    	bset.b    0x2c8, #0x2
    2a14:	c8 22 a8    	bset.b    0x2c8, #0x1
    2a16:	c8 02 a8    	bset.b    0x2c8, #0x0
    2a18:	f0 03 20    	mov.w     #0x3f, w0
    2a1a:	10 27 88    	mov.w     w0, 0x4e2
    2a1c:	e4 24 ef    	clr.w     0x4e4
    2a1e:	e6 24 ef    	clr.w     0x4e6
    2a20:	ea 24 ef    	clr.w     0x4ea
    2a22:	ec 24 ef    	clr.w     0x4ec
    2a24:	00 0e 20    	mov.w     #0xe0, w0
    2a26:	00 19 88    	mov.w     w0, 0x320
    2a28:	22 23 ef    	clr.w     0x322
    2a2a:	00 c4 20    	mov.w     #0xc40, w0
    2a2c:	20 19 88    	mov.w     w0, 0x324
    2a2e:	50 00 20    	mov.w     #0x5, w0
    2a30:	40 19 88    	mov.w     w0, 0x328
    2a32:	21 e3 a8    	bset.b    0x321, #0x7
    2a34:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    2a36:	dc e2 a9    	bclr.b    0x2dc, #0x7
    2a38:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2a3a:	ec 02 a9    	bclr.b    0x2ec, #0x0
    2a3c:	e8 22 a9    	bclr.b    0x2e8, #0x1
    2a3e:	ec 22 a9    	bclr.b    0x2ec, #0x1
    2a40:	d1 e2 a8    	bset.b    0x2d1, #0x7
    2a42:	d1 82 a8    	bset.b    0x2d1, #0x4
    2a44:	c9 82 a8    	bset.b    0x2c9, #0x4
    2a46:	00 80 fa    	ulnk      
    2a48:	00 00 06    	return    

00002a4a <_read_analog>:
    2a4a:	02 00 fa    	lnk       #0x2
    2a4c:	00 0f 78    	mov.w     w0, [w14]
    2a4e:	9e 00 78    	mov.w     [w14], w1
    2a50:	41 19 88    	mov.w     w1, 0x328
    2a52:	20 23 a8    	bset.b    0x320, #0x1
    2a54:	00 00 00    	nop       

00002a56 <.L3>:
    2a56:	00 19 80    	mov.w     0x320, w0
    2a58:	61 00 60    	and.w     w0, #0x1, w0
    2a5a:	00 00 e0    	cp0.w     w0
    2a5c:	fc ff 32    	bra       Z, 0x2a56 <.L3>
    2a5e:	00 18 80    	mov.w     0x300, w0
    2a60:	00 80 fa    	ulnk      
    2a62:	00 00 06    	return    
Disassembly of section .isr.text:

00002a64 <__USB1Interrupt>:
void usb_standard_requests(void);
void usb_process_setup_token(void);

#ifdef USB_INTERRUPT
void __attribute__((interrupt, auto_psv)) _USB1Interrupt(void) {
    2a64:	36 00 f8    	push      0x36
    2a66:	80 9f be    	mov.d     w0, [w15++]
    2a68:	82 9f be    	mov.d     w2, [w15++]
    2a6a:	84 9f be    	mov.d     w4, [w15++]
    2a6c:	86 9f be    	mov.d     w6, [w15++]
    2a6e:	32 00 f8    	push      0x32
    2a70:	34 00 f8    	push      0x34
    2a72:	10 00 20    	mov.w     #0x1, w0
    2a74:	a0 01 88    	mov.w     w0, 0x34
    2a76:	00 20 20    	mov.w     #0x200, w0
    2a78:	90 01 88    	mov.w     w0, 0x32
    2a7a:	00 00 fa    	lnk       #0x0
    usb_service();
    2a7c:	a3 f8 07    	rcall     0x1bc4 <_usb_service> <.LFB4> <.LFE3>
}
    2a7e:	00 80 fa    	ulnk      
    2a80:	34 00 f9    	pop       0x34
    2a82:	32 00 f9    	pop       0x32
    2a84:	4f 03 be    	mov.d     [--w15], w6
    2a86:	4f 02 be    	mov.d     [--w15], w4
    2a88:	4f 01 be    	mov.d     [--w15], w2
    2a8a:	4f 00 be    	mov.d     [--w15], w0
    2a8c:	36 00 f9    	pop       0x36
    2a8e:	00 40 06    	retfie    
Disassembly of section .isr:

00002a90 <__DefaultInterrupt>:
    2a90:	00 40 da    	break     
    2a92:	00 00 fe    	reset     
